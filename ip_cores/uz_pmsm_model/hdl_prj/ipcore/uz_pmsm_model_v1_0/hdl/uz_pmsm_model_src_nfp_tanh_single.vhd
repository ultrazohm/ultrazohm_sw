-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pmsm_model\uz_pmsm_model_src_nfp_tanh_single.vhd
-- Created: 2024-05-23 13:50:31
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_src_nfp_tanh_single
-- Source Path: uz_pmsm_model/uz_pmsm_model/nfp_tanh_single
-- Hierarchy Level: 1
-- Model version: 7.0
-- 
-- {Latency Strategy = "Min"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_src_uz_pmsm_model_pkg.ALL;

ENTITY uz_pmsm_model_src_nfp_tanh_single IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        nfp_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_pmsm_model_src_nfp_tanh_single;


ARCHITECTURE rtl OF uz_pmsm_model_src_nfp_tanh_single IS

  -- Signals
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay4_out1                      : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay3_out1                      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Add_add_cast                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay1_out1                      : std_logic;  -- ufix1
  SIGNAL nfp_in_unsigned                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay_out1                       : std_logic;  -- ufix1
  SIGNAL Delay6_reg                       : std_logic_vector(22 DOWNTO 0);  -- ufix1 [23]
  SIGNAL Delay6_out1                      : std_logic;  -- ufix1
  SIGNAL Constant1_out1                   : std_logic;  -- ufix1
  SIGNAL Switch1_out1                     : std_logic;  -- ufix1
  SIGNAL Delay3_out1_1                    : std_logic;  -- ufix1
  SIGNAL Delay1_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aExponent_cfType_Exponent_I_1_out1 : std_logic;  -- ufix1
  SIGNAL aExponent_cfType_Exponent_I_2_out1 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL Delay9_reg                       : std_logic_vector(22 DOWNTO 0);  -- ufix1 [23]
  SIGNAL Delay9_out1                      : std_logic;  -- ufix1
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL alpha127_6_out1                  : std_logic;  -- ufix1
  SIGNAL Delay8_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay8_out1                      : std_logic;  -- ufix1
  SIGNAL Delay31_out1                     : std_logic;  -- ufix1
  SIGNAL Delay46_reg                      : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL Delay46_out1                     : std_logic;  -- ufix1
  SIGNAL Delay8_reg_1                     : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay8_out1_1                    : std_logic;  -- ufix1
  SIGNAL Delay7_out1                      : std_logic;  -- ufix1
  SIGNAL Constant_out1                    : std_logic;  -- ufix1
  SIGNAL Delay3_out1_2                    : std_logic;  -- ufix1
  SIGNAL Constant3_out1                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Constant3_out1_1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant_out1_1                  : std_logic;  -- ufix1
  SIGNAL Delay2_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL reinterpretcast_mant_cor_nume_out1 : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Delay11_reg                      : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL Delay11_out1                     : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Delay34_out1                     : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Delay50_reg                      : vector_of_unsigned24(0 TO 6);  -- ufix24 [7]
  SIGNAL Delay50_out1                     : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Delay13_reg                      : vector_of_unsigned24(0 TO 4);  -- ufix24 [5]
  SIGNAL Delay13_out1                     : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Constant4_out1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Bit_Concat2_out1                 : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL Data_Type_Conversion2_out1       : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Switch4_out1                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL cast_1_like_mant_frac_out1       : unsigned(34 DOWNTO 0);  -- ufix35_En33
  SIGNAL alpha0_out1_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL alpha0_out1_2                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Log2_E_out1                      : unsigned(33 DOWNTO 0);  -- ufix34_En33
  SIGNAL alpha2_out1                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Bit_Concat_out1_1                : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL Data_Type_Conversion_out1        : unsigned(33 DOWNTO 0);  -- ufix34_En33
  SIGNAL Switch_out1                      : unsigned(33 DOWNTO 0);  -- ufix34_En33
  SIGNAL tmp1_1_66096404753625392914_mul_temp : unsigned(57 DOWNTO 0);  -- ufix58_En56
  SIGNAL tmp1_1_66096404753625392914_out1 : unsigned(34 DOWNTO 0);  -- ufix35_En33
  SIGNAL Delay_reg                        : vector_of_unsigned35(0 TO 1);  -- ufix35 [2]
  SIGNAL Delay_out1_1                     : unsigned(34 DOWNTO 0);  -- ufix35_En33
  SIGNAL BitSlice_out1                    : std_logic;  -- ufix1
  SIGNAL Delay1_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay1_out1_3                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha1_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL exp_cor_1_add_temp               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL exp_cor_1_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay2_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_tmp2_tmp2_WordLength_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Concat_out1_2                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL cast_cfType_ExponentBias_lik_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL exp_tmp_cast_cfType_Exponent_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL BitSlice_out1_1                  : std_logic;  -- ufix1
  SIGNAL alpha3_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL BitSlice2_out1                   : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL reinterpretcast_bitsliceget_t_out1 : unsigned(33 DOWNTO 0);  -- ufix34_En33
  SIGNAL BitSlice1_out1                   : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL reinterpretcast_bitsliceget_t_out1_1 : unsigned(33 DOWNTO 0);  -- ufix34_En33
  SIGNAL if_bitget_tmp2_tmp2_WordLength_1_out1 : unsigned(33 DOWNTO 0);  -- ufix34_En33
  SIGNAL Bit_Concat3_out1                 : unsigned(41 DOWNTO 0);  -- ufix42
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_1 : unsigned(38 DOWNTO 0);  -- ufix39_En33
  SIGNAL DTC2_out1                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dynamic_shift_cast               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitsll_tmp1_shift_length_out1    : unsigned(38 DOWNTO 0);  -- ufix39_En33
  SIGNAL cast_cfType_ExponentBias_lik_out1_1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_cfType_ExponentBias_lik_out1_2 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC1_out1                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dynamic_shift_cast_1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic_out1            : unsigned(38 DOWNTO 0);  -- ufix39_En33
  SIGNAL if_shift_sign_out1               : unsigned(38 DOWNTO 0);  -- ufix39_En33
  SIGNAL Delay3_out1_3                    : unsigned(38 DOWNTO 0);  -- ufix39_En33
  SIGNAL BitSlice_out1_2                  : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Bit_Concat_out1_3                : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_2 : unsigned(34 DOWNTO 0);  -- ufix35_En33
  SIGNAL cast_1_like_mant_frac_m_out1     : unsigned(34 DOWNTO 0);  -- ufix35_En33
  SIGNAL BitSlice1_out1_1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL if_sticky_1_out1                 : unsigned(34 DOWNTO 0);  -- ufix35_En33
  SIGNAL Bit_Shift_out1                   : unsigned(34 DOWNTO 0);  -- ufix35_En33
  SIGNAL Data_Type_Conversion_out1_1      : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice_out1_3                  : std_logic;  -- ufix1
  SIGNAL Log2Table_1_out1                 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2Table_1_out1               : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Delay12_out1                     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1                  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_2                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_4                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_2_out1           : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_2_out1      : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_1_out1  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_1 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_1                : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_3                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_5                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_1 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_3_out1           : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_3_out1      : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_1 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1    : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_2 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Delay11_out1_1                   : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_2                : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_4                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_6                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_2 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_4_out1           : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_4_out1      : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_2 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_1  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_3 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_3                : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_5                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_7                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_3 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_5_out1           : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_5_out1      : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_3 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_2  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_4 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Delay13_out1_1                   : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_4                : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_6                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_8                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_4 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_6_out1           : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_6_out1      : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_4 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_3  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_5 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_5                : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_7                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_9                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_5 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_7_out1           : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_7_out1      : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_5 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_4  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_6 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Delay15_out1                     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_6                : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_8                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_10                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_6 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_8_out1           : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_8_out1      : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_6 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_5  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_7 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_7                : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_9                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_11                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_7 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_9_out1           : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_9_out1      : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_7 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_6  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_8 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Delay17_out1                     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_8                : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_10                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_12                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_8 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_10_out1          : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_10_out1     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_8 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_7  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_9 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_9                : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_11                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_13                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_9 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_11_out1          : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_11_out1     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_9 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_8  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_10 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Delay19_out1                     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_10               : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_12                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_14                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_10 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_12_out1          : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_12_out1     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_10 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_9  : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_11 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL bitsll_w_1_out1_11               : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_13                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_15                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_11 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_13_out1          : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Log2MinusTable_int32_13_out1     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_0_out1_11 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL w_Log2MinusTable_int32_2_out1_10 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL if_bitget_w_w_WordLength_1_out1_12 : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL Delay21_out1                     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL BitSlice1_out1_14                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_16                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_12 : std_logic;  -- ufix1
  SIGNAL C1_out1                          : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL C_out1                           : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL if_bitget_w_w_WordLength_1_1_out1 : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Delay11_out1_2                   : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Constant_out1_2                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dtc1_out1_1                      : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL bitsrl_y_int32_2_out1            : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1                      : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1_1                    : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_0_1_out1 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_1 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL Constant_out1_3                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_5                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL dtc1_out1_2                      : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL bitsrl_y_int32_2_out1_1          : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_2                    : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_3                    : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_1 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_2 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Delay10_out1                     : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Constant_out1_4                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat_out1_6                : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL dtc1_out1_3                      : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL bitsrl_y_int32_2_out1_2          : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_4                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_5                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_2 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_3 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Constant_out1_5                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat_out1_7                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL dtc1_out1_4                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL bitsrl_y_int32_2_out1_3          : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_6                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_7                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_3 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_4 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay12_out1_1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Constant_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Concat_out1_8                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL dtc1_out1_5                      : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL bitsrl_y_int32_2_out1_4          : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_8                    : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_9                    : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_4 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_5 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL Constant_out1_7                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Concat_out1_9                : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL dtc1_out1_6                      : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL bitsrl_y_int32_2_out1_5          : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_10                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_11                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_5 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_6 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL Delay14_out1                     : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL Constant_out1_8                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat_out1_10               : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL dtc1_out1_7                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL bitsrl_y_int32_2_out1_6          : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_12                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_13                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_6 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_7 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL bitsrl_y_int32_2_out1_7          : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_14                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_15                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_7 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_8 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay16_out1                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL bitsrl_y_int32_2_out1_8          : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_16                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_17                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_8 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_9 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL bitsrl_y_int32_2_out1_9          : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_18                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_19                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_9 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_10 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay18_out1                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL bitsrl_y_int32_2_out1_10         : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_20                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_21                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_10 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_11 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL bitsrl_y_int32_2_out1_11         : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_22                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_23                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_11 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_12 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay20_out1                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL bitsrl_y_int32_2_out1_12         : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_24                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp1_out1_25                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_12 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_13 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL alpha1_out1_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat1_out1                 : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL reinterpretcast_bitconcat_fi_0_1_out1 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay40_out1                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay44_reg                      : vector_of_signed36(0 TO 6);  -- sfix36 [7]
  SIGNAL Delay44_out1                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Switch1_out1_1                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay1_reg                       : vector_of_signed36(0 TO 1);  -- sfix36 [2]
  SIGNAL Delay1_out1_4                    : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Unary_Minus_cast                 : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Unary_Minus_cast_1               : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Unary_Minus_out1                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Bit_Slice2_out1                  : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Data_Type_Conversion1_out1       : signed(19 DOWNTO 0);  -- sfix20_En18
  SIGNAL Bit_Slice_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Data_Type_Conversion_out1_2      : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL Log2Table_int32_14_out1          : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL Log2MinusTable_int32_14_out1     : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL if_bitget_w_w_WordLength_0_out1_12 : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL w_Log2MinusTable_int32_2_out1_11 : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL if_bitget_w_w_WordLength_1_out1_13 : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL Constant5_out1                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL Bit_Concat3_out1_1               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Data_Type_Conversion3_out1       : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL Switch4_out1_1                   : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL alpha0_693147182464600_out1      : signed(19 DOWNTO 0);  -- sfix20_En18
  SIGNAL alpha0_33333_out1                : signed(19 DOWNTO 0);  -- sfix20_En18
  SIGNAL Switch3_out1                     : signed(19 DOWNTO 0);  -- sfix20_En18
  SIGNAL tmp1_0_69314717873930931_mul_temp : signed(42 DOWNTO 0);  -- sfix43_En39
  SIGNAL tmp1_0_69314717873930931_out1    : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL Delay_reg_1                      : vector_of_signed23(0 TO 1);  -- sfix23 [2]
  SIGNAL Delay_out1_2                     : signed(22 DOWNTO 0);  -- sfix23_En21
  SIGNAL tmp2_y_mul_temp                  : signed(42 DOWNTO 0);  -- sfix43_En39
  SIGNAL tmp2_y_out1                      : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Delay3_reg                       : vector_of_signed21(0 TO 1);  -- sfix21 [2]
  SIGNAL Delay3_out1_4                    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Constant1_out1_1                 : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Constant_out1_9                  : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Switch_out1_1                    : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Delay2_reg                       : vector_of_signed36(0 TO 1);  -- sfix36 [2]
  SIGNAL Delay2_out1_2                    : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Bit_Concat_out1_11               : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL DTC2_out1_1                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL y_tmp3_out1                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay39_out1                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Bit_Slice4_out1                  : std_logic;  -- ufix1
  SIGNAL Constant2_out1                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Bit_Concat1_out1_1               : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL DTC1_out1_8                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay9_out1_1                    : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Switch2_out1                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL alpha1_out1_2                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL BitSlice2_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Concat1_out1_2               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha127_1_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha127_exp_tmp_out1            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_sticky_4_out1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_cfType_ExponentBias_lik_1_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_cfType_ExponentBias_lik_1_out1_1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_cfType_ExponentBias_lik_2_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay30_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_sticky_2_out1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay17_reg                      : vector_of_unsigned8(0 TO 6);  -- ufix8 [7]
  SIGNAL Delay17_out1_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay32_reg                      : vector_of_unsigned8(0 TO 4);  -- ufix8 [5]
  SIGNAL Delay32_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Shift_Arithmetic_out1_1          : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Add_out1_1                       : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay5_out1                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL Start_out1                       : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator4_out1           : std_logic;  -- ufix1
  SIGNAL Start_1_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch_out1_2                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_2_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_3_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL Switch2_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch1_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_4_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_5_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch5_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_6_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_7_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch7_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch6_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch4_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL DTC_out1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Shift_Arithmetic1_out1           : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Bit_Shift_out1_1                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Switch_out1_3                    : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Bit_Slice1_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_12               : unsigned(36 DOWNTO 0);  -- ufix37
  SIGNAL Data_Type_Conversion_out1_3      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Constant2_out1_1                 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Add1_out1                        : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay6_out1_1                    : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Bit_Slice2_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_3               : unsigned(36 DOWNTO 0);  -- ufix37
  SIGNAL Data_Type_Conversion1_out1_1     : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL R_mant_b_norm_out1               : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Bit_Shift_out1_2                 : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL R_mant_b_norm1_out1              : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_4                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay1_out1_5                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay2_out1_3                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_1                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_4                : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_2                       : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Shift_out1_3                 : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_3                       : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay4_out1_1                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add2_out1                        : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_4          : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_13               : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Shift3_out1                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_3                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_5                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_2                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_1                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_2                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_5                : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_1                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_4                       : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_2         : std_logic;  -- ufix1
  SIGNAL Add2_out1_1                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_5          : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_14               : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay10_out1_1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Shift3_out1_1                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_4                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_6                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_3                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay11_out1_3                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_2                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay12_out1_2                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_3                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_6                : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_2                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_5                       : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_3         : std_logic;  -- ufix1
  SIGNAL Delay14_out1_1                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add2_out1_2                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_6          : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_15               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Shift3_out1_2                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_5                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_7                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_4                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_3                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_4                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_7                : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_3                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_6                       : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_4         : std_logic;  -- ufix1
  SIGNAL Add2_out1_3                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_7          : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_16               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Delay5_out1_1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Shift3_out1_3                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_6                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_8                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_5                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay1_out1_6                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_4                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay2_out1_4                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_5                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_8                : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_4                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_7                       : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_5         : std_logic;  -- ufix1
  SIGNAL Delay4_out1_2                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add2_out1_4                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_8          : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_17               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Bit_Shift3_out1_4                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_7                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_9                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_6                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_5                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_6                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_9                : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_5                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_8                       : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_6         : std_logic;  -- ufix1
  SIGNAL Add2_out1_5                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_9          : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_18               : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Delay1_out1_7                    : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Bit_Shift3_out1_5                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_8                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_10                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_7                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay2_out1_5                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_6                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay3_out1_5                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_7                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_10               : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_6                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_9                       : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_7         : std_logic;  -- ufix1
  SIGNAL Delay10_out1_2                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add2_out1_6                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_10         : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_19               : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Bit_Shift3_out1_6                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_9                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_11                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_8                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_7                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_8                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_11               : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_7                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_10                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_8         : std_logic;  -- ufix1
  SIGNAL Add2_out1_7                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_11         : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_20               : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Delay10_out1_3                   : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Bit_Shift3_out1_7                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_10                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_12                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_9                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay11_out1_4                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_8                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay12_out1_3                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_9                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_12               : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_8                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_11                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_9         : std_logic;  -- ufix1
  SIGNAL Delay14_out1_2                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add2_out1_8                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_12         : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_21               : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL Bit_Shift3_out1_8                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_11                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_13                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_10                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_9                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_10                     : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_13               : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_9                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_12                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_10        : std_logic;  -- ufix1
  SIGNAL Add2_out1_9                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_12               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_13         : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_10        : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_22               : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Delay5_out1_2                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Bit_Shift3_out1_9                : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_12                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_14                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_11                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay1_out1_8                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_10               : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Delay2_out1_6                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_11                     : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_14               : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_10               : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_13                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_14                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_11        : std_logic;  -- ufix1
  SIGNAL Delay4_out1_3                    : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add2_out1_10                     : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_13               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_14         : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_11        : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_23               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Shift3_out1_10               : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch1_out1_13                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch_out1_15                   : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Switch2_out1_12                  : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Shift2_out1_11               : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add1_out1_12                     : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice1_out1_15               : std_logic;  -- ufix1
  SIGNAL Bit_Shift1_out1_11               : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Add_out1_14                      : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_12        : std_logic;  -- ufix1
  SIGNAL Delay3_reg_1                     : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL Delay3_out1_6                    : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_15         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_12        : std_logic;  -- ufix1
  SIGNAL Add2_out1_11                     : signed(36 DOWNTO 0);  -- sfix37_En33
  SIGNAL Bit_Slice2_out1_14               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_12        : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_24               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Bit_Slice_out1_16                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice_out1_17                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay2_reg_1                     : vector_of_unsigned24(0 TO 5);  -- ufix24 [6]
  SIGNAL Delay2_out1_7                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch1_out1_14                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay25_out1                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_25               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice1_out1_15                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_13        : std_logic;  -- ufix1
  SIGNAL Delay11_reg_1                    : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL Delay11_out1_5                   : std_logic;  -- ufix1
  SIGNAL Delay37_reg                      : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL Delay37_out1                     : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_17                 : std_logic;  -- ufix1
  SIGNAL Delay28_reg                      : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL Delay28_out1                     : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL cast_2_like_Mant_tmp_out1        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Mant_tmp_cast_2_like_Man_out1    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1_2                 : std_logic;  -- ufix1
  SIGNAL alpha127_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay29_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_sticky_3_out1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay16_reg                      : vector_of_unsigned8(0 TO 6);  -- ufix8 [7]
  SIGNAL Delay16_out1_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay4_reg                       : vector_of_unsigned8(0 TO 4);  -- ufix8 [5]
  SIGNAL Delay4_out1_4                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay4_out1_5                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Add3_out1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant1_out1_2                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Add2_out1_12                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch1_out1_15                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant1_out1_3                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL exp_1_out1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch1_out1_16                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch_out1_16                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay_reg_2                      : vector_of_unsigned8(0 TO 5);  -- ufix8 [6]
  SIGNAL Delay_out1_3                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay24_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_1_like_Exp_out1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_cast_1_like_Exp_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_14        : std_logic;  -- ufix1
  SIGNAL Constant_out1_10                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch_out1_17                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay7_reg                       : vector_of_unsigned8(0 TO 22);  -- ufix8 [23]
  SIGNAL Delay7_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_cfType_Exponent_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant3_out1_2                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay4_out1_6                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL BitSlice3_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_1                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant1_out1_4                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch1_out1_17                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay8_reg_2                     : vector_of_unsigned23(0 TO 22);  -- ufix23 [23]
  SIGNAL Delay8_out1_2                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_cfType_Exponent_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant2_out1_2                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch5_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay5_out1_3                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  Constant8_out1 <= '1';

  Constant7_out1 <= to_unsigned(16#17#, 6);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '1';
      ELSIF enb = '1' THEN
        Delay4_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator_out1 <= Constant8_out1 AND Delay4_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1;
  Add_out1 <= Delay3_out1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 <= Constant7_out1 ELSE
      '0';

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '1';
      ELSIF enb = '1' THEN
        Delay1_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  nfp_in_unsigned <= unsigned(nfp_in);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in_unsigned(31);
  aExponent <= nfp_in_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in_unsigned(22 DOWNTO 0);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= aSign;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay6_reg(0) <= Delay_out1;
        Delay6_reg(22 DOWNTO 1) <= Delay6_reg(21 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(22);

  Constant1_out1 <= '0';

  
  Switch1_out1 <= Delay6_out1 WHEN Delay1_out1 = '0' ELSE
      Constant1_out1;

  Delay3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_1_process;


  Delay1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay1_out1_1 <= aExponent;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  
  aExponent_cfType_Exponent_I_1_out1 <= '1' WHEN Delay1_out1_1 < to_unsigned(16#73#, 8) ELSE
      '0';

  
  aExponent_cfType_Exponent_I_2_out1 <= '1' WHEN Delay1_out1_1 > to_unsigned(16#82#, 8) ELSE
      '0';

  Logical_Operator_out1_1 <= aExponent_cfType_Exponent_I_1_out1 OR aExponent_cfType_Exponent_I_2_out1;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay9_reg(0) <= Logical_Operator_out1_1;
        Delay9_reg(22 DOWNTO 1) <= Delay9_reg(21 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(22);

  alpha0_out1 <= '0';

  
  alpha127_6_out1 <= '1' WHEN Delay1_out1_1 < to_unsigned(16#79#, 8) ELSE
      '0';

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay8_reg(0) <= alpha127_6_out1;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(1);

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay31_out1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  Delay46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay46_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay46_reg(0) <= Delay31_out1;
        Delay46_reg(6 DOWNTO 1) <= Delay46_reg(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay46_process;

  Delay46_out1 <= Delay46_reg(6);

  Delay8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay8_reg_1(0) <= Delay46_out1;
        Delay8_reg_1(4 DOWNTO 1) <= Delay8_reg_1(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay8_1_process;

  Delay8_out1_1 <= Delay8_reg_1(4);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= Delay8_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Constant_out1 <= '1';

  Delay3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= Constant_out1;
      END IF;
    END IF;
  END PROCESS Delay3_2_process;


  Constant3_out1 <= signed'(X"200000000");

  Constant3_out1_1 <= to_unsigned(16#0#, 2);

  Constant_out1_1 <= '1';

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay2_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Bit_Concat_out1 <= Constant_out1_1 & Delay2_out1;

  reinterpretcast_mant_cor_nume_out1 <= Bit_Concat_out1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_reg <= (OTHERS => to_unsigned(16#000000#, 24));
      ELSIF enb = '1' THEN
        Delay11_reg(0) <= reinterpretcast_mant_cor_nume_out1;
        Delay11_reg(1) <= Delay11_reg(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);

  Delay34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay34_out1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay34_out1 <= Delay11_out1;
      END IF;
    END IF;
  END PROCESS Delay34_process;


  Delay50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay50_reg <= (OTHERS => to_unsigned(16#000000#, 24));
      ELSIF enb = '1' THEN
        Delay50_reg(0) <= Delay34_out1;
        Delay50_reg(1 TO 6) <= Delay50_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS Delay50_process;

  Delay50_out1 <= Delay50_reg(6);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_reg <= (OTHERS => to_unsigned(16#000000#, 24));
      ELSIF enb = '1' THEN
        Delay13_reg(0) <= Delay50_out1;
        Delay13_reg(1 TO 4) <= Delay13_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1 <= Delay13_reg(4);

  Constant4_out1 <= to_unsigned(16#000#, 10);

  Bit_Concat2_out1 <= Constant3_out1_1 & Delay13_out1 & Constant4_out1;

  Data_Type_Conversion2_out1 <= signed(Bit_Concat2_out1);

  
  Switch4_out1 <= Constant3_out1 WHEN Delay8_out1_1 = '0' ELSE
      Data_Type_Conversion2_out1;

  cast_1_like_mant_frac_out1 <= unsigned'("01000000000000000000000000000000000");

  alpha0_out1_1 <= to_unsigned(16#0#, 2);

  alpha0_out1_2 <= to_unsigned(16#0#, 3);

  Log2_E_out1 <= unsigned'("1011100010101010001110110010100101");

  alpha2_out1 <= to_unsigned(16#000#, 10);

  Bit_Concat_out1_1 <= reinterpretcast_mant_cor_nume_out1 & alpha2_out1;

  Data_Type_Conversion_out1 <= Bit_Concat_out1_1;

  
  Switch_out1 <= Log2_E_out1 WHEN alpha127_6_out1 = '0' ELSE
      Data_Type_Conversion_out1;

  tmp1_1_66096404753625392914_mul_temp <= reinterpretcast_mant_cor_nume_out1 * Switch_out1;
  tmp1_1_66096404753625392914_out1 <= tmp1_1_66096404753625392914_mul_temp(57 DOWNTO 23);

  Delay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg <= (OTHERS => to_unsigned(0, 35));
      ELSIF enb = '1' THEN
        Delay_reg(0) <= tmp1_1_66096404753625392914_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_1_process;

  Delay_out1_1 <= Delay_reg(1);

  BitSlice_out1 <= Delay_out1_1(34);

  Delay1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_2_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_3 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay1_out1_3 <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS reduced_process;


  alpha1_out1 <= to_unsigned(16#01#, 8);

  exp_cor_1_add_temp <= resize(Delay1_out1_2, 32) + resize(alpha1_out1, 32);
  
  exp_cor_1_out1 <= "11111111" WHEN exp_cor_1_add_temp(31 DOWNTO 8) /= X"000000" ELSE
      exp_cor_1_add_temp(7 DOWNTO 0);

  Delay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_1 <= exp_cor_1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_1_process;


  
  if_bitget_tmp2_tmp2_WordLength_out1 <= Delay1_out1_3 WHEN BitSlice_out1 = '0' ELSE
      Delay2_out1_1;

  Bit_Concat_out1_2 <= alpha0_out1_2 & if_bitget_tmp2_tmp2_WordLength_out1;

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat_out1_2);

  cast_cfType_ExponentBias_lik_out1 <= to_signed(-16#07E#, 11);

  exp_tmp_cast_cfType_Exponent_out1 <= reinterpretcast_bitconcat_fi_0_out1 + cast_cfType_ExponentBias_lik_out1;

  BitSlice_out1_1 <= exp_tmp_cast_cfType_Exponent_out1(10);

  alpha3_out1 <= to_unsigned(16#00#, 8);

  BitSlice2_out1 <= Delay_out1_1(33 DOWNTO 0);

  reinterpretcast_bitsliceget_t_out1 <= BitSlice2_out1;

  BitSlice1_out1 <= Delay_out1_1(34 DOWNTO 1);

  reinterpretcast_bitsliceget_t_out1_1 <= BitSlice1_out1;

  
  if_bitget_tmp2_tmp2_WordLength_1_out1 <= reinterpretcast_bitsliceget_t_out1 WHEN BitSlice_out1 = '0' ELSE
      reinterpretcast_bitsliceget_t_out1_1;

  Bit_Concat3_out1 <= alpha3_out1 & if_bitget_tmp2_tmp2_WordLength_1_out1;

  reinterpretcast_bitconcat_fi_0_out1_1 <= Bit_Concat3_out1(38 DOWNTO 0);

  
  DTC2_out1 <= "111111" WHEN (exp_tmp_cast_cfType_Exponent_out1(10) = '0') AND (exp_tmp_cast_cfType_Exponent_out1(9 DOWNTO 6) /= "0000") ELSE
      "000000" WHEN exp_tmp_cast_cfType_Exponent_out1(10) = '1' ELSE
      unsigned(exp_tmp_cast_cfType_Exponent_out1(5 DOWNTO 0));

  dynamic_shift_cast <= resize(DTC2_out1, 8);
  bitsll_tmp1_shift_length_out1 <= reinterpretcast_bitconcat_fi_0_out1_1 sll to_integer(dynamic_shift_cast);

  cast_cfType_ExponentBias_lik_out1_1 <= to_unsigned(16#7E#, 8);

  cast_cfType_ExponentBias_lik_out1_2 <= cast_cfType_ExponentBias_lik_out1_1 - if_bitget_tmp2_tmp2_WordLength_out1;

  
  DTC1_out1 <= "111111" WHEN cast_cfType_ExponentBias_lik_out1_2(7 DOWNTO 6) /= "00" ELSE
      cast_cfType_ExponentBias_lik_out1_2(5 DOWNTO 0);

  dynamic_shift_cast_1 <= resize(DTC1_out1, 8);
  Shift_Arithmetic_out1 <= SHIFT_RIGHT(reinterpretcast_bitconcat_fi_0_out1_1, to_integer(dynamic_shift_cast_1));

  
  if_shift_sign_out1 <= bitsll_tmp1_shift_length_out1 WHEN BitSlice_out1_1 = '0' ELSE
      Shift_Arithmetic_out1;

  Delay3_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_3 <= to_unsigned(0, 39);
      ELSIF enb = '1' THEN
        Delay3_out1_3 <= if_shift_sign_out1;
      END IF;
    END IF;
  END PROCESS Delay3_3_process;


  BitSlice_out1_2 <= Delay3_out1_3(32 DOWNTO 0);

  Bit_Concat_out1_3 <= alpha0_out1_1 & BitSlice_out1_2;

  reinterpretcast_bitconcat_fi_0_out1_2 <= Bit_Concat_out1_3;

  cast_1_like_mant_frac_m_out1 <= cast_1_like_mant_frac_out1 - reinterpretcast_bitconcat_fi_0_out1_2;

  BitSlice1_out1_1 <= cast_1_like_mant_frac_m_out1(33);

  Logical_Operator_out1_2 <=  NOT BitSlice1_out1_1;

  
  if_sticky_1_out1 <= reinterpretcast_bitconcat_fi_0_out1_2 WHEN Logical_Operator_out1_2 = '0' ELSE
      cast_1_like_mant_frac_m_out1;

  Bit_Shift_out1 <= if_sticky_1_out1 sll 1;

  Data_Type_Conversion_out1_1 <= signed(Bit_Shift_out1);

  BitSlice_out1_3 <= Data_Type_Conversion_out1_1(33);

  Log2Table_1_out1 <= signed'("10110101000111111111001011100011000");

  w_Log2Table_1_out1 <= Data_Type_Conversion_out1_1 + Log2Table_1_out1;

  
  if_bitget_w_w_WordLength_1_out1 <= Data_Type_Conversion_out1_1 WHEN BitSlice_out1_3 = '0' ELSE
      w_Log2Table_1_out1;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_signed(0, 35);
      ELSIF enb = '1' THEN
        Delay12_out1 <= if_bitget_w_w_WordLength_1_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  bitsll_w_1_out1 <= Delay12_out1 sll 1;

  BitSlice1_out1_2 <= bitsll_w_1_out1(33);

  BitSlice_out1_4 <= bitsll_w_1_out1(34);

  alphabitget_w_w_WordLength_1_out1 <= BitSlice1_out1_2 XOR BitSlice_out1_4;

  Log2Table_int32_2_out1 <= signed'("10101101100101100001111011010000111");

  Log2MinusTable_int32_2_out1 <= signed'("01101010001111111110010111000110000");

  
  if_bitget_w_w_WordLength_0_out1 <= Log2Table_int32_2_out1 WHEN BitSlice_out1_4 = '0' ELSE
      Log2MinusTable_int32_2_out1;

  w_Log2MinusTable_int32_2_1_out1 <= bitsll_w_1_out1 + if_bitget_w_w_WordLength_0_out1;

  
  if_bitget_w_w_WordLength_1_out1_1 <= bitsll_w_1_out1 WHEN alphabitget_w_w_WordLength_1_out1 = '0' ELSE
      w_Log2MinusTable_int32_2_1_out1;

  bitsll_w_1_out1_1 <= if_bitget_w_w_WordLength_1_out1_1 sll 1;

  BitSlice1_out1_3 <= bitsll_w_1_out1_1(33);

  BitSlice_out1_5 <= bitsll_w_1_out1_1(34);

  alphabitget_w_w_WordLength_1_out1_1 <= BitSlice1_out1_3 XOR BitSlice_out1_5;

  Log2Table_int32_3_out1 <= signed'("10101000111111111001011100011000001");

  Log2MinusTable_int32_3_out1 <= signed'("01100010101000100110000000101011000");

  
  if_bitget_w_w_WordLength_0_out1_1 <= Log2Table_int32_3_out1 WHEN BitSlice_out1_5 = '0' ELSE
      Log2MinusTable_int32_3_out1;

  w_Log2MinusTable_int32_2_out1 <= bitsll_w_1_out1_1 + if_bitget_w_w_WordLength_0_out1_1;

  
  if_bitget_w_w_WordLength_1_out1_2 <= bitsll_w_1_out1_1 WHEN alphabitget_w_w_WordLength_1_out1_1 = '0' ELSE
      w_Log2MinusTable_int32_2_out1;

  Delay11_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_1 <= to_signed(0, 35);
      ELSIF enb = '1' THEN
        Delay11_out1_1 <= if_bitget_w_w_WordLength_1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay11_1_process;


  bitsll_w_1_out1_2 <= Delay11_out1_1 sll 1;

  BitSlice1_out1_4 <= bitsll_w_1_out1_2(33);

  BitSlice_out1_6 <= bitsll_w_1_out1_2(34);

  alphabitget_w_w_WordLength_1_out1_2 <= BitSlice1_out1_4 XOR BitSlice_out1_6;

  Log2Table_int32_4_out1 <= signed'("10100110011100000010010000010100111");

  Log2MinusTable_int32_4_out1 <= signed'("01011111010110000001001001011011010");

  
  if_bitget_w_w_WordLength_0_out1_2 <= Log2Table_int32_4_out1 WHEN BitSlice_out1_6 = '0' ELSE
      Log2MinusTable_int32_4_out1;

  w_Log2MinusTable_int32_2_out1_1 <= bitsll_w_1_out1_2 + if_bitget_w_w_WordLength_0_out1_2;

  
  if_bitget_w_w_WordLength_1_out1_3 <= bitsll_w_1_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_2 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_1;

  bitsll_w_1_out1_3 <= if_bitget_w_w_WordLength_1_out1_3 sll 1;

  BitSlice1_out1_5 <= bitsll_w_1_out1_3(33);

  BitSlice_out1_7 <= bitsll_w_1_out1_3(34);

  alphabitget_w_w_WordLength_1_out1_3 <= BitSlice1_out1_5 XOR BitSlice_out1_7;

  Log2Table_int32_5_out1 <= signed'("10100101000101001011001000101001110");

  Log2MinusTable_int32_5_out1 <= signed'("01011101110011100101001100100111011");

  
  if_bitget_w_w_WordLength_0_out1_3 <= Log2Table_int32_5_out1 WHEN BitSlice_out1_7 = '0' ELSE
      Log2MinusTable_int32_5_out1;

  w_Log2MinusTable_int32_2_out1_2 <= bitsll_w_1_out1_3 + if_bitget_w_w_WordLength_0_out1_3;

  
  if_bitget_w_w_WordLength_1_out1_4 <= bitsll_w_1_out1_3 WHEN alphabitget_w_w_WordLength_1_out1_3 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_2;

  Delay13_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1_1 <= to_signed(0, 35);
      ELSIF enb = '1' THEN
        Delay13_out1_1 <= if_bitget_w_w_WordLength_1_out1_4;
      END IF;
    END IF;
  END PROCESS Delay13_1_process;


  bitsll_w_1_out1_4 <= Delay13_out1_1 sll 1;

  BitSlice1_out1_6 <= bitsll_w_1_out1_4(33);

  BitSlice_out1_8 <= bitsll_w_1_out1_4(34);

  alphabitget_w_w_WordLength_1_out1_4 <= BitSlice1_out1_6 XOR BitSlice_out1_8;

  Log2Table_int32_6_out1 <= signed'("10100100011000011010010111101001000");

  Log2MinusTable_int32_6_out1 <= signed'("01011101000011111011101000011000100");

  
  if_bitget_w_w_WordLength_0_out1_4 <= Log2Table_int32_6_out1 WHEN BitSlice_out1_8 = '0' ELSE
      Log2MinusTable_int32_6_out1;

  w_Log2MinusTable_int32_2_out1_3 <= bitsll_w_1_out1_4 + if_bitget_w_w_WordLength_0_out1_4;

  
  if_bitget_w_w_WordLength_1_out1_5 <= bitsll_w_1_out1_4 WHEN alphabitget_w_w_WordLength_1_out1_4 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_3;

  bitsll_w_1_out1_5 <= if_bitget_w_w_WordLength_1_out1_5 sll 1;

  BitSlice1_out1_7 <= bitsll_w_1_out1_5(33);

  BitSlice_out1_9 <= bitsll_w_1_out1_5(34);

  alphabitget_w_w_WordLength_1_out1_5 <= BitSlice1_out1_7 XOR BitSlice_out1_9;

  Log2Table_int32_7_out1 <= signed'("10100100000001101011110100100100010");

  Log2MinusTable_int32_7_out1 <= signed'("01011100101100011110111010001000010");

  
  if_bitget_w_w_WordLength_0_out1_5 <= Log2Table_int32_7_out1 WHEN BitSlice_out1_9 = '0' ELSE
      Log2MinusTable_int32_7_out1;

  w_Log2MinusTable_int32_2_out1_4 <= bitsll_w_1_out1_5 + if_bitget_w_w_WordLength_0_out1_5;

  
  if_bitget_w_w_WordLength_1_out1_6 <= bitsll_w_1_out1_5 WHEN alphabitget_w_w_WordLength_1_out1_5 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_4;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= to_signed(0, 35);
      ELSIF enb = '1' THEN
        Delay15_out1 <= if_bitget_w_w_WordLength_1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  bitsll_w_1_out1_6 <= Delay15_out1 sll 1;

  BitSlice1_out1_8 <= bitsll_w_1_out1_6(33);

  BitSlice_out1_10 <= bitsll_w_1_out1_6(34);

  alphabitget_w_w_WordLength_1_out1_6 <= BitSlice1_out1_8 XOR BitSlice_out1_10;

  Log2Table_int32_8_out1 <= signed'("10100011110110001110111001001010001");

  Log2MinusTable_int32_8_out1 <= signed'("01011100100000110110011100000001110");

  
  if_bitget_w_w_WordLength_0_out1_6 <= Log2Table_int32_8_out1 WHEN BitSlice_out1_10 = '0' ELSE
      Log2MinusTable_int32_8_out1;

  w_Log2MinusTable_int32_2_out1_5 <= bitsll_w_1_out1_6 + if_bitget_w_w_WordLength_0_out1_6;

  
  if_bitget_w_w_WordLength_1_out1_7 <= bitsll_w_1_out1_6 WHEN alphabitget_w_w_WordLength_1_out1_6 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_5;

  bitsll_w_1_out1_7 <= if_bitget_w_w_WordLength_1_out1_7 sll 1;

  BitSlice1_out1_9 <= bitsll_w_1_out1_7(33);

  BitSlice_out1_11 <= bitsll_w_1_out1_7(34);

  alphabitget_w_w_WordLength_1_out1_7 <= BitSlice1_out1_9 XOR BitSlice_out1_11;

  Log2Table_int32_9_out1 <= signed'("10100011110000011111000000000011111");

  Log2MinusTable_int32_9_out1 <= signed'("01011100011011000011101010010000110");

  
  if_bitget_w_w_WordLength_0_out1_7 <= Log2Table_int32_9_out1 WHEN BitSlice_out1_11 = '0' ELSE
      Log2MinusTable_int32_9_out1;

  w_Log2MinusTable_int32_2_out1_6 <= bitsll_w_1_out1_7 + if_bitget_w_w_WordLength_0_out1_7;

  
  if_bitget_w_w_WordLength_1_out1_8 <= bitsll_w_1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_7 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_6;

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_signed(0, 35);
      ELSIF enb = '1' THEN
        Delay17_out1 <= if_bitget_w_w_WordLength_1_out1_8;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  bitsll_w_1_out1_8 <= Delay17_out1 sll 1;

  BitSlice1_out1_10 <= bitsll_w_1_out1_8(33);

  BitSlice_out1_12 <= bitsll_w_1_out1_8(34);

  alphabitget_w_w_WordLength_1_out1_8 <= BitSlice1_out1_10 XOR BitSlice_out1_12;

  Log2Table_int32_10_out1 <= signed'("10100011101101100110101100100011000");

  Log2MinusTable_int32_10_out1 <= signed'("01011100011000001010101000100101010");

  
  if_bitget_w_w_WordLength_0_out1_8 <= Log2Table_int32_10_out1 WHEN BitSlice_out1_12 = '0' ELSE
      Log2MinusTable_int32_10_out1;

  w_Log2MinusTable_int32_2_out1_7 <= bitsll_w_1_out1_8 + if_bitget_w_w_WordLength_0_out1_8;

  
  if_bitget_w_w_WordLength_1_out1_9 <= bitsll_w_1_out1_8 WHEN alphabitget_w_w_WordLength_1_out1_8 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_7;

  bitsll_w_1_out1_9 <= if_bitget_w_w_WordLength_1_out1_9 sll 1;

  BitSlice1_out1_11 <= bitsll_w_1_out1_9(33);

  BitSlice_out1_13 <= bitsll_w_1_out1_9(34);

  alphabitget_w_w_WordLength_1_out1_9 <= BitSlice1_out1_11 XOR BitSlice_out1_13;

  Log2Table_int32_11_out1 <= signed'("10100011101100001010011101000010001");

  Log2MinusTable_int32_11_out1 <= signed'("01011100010110101110001101100001110");

  
  if_bitget_w_w_WordLength_0_out1_9 <= Log2Table_int32_11_out1 WHEN BitSlice_out1_13 = '0' ELSE
      Log2MinusTable_int32_11_out1;

  w_Log2MinusTable_int32_2_out1_8 <= bitsll_w_1_out1_9 + if_bitget_w_w_WordLength_0_out1_9;

  
  if_bitget_w_w_WordLength_1_out1_10 <= bitsll_w_1_out1_9 WHEN alphabitget_w_w_WordLength_1_out1_9 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_8;

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_signed(0, 35);
      ELSIF enb = '1' THEN
        Delay19_out1 <= if_bitget_w_w_WordLength_1_out1_10;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  bitsll_w_1_out1_10 <= Delay19_out1 sll 1;

  BitSlice1_out1_12 <= bitsll_w_1_out1_10(33);

  BitSlice_out1_14 <= bitsll_w_1_out1_10(34);

  alphabitget_w_w_WordLength_1_out1_10 <= BitSlice1_out1_12 XOR BitSlice_out1_14;

  Log2Table_int32_12_out1 <= signed'("10100011101011011100010011110101100");

  Log2MinusTable_int32_12_out1 <= signed'("01011100010110000000000001011100011");

  
  if_bitget_w_w_WordLength_0_out1_10 <= Log2Table_int32_12_out1 WHEN BitSlice_out1_14 = '0' ELSE
      Log2MinusTable_int32_12_out1;

  w_Log2MinusTable_int32_2_out1_9 <= bitsll_w_1_out1_10 + if_bitget_w_w_WordLength_0_out1_10;

  
  if_bitget_w_w_WordLength_1_out1_11 <= bitsll_w_1_out1_10 WHEN alphabitget_w_w_WordLength_1_out1_10 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_9;

  bitsll_w_1_out1_11 <= if_bitget_w_w_WordLength_1_out1_11 sll 1;

  BitSlice1_out1_13 <= bitsll_w_1_out1_11(33);

  BitSlice_out1_15 <= bitsll_w_1_out1_11(34);

  alphabitget_w_w_WordLength_1_out1_11 <= BitSlice1_out1_13 XOR BitSlice_out1_15;

  Log2Table_int32_13_out1 <= signed'("10100011101011000101001110111000001");

  Log2MinusTable_int32_13_out1 <= signed'("01011100010101101000111011110000111");

  
  if_bitget_w_w_WordLength_0_out1_11 <= Log2Table_int32_13_out1 WHEN BitSlice_out1_15 = '0' ELSE
      Log2MinusTable_int32_13_out1;

  w_Log2MinusTable_int32_2_out1_10 <= bitsll_w_1_out1_11 + if_bitget_w_w_WordLength_0_out1_11;

  
  if_bitget_w_w_WordLength_1_out1_12 <= bitsll_w_1_out1_11 WHEN alphabitget_w_w_WordLength_1_out1_11 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_10;

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= to_signed(0, 35);
      ELSIF enb = '1' THEN
        Delay21_out1 <= if_bitget_w_w_WordLength_1_out1_12;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  BitSlice1_out1_14 <= Delay21_out1(32);

  BitSlice_out1_16 <= Delay21_out1(33);

  alphabitget_w_w_WordLength_1_out1_12 <= BitSlice1_out1_14 XOR BitSlice_out1_16;

  C1_out1 <= to_signed(16#2#, 4);

  C_out1 <= to_signed(16#3#, 4);

  
  if_bitget_w_w_WordLength_1_1_out1 <= C1_out1 WHEN BitSlice_out1_3 = '0' ELSE
      C_out1;

  Delay11_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_2 <= to_signed(16#0#, 4);
      ELSIF enb = '1' THEN
        Delay11_out1_2 <= if_bitget_w_w_WordLength_1_1_out1;
      END IF;
    END IF;
  END PROCESS Delay11_2_process;


  Constant_out1_2 <= to_unsigned(16#0#, 2);

  Bit_Concat_out1_4 <= unsigned(Delay11_out1_2) & Constant_out1_2;

  dtc1_out1_1 <= signed(Bit_Concat_out1_4);

  bitsrl_y_int32_2_out1 <= dtc1_out1_1 srl 2;

  y_tmp1_out1 <= dtc1_out1_1 - bitsrl_y_int32_2_out1;

  y_tmp1_out1_1 <= dtc1_out1_1 + bitsrl_y_int32_2_out1;

  
  if_bitget_w_w_WordLength_0_1_out1 <= y_tmp1_out1 WHEN BitSlice1_out1_2 = '0' ELSE
      y_tmp1_out1_1;

  
  if_bitget_w_w_WordLength_1_1_out1_1 <= dtc1_out1_1 WHEN alphabitget_w_w_WordLength_1_out1 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1;

  Constant_out1_3 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_5 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_1) & Constant_out1_3;

  dtc1_out1_2 <= signed(Bit_Concat_out1_5);

  bitsrl_y_int32_2_out1_1 <= dtc1_out1_2 srl 3;

  y_tmp1_out1_2 <= dtc1_out1_2 - bitsrl_y_int32_2_out1_1;

  y_tmp1_out1_3 <= dtc1_out1_2 + bitsrl_y_int32_2_out1_1;

  
  if_bitget_w_w_WordLength_0_1_out1_1 <= y_tmp1_out1_2 WHEN BitSlice1_out1_3 = '0' ELSE
      y_tmp1_out1_3;

  
  if_bitget_w_w_WordLength_1_1_out1_2 <= dtc1_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_1 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_1;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay10_out1 <= if_bitget_w_w_WordLength_1_1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Constant_out1_4 <= to_unsigned(16#0#, 4);

  Bit_Concat_out1_6 <= unsigned(Delay10_out1) & Constant_out1_4;

  dtc1_out1_3 <= signed(Bit_Concat_out1_6);

  bitsrl_y_int32_2_out1_2 <= dtc1_out1_3 srl 4;

  y_tmp1_out1_4 <= dtc1_out1_3 - bitsrl_y_int32_2_out1_2;

  y_tmp1_out1_5 <= dtc1_out1_3 + bitsrl_y_int32_2_out1_2;

  
  if_bitget_w_w_WordLength_0_1_out1_2 <= y_tmp1_out1_4 WHEN BitSlice1_out1_4 = '0' ELSE
      y_tmp1_out1_5;

  
  if_bitget_w_w_WordLength_1_1_out1_3 <= dtc1_out1_3 WHEN alphabitget_w_w_WordLength_1_out1_2 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_2;

  Constant_out1_5 <= to_unsigned(16#00#, 5);

  Bit_Concat_out1_7 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_3) & Constant_out1_5;

  dtc1_out1_4 <= signed(Bit_Concat_out1_7);

  bitsrl_y_int32_2_out1_3 <= dtc1_out1_4 srl 5;

  y_tmp1_out1_6 <= dtc1_out1_4 - bitsrl_y_int32_2_out1_3;

  y_tmp1_out1_7 <= dtc1_out1_4 + bitsrl_y_int32_2_out1_3;

  
  if_bitget_w_w_WordLength_0_1_out1_3 <= y_tmp1_out1_6 WHEN BitSlice1_out1_5 = '0' ELSE
      y_tmp1_out1_7;

  
  if_bitget_w_w_WordLength_1_1_out1_4 <= dtc1_out1_4 WHEN alphabitget_w_w_WordLength_1_out1_3 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_3;

  Delay12_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay12_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_4;
      END IF;
    END IF;
  END PROCESS Delay12_1_process;


  Constant_out1_6 <= to_unsigned(16#00#, 6);

  Bit_Concat_out1_8 <= unsigned(Delay12_out1_1) & Constant_out1_6;

  dtc1_out1_5 <= signed(Bit_Concat_out1_8);

  bitsrl_y_int32_2_out1_4 <= dtc1_out1_5 srl 6;

  y_tmp1_out1_8 <= dtc1_out1_5 - bitsrl_y_int32_2_out1_4;

  y_tmp1_out1_9 <= dtc1_out1_5 + bitsrl_y_int32_2_out1_4;

  
  if_bitget_w_w_WordLength_0_1_out1_4 <= y_tmp1_out1_8 WHEN BitSlice1_out1_6 = '0' ELSE
      y_tmp1_out1_9;

  
  if_bitget_w_w_WordLength_1_1_out1_5 <= dtc1_out1_5 WHEN alphabitget_w_w_WordLength_1_out1_4 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_4;

  Constant_out1_7 <= to_unsigned(16#00#, 7);

  Bit_Concat_out1_9 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_5) & Constant_out1_7;

  dtc1_out1_6 <= signed(Bit_Concat_out1_9);

  bitsrl_y_int32_2_out1_5 <= dtc1_out1_6 srl 7;

  y_tmp1_out1_10 <= dtc1_out1_6 - bitsrl_y_int32_2_out1_5;

  y_tmp1_out1_11 <= dtc1_out1_6 + bitsrl_y_int32_2_out1_5;

  
  if_bitget_w_w_WordLength_0_1_out1_5 <= y_tmp1_out1_10 WHEN BitSlice1_out1_7 = '0' ELSE
      y_tmp1_out1_11;

  
  if_bitget_w_w_WordLength_1_1_out1_6 <= dtc1_out1_6 WHEN alphabitget_w_w_WordLength_1_out1_5 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_5;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(16#00000000#, 31);
      ELSIF enb = '1' THEN
        Delay14_out1 <= if_bitget_w_w_WordLength_1_1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Constant_out1_8 <= to_unsigned(16#00#, 5);

  Bit_Concat_out1_10 <= unsigned(Delay14_out1) & Constant_out1_8;

  dtc1_out1_7 <= signed(Bit_Concat_out1_10);

  bitsrl_y_int32_2_out1_6 <= dtc1_out1_7 srl 8;

  y_tmp1_out1_12 <= dtc1_out1_7 - bitsrl_y_int32_2_out1_6;

  y_tmp1_out1_13 <= dtc1_out1_7 + bitsrl_y_int32_2_out1_6;

  
  if_bitget_w_w_WordLength_0_1_out1_6 <= y_tmp1_out1_12 WHEN BitSlice1_out1_8 = '0' ELSE
      y_tmp1_out1_13;

  
  if_bitget_w_w_WordLength_1_1_out1_7 <= dtc1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_6 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_6;

  bitsrl_y_int32_2_out1_7 <= if_bitget_w_w_WordLength_1_1_out1_7 srl 9;

  y_tmp1_out1_14 <= if_bitget_w_w_WordLength_1_1_out1_7 - bitsrl_y_int32_2_out1_7;

  y_tmp1_out1_15 <= if_bitget_w_w_WordLength_1_1_out1_7 + bitsrl_y_int32_2_out1_7;

  
  if_bitget_w_w_WordLength_0_1_out1_7 <= y_tmp1_out1_14 WHEN BitSlice1_out1_9 = '0' ELSE
      y_tmp1_out1_15;

  
  if_bitget_w_w_WordLength_1_1_out1_8 <= if_bitget_w_w_WordLength_1_1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_7 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_7;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay16_out1 <= if_bitget_w_w_WordLength_1_1_out1_8;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  bitsrl_y_int32_2_out1_8 <= Delay16_out1 srl 10;

  y_tmp1_out1_16 <= Delay16_out1 - bitsrl_y_int32_2_out1_8;

  y_tmp1_out1_17 <= Delay16_out1 + bitsrl_y_int32_2_out1_8;

  
  if_bitget_w_w_WordLength_0_1_out1_8 <= y_tmp1_out1_16 WHEN BitSlice1_out1_10 = '0' ELSE
      y_tmp1_out1_17;

  
  if_bitget_w_w_WordLength_1_1_out1_9 <= Delay16_out1 WHEN alphabitget_w_w_WordLength_1_out1_8 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_8;

  bitsrl_y_int32_2_out1_9 <= if_bitget_w_w_WordLength_1_1_out1_9 srl 11;

  y_tmp1_out1_18 <= if_bitget_w_w_WordLength_1_1_out1_9 - bitsrl_y_int32_2_out1_9;

  y_tmp1_out1_19 <= if_bitget_w_w_WordLength_1_1_out1_9 + bitsrl_y_int32_2_out1_9;

  
  if_bitget_w_w_WordLength_0_1_out1_9 <= y_tmp1_out1_18 WHEN BitSlice1_out1_11 = '0' ELSE
      y_tmp1_out1_19;

  
  if_bitget_w_w_WordLength_1_1_out1_10 <= if_bitget_w_w_WordLength_1_1_out1_9 WHEN alphabitget_w_w_WordLength_1_out1_9 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_9;

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay18_out1 <= if_bitget_w_w_WordLength_1_1_out1_10;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  bitsrl_y_int32_2_out1_10 <= Delay18_out1 srl 12;

  y_tmp1_out1_20 <= Delay18_out1 - bitsrl_y_int32_2_out1_10;

  y_tmp1_out1_21 <= Delay18_out1 + bitsrl_y_int32_2_out1_10;

  
  if_bitget_w_w_WordLength_0_1_out1_10 <= y_tmp1_out1_20 WHEN BitSlice1_out1_12 = '0' ELSE
      y_tmp1_out1_21;

  
  if_bitget_w_w_WordLength_1_1_out1_11 <= Delay18_out1 WHEN alphabitget_w_w_WordLength_1_out1_10 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_10;

  bitsrl_y_int32_2_out1_11 <= if_bitget_w_w_WordLength_1_1_out1_11 srl 13;

  y_tmp1_out1_22 <= if_bitget_w_w_WordLength_1_1_out1_11 - bitsrl_y_int32_2_out1_11;

  y_tmp1_out1_23 <= if_bitget_w_w_WordLength_1_1_out1_11 + bitsrl_y_int32_2_out1_11;

  
  if_bitget_w_w_WordLength_0_1_out1_11 <= y_tmp1_out1_22 WHEN BitSlice1_out1_13 = '0' ELSE
      y_tmp1_out1_23;

  
  if_bitget_w_w_WordLength_1_1_out1_12 <= if_bitget_w_w_WordLength_1_1_out1_11 WHEN alphabitget_w_w_WordLength_1_out1_11 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_11;

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay20_out1 <= if_bitget_w_w_WordLength_1_1_out1_12;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  bitsrl_y_int32_2_out1_12 <= Delay20_out1 srl 14;

  y_tmp1_out1_24 <= Delay20_out1 - bitsrl_y_int32_2_out1_12;

  y_tmp1_out1_25 <= Delay20_out1 + bitsrl_y_int32_2_out1_12;

  
  if_bitget_w_w_WordLength_0_1_out1_12 <= y_tmp1_out1_24 WHEN BitSlice1_out1_14 = '0' ELSE
      y_tmp1_out1_25;

  
  if_bitget_w_w_WordLength_1_1_out1_13 <= Delay20_out1 WHEN alphabitget_w_w_WordLength_1_out1_12 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_12;

  alpha1_out1_1 <= to_unsigned(16#0#, 2);

  Bit_Concat1_out1 <= alpha1_out1_1 & if_bitget_tmp2_tmp2_WordLength_1_out1;

  reinterpretcast_bitconcat_fi_0_1_out1 <= signed(Bit_Concat1_out1);

  Delay40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay40_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay40_out1 <= reinterpretcast_bitconcat_fi_0_1_out1;
      END IF;
    END IF;
  END PROCESS Delay40_process;


  Delay44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay44_reg <= (OTHERS => to_signed(0, 36));
      ELSIF enb = '1' THEN
        Delay44_reg(0) <= Delay40_out1;
        Delay44_reg(1 TO 6) <= Delay44_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS Delay44_process;

  Delay44_out1 <= Delay44_reg(6);

  
  Switch1_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_13 WHEN Delay46_out1 = '0' ELSE
      Delay44_out1;

  Delay1_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg <= (OTHERS => to_signed(0, 36));
      ELSIF enb = '1' THEN
        Delay1_reg(0) <= Switch1_out1_1;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_3_process;

  Delay1_out1_4 <= Delay1_reg(1);

  Unary_Minus_cast <= resize(Delay1_out1_4, 37);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(35 DOWNTO 0);

  Bit_Slice2_out1 <= unsigned(Delay1_out1_4(34 DOWNTO 15));

  Data_Type_Conversion1_out1 <= signed(Bit_Slice2_out1);

  Bit_Slice_out1 <= unsigned(Delay21_out1(33 DOWNTO 11));

  Data_Type_Conversion_out1_2 <= signed(Bit_Slice_out1);

  Log2Table_int32_14_out1 <= to_signed(-16#2E2A32#, 23);

  Log2MinusTable_int32_14_out1 <= to_signed(16#2E2AEB#, 23);

  
  if_bitget_w_w_WordLength_0_out1_12 <= Log2Table_int32_14_out1 WHEN BitSlice_out1_16 = '0' ELSE
      Log2MinusTable_int32_14_out1;

  w_Log2MinusTable_int32_2_out1_11 <= Data_Type_Conversion_out1_2 + if_bitget_w_w_WordLength_0_out1_12;

  
  if_bitget_w_w_WordLength_1_out1_13 <= Data_Type_Conversion_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_12 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_11;

  Constant5_out1 <= '0';

  Bit_Slice3_out1 <= Delay50_out1(23 DOWNTO 2);

  Bit_Concat3_out1_1 <= Constant5_out1 & Bit_Slice3_out1;

  Data_Type_Conversion3_out1 <= signed(Bit_Concat3_out1_1);

  
  Switch4_out1_1 <= if_bitget_w_w_WordLength_1_out1_13 WHEN Delay46_out1 = '0' ELSE
      Data_Type_Conversion3_out1;

  alpha0_693147182464600_out1 <= to_signed(-16#2C5C8#, 20);

  alpha0_33333_out1 <= to_signed(-16#15555#, 20);

  
  Switch3_out1 <= alpha0_693147182464600_out1 WHEN Delay46_out1 = '0' ELSE
      alpha0_33333_out1;

  tmp1_0_69314717873930931_mul_temp <= Switch4_out1_1 * Switch3_out1;
  tmp1_0_69314717873930931_out1 <= tmp1_0_69314717873930931_mul_temp(40 DOWNTO 18);

  Delay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg_1 <= (OTHERS => to_signed(16#000000#, 23));
      ELSIF enb = '1' THEN
        Delay_reg_1(0) <= tmp1_0_69314717873930931_out1;
        Delay_reg_1(1) <= Delay_reg_1(0);
      END IF;
    END IF;
  END PROCESS Delay_2_process;

  Delay_out1_2 <= Delay_reg_1(1);

  tmp2_y_mul_temp <= Data_Type_Conversion1_out1 * Delay_out1_2;
  tmp2_y_out1 <= tmp2_y_mul_temp(40 DOWNTO 20);

  Delay3_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_reg <= (OTHERS => to_signed(16#000000#, 21));
      ELSIF enb = '1' THEN
        Delay3_reg(0) <= tmp2_y_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_4_process;

  Delay3_out1_4 <= Delay3_reg(1);

  Bit_Slice1_out1 <= Delay3_out1_4(20);

  Constant1_out1_1 <= to_signed(16#0000#, 15);

  Constant_out1_9 <= to_signed(-16#0001#, 15);

  
  Switch_out1_1 <= Constant1_out1_1 WHEN Bit_Slice1_out1 = '0' ELSE
      Constant_out1_9;

  Delay2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg <= (OTHERS => to_signed(0, 36));
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= Unary_Minus_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_2_process;

  Delay2_out1_2 <= Delay2_reg(1);

  Bit_Concat_out1_11 <= unsigned(Switch_out1_1) & unsigned(Delay3_out1_4);

  DTC2_out1_1 <= signed(Bit_Concat_out1_11);

  y_tmp3_out1 <= Delay2_out1_2 + DTC2_out1_1;

  Delay39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay39_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay39_out1 <= y_tmp3_out1;
      END IF;
    END IF;
  END PROCESS Delay39_process;


  Bit_Slice4_out1 <= Delay3_out1_4(20);

  Constant2_out1 <= to_unsigned(16#0000#, 14);

  Bit_Concat1_out1_1 <= Bit_Slice4_out1 & unsigned(Delay3_out1_4) & Constant2_out1;

  DTC1_out1_8 <= signed(Bit_Concat1_out1_1);

  Delay9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay9_out1_1 <= DTC1_out1_8;
      END IF;
    END IF;
  END PROCESS Delay9_1_process;


  
  Switch2_out1 <= Delay39_out1 WHEN Delay8_out1_1 = '0' ELSE
      Delay9_out1_1;

  alpha1_out1_2 <= to_unsigned(16#0#, 2);

  BitSlice2_out1_1 <= Delay3_out1_3(38 DOWNTO 33);

  Bit_Concat1_out1_2 <= alpha1_out1_2 & BitSlice2_out1_1;

  alpha127_1_out1 <= to_unsigned(16#01#, 8);

  alpha127_exp_tmp_out1 <= Bit_Concat1_out1_2 + alpha127_1_out1;

  
  if_sticky_4_out1 <= Bit_Concat1_out1_2 WHEN Logical_Operator_out1_2 = '0' ELSE
      alpha127_exp_tmp_out1;

  cast_cfType_ExponentBias_lik_1_out1 <= to_unsigned(16#80#, 8);

  cast_cfType_ExponentBias_lik_1_out1_1 <= cast_cfType_ExponentBias_lik_1_out1 - Delay1_out1_3;

  cast_cfType_ExponentBias_lik_2_out1 <= cast_cfType_ExponentBias_lik_out1_2 + cast_cfType_ExponentBias_lik_1_out1_1;

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay30_out1 <= cast_cfType_ExponentBias_lik_2_out1;
      END IF;
    END IF;
  END PROCESS Delay30_process;


  
  if_sticky_2_out1 <= if_sticky_4_out1 WHEN Delay31_out1 = '0' ELSE
      Delay30_out1;

  Delay17_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_reg <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Delay17_reg(0) <= if_sticky_2_out1;
        Delay17_reg(1 TO 6) <= Delay17_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS Delay17_1_process;

  Delay17_out1_1 <= Delay17_reg(6);

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_reg <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Delay32_reg(0) <= Delay17_out1_1;
        Delay32_reg(1 TO 4) <= Delay32_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS Delay32_process;

  Delay32_out1 <= Delay32_reg(4);

  Shift_Arithmetic_out1_1 <= SHIFT_RIGHT(Switch2_out1, to_integer(Delay32_out1));

  Add_out1_1 <= Switch4_out1 + Shift_Arithmetic_out1_1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Add_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Bit_Slice_out1_1 <= Delay5_out1(34);

  Bit_Slice1_out1_1 <= unsigned(Delay5_out1(33 DOWNTO 27));

  Bit_Slice7_out1 <= Bit_Slice1_out1_1(6);

  Bit_Slice6_out1 <= Bit_Slice1_out1_1(5);

  Logical_Operator3_out1 <= Bit_Slice7_out1 OR Bit_Slice6_out1;

  Bit_Slice5_out1 <= Bit_Slice1_out1_1(4);

  Bit_Slice3_out1_1 <= Bit_Slice1_out1_1(3);

  Logical_Operator_out1_3 <= Bit_Slice5_out1 OR Bit_Slice3_out1_1;

  Bit_Slice2_out1_1 <= Bit_Slice1_out1_1(2);

  Bit_Slice1_out1_2 <= Bit_Slice1_out1_1(1);

  Bit_Slice_out1_2 <= Bit_Slice1_out1_1(0);

  Start_out1 <= to_signed(16#07#, 8);

  Logical_Operator4_out1 <= Bit_Slice2_out1_1 OR Bit_Slice1_out1_2;

  Start_1_out1 <= to_signed(16#06#, 8);

  
  Switch_out1_2 <= Start_out1 WHEN Bit_Slice_out1_2 = '0' ELSE
      Start_1_out1;

  Start_2_out1 <= to_signed(16#05#, 8);

  Start_3_out1 <= to_signed(16#04#, 8);

  Logical_Operator1_out1 <= Logical_Operator3_out1 OR Logical_Operator_out1_3;

  
  Switch2_out1_1 <= Start_2_out1 WHEN Bit_Slice2_out1_1 = '0' ELSE
      Start_3_out1;

  
  Switch1_out1_2 <= Switch_out1_2 WHEN Logical_Operator4_out1 = '0' ELSE
      Switch2_out1_1;

  Start_4_out1 <= to_signed(16#03#, 8);

  Start_5_out1 <= to_signed(16#02#, 8);

  
  Switch5_out1 <= Start_4_out1 WHEN Bit_Slice5_out1 = '0' ELSE
      Start_5_out1;

  Start_6_out1 <= to_signed(16#01#, 8);

  Start_7_out1 <= to_signed(16#00#, 8);

  
  Switch7_out1 <= Start_6_out1 WHEN Bit_Slice7_out1 = '0' ELSE
      Start_7_out1;

  
  Switch6_out1 <= Switch5_out1 WHEN Logical_Operator3_out1 = '0' ELSE
      Switch7_out1;

  
  Switch4_out1_2 <= Switch1_out1_2 WHEN Logical_Operator1_out1 = '0' ELSE
      Switch6_out1;

  DTC_out1 <= unsigned(Switch4_out1_2);

  Shift_Arithmetic1_out1 <= Delay5_out1 sll to_integer(DTC_out1);

  Bit_Shift_out1_1 <= SHIFT_RIGHT(Delay5_out1, 1);

  
  Switch_out1_3 <= Shift_Arithmetic1_out1 WHEN Bit_Slice_out1_1 = '0' ELSE
      Bit_Shift_out1_1;

  Bit_Slice1_out1_3 <= Switch_out1_3(35);

  Bit_Concat_out1_12 <= Bit_Slice1_out1_3 & unsigned(Switch_out1_3);

  Data_Type_Conversion_out1_3 <= signed(Bit_Concat_out1_12);

  Constant2_out1_1 <= signed'(X"E00000000");

  Add1_out1 <= Shift_Arithmetic_out1_1 + Constant2_out1_1;

  Delay6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_1 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        Delay6_out1_1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay6_1_process;


  Bit_Slice2_out1_2 <= Delay6_out1_1(35);

  Bit_Concat1_out1_3 <= Bit_Slice2_out1_2 & unsigned(Delay6_out1_1);

  Data_Type_Conversion1_out1_1 <= signed(Bit_Concat1_out1_3);

  R_mant_b_norm_out1 <= Data_Type_Conversion_out1_3 + Data_Type_Conversion1_out1_1;

  Bit_Slice_out1_3 <= R_mant_b_norm_out1(36);

  Bit_Shift_out1_2 <= Data_Type_Conversion_out1_3 sll 1;

  R_mant_b_norm1_out1 <= Bit_Shift_out1_2 + Data_Type_Conversion1_out1_1;

  
  Switch_out1_4 <= R_mant_b_norm_out1 WHEN Bit_Slice_out1_3 = '0' ELSE
      R_mant_b_norm1_out1;

  Delay1_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_5 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay1_out1_5 <= Switch_out1_4;
      END IF;
    END IF;
  END PROCESS Delay1_4_process;


  Bit_Shift2_out1 <= Delay1_out1_5 sll 1;

  Delay2_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_3 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay2_out1_3 <= Data_Type_Conversion1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_3_process;


  Add1_out1_1 <= Bit_Shift2_out1 + Delay2_out1_3;

  Bit_Slice1_out1_4 <= Add1_out1_1(36);

  Bit_Shift1_out1 <= Delay1_out1_5 sll 2;

  Add_out1_2 <= Bit_Shift1_out1 + Delay2_out1_3;

  Bit_Slice_out1_4 <= Add_out1_2(36);

  Logical_Operator1_out1_1 <=  NOT Bit_Slice_out1_4;

  Logical_Operator4_out1_1 <= Logical_Operator1_out1_1 AND Bit_Slice1_out1_4;

  Bit_Shift_out1_3 <= Data_Type_Conversion1_out1_1 sll 1;

  Add_out1_3 <= Bit_Shift_out1_3 + Data_Type_Conversion1_out1_1;

  Delay4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_1 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay4_out1_1 <= Add_out1_3;
      END IF;
    END IF;
  END PROCESS Delay4_1_process;


  Add2_out1 <= Bit_Shift1_out1 + Delay4_out1_1;

  Bit_Slice2_out1_3 <= Add2_out1(36);

  Logical_Operator_out1_4 <=  NOT Bit_Slice1_out1_4;

  Logical_Operator2_out1 <=  NOT Bit_Slice2_out1_3;

  Logical_Operator3_out1_1 <= Logical_Operator4_out1_1 OR Logical_Operator2_out1;

  Bit_Concat_out1_13 <= unsigned'(Delay3_out1_2 & Logical_Operator_out1_4 & Logical_Operator3_out1_1);

  Bit_Shift3_out1 <= Add1_out1_1 sll 1;

  
  Switch1_out1_3 <= Add2_out1 WHEN Bit_Slice2_out1_3 = '0' ELSE
      Bit_Shift3_out1;

  
  Switch_out1_5 <= Add_out1_2 WHEN Bit_Slice_out1_4 = '0' ELSE
      Bit_Shift1_out1;

  
  Switch2_out1_2 <= Switch1_out1_3 WHEN Bit_Slice1_out1_4 = '0' ELSE
      Switch_out1_5;

  Bit_Shift2_out1_1 <= Switch2_out1_2 sll 1;

  Add1_out1_2 <= Bit_Shift2_out1_1 + Delay2_out1_3;

  Bit_Slice1_out1_5 <= Add1_out1_2(36);

  Bit_Shift1_out1_1 <= Switch2_out1_2 sll 2;

  Add_out1_4 <= Bit_Shift1_out1_1 + Delay2_out1_3;

  Bit_Slice_out1_5 <= Add_out1_4(36);

  Logical_Operator1_out1_2 <=  NOT Bit_Slice_out1_5;

  Logical_Operator4_out1_2 <= Logical_Operator1_out1_2 AND Bit_Slice1_out1_5;

  Add2_out1_1 <= Bit_Shift1_out1_1 + Delay4_out1_1;

  Bit_Slice2_out1_4 <= Add2_out1_1(36);

  Logical_Operator_out1_5 <=  NOT Bit_Slice1_out1_5;

  Logical_Operator2_out1_1 <=  NOT Bit_Slice2_out1_4;

  Logical_Operator3_out1_2 <= Logical_Operator4_out1_2 OR Logical_Operator2_out1_1;

  Bit_Concat_out1_14 <= Bit_Concat_out1_13 & unsigned'(Logical_Operator_out1_5 & Logical_Operator3_out1_2);

  Delay10_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_1 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        Delay10_out1_1 <= Bit_Concat_out1_14;
      END IF;
    END IF;
  END PROCESS Delay10_1_process;


  Bit_Shift3_out1_1 <= Add1_out1_2 sll 1;

  
  Switch1_out1_4 <= Add2_out1_1 WHEN Bit_Slice2_out1_4 = '0' ELSE
      Bit_Shift3_out1_1;

  
  Switch_out1_6 <= Add_out1_4 WHEN Bit_Slice_out1_5 = '0' ELSE
      Bit_Shift1_out1_1;

  
  Switch2_out1_3 <= Switch1_out1_4 WHEN Bit_Slice1_out1_5 = '0' ELSE
      Switch_out1_6;

  Delay11_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_3 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay11_out1_3 <= Switch2_out1_3;
      END IF;
    END IF;
  END PROCESS Delay11_3_process;


  Bit_Shift2_out1_2 <= Delay11_out1_3 sll 1;

  Delay12_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_2 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay12_out1_2 <= Delay2_out1_3;
      END IF;
    END IF;
  END PROCESS Delay12_2_process;


  Add1_out1_3 <= Bit_Shift2_out1_2 + Delay12_out1_2;

  Bit_Slice1_out1_6 <= Add1_out1_3(36);

  Bit_Shift1_out1_2 <= Delay11_out1_3 sll 2;

  Add_out1_5 <= Bit_Shift1_out1_2 + Delay12_out1_2;

  Bit_Slice_out1_6 <= Add_out1_5(36);

  Logical_Operator1_out1_3 <=  NOT Bit_Slice_out1_6;

  Logical_Operator4_out1_3 <= Logical_Operator1_out1_3 AND Bit_Slice1_out1_6;

  Delay14_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1_1 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay14_out1_1 <= Delay4_out1_1;
      END IF;
    END IF;
  END PROCESS Delay14_1_process;


  Add2_out1_2 <= Bit_Shift1_out1_2 + Delay14_out1_1;

  Bit_Slice2_out1_5 <= Add2_out1_2(36);

  Logical_Operator_out1_6 <=  NOT Bit_Slice1_out1_6;

  Logical_Operator2_out1_2 <=  NOT Bit_Slice2_out1_5;

  Logical_Operator3_out1_3 <= Logical_Operator4_out1_3 OR Logical_Operator2_out1_2;

  Bit_Concat_out1_15 <= Delay10_out1_1 & unsigned'(Logical_Operator_out1_6 & Logical_Operator3_out1_3);

  Bit_Shift3_out1_2 <= Add1_out1_3 sll 1;

  
  Switch1_out1_5 <= Add2_out1_2 WHEN Bit_Slice2_out1_5 = '0' ELSE
      Bit_Shift3_out1_2;

  
  Switch_out1_7 <= Add_out1_5 WHEN Bit_Slice_out1_6 = '0' ELSE
      Bit_Shift1_out1_2;

  
  Switch2_out1_4 <= Switch1_out1_5 WHEN Bit_Slice1_out1_6 = '0' ELSE
      Switch_out1_7;

  Bit_Shift2_out1_3 <= Switch2_out1_4 sll 1;

  Add1_out1_4 <= Bit_Shift2_out1_3 + Delay12_out1_2;

  Bit_Slice1_out1_7 <= Add1_out1_4(36);

  Bit_Shift1_out1_3 <= Switch2_out1_4 sll 2;

  Add_out1_6 <= Bit_Shift1_out1_3 + Delay12_out1_2;

  Bit_Slice_out1_7 <= Add_out1_6(36);

  Logical_Operator1_out1_4 <=  NOT Bit_Slice_out1_7;

  Logical_Operator4_out1_4 <= Logical_Operator1_out1_4 AND Bit_Slice1_out1_7;

  Add2_out1_3 <= Bit_Shift1_out1_3 + Delay14_out1_1;

  Bit_Slice2_out1_6 <= Add2_out1_3(36);

  Logical_Operator_out1_7 <=  NOT Bit_Slice1_out1_7;

  Logical_Operator2_out1_3 <=  NOT Bit_Slice2_out1_6;

  Logical_Operator3_out1_4 <= Logical_Operator4_out1_4 OR Logical_Operator2_out1_3;

  Bit_Concat_out1_16 <= Bit_Concat_out1_15 & unsigned'(Logical_Operator_out1_7 & Logical_Operator3_out1_4);

  Delay5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_1 <= to_unsigned(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay5_out1_1 <= Bit_Concat_out1_16;
      END IF;
    END IF;
  END PROCESS Delay5_1_process;


  Bit_Shift3_out1_3 <= Add1_out1_4 sll 1;

  
  Switch1_out1_6 <= Add2_out1_3 WHEN Bit_Slice2_out1_6 = '0' ELSE
      Bit_Shift3_out1_3;

  
  Switch_out1_8 <= Add_out1_6 WHEN Bit_Slice_out1_7 = '0' ELSE
      Bit_Shift1_out1_3;

  
  Switch2_out1_5 <= Switch1_out1_6 WHEN Bit_Slice1_out1_7 = '0' ELSE
      Switch_out1_8;

  Delay1_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_6 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay1_out1_6 <= Switch2_out1_5;
      END IF;
    END IF;
  END PROCESS Delay1_5_process;


  Bit_Shift2_out1_4 <= Delay1_out1_6 sll 1;

  Delay2_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_4 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay2_out1_4 <= Delay12_out1_2;
      END IF;
    END IF;
  END PROCESS Delay2_4_process;


  Add1_out1_5 <= Bit_Shift2_out1_4 + Delay2_out1_4;

  Bit_Slice1_out1_8 <= Add1_out1_5(36);

  Bit_Shift1_out1_4 <= Delay1_out1_6 sll 2;

  Add_out1_7 <= Bit_Shift1_out1_4 + Delay2_out1_4;

  Bit_Slice_out1_8 <= Add_out1_7(36);

  Logical_Operator1_out1_5 <=  NOT Bit_Slice_out1_8;

  Logical_Operator4_out1_5 <= Logical_Operator1_out1_5 AND Bit_Slice1_out1_8;

  Delay4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_2 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay4_out1_2 <= Delay14_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_2_process;


  Add2_out1_4 <= Bit_Shift1_out1_4 + Delay4_out1_2;

  Bit_Slice2_out1_7 <= Add2_out1_4(36);

  Logical_Operator_out1_8 <=  NOT Bit_Slice1_out1_8;

  Logical_Operator2_out1_4 <=  NOT Bit_Slice2_out1_7;

  Logical_Operator3_out1_5 <= Logical_Operator4_out1_5 OR Logical_Operator2_out1_4;

  Bit_Concat_out1_17 <= Delay5_out1_1 & unsigned'(Logical_Operator_out1_8 & Logical_Operator3_out1_5);

  Bit_Shift3_out1_4 <= Add1_out1_5 sll 1;

  
  Switch1_out1_7 <= Add2_out1_4 WHEN Bit_Slice2_out1_7 = '0' ELSE
      Bit_Shift3_out1_4;

  
  Switch_out1_9 <= Add_out1_7 WHEN Bit_Slice_out1_8 = '0' ELSE
      Bit_Shift1_out1_4;

  
  Switch2_out1_6 <= Switch1_out1_7 WHEN Bit_Slice1_out1_8 = '0' ELSE
      Switch_out1_9;

  Bit_Shift2_out1_5 <= Switch2_out1_6 sll 1;

  Add1_out1_6 <= Bit_Shift2_out1_5 + Delay2_out1_4;

  Bit_Slice1_out1_9 <= Add1_out1_6(36);

  Bit_Shift1_out1_5 <= Switch2_out1_6 sll 2;

  Add_out1_8 <= Bit_Shift1_out1_5 + Delay2_out1_4;

  Bit_Slice_out1_9 <= Add_out1_8(36);

  Logical_Operator1_out1_6 <=  NOT Bit_Slice_out1_9;

  Logical_Operator4_out1_6 <= Logical_Operator1_out1_6 AND Bit_Slice1_out1_9;

  Add2_out1_5 <= Bit_Shift1_out1_5 + Delay4_out1_2;

  Bit_Slice2_out1_8 <= Add2_out1_5(36);

  Logical_Operator_out1_9 <=  NOT Bit_Slice1_out1_9;

  Logical_Operator2_out1_5 <=  NOT Bit_Slice2_out1_8;

  Logical_Operator3_out1_6 <= Logical_Operator4_out1_6 OR Logical_Operator2_out1_5;

  Bit_Concat_out1_18 <= Bit_Concat_out1_17 & unsigned'(Logical_Operator_out1_9 & Logical_Operator3_out1_6);

  Delay1_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_7 <= to_unsigned(16#0000#, 13);
      ELSIF enb = '1' THEN
        Delay1_out1_7 <= Bit_Concat_out1_18;
      END IF;
    END IF;
  END PROCESS Delay1_6_process;


  Bit_Shift3_out1_5 <= Add1_out1_6 sll 1;

  
  Switch1_out1_8 <= Add2_out1_5 WHEN Bit_Slice2_out1_8 = '0' ELSE
      Bit_Shift3_out1_5;

  
  Switch_out1_10 <= Add_out1_8 WHEN Bit_Slice_out1_9 = '0' ELSE
      Bit_Shift1_out1_5;

  
  Switch2_out1_7 <= Switch1_out1_8 WHEN Bit_Slice1_out1_9 = '0' ELSE
      Switch_out1_10;

  Delay2_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_5 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay2_out1_5 <= Switch2_out1_7;
      END IF;
    END IF;
  END PROCESS Delay2_5_process;


  Bit_Shift2_out1_6 <= Delay2_out1_5 sll 1;

  Delay3_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_5 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay3_out1_5 <= Delay2_out1_4;
      END IF;
    END IF;
  END PROCESS Delay3_5_process;


  Add1_out1_7 <= Bit_Shift2_out1_6 + Delay3_out1_5;

  Bit_Slice1_out1_10 <= Add1_out1_7(36);

  Bit_Shift1_out1_6 <= Delay2_out1_5 sll 2;

  Add_out1_9 <= Bit_Shift1_out1_6 + Delay3_out1_5;

  Bit_Slice_out1_10 <= Add_out1_9(36);

  Logical_Operator1_out1_7 <=  NOT Bit_Slice_out1_10;

  Logical_Operator4_out1_7 <= Logical_Operator1_out1_7 AND Bit_Slice1_out1_10;

  Delay10_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_2 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay10_out1_2 <= Delay4_out1_2;
      END IF;
    END IF;
  END PROCESS Delay10_2_process;


  Add2_out1_6 <= Bit_Shift1_out1_6 + Delay10_out1_2;

  Bit_Slice2_out1_9 <= Add2_out1_6(36);

  Logical_Operator_out1_10 <=  NOT Bit_Slice1_out1_10;

  Logical_Operator2_out1_6 <=  NOT Bit_Slice2_out1_9;

  Logical_Operator3_out1_7 <= Logical_Operator4_out1_7 OR Logical_Operator2_out1_6;

  Bit_Concat_out1_19 <= Delay1_out1_7 & unsigned'(Logical_Operator_out1_10 & Logical_Operator3_out1_7);

  Bit_Shift3_out1_6 <= Add1_out1_7 sll 1;

  
  Switch1_out1_9 <= Add2_out1_6 WHEN Bit_Slice2_out1_9 = '0' ELSE
      Bit_Shift3_out1_6;

  
  Switch_out1_11 <= Add_out1_9 WHEN Bit_Slice_out1_10 = '0' ELSE
      Bit_Shift1_out1_6;

  
  Switch2_out1_8 <= Switch1_out1_9 WHEN Bit_Slice1_out1_10 = '0' ELSE
      Switch_out1_11;

  Bit_Shift2_out1_7 <= Switch2_out1_8 sll 1;

  Add1_out1_8 <= Bit_Shift2_out1_7 + Delay3_out1_5;

  Bit_Slice1_out1_11 <= Add1_out1_8(36);

  Bit_Shift1_out1_7 <= Switch2_out1_8 sll 2;

  Add_out1_10 <= Bit_Shift1_out1_7 + Delay3_out1_5;

  Bit_Slice_out1_11 <= Add_out1_10(36);

  Logical_Operator1_out1_8 <=  NOT Bit_Slice_out1_11;

  Logical_Operator4_out1_8 <= Logical_Operator1_out1_8 AND Bit_Slice1_out1_11;

  Add2_out1_7 <= Bit_Shift1_out1_7 + Delay10_out1_2;

  Bit_Slice2_out1_10 <= Add2_out1_7(36);

  Logical_Operator_out1_11 <=  NOT Bit_Slice1_out1_11;

  Logical_Operator2_out1_7 <=  NOT Bit_Slice2_out1_10;

  Logical_Operator3_out1_8 <= Logical_Operator4_out1_8 OR Logical_Operator2_out1_7;

  Bit_Concat_out1_20 <= Bit_Concat_out1_19 & unsigned'(Logical_Operator_out1_11 & Logical_Operator3_out1_8);

  Delay10_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_3 <= to_unsigned(16#00000#, 17);
      ELSIF enb = '1' THEN
        Delay10_out1_3 <= Bit_Concat_out1_20;
      END IF;
    END IF;
  END PROCESS Delay10_3_process;


  Bit_Shift3_out1_7 <= Add1_out1_8 sll 1;

  
  Switch1_out1_10 <= Add2_out1_7 WHEN Bit_Slice2_out1_10 = '0' ELSE
      Bit_Shift3_out1_7;

  
  Switch_out1_12 <= Add_out1_10 WHEN Bit_Slice_out1_11 = '0' ELSE
      Bit_Shift1_out1_7;

  
  Switch2_out1_9 <= Switch1_out1_10 WHEN Bit_Slice1_out1_11 = '0' ELSE
      Switch_out1_12;

  Delay11_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_4 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay11_out1_4 <= Switch2_out1_9;
      END IF;
    END IF;
  END PROCESS Delay11_4_process;


  Bit_Shift2_out1_8 <= Delay11_out1_4 sll 1;

  Delay12_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_3 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay12_out1_3 <= Delay3_out1_5;
      END IF;
    END IF;
  END PROCESS Delay12_3_process;


  Add1_out1_9 <= Bit_Shift2_out1_8 + Delay12_out1_3;

  Bit_Slice1_out1_12 <= Add1_out1_9(36);

  Bit_Shift1_out1_8 <= Delay11_out1_4 sll 2;

  Add_out1_11 <= Bit_Shift1_out1_8 + Delay12_out1_3;

  Bit_Slice_out1_12 <= Add_out1_11(36);

  Logical_Operator1_out1_9 <=  NOT Bit_Slice_out1_12;

  Logical_Operator4_out1_9 <= Logical_Operator1_out1_9 AND Bit_Slice1_out1_12;

  Delay14_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1_2 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay14_out1_2 <= Delay10_out1_2;
      END IF;
    END IF;
  END PROCESS Delay14_2_process;


  Add2_out1_8 <= Bit_Shift1_out1_8 + Delay14_out1_2;

  Bit_Slice2_out1_11 <= Add2_out1_8(36);

  Logical_Operator_out1_12 <=  NOT Bit_Slice1_out1_12;

  Logical_Operator2_out1_8 <=  NOT Bit_Slice2_out1_11;

  Logical_Operator3_out1_9 <= Logical_Operator4_out1_9 OR Logical_Operator2_out1_8;

  Bit_Concat_out1_21 <= Delay10_out1_3 & unsigned'(Logical_Operator_out1_12 & Logical_Operator3_out1_9);

  Bit_Shift3_out1_8 <= Add1_out1_9 sll 1;

  
  Switch1_out1_11 <= Add2_out1_8 WHEN Bit_Slice2_out1_11 = '0' ELSE
      Bit_Shift3_out1_8;

  
  Switch_out1_13 <= Add_out1_11 WHEN Bit_Slice_out1_12 = '0' ELSE
      Bit_Shift1_out1_8;

  
  Switch2_out1_10 <= Switch1_out1_11 WHEN Bit_Slice1_out1_12 = '0' ELSE
      Switch_out1_13;

  Bit_Shift2_out1_9 <= Switch2_out1_10 sll 1;

  Add1_out1_10 <= Bit_Shift2_out1_9 + Delay12_out1_3;

  Bit_Slice1_out1_13 <= Add1_out1_10(36);

  Bit_Shift1_out1_9 <= Switch2_out1_10 sll 2;

  Add_out1_12 <= Bit_Shift1_out1_9 + Delay12_out1_3;

  Bit_Slice_out1_13 <= Add_out1_12(36);

  Logical_Operator1_out1_10 <=  NOT Bit_Slice_out1_13;

  Logical_Operator4_out1_10 <= Logical_Operator1_out1_10 AND Bit_Slice1_out1_13;

  Add2_out1_9 <= Bit_Shift1_out1_9 + Delay14_out1_2;

  Bit_Slice2_out1_12 <= Add2_out1_9(36);

  Logical_Operator_out1_13 <=  NOT Bit_Slice1_out1_13;

  Logical_Operator2_out1_9 <=  NOT Bit_Slice2_out1_12;

  Logical_Operator3_out1_10 <= Logical_Operator4_out1_10 OR Logical_Operator2_out1_9;

  Bit_Concat_out1_22 <= Bit_Concat_out1_21 & unsigned'(Logical_Operator_out1_13 & Logical_Operator3_out1_10);

  Delay5_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_2 <= to_unsigned(16#000000#, 21);
      ELSIF enb = '1' THEN
        Delay5_out1_2 <= Bit_Concat_out1_22;
      END IF;
    END IF;
  END PROCESS Delay5_2_process;


  Bit_Shift3_out1_9 <= Add1_out1_10 sll 1;

  
  Switch1_out1_12 <= Add2_out1_9 WHEN Bit_Slice2_out1_12 = '0' ELSE
      Bit_Shift3_out1_9;

  
  Switch_out1_14 <= Add_out1_12 WHEN Bit_Slice_out1_13 = '0' ELSE
      Bit_Shift1_out1_9;

  
  Switch2_out1_11 <= Switch1_out1_12 WHEN Bit_Slice1_out1_13 = '0' ELSE
      Switch_out1_14;

  Delay1_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_8 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay1_out1_8 <= Switch2_out1_11;
      END IF;
    END IF;
  END PROCESS Delay1_7_process;


  Bit_Shift2_out1_10 <= Delay1_out1_8 sll 1;

  Delay2_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_6 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay2_out1_6 <= Delay12_out1_3;
      END IF;
    END IF;
  END PROCESS Delay2_6_process;


  Add1_out1_11 <= Bit_Shift2_out1_10 + Delay2_out1_6;

  Bit_Slice1_out1_14 <= Add1_out1_11(36);

  Bit_Shift1_out1_10 <= Delay1_out1_8 sll 2;

  Add_out1_13 <= Bit_Shift1_out1_10 + Delay2_out1_6;

  Bit_Slice_out1_14 <= Add_out1_13(36);

  Logical_Operator1_out1_11 <=  NOT Bit_Slice_out1_14;

  Logical_Operator4_out1_11 <= Logical_Operator1_out1_11 AND Bit_Slice1_out1_14;

  Delay4_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_3 <= to_signed(0, 37);
      ELSIF enb = '1' THEN
        Delay4_out1_3 <= Delay14_out1_2;
      END IF;
    END IF;
  END PROCESS Delay4_3_process;


  Add2_out1_10 <= Bit_Shift1_out1_10 + Delay4_out1_3;

  Bit_Slice2_out1_13 <= Add2_out1_10(36);

  Logical_Operator_out1_14 <=  NOT Bit_Slice1_out1_14;

  Logical_Operator2_out1_10 <=  NOT Bit_Slice2_out1_13;

  Logical_Operator3_out1_11 <= Logical_Operator4_out1_11 OR Logical_Operator2_out1_10;

  Bit_Concat_out1_23 <= Delay5_out1_2 & unsigned'(Logical_Operator_out1_14 & Logical_Operator3_out1_11);

  Bit_Shift3_out1_10 <= Add1_out1_11 sll 1;

  
  Switch1_out1_13 <= Add2_out1_10 WHEN Bit_Slice2_out1_13 = '0' ELSE
      Bit_Shift3_out1_10;

  
  Switch_out1_15 <= Add_out1_13 WHEN Bit_Slice_out1_14 = '0' ELSE
      Bit_Shift1_out1_10;

  
  Switch2_out1_12 <= Switch1_out1_13 WHEN Bit_Slice1_out1_14 = '0' ELSE
      Switch_out1_15;

  Bit_Shift2_out1_11 <= Switch2_out1_12 sll 1;

  Add1_out1_12 <= Bit_Shift2_out1_11 + Delay2_out1_6;

  Bit_Slice1_out1_15 <= Add1_out1_12(36);

  Bit_Shift1_out1_11 <= Switch2_out1_12 sll 2;

  Add_out1_14 <= Bit_Shift1_out1_11 + Delay2_out1_6;

  Bit_Slice_out1_15 <= Add_out1_14(36);

  Logical_Operator1_out1_12 <=  NOT Bit_Slice_out1_15;

  Delay3_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay3_reg_1(0) <= Delay7_out1;
        Delay3_reg_1(5 DOWNTO 1) <= Delay3_reg_1(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay3_6_process;

  Delay3_out1_6 <= Delay3_reg_1(5);

  Logical_Operator_out1_15 <=  NOT Bit_Slice1_out1_15;

  Logical_Operator4_out1_12 <= Logical_Operator1_out1_12 AND Bit_Slice1_out1_15;

  Add2_out1_11 <= Bit_Shift1_out1_11 + Delay4_out1_3;

  Bit_Slice2_out1_14 <= Add2_out1_11(36);

  Logical_Operator2_out1_11 <=  NOT Bit_Slice2_out1_14;

  Logical_Operator3_out1_12 <= Logical_Operator4_out1_12 OR Logical_Operator2_out1_11;

  Bit_Concat_out1_24 <= Bit_Concat_out1_23 & unsigned'(Logical_Operator_out1_15 & Logical_Operator3_out1_12);

  Bit_Slice_out1_16 <= Bit_Concat_out1_24(23 DOWNTO 0);

  Bit_Slice_out1_17 <= unsigned(Switch_out1_3(32 DOWNTO 9));

  Delay2_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg_1 <= (OTHERS => to_unsigned(16#000000#, 24));
      ELSIF enb = '1' THEN
        Delay2_reg_1(0) <= Bit_Slice_out1_17;
        Delay2_reg_1(1 TO 5) <= Delay2_reg_1(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay2_7_process;

  Delay2_out1_7 <= Delay2_reg_1(5);

  
  Switch1_out1_14 <= Bit_Slice_out1_16 WHEN Delay3_out1_6 = '0' ELSE
      Delay2_out1_7;

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_out1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay25_out1 <= Switch1_out1_14;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  Bit_Concat_out1_25 <= alpha0_out1 & Delay25_out1;

  BitSlice1_out1_15 <= Bit_Concat_out1_25(1);

  Logical_Operator1_out1_13 <= Logical_Operator_out1_2 OR Delay31_out1;

  Delay11_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay11_reg_1(0) <= Logical_Operator1_out1_13;
        Delay11_reg_1(6 DOWNTO 1) <= Delay11_reg_1(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay11_5_process;

  Delay11_out1_5 <= Delay11_reg_1(6);

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay37_reg(0) <= Delay11_out1_5;
        Delay37_reg(5 DOWNTO 1) <= Delay37_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay37_process;

  Delay37_out1 <= Delay37_reg(5);

  BitSlice_out1_17 <= Bit_Concat_out1_25(0);

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay28_reg(0) <= Delay37_out1;
        Delay28_reg(6 DOWNTO 1) <= Delay28_reg(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay28_process;

  Delay28_out1 <= Delay28_reg(6);

  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1_15 OR Delay28_out1;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_17 AND alphabitget_Mant_tmp_2_0_out1;

  cast_2_like_Mant_tmp_out1 <= to_unsigned(16#0000002#, 25);

  Mant_tmp_cast_2_like_Man_out1 <= resize(resize(Bit_Concat_out1_25, 32) + resize(cast_2_like_Mant_tmp_out1, 32), 25);

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_25 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_cast_2_like_Man_out1;

  BitSlice2_out1_2 <= if_bitget_Mant_tmp_1_0_out1(24);

  alpha127_out1 <= to_unsigned(16#7F#, 8);

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay29_out1 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay29_process;


  
  if_sticky_3_out1 <= alpha127_out1 WHEN Delay31_out1 = '0' ELSE
      Delay29_out1;

  Delay16_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_reg <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Delay16_reg(0) <= if_sticky_3_out1;
        Delay16_reg(1 TO 6) <= Delay16_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS Delay16_1_process;

  Delay16_out1_1 <= Delay16_reg(6);

  Delay4_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_reg <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Delay4_reg(0) <= Delay16_out1_1;
        Delay4_reg(1 TO 4) <= Delay4_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS Delay4_4_process;

  Delay4_out1_4 <= Delay4_reg(4);

  Delay4_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_5 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay4_out1_5 <= Delay4_out1_4;
      END IF;
    END IF;
  END PROCESS Delay4_5_process;


  Add3_out1 <= Delay4_out1_5 - DTC_out1;

  Constant1_out1_2 <= to_unsigned(16#01#, 8);

  Add2_out1_12 <= Constant1_out1_2 + Delay4_out1_5;

  
  Switch1_out1_15 <= Add3_out1 WHEN Bit_Slice_out1_1 = '0' ELSE
      Add2_out1_12;

  Constant1_out1_3 <= to_unsigned(16#01#, 8);

  exp_1_out1 <= Switch1_out1_15 - Constant1_out1_3;

  
  Switch1_out1_16 <= Switch1_out1_15 WHEN Bit_Slice_out1_3 = '0' ELSE
      exp_1_out1;

  
  Switch_out1_16 <= Switch1_out1_16 WHEN Delay7_out1 = '0' ELSE
      Switch1_out1_15;

  Delay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg_2 <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Delay_reg_2(0) <= Switch_out1_16;
        Delay_reg_2(1 TO 5) <= Delay_reg_2(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay_3_process;

  Delay_out1_3 <= Delay_reg_2(5);

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay24_out1 <= Delay_out1_3;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  cast_1_like_Exp_out1 <= to_unsigned(16#01#, 8);

  Exp_cast_1_like_Exp_out1 <= Delay24_out1 + cast_1_like_Exp_out1;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= Delay24_out1 WHEN BitSlice2_out1_2 = '0' ELSE
      Exp_cast_1_like_Exp_out1;

  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay1_out1_1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  
  aMantissa_0_out1 <= '1' WHEN Delay2_out1 /= to_unsigned(16#000000#, 23) ELSE
      '0';

  Logical_Operator2_out1_12 <= aExponent_cfType_Exponent_I_out1 AND aMantissa_0_out1;

  Logical_Operator1_out1_14 <= Logical_Operator2_out1_12 OR aExponent_cfType_Exponent_I_1_out1;

  Constant_out1_10 <= to_unsigned(16#7F#, 8);

  
  Switch_out1_17 <= Constant_out1_10 WHEN Logical_Operator1_out1_14 = '0' ELSE
      Delay1_out1_1;

  Delay7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_reg <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Delay7_reg(0) <= Switch_out1_17;
        Delay7_reg(1 TO 22) <= Delay7_reg(0 TO 21);
      END IF;
    END IF;
  END PROCESS Delay7_1_process;

  Delay7_out1_1 <= Delay7_reg(22);

  
  if_aExponent_cfType_Exponent_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN Delay9_out1 = '0' ELSE
      Delay7_out1_1;

  Constant3_out1_2 <= to_unsigned(16#00#, 8);

  
  Switch6_out1_1 <= if_aExponent_cfType_Exponent_out1 WHEN Delay1_out1 = '0' ELSE
      Constant3_out1_2;

  Delay4_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_6 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay4_out1_6 <= Switch6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_6_process;


  BitSlice3_out1 <= if_bitget_Mant_tmp_1_0_out1(23 DOWNTO 1);

  C_out1_1 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1 WHEN BitSlice2_out1_2 = '0' ELSE
      C_out1_1;

  Constant1_out1_4 <= to_unsigned(16#000000#, 23);

  
  Switch1_out1_17 <= Constant1_out1_4 WHEN Logical_Operator1_out1_14 = '0' ELSE
      Delay2_out1;

  Delay8_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_reg_2 <= (OTHERS => to_unsigned(16#000000#, 23));
      ELSIF enb = '1' THEN
        Delay8_reg_2(0) <= Switch1_out1_17;
        Delay8_reg_2(1 TO 22) <= Delay8_reg_2(0 TO 21);
      END IF;
    END IF;
  END PROCESS Delay8_2_process;

  Delay8_out1_2 <= Delay8_reg_2(22);

  
  if_aExponent_cfType_Exponent_1_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 WHEN Delay9_out1 = '0' ELSE
      Delay8_out1_2;

  Constant2_out1_2 <= to_unsigned(16#000000#, 23);

  
  Switch5_out1_1 <= if_aExponent_cfType_Exponent_1_out1 WHEN Delay1_out1 = '0' ELSE
      Constant2_out1_2;

  Delay5_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_3 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay5_out1_3 <= Switch5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_3_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= Delay3_out1_1 & Delay4_out1_6 & Delay5_out1_3;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

