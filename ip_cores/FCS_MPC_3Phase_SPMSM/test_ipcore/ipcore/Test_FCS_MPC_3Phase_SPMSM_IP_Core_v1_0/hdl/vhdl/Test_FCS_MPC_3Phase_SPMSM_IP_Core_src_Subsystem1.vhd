-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\FCS_MPC_3Phase_SPMSM\test_ipcore\hdlsrc\FCS_MPC_3Phase_SPMSM_TEST1\Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1.vhd
-- Created: 2022-07-08 11:03:57
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-10
-- Target subsystem base rate: 1e-10
-- Explicit user oversample request: 100x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Index                         ce_out        1e-08
-- done_MPC                      ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1
-- Source Path: FCS_MPC_3Phase_SPMSM_TEST1/Microcontroller Software/Subsystem1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1_pkg.ALL;

ENTITY Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        dq_Done_123_alphabeta_dq          :   IN    std_logic;
        ialpha                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ibeta                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        u_dc_link_AXI                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        SampleTime_AXI                    :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        theta_el                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        omega_m                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        Rs_AXI                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        reciprocal_Ls_AXI                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psiPM_AXI                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ialpha_ref                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ibeta_ref                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        pole_pairs_AXI                    :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        ce_out                            :   OUT   std_logic;
        Index                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        done_MPC                          :   OUT   std_logic
        );
END Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1;


ARCHITECTURE rtl OF Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1 IS

  -- Component Declarations
  COMPONENT Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_100_0                     :   OUT   std_logic;
          enb_1_100_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_56_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(55 DOWNTO 0);  -- sfix56_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_24_En20_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u_dc_link                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          i_ph_ctrl_alpha                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          i_ph_ctrl_beta                  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          omega_el                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          theta_el                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Rs                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          reciprocal_Ls                   :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          psiPM                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ialpha_ref                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ibeta_ref                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          vk                              :   IN    vector_of_std_logic_vector32(0 TO 1);  -- single [2]
          J                               :   OUT   vector_of_std_logic_vector32(0 TO 7);  -- single [8]
          v                               :   OUT   matrix_of_std_logic_vector32(0 TO 1, 0 TO 7)  -- single [2x8]
          );
  END COMPONENT;

  COMPONENT Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          J                               :   IN    vector_of_std_logic_vector32(0 TO 7);  -- single [8]
          v                               :   IN    matrix_of_std_logic_vector32(0 TO 1, 0 TO 7);  -- single [2x8]
          I                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          v_opt                           :   OUT   vector_of_std_logic_vector32(0 TO 1)  -- single [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1_tc
    USE ENTITY work.Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1_tc(rtl);

  FOR ALL : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single
    USE ENTITY work.Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single(rtl);

  FOR ALL : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_56_En11_to_single
    USE ENTITY work.Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_56_En11_to_single(rtl);

  FOR ALL : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_24_En20_to_single
    USE ENTITY work.Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_24_En20_to_single(rtl);

  FOR ALL : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function
    USE ENTITY work.Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function(rtl);

  FOR ALL : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function1
    USE ENTITY work.Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function1(rtl);

  -- Signals
  SIGNAL enb_1_100_0                      : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_100_1                      : std_logic;
  SIGNAL dq_Done_123_alphabeta_dq_1       : std_logic;
  SIGNAL alpha1_for_one_cycle_if_edge_recognized : signed(7 DOWNTO 0);  -- int8
  SIGNAL reset_old2_out1                  : std_logic;
  SIGNAL reset_old_switch1_out1           : std_logic;
  SIGNAL reset_old_switch1_out1_1         : std_logic;
  SIGNAL reset_old2_bypass_reg            : std_logic;  -- ufix1
  SIGNAL reset_old2_out1_1                : std_logic;
  SIGNAL Detec_edge_sub_cast              : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Detec_edge_sub_cast_1            : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL dtc_out                          : std_logic;  -- ufix1
  SIGNAL Saturation_out1                  : std_logic;  -- ufix1
  SIGNAL Saturation_out1_1                : std_logic;  -- ufix1
  SIGNAL End_Cycle                        : std_logic;  -- ufix1
  SIGNAL DelayValid_reg                   : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL DelayValid_reg_next              : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL End_Cycle_1                      : std_logic;  -- ufix1
  SIGNAL End_Cycle_2                      : std_logic;  -- ufix1
  SIGNAL End_Cycle_3                      : std_logic;  -- ufix1
  SIGNAL mpc                              : std_logic;
  SIGNAL alpha1_for_one_cycle_if_edge_recognized_1 : signed(7 DOWNTO 0);  -- int8
  SIGNAL reset_old1_out1                  : std_logic;
  SIGNAL reset_old_switch2_out1           : std_logic;
  SIGNAL reset_old_switch2_out1_1         : std_logic;
  SIGNAL reset_old1_bypass_reg            : std_logic;  -- ufix1
  SIGNAL reset_old1_out1_1                : std_logic;
  SIGNAL Detec_edge1_sub_cast             : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Detec_edge1_sub_cast_1           : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL dtc_out_1                        : std_logic;  -- ufix1
  SIGNAL Saturation1_out1                 : std_logic;  -- ufix1
  SIGNAL Saturation1_out1_1               : std_logic;  -- ufix1
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL u_dc_link_AXI_1                  : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL nfp_in                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL nfp_in_1                         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_2_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL pole_pairs_AXI_1                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL pole_pairs_AXI_2                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL omega_m_1                        : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omega_m_2                        : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omega_el                         : signed(55 DOWNTO 0);  -- sfix56_En11
  SIGNAL omega_el_1                       : signed(55 DOWNTO 0);  -- sfix56_En11
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL theta_el_1                       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL Rs_AXI_1                         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL reciprocal_Ls_AXI_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay7_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay7_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay7_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL psiPM_AXI_1                      : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on9_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on9_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL ialpha_ref_1                     : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on10_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on10_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_bypass_reg               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_out1_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL ibeta_ref_1                      : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay11_bypass_reg               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay11_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay11_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay11_out1_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL SampleTime_AXI_1                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion20_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on12_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on12_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_bypass_reg               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_out1_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL v                                : matrix_of_std_logic_vector32(0 TO 1, 0 TO 7);  -- ufix32 [2x8]
  SIGNAL c67_v                            : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Switch_on14_out1                 : matrix_of_std_logic_vector32(0 TO 1, 0 TO 7);  -- ufix32 [2x8]
  SIGNAL c371_Switch_on14_out1            : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL crp_out_delay2_reg               : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL crp_out_delay2_reg_next          : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL c371_Switch_on14_out1_1          : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Switch_on14_out1_1               : matrix_of_std_logic_vector32(0 TO 1, 0 TO 7);  -- ufix32 [2x8]
  SIGNAL c371_Switch_on14_out1_2          : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Delay14_bypass_reg               : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Delay14_bypass_reg_next          : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL c422_Switch_on14_out1            : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Switch_on14_out1_2               : matrix_of_std_logic_vector32(0 TO 1, 0 TO 7);  -- ufix32 [2x8]
  SIGNAL c4_Switch_on14_out1              : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Delay14_out1                     : matrix_of_std_logic_vector32(0 TO 1, 0 TO 7);  -- ufix32 [2x8]
  SIGNAL c439_Delay14_out1                : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL c389_Delay14_out1                : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Delay14_out1_1                   : matrix_of_std_logic_vector32(0 TO 1, 0 TO 7);  -- ufix32 [2x8]
  SIGNAL c67_Delay14_out1                 : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL delayMatch5_reg                  : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL delayMatch5_reg_next             : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL c67_Delay14_out1_1               : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL c67_Switch_on14_out1             : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL v_opt                            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL DelayValue1_bypass_reg           : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL DelayValue1_bypass_reg_next      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL DelayValue1_out1                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL DelayValue1_out1_1               : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Switch_on13_out1                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Switch_on13_out1_1               : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay13_bypass_reg               : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay13_bypass_reg_next          : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay13_out1                     : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay13_out1_1                   : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL J                                : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Switch_on15_out1                 : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Switch_on15_out1_1               : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Delay15_bypass_reg               : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Delay15_bypass_reg_next          : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Delay15_out1                     : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Delay15_out1_1                   : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Delay15_out1_2                   : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL I                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I_signed                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL t6_bypass_reg                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Data_Type_Conversion10_out1      : signed(31 DOWNTO 0);  -- int32
  SIGNAL End_Cycle_4                      : std_logic;  -- ufix1
  SIGNAL DelayValid1_reg                  : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL DelayValid1_reg_next             : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL End_Cycle_5                      : std_logic;  -- ufix1
  SIGNAL End_Cycle_6                      : std_logic;  -- ufix1
  SIGNAL index_1                          : std_logic;
  SIGNAL index_2                          : std_logic;

BEGIN
  u_Subsystem1_tc : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_100_0 => enb_1_100_0,
              enb_1_100_1 => enb_1_100_1
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_18_En11_to_single : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => u_dc_link_AXI_1,  -- sfix18_En11
              nfp_out => Data_Type_Conversion1_out1  -- single
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_18_En11_to_single_1 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => nfp_in,  -- sfix18_En11
              nfp_out => nfp_out_1_1  -- single
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_18_En11_to_single_2 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => nfp_in_1,  -- sfix18_En11
              nfp_out => nfp_out_2_1  -- single
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_56_En11_to_single : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_56_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(omega_el_1),  -- sfix56_En11
              nfp_out => Data_Type_Conversion5_out1  -- single
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_24_En20_to_single : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_24_En20_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => theta_el_1,  -- sfix24_En20
              nfp_out => Data_Type_Conversion4_out1  -- single
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_18_En11_to_single_3 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Rs_AXI_1,  -- sfix18_En11
              nfp_out => Data_Type_Conversion6_out1  -- single
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_18_En11_to_single_4 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psiPM_AXI_1,  -- sfix18_En11
              nfp_out => Data_Type_Conversion8_out1  -- single
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_18_En11_to_single_5 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => ialpha_ref_1,  -- sfix18_En11
              nfp_out => Data_Type_Conversion12_out1  -- single
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_18_En11_to_single_6 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => ibeta_ref_1,  -- sfix18_En11
              nfp_out => Data_Type_Conversion2_out1  -- single
              );

  u_FCS_MPC_3Phase_SPMSM_TEST1_Microcontroller_Software_Subsystem1_nfp_convert_sfix_24_En20_to_single_1 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_convert_sfix_24_En20_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => SampleTime_AXI_1,  -- sfix24_En20
              nfp_out => Data_Type_Conversion20_out1  -- single
              );

  u_MATLAB_Function : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              u_dc_link => Switch_on2_out1,  -- single
              i_ph_ctrl_alpha => Switch_on1_out1,  -- single
              i_ph_ctrl_beta => Switch_on3_out1,  -- single
              omega_el => Switch_on4_out1,  -- single
              theta_el => Switch_on5_out1,  -- single
              Rs => Switch_on6_out1,  -- single
              reciprocal_Ls => Switch_on7_out1,  -- single
              psiPM => Switch_on9_out1,  -- single
              ialpha_ref => Switch_on10_out1,  -- single
              ibeta_ref => Switch_on11_out1,  -- single
              SampleTime => Switch_on12_out1,  -- single
              vk => Switch_on13_out1,  -- single [2]
              J => J,  -- single [8]
              v => v  -- single [2x8]
              );

  u_MATLAB_Function1 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              J => Switch_on15_out1,  -- single [8]
              v => Switch_on14_out1,  -- single [2x8]
              I => I,  -- int32
              v_opt => v_opt  -- single [2]
              );

  dq_Done_123_alphabeta_dq_1 <= dq_Done_123_alphabeta_dq;

  
  reset_old_switch1_out1 <= reset_old2_out1 WHEN alpha1_for_one_cycle_if_edge_recognized = to_signed(16#00#, 8) ELSE
      dq_Done_123_alphabeta_dq_1;

  crp_out_delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_old_switch1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        reset_old_switch1_out1_1 <= reset_old_switch1_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay17_process;


  reset_old2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_old2_bypass_reg <= '0';
      ELSIF enb_1_100_1 = '1' THEN
        reset_old2_bypass_reg <= reset_old_switch1_out1_1;
      END IF;
    END IF;
  END PROCESS reset_old2_bypass_process;

  
  reset_old2_out1_1 <= reset_old_switch1_out1_1 WHEN enb_1_100_1 = '1' ELSE
      reset_old2_bypass_reg;

  reset_old2_out1 <= reset_old2_out1_1;

  Detec_edge_sub_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & dq_Done_123_alphabeta_dq_1;
  Detec_edge_sub_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & reset_old2_out1;
  alpha1_for_one_cycle_if_edge_recognized <= Detec_edge_sub_cast - Detec_edge_sub_cast_1;

  
  dtc_out <= '1' WHEN (alpha1_for_one_cycle_if_edge_recognized(7) = '0') AND (alpha1_for_one_cycle_if_edge_recognized(6 DOWNTO 1) /= "000000") ELSE
      '0' WHEN alpha1_for_one_cycle_if_edge_recognized(7) = '1' ELSE
      alpha1_for_one_cycle_if_edge_recognized(0);

  Saturation_out1 <= dtc_out;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Saturation_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Saturation_out1_1 <= Saturation_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  DelayValid2_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        End_Cycle <= '0';
      ELSIF enb_1_100_1 = '1' THEN
        End_Cycle <= Saturation_out1_1;
      END IF;
    END IF;
  END PROCESS DelayValid2_output_process;


  DelayValid_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DelayValid_reg(0) <= '0';
        DelayValid_reg(1) <= '0';
        DelayValid_reg(2) <= '0';
        DelayValid_reg(3) <= '0';
      ELSIF enb_1_100_0 = '1' THEN
        DelayValid_reg(0) <= DelayValid_reg_next(0);
        DelayValid_reg(1) <= DelayValid_reg_next(1);
        DelayValid_reg(2) <= DelayValid_reg_next(2);
        DelayValid_reg(3) <= DelayValid_reg_next(3);
      END IF;
    END IF;
  END PROCESS DelayValid_process;

  End_Cycle_1 <= DelayValid_reg(3);
  DelayValid_reg_next(0) <= End_Cycle;
  DelayValid_reg_next(1) <= DelayValid_reg(0);
  DelayValid_reg_next(2) <= DelayValid_reg(1);
  DelayValid_reg_next(3) <= DelayValid_reg(2);

  End_Cycle_2 <= End_Cycle_1;

  End_Cycle_3 <= End_Cycle_2;

  
  mpc <= '1' WHEN End_Cycle_3 /= '0' ELSE
      '0';

  
  reset_old_switch2_out1 <= reset_old1_out1 WHEN alpha1_for_one_cycle_if_edge_recognized_1 = to_signed(16#00#, 8) ELSE
      mpc;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_old_switch2_out1_1 <= '0';
      ELSIF enb = '1' THEN
        reset_old_switch2_out1_1 <= reset_old_switch2_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  reset_old1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_old1_bypass_reg <= '0';
      ELSIF enb_1_100_1 = '1' THEN
        reset_old1_bypass_reg <= reset_old_switch2_out1_1;
      END IF;
    END IF;
  END PROCESS reset_old1_bypass_process;

  
  reset_old1_out1_1 <= reset_old_switch2_out1_1 WHEN enb_1_100_1 = '1' ELSE
      reset_old1_bypass_reg;

  reset_old1_out1 <= reset_old1_out1_1;

  Detec_edge1_sub_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & mpc;
  Detec_edge1_sub_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & reset_old1_out1;
  alpha1_for_one_cycle_if_edge_recognized_1 <= Detec_edge1_sub_cast - Detec_edge1_sub_cast_1;

  
  dtc_out_1 <= '1' WHEN (alpha1_for_one_cycle_if_edge_recognized_1(7) = '0') AND (alpha1_for_one_cycle_if_edge_recognized_1(6 DOWNTO 1) /= "000000") ELSE
      '0' WHEN alpha1_for_one_cycle_if_edge_recognized_1(7) = '1' ELSE
      alpha1_for_one_cycle_if_edge_recognized_1(0);

  Saturation1_out1 <= dtc_out_1;

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Saturation1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Saturation1_out1_1 <= Saturation1_out1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  
  switch_compare_1 <= '1' WHEN Saturation1_out1_1 = '1' ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  u_dc_link_AXI_1 <= std_logic_vector(signed(u_dc_link_AXI));

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on2_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on2_out1_1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay2_bypass_reg <= Switch_on2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Delay2_out1 <= Switch_on2_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay2_bypass_reg;

  Delay2_out1_1 <= Delay2_out1;

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay2_out1_2 <= Delay2_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  
  Switch_on2_out1 <= Delay2_out1_2 WHEN switch_compare_1_1 = '0' ELSE
      Data_Type_Conversion1_out1;

  
  switch_compare_1_2 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  nfp_in <= std_logic_vector(signed(ialpha));

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on1_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on1_out1_1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_bypass_reg <= Switch_on1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Delay1_out1 <= Switch_on1_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay1_bypass_reg;

  Delay1_out1_1 <= Delay1_out1;

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  
  Switch_on1_out1 <= Delay1_out1_2 WHEN switch_compare_1_2 = '0' ELSE
      nfp_out_1_1;

  
  switch_compare_1_3 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  nfp_in_1 <= std_logic_vector(signed(ibeta));

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on3_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on3_out1_1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay3_bypass_reg <= Switch_on3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Delay3_out1 <= Switch_on3_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay3_bypass_reg;

  Delay3_out1_1 <= Delay3_out1;

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  
  Switch_on3_out1 <= Delay3_out1_2 WHEN switch_compare_1_3 = '0' ELSE
      nfp_out_2_1;

  
  switch_compare_1_4 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  pole_pairs_AXI_1 <= signed(pole_pairs_AXI);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pole_pairs_AXI_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        pole_pairs_AXI_2 <= pole_pairs_AXI_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  omega_m_1 <= signed(omega_m);

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        omega_m_2 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        omega_m_2 <= omega_m_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  omega_el <= pole_pairs_AXI_2 * omega_m_2;

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        omega_el_1 <= to_signed(0, 56);
      ELSIF enb = '1' THEN
        omega_el_1 <= omega_el;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on4_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on4_out1_1 <= Switch_on4_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Delay4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay4_bypass_reg <= Switch_on4_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;

  
  Delay4_out1 <= Switch_on4_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay4_bypass_reg;

  Delay4_out1_1 <= Delay4_out1;

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay4_out1_2 <= Delay4_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  
  Switch_on4_out1 <= Delay4_out1_2 WHEN switch_compare_1_4 = '0' ELSE
      Data_Type_Conversion5_out1;

  
  switch_compare_1_5 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  theta_el_1 <= std_logic_vector(signed(theta_el));

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on5_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on5_out1_1 <= Switch_on5_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Delay5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay5_bypass_reg <= Switch_on5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  Delay5_out1 <= Switch_on5_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay5_bypass_reg;

  Delay5_out1_1 <= Delay5_out1;

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay5_out1_2 <= Delay5_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch13_process;


  
  Switch_on5_out1 <= Delay5_out1_2 WHEN switch_compare_1_5 = '0' ELSE
      Data_Type_Conversion4_out1;

  
  switch_compare_1_6 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  Rs_AXI_1 <= std_logic_vector(signed(Rs_AXI));

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on6_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on6_out1_1 <= Switch_on6_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Delay6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay6_bypass_reg <= Switch_on6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_bypass_process;

  
  Delay6_out1 <= Switch_on6_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay6_bypass_reg;

  Delay6_out1_1 <= Delay6_out1;

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay6_out1_2 <= Delay6_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch15_process;


  
  Switch_on6_out1 <= Delay6_out1_2 WHEN switch_compare_1_6 = '0' ELSE
      Data_Type_Conversion6_out1;

  
  switch_compare_1_7 <= '1' WHEN Saturation_out1 = '1' ELSE
      '0';

  reciprocal_Ls_AXI_1 <= reciprocal_Ls_AXI;

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on7_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on7_out1_1 <= Switch_on7_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Delay7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay7_bypass_reg <= Switch_on7_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_bypass_process;

  
  Delay7_out1 <= Switch_on7_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay7_bypass_reg;

  Delay7_out1_1 <= Delay7_out1;

  
  Switch_on7_out1 <= Delay7_out1_1 WHEN switch_compare_1_7 = '0' ELSE
      reciprocal_Ls_AXI_1;

  
  switch_compare_1_8 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  psiPM_AXI_1 <= std_logic_vector(signed(psiPM_AXI));

  crp_out_delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on9_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on9_out1_1 <= Switch_on9_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay12_process;


  Delay9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay9_bypass_reg <= Switch_on9_out1_1;
      END IF;
    END IF;
  END PROCESS Delay9_bypass_process;

  
  Delay9_out1 <= Switch_on9_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg;

  Delay9_out1_1 <= Delay9_out1;

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1_2 <= Delay9_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch17_process;


  
  Switch_on9_out1 <= Delay9_out1_2 WHEN switch_compare_1_8 = '0' ELSE
      Data_Type_Conversion8_out1;

  
  switch_compare_1_9 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  ialpha_ref_1 <= std_logic_vector(signed(ialpha_ref));

  crp_out_delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on10_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on10_out1_1 <= Switch_on10_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay13_process;


  Delay10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay10_bypass_reg <= Switch_on10_out1_1;
      END IF;
    END IF;
  END PROCESS Delay10_bypass_process;

  
  Delay10_out1 <= Switch_on10_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay10_bypass_reg;

  Delay10_out1_1 <= Delay10_out1;

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1_2 <= Delay10_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch19_process;


  
  Switch_on10_out1 <= Delay10_out1_2 WHEN switch_compare_1_9 = '0' ELSE
      Data_Type_Conversion12_out1;

  
  switch_compare_1_10 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  ibeta_ref_1 <= std_logic_vector(signed(ibeta_ref));

  crp_out_delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on11_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on11_out1_1 <= Switch_on11_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay14_process;


  Delay11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay11_bypass_reg <= Switch_on11_out1_1;
      END IF;
    END IF;
  END PROCESS Delay11_bypass_process;

  
  Delay11_out1 <= Switch_on11_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay11_bypass_reg;

  Delay11_out1_1 <= Delay11_out1;

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay11_out1_2 <= Delay11_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch21_process;


  
  Switch_on11_out1 <= Delay11_out1_2 WHEN switch_compare_1_10 = '0' ELSE
      Data_Type_Conversion2_out1;

  
  switch_compare_1_11 <= '1' WHEN Saturation_out1_1 = '1' ELSE
      '0';

  SampleTime_AXI_1 <= std_logic_vector(signed(SampleTime_AXI));

  crp_out_delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on12_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on12_out1_1 <= Switch_on12_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay15_process;


  Delay12_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay12_bypass_reg <= Switch_on12_out1_1;
      END IF;
    END IF;
  END PROCESS Delay12_bypass_process;

  
  Delay12_out1 <= Switch_on12_out1_1 WHEN enb_1_100_1 = '1' ELSE
      Delay12_bypass_reg;

  Delay12_out1_1 <= Delay12_out1;

  delayMatch23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay12_out1_2 <= Delay12_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch23_process;


  
  Switch_on12_out1 <= Delay12_out1_2 WHEN switch_compare_1_11 = '0' ELSE
      Data_Type_Conversion20_out1;

  
  switch_compare_1_12 <= '1' WHEN Saturation_out1 = '1' ELSE
      '0';

  
  switch_compare_1_13 <= '1' WHEN Saturation1_out1_1 = '1' ELSE
      '0';

  c67_vGEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    c67_vGEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      c67_v(d0 + (d1 * 2)) <= v(d0, d1);
    END GENERATE;
  END GENERATE;

  c371_Switch_on14_out1GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    c371_Switch_on14_out1GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      c371_Switch_on14_out1(d0 + (d1 * 2)) <= Switch_on14_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        crp_out_delay2_reg(0) <= X"00000000";
        crp_out_delay2_reg(1) <= X"00000000";
        crp_out_delay2_reg(2) <= X"00000000";
        crp_out_delay2_reg(3) <= X"00000000";
        crp_out_delay2_reg(4) <= X"00000000";
        crp_out_delay2_reg(5) <= X"00000000";
        crp_out_delay2_reg(6) <= X"00000000";
        crp_out_delay2_reg(7) <= X"00000000";
        crp_out_delay2_reg(8) <= X"00000000";
        crp_out_delay2_reg(9) <= X"00000000";
        crp_out_delay2_reg(10) <= X"00000000";
        crp_out_delay2_reg(11) <= X"00000000";
        crp_out_delay2_reg(12) <= X"00000000";
        crp_out_delay2_reg(13) <= X"00000000";
        crp_out_delay2_reg(14) <= X"00000000";
        crp_out_delay2_reg(15) <= X"00000000";
      ELSIF enb = '1' THEN
        crp_out_delay2_reg(0) <= crp_out_delay2_reg_next(0);
        crp_out_delay2_reg(1) <= crp_out_delay2_reg_next(1);
        crp_out_delay2_reg(2) <= crp_out_delay2_reg_next(2);
        crp_out_delay2_reg(3) <= crp_out_delay2_reg_next(3);
        crp_out_delay2_reg(4) <= crp_out_delay2_reg_next(4);
        crp_out_delay2_reg(5) <= crp_out_delay2_reg_next(5);
        crp_out_delay2_reg(6) <= crp_out_delay2_reg_next(6);
        crp_out_delay2_reg(7) <= crp_out_delay2_reg_next(7);
        crp_out_delay2_reg(8) <= crp_out_delay2_reg_next(8);
        crp_out_delay2_reg(9) <= crp_out_delay2_reg_next(9);
        crp_out_delay2_reg(10) <= crp_out_delay2_reg_next(10);
        crp_out_delay2_reg(11) <= crp_out_delay2_reg_next(11);
        crp_out_delay2_reg(12) <= crp_out_delay2_reg_next(12);
        crp_out_delay2_reg(13) <= crp_out_delay2_reg_next(13);
        crp_out_delay2_reg(14) <= crp_out_delay2_reg_next(14);
        crp_out_delay2_reg(15) <= crp_out_delay2_reg_next(15);
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;

  c371_Switch_on14_out1_1(0) <= crp_out_delay2_reg(0);
  c371_Switch_on14_out1_1(1) <= crp_out_delay2_reg(1);
  c371_Switch_on14_out1_1(2) <= crp_out_delay2_reg(2);
  c371_Switch_on14_out1_1(3) <= crp_out_delay2_reg(3);
  c371_Switch_on14_out1_1(4) <= crp_out_delay2_reg(4);
  c371_Switch_on14_out1_1(5) <= crp_out_delay2_reg(5);
  c371_Switch_on14_out1_1(6) <= crp_out_delay2_reg(6);
  c371_Switch_on14_out1_1(7) <= crp_out_delay2_reg(7);
  c371_Switch_on14_out1_1(8) <= crp_out_delay2_reg(8);
  c371_Switch_on14_out1_1(9) <= crp_out_delay2_reg(9);
  c371_Switch_on14_out1_1(10) <= crp_out_delay2_reg(10);
  c371_Switch_on14_out1_1(11) <= crp_out_delay2_reg(11);
  c371_Switch_on14_out1_1(12) <= crp_out_delay2_reg(12);
  c371_Switch_on14_out1_1(13) <= crp_out_delay2_reg(13);
  c371_Switch_on14_out1_1(14) <= crp_out_delay2_reg(14);
  c371_Switch_on14_out1_1(15) <= crp_out_delay2_reg(15);
  crp_out_delay2_reg_next(0) <= c371_Switch_on14_out1(0);
  crp_out_delay2_reg_next(1) <= c371_Switch_on14_out1(1);
  crp_out_delay2_reg_next(2) <= c371_Switch_on14_out1(2);
  crp_out_delay2_reg_next(3) <= c371_Switch_on14_out1(3);
  crp_out_delay2_reg_next(4) <= c371_Switch_on14_out1(4);
  crp_out_delay2_reg_next(5) <= c371_Switch_on14_out1(5);
  crp_out_delay2_reg_next(6) <= c371_Switch_on14_out1(6);
  crp_out_delay2_reg_next(7) <= c371_Switch_on14_out1(7);
  crp_out_delay2_reg_next(8) <= c371_Switch_on14_out1(8);
  crp_out_delay2_reg_next(9) <= c371_Switch_on14_out1(9);
  crp_out_delay2_reg_next(10) <= c371_Switch_on14_out1(10);
  crp_out_delay2_reg_next(11) <= c371_Switch_on14_out1(11);
  crp_out_delay2_reg_next(12) <= c371_Switch_on14_out1(12);
  crp_out_delay2_reg_next(13) <= c371_Switch_on14_out1(13);
  crp_out_delay2_reg_next(14) <= c371_Switch_on14_out1(14);
  crp_out_delay2_reg_next(15) <= c371_Switch_on14_out1(15);

  Switch_on14_out1_1GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Switch_on14_out1_1GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      Switch_on14_out1_1(d0, d1) <= c371_Switch_on14_out1_1(d0 + (d1 * 2));
    END GENERATE;
  END GENERATE;

  c371_Switch_on14_out1_2GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    c371_Switch_on14_out1_2GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      c371_Switch_on14_out1_2(d0 + (d1 * 2)) <= Switch_on14_out1_1(d0, d1);
    END GENERATE;
  END GENERATE;

  Delay14_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_bypass_reg(0) <= X"00000000";
        Delay14_bypass_reg(1) <= X"00000000";
        Delay14_bypass_reg(2) <= X"00000000";
        Delay14_bypass_reg(3) <= X"00000000";
        Delay14_bypass_reg(4) <= X"00000000";
        Delay14_bypass_reg(5) <= X"00000000";
        Delay14_bypass_reg(6) <= X"00000000";
        Delay14_bypass_reg(7) <= X"00000000";
        Delay14_bypass_reg(8) <= X"00000000";
        Delay14_bypass_reg(9) <= X"00000000";
        Delay14_bypass_reg(10) <= X"00000000";
        Delay14_bypass_reg(11) <= X"00000000";
        Delay14_bypass_reg(12) <= X"00000000";
        Delay14_bypass_reg(13) <= X"00000000";
        Delay14_bypass_reg(14) <= X"00000000";
        Delay14_bypass_reg(15) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay14_bypass_reg(0) <= Delay14_bypass_reg_next(0);
        Delay14_bypass_reg(1) <= Delay14_bypass_reg_next(1);
        Delay14_bypass_reg(2) <= Delay14_bypass_reg_next(2);
        Delay14_bypass_reg(3) <= Delay14_bypass_reg_next(3);
        Delay14_bypass_reg(4) <= Delay14_bypass_reg_next(4);
        Delay14_bypass_reg(5) <= Delay14_bypass_reg_next(5);
        Delay14_bypass_reg(6) <= Delay14_bypass_reg_next(6);
        Delay14_bypass_reg(7) <= Delay14_bypass_reg_next(7);
        Delay14_bypass_reg(8) <= Delay14_bypass_reg_next(8);
        Delay14_bypass_reg(9) <= Delay14_bypass_reg_next(9);
        Delay14_bypass_reg(10) <= Delay14_bypass_reg_next(10);
        Delay14_bypass_reg(11) <= Delay14_bypass_reg_next(11);
        Delay14_bypass_reg(12) <= Delay14_bypass_reg_next(12);
        Delay14_bypass_reg(13) <= Delay14_bypass_reg_next(13);
        Delay14_bypass_reg(14) <= Delay14_bypass_reg_next(14);
        Delay14_bypass_reg(15) <= Delay14_bypass_reg_next(15);
      END IF;
    END IF;
  END PROCESS Delay14_bypass_process;

  
  c422_Switch_on14_out1(0) <= c371_Switch_on14_out1_2(0) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(0);
  
  c422_Switch_on14_out1(1) <= c371_Switch_on14_out1_2(1) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(1);
  
  c422_Switch_on14_out1(2) <= c371_Switch_on14_out1_2(2) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(2);
  
  c422_Switch_on14_out1(3) <= c371_Switch_on14_out1_2(3) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(3);
  
  c422_Switch_on14_out1(4) <= c371_Switch_on14_out1_2(4) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(4);
  
  c422_Switch_on14_out1(5) <= c371_Switch_on14_out1_2(5) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(5);
  
  c422_Switch_on14_out1(6) <= c371_Switch_on14_out1_2(6) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(6);
  
  c422_Switch_on14_out1(7) <= c371_Switch_on14_out1_2(7) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(7);
  
  c422_Switch_on14_out1(8) <= c371_Switch_on14_out1_2(8) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(8);
  
  c422_Switch_on14_out1(9) <= c371_Switch_on14_out1_2(9) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(9);
  
  c422_Switch_on14_out1(10) <= c371_Switch_on14_out1_2(10) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(10);
  
  c422_Switch_on14_out1(11) <= c371_Switch_on14_out1_2(11) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(11);
  
  c422_Switch_on14_out1(12) <= c371_Switch_on14_out1_2(12) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(12);
  
  c422_Switch_on14_out1(13) <= c371_Switch_on14_out1_2(13) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(13);
  
  c422_Switch_on14_out1(14) <= c371_Switch_on14_out1_2(14) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(14);
  
  c422_Switch_on14_out1(15) <= c371_Switch_on14_out1_2(15) WHEN enb_1_100_1 = '1' ELSE
      Delay14_bypass_reg(15);
  Delay14_bypass_reg_next(0) <= c371_Switch_on14_out1_2(0);
  Delay14_bypass_reg_next(1) <= c371_Switch_on14_out1_2(1);
  Delay14_bypass_reg_next(2) <= c371_Switch_on14_out1_2(2);
  Delay14_bypass_reg_next(3) <= c371_Switch_on14_out1_2(3);
  Delay14_bypass_reg_next(4) <= c371_Switch_on14_out1_2(4);
  Delay14_bypass_reg_next(5) <= c371_Switch_on14_out1_2(5);
  Delay14_bypass_reg_next(6) <= c371_Switch_on14_out1_2(6);
  Delay14_bypass_reg_next(7) <= c371_Switch_on14_out1_2(7);
  Delay14_bypass_reg_next(8) <= c371_Switch_on14_out1_2(8);
  Delay14_bypass_reg_next(9) <= c371_Switch_on14_out1_2(9);
  Delay14_bypass_reg_next(10) <= c371_Switch_on14_out1_2(10);
  Delay14_bypass_reg_next(11) <= c371_Switch_on14_out1_2(11);
  Delay14_bypass_reg_next(12) <= c371_Switch_on14_out1_2(12);
  Delay14_bypass_reg_next(13) <= c371_Switch_on14_out1_2(13);
  Delay14_bypass_reg_next(14) <= c371_Switch_on14_out1_2(14);
  Delay14_bypass_reg_next(15) <= c371_Switch_on14_out1_2(15);

  Switch_on14_out1_2GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Switch_on14_out1_2GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      Switch_on14_out1_2(d0, d1) <= c422_Switch_on14_out1(d0 + (d1 * 2));
    END GENERATE;
  END GENERATE;

  c4_Switch_on14_out1GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    c4_Switch_on14_out1GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      c4_Switch_on14_out1(d0 + (d1 * 2)) <= Switch_on14_out1_2(d0, d1);
    END GENERATE;
  END GENERATE;

  Delay14_out1GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Delay14_out1GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      Delay14_out1(d0, d1) <= c4_Switch_on14_out1(d0 + (d1 * 2));
    END GENERATE;
  END GENERATE;

  c439_Delay14_out1GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    c439_Delay14_out1GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      c439_Delay14_out1(d0 + (d1 * 2)) <= Delay14_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  c389_Delay14_out1 <= c439_Delay14_out1;

  Delay14_out1_1GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Delay14_out1_1GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      Delay14_out1_1(d0, d1) <= c389_Delay14_out1(d0 + (d1 * 2));
    END GENERATE;
  END GENERATE;

  c67_Delay14_out1GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    c67_Delay14_out1GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      c67_Delay14_out1(d0 + (d1 * 2)) <= Delay14_out1_1(d0, d1);
    END GENERATE;
  END GENERATE;

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch5_reg(0) <= X"00000000";
        delayMatch5_reg(1) <= X"00000000";
        delayMatch5_reg(2) <= X"00000000";
        delayMatch5_reg(3) <= X"00000000";
        delayMatch5_reg(4) <= X"00000000";
        delayMatch5_reg(5) <= X"00000000";
        delayMatch5_reg(6) <= X"00000000";
        delayMatch5_reg(7) <= X"00000000";
        delayMatch5_reg(8) <= X"00000000";
        delayMatch5_reg(9) <= X"00000000";
        delayMatch5_reg(10) <= X"00000000";
        delayMatch5_reg(11) <= X"00000000";
        delayMatch5_reg(12) <= X"00000000";
        delayMatch5_reg(13) <= X"00000000";
        delayMatch5_reg(14) <= X"00000000";
        delayMatch5_reg(15) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= delayMatch5_reg_next(0);
        delayMatch5_reg(1) <= delayMatch5_reg_next(1);
        delayMatch5_reg(2) <= delayMatch5_reg_next(2);
        delayMatch5_reg(3) <= delayMatch5_reg_next(3);
        delayMatch5_reg(4) <= delayMatch5_reg_next(4);
        delayMatch5_reg(5) <= delayMatch5_reg_next(5);
        delayMatch5_reg(6) <= delayMatch5_reg_next(6);
        delayMatch5_reg(7) <= delayMatch5_reg_next(7);
        delayMatch5_reg(8) <= delayMatch5_reg_next(8);
        delayMatch5_reg(9) <= delayMatch5_reg_next(9);
        delayMatch5_reg(10) <= delayMatch5_reg_next(10);
        delayMatch5_reg(11) <= delayMatch5_reg_next(11);
        delayMatch5_reg(12) <= delayMatch5_reg_next(12);
        delayMatch5_reg(13) <= delayMatch5_reg_next(13);
        delayMatch5_reg(14) <= delayMatch5_reg_next(14);
        delayMatch5_reg(15) <= delayMatch5_reg_next(15);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  c67_Delay14_out1_1(0) <= delayMatch5_reg(0);
  c67_Delay14_out1_1(1) <= delayMatch5_reg(1);
  c67_Delay14_out1_1(2) <= delayMatch5_reg(2);
  c67_Delay14_out1_1(3) <= delayMatch5_reg(3);
  c67_Delay14_out1_1(4) <= delayMatch5_reg(4);
  c67_Delay14_out1_1(5) <= delayMatch5_reg(5);
  c67_Delay14_out1_1(6) <= delayMatch5_reg(6);
  c67_Delay14_out1_1(7) <= delayMatch5_reg(7);
  c67_Delay14_out1_1(8) <= delayMatch5_reg(8);
  c67_Delay14_out1_1(9) <= delayMatch5_reg(9);
  c67_Delay14_out1_1(10) <= delayMatch5_reg(10);
  c67_Delay14_out1_1(11) <= delayMatch5_reg(11);
  c67_Delay14_out1_1(12) <= delayMatch5_reg(12);
  c67_Delay14_out1_1(13) <= delayMatch5_reg(13);
  c67_Delay14_out1_1(14) <= delayMatch5_reg(14);
  c67_Delay14_out1_1(15) <= delayMatch5_reg(15);
  delayMatch5_reg_next(0) <= c67_Delay14_out1(0);
  delayMatch5_reg_next(1) <= c67_Delay14_out1(1);
  delayMatch5_reg_next(2) <= c67_Delay14_out1(2);
  delayMatch5_reg_next(3) <= c67_Delay14_out1(3);
  delayMatch5_reg_next(4) <= c67_Delay14_out1(4);
  delayMatch5_reg_next(5) <= c67_Delay14_out1(5);
  delayMatch5_reg_next(6) <= c67_Delay14_out1(6);
  delayMatch5_reg_next(7) <= c67_Delay14_out1(7);
  delayMatch5_reg_next(8) <= c67_Delay14_out1(8);
  delayMatch5_reg_next(9) <= c67_Delay14_out1(9);
  delayMatch5_reg_next(10) <= c67_Delay14_out1(10);
  delayMatch5_reg_next(11) <= c67_Delay14_out1(11);
  delayMatch5_reg_next(12) <= c67_Delay14_out1(12);
  delayMatch5_reg_next(13) <= c67_Delay14_out1(13);
  delayMatch5_reg_next(14) <= c67_Delay14_out1(14);
  delayMatch5_reg_next(15) <= c67_Delay14_out1(15);

  
  c67_Switch_on14_out1(0) <= c67_Delay14_out1_1(0) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(0);
  
  c67_Switch_on14_out1(1) <= c67_Delay14_out1_1(1) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(1);
  
  c67_Switch_on14_out1(2) <= c67_Delay14_out1_1(2) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(2);
  
  c67_Switch_on14_out1(3) <= c67_Delay14_out1_1(3) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(3);
  
  c67_Switch_on14_out1(4) <= c67_Delay14_out1_1(4) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(4);
  
  c67_Switch_on14_out1(5) <= c67_Delay14_out1_1(5) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(5);
  
  c67_Switch_on14_out1(6) <= c67_Delay14_out1_1(6) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(6);
  
  c67_Switch_on14_out1(7) <= c67_Delay14_out1_1(7) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(7);
  
  c67_Switch_on14_out1(8) <= c67_Delay14_out1_1(8) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(8);
  
  c67_Switch_on14_out1(9) <= c67_Delay14_out1_1(9) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(9);
  
  c67_Switch_on14_out1(10) <= c67_Delay14_out1_1(10) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(10);
  
  c67_Switch_on14_out1(11) <= c67_Delay14_out1_1(11) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(11);
  
  c67_Switch_on14_out1(12) <= c67_Delay14_out1_1(12) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(12);
  
  c67_Switch_on14_out1(13) <= c67_Delay14_out1_1(13) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(13);
  
  c67_Switch_on14_out1(14) <= c67_Delay14_out1_1(14) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(14);
  
  c67_Switch_on14_out1(15) <= c67_Delay14_out1_1(15) WHEN switch_compare_1_13 = '0' ELSE
      c67_v(15);

  Switch_on14_out1GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Switch_on14_out1GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
      Switch_on14_out1(d0, d1) <= c67_Switch_on14_out1(d0 + (d1 * 2));
    END GENERATE;
  END GENERATE;

  DelayValue1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DelayValue1_bypass_reg(0) <= X"00000000";
        DelayValue1_bypass_reg(1) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        DelayValue1_bypass_reg(0) <= DelayValue1_bypass_reg_next(0);
        DelayValue1_bypass_reg(1) <= DelayValue1_bypass_reg_next(1);
      END IF;
    END IF;
  END PROCESS DelayValue1_bypass_process;

  
  DelayValue1_out1(0) <= v_opt(0) WHEN enb_1_100_1 = '1' ELSE
      DelayValue1_bypass_reg(0);
  
  DelayValue1_out1(1) <= v_opt(1) WHEN enb_1_100_1 = '1' ELSE
      DelayValue1_bypass_reg(1);
  DelayValue1_bypass_reg_next(0) <= v_opt(0);
  DelayValue1_bypass_reg_next(1) <= v_opt(1);

  DelayValue1_out1_1 <= DelayValue1_out1;

  crp_out_delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on13_out1_1(0) <= X"00000000";
        Switch_on13_out1_1(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on13_out1_1(0) <= Switch_on13_out1(0);
        Switch_on13_out1_1(1) <= Switch_on13_out1(1);
      END IF;
    END IF;
  END PROCESS crp_out_delay16_process;


  Delay13_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_bypass_reg(0) <= X"00000000";
        Delay13_bypass_reg(1) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay13_bypass_reg(0) <= Delay13_bypass_reg_next(0);
        Delay13_bypass_reg(1) <= Delay13_bypass_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay13_bypass_process;

  
  Delay13_out1(0) <= Switch_on13_out1_1(0) WHEN enb_1_100_1 = '1' ELSE
      Delay13_bypass_reg(0);
  
  Delay13_out1(1) <= Switch_on13_out1_1(1) WHEN enb_1_100_1 = '1' ELSE
      Delay13_bypass_reg(1);
  Delay13_bypass_reg_next(0) <= Switch_on13_out1_1(0);
  Delay13_bypass_reg_next(1) <= Switch_on13_out1_1(1);

  Delay13_out1_1 <= Delay13_out1;

  
  Switch_on13_out1(0) <= Delay13_out1_1(0) WHEN switch_compare_1_12 = '0' ELSE
      DelayValue1_out1_1(0);
  
  Switch_on13_out1(1) <= Delay13_out1_1(1) WHEN switch_compare_1_12 = '0' ELSE
      DelayValue1_out1_1(1);

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on15_out1_1(0) <= X"00000000";
        Switch_on15_out1_1(1) <= X"00000000";
        Switch_on15_out1_1(2) <= X"00000000";
        Switch_on15_out1_1(3) <= X"00000000";
        Switch_on15_out1_1(4) <= X"00000000";
        Switch_on15_out1_1(5) <= X"00000000";
        Switch_on15_out1_1(6) <= X"00000000";
        Switch_on15_out1_1(7) <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on15_out1_1(0) <= Switch_on15_out1(0);
        Switch_on15_out1_1(1) <= Switch_on15_out1(1);
        Switch_on15_out1_1(2) <= Switch_on15_out1(2);
        Switch_on15_out1_1(3) <= Switch_on15_out1(3);
        Switch_on15_out1_1(4) <= Switch_on15_out1(4);
        Switch_on15_out1_1(5) <= Switch_on15_out1(5);
        Switch_on15_out1_1(6) <= Switch_on15_out1(6);
        Switch_on15_out1_1(7) <= Switch_on15_out1(7);
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay15_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_bypass_reg(0) <= X"00000000";
        Delay15_bypass_reg(1) <= X"00000000";
        Delay15_bypass_reg(2) <= X"00000000";
        Delay15_bypass_reg(3) <= X"00000000";
        Delay15_bypass_reg(4) <= X"00000000";
        Delay15_bypass_reg(5) <= X"00000000";
        Delay15_bypass_reg(6) <= X"00000000";
        Delay15_bypass_reg(7) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay15_bypass_reg(0) <= Delay15_bypass_reg_next(0);
        Delay15_bypass_reg(1) <= Delay15_bypass_reg_next(1);
        Delay15_bypass_reg(2) <= Delay15_bypass_reg_next(2);
        Delay15_bypass_reg(3) <= Delay15_bypass_reg_next(3);
        Delay15_bypass_reg(4) <= Delay15_bypass_reg_next(4);
        Delay15_bypass_reg(5) <= Delay15_bypass_reg_next(5);
        Delay15_bypass_reg(6) <= Delay15_bypass_reg_next(6);
        Delay15_bypass_reg(7) <= Delay15_bypass_reg_next(7);
      END IF;
    END IF;
  END PROCESS Delay15_bypass_process;

  
  Delay15_out1(0) <= Switch_on15_out1_1(0) WHEN enb_1_100_1 = '1' ELSE
      Delay15_bypass_reg(0);
  
  Delay15_out1(1) <= Switch_on15_out1_1(1) WHEN enb_1_100_1 = '1' ELSE
      Delay15_bypass_reg(1);
  
  Delay15_out1(2) <= Switch_on15_out1_1(2) WHEN enb_1_100_1 = '1' ELSE
      Delay15_bypass_reg(2);
  
  Delay15_out1(3) <= Switch_on15_out1_1(3) WHEN enb_1_100_1 = '1' ELSE
      Delay15_bypass_reg(3);
  
  Delay15_out1(4) <= Switch_on15_out1_1(4) WHEN enb_1_100_1 = '1' ELSE
      Delay15_bypass_reg(4);
  
  Delay15_out1(5) <= Switch_on15_out1_1(5) WHEN enb_1_100_1 = '1' ELSE
      Delay15_bypass_reg(5);
  
  Delay15_out1(6) <= Switch_on15_out1_1(6) WHEN enb_1_100_1 = '1' ELSE
      Delay15_bypass_reg(6);
  
  Delay15_out1(7) <= Switch_on15_out1_1(7) WHEN enb_1_100_1 = '1' ELSE
      Delay15_bypass_reg(7);
  Delay15_bypass_reg_next(0) <= Switch_on15_out1_1(0);
  Delay15_bypass_reg_next(1) <= Switch_on15_out1_1(1);
  Delay15_bypass_reg_next(2) <= Switch_on15_out1_1(2);
  Delay15_bypass_reg_next(3) <= Switch_on15_out1_1(3);
  Delay15_bypass_reg_next(4) <= Switch_on15_out1_1(4);
  Delay15_bypass_reg_next(5) <= Switch_on15_out1_1(5);
  Delay15_bypass_reg_next(6) <= Switch_on15_out1_1(6);
  Delay15_bypass_reg_next(7) <= Switch_on15_out1_1(7);

  Delay15_out1_1 <= Delay15_out1;

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1_2(0) <= X"00000000";
        Delay15_out1_2(1) <= X"00000000";
        Delay15_out1_2(2) <= X"00000000";
        Delay15_out1_2(3) <= X"00000000";
        Delay15_out1_2(4) <= X"00000000";
        Delay15_out1_2(5) <= X"00000000";
        Delay15_out1_2(6) <= X"00000000";
        Delay15_out1_2(7) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay15_out1_2(0) <= Delay15_out1_1(0);
        Delay15_out1_2(1) <= Delay15_out1_1(1);
        Delay15_out1_2(2) <= Delay15_out1_1(2);
        Delay15_out1_2(3) <= Delay15_out1_1(3);
        Delay15_out1_2(4) <= Delay15_out1_1(4);
        Delay15_out1_2(5) <= Delay15_out1_1(5);
        Delay15_out1_2(6) <= Delay15_out1_1(6);
        Delay15_out1_2(7) <= Delay15_out1_1(7);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  
  Switch_on15_out1(0) <= Delay15_out1_2(0) WHEN switch_compare_1 = '0' ELSE
      J(0);
  
  Switch_on15_out1(1) <= Delay15_out1_2(1) WHEN switch_compare_1 = '0' ELSE
      J(1);
  
  Switch_on15_out1(2) <= Delay15_out1_2(2) WHEN switch_compare_1 = '0' ELSE
      J(2);
  
  Switch_on15_out1(3) <= Delay15_out1_2(3) WHEN switch_compare_1 = '0' ELSE
      J(3);
  
  Switch_on15_out1(4) <= Delay15_out1_2(4) WHEN switch_compare_1 = '0' ELSE
      J(4);
  
  Switch_on15_out1(5) <= Delay15_out1_2(5) WHEN switch_compare_1 = '0' ELSE
      J(5);
  
  Switch_on15_out1(6) <= Delay15_out1_2(6) WHEN switch_compare_1 = '0' ELSE
      J(6);
  
  Switch_on15_out1(7) <= Delay15_out1_2(7) WHEN switch_compare_1 = '0' ELSE
      J(7);

  I_signed <= signed(I);

  t6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t6_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_100_1 = '1' THEN
        t6_bypass_reg <= I_signed;
      END IF;
    END IF;
  END PROCESS t6_bypass_process;

  
  Data_Type_Conversion10_out1 <= I_signed WHEN enb_1_100_1 = '1' ELSE
      t6_bypass_reg;

  Index <= std_logic_vector(Data_Type_Conversion10_out1);

  DelayValid11_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        End_Cycle_4 <= '0';
      ELSIF enb_1_100_1 = '1' THEN
        End_Cycle_4 <= Saturation1_out1_1;
      END IF;
    END IF;
  END PROCESS DelayValid11_output_process;


  DelayValid1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DelayValid1_reg(0) <= '0';
        DelayValid1_reg(1) <= '0';
        DelayValid1_reg(2) <= '0';
      ELSIF enb_1_100_0 = '1' THEN
        DelayValid1_reg(0) <= DelayValid1_reg_next(0);
        DelayValid1_reg(1) <= DelayValid1_reg_next(1);
        DelayValid1_reg(2) <= DelayValid1_reg_next(2);
      END IF;
    END IF;
  END PROCESS DelayValid1_process;

  End_Cycle_5 <= DelayValid1_reg(2);
  DelayValid1_reg_next(0) <= End_Cycle_4;
  DelayValid1_reg_next(1) <= DelayValid1_reg(0);
  DelayValid1_reg_next(2) <= DelayValid1_reg(1);

  End_Cycle_6 <= End_Cycle_5;

  
  index_1 <= '1' WHEN End_Cycle_6 /= '0' ELSE
      '0';

  delayMatch24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        index_2 <= '0';
      ELSIF enb_1_100_0 = '1' THEN
        index_2 <= index_1;
      END IF;
    END IF;
  END PROCESS delayMatch24_process;


  done_MPC <= index_2;

  ce_out <= enb_1_100_1;

END rtl;

