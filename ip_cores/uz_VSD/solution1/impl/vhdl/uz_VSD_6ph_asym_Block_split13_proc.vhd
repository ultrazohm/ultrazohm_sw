-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_VSD_6ph_asym_Block_split13_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    cpy_in_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cpy_in_0_out_full_n : IN STD_LOGIC;
    cpy_in_0_out_write : OUT STD_LOGIC;
    cpy_in_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cpy_in_1_out_full_n : IN STD_LOGIC;
    cpy_in_1_out_write : OUT STD_LOGIC;
    cpy_in_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cpy_in_2_out_full_n : IN STD_LOGIC;
    cpy_in_2_out_write : OUT STD_LOGIC;
    cpy_in_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cpy_in_3_out_full_n : IN STD_LOGIC;
    cpy_in_3_out_write : OUT STD_LOGIC;
    cpy_in_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cpy_in_4_out_full_n : IN STD_LOGIC;
    cpy_in_4_out_write : OUT STD_LOGIC;
    cpy_in_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cpy_in_5_out_full_n : IN STD_LOGIC;
    cpy_in_5_out_write : OUT STD_LOGIC );
end;


architecture behav of uz_VSD_6ph_asym_Block_split13_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal cpy_in_0_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal cpy_in_1_out_blk_n : STD_LOGIC;
    signal cpy_in_2_out_blk_n : STD_LOGIC;
    signal cpy_in_3_out_blk_n : STD_LOGIC;
    signal cpy_in_4_out_blk_n : STD_LOGIC;
    signal cpy_in_5_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal in_load_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal in_load_1_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_load_2_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_load_3_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                in_load_1_reg_192 <= in_r_q0;
                in_load_reg_187 <= in_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                in_load_2_reg_207 <= in_r_q1;
                in_load_3_reg_212 <= in_r_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n)
    begin
                ap_block_state4 <= ((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        if ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    cpy_in_0_out_blk_n_assign_proc : process(cpy_in_0_out_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cpy_in_0_out_blk_n <= cpy_in_0_out_full_n;
        else 
            cpy_in_0_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cpy_in_0_out_din <= in_load_reg_187;

    cpy_in_0_out_write_assign_proc : process(cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        if ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cpy_in_0_out_write <= ap_const_logic_1;
        else 
            cpy_in_0_out_write <= ap_const_logic_0;
        end if; 
    end process;


    cpy_in_1_out_blk_n_assign_proc : process(cpy_in_1_out_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cpy_in_1_out_blk_n <= cpy_in_1_out_full_n;
        else 
            cpy_in_1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cpy_in_1_out_din <= in_load_1_reg_192;

    cpy_in_1_out_write_assign_proc : process(cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        if ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cpy_in_1_out_write <= ap_const_logic_1;
        else 
            cpy_in_1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    cpy_in_2_out_blk_n_assign_proc : process(cpy_in_2_out_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cpy_in_2_out_blk_n <= cpy_in_2_out_full_n;
        else 
            cpy_in_2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cpy_in_2_out_din <= in_load_2_reg_207;

    cpy_in_2_out_write_assign_proc : process(cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        if ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cpy_in_2_out_write <= ap_const_logic_1;
        else 
            cpy_in_2_out_write <= ap_const_logic_0;
        end if; 
    end process;


    cpy_in_3_out_blk_n_assign_proc : process(cpy_in_3_out_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cpy_in_3_out_blk_n <= cpy_in_3_out_full_n;
        else 
            cpy_in_3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cpy_in_3_out_din <= in_load_3_reg_212;

    cpy_in_3_out_write_assign_proc : process(cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        if ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cpy_in_3_out_write <= ap_const_logic_1;
        else 
            cpy_in_3_out_write <= ap_const_logic_0;
        end if; 
    end process;


    cpy_in_4_out_blk_n_assign_proc : process(cpy_in_4_out_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cpy_in_4_out_blk_n <= cpy_in_4_out_full_n;
        else 
            cpy_in_4_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cpy_in_4_out_din <= in_r_q1;

    cpy_in_4_out_write_assign_proc : process(cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        if ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cpy_in_4_out_write <= ap_const_logic_1;
        else 
            cpy_in_4_out_write <= ap_const_logic_0;
        end if; 
    end process;


    cpy_in_5_out_blk_n_assign_proc : process(cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cpy_in_5_out_blk_n <= cpy_in_5_out_full_n;
        else 
            cpy_in_5_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cpy_in_5_out_din <= in_r_q0;

    cpy_in_5_out_write_assign_proc : process(cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        if ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cpy_in_5_out_write <= ap_const_logic_1;
        else 
            cpy_in_5_out_write <= ap_const_logic_0;
        end if; 
    end process;


    in_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_r_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            in_r_address0 <= "XXX";
        end if; 
    end process;


    in_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_r_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            in_r_address1 <= "XXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(cpy_in_0_out_full_n, cpy_in_1_out_full_n, cpy_in_2_out_full_n, cpy_in_3_out_full_n, cpy_in_4_out_full_n, cpy_in_5_out_full_n, ap_CS_fsm_state4)
    begin
        if ((not(((cpy_in_5_out_full_n = ap_const_logic_0) or (cpy_in_4_out_full_n = ap_const_logic_0) or (cpy_in_3_out_full_n = ap_const_logic_0) or (cpy_in_2_out_full_n = ap_const_logic_0) or (cpy_in_1_out_full_n = ap_const_logic_0) or (cpy_in_0_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
