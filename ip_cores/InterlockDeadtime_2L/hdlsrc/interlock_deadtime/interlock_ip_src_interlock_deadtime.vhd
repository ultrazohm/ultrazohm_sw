-- -------------------------------------------------------------
-- 
-- File Name: /home/ts/Dokumente/ultrazohm_testbench/ultrazohm_sw/ip_cores/InterlockDeadtime_2L/hdlsrc/interlock_deadtime/interlock_ip_src_interlock_deadtime.vhd
-- Created: 2020-12-14 18:30:50
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- s0_out                        ce_out        1e-08
-- s1_out                        ce_out        1e-08
-- s2_out                        ce_out        1e-08
-- s3_out                        ce_out        1e-08
-- s4_out                        ce_out        1e-08
-- s5_out                        ce_out        1e-08
-- AXI_fb_enable                 ce_out        1e-08
-- AXI_fb_DelayCycles            ce_out        1e-08
-- AXI_fb_InverseBotSwitch       ce_out        1e-08
-- enableFB                      ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: interlock_ip_src_interlock_deadtime
-- Source Path: interlock_deadtime/interlock_deadtime
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY interlock_ip_src_interlock_deadtime IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        S0                                :   IN    std_logic;
        S1                                :   IN    std_logic;
        S2                                :   IN    std_logic;
        S3                                :   IN    std_logic;
        S4                                :   IN    std_logic;
        S5                                :   IN    std_logic;
        AXI_DelayCycles                   :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
        AXI_EnableOutput                  :   IN    std_logic;
        AXI_InverseBotSwitch              :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        s0_out                            :   OUT   std_logic;
        s1_out                            :   OUT   std_logic;
        s2_out                            :   OUT   std_logic;
        s3_out                            :   OUT   std_logic;
        s4_out                            :   OUT   std_logic;
        s5_out                            :   OUT   std_logic;
        AXI_fb_enable                     :   OUT   std_logic;
        AXI_fb_DelayCycles                :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        AXI_fb_InverseBotSwitch           :   OUT   std_logic;
        enableFB                          :   OUT   std_logic
        );
END interlock_ip_src_interlock_deadtime;


ARCHITECTURE rtl OF interlock_ip_src_interlock_deadtime IS

  -- Component Declarations
  COMPONENT interlock_ip_src_DeadtimeModule
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          DelayCycles                     :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          gate_delay_out                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT interlock_ip_src_InterlockModule
    PORT( In1                             :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
          gate_delay_out                  :   OUT   std_logic_vector(0 TO 1)  -- boolean [2]
          );
  END COMPONENT;

  COMPONENT interlock_ip_src_InverseBotSwitchModule
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          gate_delay_out                  :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
          inverse_bottom_switch           :   IN    std_logic;
          gate_enable_out                 :   OUT   std_logic_vector(0 TO 1)  -- boolean [2]
          );
  END COMPONENT;

  COMPONENT interlock_ip_src_EnableOutputModule
    PORT( gate_delay_out                  :   IN    std_logic;
          enable                          :   IN    std_logic;
          gate_enable_out                 :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : interlock_ip_src_DeadtimeModule
    USE ENTITY work.interlock_ip_src_DeadtimeModule(rtl);

  FOR ALL : interlock_ip_src_InterlockModule
    USE ENTITY work.interlock_ip_src_InterlockModule(rtl);

  FOR ALL : interlock_ip_src_InverseBotSwitchModule
    USE ENTITY work.interlock_ip_src_InverseBotSwitchModule(rtl);

  FOR ALL : interlock_ip_src_EnableOutputModule
    USE ENTITY work.interlock_ip_src_EnableOutputModule(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Mux_out1                         : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL AXI_DelayCycles_unsigned         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Delay2_out1                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL DeadtimeModule_out1              : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL InterlockModule_out1             : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL InverseBotSwitchModule_out1      : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL EnableOutputModule_out1          : std_logic_vector(0 TO 5);  -- boolean [6]

BEGIN
  Mux_out1(0) <= S0;
  Mux_out1(1) <= S1;
  Mux_out1(2) <= S2;
  Mux_out1(3) <= S3;
  Mux_out1(4) <= S4;
  Mux_out1(5) <= S5;

  AXI_DelayCycles_unsigned <= unsigned(AXI_DelayCycles);

  enb <= clk_enable;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay2_out1 <= AXI_DelayCycles_unsigned;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  GEN_LABEL3: FOR k3 IN 0 TO 5 GENERATE
    u_DeadtimeModule : interlock_ip_src_DeadtimeModule
      PORT MAP( clk => clk,
                reset_x => reset_x,
                enb => clk_enable,
                In1 => Mux_out1(k3),
                DelayCycles => std_logic_vector(Delay2_out1),  -- ufix10
                gate_delay_out => DeadtimeModule_out1(k3)
                );
  END GENERATE;

  GEN_LABEL2: FOR k2 IN 0 TO 2 GENERATE
    u_InterlockModule : interlock_ip_src_InterlockModule
      PORT MAP( In1 => DeadtimeModule_out1(2*k2 TO 2*(k2+1) - 1),  -- boolean [2]
                gate_delay_out => InterlockModule_out1(2*k2 TO 2*(k2+1) - 1)  -- boolean [2]
                );
  END GENERATE;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= AXI_InverseBotSwitch;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  GEN_LABEL1: FOR k1 IN 0 TO 2 GENERATE
    u_InverseBotSwitchModule : interlock_ip_src_InverseBotSwitchModule
      PORT MAP( clk => clk,
                reset_x => reset_x,
                enb => clk_enable,
                gate_delay_out => InterlockModule_out1(2*k1 TO 2*(k1+1) - 1),  -- boolean [2]
                inverse_bottom_switch => Delay3_out1,
                gate_enable_out => InverseBotSwitchModule_out1(2*k1 TO 2*(k1+1) - 1)  -- boolean [2]
                );
  END GENERATE;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= AXI_EnableOutput;
      END IF;
    END IF;
  END PROCESS Delay_process;


  GEN_LABEL: FOR k IN 0 TO 5 GENERATE
    u_EnableOutputModule : interlock_ip_src_EnableOutputModule
      PORT MAP( gate_delay_out => InverseBotSwitchModule_out1(k),
                enable => Delay_out1,
                gate_enable_out => EnableOutputModule_out1(k)
                );
  END GENERATE;

  AXI_fb_DelayCycles <= std_logic_vector(Delay2_out1);

  ce_out <= clk_enable;

  s0_out <= EnableOutputModule_out1(0);

  s1_out <= EnableOutputModule_out1(1);

  s2_out <= EnableOutputModule_out1(2);

  s3_out <= EnableOutputModule_out1(3);

  s4_out <= EnableOutputModule_out1(4);

  s5_out <= EnableOutputModule_out1(5);

  AXI_fb_enable <= Delay_out1;

  AXI_fb_InverseBotSwitch <= Delay3_out1;

  enableFB <= Delay_out1;

END rtl;

