-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_prediction\hdlsrc\parallel_8_prediction\parallel_8_prediction_src_Prediction_and_cost_function2.vhd
-- Created: 2022-10-17 15:11:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- done                          ce_out        1e-08
-- Index                         ce_out        1e-08
-- Prediction_0                  ce_out        1e-08
-- Prediction_1                  ce_out        1e-08
-- Prediction_2                  ce_out        1e-08
-- Prediction_3                  ce_out        1e-08
-- Prediction_4                  ce_out        1e-08
-- Prediction_5                  ce_out        1e-08
-- Prediction_6                  ce_out        1e-08
-- Prediction_7                  ce_out        1e-08
-- Prediction_8                  ce_out        1e-08
-- Prediction_9                  ce_out        1e-08
-- Prediction_10                 ce_out        1e-08
-- Prediction_11                 ce_out        1e-08
-- Prediction_12                 ce_out        1e-08
-- Prediction_13                 ce_out        1e-08
-- Prediction_14                 ce_out        1e-08
-- Prediction_15                 ce_out        1e-08
-- Prediction_16                 ce_out        1e-08
-- Prediction_17                 ce_out        1e-08
-- Prediction_18                 ce_out        1e-08
-- Prediction_19                 ce_out        1e-08
-- Prediction_20                 ce_out        1e-08
-- Prediction_21                 ce_out        1e-08
-- Prediction_22                 ce_out        1e-08
-- Prediction_23                 ce_out        1e-08
-- Prediction_24                 ce_out        1e-08
-- Prediction_25                 ce_out        1e-08
-- Prediction_26                 ce_out        1e-08
-- Prediction_27                 ce_out        1e-08
-- Prediction_28                 ce_out        1e-08
-- Prediction_29                 ce_out        1e-08
-- Prediction_30                 ce_out        1e-08
-- Prediction_31                 ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_prediction_src_Prediction_and_cost_function2
-- Source Path: parallel_8_prediction/Prediction_and_cost_function2
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_8_prediction_src_Prediction_and_cost_function2_pkg.ALL;

ENTITY parallel_8_prediction_src_Prediction_and_cost_function2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Lq_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ld_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Rs_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_m_measured                  :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        pole_pairs_AXI                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psiPM_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        valid_in                          :   IN    std_logic;
        Reset_1                           :   IN    std_logic;
        valid_in_ADC                      :   IN    std_logic;
        dqxy_phase_voltage_per_switching_state_0 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_1 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_2 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_3 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_4 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_5 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_6 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_7 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_8 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_9 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_10 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_11 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_12 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_13 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_14 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_15 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_16 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_17 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_18 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_19 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_20 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_21 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_22 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_23 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_24 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_25 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_26 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_27 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_28 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_29 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_30 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_31 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        ce_out                            :   OUT   std_logic;
        done                              :   OUT   std_logic;
        Index                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        Prediction_0                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_1                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_2                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_3                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_4                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_5                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_6                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_7                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_8                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_9                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_10                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_11                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_12                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_13                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_14                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_15                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_16                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_17                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_18                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_19                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_20                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_21                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_22                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_23                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_24                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_25                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_26                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_27                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_28                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_29                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_30                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_31                     :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
        );
END parallel_8_prediction_src_Prediction_and_cost_function2;


ARCHITECTURE rtl OF parallel_8_prediction_src_Prediction_and_cost_function2 IS

  -- Component Declarations
  COMPONENT parallel_8_prediction_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_Compare_To_Constant
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_nfp_convert_sfix_18_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_Detect_Rise_Positive2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          d_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Ld15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lq15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lx15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Ly15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Rs15                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          omega_el15                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Lq15                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Ld15                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          psiPM15                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Prediction_1                    :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          Prediction_2                    :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          Prediction_3                    :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          Prediction_4                    :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          Prediction_5                    :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          Prediction_6                    :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          Prediction_7                    :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          Prediction_8                    :   OUT   vector_of_std_logic_vector32(0 TO 3)  -- single [4]
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_prediction_src_Detect_Rise_Positive
    USE ENTITY work.parallel_8_prediction_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_8_prediction_src_Detect_Rise_Positive1
    USE ENTITY work.parallel_8_prediction_src_Detect_Rise_Positive1(rtl);

  FOR ALL : parallel_8_prediction_src_Compare_To_Constant
    USE ENTITY work.parallel_8_prediction_src_Compare_To_Constant(rtl);

  FOR ALL : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    USE ENTITY work.parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single(rtl);

  FOR ALL : parallel_8_prediction_src_nfp_convert_sfix_18_En11_to_single
    USE ENTITY work.parallel_8_prediction_src_nfp_convert_sfix_18_En11_to_single(rtl);

  FOR ALL : parallel_8_prediction_src_Detect_Rise_Positive2
    USE ENTITY work.parallel_8_prediction_src_Detect_Rise_Positive2(rtl);

  FOR ALL : parallel_8_prediction_src_nfp_mul_single
    USE ENTITY work.parallel_8_prediction_src_nfp_mul_single(rtl);

  FOR ALL : parallel_8_prediction_src_Subsystem
    USE ENTITY work.parallel_8_prediction_src_Subsystem(rtl);

  FOR ALL : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    USE ENTITY work.parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enable                           : std_logic;
  SIGNAL reset_2                          : std_logic;
  SIGNAL count_step                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_reset                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Index_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL count                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_2                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL delayMatch77_reg                 : std_logic_vector(0 TO 47);  -- ufix1 [48]
  SIGNAL delayMatch77_reg_next            : std_logic_vector(0 TO 47);  -- ufix1 [48]
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL delayMatch78_reg                 : vector_of_signed32(0 TO 47);  -- sfix32 [48]
  SIGNAL delayMatch78_reg_next            : vector_of_signed32(0 TO 47);  -- sfix32 [48]
  SIGNAL Index_tmp                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL enable_1                         : std_logic;
  SIGNAL enable_2                         : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch2_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL nfp_out_1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay135_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on90_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on90_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch4_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL nfp_out_2_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay134_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on89_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on89_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL nfp_out_3_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay133_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on88_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on88_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch8_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL nfp_out_4_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay132_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on87_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on87_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL delayMatch10_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch10_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL nfp_out_5_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay131_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on86_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on86_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL delayMatch12_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch12_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL nfp_out_6_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay130_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on85_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on85_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL delayMatch14_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch14_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL nfp_out_7_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay129_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on84_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on84_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL stateControl_15                  : std_logic;
  SIGNAL delayMatch16_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch16_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_16                  : std_logic;
  SIGNAL nfp_out_8_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay128_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on83_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on83_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL stateControl_17                  : std_logic;
  SIGNAL delayMatch18_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch18_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_18                  : std_logic;
  SIGNAL nfp_out_9_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay127_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on82_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on82_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL stateControl_19                  : std_logic;
  SIGNAL delayMatch20_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch20_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_20                  : std_logic;
  SIGNAL nfp_out_10_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay126_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on81_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on81_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL stateControl_21                  : std_logic;
  SIGNAL delayMatch22_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch22_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_22                  : std_logic;
  SIGNAL nfp_out_11_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay125_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on80_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on80_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL stateControl_23                  : std_logic;
  SIGNAL delayMatch24_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch24_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_24                  : std_logic;
  SIGNAL nfp_out_12_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay124_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on79_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on79_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL stateControl_25                  : std_logic;
  SIGNAL delayMatch26_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch26_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_26                  : std_logic;
  SIGNAL nfp_out_13_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay123_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on78_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on78_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL stateControl_27                  : std_logic;
  SIGNAL delayMatch28_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch28_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_28                  : std_logic;
  SIGNAL nfp_out_14_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay122_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on77_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on77_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL stateControl_29                  : std_logic;
  SIGNAL delayMatch30_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch30_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_30                  : std_logic;
  SIGNAL nfp_out_15_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay121_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on76_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on76_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL stateControl_31                  : std_logic;
  SIGNAL delayMatch32_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch32_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_32                  : std_logic;
  SIGNAL nfp_out_16_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay120_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on75_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on75_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL stateControl_33                  : std_logic;
  SIGNAL delayMatch34_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch34_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_34                  : std_logic;
  SIGNAL nfp_out_17_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay119_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on74_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on74_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL stateControl_35                  : std_logic;
  SIGNAL delayMatch36_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch36_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_36                  : std_logic;
  SIGNAL nfp_out_18_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay118_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on73_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on73_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL stateControl_37                  : std_logic;
  SIGNAL delayMatch38_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch38_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_38                  : std_logic;
  SIGNAL nfp_out_19_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay117_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on72_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on72_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL stateControl_39                  : std_logic;
  SIGNAL delayMatch40_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch40_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_40                  : std_logic;
  SIGNAL nfp_out_20_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay116_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on71_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on71_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL stateControl_41                  : std_logic;
  SIGNAL delayMatch42_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch42_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_42                  : std_logic;
  SIGNAL nfp_out_21_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay115_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on70_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on70_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL stateControl_43                  : std_logic;
  SIGNAL delayMatch44_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch44_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_44                  : std_logic;
  SIGNAL nfp_out_22_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay114_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on69_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on69_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL stateControl_45                  : std_logic;
  SIGNAL delayMatch46_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch46_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_46                  : std_logic;
  SIGNAL nfp_out_23_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay113_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on68_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on68_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL stateControl_47                  : std_logic;
  SIGNAL delayMatch48_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch48_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_48                  : std_logic;
  SIGNAL nfp_out_24_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay112_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on67_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on67_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_24              : std_logic;
  SIGNAL stateControl_49                  : std_logic;
  SIGNAL delayMatch50_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch50_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_50                  : std_logic;
  SIGNAL nfp_out_25_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay111_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on66_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on66_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_25              : std_logic;
  SIGNAL stateControl_51                  : std_logic;
  SIGNAL delayMatch52_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch52_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_52                  : std_logic;
  SIGNAL nfp_out_26_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay110_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on65_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on65_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_26              : std_logic;
  SIGNAL stateControl_53                  : std_logic;
  SIGNAL delayMatch54_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch54_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_54                  : std_logic;
  SIGNAL nfp_out_27_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay109_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on64_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on64_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_27              : std_logic;
  SIGNAL stateControl_55                  : std_logic;
  SIGNAL delayMatch56_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch56_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_56                  : std_logic;
  SIGNAL nfp_out_28_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay108_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on63_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on63_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_28              : std_logic;
  SIGNAL stateControl_57                  : std_logic;
  SIGNAL delayMatch58_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch58_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_58                  : std_logic;
  SIGNAL nfp_out_29_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay107_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on62_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on62_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_29              : std_logic;
  SIGNAL stateControl_59                  : std_logic;
  SIGNAL delayMatch60_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch60_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_60                  : std_logic;
  SIGNAL nfp_out_30_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay106_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on61_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on61_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_30              : std_logic;
  SIGNAL stateControl_61                  : std_logic;
  SIGNAL delayMatch62_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch62_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_62                  : std_logic;
  SIGNAL nfp_out_31_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay105_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on60_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on60_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_31              : std_logic;
  SIGNAL stateControl_63                  : std_logic;
  SIGNAL delayMatch64_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch64_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_64                  : std_logic;
  SIGNAL nfp_out_32_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay104_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on59_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on59_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_32              : std_logic;
  SIGNAL Switch_on21_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay20_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_33              : std_logic;
  SIGNAL Switch_on20_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay19_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_34              : std_logic;
  SIGNAL Switch_on19_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay18_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_35              : std_logic;
  SIGNAL Switch_on18_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay17_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_36              : std_logic;
  SIGNAL stateControl_65                  : std_logic;
  SIGNAL delayMatch66_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch66_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_66                  : std_logic;
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay16_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on17_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on17_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_37              : std_logic;
  SIGNAL stateControl_67                  : std_logic;
  SIGNAL delayMatch68_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch68_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_68                  : std_logic;
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay15_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on16_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on16_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_38              : std_logic;
  SIGNAL stateControl_69                  : std_logic;
  SIGNAL delayMatch70_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch70_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_70                  : std_logic;
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay14_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on15_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on15_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_39              : std_logic;
  SIGNAL stateControl_71                  : std_logic;
  SIGNAL delayMatch72_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch72_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_72                  : std_logic;
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay13_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_40              : std_logic;
  SIGNAL Switch_on12_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL delayMatch76_reg                 : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL delayMatch76_reg_next            : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL switch_compare_1_41              : std_logic;
  SIGNAL stateControl_73                  : std_logic;
  SIGNAL delayMatch75_reg                 : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL delayMatch75_reg_next            : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL stateControl_74                  : std_logic;
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch74_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch74_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL pole_pairs_AXI_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay11_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_42              : std_logic;
  SIGNAL Switch_on10_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_43              : std_logic;
  SIGNAL Switch_on9_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_44              : std_logic;
  SIGNAL Switch_on8_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay8_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subsystem_out1                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Subsystem_out2                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Subsystem_out3                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Subsystem_out4                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Subsystem_out5                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Subsystem_out6                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Subsystem_out7                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Subsystem_out8                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL nfp_out_1_1_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_2_1_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_3_1_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_4_1_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_5_1_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_6_1_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_7_1_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_8_1_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_9_1_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_10_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_11_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_12_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_13_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_14_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_15_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_16_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_17_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_18_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_19_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_20_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_21_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_22_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_23_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_24_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_25_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_26_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_27_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_28_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_29_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_30_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_31_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL nfp_out_32_1_1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18

BEGIN
  u_Detect_Rise_Positive : parallel_8_prediction_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => valid_in,
              Y => enable
              );

  u_Detect_Rise_Positive1 : parallel_8_prediction_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Reset_1,
              Y => reset_2
              );

  u_Compare_To_Constant : parallel_8_prediction_src_Compare_To_Constant
    PORT MAP( u => std_logic_vector(Index_1),  -- int32
              y => Compare_To_Constant_out1
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_0,  -- sfix24_En11
              nfp_out => nfp_out_1_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_1 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_1,  -- sfix24_En11
              nfp_out => nfp_out_2_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_2 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_2,  -- sfix24_En11
              nfp_out => nfp_out_3_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_3 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_3,  -- sfix24_En11
              nfp_out => nfp_out_4_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_4 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_4,  -- sfix24_En11
              nfp_out => nfp_out_5_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_5 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_5,  -- sfix24_En11
              nfp_out => nfp_out_6_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_6 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_6,  -- sfix24_En11
              nfp_out => nfp_out_7_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_7 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_7,  -- sfix24_En11
              nfp_out => nfp_out_8_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_8 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_8,  -- sfix24_En11
              nfp_out => nfp_out_9_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_9 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_9,  -- sfix24_En11
              nfp_out => nfp_out_10_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_10 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_10,  -- sfix24_En11
              nfp_out => nfp_out_11_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_11 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_11,  -- sfix24_En11
              nfp_out => nfp_out_12_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_12 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_12,  -- sfix24_En11
              nfp_out => nfp_out_13_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_13 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_13,  -- sfix24_En11
              nfp_out => nfp_out_14_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_14 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_14,  -- sfix24_En11
              nfp_out => nfp_out_15_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_15 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_15,  -- sfix24_En11
              nfp_out => nfp_out_16_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_16 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_16,  -- sfix24_En11
              nfp_out => nfp_out_17_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_17 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_17,  -- sfix24_En11
              nfp_out => nfp_out_18_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_18 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_18,  -- sfix24_En11
              nfp_out => nfp_out_19_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_19 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_19,  -- sfix24_En11
              nfp_out => nfp_out_20_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_20 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_20,  -- sfix24_En11
              nfp_out => nfp_out_21_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_21 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_21,  -- sfix24_En11
              nfp_out => nfp_out_22_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_22 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_22,  -- sfix24_En11
              nfp_out => nfp_out_23_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_23 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_23,  -- sfix24_En11
              nfp_out => nfp_out_24_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_24 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_24,  -- sfix24_En11
              nfp_out => nfp_out_25_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_25 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_25,  -- sfix24_En11
              nfp_out => nfp_out_26_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_26 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_26,  -- sfix24_En11
              nfp_out => nfp_out_27_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_27 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_27,  -- sfix24_En11
              nfp_out => nfp_out_28_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_28 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_28,  -- sfix24_En11
              nfp_out => nfp_out_29_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_29 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_29,  -- sfix24_En11
              nfp_out => nfp_out_30_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_30 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_30,  -- sfix24_En11
              nfp_out => nfp_out_31_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_31 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => dqxy_phase_voltage_per_switching_state_31,  -- sfix24_En11
              nfp_out => nfp_out_32_1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_18_En11_to_single : parallel_8_prediction_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => id_k_1,  -- sfix18_En11
              nfp_out => Data_Type_Conversion7_out1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_18_En11_to_single_1 : parallel_8_prediction_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => iq_k_1,  -- sfix18_En11
              nfp_out => Data_Type_Conversion8_out1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_18_En11_to_single_2 : parallel_8_prediction_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => ix_k_1,  -- sfix18_En11
              nfp_out => Data_Type_Conversion9_out1  -- single
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_18_En11_to_single_3 : parallel_8_prediction_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => iy_k_1,  -- sfix18_En11
              nfp_out => Data_Type_Conversion10_out1  -- single
              );

  u_Detect_Rise_Positive2 : parallel_8_prediction_src_Detect_Rise_Positive2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => valid_in_ADC,
              Y => End_Cycle
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_sfix_24_En11_to_single_32 : parallel_8_prediction_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => omega_m_measured,  -- sfix24_En11
              nfp_out => Data_Type_Conversion4_out1  -- single
              );

  u_nfp_mul_comp : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion4_out1,  -- single
              nfp_in2 => pole_pairs_AXI_1,  -- single
              nfp_out => omega_el  -- single
              );

  u_Subsystem : parallel_8_prediction_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              d_phase_voltage_per_switching_state => Switch_on90_out1,  -- single
              q_phase_voltage_per_switching_state => Switch_on89_out1,  -- single
              x_phase_voltage_per_switching_state => Switch_on88_out1,  -- single
              y_phase_voltage_per_switching_state => Switch_on87_out1,  -- single
              d_phase_voltage_per_switching_state1 => Switch_on86_out1,  -- single
              q_phase_voltage_per_switching_state1 => Switch_on85_out1,  -- single
              x_phase_voltage_per_switching_state1 => Switch_on84_out1,  -- single
              y_phase_voltage_per_switching_state1 => Switch_on83_out1,  -- single
              d_phase_voltage_per_switching_state2 => Switch_on82_out1,  -- single
              q_phase_voltage_per_switching_state2 => Switch_on81_out1,  -- single
              x_phase_voltage_per_switching_state2 => Switch_on80_out1,  -- single
              y_phase_voltage_per_switching_state2 => Switch_on79_out1,  -- single
              d_phase_voltage_per_switching_state3 => Switch_on78_out1,  -- single
              q_phase_voltage_per_switching_state3 => Switch_on77_out1,  -- single
              x_phase_voltage_per_switching_state3 => Switch_on76_out1,  -- single
              y_phase_voltage_per_switching_state3 => Switch_on75_out1,  -- single
              d_phase_voltage_per_switching_state4 => Switch_on74_out1,  -- single
              q_phase_voltage_per_switching_state4 => Switch_on73_out1,  -- single
              x_phase_voltage_per_switching_state4 => Switch_on72_out1,  -- single
              y_phase_voltage_per_switching_state4 => Switch_on71_out1,  -- single
              d_phase_voltage_per_switching_state5 => Switch_on70_out1,  -- single
              q_phase_voltage_per_switching_state5 => Switch_on69_out1,  -- single
              x_phase_voltage_per_switching_state5 => Switch_on68_out1,  -- single
              y_phase_voltage_per_switching_state5 => Switch_on67_out1,  -- single
              d_phase_voltage_per_switching_state6 => Switch_on66_out1,  -- single
              q_phase_voltage_per_switching_state6 => Switch_on65_out1,  -- single
              x_phase_voltage_per_switching_state6 => Switch_on64_out1,  -- single
              y_phase_voltage_per_switching_state6 => Switch_on63_out1,  -- single
              d_phase_voltage_per_switching_state7 => Switch_on62_out1,  -- single
              q_phase_voltage_per_switching_state7 => Switch_on61_out1,  -- single
              x_phase_voltage_per_switching_state7 => Switch_on60_out1,  -- single
              y_phase_voltage_per_switching_state7 => Switch_on59_out1,  -- single
              SampleTime_div_Ld15 => Switch_on21_out1,  -- single
              SampleTime_div_Lq15 => Switch_on20_out1,  -- single
              SampleTime_div_Lx15 => Switch_on19_out1,  -- single
              SampleTime_div_Ly15 => Switch_on18_out1,  -- single
              id_k_16 => Switch_on17_out1,  -- single
              iq_k_16 => Switch_on16_out1,  -- single
              ix_k_16 => Switch_on15_out1,  -- single
              iy_k_16 => Switch_on13_out1,  -- single
              Rs15 => Switch_on12_out1,  -- single
              omega_el15 => Switch_on11_out1,  -- single
              Lq15 => Switch_on10_out1,  -- single
              Ld15 => Switch_on9_out1,  -- single
              psiPM15 => Switch_on8_out1,  -- single
              Prediction_1 => Subsystem_out1,  -- single [4]
              Prediction_2 => Subsystem_out2,  -- single [4]
              Prediction_3 => Subsystem_out3,  -- single [4]
              Prediction_4 => Subsystem_out4,  -- single [4]
              Prediction_5 => Subsystem_out5,  -- single [4]
              Prediction_6 => Subsystem_out6,  -- single [4]
              Prediction_7 => Subsystem_out7,  -- single [4]
              Prediction_8 => Subsystem_out8  -- single [4]
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out1(0),  -- single
              nfp_out => nfp_out_1_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_1 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out1(1),  -- single
              nfp_out => nfp_out_2_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_2 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out1(2),  -- single
              nfp_out => nfp_out_3_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_3 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out1(3),  -- single
              nfp_out => nfp_out_4_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_4 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out2(0),  -- single
              nfp_out => nfp_out_5_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_5 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out2(1),  -- single
              nfp_out => nfp_out_6_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_6 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out2(2),  -- single
              nfp_out => nfp_out_7_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_7 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out2(3),  -- single
              nfp_out => nfp_out_8_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_8 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out3(0),  -- single
              nfp_out => nfp_out_9_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_9 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out3(1),  -- single
              nfp_out => nfp_out_10_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_10 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out3(2),  -- single
              nfp_out => nfp_out_11_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_11 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out3(3),  -- single
              nfp_out => nfp_out_12_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_12 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out4(0),  -- single
              nfp_out => nfp_out_13_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_13 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out4(1),  -- single
              nfp_out => nfp_out_14_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_14 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out4(2),  -- single
              nfp_out => nfp_out_15_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_15 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out4(3),  -- single
              nfp_out => nfp_out_16_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_16 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out5(0),  -- single
              nfp_out => nfp_out_17_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_17 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out5(1),  -- single
              nfp_out => nfp_out_18_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_18 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out5(2),  -- single
              nfp_out => nfp_out_19_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_19 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out5(3),  -- single
              nfp_out => nfp_out_20_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_20 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out6(0),  -- single
              nfp_out => nfp_out_21_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_21 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out6(1),  -- single
              nfp_out => nfp_out_22_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_22 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out6(2),  -- single
              nfp_out => nfp_out_23_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_23 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out6(3),  -- single
              nfp_out => nfp_out_24_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_24 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out7(0),  -- single
              nfp_out => nfp_out_25_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_25 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out7(1),  -- single
              nfp_out => nfp_out_26_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_26 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out7(2),  -- single
              nfp_out => nfp_out_27_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_27 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out7(3),  -- single
              nfp_out => nfp_out_28_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_28 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out8(0),  -- single
              nfp_out => nfp_out_29_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_29 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out8(1),  -- single
              nfp_out => nfp_out_30_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_30 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out8(2),  -- single
              nfp_out => nfp_out_31_1_1  -- sfix18_En11
              );

  u_parallel_8_prediction_Prediction_and_cost_function2_nfp_convert_single_to_sfix_18_En11_31 : parallel_8_prediction_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Subsystem_out8(3),  -- single
              nfp_out => nfp_out_32_1_1  -- sfix18_En11
              );

  -- Free running, Signed Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_signed(1, 32);

  count_reset <= to_signed(0, 32);

  enb <= clk_enable;

  count <= Index_1 + count_step;

  
  count_1 <= Index_1 WHEN enable = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN reset_2 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Index_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Index_1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Logical_Operator_out1 <= enable AND Compare_To_Constant_out1;

  delayMatch77_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch77_reg(0) <= '0';
        delayMatch77_reg(1) <= '0';
        delayMatch77_reg(2) <= '0';
        delayMatch77_reg(3) <= '0';
        delayMatch77_reg(4) <= '0';
        delayMatch77_reg(5) <= '0';
        delayMatch77_reg(6) <= '0';
        delayMatch77_reg(7) <= '0';
        delayMatch77_reg(8) <= '0';
        delayMatch77_reg(9) <= '0';
        delayMatch77_reg(10) <= '0';
        delayMatch77_reg(11) <= '0';
        delayMatch77_reg(12) <= '0';
        delayMatch77_reg(13) <= '0';
        delayMatch77_reg(14) <= '0';
        delayMatch77_reg(15) <= '0';
        delayMatch77_reg(16) <= '0';
        delayMatch77_reg(17) <= '0';
        delayMatch77_reg(18) <= '0';
        delayMatch77_reg(19) <= '0';
        delayMatch77_reg(20) <= '0';
        delayMatch77_reg(21) <= '0';
        delayMatch77_reg(22) <= '0';
        delayMatch77_reg(23) <= '0';
        delayMatch77_reg(24) <= '0';
        delayMatch77_reg(25) <= '0';
        delayMatch77_reg(26) <= '0';
        delayMatch77_reg(27) <= '0';
        delayMatch77_reg(28) <= '0';
        delayMatch77_reg(29) <= '0';
        delayMatch77_reg(30) <= '0';
        delayMatch77_reg(31) <= '0';
        delayMatch77_reg(32) <= '0';
        delayMatch77_reg(33) <= '0';
        delayMatch77_reg(34) <= '0';
        delayMatch77_reg(35) <= '0';
        delayMatch77_reg(36) <= '0';
        delayMatch77_reg(37) <= '0';
        delayMatch77_reg(38) <= '0';
        delayMatch77_reg(39) <= '0';
        delayMatch77_reg(40) <= '0';
        delayMatch77_reg(41) <= '0';
        delayMatch77_reg(42) <= '0';
        delayMatch77_reg(43) <= '0';
        delayMatch77_reg(44) <= '0';
        delayMatch77_reg(45) <= '0';
        delayMatch77_reg(46) <= '0';
        delayMatch77_reg(47) <= '0';
      ELSIF enb = '1' THEN
        delayMatch77_reg(0) <= delayMatch77_reg_next(0);
        delayMatch77_reg(1) <= delayMatch77_reg_next(1);
        delayMatch77_reg(2) <= delayMatch77_reg_next(2);
        delayMatch77_reg(3) <= delayMatch77_reg_next(3);
        delayMatch77_reg(4) <= delayMatch77_reg_next(4);
        delayMatch77_reg(5) <= delayMatch77_reg_next(5);
        delayMatch77_reg(6) <= delayMatch77_reg_next(6);
        delayMatch77_reg(7) <= delayMatch77_reg_next(7);
        delayMatch77_reg(8) <= delayMatch77_reg_next(8);
        delayMatch77_reg(9) <= delayMatch77_reg_next(9);
        delayMatch77_reg(10) <= delayMatch77_reg_next(10);
        delayMatch77_reg(11) <= delayMatch77_reg_next(11);
        delayMatch77_reg(12) <= delayMatch77_reg_next(12);
        delayMatch77_reg(13) <= delayMatch77_reg_next(13);
        delayMatch77_reg(14) <= delayMatch77_reg_next(14);
        delayMatch77_reg(15) <= delayMatch77_reg_next(15);
        delayMatch77_reg(16) <= delayMatch77_reg_next(16);
        delayMatch77_reg(17) <= delayMatch77_reg_next(17);
        delayMatch77_reg(18) <= delayMatch77_reg_next(18);
        delayMatch77_reg(19) <= delayMatch77_reg_next(19);
        delayMatch77_reg(20) <= delayMatch77_reg_next(20);
        delayMatch77_reg(21) <= delayMatch77_reg_next(21);
        delayMatch77_reg(22) <= delayMatch77_reg_next(22);
        delayMatch77_reg(23) <= delayMatch77_reg_next(23);
        delayMatch77_reg(24) <= delayMatch77_reg_next(24);
        delayMatch77_reg(25) <= delayMatch77_reg_next(25);
        delayMatch77_reg(26) <= delayMatch77_reg_next(26);
        delayMatch77_reg(27) <= delayMatch77_reg_next(27);
        delayMatch77_reg(28) <= delayMatch77_reg_next(28);
        delayMatch77_reg(29) <= delayMatch77_reg_next(29);
        delayMatch77_reg(30) <= delayMatch77_reg_next(30);
        delayMatch77_reg(31) <= delayMatch77_reg_next(31);
        delayMatch77_reg(32) <= delayMatch77_reg_next(32);
        delayMatch77_reg(33) <= delayMatch77_reg_next(33);
        delayMatch77_reg(34) <= delayMatch77_reg_next(34);
        delayMatch77_reg(35) <= delayMatch77_reg_next(35);
        delayMatch77_reg(36) <= delayMatch77_reg_next(36);
        delayMatch77_reg(37) <= delayMatch77_reg_next(37);
        delayMatch77_reg(38) <= delayMatch77_reg_next(38);
        delayMatch77_reg(39) <= delayMatch77_reg_next(39);
        delayMatch77_reg(40) <= delayMatch77_reg_next(40);
        delayMatch77_reg(41) <= delayMatch77_reg_next(41);
        delayMatch77_reg(42) <= delayMatch77_reg_next(42);
        delayMatch77_reg(43) <= delayMatch77_reg_next(43);
        delayMatch77_reg(44) <= delayMatch77_reg_next(44);
        delayMatch77_reg(45) <= delayMatch77_reg_next(45);
        delayMatch77_reg(46) <= delayMatch77_reg_next(46);
        delayMatch77_reg(47) <= delayMatch77_reg_next(47);
      END IF;
    END IF;
  END PROCESS delayMatch77_process;

  Logical_Operator_out1_1 <= delayMatch77_reg(47);
  delayMatch77_reg_next(0) <= Logical_Operator_out1;
  delayMatch77_reg_next(1) <= delayMatch77_reg(0);
  delayMatch77_reg_next(2) <= delayMatch77_reg(1);
  delayMatch77_reg_next(3) <= delayMatch77_reg(2);
  delayMatch77_reg_next(4) <= delayMatch77_reg(3);
  delayMatch77_reg_next(5) <= delayMatch77_reg(4);
  delayMatch77_reg_next(6) <= delayMatch77_reg(5);
  delayMatch77_reg_next(7) <= delayMatch77_reg(6);
  delayMatch77_reg_next(8) <= delayMatch77_reg(7);
  delayMatch77_reg_next(9) <= delayMatch77_reg(8);
  delayMatch77_reg_next(10) <= delayMatch77_reg(9);
  delayMatch77_reg_next(11) <= delayMatch77_reg(10);
  delayMatch77_reg_next(12) <= delayMatch77_reg(11);
  delayMatch77_reg_next(13) <= delayMatch77_reg(12);
  delayMatch77_reg_next(14) <= delayMatch77_reg(13);
  delayMatch77_reg_next(15) <= delayMatch77_reg(14);
  delayMatch77_reg_next(16) <= delayMatch77_reg(15);
  delayMatch77_reg_next(17) <= delayMatch77_reg(16);
  delayMatch77_reg_next(18) <= delayMatch77_reg(17);
  delayMatch77_reg_next(19) <= delayMatch77_reg(18);
  delayMatch77_reg_next(20) <= delayMatch77_reg(19);
  delayMatch77_reg_next(21) <= delayMatch77_reg(20);
  delayMatch77_reg_next(22) <= delayMatch77_reg(21);
  delayMatch77_reg_next(23) <= delayMatch77_reg(22);
  delayMatch77_reg_next(24) <= delayMatch77_reg(23);
  delayMatch77_reg_next(25) <= delayMatch77_reg(24);
  delayMatch77_reg_next(26) <= delayMatch77_reg(25);
  delayMatch77_reg_next(27) <= delayMatch77_reg(26);
  delayMatch77_reg_next(28) <= delayMatch77_reg(27);
  delayMatch77_reg_next(29) <= delayMatch77_reg(28);
  delayMatch77_reg_next(30) <= delayMatch77_reg(29);
  delayMatch77_reg_next(31) <= delayMatch77_reg(30);
  delayMatch77_reg_next(32) <= delayMatch77_reg(31);
  delayMatch77_reg_next(33) <= delayMatch77_reg(32);
  delayMatch77_reg_next(34) <= delayMatch77_reg(33);
  delayMatch77_reg_next(35) <= delayMatch77_reg(34);
  delayMatch77_reg_next(36) <= delayMatch77_reg(35);
  delayMatch77_reg_next(37) <= delayMatch77_reg(36);
  delayMatch77_reg_next(38) <= delayMatch77_reg(37);
  delayMatch77_reg_next(39) <= delayMatch77_reg(38);
  delayMatch77_reg_next(40) <= delayMatch77_reg(39);
  delayMatch77_reg_next(41) <= delayMatch77_reg(40);
  delayMatch77_reg_next(42) <= delayMatch77_reg(41);
  delayMatch77_reg_next(43) <= delayMatch77_reg(42);
  delayMatch77_reg_next(44) <= delayMatch77_reg(43);
  delayMatch77_reg_next(45) <= delayMatch77_reg(44);
  delayMatch77_reg_next(46) <= delayMatch77_reg(45);
  delayMatch77_reg_next(47) <= delayMatch77_reg(46);

  done <= Logical_Operator_out1_1;

  delayMatch78_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch78_reg(0) <= to_signed(0, 32);
        delayMatch78_reg(1) <= to_signed(0, 32);
        delayMatch78_reg(2) <= to_signed(0, 32);
        delayMatch78_reg(3) <= to_signed(0, 32);
        delayMatch78_reg(4) <= to_signed(0, 32);
        delayMatch78_reg(5) <= to_signed(0, 32);
        delayMatch78_reg(6) <= to_signed(0, 32);
        delayMatch78_reg(7) <= to_signed(0, 32);
        delayMatch78_reg(8) <= to_signed(0, 32);
        delayMatch78_reg(9) <= to_signed(0, 32);
        delayMatch78_reg(10) <= to_signed(0, 32);
        delayMatch78_reg(11) <= to_signed(0, 32);
        delayMatch78_reg(12) <= to_signed(0, 32);
        delayMatch78_reg(13) <= to_signed(0, 32);
        delayMatch78_reg(14) <= to_signed(0, 32);
        delayMatch78_reg(15) <= to_signed(0, 32);
        delayMatch78_reg(16) <= to_signed(0, 32);
        delayMatch78_reg(17) <= to_signed(0, 32);
        delayMatch78_reg(18) <= to_signed(0, 32);
        delayMatch78_reg(19) <= to_signed(0, 32);
        delayMatch78_reg(20) <= to_signed(0, 32);
        delayMatch78_reg(21) <= to_signed(0, 32);
        delayMatch78_reg(22) <= to_signed(0, 32);
        delayMatch78_reg(23) <= to_signed(0, 32);
        delayMatch78_reg(24) <= to_signed(0, 32);
        delayMatch78_reg(25) <= to_signed(0, 32);
        delayMatch78_reg(26) <= to_signed(0, 32);
        delayMatch78_reg(27) <= to_signed(0, 32);
        delayMatch78_reg(28) <= to_signed(0, 32);
        delayMatch78_reg(29) <= to_signed(0, 32);
        delayMatch78_reg(30) <= to_signed(0, 32);
        delayMatch78_reg(31) <= to_signed(0, 32);
        delayMatch78_reg(32) <= to_signed(0, 32);
        delayMatch78_reg(33) <= to_signed(0, 32);
        delayMatch78_reg(34) <= to_signed(0, 32);
        delayMatch78_reg(35) <= to_signed(0, 32);
        delayMatch78_reg(36) <= to_signed(0, 32);
        delayMatch78_reg(37) <= to_signed(0, 32);
        delayMatch78_reg(38) <= to_signed(0, 32);
        delayMatch78_reg(39) <= to_signed(0, 32);
        delayMatch78_reg(40) <= to_signed(0, 32);
        delayMatch78_reg(41) <= to_signed(0, 32);
        delayMatch78_reg(42) <= to_signed(0, 32);
        delayMatch78_reg(43) <= to_signed(0, 32);
        delayMatch78_reg(44) <= to_signed(0, 32);
        delayMatch78_reg(45) <= to_signed(0, 32);
        delayMatch78_reg(46) <= to_signed(0, 32);
        delayMatch78_reg(47) <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        delayMatch78_reg(0) <= delayMatch78_reg_next(0);
        delayMatch78_reg(1) <= delayMatch78_reg_next(1);
        delayMatch78_reg(2) <= delayMatch78_reg_next(2);
        delayMatch78_reg(3) <= delayMatch78_reg_next(3);
        delayMatch78_reg(4) <= delayMatch78_reg_next(4);
        delayMatch78_reg(5) <= delayMatch78_reg_next(5);
        delayMatch78_reg(6) <= delayMatch78_reg_next(6);
        delayMatch78_reg(7) <= delayMatch78_reg_next(7);
        delayMatch78_reg(8) <= delayMatch78_reg_next(8);
        delayMatch78_reg(9) <= delayMatch78_reg_next(9);
        delayMatch78_reg(10) <= delayMatch78_reg_next(10);
        delayMatch78_reg(11) <= delayMatch78_reg_next(11);
        delayMatch78_reg(12) <= delayMatch78_reg_next(12);
        delayMatch78_reg(13) <= delayMatch78_reg_next(13);
        delayMatch78_reg(14) <= delayMatch78_reg_next(14);
        delayMatch78_reg(15) <= delayMatch78_reg_next(15);
        delayMatch78_reg(16) <= delayMatch78_reg_next(16);
        delayMatch78_reg(17) <= delayMatch78_reg_next(17);
        delayMatch78_reg(18) <= delayMatch78_reg_next(18);
        delayMatch78_reg(19) <= delayMatch78_reg_next(19);
        delayMatch78_reg(20) <= delayMatch78_reg_next(20);
        delayMatch78_reg(21) <= delayMatch78_reg_next(21);
        delayMatch78_reg(22) <= delayMatch78_reg_next(22);
        delayMatch78_reg(23) <= delayMatch78_reg_next(23);
        delayMatch78_reg(24) <= delayMatch78_reg_next(24);
        delayMatch78_reg(25) <= delayMatch78_reg_next(25);
        delayMatch78_reg(26) <= delayMatch78_reg_next(26);
        delayMatch78_reg(27) <= delayMatch78_reg_next(27);
        delayMatch78_reg(28) <= delayMatch78_reg_next(28);
        delayMatch78_reg(29) <= delayMatch78_reg_next(29);
        delayMatch78_reg(30) <= delayMatch78_reg_next(30);
        delayMatch78_reg(31) <= delayMatch78_reg_next(31);
        delayMatch78_reg(32) <= delayMatch78_reg_next(32);
        delayMatch78_reg(33) <= delayMatch78_reg_next(33);
        delayMatch78_reg(34) <= delayMatch78_reg_next(34);
        delayMatch78_reg(35) <= delayMatch78_reg_next(35);
        delayMatch78_reg(36) <= delayMatch78_reg_next(36);
        delayMatch78_reg(37) <= delayMatch78_reg_next(37);
        delayMatch78_reg(38) <= delayMatch78_reg_next(38);
        delayMatch78_reg(39) <= delayMatch78_reg_next(39);
        delayMatch78_reg(40) <= delayMatch78_reg_next(40);
        delayMatch78_reg(41) <= delayMatch78_reg_next(41);
        delayMatch78_reg(42) <= delayMatch78_reg_next(42);
        delayMatch78_reg(43) <= delayMatch78_reg_next(43);
        delayMatch78_reg(44) <= delayMatch78_reg_next(44);
        delayMatch78_reg(45) <= delayMatch78_reg_next(45);
        delayMatch78_reg(46) <= delayMatch78_reg_next(46);
        delayMatch78_reg(47) <= delayMatch78_reg_next(47);
      END IF;
    END IF;
  END PROCESS delayMatch78_process;

  Index_tmp <= delayMatch78_reg(47);
  delayMatch78_reg_next(0) <= Index_1;
  delayMatch78_reg_next(1) <= delayMatch78_reg(0);
  delayMatch78_reg_next(2) <= delayMatch78_reg(1);
  delayMatch78_reg_next(3) <= delayMatch78_reg(2);
  delayMatch78_reg_next(4) <= delayMatch78_reg(3);
  delayMatch78_reg_next(5) <= delayMatch78_reg(4);
  delayMatch78_reg_next(6) <= delayMatch78_reg(5);
  delayMatch78_reg_next(7) <= delayMatch78_reg(6);
  delayMatch78_reg_next(8) <= delayMatch78_reg(7);
  delayMatch78_reg_next(9) <= delayMatch78_reg(8);
  delayMatch78_reg_next(10) <= delayMatch78_reg(9);
  delayMatch78_reg_next(11) <= delayMatch78_reg(10);
  delayMatch78_reg_next(12) <= delayMatch78_reg(11);
  delayMatch78_reg_next(13) <= delayMatch78_reg(12);
  delayMatch78_reg_next(14) <= delayMatch78_reg(13);
  delayMatch78_reg_next(15) <= delayMatch78_reg(14);
  delayMatch78_reg_next(16) <= delayMatch78_reg(15);
  delayMatch78_reg_next(17) <= delayMatch78_reg(16);
  delayMatch78_reg_next(18) <= delayMatch78_reg(17);
  delayMatch78_reg_next(19) <= delayMatch78_reg(18);
  delayMatch78_reg_next(20) <= delayMatch78_reg(19);
  delayMatch78_reg_next(21) <= delayMatch78_reg(20);
  delayMatch78_reg_next(22) <= delayMatch78_reg(21);
  delayMatch78_reg_next(23) <= delayMatch78_reg(22);
  delayMatch78_reg_next(24) <= delayMatch78_reg(23);
  delayMatch78_reg_next(25) <= delayMatch78_reg(24);
  delayMatch78_reg_next(26) <= delayMatch78_reg(25);
  delayMatch78_reg_next(27) <= delayMatch78_reg(26);
  delayMatch78_reg_next(28) <= delayMatch78_reg(27);
  delayMatch78_reg_next(29) <= delayMatch78_reg(28);
  delayMatch78_reg_next(30) <= delayMatch78_reg(29);
  delayMatch78_reg_next(31) <= delayMatch78_reg(30);
  delayMatch78_reg_next(32) <= delayMatch78_reg(31);
  delayMatch78_reg_next(33) <= delayMatch78_reg(32);
  delayMatch78_reg_next(34) <= delayMatch78_reg(33);
  delayMatch78_reg_next(35) <= delayMatch78_reg(34);
  delayMatch78_reg_next(36) <= delayMatch78_reg(35);
  delayMatch78_reg_next(37) <= delayMatch78_reg(36);
  delayMatch78_reg_next(38) <= delayMatch78_reg(37);
  delayMatch78_reg_next(39) <= delayMatch78_reg(38);
  delayMatch78_reg_next(40) <= delayMatch78_reg(39);
  delayMatch78_reg_next(41) <= delayMatch78_reg(40);
  delayMatch78_reg_next(42) <= delayMatch78_reg(41);
  delayMatch78_reg_next(43) <= delayMatch78_reg(42);
  delayMatch78_reg_next(44) <= delayMatch78_reg(43);
  delayMatch78_reg_next(45) <= delayMatch78_reg(44);
  delayMatch78_reg_next(46) <= delayMatch78_reg(45);
  delayMatch78_reg_next(47) <= delayMatch78_reg(46);

  Index <= std_logic_vector(Index_tmp);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= '0';
        reduced_reg(1) <= '0';
        reduced_reg(2) <= '0';
        reduced_reg(3) <= '0';
        reduced_reg(4) <= '0';
        reduced_reg(5) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
      END IF;
    END IF;
  END PROCESS reduced_process;

  enable_1 <= reduced_reg(5);
  reduced_reg_next(0) <= enable;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);

  enable_2 <= enable_1;

  
  switch_compare_1 <= '1' WHEN enable_2 = '1' ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch2_reg(0) <= '0';
        delayMatch2_reg(1) <= '0';
        delayMatch2_reg(2) <= '0';
        delayMatch2_reg(3) <= '0';
        delayMatch2_reg(4) <= '0';
        delayMatch2_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_2 <= delayMatch2_reg(5);
  delayMatch2_reg_next(0) <= stateControl_1;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);

  
  Switch_on90_out1_1 <= Delay135_out1 WHEN stateControl_2 = '0' ELSE
      Switch_on90_out1;

  Delay135_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay135_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay135_out1 <= Switch_on90_out1_1;
      END IF;
    END IF;
  END PROCESS Delay135_process;


  
  Switch_on90_out1 <= Delay135_out1 WHEN switch_compare_1 = '0' ELSE
      nfp_out_1_1;

  
  switch_compare_1_1 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_3 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg(0) <= '0';
        delayMatch4_reg(1) <= '0';
        delayMatch4_reg(2) <= '0';
        delayMatch4_reg(3) <= '0';
        delayMatch4_reg(4) <= '0';
        delayMatch4_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
        delayMatch4_reg(2) <= delayMatch4_reg_next(2);
        delayMatch4_reg(3) <= delayMatch4_reg_next(3);
        delayMatch4_reg(4) <= delayMatch4_reg_next(4);
        delayMatch4_reg(5) <= delayMatch4_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  stateControl_4 <= delayMatch4_reg(5);
  delayMatch4_reg_next(0) <= stateControl_3;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);
  delayMatch4_reg_next(2) <= delayMatch4_reg(1);
  delayMatch4_reg_next(3) <= delayMatch4_reg(2);
  delayMatch4_reg_next(4) <= delayMatch4_reg(3);
  delayMatch4_reg_next(5) <= delayMatch4_reg(4);

  
  Switch_on89_out1_1 <= Delay134_out1 WHEN stateControl_4 = '0' ELSE
      Switch_on89_out1;

  Delay134_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay134_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay134_out1 <= Switch_on89_out1_1;
      END IF;
    END IF;
  END PROCESS Delay134_process;


  
  Switch_on89_out1 <= Delay134_out1 WHEN switch_compare_1_1 = '0' ELSE
      nfp_out_2_1;

  
  switch_compare_1_2 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_5 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= '0';
        delayMatch6_reg(1) <= '0';
        delayMatch6_reg(2) <= '0';
        delayMatch6_reg(3) <= '0';
        delayMatch6_reg(4) <= '0';
        delayMatch6_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  stateControl_6 <= delayMatch6_reg(5);
  delayMatch6_reg_next(0) <= stateControl_5;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);
  delayMatch6_reg_next(5) <= delayMatch6_reg(4);

  
  Switch_on88_out1_1 <= Delay133_out1 WHEN stateControl_6 = '0' ELSE
      Switch_on88_out1;

  Delay133_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay133_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay133_out1 <= Switch_on88_out1_1;
      END IF;
    END IF;
  END PROCESS Delay133_process;


  
  Switch_on88_out1 <= Delay133_out1 WHEN switch_compare_1_2 = '0' ELSE
      nfp_out_3_1;

  
  switch_compare_1_3 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_7 <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg(0) <= '0';
        delayMatch8_reg(1) <= '0';
        delayMatch8_reg(2) <= '0';
        delayMatch8_reg(3) <= '0';
        delayMatch8_reg(4) <= '0';
        delayMatch8_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
        delayMatch8_reg(2) <= delayMatch8_reg_next(2);
        delayMatch8_reg(3) <= delayMatch8_reg_next(3);
        delayMatch8_reg(4) <= delayMatch8_reg_next(4);
        delayMatch8_reg(5) <= delayMatch8_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  stateControl_8 <= delayMatch8_reg(5);
  delayMatch8_reg_next(0) <= stateControl_7;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);
  delayMatch8_reg_next(2) <= delayMatch8_reg(1);
  delayMatch8_reg_next(3) <= delayMatch8_reg(2);
  delayMatch8_reg_next(4) <= delayMatch8_reg(3);
  delayMatch8_reg_next(5) <= delayMatch8_reg(4);

  
  Switch_on87_out1_1 <= Delay132_out1 WHEN stateControl_8 = '0' ELSE
      Switch_on87_out1;

  Delay132_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay132_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay132_out1 <= Switch_on87_out1_1;
      END IF;
    END IF;
  END PROCESS Delay132_process;


  
  Switch_on87_out1 <= Delay132_out1 WHEN switch_compare_1_3 = '0' ELSE
      nfp_out_4_1;

  
  switch_compare_1_4 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_9 <= '1';

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch10_reg(0) <= '0';
        delayMatch10_reg(1) <= '0';
        delayMatch10_reg(2) <= '0';
        delayMatch10_reg(3) <= '0';
        delayMatch10_reg(4) <= '0';
        delayMatch10_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch10_reg(0) <= delayMatch10_reg_next(0);
        delayMatch10_reg(1) <= delayMatch10_reg_next(1);
        delayMatch10_reg(2) <= delayMatch10_reg_next(2);
        delayMatch10_reg(3) <= delayMatch10_reg_next(3);
        delayMatch10_reg(4) <= delayMatch10_reg_next(4);
        delayMatch10_reg(5) <= delayMatch10_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  stateControl_10 <= delayMatch10_reg(5);
  delayMatch10_reg_next(0) <= stateControl_9;
  delayMatch10_reg_next(1) <= delayMatch10_reg(0);
  delayMatch10_reg_next(2) <= delayMatch10_reg(1);
  delayMatch10_reg_next(3) <= delayMatch10_reg(2);
  delayMatch10_reg_next(4) <= delayMatch10_reg(3);
  delayMatch10_reg_next(5) <= delayMatch10_reg(4);

  
  Switch_on86_out1_1 <= Delay131_out1 WHEN stateControl_10 = '0' ELSE
      Switch_on86_out1;

  Delay131_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay131_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay131_out1 <= Switch_on86_out1_1;
      END IF;
    END IF;
  END PROCESS Delay131_process;


  
  Switch_on86_out1 <= Delay131_out1 WHEN switch_compare_1_4 = '0' ELSE
      nfp_out_5_1;

  
  switch_compare_1_5 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_11 <= '1';

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch12_reg(0) <= '0';
        delayMatch12_reg(1) <= '0';
        delayMatch12_reg(2) <= '0';
        delayMatch12_reg(3) <= '0';
        delayMatch12_reg(4) <= '0';
        delayMatch12_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch12_reg(0) <= delayMatch12_reg_next(0);
        delayMatch12_reg(1) <= delayMatch12_reg_next(1);
        delayMatch12_reg(2) <= delayMatch12_reg_next(2);
        delayMatch12_reg(3) <= delayMatch12_reg_next(3);
        delayMatch12_reg(4) <= delayMatch12_reg_next(4);
        delayMatch12_reg(5) <= delayMatch12_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  stateControl_12 <= delayMatch12_reg(5);
  delayMatch12_reg_next(0) <= stateControl_11;
  delayMatch12_reg_next(1) <= delayMatch12_reg(0);
  delayMatch12_reg_next(2) <= delayMatch12_reg(1);
  delayMatch12_reg_next(3) <= delayMatch12_reg(2);
  delayMatch12_reg_next(4) <= delayMatch12_reg(3);
  delayMatch12_reg_next(5) <= delayMatch12_reg(4);

  
  Switch_on85_out1_1 <= Delay130_out1 WHEN stateControl_12 = '0' ELSE
      Switch_on85_out1;

  Delay130_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay130_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay130_out1 <= Switch_on85_out1_1;
      END IF;
    END IF;
  END PROCESS Delay130_process;


  
  Switch_on85_out1 <= Delay130_out1 WHEN switch_compare_1_5 = '0' ELSE
      nfp_out_6_1;

  
  switch_compare_1_6 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_13 <= '1';

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch14_reg(0) <= '0';
        delayMatch14_reg(1) <= '0';
        delayMatch14_reg(2) <= '0';
        delayMatch14_reg(3) <= '0';
        delayMatch14_reg(4) <= '0';
        delayMatch14_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
        delayMatch14_reg(3) <= delayMatch14_reg_next(3);
        delayMatch14_reg(4) <= delayMatch14_reg_next(4);
        delayMatch14_reg(5) <= delayMatch14_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  stateControl_14 <= delayMatch14_reg(5);
  delayMatch14_reg_next(0) <= stateControl_13;
  delayMatch14_reg_next(1) <= delayMatch14_reg(0);
  delayMatch14_reg_next(2) <= delayMatch14_reg(1);
  delayMatch14_reg_next(3) <= delayMatch14_reg(2);
  delayMatch14_reg_next(4) <= delayMatch14_reg(3);
  delayMatch14_reg_next(5) <= delayMatch14_reg(4);

  
  Switch_on84_out1_1 <= Delay129_out1 WHEN stateControl_14 = '0' ELSE
      Switch_on84_out1;

  Delay129_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay129_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay129_out1 <= Switch_on84_out1_1;
      END IF;
    END IF;
  END PROCESS Delay129_process;


  
  Switch_on84_out1 <= Delay129_out1 WHEN switch_compare_1_6 = '0' ELSE
      nfp_out_7_1;

  
  switch_compare_1_7 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_15 <= '1';

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch16_reg(0) <= '0';
        delayMatch16_reg(1) <= '0';
        delayMatch16_reg(2) <= '0';
        delayMatch16_reg(3) <= '0';
        delayMatch16_reg(4) <= '0';
        delayMatch16_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch16_reg(0) <= delayMatch16_reg_next(0);
        delayMatch16_reg(1) <= delayMatch16_reg_next(1);
        delayMatch16_reg(2) <= delayMatch16_reg_next(2);
        delayMatch16_reg(3) <= delayMatch16_reg_next(3);
        delayMatch16_reg(4) <= delayMatch16_reg_next(4);
        delayMatch16_reg(5) <= delayMatch16_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  stateControl_16 <= delayMatch16_reg(5);
  delayMatch16_reg_next(0) <= stateControl_15;
  delayMatch16_reg_next(1) <= delayMatch16_reg(0);
  delayMatch16_reg_next(2) <= delayMatch16_reg(1);
  delayMatch16_reg_next(3) <= delayMatch16_reg(2);
  delayMatch16_reg_next(4) <= delayMatch16_reg(3);
  delayMatch16_reg_next(5) <= delayMatch16_reg(4);

  
  Switch_on83_out1_1 <= Delay128_out1 WHEN stateControl_16 = '0' ELSE
      Switch_on83_out1;

  Delay128_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay128_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay128_out1 <= Switch_on83_out1_1;
      END IF;
    END IF;
  END PROCESS Delay128_process;


  
  Switch_on83_out1 <= Delay128_out1 WHEN switch_compare_1_7 = '0' ELSE
      nfp_out_8_1;

  
  switch_compare_1_8 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_17 <= '1';

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch18_reg(0) <= '0';
        delayMatch18_reg(1) <= '0';
        delayMatch18_reg(2) <= '0';
        delayMatch18_reg(3) <= '0';
        delayMatch18_reg(4) <= '0';
        delayMatch18_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch18_reg(0) <= delayMatch18_reg_next(0);
        delayMatch18_reg(1) <= delayMatch18_reg_next(1);
        delayMatch18_reg(2) <= delayMatch18_reg_next(2);
        delayMatch18_reg(3) <= delayMatch18_reg_next(3);
        delayMatch18_reg(4) <= delayMatch18_reg_next(4);
        delayMatch18_reg(5) <= delayMatch18_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  stateControl_18 <= delayMatch18_reg(5);
  delayMatch18_reg_next(0) <= stateControl_17;
  delayMatch18_reg_next(1) <= delayMatch18_reg(0);
  delayMatch18_reg_next(2) <= delayMatch18_reg(1);
  delayMatch18_reg_next(3) <= delayMatch18_reg(2);
  delayMatch18_reg_next(4) <= delayMatch18_reg(3);
  delayMatch18_reg_next(5) <= delayMatch18_reg(4);

  
  Switch_on82_out1_1 <= Delay127_out1 WHEN stateControl_18 = '0' ELSE
      Switch_on82_out1;

  Delay127_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay127_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay127_out1 <= Switch_on82_out1_1;
      END IF;
    END IF;
  END PROCESS Delay127_process;


  
  Switch_on82_out1 <= Delay127_out1 WHEN switch_compare_1_8 = '0' ELSE
      nfp_out_9_1;

  
  switch_compare_1_9 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_19 <= '1';

  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch20_reg(0) <= '0';
        delayMatch20_reg(1) <= '0';
        delayMatch20_reg(2) <= '0';
        delayMatch20_reg(3) <= '0';
        delayMatch20_reg(4) <= '0';
        delayMatch20_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch20_reg(0) <= delayMatch20_reg_next(0);
        delayMatch20_reg(1) <= delayMatch20_reg_next(1);
        delayMatch20_reg(2) <= delayMatch20_reg_next(2);
        delayMatch20_reg(3) <= delayMatch20_reg_next(3);
        delayMatch20_reg(4) <= delayMatch20_reg_next(4);
        delayMatch20_reg(5) <= delayMatch20_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch20_process;

  stateControl_20 <= delayMatch20_reg(5);
  delayMatch20_reg_next(0) <= stateControl_19;
  delayMatch20_reg_next(1) <= delayMatch20_reg(0);
  delayMatch20_reg_next(2) <= delayMatch20_reg(1);
  delayMatch20_reg_next(3) <= delayMatch20_reg(2);
  delayMatch20_reg_next(4) <= delayMatch20_reg(3);
  delayMatch20_reg_next(5) <= delayMatch20_reg(4);

  
  Switch_on81_out1_1 <= Delay126_out1 WHEN stateControl_20 = '0' ELSE
      Switch_on81_out1;

  Delay126_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay126_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay126_out1 <= Switch_on81_out1_1;
      END IF;
    END IF;
  END PROCESS Delay126_process;


  
  Switch_on81_out1 <= Delay126_out1 WHEN switch_compare_1_9 = '0' ELSE
      nfp_out_10_1;

  
  switch_compare_1_10 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_21 <= '1';

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch22_reg(0) <= '0';
        delayMatch22_reg(1) <= '0';
        delayMatch22_reg(2) <= '0';
        delayMatch22_reg(3) <= '0';
        delayMatch22_reg(4) <= '0';
        delayMatch22_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch22_reg(0) <= delayMatch22_reg_next(0);
        delayMatch22_reg(1) <= delayMatch22_reg_next(1);
        delayMatch22_reg(2) <= delayMatch22_reg_next(2);
        delayMatch22_reg(3) <= delayMatch22_reg_next(3);
        delayMatch22_reg(4) <= delayMatch22_reg_next(4);
        delayMatch22_reg(5) <= delayMatch22_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch22_process;

  stateControl_22 <= delayMatch22_reg(5);
  delayMatch22_reg_next(0) <= stateControl_21;
  delayMatch22_reg_next(1) <= delayMatch22_reg(0);
  delayMatch22_reg_next(2) <= delayMatch22_reg(1);
  delayMatch22_reg_next(3) <= delayMatch22_reg(2);
  delayMatch22_reg_next(4) <= delayMatch22_reg(3);
  delayMatch22_reg_next(5) <= delayMatch22_reg(4);

  
  Switch_on80_out1_1 <= Delay125_out1 WHEN stateControl_22 = '0' ELSE
      Switch_on80_out1;

  Delay125_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay125_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay125_out1 <= Switch_on80_out1_1;
      END IF;
    END IF;
  END PROCESS Delay125_process;


  
  Switch_on80_out1 <= Delay125_out1 WHEN switch_compare_1_10 = '0' ELSE
      nfp_out_11_1;

  
  switch_compare_1_11 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_23 <= '1';

  delayMatch24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch24_reg(0) <= '0';
        delayMatch24_reg(1) <= '0';
        delayMatch24_reg(2) <= '0';
        delayMatch24_reg(3) <= '0';
        delayMatch24_reg(4) <= '0';
        delayMatch24_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch24_reg(0) <= delayMatch24_reg_next(0);
        delayMatch24_reg(1) <= delayMatch24_reg_next(1);
        delayMatch24_reg(2) <= delayMatch24_reg_next(2);
        delayMatch24_reg(3) <= delayMatch24_reg_next(3);
        delayMatch24_reg(4) <= delayMatch24_reg_next(4);
        delayMatch24_reg(5) <= delayMatch24_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch24_process;

  stateControl_24 <= delayMatch24_reg(5);
  delayMatch24_reg_next(0) <= stateControl_23;
  delayMatch24_reg_next(1) <= delayMatch24_reg(0);
  delayMatch24_reg_next(2) <= delayMatch24_reg(1);
  delayMatch24_reg_next(3) <= delayMatch24_reg(2);
  delayMatch24_reg_next(4) <= delayMatch24_reg(3);
  delayMatch24_reg_next(5) <= delayMatch24_reg(4);

  
  Switch_on79_out1_1 <= Delay124_out1 WHEN stateControl_24 = '0' ELSE
      Switch_on79_out1;

  Delay124_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay124_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay124_out1 <= Switch_on79_out1_1;
      END IF;
    END IF;
  END PROCESS Delay124_process;


  
  Switch_on79_out1 <= Delay124_out1 WHEN switch_compare_1_11 = '0' ELSE
      nfp_out_12_1;

  
  switch_compare_1_12 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_25 <= '1';

  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_reg(0) <= '0';
        delayMatch26_reg(1) <= '0';
        delayMatch26_reg(2) <= '0';
        delayMatch26_reg(3) <= '0';
        delayMatch26_reg(4) <= '0';
        delayMatch26_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch26_reg(0) <= delayMatch26_reg_next(0);
        delayMatch26_reg(1) <= delayMatch26_reg_next(1);
        delayMatch26_reg(2) <= delayMatch26_reg_next(2);
        delayMatch26_reg(3) <= delayMatch26_reg_next(3);
        delayMatch26_reg(4) <= delayMatch26_reg_next(4);
        delayMatch26_reg(5) <= delayMatch26_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch26_process;

  stateControl_26 <= delayMatch26_reg(5);
  delayMatch26_reg_next(0) <= stateControl_25;
  delayMatch26_reg_next(1) <= delayMatch26_reg(0);
  delayMatch26_reg_next(2) <= delayMatch26_reg(1);
  delayMatch26_reg_next(3) <= delayMatch26_reg(2);
  delayMatch26_reg_next(4) <= delayMatch26_reg(3);
  delayMatch26_reg_next(5) <= delayMatch26_reg(4);

  
  Switch_on78_out1_1 <= Delay123_out1 WHEN stateControl_26 = '0' ELSE
      Switch_on78_out1;

  Delay123_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay123_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay123_out1 <= Switch_on78_out1_1;
      END IF;
    END IF;
  END PROCESS Delay123_process;


  
  Switch_on78_out1 <= Delay123_out1 WHEN switch_compare_1_12 = '0' ELSE
      nfp_out_13_1;

  
  switch_compare_1_13 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_27 <= '1';

  delayMatch28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch28_reg(0) <= '0';
        delayMatch28_reg(1) <= '0';
        delayMatch28_reg(2) <= '0';
        delayMatch28_reg(3) <= '0';
        delayMatch28_reg(4) <= '0';
        delayMatch28_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch28_reg(0) <= delayMatch28_reg_next(0);
        delayMatch28_reg(1) <= delayMatch28_reg_next(1);
        delayMatch28_reg(2) <= delayMatch28_reg_next(2);
        delayMatch28_reg(3) <= delayMatch28_reg_next(3);
        delayMatch28_reg(4) <= delayMatch28_reg_next(4);
        delayMatch28_reg(5) <= delayMatch28_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch28_process;

  stateControl_28 <= delayMatch28_reg(5);
  delayMatch28_reg_next(0) <= stateControl_27;
  delayMatch28_reg_next(1) <= delayMatch28_reg(0);
  delayMatch28_reg_next(2) <= delayMatch28_reg(1);
  delayMatch28_reg_next(3) <= delayMatch28_reg(2);
  delayMatch28_reg_next(4) <= delayMatch28_reg(3);
  delayMatch28_reg_next(5) <= delayMatch28_reg(4);

  
  Switch_on77_out1_1 <= Delay122_out1 WHEN stateControl_28 = '0' ELSE
      Switch_on77_out1;

  Delay122_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay122_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay122_out1 <= Switch_on77_out1_1;
      END IF;
    END IF;
  END PROCESS Delay122_process;


  
  Switch_on77_out1 <= Delay122_out1 WHEN switch_compare_1_13 = '0' ELSE
      nfp_out_14_1;

  
  switch_compare_1_14 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_29 <= '1';

  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch30_reg(0) <= '0';
        delayMatch30_reg(1) <= '0';
        delayMatch30_reg(2) <= '0';
        delayMatch30_reg(3) <= '0';
        delayMatch30_reg(4) <= '0';
        delayMatch30_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch30_reg(0) <= delayMatch30_reg_next(0);
        delayMatch30_reg(1) <= delayMatch30_reg_next(1);
        delayMatch30_reg(2) <= delayMatch30_reg_next(2);
        delayMatch30_reg(3) <= delayMatch30_reg_next(3);
        delayMatch30_reg(4) <= delayMatch30_reg_next(4);
        delayMatch30_reg(5) <= delayMatch30_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch30_process;

  stateControl_30 <= delayMatch30_reg(5);
  delayMatch30_reg_next(0) <= stateControl_29;
  delayMatch30_reg_next(1) <= delayMatch30_reg(0);
  delayMatch30_reg_next(2) <= delayMatch30_reg(1);
  delayMatch30_reg_next(3) <= delayMatch30_reg(2);
  delayMatch30_reg_next(4) <= delayMatch30_reg(3);
  delayMatch30_reg_next(5) <= delayMatch30_reg(4);

  
  Switch_on76_out1_1 <= Delay121_out1 WHEN stateControl_30 = '0' ELSE
      Switch_on76_out1;

  Delay121_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay121_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay121_out1 <= Switch_on76_out1_1;
      END IF;
    END IF;
  END PROCESS Delay121_process;


  
  Switch_on76_out1 <= Delay121_out1 WHEN switch_compare_1_14 = '0' ELSE
      nfp_out_15_1;

  
  switch_compare_1_15 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_31 <= '1';

  delayMatch32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch32_reg(0) <= '0';
        delayMatch32_reg(1) <= '0';
        delayMatch32_reg(2) <= '0';
        delayMatch32_reg(3) <= '0';
        delayMatch32_reg(4) <= '0';
        delayMatch32_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch32_reg(0) <= delayMatch32_reg_next(0);
        delayMatch32_reg(1) <= delayMatch32_reg_next(1);
        delayMatch32_reg(2) <= delayMatch32_reg_next(2);
        delayMatch32_reg(3) <= delayMatch32_reg_next(3);
        delayMatch32_reg(4) <= delayMatch32_reg_next(4);
        delayMatch32_reg(5) <= delayMatch32_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch32_process;

  stateControl_32 <= delayMatch32_reg(5);
  delayMatch32_reg_next(0) <= stateControl_31;
  delayMatch32_reg_next(1) <= delayMatch32_reg(0);
  delayMatch32_reg_next(2) <= delayMatch32_reg(1);
  delayMatch32_reg_next(3) <= delayMatch32_reg(2);
  delayMatch32_reg_next(4) <= delayMatch32_reg(3);
  delayMatch32_reg_next(5) <= delayMatch32_reg(4);

  
  Switch_on75_out1_1 <= Delay120_out1 WHEN stateControl_32 = '0' ELSE
      Switch_on75_out1;

  Delay120_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay120_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay120_out1 <= Switch_on75_out1_1;
      END IF;
    END IF;
  END PROCESS Delay120_process;


  
  Switch_on75_out1 <= Delay120_out1 WHEN switch_compare_1_15 = '0' ELSE
      nfp_out_16_1;

  
  switch_compare_1_16 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_33 <= '1';

  delayMatch34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch34_reg(0) <= '0';
        delayMatch34_reg(1) <= '0';
        delayMatch34_reg(2) <= '0';
        delayMatch34_reg(3) <= '0';
        delayMatch34_reg(4) <= '0';
        delayMatch34_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch34_reg(0) <= delayMatch34_reg_next(0);
        delayMatch34_reg(1) <= delayMatch34_reg_next(1);
        delayMatch34_reg(2) <= delayMatch34_reg_next(2);
        delayMatch34_reg(3) <= delayMatch34_reg_next(3);
        delayMatch34_reg(4) <= delayMatch34_reg_next(4);
        delayMatch34_reg(5) <= delayMatch34_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch34_process;

  stateControl_34 <= delayMatch34_reg(5);
  delayMatch34_reg_next(0) <= stateControl_33;
  delayMatch34_reg_next(1) <= delayMatch34_reg(0);
  delayMatch34_reg_next(2) <= delayMatch34_reg(1);
  delayMatch34_reg_next(3) <= delayMatch34_reg(2);
  delayMatch34_reg_next(4) <= delayMatch34_reg(3);
  delayMatch34_reg_next(5) <= delayMatch34_reg(4);

  
  Switch_on74_out1_1 <= Delay119_out1 WHEN stateControl_34 = '0' ELSE
      Switch_on74_out1;

  Delay119_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay119_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay119_out1 <= Switch_on74_out1_1;
      END IF;
    END IF;
  END PROCESS Delay119_process;


  
  Switch_on74_out1 <= Delay119_out1 WHEN switch_compare_1_16 = '0' ELSE
      nfp_out_17_1;

  
  switch_compare_1_17 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_35 <= '1';

  delayMatch36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch36_reg(0) <= '0';
        delayMatch36_reg(1) <= '0';
        delayMatch36_reg(2) <= '0';
        delayMatch36_reg(3) <= '0';
        delayMatch36_reg(4) <= '0';
        delayMatch36_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch36_reg(0) <= delayMatch36_reg_next(0);
        delayMatch36_reg(1) <= delayMatch36_reg_next(1);
        delayMatch36_reg(2) <= delayMatch36_reg_next(2);
        delayMatch36_reg(3) <= delayMatch36_reg_next(3);
        delayMatch36_reg(4) <= delayMatch36_reg_next(4);
        delayMatch36_reg(5) <= delayMatch36_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch36_process;

  stateControl_36 <= delayMatch36_reg(5);
  delayMatch36_reg_next(0) <= stateControl_35;
  delayMatch36_reg_next(1) <= delayMatch36_reg(0);
  delayMatch36_reg_next(2) <= delayMatch36_reg(1);
  delayMatch36_reg_next(3) <= delayMatch36_reg(2);
  delayMatch36_reg_next(4) <= delayMatch36_reg(3);
  delayMatch36_reg_next(5) <= delayMatch36_reg(4);

  
  Switch_on73_out1_1 <= Delay118_out1 WHEN stateControl_36 = '0' ELSE
      Switch_on73_out1;

  Delay118_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay118_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay118_out1 <= Switch_on73_out1_1;
      END IF;
    END IF;
  END PROCESS Delay118_process;


  
  Switch_on73_out1 <= Delay118_out1 WHEN switch_compare_1_17 = '0' ELSE
      nfp_out_18_1;

  
  switch_compare_1_18 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_37 <= '1';

  delayMatch38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch38_reg(0) <= '0';
        delayMatch38_reg(1) <= '0';
        delayMatch38_reg(2) <= '0';
        delayMatch38_reg(3) <= '0';
        delayMatch38_reg(4) <= '0';
        delayMatch38_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch38_reg(0) <= delayMatch38_reg_next(0);
        delayMatch38_reg(1) <= delayMatch38_reg_next(1);
        delayMatch38_reg(2) <= delayMatch38_reg_next(2);
        delayMatch38_reg(3) <= delayMatch38_reg_next(3);
        delayMatch38_reg(4) <= delayMatch38_reg_next(4);
        delayMatch38_reg(5) <= delayMatch38_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch38_process;

  stateControl_38 <= delayMatch38_reg(5);
  delayMatch38_reg_next(0) <= stateControl_37;
  delayMatch38_reg_next(1) <= delayMatch38_reg(0);
  delayMatch38_reg_next(2) <= delayMatch38_reg(1);
  delayMatch38_reg_next(3) <= delayMatch38_reg(2);
  delayMatch38_reg_next(4) <= delayMatch38_reg(3);
  delayMatch38_reg_next(5) <= delayMatch38_reg(4);

  
  Switch_on72_out1_1 <= Delay117_out1 WHEN stateControl_38 = '0' ELSE
      Switch_on72_out1;

  Delay117_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay117_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay117_out1 <= Switch_on72_out1_1;
      END IF;
    END IF;
  END PROCESS Delay117_process;


  
  Switch_on72_out1 <= Delay117_out1 WHEN switch_compare_1_18 = '0' ELSE
      nfp_out_19_1;

  
  switch_compare_1_19 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_39 <= '1';

  delayMatch40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch40_reg(0) <= '0';
        delayMatch40_reg(1) <= '0';
        delayMatch40_reg(2) <= '0';
        delayMatch40_reg(3) <= '0';
        delayMatch40_reg(4) <= '0';
        delayMatch40_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch40_reg(0) <= delayMatch40_reg_next(0);
        delayMatch40_reg(1) <= delayMatch40_reg_next(1);
        delayMatch40_reg(2) <= delayMatch40_reg_next(2);
        delayMatch40_reg(3) <= delayMatch40_reg_next(3);
        delayMatch40_reg(4) <= delayMatch40_reg_next(4);
        delayMatch40_reg(5) <= delayMatch40_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch40_process;

  stateControl_40 <= delayMatch40_reg(5);
  delayMatch40_reg_next(0) <= stateControl_39;
  delayMatch40_reg_next(1) <= delayMatch40_reg(0);
  delayMatch40_reg_next(2) <= delayMatch40_reg(1);
  delayMatch40_reg_next(3) <= delayMatch40_reg(2);
  delayMatch40_reg_next(4) <= delayMatch40_reg(3);
  delayMatch40_reg_next(5) <= delayMatch40_reg(4);

  
  Switch_on71_out1_1 <= Delay116_out1 WHEN stateControl_40 = '0' ELSE
      Switch_on71_out1;

  Delay116_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay116_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay116_out1 <= Switch_on71_out1_1;
      END IF;
    END IF;
  END PROCESS Delay116_process;


  
  Switch_on71_out1 <= Delay116_out1 WHEN switch_compare_1_19 = '0' ELSE
      nfp_out_20_1;

  
  switch_compare_1_20 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_41 <= '1';

  delayMatch42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch42_reg(0) <= '0';
        delayMatch42_reg(1) <= '0';
        delayMatch42_reg(2) <= '0';
        delayMatch42_reg(3) <= '0';
        delayMatch42_reg(4) <= '0';
        delayMatch42_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch42_reg(0) <= delayMatch42_reg_next(0);
        delayMatch42_reg(1) <= delayMatch42_reg_next(1);
        delayMatch42_reg(2) <= delayMatch42_reg_next(2);
        delayMatch42_reg(3) <= delayMatch42_reg_next(3);
        delayMatch42_reg(4) <= delayMatch42_reg_next(4);
        delayMatch42_reg(5) <= delayMatch42_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch42_process;

  stateControl_42 <= delayMatch42_reg(5);
  delayMatch42_reg_next(0) <= stateControl_41;
  delayMatch42_reg_next(1) <= delayMatch42_reg(0);
  delayMatch42_reg_next(2) <= delayMatch42_reg(1);
  delayMatch42_reg_next(3) <= delayMatch42_reg(2);
  delayMatch42_reg_next(4) <= delayMatch42_reg(3);
  delayMatch42_reg_next(5) <= delayMatch42_reg(4);

  
  Switch_on70_out1_1 <= Delay115_out1 WHEN stateControl_42 = '0' ELSE
      Switch_on70_out1;

  Delay115_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay115_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay115_out1 <= Switch_on70_out1_1;
      END IF;
    END IF;
  END PROCESS Delay115_process;


  
  Switch_on70_out1 <= Delay115_out1 WHEN switch_compare_1_20 = '0' ELSE
      nfp_out_21_1;

  
  switch_compare_1_21 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_43 <= '1';

  delayMatch44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch44_reg(0) <= '0';
        delayMatch44_reg(1) <= '0';
        delayMatch44_reg(2) <= '0';
        delayMatch44_reg(3) <= '0';
        delayMatch44_reg(4) <= '0';
        delayMatch44_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch44_reg(0) <= delayMatch44_reg_next(0);
        delayMatch44_reg(1) <= delayMatch44_reg_next(1);
        delayMatch44_reg(2) <= delayMatch44_reg_next(2);
        delayMatch44_reg(3) <= delayMatch44_reg_next(3);
        delayMatch44_reg(4) <= delayMatch44_reg_next(4);
        delayMatch44_reg(5) <= delayMatch44_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch44_process;

  stateControl_44 <= delayMatch44_reg(5);
  delayMatch44_reg_next(0) <= stateControl_43;
  delayMatch44_reg_next(1) <= delayMatch44_reg(0);
  delayMatch44_reg_next(2) <= delayMatch44_reg(1);
  delayMatch44_reg_next(3) <= delayMatch44_reg(2);
  delayMatch44_reg_next(4) <= delayMatch44_reg(3);
  delayMatch44_reg_next(5) <= delayMatch44_reg(4);

  
  Switch_on69_out1_1 <= Delay114_out1 WHEN stateControl_44 = '0' ELSE
      Switch_on69_out1;

  Delay114_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay114_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay114_out1 <= Switch_on69_out1_1;
      END IF;
    END IF;
  END PROCESS Delay114_process;


  
  Switch_on69_out1 <= Delay114_out1 WHEN switch_compare_1_21 = '0' ELSE
      nfp_out_22_1;

  
  switch_compare_1_22 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_45 <= '1';

  delayMatch46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch46_reg(0) <= '0';
        delayMatch46_reg(1) <= '0';
        delayMatch46_reg(2) <= '0';
        delayMatch46_reg(3) <= '0';
        delayMatch46_reg(4) <= '0';
        delayMatch46_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch46_reg(0) <= delayMatch46_reg_next(0);
        delayMatch46_reg(1) <= delayMatch46_reg_next(1);
        delayMatch46_reg(2) <= delayMatch46_reg_next(2);
        delayMatch46_reg(3) <= delayMatch46_reg_next(3);
        delayMatch46_reg(4) <= delayMatch46_reg_next(4);
        delayMatch46_reg(5) <= delayMatch46_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch46_process;

  stateControl_46 <= delayMatch46_reg(5);
  delayMatch46_reg_next(0) <= stateControl_45;
  delayMatch46_reg_next(1) <= delayMatch46_reg(0);
  delayMatch46_reg_next(2) <= delayMatch46_reg(1);
  delayMatch46_reg_next(3) <= delayMatch46_reg(2);
  delayMatch46_reg_next(4) <= delayMatch46_reg(3);
  delayMatch46_reg_next(5) <= delayMatch46_reg(4);

  
  Switch_on68_out1_1 <= Delay113_out1 WHEN stateControl_46 = '0' ELSE
      Switch_on68_out1;

  Delay113_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay113_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay113_out1 <= Switch_on68_out1_1;
      END IF;
    END IF;
  END PROCESS Delay113_process;


  
  Switch_on68_out1 <= Delay113_out1 WHEN switch_compare_1_22 = '0' ELSE
      nfp_out_23_1;

  
  switch_compare_1_23 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_47 <= '1';

  delayMatch48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch48_reg(0) <= '0';
        delayMatch48_reg(1) <= '0';
        delayMatch48_reg(2) <= '0';
        delayMatch48_reg(3) <= '0';
        delayMatch48_reg(4) <= '0';
        delayMatch48_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch48_reg(0) <= delayMatch48_reg_next(0);
        delayMatch48_reg(1) <= delayMatch48_reg_next(1);
        delayMatch48_reg(2) <= delayMatch48_reg_next(2);
        delayMatch48_reg(3) <= delayMatch48_reg_next(3);
        delayMatch48_reg(4) <= delayMatch48_reg_next(4);
        delayMatch48_reg(5) <= delayMatch48_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch48_process;

  stateControl_48 <= delayMatch48_reg(5);
  delayMatch48_reg_next(0) <= stateControl_47;
  delayMatch48_reg_next(1) <= delayMatch48_reg(0);
  delayMatch48_reg_next(2) <= delayMatch48_reg(1);
  delayMatch48_reg_next(3) <= delayMatch48_reg(2);
  delayMatch48_reg_next(4) <= delayMatch48_reg(3);
  delayMatch48_reg_next(5) <= delayMatch48_reg(4);

  
  Switch_on67_out1_1 <= Delay112_out1 WHEN stateControl_48 = '0' ELSE
      Switch_on67_out1;

  Delay112_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay112_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay112_out1 <= Switch_on67_out1_1;
      END IF;
    END IF;
  END PROCESS Delay112_process;


  
  Switch_on67_out1 <= Delay112_out1 WHEN switch_compare_1_23 = '0' ELSE
      nfp_out_24_1;

  
  switch_compare_1_24 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_49 <= '1';

  delayMatch50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch50_reg(0) <= '0';
        delayMatch50_reg(1) <= '0';
        delayMatch50_reg(2) <= '0';
        delayMatch50_reg(3) <= '0';
        delayMatch50_reg(4) <= '0';
        delayMatch50_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch50_reg(0) <= delayMatch50_reg_next(0);
        delayMatch50_reg(1) <= delayMatch50_reg_next(1);
        delayMatch50_reg(2) <= delayMatch50_reg_next(2);
        delayMatch50_reg(3) <= delayMatch50_reg_next(3);
        delayMatch50_reg(4) <= delayMatch50_reg_next(4);
        delayMatch50_reg(5) <= delayMatch50_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch50_process;

  stateControl_50 <= delayMatch50_reg(5);
  delayMatch50_reg_next(0) <= stateControl_49;
  delayMatch50_reg_next(1) <= delayMatch50_reg(0);
  delayMatch50_reg_next(2) <= delayMatch50_reg(1);
  delayMatch50_reg_next(3) <= delayMatch50_reg(2);
  delayMatch50_reg_next(4) <= delayMatch50_reg(3);
  delayMatch50_reg_next(5) <= delayMatch50_reg(4);

  
  Switch_on66_out1_1 <= Delay111_out1 WHEN stateControl_50 = '0' ELSE
      Switch_on66_out1;

  Delay111_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay111_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay111_out1 <= Switch_on66_out1_1;
      END IF;
    END IF;
  END PROCESS Delay111_process;


  
  Switch_on66_out1 <= Delay111_out1 WHEN switch_compare_1_24 = '0' ELSE
      nfp_out_25_1;

  
  switch_compare_1_25 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_51 <= '1';

  delayMatch52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch52_reg(0) <= '0';
        delayMatch52_reg(1) <= '0';
        delayMatch52_reg(2) <= '0';
        delayMatch52_reg(3) <= '0';
        delayMatch52_reg(4) <= '0';
        delayMatch52_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch52_reg(0) <= delayMatch52_reg_next(0);
        delayMatch52_reg(1) <= delayMatch52_reg_next(1);
        delayMatch52_reg(2) <= delayMatch52_reg_next(2);
        delayMatch52_reg(3) <= delayMatch52_reg_next(3);
        delayMatch52_reg(4) <= delayMatch52_reg_next(4);
        delayMatch52_reg(5) <= delayMatch52_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch52_process;

  stateControl_52 <= delayMatch52_reg(5);
  delayMatch52_reg_next(0) <= stateControl_51;
  delayMatch52_reg_next(1) <= delayMatch52_reg(0);
  delayMatch52_reg_next(2) <= delayMatch52_reg(1);
  delayMatch52_reg_next(3) <= delayMatch52_reg(2);
  delayMatch52_reg_next(4) <= delayMatch52_reg(3);
  delayMatch52_reg_next(5) <= delayMatch52_reg(4);

  
  Switch_on65_out1_1 <= Delay110_out1 WHEN stateControl_52 = '0' ELSE
      Switch_on65_out1;

  Delay110_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay110_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay110_out1 <= Switch_on65_out1_1;
      END IF;
    END IF;
  END PROCESS Delay110_process;


  
  Switch_on65_out1 <= Delay110_out1 WHEN switch_compare_1_25 = '0' ELSE
      nfp_out_26_1;

  
  switch_compare_1_26 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_53 <= '1';

  delayMatch54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch54_reg(0) <= '0';
        delayMatch54_reg(1) <= '0';
        delayMatch54_reg(2) <= '0';
        delayMatch54_reg(3) <= '0';
        delayMatch54_reg(4) <= '0';
        delayMatch54_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch54_reg(0) <= delayMatch54_reg_next(0);
        delayMatch54_reg(1) <= delayMatch54_reg_next(1);
        delayMatch54_reg(2) <= delayMatch54_reg_next(2);
        delayMatch54_reg(3) <= delayMatch54_reg_next(3);
        delayMatch54_reg(4) <= delayMatch54_reg_next(4);
        delayMatch54_reg(5) <= delayMatch54_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch54_process;

  stateControl_54 <= delayMatch54_reg(5);
  delayMatch54_reg_next(0) <= stateControl_53;
  delayMatch54_reg_next(1) <= delayMatch54_reg(0);
  delayMatch54_reg_next(2) <= delayMatch54_reg(1);
  delayMatch54_reg_next(3) <= delayMatch54_reg(2);
  delayMatch54_reg_next(4) <= delayMatch54_reg(3);
  delayMatch54_reg_next(5) <= delayMatch54_reg(4);

  
  Switch_on64_out1_1 <= Delay109_out1 WHEN stateControl_54 = '0' ELSE
      Switch_on64_out1;

  Delay109_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay109_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay109_out1 <= Switch_on64_out1_1;
      END IF;
    END IF;
  END PROCESS Delay109_process;


  
  Switch_on64_out1 <= Delay109_out1 WHEN switch_compare_1_26 = '0' ELSE
      nfp_out_27_1;

  
  switch_compare_1_27 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_55 <= '1';

  delayMatch56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch56_reg(0) <= '0';
        delayMatch56_reg(1) <= '0';
        delayMatch56_reg(2) <= '0';
        delayMatch56_reg(3) <= '0';
        delayMatch56_reg(4) <= '0';
        delayMatch56_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch56_reg(0) <= delayMatch56_reg_next(0);
        delayMatch56_reg(1) <= delayMatch56_reg_next(1);
        delayMatch56_reg(2) <= delayMatch56_reg_next(2);
        delayMatch56_reg(3) <= delayMatch56_reg_next(3);
        delayMatch56_reg(4) <= delayMatch56_reg_next(4);
        delayMatch56_reg(5) <= delayMatch56_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch56_process;

  stateControl_56 <= delayMatch56_reg(5);
  delayMatch56_reg_next(0) <= stateControl_55;
  delayMatch56_reg_next(1) <= delayMatch56_reg(0);
  delayMatch56_reg_next(2) <= delayMatch56_reg(1);
  delayMatch56_reg_next(3) <= delayMatch56_reg(2);
  delayMatch56_reg_next(4) <= delayMatch56_reg(3);
  delayMatch56_reg_next(5) <= delayMatch56_reg(4);

  
  Switch_on63_out1_1 <= Delay108_out1 WHEN stateControl_56 = '0' ELSE
      Switch_on63_out1;

  Delay108_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay108_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay108_out1 <= Switch_on63_out1_1;
      END IF;
    END IF;
  END PROCESS Delay108_process;


  
  Switch_on63_out1 <= Delay108_out1 WHEN switch_compare_1_27 = '0' ELSE
      nfp_out_28_1;

  
  switch_compare_1_28 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_57 <= '1';

  delayMatch58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch58_reg(0) <= '0';
        delayMatch58_reg(1) <= '0';
        delayMatch58_reg(2) <= '0';
        delayMatch58_reg(3) <= '0';
        delayMatch58_reg(4) <= '0';
        delayMatch58_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch58_reg(0) <= delayMatch58_reg_next(0);
        delayMatch58_reg(1) <= delayMatch58_reg_next(1);
        delayMatch58_reg(2) <= delayMatch58_reg_next(2);
        delayMatch58_reg(3) <= delayMatch58_reg_next(3);
        delayMatch58_reg(4) <= delayMatch58_reg_next(4);
        delayMatch58_reg(5) <= delayMatch58_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch58_process;

  stateControl_58 <= delayMatch58_reg(5);
  delayMatch58_reg_next(0) <= stateControl_57;
  delayMatch58_reg_next(1) <= delayMatch58_reg(0);
  delayMatch58_reg_next(2) <= delayMatch58_reg(1);
  delayMatch58_reg_next(3) <= delayMatch58_reg(2);
  delayMatch58_reg_next(4) <= delayMatch58_reg(3);
  delayMatch58_reg_next(5) <= delayMatch58_reg(4);

  
  Switch_on62_out1_1 <= Delay107_out1 WHEN stateControl_58 = '0' ELSE
      Switch_on62_out1;

  Delay107_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay107_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay107_out1 <= Switch_on62_out1_1;
      END IF;
    END IF;
  END PROCESS Delay107_process;


  
  Switch_on62_out1 <= Delay107_out1 WHEN switch_compare_1_28 = '0' ELSE
      nfp_out_29_1;

  
  switch_compare_1_29 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_59 <= '1';

  delayMatch60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch60_reg(0) <= '0';
        delayMatch60_reg(1) <= '0';
        delayMatch60_reg(2) <= '0';
        delayMatch60_reg(3) <= '0';
        delayMatch60_reg(4) <= '0';
        delayMatch60_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch60_reg(0) <= delayMatch60_reg_next(0);
        delayMatch60_reg(1) <= delayMatch60_reg_next(1);
        delayMatch60_reg(2) <= delayMatch60_reg_next(2);
        delayMatch60_reg(3) <= delayMatch60_reg_next(3);
        delayMatch60_reg(4) <= delayMatch60_reg_next(4);
        delayMatch60_reg(5) <= delayMatch60_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch60_process;

  stateControl_60 <= delayMatch60_reg(5);
  delayMatch60_reg_next(0) <= stateControl_59;
  delayMatch60_reg_next(1) <= delayMatch60_reg(0);
  delayMatch60_reg_next(2) <= delayMatch60_reg(1);
  delayMatch60_reg_next(3) <= delayMatch60_reg(2);
  delayMatch60_reg_next(4) <= delayMatch60_reg(3);
  delayMatch60_reg_next(5) <= delayMatch60_reg(4);

  
  Switch_on61_out1_1 <= Delay106_out1 WHEN stateControl_60 = '0' ELSE
      Switch_on61_out1;

  Delay106_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay106_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay106_out1 <= Switch_on61_out1_1;
      END IF;
    END IF;
  END PROCESS Delay106_process;


  
  Switch_on61_out1 <= Delay106_out1 WHEN switch_compare_1_29 = '0' ELSE
      nfp_out_30_1;

  
  switch_compare_1_30 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_61 <= '1';

  delayMatch62_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch62_reg(0) <= '0';
        delayMatch62_reg(1) <= '0';
        delayMatch62_reg(2) <= '0';
        delayMatch62_reg(3) <= '0';
        delayMatch62_reg(4) <= '0';
        delayMatch62_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch62_reg(0) <= delayMatch62_reg_next(0);
        delayMatch62_reg(1) <= delayMatch62_reg_next(1);
        delayMatch62_reg(2) <= delayMatch62_reg_next(2);
        delayMatch62_reg(3) <= delayMatch62_reg_next(3);
        delayMatch62_reg(4) <= delayMatch62_reg_next(4);
        delayMatch62_reg(5) <= delayMatch62_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch62_process;

  stateControl_62 <= delayMatch62_reg(5);
  delayMatch62_reg_next(0) <= stateControl_61;
  delayMatch62_reg_next(1) <= delayMatch62_reg(0);
  delayMatch62_reg_next(2) <= delayMatch62_reg(1);
  delayMatch62_reg_next(3) <= delayMatch62_reg(2);
  delayMatch62_reg_next(4) <= delayMatch62_reg(3);
  delayMatch62_reg_next(5) <= delayMatch62_reg(4);

  
  Switch_on60_out1_1 <= Delay105_out1 WHEN stateControl_62 = '0' ELSE
      Switch_on60_out1;

  Delay105_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay105_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay105_out1 <= Switch_on60_out1_1;
      END IF;
    END IF;
  END PROCESS Delay105_process;


  
  Switch_on60_out1 <= Delay105_out1 WHEN switch_compare_1_30 = '0' ELSE
      nfp_out_31_1;

  
  switch_compare_1_31 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_63 <= '1';

  delayMatch64_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch64_reg(0) <= '0';
        delayMatch64_reg(1) <= '0';
        delayMatch64_reg(2) <= '0';
        delayMatch64_reg(3) <= '0';
        delayMatch64_reg(4) <= '0';
        delayMatch64_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch64_reg(0) <= delayMatch64_reg_next(0);
        delayMatch64_reg(1) <= delayMatch64_reg_next(1);
        delayMatch64_reg(2) <= delayMatch64_reg_next(2);
        delayMatch64_reg(3) <= delayMatch64_reg_next(3);
        delayMatch64_reg(4) <= delayMatch64_reg_next(4);
        delayMatch64_reg(5) <= delayMatch64_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch64_process;

  stateControl_64 <= delayMatch64_reg(5);
  delayMatch64_reg_next(0) <= stateControl_63;
  delayMatch64_reg_next(1) <= delayMatch64_reg(0);
  delayMatch64_reg_next(2) <= delayMatch64_reg(1);
  delayMatch64_reg_next(3) <= delayMatch64_reg(2);
  delayMatch64_reg_next(4) <= delayMatch64_reg(3);
  delayMatch64_reg_next(5) <= delayMatch64_reg(4);

  
  Switch_on59_out1_1 <= Delay104_out1 WHEN stateControl_64 = '0' ELSE
      Switch_on59_out1;

  Delay104_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay104_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay104_out1 <= Switch_on59_out1_1;
      END IF;
    END IF;
  END PROCESS Delay104_process;


  
  Switch_on59_out1 <= Delay104_out1 WHEN switch_compare_1_31 = '0' ELSE
      nfp_out_32_1;

  
  switch_compare_1_32 <= '1' WHEN enable = '1' ELSE
      '0';

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay20_out1 <= Switch_on21_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  
  Switch_on21_out1 <= Delay20_out1 WHEN switch_compare_1_32 = '0' ELSE
      SampleTime_div_Ld_AXI;

  
  switch_compare_1_33 <= '1' WHEN enable = '1' ELSE
      '0';

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay19_out1 <= Switch_on20_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  Switch_on20_out1 <= Delay19_out1 WHEN switch_compare_1_33 = '0' ELSE
      SampleTime_div_Lq_AXI;

  
  switch_compare_1_34 <= '1' WHEN enable = '1' ELSE
      '0';

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay18_out1 <= Switch_on19_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Switch_on19_out1 <= Delay18_out1 WHEN switch_compare_1_34 = '0' ELSE
      SampleTime_div_Lx_AXI;

  
  switch_compare_1_35 <= '1' WHEN enable = '1' ELSE
      '0';

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay17_out1 <= Switch_on18_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  Switch_on18_out1 <= Delay17_out1 WHEN switch_compare_1_35 = '0' ELSE
      SampleTime_div_Ly_AXI;

  
  switch_compare_1_36 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_65 <= '1';

  delayMatch66_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch66_reg(0) <= '0';
        delayMatch66_reg(1) <= '0';
        delayMatch66_reg(2) <= '0';
        delayMatch66_reg(3) <= '0';
        delayMatch66_reg(4) <= '0';
        delayMatch66_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch66_reg(0) <= delayMatch66_reg_next(0);
        delayMatch66_reg(1) <= delayMatch66_reg_next(1);
        delayMatch66_reg(2) <= delayMatch66_reg_next(2);
        delayMatch66_reg(3) <= delayMatch66_reg_next(3);
        delayMatch66_reg(4) <= delayMatch66_reg_next(4);
        delayMatch66_reg(5) <= delayMatch66_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch66_process;

  stateControl_66 <= delayMatch66_reg(5);
  delayMatch66_reg_next(0) <= stateControl_65;
  delayMatch66_reg_next(1) <= delayMatch66_reg(0);
  delayMatch66_reg_next(2) <= delayMatch66_reg(1);
  delayMatch66_reg_next(3) <= delayMatch66_reg(2);
  delayMatch66_reg_next(4) <= delayMatch66_reg(3);
  delayMatch66_reg_next(5) <= delayMatch66_reg(4);

  
  Switch_on17_out1_1 <= Delay16_out1 WHEN stateControl_66 = '0' ELSE
      Switch_on17_out1;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay16_out1 <= Switch_on17_out1_1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Switch_on17_out1 <= Delay16_out1 WHEN switch_compare_1_36 = '0' ELSE
      Data_Type_Conversion7_out1;

  
  switch_compare_1_37 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_67 <= '1';

  delayMatch68_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch68_reg(0) <= '0';
        delayMatch68_reg(1) <= '0';
        delayMatch68_reg(2) <= '0';
        delayMatch68_reg(3) <= '0';
        delayMatch68_reg(4) <= '0';
        delayMatch68_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch68_reg(0) <= delayMatch68_reg_next(0);
        delayMatch68_reg(1) <= delayMatch68_reg_next(1);
        delayMatch68_reg(2) <= delayMatch68_reg_next(2);
        delayMatch68_reg(3) <= delayMatch68_reg_next(3);
        delayMatch68_reg(4) <= delayMatch68_reg_next(4);
        delayMatch68_reg(5) <= delayMatch68_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch68_process;

  stateControl_68 <= delayMatch68_reg(5);
  delayMatch68_reg_next(0) <= stateControl_67;
  delayMatch68_reg_next(1) <= delayMatch68_reg(0);
  delayMatch68_reg_next(2) <= delayMatch68_reg(1);
  delayMatch68_reg_next(3) <= delayMatch68_reg(2);
  delayMatch68_reg_next(4) <= delayMatch68_reg(3);
  delayMatch68_reg_next(5) <= delayMatch68_reg(4);

  
  Switch_on16_out1_1 <= Delay15_out1 WHEN stateControl_68 = '0' ELSE
      Switch_on16_out1;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay15_out1 <= Switch_on16_out1_1;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  
  Switch_on16_out1 <= Delay15_out1 WHEN switch_compare_1_37 = '0' ELSE
      Data_Type_Conversion8_out1;

  
  switch_compare_1_38 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_69 <= '1';

  delayMatch70_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch70_reg(0) <= '0';
        delayMatch70_reg(1) <= '0';
        delayMatch70_reg(2) <= '0';
        delayMatch70_reg(3) <= '0';
        delayMatch70_reg(4) <= '0';
        delayMatch70_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch70_reg(0) <= delayMatch70_reg_next(0);
        delayMatch70_reg(1) <= delayMatch70_reg_next(1);
        delayMatch70_reg(2) <= delayMatch70_reg_next(2);
        delayMatch70_reg(3) <= delayMatch70_reg_next(3);
        delayMatch70_reg(4) <= delayMatch70_reg_next(4);
        delayMatch70_reg(5) <= delayMatch70_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch70_process;

  stateControl_70 <= delayMatch70_reg(5);
  delayMatch70_reg_next(0) <= stateControl_69;
  delayMatch70_reg_next(1) <= delayMatch70_reg(0);
  delayMatch70_reg_next(2) <= delayMatch70_reg(1);
  delayMatch70_reg_next(3) <= delayMatch70_reg(2);
  delayMatch70_reg_next(4) <= delayMatch70_reg(3);
  delayMatch70_reg_next(5) <= delayMatch70_reg(4);

  
  Switch_on15_out1_1 <= Delay14_out1 WHEN stateControl_70 = '0' ELSE
      Switch_on15_out1;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch_on15_out1_1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch_on15_out1 <= Delay14_out1 WHEN switch_compare_1_38 = '0' ELSE
      Data_Type_Conversion9_out1;

  
  switch_compare_1_39 <= '1' WHEN enable_1 = '1' ELSE
      '0';

  stateControl_71 <= '1';

  delayMatch72_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch72_reg(0) <= '0';
        delayMatch72_reg(1) <= '0';
        delayMatch72_reg(2) <= '0';
        delayMatch72_reg(3) <= '0';
        delayMatch72_reg(4) <= '0';
        delayMatch72_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch72_reg(0) <= delayMatch72_reg_next(0);
        delayMatch72_reg(1) <= delayMatch72_reg_next(1);
        delayMatch72_reg(2) <= delayMatch72_reg_next(2);
        delayMatch72_reg(3) <= delayMatch72_reg_next(3);
        delayMatch72_reg(4) <= delayMatch72_reg_next(4);
        delayMatch72_reg(5) <= delayMatch72_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch72_process;

  stateControl_72 <= delayMatch72_reg(5);
  delayMatch72_reg_next(0) <= stateControl_71;
  delayMatch72_reg_next(1) <= delayMatch72_reg(0);
  delayMatch72_reg_next(2) <= delayMatch72_reg(1);
  delayMatch72_reg_next(3) <= delayMatch72_reg(2);
  delayMatch72_reg_next(4) <= delayMatch72_reg(3);
  delayMatch72_reg_next(5) <= delayMatch72_reg(4);

  
  Switch_on13_out1_1 <= Delay13_out1 WHEN stateControl_72 = '0' ELSE
      Switch_on13_out1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch_on13_out1_1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch_on13_out1 <= Delay13_out1 WHEN switch_compare_1_39 = '0' ELSE
      Data_Type_Conversion10_out1;

  
  switch_compare_1_40 <= '1' WHEN enable = '1' ELSE
      '0';

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay12_out1 <= Switch_on12_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  Switch_on12_out1 <= Delay12_out1 WHEN switch_compare_1_40 = '0' ELSE
      Rs_AXI;

  delayMatch76_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch76_reg(0) <= '0';
        delayMatch76_reg(1) <= '0';
        delayMatch76_reg(2) <= '0';
        delayMatch76_reg(3) <= '0';
        delayMatch76_reg(4) <= '0';
        delayMatch76_reg(5) <= '0';
        delayMatch76_reg(6) <= '0';
        delayMatch76_reg(7) <= '0';
        delayMatch76_reg(8) <= '0';
        delayMatch76_reg(9) <= '0';
        delayMatch76_reg(10) <= '0';
        delayMatch76_reg(11) <= '0';
      ELSIF enb = '1' THEN
        delayMatch76_reg(0) <= delayMatch76_reg_next(0);
        delayMatch76_reg(1) <= delayMatch76_reg_next(1);
        delayMatch76_reg(2) <= delayMatch76_reg_next(2);
        delayMatch76_reg(3) <= delayMatch76_reg_next(3);
        delayMatch76_reg(4) <= delayMatch76_reg_next(4);
        delayMatch76_reg(5) <= delayMatch76_reg_next(5);
        delayMatch76_reg(6) <= delayMatch76_reg_next(6);
        delayMatch76_reg(7) <= delayMatch76_reg_next(7);
        delayMatch76_reg(8) <= delayMatch76_reg_next(8);
        delayMatch76_reg(9) <= delayMatch76_reg_next(9);
        delayMatch76_reg(10) <= delayMatch76_reg_next(10);
        delayMatch76_reg(11) <= delayMatch76_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch76_process;

  End_Cycle_1 <= delayMatch76_reg(11);
  delayMatch76_reg_next(0) <= End_Cycle;
  delayMatch76_reg_next(1) <= delayMatch76_reg(0);
  delayMatch76_reg_next(2) <= delayMatch76_reg(1);
  delayMatch76_reg_next(3) <= delayMatch76_reg(2);
  delayMatch76_reg_next(4) <= delayMatch76_reg(3);
  delayMatch76_reg_next(5) <= delayMatch76_reg(4);
  delayMatch76_reg_next(6) <= delayMatch76_reg(5);
  delayMatch76_reg_next(7) <= delayMatch76_reg(6);
  delayMatch76_reg_next(8) <= delayMatch76_reg(7);
  delayMatch76_reg_next(9) <= delayMatch76_reg(8);
  delayMatch76_reg_next(10) <= delayMatch76_reg(9);
  delayMatch76_reg_next(11) <= delayMatch76_reg(10);

  
  switch_compare_1_41 <= '1' WHEN End_Cycle_1 = '1' ELSE
      '0';

  stateControl_73 <= '1';

  delayMatch75_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch75_reg(0) <= '0';
        delayMatch75_reg(1) <= '0';
        delayMatch75_reg(2) <= '0';
        delayMatch75_reg(3) <= '0';
        delayMatch75_reg(4) <= '0';
        delayMatch75_reg(5) <= '0';
        delayMatch75_reg(6) <= '0';
        delayMatch75_reg(7) <= '0';
        delayMatch75_reg(8) <= '0';
        delayMatch75_reg(9) <= '0';
        delayMatch75_reg(10) <= '0';
        delayMatch75_reg(11) <= '0';
      ELSIF enb = '1' THEN
        delayMatch75_reg(0) <= delayMatch75_reg_next(0);
        delayMatch75_reg(1) <= delayMatch75_reg_next(1);
        delayMatch75_reg(2) <= delayMatch75_reg_next(2);
        delayMatch75_reg(3) <= delayMatch75_reg_next(3);
        delayMatch75_reg(4) <= delayMatch75_reg_next(4);
        delayMatch75_reg(5) <= delayMatch75_reg_next(5);
        delayMatch75_reg(6) <= delayMatch75_reg_next(6);
        delayMatch75_reg(7) <= delayMatch75_reg_next(7);
        delayMatch75_reg(8) <= delayMatch75_reg_next(8);
        delayMatch75_reg(9) <= delayMatch75_reg_next(9);
        delayMatch75_reg(10) <= delayMatch75_reg_next(10);
        delayMatch75_reg(11) <= delayMatch75_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch75_process;

  stateControl_74 <= delayMatch75_reg(11);
  delayMatch75_reg_next(0) <= stateControl_73;
  delayMatch75_reg_next(1) <= delayMatch75_reg(0);
  delayMatch75_reg_next(2) <= delayMatch75_reg(1);
  delayMatch75_reg_next(3) <= delayMatch75_reg(2);
  delayMatch75_reg_next(4) <= delayMatch75_reg(3);
  delayMatch75_reg_next(5) <= delayMatch75_reg(4);
  delayMatch75_reg_next(6) <= delayMatch75_reg(5);
  delayMatch75_reg_next(7) <= delayMatch75_reg(6);
  delayMatch75_reg_next(8) <= delayMatch75_reg(7);
  delayMatch75_reg_next(9) <= delayMatch75_reg(8);
  delayMatch75_reg_next(10) <= delayMatch75_reg(9);
  delayMatch75_reg_next(11) <= delayMatch75_reg(10);

  delayMatch74_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch74_reg(0) <= X"00000000";
        delayMatch74_reg(1) <= X"00000000";
        delayMatch74_reg(2) <= X"00000000";
        delayMatch74_reg(3) <= X"00000000";
        delayMatch74_reg(4) <= X"00000000";
        delayMatch74_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch74_reg(0) <= delayMatch74_reg_next(0);
        delayMatch74_reg(1) <= delayMatch74_reg_next(1);
        delayMatch74_reg(2) <= delayMatch74_reg_next(2);
        delayMatch74_reg(3) <= delayMatch74_reg_next(3);
        delayMatch74_reg(4) <= delayMatch74_reg_next(4);
        delayMatch74_reg(5) <= delayMatch74_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch74_process;

  pole_pairs_AXI_1 <= delayMatch74_reg(5);
  delayMatch74_reg_next(0) <= pole_pairs_AXI;
  delayMatch74_reg_next(1) <= delayMatch74_reg(0);
  delayMatch74_reg_next(2) <= delayMatch74_reg(1);
  delayMatch74_reg_next(3) <= delayMatch74_reg(2);
  delayMatch74_reg_next(4) <= delayMatch74_reg(3);
  delayMatch74_reg_next(5) <= delayMatch74_reg(4);

  omega_el_1 <= omega_el;

  
  Switch_on11_out1_1 <= Delay11_out1 WHEN stateControl_74 = '0' ELSE
      Switch_on11_out1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay11_out1 <= Switch_on11_out1_1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  Switch_on11_out1 <= Delay11_out1 WHEN switch_compare_1_41 = '0' ELSE
      omega_el_1;

  
  switch_compare_1_42 <= '1' WHEN enable = '1' ELSE
      '0';

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1 <= Switch_on10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch_on10_out1 <= Delay10_out1 WHEN switch_compare_1_42 = '0' ELSE
      Lq_AXI;

  
  switch_compare_1_43 <= '1' WHEN enable = '1' ELSE
      '0';

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch_on9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch_on9_out1 <= Delay9_out1 WHEN switch_compare_1_43 = '0' ELSE
      Ld_AXI;

  
  switch_compare_1_44 <= '1' WHEN enable = '1' ELSE
      '0';

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch_on8_out1 <= Delay8_out1 WHEN switch_compare_1_44 = '0' ELSE
      psiPM_AXI;

  Prediction_0 <= nfp_out_1_1_1;

  Prediction_1 <= nfp_out_2_1_1;

  Prediction_2 <= nfp_out_3_1_1;

  Prediction_3 <= nfp_out_4_1_1;

  Prediction_4 <= nfp_out_5_1_1;

  Prediction_5 <= nfp_out_6_1_1;

  Prediction_6 <= nfp_out_7_1_1;

  Prediction_7 <= nfp_out_8_1_1;

  Prediction_8 <= nfp_out_9_1_1;

  Prediction_9 <= nfp_out_10_1_1;

  Prediction_10 <= nfp_out_11_1_1;

  Prediction_11 <= nfp_out_12_1_1;

  Prediction_12 <= nfp_out_13_1_1;

  Prediction_13 <= nfp_out_14_1_1;

  Prediction_14 <= nfp_out_15_1_1;

  Prediction_15 <= nfp_out_16_1_1;

  Prediction_16 <= nfp_out_17_1_1;

  Prediction_17 <= nfp_out_18_1_1;

  Prediction_18 <= nfp_out_19_1_1;

  Prediction_19 <= nfp_out_20_1_1;

  Prediction_20 <= nfp_out_21_1_1;

  Prediction_21 <= nfp_out_22_1_1;

  Prediction_22 <= nfp_out_23_1_1;

  Prediction_23 <= nfp_out_24_1_1;

  Prediction_24 <= nfp_out_25_1_1;

  Prediction_25 <= nfp_out_26_1_1;

  Prediction_26 <= nfp_out_27_1_1;

  Prediction_27 <= nfp_out_28_1_1;

  Prediction_28 <= nfp_out_29_1_1;

  Prediction_29 <= nfp_out_30_1_1;

  Prediction_30 <= nfp_out_31_1_1;

  Prediction_31 <= nfp_out_32_1_1;

  ce_out <= clk_enable;

END rtl;

