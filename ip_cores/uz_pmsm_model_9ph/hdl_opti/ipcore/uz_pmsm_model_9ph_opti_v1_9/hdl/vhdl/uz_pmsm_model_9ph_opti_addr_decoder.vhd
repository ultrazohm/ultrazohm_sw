-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_addr_decoder.vhd
-- Created: 2022-05-16 09:41:46
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_addr_decoder
-- Source Path: uz_pmsm_model_9ph_opti/uz_pmsm_model_9ph_opti_axi4/uz_pmsm_model_9ph_opti_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_outputs                      :   IN    vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
        read_i_dq_ps                      :   IN    vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_input                       :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
        write_Model_Parameter_reset_integrators :   OUT   std_logic;  -- ufix1
        write_Model_Parameter_simulate_mechanical :   OUT   std_logic;  -- ufix1
        write_Model_Parameter_switch_pspl :   OUT   std_logic;  -- ufix1
        write_Model_Parameter_control_dq_abc :   OUT   std_logic;  -- ufix1
        write_physical_parameters_mu      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_M_R0    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_1_L_d   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_1_L_q   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_R_1     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_1_J     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_polepair :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_psi_pm  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_z1    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_z2    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_x1    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_y1    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_x2    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_y2    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_z3    :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_pmsm_model_9ph_opti_addr_decoder;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_outputs_1_1           : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_outputs               : std_logic;  -- ufix1
  SIGNAL strobe_sel_outputs               : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL strobe_in_outputs                : std_logic;  -- ufix1
  SIGNAL strobe_sw_outputs                : std_logic;  -- ufix1
  SIGNAL strobe_reg_outputs               : std_logic;  -- ufix1
  SIGNAL read_outputs_unsigned            : vector_of_unsigned32(0 TO 4);  -- ufix32 [5]
  SIGNAL sync_reg_outputs                 : vector_of_unsigned32(0 TO 4);  -- ufix32 [5]
  SIGNAL data_slice_outputs_1             : vector_of_unsigned32(0 TO 4);  -- ufix32 [5]
  SIGNAL decode_sel_outputs_1_2           : std_logic;  -- ufix1
  SIGNAL data_slice_outputs_1_0           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_outputs_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_outputs_1_3           : std_logic;  -- ufix1
  SIGNAL data_slice_outputs_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_outputs_1_2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_outputs_1_4           : std_logic;  -- ufix1
  SIGNAL data_slice_outputs_1_2           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_outputs_1_3            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_outputs_1_5           : std_logic;  -- ufix1
  SIGNAL data_slice_outputs_1_3           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_outputs_1_4            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_i_dq_ps_1_1           : std_logic;  -- ufix1
  SIGNAL data_slice_outputs_1_4           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_outputs_1_5            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_i_dq_ps               : std_logic;  -- ufix1
  SIGNAL strobe_sel_i_dq_ps               : std_logic;  -- ufix1
  SIGNAL const_zero_1                     : std_logic;  -- ufix1
  SIGNAL strobe_in_i_dq_ps                : std_logic;  -- ufix1
  SIGNAL strobe_sw_i_dq_ps                : std_logic;  -- ufix1
  SIGNAL strobe_reg_i_dq_ps               : std_logic;  -- ufix1
  SIGNAL read_i_dq_ps_unsigned            : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL sync_reg_i_dq_ps                 : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL data_slice_i_dq_ps_1             : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL decode_sel_i_dq_ps_1_2           : std_logic;  -- ufix1
  SIGNAL data_slice_i_dq_ps_1_0           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i_dq_ps_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_i_dq_ps_1_3           : std_logic;  -- ufix1
  SIGNAL data_slice_i_dq_ps_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i_dq_ps_1_2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_i_dq_ps_1_4           : std_logic;  -- ufix1
  SIGNAL data_slice_i_dq_ps_1_2           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i_dq_ps_1_3            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_i_dq_ps_1_5           : std_logic;  -- ufix1
  SIGNAL data_slice_i_dq_ps_1_3           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i_dq_ps_1_4            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_i_dq_ps_1_6           : std_logic;  -- ufix1
  SIGNAL data_slice_i_dq_ps_1_4           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i_dq_ps_1_5            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_i_dq_ps_1_7           : std_logic;  -- ufix1
  SIGNAL data_slice_i_dq_ps_1_5           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i_dq_ps_1_6            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_i_dq_ps_1_8           : std_logic;  -- ufix1
  SIGNAL data_slice_i_dq_ps_1_6           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i_dq_ps_1_7            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_i_dq_ps_1_9           : std_logic;  -- ufix1
  SIGNAL data_slice_i_dq_ps_1_7           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i_dq_ps_1_8            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_i_dq_ps_1_8           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i_dq_ps_1_9            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_input                 : std_logic;  -- ufix1
  SIGNAL strobe_sel_input                 : std_logic;  -- ufix1
  SIGNAL const_zero_2                     : std_logic;  -- ufix1
  SIGNAL strobe_in_input                  : std_logic;  -- ufix1
  SIGNAL strobe_sw_input                  : std_logic;  -- ufix1
  SIGNAL decode_sel_input_1_1             : std_logic;  -- ufix1
  SIGNAL reg_enb_input_1_1                : std_logic;  -- ufix1
  SIGNAL decode_sel_input_2_1             : std_logic;  -- ufix1
  SIGNAL reg_enb_input_2_1                : std_logic;  -- ufix1
  SIGNAL decode_sel_input_3_1             : std_logic;  -- ufix1
  SIGNAL reg_enb_input_3_1                : std_logic;  -- ufix1
  SIGNAL decode_sel_input_4_1             : std_logic;  -- ufix1
  SIGNAL reg_enb_input_4_1                : std_logic;  -- ufix1
  SIGNAL strobe_reg_input                 : std_logic;  -- ufix1
  SIGNAL data_reg_input_1_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_2_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_3_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_4_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_input                  : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL sync_reg_input_1                 : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL decode_sel_Model_Parameter_reset_integrators_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Model_Parameter_reset_integrators_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Model_Parameter_reset_integrators : std_logic;  -- ufix1
  SIGNAL data_reg_Model_Parameter_reset_integrators_1_1 : std_logic;  -- ufix1
  SIGNAL write_concats_Model_Parameter_reset_integrators_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_Model_Parameter_simulate_mechanical_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Model_Parameter_simulate_mechanical_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Model_Parameter_simulate_mechanical : std_logic;  -- ufix1
  SIGNAL data_reg_Model_Parameter_simulate_mechanical_1_1 : std_logic;  -- ufix1
  SIGNAL write_concats_Model_Parameter_simulate_mechanical_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_Model_Parameter_switch_pspl_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Model_Parameter_switch_pspl_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Model_Parameter_switch_pspl : std_logic;  -- ufix1
  SIGNAL data_reg_Model_Parameter_switch_pspl_1_1 : std_logic;  -- ufix1
  SIGNAL write_concats_Model_Parameter_switch_pspl_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_Model_Parameter_control_dq_abc_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Model_Parameter_control_dq_abc_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Model_Parameter_control_dq_abc : std_logic;  -- ufix1
  SIGNAL data_reg_Model_Parameter_control_dq_abc_1_1 : std_logic;  -- ufix1
  SIGNAL write_concats_Model_Parameter_control_dq_abc_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_physical_parameters_mu_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_mu_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_mu_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_M_R0_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_M_R0_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_M_R0_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_1_L_d_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_1_L_d_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_1_L_d_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_1_L_q_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_1_L_q_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_1_L_q_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_R_1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_R_1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_R_1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_1_J_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_1_J_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_1_J_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_polepair_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_polepair_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_polepair_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_psi_pm_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_psi_pm_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_psi_pm_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_z1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_z1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_z1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_z2_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_z2_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_z2_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_x1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_x1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_x1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_y1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_y1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_y1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_x2_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_x2_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_x2_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_y2_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_y2_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_y2_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_z3_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_z3_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_z3_1_1 : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_outputs_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0080#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  
  decode_sel_outputs <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0088#, 14) ELSE
      '0';

  strobe_sel_outputs <= decode_sel_outputs AND wr_enb;

  const_zero <= '0';

  data_write_unsigned <= unsigned(data_write);

  strobe_in_outputs <= data_write_unsigned(0);

  
  strobe_sw_outputs <= const_zero WHEN strobe_sel_outputs = '0' ELSE
      strobe_in_outputs;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_outputs <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_outputs <= strobe_sw_outputs;
      END IF;
    END IF;
  END PROCESS reg_process;


  outputgen2: FOR k IN 0 TO 4 GENERATE
    read_outputs_unsigned(k) <= unsigned(read_outputs(k));
  END GENERATE;

  reg_outputs_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_outputs(0) <= to_unsigned(0, 32);
        sync_reg_outputs(1) <= to_unsigned(0, 32);
        sync_reg_outputs(2) <= to_unsigned(0, 32);
        sync_reg_outputs(3) <= to_unsigned(0, 32);
        sync_reg_outputs(4) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_outputs = '1' THEN
        sync_reg_outputs(0) <= read_outputs_unsigned(0);
        sync_reg_outputs(1) <= read_outputs_unsigned(1);
        sync_reg_outputs(2) <= read_outputs_unsigned(2);
        sync_reg_outputs(3) <= read_outputs_unsigned(3);
        sync_reg_outputs(4) <= read_outputs_unsigned(4);
      END IF;
    END IF;
  END PROCESS reg_outputs_process;


  data_slice_outputs_1(0) <= sync_reg_outputs(0);
  data_slice_outputs_1(1) <= sync_reg_outputs(1);
  data_slice_outputs_1(2) <= sync_reg_outputs(2);
  data_slice_outputs_1(3) <= sync_reg_outputs(3);
  data_slice_outputs_1(4) <= sync_reg_outputs(4);

  
  decode_sel_outputs_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0081#, 14) ELSE
      '0';

  data_slice_outputs_1_0 <= data_slice_outputs_1(0);

  
  decode_rd_outputs_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_outputs_1_1 = '0' ELSE
      data_slice_outputs_1_0;

  
  decode_sel_outputs_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0082#, 14) ELSE
      '0';

  data_slice_outputs_1_1 <= data_slice_outputs_1(1);

  
  decode_rd_outputs_1_2 <= decode_rd_outputs_1_1 WHEN decode_sel_outputs_1_2 = '0' ELSE
      data_slice_outputs_1_1;

  
  decode_sel_outputs_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0083#, 14) ELSE
      '0';

  data_slice_outputs_1_2 <= data_slice_outputs_1(2);

  
  decode_rd_outputs_1_3 <= decode_rd_outputs_1_2 WHEN decode_sel_outputs_1_3 = '0' ELSE
      data_slice_outputs_1_2;

  
  decode_sel_outputs_1_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0084#, 14) ELSE
      '0';

  data_slice_outputs_1_3 <= data_slice_outputs_1(3);

  
  decode_rd_outputs_1_4 <= decode_rd_outputs_1_3 WHEN decode_sel_outputs_1_4 = '0' ELSE
      data_slice_outputs_1_3;

  
  decode_sel_i_dq_ps_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0100#, 14) ELSE
      '0';

  data_slice_outputs_1_4 <= data_slice_outputs_1(4);

  
  decode_rd_outputs_1_5 <= decode_rd_outputs_1_4 WHEN decode_sel_outputs_1_5 = '0' ELSE
      data_slice_outputs_1_4;

  
  decode_sel_i_dq_ps <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0110#, 14) ELSE
      '0';

  strobe_sel_i_dq_ps <= decode_sel_i_dq_ps AND wr_enb;

  const_zero_1 <= '0';

  strobe_in_i_dq_ps <= data_write_unsigned(0);

  
  strobe_sw_i_dq_ps <= const_zero_1 WHEN strobe_sel_i_dq_ps = '0' ELSE
      strobe_in_i_dq_ps;

  reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_i_dq_ps <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_i_dq_ps <= strobe_sw_i_dq_ps;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  outputgen1: FOR k IN 0 TO 8 GENERATE
    read_i_dq_ps_unsigned(k) <= unsigned(read_i_dq_ps(k));
  END GENERATE;

  reg_i_dq_ps_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_i_dq_ps(0) <= to_unsigned(0, 32);
        sync_reg_i_dq_ps(1) <= to_unsigned(0, 32);
        sync_reg_i_dq_ps(2) <= to_unsigned(0, 32);
        sync_reg_i_dq_ps(3) <= to_unsigned(0, 32);
        sync_reg_i_dq_ps(4) <= to_unsigned(0, 32);
        sync_reg_i_dq_ps(5) <= to_unsigned(0, 32);
        sync_reg_i_dq_ps(6) <= to_unsigned(0, 32);
        sync_reg_i_dq_ps(7) <= to_unsigned(0, 32);
        sync_reg_i_dq_ps(8) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_i_dq_ps = '1' THEN
        sync_reg_i_dq_ps(0) <= read_i_dq_ps_unsigned(0);
        sync_reg_i_dq_ps(1) <= read_i_dq_ps_unsigned(1);
        sync_reg_i_dq_ps(2) <= read_i_dq_ps_unsigned(2);
        sync_reg_i_dq_ps(3) <= read_i_dq_ps_unsigned(3);
        sync_reg_i_dq_ps(4) <= read_i_dq_ps_unsigned(4);
        sync_reg_i_dq_ps(5) <= read_i_dq_ps_unsigned(5);
        sync_reg_i_dq_ps(6) <= read_i_dq_ps_unsigned(6);
        sync_reg_i_dq_ps(7) <= read_i_dq_ps_unsigned(7);
        sync_reg_i_dq_ps(8) <= read_i_dq_ps_unsigned(8);
      END IF;
    END IF;
  END PROCESS reg_i_dq_ps_process;


  data_slice_i_dq_ps_1(0) <= sync_reg_i_dq_ps(0);
  data_slice_i_dq_ps_1(1) <= sync_reg_i_dq_ps(1);
  data_slice_i_dq_ps_1(2) <= sync_reg_i_dq_ps(2);
  data_slice_i_dq_ps_1(3) <= sync_reg_i_dq_ps(3);
  data_slice_i_dq_ps_1(4) <= sync_reg_i_dq_ps(4);
  data_slice_i_dq_ps_1(5) <= sync_reg_i_dq_ps(5);
  data_slice_i_dq_ps_1(6) <= sync_reg_i_dq_ps(6);
  data_slice_i_dq_ps_1(7) <= sync_reg_i_dq_ps(7);
  data_slice_i_dq_ps_1(8) <= sync_reg_i_dq_ps(8);

  
  decode_sel_i_dq_ps_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0101#, 14) ELSE
      '0';

  data_slice_i_dq_ps_1_0 <= data_slice_i_dq_ps_1(0);

  
  decode_rd_i_dq_ps_1_1 <= decode_rd_outputs_1_5 WHEN decode_sel_i_dq_ps_1_1 = '0' ELSE
      data_slice_i_dq_ps_1_0;

  
  decode_sel_i_dq_ps_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0102#, 14) ELSE
      '0';

  data_slice_i_dq_ps_1_1 <= data_slice_i_dq_ps_1(1);

  
  decode_rd_i_dq_ps_1_2 <= decode_rd_i_dq_ps_1_1 WHEN decode_sel_i_dq_ps_1_2 = '0' ELSE
      data_slice_i_dq_ps_1_1;

  
  decode_sel_i_dq_ps_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0103#, 14) ELSE
      '0';

  data_slice_i_dq_ps_1_2 <= data_slice_i_dq_ps_1(2);

  
  decode_rd_i_dq_ps_1_3 <= decode_rd_i_dq_ps_1_2 WHEN decode_sel_i_dq_ps_1_3 = '0' ELSE
      data_slice_i_dq_ps_1_2;

  
  decode_sel_i_dq_ps_1_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0104#, 14) ELSE
      '0';

  data_slice_i_dq_ps_1_3 <= data_slice_i_dq_ps_1(3);

  
  decode_rd_i_dq_ps_1_4 <= decode_rd_i_dq_ps_1_3 WHEN decode_sel_i_dq_ps_1_4 = '0' ELSE
      data_slice_i_dq_ps_1_3;

  
  decode_sel_i_dq_ps_1_6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0105#, 14) ELSE
      '0';

  data_slice_i_dq_ps_1_4 <= data_slice_i_dq_ps_1(4);

  
  decode_rd_i_dq_ps_1_5 <= decode_rd_i_dq_ps_1_4 WHEN decode_sel_i_dq_ps_1_5 = '0' ELSE
      data_slice_i_dq_ps_1_4;

  
  decode_sel_i_dq_ps_1_7 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0106#, 14) ELSE
      '0';

  data_slice_i_dq_ps_1_5 <= data_slice_i_dq_ps_1(5);

  
  decode_rd_i_dq_ps_1_6 <= decode_rd_i_dq_ps_1_5 WHEN decode_sel_i_dq_ps_1_6 = '0' ELSE
      data_slice_i_dq_ps_1_5;

  
  decode_sel_i_dq_ps_1_8 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0107#, 14) ELSE
      '0';

  data_slice_i_dq_ps_1_6 <= data_slice_i_dq_ps_1(6);

  
  decode_rd_i_dq_ps_1_7 <= decode_rd_i_dq_ps_1_6 WHEN decode_sel_i_dq_ps_1_7 = '0' ELSE
      data_slice_i_dq_ps_1_6;

  
  decode_sel_i_dq_ps_1_9 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0108#, 14) ELSE
      '0';

  data_slice_i_dq_ps_1_7 <= data_slice_i_dq_ps_1(7);

  
  decode_rd_i_dq_ps_1_8 <= decode_rd_i_dq_ps_1_7 WHEN decode_sel_i_dq_ps_1_8 = '0' ELSE
      data_slice_i_dq_ps_1_7;

  data_slice_i_dq_ps_1_8 <= data_slice_i_dq_ps_1(8);

  
  decode_rd_i_dq_ps_1_9 <= decode_rd_i_dq_ps_1_8 WHEN decode_sel_i_dq_ps_1_9 = '0' ELSE
      data_slice_i_dq_ps_1_8;

  data_read <= std_logic_vector(decode_rd_i_dq_ps_1_9);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

  
  decode_sel_input <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0064#, 14) ELSE
      '0';

  strobe_sel_input <= decode_sel_input AND wr_enb;

  const_zero_2 <= '0';

  strobe_in_input <= data_write_unsigned(0);

  
  strobe_sw_input <= const_zero_2 WHEN strobe_sel_input = '0' ELSE
      strobe_in_input;

  
  decode_sel_input_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0060#, 14) ELSE
      '0';

  reg_enb_input_1_1 <= decode_sel_input_1_1 AND wr_enb;

  
  decode_sel_input_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0061#, 14) ELSE
      '0';

  reg_enb_input_2_1 <= decode_sel_input_2_1 AND wr_enb;

  
  decode_sel_input_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0062#, 14) ELSE
      '0';

  reg_enb_input_3_1 <= decode_sel_input_3_1 AND wr_enb;

  
  decode_sel_input_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0063#, 14) ELSE
      '0';

  reg_enb_input_4_1 <= decode_sel_input_4_1 AND wr_enb;

  reg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_input <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_input <= strobe_sw_input;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  reg_input_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_1_1 = '1' THEN
        data_reg_input_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_1_1_process;


  reg_input_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_2_1 = '1' THEN
        data_reg_input_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_2_1_process;


  reg_input_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_3_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_3_1 = '1' THEN
        data_reg_input_3_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_3_1_process;


  reg_input_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_4_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_4_1 = '1' THEN
        data_reg_input_4_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_4_1_process;


  write_reg_input(0) <= data_reg_input_1_1;
  write_reg_input(1) <= data_reg_input_2_1;
  write_reg_input(2) <= data_reg_input_3_1;
  write_reg_input(3) <= data_reg_input_4_1;

  sync_reg_input_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_input_1(0) <= to_unsigned(0, 32);
        sync_reg_input_1(1) <= to_unsigned(0, 32);
        sync_reg_input_1(2) <= to_unsigned(0, 32);
        sync_reg_input_1(3) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_input = '1' THEN
        sync_reg_input_1(0) <= write_reg_input(0);
        sync_reg_input_1(1) <= write_reg_input(1);
        sync_reg_input_1(2) <= write_reg_input(2);
        sync_reg_input_1(3) <= write_reg_input(3);
      END IF;
    END IF;
  END PROCESS sync_reg_input_process;


  outputgen: FOR k IN 0 TO 3 GENERATE
    write_input(k) <= std_logic_vector(sync_reg_input_1(k));
  END GENERATE;

  
  decode_sel_Model_Parameter_reset_integrators_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_Model_Parameter_reset_integrators_1_1 <= decode_sel_Model_Parameter_reset_integrators_1_1 AND wr_enb;

  data_in_Model_Parameter_reset_integrators <= data_write_unsigned(0);

  reg_Model_Parameter_reset_integrators_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Model_Parameter_reset_integrators_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_Model_Parameter_reset_integrators_1_1 = '1' THEN
        data_reg_Model_Parameter_reset_integrators_1_1 <= data_in_Model_Parameter_reset_integrators;
      END IF;
    END IF;
  END PROCESS reg_Model_Parameter_reset_integrators_1_1_process;


  write_concats_Model_Parameter_reset_integrators_1 <= data_reg_Model_Parameter_reset_integrators_1_1;

  write_Model_Parameter_reset_integrators <= write_concats_Model_Parameter_reset_integrators_1;

  
  decode_sel_Model_Parameter_simulate_mechanical_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_Model_Parameter_simulate_mechanical_1_1 <= decode_sel_Model_Parameter_simulate_mechanical_1_1 AND wr_enb;

  data_in_Model_Parameter_simulate_mechanical <= data_write_unsigned(0);

  reg_Model_Parameter_simulate_mechanical_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Model_Parameter_simulate_mechanical_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_Model_Parameter_simulate_mechanical_1_1 = '1' THEN
        data_reg_Model_Parameter_simulate_mechanical_1_1 <= data_in_Model_Parameter_simulate_mechanical;
      END IF;
    END IF;
  END PROCESS reg_Model_Parameter_simulate_mechanical_1_1_process;


  write_concats_Model_Parameter_simulate_mechanical_1 <= data_reg_Model_Parameter_simulate_mechanical_1_1;

  write_Model_Parameter_simulate_mechanical <= write_concats_Model_Parameter_simulate_mechanical_1;

  
  decode_sel_Model_Parameter_switch_pspl_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_Model_Parameter_switch_pspl_1_1 <= decode_sel_Model_Parameter_switch_pspl_1_1 AND wr_enb;

  data_in_Model_Parameter_switch_pspl <= data_write_unsigned(0);

  reg_Model_Parameter_switch_pspl_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Model_Parameter_switch_pspl_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_Model_Parameter_switch_pspl_1_1 = '1' THEN
        data_reg_Model_Parameter_switch_pspl_1_1 <= data_in_Model_Parameter_switch_pspl;
      END IF;
    END IF;
  END PROCESS reg_Model_Parameter_switch_pspl_1_1_process;


  write_concats_Model_Parameter_switch_pspl_1 <= data_reg_Model_Parameter_switch_pspl_1_1;

  write_Model_Parameter_switch_pspl <= write_concats_Model_Parameter_switch_pspl_1;

  
  decode_sel_Model_Parameter_control_dq_abc_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_Model_Parameter_control_dq_abc_1_1 <= decode_sel_Model_Parameter_control_dq_abc_1_1 AND wr_enb;

  data_in_Model_Parameter_control_dq_abc <= data_write_unsigned(0);

  reg_Model_Parameter_control_dq_abc_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Model_Parameter_control_dq_abc_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_Model_Parameter_control_dq_abc_1_1 = '1' THEN
        data_reg_Model_Parameter_control_dq_abc_1_1 <= data_in_Model_Parameter_control_dq_abc;
      END IF;
    END IF;
  END PROCESS reg_Model_Parameter_control_dq_abc_1_1_process;


  write_concats_Model_Parameter_control_dq_abc_1 <= data_reg_Model_Parameter_control_dq_abc_1_1;

  write_Model_Parameter_control_dq_abc <= write_concats_Model_Parameter_control_dq_abc_1;

  
  decode_sel_physical_parameters_mu_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_physical_parameters_mu_1_1 <= decode_sel_physical_parameters_mu_1_1 AND wr_enb;

  reg_physical_parameters_mu_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_mu_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_mu_1_1 = '1' THEN
        data_reg_physical_parameters_mu_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_mu_1_1_process;


  write_physical_parameters_mu <= std_logic_vector(data_reg_physical_parameters_mu_1_1);

  
  decode_sel_physical_parameters_M_R0_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_physical_parameters_M_R0_1_1 <= decode_sel_physical_parameters_M_R0_1_1 AND wr_enb;

  reg_physical_parameters_M_R0_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_M_R0_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_M_R0_1_1 = '1' THEN
        data_reg_physical_parameters_M_R0_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_M_R0_1_1_process;


  write_physical_parameters_M_R0 <= std_logic_vector(data_reg_physical_parameters_M_R0_1_1);

  
  decode_sel_physical_parameters_1_L_d_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_physical_parameters_1_L_d_1_1 <= decode_sel_physical_parameters_1_L_d_1_1 AND wr_enb;

  reg_physical_parameters_1_L_d_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_1_L_d_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_1_L_d_1_1 = '1' THEN
        data_reg_physical_parameters_1_L_d_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_1_L_d_1_1_process;


  write_physical_parameters_1_L_d <= std_logic_vector(data_reg_physical_parameters_1_L_d_1_1);

  
  decode_sel_physical_parameters_1_L_q_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_physical_parameters_1_L_q_1_1 <= decode_sel_physical_parameters_1_L_q_1_1 AND wr_enb;

  reg_physical_parameters_1_L_q_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_1_L_q_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_1_L_q_1_1 = '1' THEN
        data_reg_physical_parameters_1_L_q_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_1_L_q_1_1_process;


  write_physical_parameters_1_L_q <= std_logic_vector(data_reg_physical_parameters_1_L_q_1_1);

  
  decode_sel_physical_parameters_R_1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_physical_parameters_R_1_1_1 <= decode_sel_physical_parameters_R_1_1_1 AND wr_enb;

  reg_physical_parameters_R_1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_R_1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_R_1_1_1 = '1' THEN
        data_reg_physical_parameters_R_1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_R_1_1_1_process;


  write_physical_parameters_R_1 <= std_logic_vector(data_reg_physical_parameters_R_1_1_1);

  
  decode_sel_physical_parameters_1_J_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_physical_parameters_1_J_1_1 <= decode_sel_physical_parameters_1_J_1_1 AND wr_enb;

  reg_physical_parameters_1_J_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_1_J_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_1_J_1_1 = '1' THEN
        data_reg_physical_parameters_1_J_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_1_J_1_1_process;


  write_physical_parameters_1_J <= std_logic_vector(data_reg_physical_parameters_1_J_1_1);

  
  decode_sel_physical_parameters_polepair_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_physical_parameters_polepair_1_1 <= decode_sel_physical_parameters_polepair_1_1 AND wr_enb;

  reg_physical_parameters_polepair_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_polepair_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_polepair_1_1 = '1' THEN
        data_reg_physical_parameters_polepair_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_polepair_1_1_process;


  write_physical_parameters_polepair <= std_logic_vector(data_reg_physical_parameters_polepair_1_1);

  
  decode_sel_physical_parameters_psi_pm_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  reg_enb_physical_parameters_psi_pm_1_1 <= decode_sel_physical_parameters_psi_pm_1_1 AND wr_enb;

  reg_physical_parameters_psi_pm_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_psi_pm_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_psi_pm_1_1 = '1' THEN
        data_reg_physical_parameters_psi_pm_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_psi_pm_1_1_process;


  write_physical_parameters_psi_pm <= std_logic_vector(data_reg_physical_parameters_psi_pm_1_1);

  
  decode_sel_physical_parameters_L_z1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_z1_1_1 <= decode_sel_physical_parameters_L_z1_1_1 AND wr_enb;

  reg_physical_parameters_L_z1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_z1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_z1_1_1 = '1' THEN
        data_reg_physical_parameters_L_z1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_z1_1_1_process;


  write_physical_parameters_L_z1 <= std_logic_vector(data_reg_physical_parameters_L_z1_1_1);

  
  decode_sel_physical_parameters_L_z2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_z2_1_1 <= decode_sel_physical_parameters_L_z2_1_1 AND wr_enb;

  reg_physical_parameters_L_z2_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_z2_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_z2_1_1 = '1' THEN
        data_reg_physical_parameters_L_z2_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_z2_1_1_process;


  write_physical_parameters_L_z2 <= std_logic_vector(data_reg_physical_parameters_L_z2_1_1);

  
  decode_sel_physical_parameters_L_x1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_x1_1_1 <= decode_sel_physical_parameters_L_x1_1_1 AND wr_enb;

  reg_physical_parameters_L_x1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_x1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_x1_1_1 = '1' THEN
        data_reg_physical_parameters_L_x1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_x1_1_1_process;


  write_physical_parameters_L_x1 <= std_logic_vector(data_reg_physical_parameters_L_x1_1_1);

  
  decode_sel_physical_parameters_L_y1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_y1_1_1 <= decode_sel_physical_parameters_L_y1_1_1 AND wr_enb;

  reg_physical_parameters_L_y1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_y1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_y1_1_1 = '1' THEN
        data_reg_physical_parameters_L_y1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_y1_1_1_process;


  write_physical_parameters_L_y1 <= std_logic_vector(data_reg_physical_parameters_L_y1_1_1);

  
  decode_sel_physical_parameters_L_x2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_x2_1_1 <= decode_sel_physical_parameters_L_x2_1_1 AND wr_enb;

  reg_physical_parameters_L_x2_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_x2_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_x2_1_1 = '1' THEN
        data_reg_physical_parameters_L_x2_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_x2_1_1_process;


  write_physical_parameters_L_x2 <= std_logic_vector(data_reg_physical_parameters_L_x2_1_1);

  
  decode_sel_physical_parameters_L_y2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0051#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_y2_1_1 <= decode_sel_physical_parameters_L_y2_1_1 AND wr_enb;

  reg_physical_parameters_L_y2_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_y2_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_y2_1_1 = '1' THEN
        data_reg_physical_parameters_L_y2_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_y2_1_1_process;


  write_physical_parameters_L_y2 <= std_logic_vector(data_reg_physical_parameters_L_y2_1_1);

  
  decode_sel_physical_parameters_L_z3_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0052#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_z3_1_1 <= decode_sel_physical_parameters_L_z3_1_1 AND wr_enb;

  reg_physical_parameters_L_z3_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_z3_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_z3_1_1 = '1' THEN
        data_reg_physical_parameters_L_z3_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_z3_1_1_process;


  write_physical_parameters_L_z3 <= std_logic_vector(data_reg_physical_parameters_L_z3_1_1);

END rtl;

