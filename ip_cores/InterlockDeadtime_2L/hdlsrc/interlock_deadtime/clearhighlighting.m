SLStudio.Utils.RemoveHighlighting(get_param('interlock_deadtime', 'handle'));
SLStudio.Utils.RemoveHighlighting(get_param('gm_interlock_deadtime', 'handle'));
annotate_port('gm_interlock_deadtime/interlock_deadtime/DeadtimeModule_instance1', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t6', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t7', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/EnableOutputModule_instance1', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t8', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t14', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t15', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InterlockModule_instance1', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t16', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t19', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t20', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InverseBotSwitchModule_instance1', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t21', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t24', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t25', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/t26', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/DeadtimeModule_instance1/Detect Fall Nonpositive2', 1, 1, '');
annotate_port('interlock_deadtime/interlock_deadtime/DeadtimeModule/Detect Fall Nonpositive2', 1, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/DeadtimeModule_instance1/HDL Counter', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/DeadtimeModule_instance1/Switch', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/DeadtimeModule_instance1/Relational Operator', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/DeadtimeModule_instance1/Logical Operator10', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/EnableOutputModule_instance1/AND', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InterlockModule_instance1/mux', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InterlockModule_instance1/Logical Operator3', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InterlockModule_instance1/Logical Operator2', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InterlockModule_instance1/t', 0, 2, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InterlockModule_instance1/In1_1_wire', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InverseBotSwitchModule_instance1/NOT', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InverseBotSwitchModule_instance1/mux', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InverseBotSwitchModule_instance1/Index Vector', 0, 1, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InverseBotSwitchModule_instance1/t', 0, 2, '');
annotate_port('gm_interlock_deadtime/interlock_deadtime/InverseBotSwitchModule_instance1/gate_delay_out_1_wire', 0, 1, '');
