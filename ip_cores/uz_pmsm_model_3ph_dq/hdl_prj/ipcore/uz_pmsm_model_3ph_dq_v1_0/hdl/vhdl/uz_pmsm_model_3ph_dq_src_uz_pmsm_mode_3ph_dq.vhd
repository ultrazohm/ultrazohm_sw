-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw_pr\ip_cores\uz_pmsm_model_3ph_dq\hdl_prj\hdlsrc\uz_pmsm_model\uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq.vhd
-- Created: 2023-01-09 08:42:08
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 100x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- outputs_0                     ce_out        1e-06
-- outputs_1                     ce_out        1e-06
-- outputs_2                     ce_out        1e-06
-- outputs_3                     ce_out        1e-06
-- outputs_4                     ce_out        1e-06
-- voltage_input_dq_out_axi_fb_0 ce_out        1e-06
-- voltage_input_dq_out_axi_fb_1 ce_out        1e-06
-- currents_dq_out_0             ce_out        1e-06
-- currents_dq_out_1             ce_out        1e-06
-- theta_el_out                  ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq
-- Source Path: uz_pmsm_model/uz_pmsm_mode_3ph_dq
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq_pkg.ALL;

ENTITY uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        reset_integrators                 :   IN    std_logic;
        simulate_mechanical               :   IN    std_logic;
        reciprocal_J                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        mu                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        M_n0                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        reciprocal_L_d                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        reciprocal_L_q                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        R1                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        polepairs                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psi_pm                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_0                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_2                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_3                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        use_axi_input                     :   IN    std_logic;
        voltage_input_dq_0                :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        voltage_input_dq_1                :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        ce_out                            :   OUT   std_logic;
        outputs_0                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_1                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_2                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_3                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_4                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_out_axi_fb_0     :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_out_axi_fb_1     :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_out_0                 :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        currents_dq_out_1                 :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        theta_el_out                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En14
        );
END uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq;


ARCHITECTURE rtl OF uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_100_0                     :   OUT   std_logic;
          enb_1_100_1                     :   OUT   std_logic;
          enb_1_100_91                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_convert_sfix_27_En16_to_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_signum_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_abs_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_sub_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_relop_double_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_relop_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_convert_double_to_fixed_27_En18
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_3ph_dq_src_nfp_convert_double_to_fixed_18_En14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq_tc
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq_tc(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_convert_sfix_27_En16_to_double
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_convert_sfix_27_En16_to_double(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_signum_double
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_signum_double(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_abs_double
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_abs_double(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_mul_double(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_add_double
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_add_double(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_sub_double
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_sub_double(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_convert_double2single
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_convert_double2single(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_relop_double_block
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_relop_double_block(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_relop_double
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_relop_double(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_convert_double_to_fixed_27_En18
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_convert_double_to_fixed_27_En18(rtl);

  FOR ALL : uz_pmsm_model_3ph_dq_src_nfp_convert_double_to_fixed_18_En14
    USE ENTITY work.uz_pmsm_model_3ph_dq_src_nfp_convert_double_to_fixed_18_En14(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_100_1                      : std_logic;
  SIGNAL enb_1_100_91                     : std_logic;
  SIGNAL enb_1_100_0                      : std_logic;
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion7_out1_in_pipe_reg : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion7_out1_in_pipe_reg_next : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion7_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_1              : std_logic;
  SIGNAL reset_integrators_in_pipe_reg    : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL reset_integrators_in_pipe_reg_next : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL reset_integrators_2              : std_logic;
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL use_axi_input_1                  : std_logic;
  SIGNAL voltage_input_dq                 : vector_of_std_logic_vector27(0 TO 1);  -- ufix27 [2]
  SIGNAL voltage_input_dq_2               : vector_of_signed27(0 TO 1);  -- sfix27_En16 [2]
  SIGNAL voltage_input_dq_3               : vector_of_signed27(0 TO 1);  -- sfix27_En16 [2]
  SIGNAL voltage_input_dq_0_1             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL voltage_input_dq_1_1             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Data_Type_Conversion18_in_pipe_out_1 : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Data_Type_Conversion18_in_pipe_1_reg : vector_of_signed27(0 TO 9);  -- sfix27 [10]
  SIGNAL Data_Type_Conversion18_in_pipe_out_2 : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Data_Type_Conversion18_in_pipe_1_reg_1 : vector_of_signed27(0 TO 9);  -- sfix27 [10]
  SIGNAL Data_Type_Conversion18_in_pipe_1_reg_next : vector_of_signed27(0 TO 9);  -- sfix27_En16 [10]
  SIGNAL Data_Type_Conversion18_in_pipe_1_reg_next_1 : vector_of_signed27(0 TO 9);  -- sfix27_En16 [10]
  SIGNAL nfp_out_1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_2_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_in_pipe2_out_1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_in_pipe2_1_reg           : vector_of_std_logic_vector64(0 TO 16);  -- ufix64 [17]
  SIGNAL Switch2_in_pipe2_out_2           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_in_pipe2_1_reg_1         : vector_of_std_logic_vector64(0 TO 16);  -- ufix64 [17]
  SIGNAL Switch2_in_pipe2_1_reg_next      : vector_of_std_logic_vector64(0 TO 16);  -- ufix64 [17]
  SIGNAL Switch2_in_pipe2_1_reg_next_1    : vector_of_std_logic_vector64(0 TO 16);  -- ufix64 [17]
  SIGNAL inputs                           : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL inputs_4                         : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL inputs_0_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL inputs_1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_in_pipe_out_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_in_pipe_1_reg : vector_of_std_logic_vector32(0 TO 9);  -- ufix32 [10]
  SIGNAL Data_Type_Conversion1_in_pipe_out_2 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_in_pipe_1_reg_1 : vector_of_std_logic_vector32(0 TO 9);  -- ufix32 [10]
  SIGNAL Data_Type_Conversion1_in_pipe_1_reg_next : vector_of_std_logic_vector32(0 TO 9);  -- ufix32 [10]
  SIGNAL Data_Type_Conversion1_in_pipe_1_reg_next_1 : vector_of_std_logic_vector32(0 TO 9);  -- ufix32 [10]
  SIGNAL nfp_out_1_1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_2_1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_in_pipe0_out_1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_in_pipe0_1_reg           : vector_of_std_logic_vector64(0 TO 16);  -- ufix64 [17]
  SIGNAL Switch2_in_pipe0_out_2           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_in_pipe0_1_reg_1         : vector_of_std_logic_vector64(0 TO 16);  -- ufix64 [17]
  SIGNAL Switch2_in_pipe0_1_reg_next      : vector_of_std_logic_vector64(0 TO 16);  -- ufix64 [17]
  SIGNAL Switch2_in_pipe0_1_reg_next_1    : vector_of_std_logic_vector64(0 TO 16);  -- ufix64 [17]
  SIGNAL Switch2_in_pipe1_reg             : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL Switch2_in_pipe1_reg_next        : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL use_axi_input_2                  : std_logic;
  SIGNAL Data_Type_Conversion18_out1      : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL Data_Type_Conversion1_out1       : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL Switch2_out1                     : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL Switch2_out1_0                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_out1_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_out_pipe_out_1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_out_pipe_1_reg           : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL Switch2_out_pipe_out_2           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch2_out_pipe_1_reg_1         : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL Switch2_out_pipe_1_reg_next      : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL Switch2_out_pipe_1_reg_next_1    : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL u_d_in_pipe_reg                  : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL u_d_in_pipe_reg_next             : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL u_d                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion6_out1_in_pipe_reg : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion6_out1_in_pipe_reg_next : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion6_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL simulate_mechanical_1            : std_logic;
  SIGNAL simulate_mechanical_2            : std_logic;
  SIGNAL omega_mech                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_3              : std_logic;
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion14_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_3                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL u_q_in_pipe_reg                  : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL u_q_in_pipe_reg_next             : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL u_q                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion8_out1_in_pipe_reg : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion8_out1_in_pipe_reg_next : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion8_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion10_out1_in_pipe_reg : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion10_out1_in_pipe_reg_next : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion10_out1_1    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion13_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL load_torque                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion9_out1_in_pipe_reg : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion9_out1_in_pipe_reg_next : vector_of_std_logic_vector64(0 TO 6);  -- ufix64 [7]
  SIGNAL Data_Type_Conversion9_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sign1_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sign1_out1_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Abs_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Abs_out1_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product12_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum5_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product4_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL pmsm_out4_out_pipe_reg           : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL pmsm_out4_out_pipe_reg_next      : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL pmsm_out4                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_d                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product2_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product7_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product10_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_3                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_op_stage1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered1_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_q_out_pipe_reg                 : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL i_q_out_pipe_reg_next            : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL i_q_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL pmsm_out3_out_pipe_reg           : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL pmsm_out3_out_pipe_reg_next      : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL pmsm_out3                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product3_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_1                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_2                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_3                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_4                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_bypass_reg                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_out1_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product11_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered3_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_3                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_2                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL mechanical_system_out1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_in_pipe_reg                : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL omega_in_pipe_reg_next           : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL omega_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_2                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product8_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_op_stage1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_2                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_4                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_5                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_3                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_4                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_d_out_pipe_reg                 : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL i_d_out_pipe_reg_next            : vector_of_std_logic_vector64(0 TO 9);  -- ufix64 [10]
  SIGNAL I_d_3                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion11_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_in_pipe0_reg                 : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Mux_in_pipe0_reg_next            : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Data_Type_Conversion11_out1_1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I_q_3                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion15_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_in_pipe1_reg                 : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Mux_in_pipe1_reg_next            : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Data_Type_Conversion15_out1_1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_5                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion16_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_in_pipe2_reg                 : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Mux_in_pipe2_reg_next            : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Data_Type_Conversion16_out1_1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_3                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion17_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_in_pipe3_reg                 : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Mux_in_pipe3_reg_next            : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Data_Type_Conversion17_out1_1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_4              : std_logic;
  SIGNAL kconst_4                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_3                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_4                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_5                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Angular_Position                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_6                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered2_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_7                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_5                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion20_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_in_pipe4_reg                 : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Mux_in_pipe4_reg_next            : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Data_Type_Conversion20_out1_1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_out1                         : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL t5_ds_out                        : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Mux_out1_1                       : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Data_Type_Conversion19_out1      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL t4_bypass_reg                    : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL t4_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Data_Type_Conversion19_out1_1    : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL I_d_4                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion3_out1       : vector_of_std_logic_vector27(0 TO 1);  -- ufix27 [2]
  SIGNAL Data_Type_Conversion3_out1_1     : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL t2_bypass_reg                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL t2_bypass_reg_next               : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL Data_Type_Conversion3_out1_2     : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL theta_el                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion2_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL t3_bypass_reg                    : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL Data_Type_Conversion2_out1_1     : signed(17 DOWNTO 0);  -- sfix18_En14

BEGIN
  -- https://de.mathworks.com/help/releases/R2021a/hdlcoder/ug/troubleshoot-generate-implementation-model-from-simscape-pmsm.html?searchHighlight=troubleshoot-generate-implementation-model-from-simscape-pmsm&s_tid=doc_srchtitle

  u_uz_pmsm_mode_3ph_dq_tc : uz_pmsm_model_3ph_dq_src_uz_pmsm_mode_3ph_dq_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_100_0 => enb_1_100_0,
              enb_1_100_1 => enb_1_100_1,
              enb_1_100_91 => enb_1_100_91
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => reciprocal_L_d,  -- single
              nfp_out => Data_Type_Conversion7_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_sfix_27_En16_to_double : uz_pmsm_model_3ph_dq_src_nfp_convert_sfix_27_En16_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Data_Type_Conversion18_in_pipe_out_1),  -- sfix27_En16
              nfp_out => nfp_out_1_1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_sfix_27_En16_to_double_1 : uz_pmsm_model_3ph_dq_src_nfp_convert_sfix_27_En16_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Data_Type_Conversion18_in_pipe_out_2),  -- sfix27_En16
              nfp_out => nfp_out_2_1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_1 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion1_in_pipe_out_1,  -- single
              nfp_out => nfp_out_1_1_1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_2 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion1_in_pipe_out_2,  -- single
              nfp_out => nfp_out_2_1_1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_3 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => R1,  -- single
              nfp_out => Data_Type_Conversion6_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_4 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => inputs_4(2),  -- single
              nfp_out => omega_mech  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_5 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => reciprocal_J,  -- single
              nfp_out => Data_Type_Conversion14_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_6 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => reciprocal_L_q,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_7 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => polepairs,  -- single
              nfp_out => Data_Type_Conversion10_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_8 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => mu,  -- single
              nfp_out => Data_Type_Conversion12_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_9 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => M_n0,  -- single
              nfp_out => Data_Type_Conversion13_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_10 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => inputs_4(3),  -- single
              nfp_out => load_torque  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_single2double_11 : uz_pmsm_model_3ph_dq_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_pm,  -- single
              nfp_out => Data_Type_Conversion9_out1  -- double
              );

  u_nfp_signum_comp : uz_pmsm_model_3ph_dq_src_nfp_signum_double
    PORT MAP( nfp_in => Delay1_out1,  -- double
              nfp_out => Sign1_out1  -- double
              );

  u_nfp_abs_comp : uz_pmsm_model_3ph_dq_src_nfp_abs_double
    PORT MAP( nfp_in => Delay1_out1,  -- double
              nfp_out => Abs_out1  -- double
              );

  u_nfp_mul_comp : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion12_out1,  -- double
              nfp_in2 => Abs_out1_1,  -- double
              nfp_out => Product12_out1  -- double
              );

  u_nfp_add_comp : uz_pmsm_model_3ph_dq_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product12_out1,  -- double
              nfp_in2 => Data_Type_Conversion13_out1,  -- double
              nfp_out => Sum5_out1  -- double
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum5_out1,  -- double
              nfp_in2 => Sign1_out1_1,  -- double
              nfp_out => Product4_out1  -- double
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => i_d,  -- double
              nfp_in2 => pmsm_out4,  -- double
              nfp_out => Product2_out1  -- double
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_q,  -- double
              nfp_in2 => Data_Type_Conversion6_out1_1,  -- double
              nfp_out => Product7_out1  -- double
              );

  u_nfp_mul_comp_4 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product10_out1,  -- double
              nfp_in2 => Delay1_out1_3,  -- double
              nfp_out => Product1_out1  -- double
              );

  u_nfp_sub_comp : uz_pmsm_model_3ph_dq_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => u_q,  -- double
              nfp_in2 => Product1_out1,  -- double
              nfp_out => Sum1_op_stage1  -- double
              );

  u_nfp_sub_comp_1 : uz_pmsm_model_3ph_dq_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum1_op_stage1,  -- double
              nfp_in2 => Product7_out1,  -- double
              nfp_out => Sum1_out1  -- double
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_3,  -- double
              nfp_in2 => Sum1_out1,  -- double
              nfp_out => Gain_out1  -- double
              );

  u_nfp_add_comp_1 : uz_pmsm_model_3ph_dq_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1,  -- double
              nfp_in2 => Delay1_out1_2,  -- double
              nfp_out => Sum3_out1  -- double
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_2,  -- double
              nfp_in2 => Data_Type_Conversion8_out1_1,  -- double
              nfp_out => I_q  -- double
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => pmsm_out3,  -- double
              nfp_in2 => i_q_2,  -- double
              nfp_out => Product3_out1  -- double
              );

  u_nfp_sub_comp_2 : uz_pmsm_model_3ph_dq_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product3_out1,  -- double
              nfp_in2 => Product2_out1,  -- double
              nfp_out => Sum3_out1_1  -- double
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_2,  -- double
              nfp_in2 => Sum3_out1_1,  -- double
              nfp_out => M_Mi  -- double
              );

  u_nfp_mul_comp_9 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_1,  -- double
              nfp_in2 => Data_Type_Conversion10_out1_1,  -- double
              nfp_out => M_Mi_2  -- double
              );

  u_nfp_sub_comp_3 : uz_pmsm_model_3ph_dq_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_4,  -- double
              nfp_in2 => Product4_out1,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_nfp_sub_comp_4 : uz_pmsm_model_3ph_dq_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay_out1_1,  -- double
              nfp_in2 => load_torque,  -- double
              nfp_out => Sum1_out1_1  -- double
              );

  u_nfp_mul_comp_10 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion14_out1,  -- double
              nfp_in2 => Sum1_out1_1,  -- double
              nfp_out => Product11_out1  -- double
              );

  u_nfp_mul_comp_11 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_1,  -- double
              nfp_in2 => Product11_out1,  -- double
              nfp_out => Gain_out1_1  -- double
              );

  u_nfp_add_comp_2 : uz_pmsm_model_3ph_dq_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_1,  -- double
              nfp_in2 => Delay1_out1_1,  -- double
              nfp_out => Sum3_out1_2  -- double
              );

  u_nfp_mul_comp_12 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_2,  -- double
              nfp_in2 => Data_Type_Conversion10_out1_1,  -- double
              nfp_out => Product10_out1  -- double
              );

  u_nfp_mul_comp_13 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product10_out1,  -- double
              nfp_in2 => Delay1_out1_2,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_mul_comp_14 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_d_1,  -- double
              nfp_in2 => Data_Type_Conversion6_out1_1,  -- double
              nfp_out => Product8_out1  -- double
              );

  u_nfp_sub_comp_5 : uz_pmsm_model_3ph_dq_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => u_d,  -- double
              nfp_in2 => Product8_out1,  -- double
              nfp_out => Sum_op_stage1  -- double
              );

  u_nfp_add_comp_3 : uz_pmsm_model_3ph_dq_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_op_stage1,  -- double
              nfp_in2 => Product_out1,  -- double
              nfp_out => Sum_out1_2  -- double
              );

  u_nfp_mul_comp_15 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst,  -- double
              nfp_in2 => Sum_out1_2,  -- double
              nfp_out => Gain_out1_2  -- double
              );

  u_nfp_add_comp_4 : uz_pmsm_model_3ph_dq_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_2,  -- double
              nfp_in2 => Delay1_out1_3,  -- double
              nfp_out => Sum3_out1_3  -- double
              );

  u_nfp_sub_comp_6 : uz_pmsm_model_3ph_dq_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_3,  -- double
              nfp_in2 => Data_Type_Conversion9_out1_1,  -- double
              nfp_out => Sum2_out1  -- double
              );

  u_nfp_mul_comp_16 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion7_out1_1,  -- double
              nfp_in2 => Sum2_out1,  -- double
              nfp_out => I_d_1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double2single : uz_pmsm_model_3ph_dq_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => I_d_3,  -- double
              nfp_out => Data_Type_Conversion11_out1  -- single
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double2single_1 : uz_pmsm_model_3ph_dq_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => I_q_3,  -- double
              nfp_out => Data_Type_Conversion15_out1  -- single
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double2single_2 : uz_pmsm_model_3ph_dq_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => M_Mi_5,  -- double
              nfp_out => Data_Type_Conversion16_out1  -- single
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double2single_3 : uz_pmsm_model_3ph_dq_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => omega_3,  -- double
              nfp_out => Data_Type_Conversion17_out1  -- single
              );

  u_nfp_mul_comp_17 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega,  -- double
              nfp_in2 => Data_Type_Conversion10_out1_1,  -- double
              nfp_out => Product_out1_1  -- double
              );

  u_nfp_mul_comp_18 : uz_pmsm_model_3ph_dq_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_4,  -- double
              nfp_in2 => Product_out1_1,  -- double
              nfp_out => Gain_out1_3  -- double
              );

  u_nfp_add_comp_5 : uz_pmsm_model_3ph_dq_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant_out1,  -- double
              nfp_in2 => Switch_out1,  -- double
              nfp_out => Sum2_out1_1  -- double
              );

  u_nfp_sub_comp_7 : uz_pmsm_model_3ph_dq_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_out1_3,  -- double
              nfp_in2 => Constant_out1,  -- double
              nfp_out => Sum1_out1_2  -- double
              );

  u_nfp_add_comp_6 : uz_pmsm_model_3ph_dq_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_5,  -- double
              nfp_in2 => Gain_out1_3,  -- double
              nfp_out => Sum_out1_3  -- double
              );

  u_nfp_relop_comp : uz_pmsm_model_3ph_dq_src_nfp_relop_double_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_out1_3,  -- double
              nfp_in2 => const,  -- double
              nfp_out1 => Compare_To_Constant_out1
              );

  u_nfp_relop_comp_1 : uz_pmsm_model_3ph_dq_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1,  -- double
              nfp_in2 => const_1,  -- double
              nfp_out1 => Compare_To_Constant1_out1
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double2single_4 : uz_pmsm_model_3ph_dq_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Delay1_out1_4,  -- double
              nfp_out => Data_Type_Conversion20_out1  -- single
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double2single_5 : uz_pmsm_model_3ph_dq_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out_pipe_out_1,  -- double
              nfp_out => Data_Type_Conversion19_out1(0)  -- single
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double2single_6 : uz_pmsm_model_3ph_dq_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out_pipe_out_2,  -- double
              nfp_out => Data_Type_Conversion19_out1(1)  -- single
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double_to_fixed_27_En18 : uz_pmsm_model_3ph_dq_src_nfp_convert_double_to_fixed_27_En18
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => I_d_4,  -- double
              nfp_out => Data_Type_Conversion3_out1(0)  -- sfix27_En18
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double_to_fixed_27_En18_1 : uz_pmsm_model_3ph_dq_src_nfp_convert_double_to_fixed_27_En18
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => i_q_2,  -- double
              nfp_out => Data_Type_Conversion3_out1(1)  -- sfix27_En18
              );

  u_uz_pmsm_model_uz_pmsm_mode_3ph_dq_nfp_convert_double_to_fixed_18_En14 : uz_pmsm_model_3ph_dq_src_nfp_convert_double_to_fixed_18_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => theta_el,  -- double
              nfp_out => Data_Type_Conversion2_out1  -- sfix18_En14
              );

  Data_Type_Conversion7_out1_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion7_out1_in_pipe_reg(0) <= X"0000000000000000";
        Data_Type_Conversion7_out1_in_pipe_reg(1) <= X"0000000000000000";
        Data_Type_Conversion7_out1_in_pipe_reg(2) <= X"0000000000000000";
        Data_Type_Conversion7_out1_in_pipe_reg(3) <= X"0000000000000000";
        Data_Type_Conversion7_out1_in_pipe_reg(4) <= X"0000000000000000";
        Data_Type_Conversion7_out1_in_pipe_reg(5) <= X"0000000000000000";
        Data_Type_Conversion7_out1_in_pipe_reg(6) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion7_out1_in_pipe_reg(0) <= Data_Type_Conversion7_out1_in_pipe_reg_next(0);
        Data_Type_Conversion7_out1_in_pipe_reg(1) <= Data_Type_Conversion7_out1_in_pipe_reg_next(1);
        Data_Type_Conversion7_out1_in_pipe_reg(2) <= Data_Type_Conversion7_out1_in_pipe_reg_next(2);
        Data_Type_Conversion7_out1_in_pipe_reg(3) <= Data_Type_Conversion7_out1_in_pipe_reg_next(3);
        Data_Type_Conversion7_out1_in_pipe_reg(4) <= Data_Type_Conversion7_out1_in_pipe_reg_next(4);
        Data_Type_Conversion7_out1_in_pipe_reg(5) <= Data_Type_Conversion7_out1_in_pipe_reg_next(5);
        Data_Type_Conversion7_out1_in_pipe_reg(6) <= Data_Type_Conversion7_out1_in_pipe_reg_next(6);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion7_out1_in_pipe_process;

  Data_Type_Conversion7_out1_1 <= Data_Type_Conversion7_out1_in_pipe_reg(6);
  Data_Type_Conversion7_out1_in_pipe_reg_next(0) <= Data_Type_Conversion7_out1;
  Data_Type_Conversion7_out1_in_pipe_reg_next(1) <= Data_Type_Conversion7_out1_in_pipe_reg(0);
  Data_Type_Conversion7_out1_in_pipe_reg_next(2) <= Data_Type_Conversion7_out1_in_pipe_reg(1);
  Data_Type_Conversion7_out1_in_pipe_reg_next(3) <= Data_Type_Conversion7_out1_in_pipe_reg(2);
  Data_Type_Conversion7_out1_in_pipe_reg_next(4) <= Data_Type_Conversion7_out1_in_pipe_reg(3);
  Data_Type_Conversion7_out1_in_pipe_reg_next(5) <= Data_Type_Conversion7_out1_in_pipe_reg(4);
  Data_Type_Conversion7_out1_in_pipe_reg_next(6) <= Data_Type_Conversion7_out1_in_pipe_reg(5);

  reset_integrators_1 <= reset_integrators;

  reset_integrators_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_in_pipe_reg(0) <= '0';
        reset_integrators_in_pipe_reg(1) <= '0';
        reset_integrators_in_pipe_reg(2) <= '0';
        reset_integrators_in_pipe_reg(3) <= '0';
        reset_integrators_in_pipe_reg(4) <= '0';
        reset_integrators_in_pipe_reg(5) <= '0';
        reset_integrators_in_pipe_reg(6) <= '0';
        reset_integrators_in_pipe_reg(7) <= '0';
        reset_integrators_in_pipe_reg(8) <= '0';
        reset_integrators_in_pipe_reg(9) <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_in_pipe_reg(0) <= reset_integrators_in_pipe_reg_next(0);
        reset_integrators_in_pipe_reg(1) <= reset_integrators_in_pipe_reg_next(1);
        reset_integrators_in_pipe_reg(2) <= reset_integrators_in_pipe_reg_next(2);
        reset_integrators_in_pipe_reg(3) <= reset_integrators_in_pipe_reg_next(3);
        reset_integrators_in_pipe_reg(4) <= reset_integrators_in_pipe_reg_next(4);
        reset_integrators_in_pipe_reg(5) <= reset_integrators_in_pipe_reg_next(5);
        reset_integrators_in_pipe_reg(6) <= reset_integrators_in_pipe_reg_next(6);
        reset_integrators_in_pipe_reg(7) <= reset_integrators_in_pipe_reg_next(7);
        reset_integrators_in_pipe_reg(8) <= reset_integrators_in_pipe_reg_next(8);
        reset_integrators_in_pipe_reg(9) <= reset_integrators_in_pipe_reg_next(9);
      END IF;
    END IF;
  END PROCESS reset_integrators_in_pipe_process;

  reset_integrators_2 <= reset_integrators_in_pipe_reg(9);
  reset_integrators_in_pipe_reg_next(0) <= reset_integrators_1;
  reset_integrators_in_pipe_reg_next(1) <= reset_integrators_in_pipe_reg(0);
  reset_integrators_in_pipe_reg_next(2) <= reset_integrators_in_pipe_reg(1);
  reset_integrators_in_pipe_reg_next(3) <= reset_integrators_in_pipe_reg(2);
  reset_integrators_in_pipe_reg_next(4) <= reset_integrators_in_pipe_reg(3);
  reset_integrators_in_pipe_reg_next(5) <= reset_integrators_in_pipe_reg(4);
  reset_integrators_in_pipe_reg_next(6) <= reset_integrators_in_pipe_reg(5);
  reset_integrators_in_pipe_reg_next(7) <= reset_integrators_in_pipe_reg(6);
  reset_integrators_in_pipe_reg_next(8) <= reset_integrators_in_pipe_reg(7);
  reset_integrators_in_pipe_reg_next(9) <= reset_integrators_in_pipe_reg(8);

  kconst <= X"3eb0c6f7a0b5ed8d";

  use_axi_input_1 <= use_axi_input;

  voltage_input_dq(0) <= voltage_input_dq_0;
  voltage_input_dq(1) <= voltage_input_dq_1;

  outputgen1: FOR k IN 0 TO 1 GENERATE
    voltage_input_dq_2(k) <= signed(voltage_input_dq(k));
  END GENERATE;

  voltage_input_dq_3 <= voltage_input_dq_2;

  voltage_input_dq_0_1 <= voltage_input_dq_3(0);

  Data_Type_Conversion18_in_pipe_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion18_in_pipe_1_reg(0) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg(1) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg(2) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg(3) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg(4) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg(5) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg(6) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg(7) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg(8) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg(9) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(0) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(1) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(2) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(3) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(4) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(5) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(6) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(7) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(8) <= to_signed(16#0000000#, 27);
        Data_Type_Conversion18_in_pipe_1_reg_1(9) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Data_Type_Conversion18_in_pipe_1_reg(0) <= Data_Type_Conversion18_in_pipe_1_reg_next(0);
        Data_Type_Conversion18_in_pipe_1_reg(1) <= Data_Type_Conversion18_in_pipe_1_reg_next(1);
        Data_Type_Conversion18_in_pipe_1_reg(2) <= Data_Type_Conversion18_in_pipe_1_reg_next(2);
        Data_Type_Conversion18_in_pipe_1_reg(3) <= Data_Type_Conversion18_in_pipe_1_reg_next(3);
        Data_Type_Conversion18_in_pipe_1_reg(4) <= Data_Type_Conversion18_in_pipe_1_reg_next(4);
        Data_Type_Conversion18_in_pipe_1_reg(5) <= Data_Type_Conversion18_in_pipe_1_reg_next(5);
        Data_Type_Conversion18_in_pipe_1_reg(6) <= Data_Type_Conversion18_in_pipe_1_reg_next(6);
        Data_Type_Conversion18_in_pipe_1_reg(7) <= Data_Type_Conversion18_in_pipe_1_reg_next(7);
        Data_Type_Conversion18_in_pipe_1_reg(8) <= Data_Type_Conversion18_in_pipe_1_reg_next(8);
        Data_Type_Conversion18_in_pipe_1_reg(9) <= Data_Type_Conversion18_in_pipe_1_reg_next(9);
        Data_Type_Conversion18_in_pipe_1_reg_1(0) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(0);
        Data_Type_Conversion18_in_pipe_1_reg_1(1) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(1);
        Data_Type_Conversion18_in_pipe_1_reg_1(2) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(2);
        Data_Type_Conversion18_in_pipe_1_reg_1(3) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(3);
        Data_Type_Conversion18_in_pipe_1_reg_1(4) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(4);
        Data_Type_Conversion18_in_pipe_1_reg_1(5) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(5);
        Data_Type_Conversion18_in_pipe_1_reg_1(6) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(6);
        Data_Type_Conversion18_in_pipe_1_reg_1(7) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(7);
        Data_Type_Conversion18_in_pipe_1_reg_1(8) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(8);
        Data_Type_Conversion18_in_pipe_1_reg_1(9) <= Data_Type_Conversion18_in_pipe_1_reg_next_1(9);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion18_in_pipe_1_process;

  Data_Type_Conversion18_in_pipe_1_reg_next(0) <= voltage_input_dq_0_1;
  Data_Type_Conversion18_in_pipe_1_reg_next(1) <= Data_Type_Conversion18_in_pipe_1_reg(0);
  Data_Type_Conversion18_in_pipe_1_reg_next(2) <= Data_Type_Conversion18_in_pipe_1_reg(1);
  Data_Type_Conversion18_in_pipe_1_reg_next(3) <= Data_Type_Conversion18_in_pipe_1_reg(2);
  Data_Type_Conversion18_in_pipe_1_reg_next(4) <= Data_Type_Conversion18_in_pipe_1_reg(3);
  Data_Type_Conversion18_in_pipe_1_reg_next(5) <= Data_Type_Conversion18_in_pipe_1_reg(4);
  Data_Type_Conversion18_in_pipe_1_reg_next(6) <= Data_Type_Conversion18_in_pipe_1_reg(5);
  Data_Type_Conversion18_in_pipe_1_reg_next(7) <= Data_Type_Conversion18_in_pipe_1_reg(6);
  Data_Type_Conversion18_in_pipe_1_reg_next(8) <= Data_Type_Conversion18_in_pipe_1_reg(7);
  Data_Type_Conversion18_in_pipe_1_reg_next(9) <= Data_Type_Conversion18_in_pipe_1_reg(8);
  Data_Type_Conversion18_in_pipe_out_1 <= Data_Type_Conversion18_in_pipe_1_reg(9);
  Data_Type_Conversion18_in_pipe_1_reg_next_1(0) <= voltage_input_dq_1_1;
  Data_Type_Conversion18_in_pipe_1_reg_next_1(1) <= Data_Type_Conversion18_in_pipe_1_reg_1(0);
  Data_Type_Conversion18_in_pipe_1_reg_next_1(2) <= Data_Type_Conversion18_in_pipe_1_reg_1(1);
  Data_Type_Conversion18_in_pipe_1_reg_next_1(3) <= Data_Type_Conversion18_in_pipe_1_reg_1(2);
  Data_Type_Conversion18_in_pipe_1_reg_next_1(4) <= Data_Type_Conversion18_in_pipe_1_reg_1(3);
  Data_Type_Conversion18_in_pipe_1_reg_next_1(5) <= Data_Type_Conversion18_in_pipe_1_reg_1(4);
  Data_Type_Conversion18_in_pipe_1_reg_next_1(6) <= Data_Type_Conversion18_in_pipe_1_reg_1(5);
  Data_Type_Conversion18_in_pipe_1_reg_next_1(7) <= Data_Type_Conversion18_in_pipe_1_reg_1(6);
  Data_Type_Conversion18_in_pipe_1_reg_next_1(8) <= Data_Type_Conversion18_in_pipe_1_reg_1(7);
  Data_Type_Conversion18_in_pipe_1_reg_next_1(9) <= Data_Type_Conversion18_in_pipe_1_reg_1(8);
  Data_Type_Conversion18_in_pipe_out_2 <= Data_Type_Conversion18_in_pipe_1_reg_1(9);

  Switch2_in_pipe2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch2_in_pipe2_1_reg(0) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(1) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(2) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(3) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(4) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(5) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(6) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(7) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(8) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(9) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(10) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(11) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(12) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(13) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(14) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(15) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg(16) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(0) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(1) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(2) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(3) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(4) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(5) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(6) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(7) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(8) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(9) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(10) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(11) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(12) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(13) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(14) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(15) <= X"0000000000000000";
        Switch2_in_pipe2_1_reg_1(16) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Switch2_in_pipe2_1_reg(0) <= Switch2_in_pipe2_1_reg_next(0);
        Switch2_in_pipe2_1_reg(1) <= Switch2_in_pipe2_1_reg_next(1);
        Switch2_in_pipe2_1_reg(2) <= Switch2_in_pipe2_1_reg_next(2);
        Switch2_in_pipe2_1_reg(3) <= Switch2_in_pipe2_1_reg_next(3);
        Switch2_in_pipe2_1_reg(4) <= Switch2_in_pipe2_1_reg_next(4);
        Switch2_in_pipe2_1_reg(5) <= Switch2_in_pipe2_1_reg_next(5);
        Switch2_in_pipe2_1_reg(6) <= Switch2_in_pipe2_1_reg_next(6);
        Switch2_in_pipe2_1_reg(7) <= Switch2_in_pipe2_1_reg_next(7);
        Switch2_in_pipe2_1_reg(8) <= Switch2_in_pipe2_1_reg_next(8);
        Switch2_in_pipe2_1_reg(9) <= Switch2_in_pipe2_1_reg_next(9);
        Switch2_in_pipe2_1_reg(10) <= Switch2_in_pipe2_1_reg_next(10);
        Switch2_in_pipe2_1_reg(11) <= Switch2_in_pipe2_1_reg_next(11);
        Switch2_in_pipe2_1_reg(12) <= Switch2_in_pipe2_1_reg_next(12);
        Switch2_in_pipe2_1_reg(13) <= Switch2_in_pipe2_1_reg_next(13);
        Switch2_in_pipe2_1_reg(14) <= Switch2_in_pipe2_1_reg_next(14);
        Switch2_in_pipe2_1_reg(15) <= Switch2_in_pipe2_1_reg_next(15);
        Switch2_in_pipe2_1_reg(16) <= Switch2_in_pipe2_1_reg_next(16);
        Switch2_in_pipe2_1_reg_1(0) <= Switch2_in_pipe2_1_reg_next_1(0);
        Switch2_in_pipe2_1_reg_1(1) <= Switch2_in_pipe2_1_reg_next_1(1);
        Switch2_in_pipe2_1_reg_1(2) <= Switch2_in_pipe2_1_reg_next_1(2);
        Switch2_in_pipe2_1_reg_1(3) <= Switch2_in_pipe2_1_reg_next_1(3);
        Switch2_in_pipe2_1_reg_1(4) <= Switch2_in_pipe2_1_reg_next_1(4);
        Switch2_in_pipe2_1_reg_1(5) <= Switch2_in_pipe2_1_reg_next_1(5);
        Switch2_in_pipe2_1_reg_1(6) <= Switch2_in_pipe2_1_reg_next_1(6);
        Switch2_in_pipe2_1_reg_1(7) <= Switch2_in_pipe2_1_reg_next_1(7);
        Switch2_in_pipe2_1_reg_1(8) <= Switch2_in_pipe2_1_reg_next_1(8);
        Switch2_in_pipe2_1_reg_1(9) <= Switch2_in_pipe2_1_reg_next_1(9);
        Switch2_in_pipe2_1_reg_1(10) <= Switch2_in_pipe2_1_reg_next_1(10);
        Switch2_in_pipe2_1_reg_1(11) <= Switch2_in_pipe2_1_reg_next_1(11);
        Switch2_in_pipe2_1_reg_1(12) <= Switch2_in_pipe2_1_reg_next_1(12);
        Switch2_in_pipe2_1_reg_1(13) <= Switch2_in_pipe2_1_reg_next_1(13);
        Switch2_in_pipe2_1_reg_1(14) <= Switch2_in_pipe2_1_reg_next_1(14);
        Switch2_in_pipe2_1_reg_1(15) <= Switch2_in_pipe2_1_reg_next_1(15);
        Switch2_in_pipe2_1_reg_1(16) <= Switch2_in_pipe2_1_reg_next_1(16);
      END IF;
    END IF;
  END PROCESS Switch2_in_pipe2_1_process;

  Switch2_in_pipe2_1_reg_next(0) <= nfp_out_1_1;
  Switch2_in_pipe2_1_reg_next(1) <= Switch2_in_pipe2_1_reg(0);
  Switch2_in_pipe2_1_reg_next(2) <= Switch2_in_pipe2_1_reg(1);
  Switch2_in_pipe2_1_reg_next(3) <= Switch2_in_pipe2_1_reg(2);
  Switch2_in_pipe2_1_reg_next(4) <= Switch2_in_pipe2_1_reg(3);
  Switch2_in_pipe2_1_reg_next(5) <= Switch2_in_pipe2_1_reg(4);
  Switch2_in_pipe2_1_reg_next(6) <= Switch2_in_pipe2_1_reg(5);
  Switch2_in_pipe2_1_reg_next(7) <= Switch2_in_pipe2_1_reg(6);
  Switch2_in_pipe2_1_reg_next(8) <= Switch2_in_pipe2_1_reg(7);
  Switch2_in_pipe2_1_reg_next(9) <= Switch2_in_pipe2_1_reg(8);
  Switch2_in_pipe2_1_reg_next(10) <= Switch2_in_pipe2_1_reg(9);
  Switch2_in_pipe2_1_reg_next(11) <= Switch2_in_pipe2_1_reg(10);
  Switch2_in_pipe2_1_reg_next(12) <= Switch2_in_pipe2_1_reg(11);
  Switch2_in_pipe2_1_reg_next(13) <= Switch2_in_pipe2_1_reg(12);
  Switch2_in_pipe2_1_reg_next(14) <= Switch2_in_pipe2_1_reg(13);
  Switch2_in_pipe2_1_reg_next(15) <= Switch2_in_pipe2_1_reg(14);
  Switch2_in_pipe2_1_reg_next(16) <= Switch2_in_pipe2_1_reg(15);
  Switch2_in_pipe2_out_1 <= Switch2_in_pipe2_1_reg(16);
  Switch2_in_pipe2_1_reg_next_1(0) <= nfp_out_2_1;
  Switch2_in_pipe2_1_reg_next_1(1) <= Switch2_in_pipe2_1_reg_1(0);
  Switch2_in_pipe2_1_reg_next_1(2) <= Switch2_in_pipe2_1_reg_1(1);
  Switch2_in_pipe2_1_reg_next_1(3) <= Switch2_in_pipe2_1_reg_1(2);
  Switch2_in_pipe2_1_reg_next_1(4) <= Switch2_in_pipe2_1_reg_1(3);
  Switch2_in_pipe2_1_reg_next_1(5) <= Switch2_in_pipe2_1_reg_1(4);
  Switch2_in_pipe2_1_reg_next_1(6) <= Switch2_in_pipe2_1_reg_1(5);
  Switch2_in_pipe2_1_reg_next_1(7) <= Switch2_in_pipe2_1_reg_1(6);
  Switch2_in_pipe2_1_reg_next_1(8) <= Switch2_in_pipe2_1_reg_1(7);
  Switch2_in_pipe2_1_reg_next_1(9) <= Switch2_in_pipe2_1_reg_1(8);
  Switch2_in_pipe2_1_reg_next_1(10) <= Switch2_in_pipe2_1_reg_1(9);
  Switch2_in_pipe2_1_reg_next_1(11) <= Switch2_in_pipe2_1_reg_1(10);
  Switch2_in_pipe2_1_reg_next_1(12) <= Switch2_in_pipe2_1_reg_1(11);
  Switch2_in_pipe2_1_reg_next_1(13) <= Switch2_in_pipe2_1_reg_1(12);
  Switch2_in_pipe2_1_reg_next_1(14) <= Switch2_in_pipe2_1_reg_1(13);
  Switch2_in_pipe2_1_reg_next_1(15) <= Switch2_in_pipe2_1_reg_1(14);
  Switch2_in_pipe2_1_reg_next_1(16) <= Switch2_in_pipe2_1_reg_1(15);
  Switch2_in_pipe2_out_2 <= Switch2_in_pipe2_1_reg_1(16);

  voltage_input_dq_1_1 <= voltage_input_dq_3(1);

  inputs(0) <= inputs_0;
  inputs(1) <= inputs_1;
  inputs(2) <= inputs_2;
  inputs(3) <= inputs_3;

  inputs_4 <= inputs;

  inputs_0_1 <= inputs_4(0);

  Data_Type_Conversion1_in_pipe_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion1_in_pipe_1_reg(0) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg(1) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg(2) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg(3) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg(4) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg(5) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg(6) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg(7) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg(8) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg(9) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(0) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(1) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(2) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(3) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(4) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(5) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(6) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(7) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(8) <= X"00000000";
        Data_Type_Conversion1_in_pipe_1_reg_1(9) <= X"00000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion1_in_pipe_1_reg(0) <= Data_Type_Conversion1_in_pipe_1_reg_next(0);
        Data_Type_Conversion1_in_pipe_1_reg(1) <= Data_Type_Conversion1_in_pipe_1_reg_next(1);
        Data_Type_Conversion1_in_pipe_1_reg(2) <= Data_Type_Conversion1_in_pipe_1_reg_next(2);
        Data_Type_Conversion1_in_pipe_1_reg(3) <= Data_Type_Conversion1_in_pipe_1_reg_next(3);
        Data_Type_Conversion1_in_pipe_1_reg(4) <= Data_Type_Conversion1_in_pipe_1_reg_next(4);
        Data_Type_Conversion1_in_pipe_1_reg(5) <= Data_Type_Conversion1_in_pipe_1_reg_next(5);
        Data_Type_Conversion1_in_pipe_1_reg(6) <= Data_Type_Conversion1_in_pipe_1_reg_next(6);
        Data_Type_Conversion1_in_pipe_1_reg(7) <= Data_Type_Conversion1_in_pipe_1_reg_next(7);
        Data_Type_Conversion1_in_pipe_1_reg(8) <= Data_Type_Conversion1_in_pipe_1_reg_next(8);
        Data_Type_Conversion1_in_pipe_1_reg(9) <= Data_Type_Conversion1_in_pipe_1_reg_next(9);
        Data_Type_Conversion1_in_pipe_1_reg_1(0) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(0);
        Data_Type_Conversion1_in_pipe_1_reg_1(1) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(1);
        Data_Type_Conversion1_in_pipe_1_reg_1(2) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(2);
        Data_Type_Conversion1_in_pipe_1_reg_1(3) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(3);
        Data_Type_Conversion1_in_pipe_1_reg_1(4) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(4);
        Data_Type_Conversion1_in_pipe_1_reg_1(5) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(5);
        Data_Type_Conversion1_in_pipe_1_reg_1(6) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(6);
        Data_Type_Conversion1_in_pipe_1_reg_1(7) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(7);
        Data_Type_Conversion1_in_pipe_1_reg_1(8) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(8);
        Data_Type_Conversion1_in_pipe_1_reg_1(9) <= Data_Type_Conversion1_in_pipe_1_reg_next_1(9);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion1_in_pipe_1_process;

  Data_Type_Conversion1_in_pipe_1_reg_next(0) <= inputs_0_1;
  Data_Type_Conversion1_in_pipe_1_reg_next(1) <= Data_Type_Conversion1_in_pipe_1_reg(0);
  Data_Type_Conversion1_in_pipe_1_reg_next(2) <= Data_Type_Conversion1_in_pipe_1_reg(1);
  Data_Type_Conversion1_in_pipe_1_reg_next(3) <= Data_Type_Conversion1_in_pipe_1_reg(2);
  Data_Type_Conversion1_in_pipe_1_reg_next(4) <= Data_Type_Conversion1_in_pipe_1_reg(3);
  Data_Type_Conversion1_in_pipe_1_reg_next(5) <= Data_Type_Conversion1_in_pipe_1_reg(4);
  Data_Type_Conversion1_in_pipe_1_reg_next(6) <= Data_Type_Conversion1_in_pipe_1_reg(5);
  Data_Type_Conversion1_in_pipe_1_reg_next(7) <= Data_Type_Conversion1_in_pipe_1_reg(6);
  Data_Type_Conversion1_in_pipe_1_reg_next(8) <= Data_Type_Conversion1_in_pipe_1_reg(7);
  Data_Type_Conversion1_in_pipe_1_reg_next(9) <= Data_Type_Conversion1_in_pipe_1_reg(8);
  Data_Type_Conversion1_in_pipe_out_1 <= Data_Type_Conversion1_in_pipe_1_reg(9);
  Data_Type_Conversion1_in_pipe_1_reg_next_1(0) <= inputs_1_1;
  Data_Type_Conversion1_in_pipe_1_reg_next_1(1) <= Data_Type_Conversion1_in_pipe_1_reg_1(0);
  Data_Type_Conversion1_in_pipe_1_reg_next_1(2) <= Data_Type_Conversion1_in_pipe_1_reg_1(1);
  Data_Type_Conversion1_in_pipe_1_reg_next_1(3) <= Data_Type_Conversion1_in_pipe_1_reg_1(2);
  Data_Type_Conversion1_in_pipe_1_reg_next_1(4) <= Data_Type_Conversion1_in_pipe_1_reg_1(3);
  Data_Type_Conversion1_in_pipe_1_reg_next_1(5) <= Data_Type_Conversion1_in_pipe_1_reg_1(4);
  Data_Type_Conversion1_in_pipe_1_reg_next_1(6) <= Data_Type_Conversion1_in_pipe_1_reg_1(5);
  Data_Type_Conversion1_in_pipe_1_reg_next_1(7) <= Data_Type_Conversion1_in_pipe_1_reg_1(6);
  Data_Type_Conversion1_in_pipe_1_reg_next_1(8) <= Data_Type_Conversion1_in_pipe_1_reg_1(7);
  Data_Type_Conversion1_in_pipe_1_reg_next_1(9) <= Data_Type_Conversion1_in_pipe_1_reg_1(8);
  Data_Type_Conversion1_in_pipe_out_2 <= Data_Type_Conversion1_in_pipe_1_reg_1(9);

  Switch2_in_pipe0_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch2_in_pipe0_1_reg(0) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(1) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(2) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(3) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(4) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(5) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(6) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(7) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(8) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(9) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(10) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(11) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(12) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(13) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(14) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(15) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg(16) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(0) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(1) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(2) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(3) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(4) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(5) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(6) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(7) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(8) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(9) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(10) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(11) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(12) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(13) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(14) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(15) <= X"0000000000000000";
        Switch2_in_pipe0_1_reg_1(16) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Switch2_in_pipe0_1_reg(0) <= Switch2_in_pipe0_1_reg_next(0);
        Switch2_in_pipe0_1_reg(1) <= Switch2_in_pipe0_1_reg_next(1);
        Switch2_in_pipe0_1_reg(2) <= Switch2_in_pipe0_1_reg_next(2);
        Switch2_in_pipe0_1_reg(3) <= Switch2_in_pipe0_1_reg_next(3);
        Switch2_in_pipe0_1_reg(4) <= Switch2_in_pipe0_1_reg_next(4);
        Switch2_in_pipe0_1_reg(5) <= Switch2_in_pipe0_1_reg_next(5);
        Switch2_in_pipe0_1_reg(6) <= Switch2_in_pipe0_1_reg_next(6);
        Switch2_in_pipe0_1_reg(7) <= Switch2_in_pipe0_1_reg_next(7);
        Switch2_in_pipe0_1_reg(8) <= Switch2_in_pipe0_1_reg_next(8);
        Switch2_in_pipe0_1_reg(9) <= Switch2_in_pipe0_1_reg_next(9);
        Switch2_in_pipe0_1_reg(10) <= Switch2_in_pipe0_1_reg_next(10);
        Switch2_in_pipe0_1_reg(11) <= Switch2_in_pipe0_1_reg_next(11);
        Switch2_in_pipe0_1_reg(12) <= Switch2_in_pipe0_1_reg_next(12);
        Switch2_in_pipe0_1_reg(13) <= Switch2_in_pipe0_1_reg_next(13);
        Switch2_in_pipe0_1_reg(14) <= Switch2_in_pipe0_1_reg_next(14);
        Switch2_in_pipe0_1_reg(15) <= Switch2_in_pipe0_1_reg_next(15);
        Switch2_in_pipe0_1_reg(16) <= Switch2_in_pipe0_1_reg_next(16);
        Switch2_in_pipe0_1_reg_1(0) <= Switch2_in_pipe0_1_reg_next_1(0);
        Switch2_in_pipe0_1_reg_1(1) <= Switch2_in_pipe0_1_reg_next_1(1);
        Switch2_in_pipe0_1_reg_1(2) <= Switch2_in_pipe0_1_reg_next_1(2);
        Switch2_in_pipe0_1_reg_1(3) <= Switch2_in_pipe0_1_reg_next_1(3);
        Switch2_in_pipe0_1_reg_1(4) <= Switch2_in_pipe0_1_reg_next_1(4);
        Switch2_in_pipe0_1_reg_1(5) <= Switch2_in_pipe0_1_reg_next_1(5);
        Switch2_in_pipe0_1_reg_1(6) <= Switch2_in_pipe0_1_reg_next_1(6);
        Switch2_in_pipe0_1_reg_1(7) <= Switch2_in_pipe0_1_reg_next_1(7);
        Switch2_in_pipe0_1_reg_1(8) <= Switch2_in_pipe0_1_reg_next_1(8);
        Switch2_in_pipe0_1_reg_1(9) <= Switch2_in_pipe0_1_reg_next_1(9);
        Switch2_in_pipe0_1_reg_1(10) <= Switch2_in_pipe0_1_reg_next_1(10);
        Switch2_in_pipe0_1_reg_1(11) <= Switch2_in_pipe0_1_reg_next_1(11);
        Switch2_in_pipe0_1_reg_1(12) <= Switch2_in_pipe0_1_reg_next_1(12);
        Switch2_in_pipe0_1_reg_1(13) <= Switch2_in_pipe0_1_reg_next_1(13);
        Switch2_in_pipe0_1_reg_1(14) <= Switch2_in_pipe0_1_reg_next_1(14);
        Switch2_in_pipe0_1_reg_1(15) <= Switch2_in_pipe0_1_reg_next_1(15);
        Switch2_in_pipe0_1_reg_1(16) <= Switch2_in_pipe0_1_reg_next_1(16);
      END IF;
    END IF;
  END PROCESS Switch2_in_pipe0_1_process;

  Switch2_in_pipe0_1_reg_next(0) <= nfp_out_1_1_1;
  Switch2_in_pipe0_1_reg_next(1) <= Switch2_in_pipe0_1_reg(0);
  Switch2_in_pipe0_1_reg_next(2) <= Switch2_in_pipe0_1_reg(1);
  Switch2_in_pipe0_1_reg_next(3) <= Switch2_in_pipe0_1_reg(2);
  Switch2_in_pipe0_1_reg_next(4) <= Switch2_in_pipe0_1_reg(3);
  Switch2_in_pipe0_1_reg_next(5) <= Switch2_in_pipe0_1_reg(4);
  Switch2_in_pipe0_1_reg_next(6) <= Switch2_in_pipe0_1_reg(5);
  Switch2_in_pipe0_1_reg_next(7) <= Switch2_in_pipe0_1_reg(6);
  Switch2_in_pipe0_1_reg_next(8) <= Switch2_in_pipe0_1_reg(7);
  Switch2_in_pipe0_1_reg_next(9) <= Switch2_in_pipe0_1_reg(8);
  Switch2_in_pipe0_1_reg_next(10) <= Switch2_in_pipe0_1_reg(9);
  Switch2_in_pipe0_1_reg_next(11) <= Switch2_in_pipe0_1_reg(10);
  Switch2_in_pipe0_1_reg_next(12) <= Switch2_in_pipe0_1_reg(11);
  Switch2_in_pipe0_1_reg_next(13) <= Switch2_in_pipe0_1_reg(12);
  Switch2_in_pipe0_1_reg_next(14) <= Switch2_in_pipe0_1_reg(13);
  Switch2_in_pipe0_1_reg_next(15) <= Switch2_in_pipe0_1_reg(14);
  Switch2_in_pipe0_1_reg_next(16) <= Switch2_in_pipe0_1_reg(15);
  Switch2_in_pipe0_out_1 <= Switch2_in_pipe0_1_reg(16);
  Switch2_in_pipe0_1_reg_next_1(0) <= nfp_out_2_1_1;
  Switch2_in_pipe0_1_reg_next_1(1) <= Switch2_in_pipe0_1_reg_1(0);
  Switch2_in_pipe0_1_reg_next_1(2) <= Switch2_in_pipe0_1_reg_1(1);
  Switch2_in_pipe0_1_reg_next_1(3) <= Switch2_in_pipe0_1_reg_1(2);
  Switch2_in_pipe0_1_reg_next_1(4) <= Switch2_in_pipe0_1_reg_1(3);
  Switch2_in_pipe0_1_reg_next_1(5) <= Switch2_in_pipe0_1_reg_1(4);
  Switch2_in_pipe0_1_reg_next_1(6) <= Switch2_in_pipe0_1_reg_1(5);
  Switch2_in_pipe0_1_reg_next_1(7) <= Switch2_in_pipe0_1_reg_1(6);
  Switch2_in_pipe0_1_reg_next_1(8) <= Switch2_in_pipe0_1_reg_1(7);
  Switch2_in_pipe0_1_reg_next_1(9) <= Switch2_in_pipe0_1_reg_1(8);
  Switch2_in_pipe0_1_reg_next_1(10) <= Switch2_in_pipe0_1_reg_1(9);
  Switch2_in_pipe0_1_reg_next_1(11) <= Switch2_in_pipe0_1_reg_1(10);
  Switch2_in_pipe0_1_reg_next_1(12) <= Switch2_in_pipe0_1_reg_1(11);
  Switch2_in_pipe0_1_reg_next_1(13) <= Switch2_in_pipe0_1_reg_1(12);
  Switch2_in_pipe0_1_reg_next_1(14) <= Switch2_in_pipe0_1_reg_1(13);
  Switch2_in_pipe0_1_reg_next_1(15) <= Switch2_in_pipe0_1_reg_1(14);
  Switch2_in_pipe0_1_reg_next_1(16) <= Switch2_in_pipe0_1_reg_1(15);
  Switch2_in_pipe0_out_2 <= Switch2_in_pipe0_1_reg_1(16);

  inputs_1_1 <= inputs_4(1);

  Switch2_in_pipe1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch2_in_pipe1_reg(0) <= '0';
        Switch2_in_pipe1_reg(1) <= '0';
        Switch2_in_pipe1_reg(2) <= '0';
        Switch2_in_pipe1_reg(3) <= '0';
        Switch2_in_pipe1_reg(4) <= '0';
        Switch2_in_pipe1_reg(5) <= '0';
        Switch2_in_pipe1_reg(6) <= '0';
        Switch2_in_pipe1_reg(7) <= '0';
        Switch2_in_pipe1_reg(8) <= '0';
        Switch2_in_pipe1_reg(9) <= '0';
      ELSIF enb = '1' THEN
        Switch2_in_pipe1_reg(0) <= Switch2_in_pipe1_reg_next(0);
        Switch2_in_pipe1_reg(1) <= Switch2_in_pipe1_reg_next(1);
        Switch2_in_pipe1_reg(2) <= Switch2_in_pipe1_reg_next(2);
        Switch2_in_pipe1_reg(3) <= Switch2_in_pipe1_reg_next(3);
        Switch2_in_pipe1_reg(4) <= Switch2_in_pipe1_reg_next(4);
        Switch2_in_pipe1_reg(5) <= Switch2_in_pipe1_reg_next(5);
        Switch2_in_pipe1_reg(6) <= Switch2_in_pipe1_reg_next(6);
        Switch2_in_pipe1_reg(7) <= Switch2_in_pipe1_reg_next(7);
        Switch2_in_pipe1_reg(8) <= Switch2_in_pipe1_reg_next(8);
        Switch2_in_pipe1_reg(9) <= Switch2_in_pipe1_reg_next(9);
      END IF;
    END IF;
  END PROCESS Switch2_in_pipe1_process;

  use_axi_input_2 <= Switch2_in_pipe1_reg(9);
  Switch2_in_pipe1_reg_next(0) <= use_axi_input_1;
  Switch2_in_pipe1_reg_next(1) <= Switch2_in_pipe1_reg(0);
  Switch2_in_pipe1_reg_next(2) <= Switch2_in_pipe1_reg(1);
  Switch2_in_pipe1_reg_next(3) <= Switch2_in_pipe1_reg(2);
  Switch2_in_pipe1_reg_next(4) <= Switch2_in_pipe1_reg(3);
  Switch2_in_pipe1_reg_next(5) <= Switch2_in_pipe1_reg(4);
  Switch2_in_pipe1_reg_next(6) <= Switch2_in_pipe1_reg(5);
  Switch2_in_pipe1_reg_next(7) <= Switch2_in_pipe1_reg(6);
  Switch2_in_pipe1_reg_next(8) <= Switch2_in_pipe1_reg(7);
  Switch2_in_pipe1_reg_next(9) <= Switch2_in_pipe1_reg(8);

  Data_Type_Conversion18_out1(0) <= Switch2_in_pipe2_out_1;
  Data_Type_Conversion18_out1(1) <= Switch2_in_pipe2_out_2;

  Data_Type_Conversion1_out1(0) <= Switch2_in_pipe0_out_1;
  Data_Type_Conversion1_out1(1) <= Switch2_in_pipe0_out_2;

  
  Switch2_out1(0) <= Data_Type_Conversion18_out1(0) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion1_out1(0);
  
  Switch2_out1(1) <= Data_Type_Conversion18_out1(1) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion1_out1(1);

  Switch2_out1_0 <= Switch2_out1(0);

  Switch2_out_pipe_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch2_out_pipe_1_reg(0) <= X"0000000000000000";
        Switch2_out_pipe_1_reg(1) <= X"0000000000000000";
        Switch2_out_pipe_1_reg(2) <= X"0000000000000000";
        Switch2_out_pipe_1_reg(3) <= X"0000000000000000";
        Switch2_out_pipe_1_reg(4) <= X"0000000000000000";
        Switch2_out_pipe_1_reg(5) <= X"0000000000000000";
        Switch2_out_pipe_1_reg(6) <= X"0000000000000000";
        Switch2_out_pipe_1_reg(7) <= X"0000000000000000";
        Switch2_out_pipe_1_reg(8) <= X"0000000000000000";
        Switch2_out_pipe_1_reg(9) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(0) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(1) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(2) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(3) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(4) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(5) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(6) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(7) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(8) <= X"0000000000000000";
        Switch2_out_pipe_1_reg_1(9) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Switch2_out_pipe_1_reg(0) <= Switch2_out_pipe_1_reg_next(0);
        Switch2_out_pipe_1_reg(1) <= Switch2_out_pipe_1_reg_next(1);
        Switch2_out_pipe_1_reg(2) <= Switch2_out_pipe_1_reg_next(2);
        Switch2_out_pipe_1_reg(3) <= Switch2_out_pipe_1_reg_next(3);
        Switch2_out_pipe_1_reg(4) <= Switch2_out_pipe_1_reg_next(4);
        Switch2_out_pipe_1_reg(5) <= Switch2_out_pipe_1_reg_next(5);
        Switch2_out_pipe_1_reg(6) <= Switch2_out_pipe_1_reg_next(6);
        Switch2_out_pipe_1_reg(7) <= Switch2_out_pipe_1_reg_next(7);
        Switch2_out_pipe_1_reg(8) <= Switch2_out_pipe_1_reg_next(8);
        Switch2_out_pipe_1_reg(9) <= Switch2_out_pipe_1_reg_next(9);
        Switch2_out_pipe_1_reg_1(0) <= Switch2_out_pipe_1_reg_next_1(0);
        Switch2_out_pipe_1_reg_1(1) <= Switch2_out_pipe_1_reg_next_1(1);
        Switch2_out_pipe_1_reg_1(2) <= Switch2_out_pipe_1_reg_next_1(2);
        Switch2_out_pipe_1_reg_1(3) <= Switch2_out_pipe_1_reg_next_1(3);
        Switch2_out_pipe_1_reg_1(4) <= Switch2_out_pipe_1_reg_next_1(4);
        Switch2_out_pipe_1_reg_1(5) <= Switch2_out_pipe_1_reg_next_1(5);
        Switch2_out_pipe_1_reg_1(6) <= Switch2_out_pipe_1_reg_next_1(6);
        Switch2_out_pipe_1_reg_1(7) <= Switch2_out_pipe_1_reg_next_1(7);
        Switch2_out_pipe_1_reg_1(8) <= Switch2_out_pipe_1_reg_next_1(8);
        Switch2_out_pipe_1_reg_1(9) <= Switch2_out_pipe_1_reg_next_1(9);
      END IF;
    END IF;
  END PROCESS Switch2_out_pipe_1_process;

  Switch2_out_pipe_1_reg_next(0) <= Switch2_out1_0;
  Switch2_out_pipe_1_reg_next(1) <= Switch2_out_pipe_1_reg(0);
  Switch2_out_pipe_1_reg_next(2) <= Switch2_out_pipe_1_reg(1);
  Switch2_out_pipe_1_reg_next(3) <= Switch2_out_pipe_1_reg(2);
  Switch2_out_pipe_1_reg_next(4) <= Switch2_out_pipe_1_reg(3);
  Switch2_out_pipe_1_reg_next(5) <= Switch2_out_pipe_1_reg(4);
  Switch2_out_pipe_1_reg_next(6) <= Switch2_out_pipe_1_reg(5);
  Switch2_out_pipe_1_reg_next(7) <= Switch2_out_pipe_1_reg(6);
  Switch2_out_pipe_1_reg_next(8) <= Switch2_out_pipe_1_reg(7);
  Switch2_out_pipe_1_reg_next(9) <= Switch2_out_pipe_1_reg(8);
  Switch2_out_pipe_out_1 <= Switch2_out_pipe_1_reg(9);
  Switch2_out_pipe_1_reg_next_1(0) <= Switch2_out1_1;
  Switch2_out_pipe_1_reg_next_1(1) <= Switch2_out_pipe_1_reg_1(0);
  Switch2_out_pipe_1_reg_next_1(2) <= Switch2_out_pipe_1_reg_1(1);
  Switch2_out_pipe_1_reg_next_1(3) <= Switch2_out_pipe_1_reg_1(2);
  Switch2_out_pipe_1_reg_next_1(4) <= Switch2_out_pipe_1_reg_1(3);
  Switch2_out_pipe_1_reg_next_1(5) <= Switch2_out_pipe_1_reg_1(4);
  Switch2_out_pipe_1_reg_next_1(6) <= Switch2_out_pipe_1_reg_1(5);
  Switch2_out_pipe_1_reg_next_1(7) <= Switch2_out_pipe_1_reg_1(6);
  Switch2_out_pipe_1_reg_next_1(8) <= Switch2_out_pipe_1_reg_1(7);
  Switch2_out_pipe_1_reg_next_1(9) <= Switch2_out_pipe_1_reg_1(8);
  Switch2_out_pipe_out_2 <= Switch2_out_pipe_1_reg_1(9);

  u_d_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        u_d_in_pipe_reg(0) <= X"0000000000000000";
        u_d_in_pipe_reg(1) <= X"0000000000000000";
        u_d_in_pipe_reg(2) <= X"0000000000000000";
        u_d_in_pipe_reg(3) <= X"0000000000000000";
        u_d_in_pipe_reg(4) <= X"0000000000000000";
        u_d_in_pipe_reg(5) <= X"0000000000000000";
        u_d_in_pipe_reg(6) <= X"0000000000000000";
        u_d_in_pipe_reg(7) <= X"0000000000000000";
        u_d_in_pipe_reg(8) <= X"0000000000000000";
        u_d_in_pipe_reg(9) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        u_d_in_pipe_reg(0) <= u_d_in_pipe_reg_next(0);
        u_d_in_pipe_reg(1) <= u_d_in_pipe_reg_next(1);
        u_d_in_pipe_reg(2) <= u_d_in_pipe_reg_next(2);
        u_d_in_pipe_reg(3) <= u_d_in_pipe_reg_next(3);
        u_d_in_pipe_reg(4) <= u_d_in_pipe_reg_next(4);
        u_d_in_pipe_reg(5) <= u_d_in_pipe_reg_next(5);
        u_d_in_pipe_reg(6) <= u_d_in_pipe_reg_next(6);
        u_d_in_pipe_reg(7) <= u_d_in_pipe_reg_next(7);
        u_d_in_pipe_reg(8) <= u_d_in_pipe_reg_next(8);
        u_d_in_pipe_reg(9) <= u_d_in_pipe_reg_next(9);
      END IF;
    END IF;
  END PROCESS u_d_in_pipe_process;

  u_d <= u_d_in_pipe_reg(9);
  u_d_in_pipe_reg_next(0) <= Switch2_out_pipe_out_1;
  u_d_in_pipe_reg_next(1) <= u_d_in_pipe_reg(0);
  u_d_in_pipe_reg_next(2) <= u_d_in_pipe_reg(1);
  u_d_in_pipe_reg_next(3) <= u_d_in_pipe_reg(2);
  u_d_in_pipe_reg_next(4) <= u_d_in_pipe_reg(3);
  u_d_in_pipe_reg_next(5) <= u_d_in_pipe_reg(4);
  u_d_in_pipe_reg_next(6) <= u_d_in_pipe_reg(5);
  u_d_in_pipe_reg_next(7) <= u_d_in_pipe_reg(6);
  u_d_in_pipe_reg_next(8) <= u_d_in_pipe_reg(7);
  u_d_in_pipe_reg_next(9) <= u_d_in_pipe_reg(8);

  Data_Type_Conversion6_out1_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion6_out1_in_pipe_reg(0) <= X"0000000000000000";
        Data_Type_Conversion6_out1_in_pipe_reg(1) <= X"0000000000000000";
        Data_Type_Conversion6_out1_in_pipe_reg(2) <= X"0000000000000000";
        Data_Type_Conversion6_out1_in_pipe_reg(3) <= X"0000000000000000";
        Data_Type_Conversion6_out1_in_pipe_reg(4) <= X"0000000000000000";
        Data_Type_Conversion6_out1_in_pipe_reg(5) <= X"0000000000000000";
        Data_Type_Conversion6_out1_in_pipe_reg(6) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion6_out1_in_pipe_reg(0) <= Data_Type_Conversion6_out1_in_pipe_reg_next(0);
        Data_Type_Conversion6_out1_in_pipe_reg(1) <= Data_Type_Conversion6_out1_in_pipe_reg_next(1);
        Data_Type_Conversion6_out1_in_pipe_reg(2) <= Data_Type_Conversion6_out1_in_pipe_reg_next(2);
        Data_Type_Conversion6_out1_in_pipe_reg(3) <= Data_Type_Conversion6_out1_in_pipe_reg_next(3);
        Data_Type_Conversion6_out1_in_pipe_reg(4) <= Data_Type_Conversion6_out1_in_pipe_reg_next(4);
        Data_Type_Conversion6_out1_in_pipe_reg(5) <= Data_Type_Conversion6_out1_in_pipe_reg_next(5);
        Data_Type_Conversion6_out1_in_pipe_reg(6) <= Data_Type_Conversion6_out1_in_pipe_reg_next(6);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion6_out1_in_pipe_process;

  Data_Type_Conversion6_out1_1 <= Data_Type_Conversion6_out1_in_pipe_reg(6);
  Data_Type_Conversion6_out1_in_pipe_reg_next(0) <= Data_Type_Conversion6_out1;
  Data_Type_Conversion6_out1_in_pipe_reg_next(1) <= Data_Type_Conversion6_out1_in_pipe_reg(0);
  Data_Type_Conversion6_out1_in_pipe_reg_next(2) <= Data_Type_Conversion6_out1_in_pipe_reg(1);
  Data_Type_Conversion6_out1_in_pipe_reg_next(3) <= Data_Type_Conversion6_out1_in_pipe_reg(2);
  Data_Type_Conversion6_out1_in_pipe_reg_next(4) <= Data_Type_Conversion6_out1_in_pipe_reg(3);
  Data_Type_Conversion6_out1_in_pipe_reg_next(5) <= Data_Type_Conversion6_out1_in_pipe_reg(4);
  Data_Type_Conversion6_out1_in_pipe_reg_next(6) <= Data_Type_Conversion6_out1_in_pipe_reg(5);

  simulate_mechanical_1 <= simulate_mechanical;

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        simulate_mechanical_2 <= '0';
      ELSIF enb = '1' THEN
        simulate_mechanical_2 <= simulate_mechanical_1;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_3 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_3 <= reset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  kconst_1 <= X"3eb0c6f7a0b5ed8d";

  kconst_2 <= X"3ff8000000000000";

  kconst_3 <= X"3eb0c6f7a0b5ed8d";

  Switch2_out1_1 <= Switch2_out1(1);

  u_q_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        u_q_in_pipe_reg(0) <= X"0000000000000000";
        u_q_in_pipe_reg(1) <= X"0000000000000000";
        u_q_in_pipe_reg(2) <= X"0000000000000000";
        u_q_in_pipe_reg(3) <= X"0000000000000000";
        u_q_in_pipe_reg(4) <= X"0000000000000000";
        u_q_in_pipe_reg(5) <= X"0000000000000000";
        u_q_in_pipe_reg(6) <= X"0000000000000000";
        u_q_in_pipe_reg(7) <= X"0000000000000000";
        u_q_in_pipe_reg(8) <= X"0000000000000000";
        u_q_in_pipe_reg(9) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        u_q_in_pipe_reg(0) <= u_q_in_pipe_reg_next(0);
        u_q_in_pipe_reg(1) <= u_q_in_pipe_reg_next(1);
        u_q_in_pipe_reg(2) <= u_q_in_pipe_reg_next(2);
        u_q_in_pipe_reg(3) <= u_q_in_pipe_reg_next(3);
        u_q_in_pipe_reg(4) <= u_q_in_pipe_reg_next(4);
        u_q_in_pipe_reg(5) <= u_q_in_pipe_reg_next(5);
        u_q_in_pipe_reg(6) <= u_q_in_pipe_reg_next(6);
        u_q_in_pipe_reg(7) <= u_q_in_pipe_reg_next(7);
        u_q_in_pipe_reg(8) <= u_q_in_pipe_reg_next(8);
        u_q_in_pipe_reg(9) <= u_q_in_pipe_reg_next(9);
      END IF;
    END IF;
  END PROCESS u_q_in_pipe_process;

  u_q <= u_q_in_pipe_reg(9);
  u_q_in_pipe_reg_next(0) <= Switch2_out_pipe_out_2;
  u_q_in_pipe_reg_next(1) <= u_q_in_pipe_reg(0);
  u_q_in_pipe_reg_next(2) <= u_q_in_pipe_reg(1);
  u_q_in_pipe_reg_next(3) <= u_q_in_pipe_reg(2);
  u_q_in_pipe_reg_next(4) <= u_q_in_pipe_reg(3);
  u_q_in_pipe_reg_next(5) <= u_q_in_pipe_reg(4);
  u_q_in_pipe_reg_next(6) <= u_q_in_pipe_reg(5);
  u_q_in_pipe_reg_next(7) <= u_q_in_pipe_reg(6);
  u_q_in_pipe_reg_next(8) <= u_q_in_pipe_reg(7);
  u_q_in_pipe_reg_next(9) <= u_q_in_pipe_reg(8);

  Delay1_iv <= X"0000000000000000";

  Data_Type_Conversion8_out1_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion8_out1_in_pipe_reg(0) <= X"0000000000000000";
        Data_Type_Conversion8_out1_in_pipe_reg(1) <= X"0000000000000000";
        Data_Type_Conversion8_out1_in_pipe_reg(2) <= X"0000000000000000";
        Data_Type_Conversion8_out1_in_pipe_reg(3) <= X"0000000000000000";
        Data_Type_Conversion8_out1_in_pipe_reg(4) <= X"0000000000000000";
        Data_Type_Conversion8_out1_in_pipe_reg(5) <= X"0000000000000000";
        Data_Type_Conversion8_out1_in_pipe_reg(6) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion8_out1_in_pipe_reg(0) <= Data_Type_Conversion8_out1_in_pipe_reg_next(0);
        Data_Type_Conversion8_out1_in_pipe_reg(1) <= Data_Type_Conversion8_out1_in_pipe_reg_next(1);
        Data_Type_Conversion8_out1_in_pipe_reg(2) <= Data_Type_Conversion8_out1_in_pipe_reg_next(2);
        Data_Type_Conversion8_out1_in_pipe_reg(3) <= Data_Type_Conversion8_out1_in_pipe_reg_next(3);
        Data_Type_Conversion8_out1_in_pipe_reg(4) <= Data_Type_Conversion8_out1_in_pipe_reg_next(4);
        Data_Type_Conversion8_out1_in_pipe_reg(5) <= Data_Type_Conversion8_out1_in_pipe_reg_next(5);
        Data_Type_Conversion8_out1_in_pipe_reg(6) <= Data_Type_Conversion8_out1_in_pipe_reg_next(6);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion8_out1_in_pipe_process;

  Data_Type_Conversion8_out1_1 <= Data_Type_Conversion8_out1_in_pipe_reg(6);
  Data_Type_Conversion8_out1_in_pipe_reg_next(0) <= Data_Type_Conversion8_out1;
  Data_Type_Conversion8_out1_in_pipe_reg_next(1) <= Data_Type_Conversion8_out1_in_pipe_reg(0);
  Data_Type_Conversion8_out1_in_pipe_reg_next(2) <= Data_Type_Conversion8_out1_in_pipe_reg(1);
  Data_Type_Conversion8_out1_in_pipe_reg_next(3) <= Data_Type_Conversion8_out1_in_pipe_reg(2);
  Data_Type_Conversion8_out1_in_pipe_reg_next(4) <= Data_Type_Conversion8_out1_in_pipe_reg(3);
  Data_Type_Conversion8_out1_in_pipe_reg_next(5) <= Data_Type_Conversion8_out1_in_pipe_reg(4);
  Data_Type_Conversion8_out1_in_pipe_reg_next(6) <= Data_Type_Conversion8_out1_in_pipe_reg(5);

  Data_Type_Conversion10_out1_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion10_out1_in_pipe_reg(0) <= X"0000000000000000";
        Data_Type_Conversion10_out1_in_pipe_reg(1) <= X"0000000000000000";
        Data_Type_Conversion10_out1_in_pipe_reg(2) <= X"0000000000000000";
        Data_Type_Conversion10_out1_in_pipe_reg(3) <= X"0000000000000000";
        Data_Type_Conversion10_out1_in_pipe_reg(4) <= X"0000000000000000";
        Data_Type_Conversion10_out1_in_pipe_reg(5) <= X"0000000000000000";
        Data_Type_Conversion10_out1_in_pipe_reg(6) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion10_out1_in_pipe_reg(0) <= Data_Type_Conversion10_out1_in_pipe_reg_next(0);
        Data_Type_Conversion10_out1_in_pipe_reg(1) <= Data_Type_Conversion10_out1_in_pipe_reg_next(1);
        Data_Type_Conversion10_out1_in_pipe_reg(2) <= Data_Type_Conversion10_out1_in_pipe_reg_next(2);
        Data_Type_Conversion10_out1_in_pipe_reg(3) <= Data_Type_Conversion10_out1_in_pipe_reg_next(3);
        Data_Type_Conversion10_out1_in_pipe_reg(4) <= Data_Type_Conversion10_out1_in_pipe_reg_next(4);
        Data_Type_Conversion10_out1_in_pipe_reg(5) <= Data_Type_Conversion10_out1_in_pipe_reg_next(5);
        Data_Type_Conversion10_out1_in_pipe_reg(6) <= Data_Type_Conversion10_out1_in_pipe_reg_next(6);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion10_out1_in_pipe_process;

  Data_Type_Conversion10_out1_1 <= Data_Type_Conversion10_out1_in_pipe_reg(6);
  Data_Type_Conversion10_out1_in_pipe_reg_next(0) <= Data_Type_Conversion10_out1;
  Data_Type_Conversion10_out1_in_pipe_reg_next(1) <= Data_Type_Conversion10_out1_in_pipe_reg(0);
  Data_Type_Conversion10_out1_in_pipe_reg_next(2) <= Data_Type_Conversion10_out1_in_pipe_reg(1);
  Data_Type_Conversion10_out1_in_pipe_reg_next(3) <= Data_Type_Conversion10_out1_in_pipe_reg(2);
  Data_Type_Conversion10_out1_in_pipe_reg_next(4) <= Data_Type_Conversion10_out1_in_pipe_reg(3);
  Data_Type_Conversion10_out1_in_pipe_reg_next(5) <= Data_Type_Conversion10_out1_in_pipe_reg(4);
  Data_Type_Conversion10_out1_in_pipe_reg_next(6) <= Data_Type_Conversion10_out1_in_pipe_reg(5);

  Delay1_iv_1 <= X"0000000000000000";

  Delay1_iv_2 <= X"0000000000000000";

  Data_Type_Conversion9_out1_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion9_out1_in_pipe_reg(0) <= X"0000000000000000";
        Data_Type_Conversion9_out1_in_pipe_reg(1) <= X"0000000000000000";
        Data_Type_Conversion9_out1_in_pipe_reg(2) <= X"0000000000000000";
        Data_Type_Conversion9_out1_in_pipe_reg(3) <= X"0000000000000000";
        Data_Type_Conversion9_out1_in_pipe_reg(4) <= X"0000000000000000";
        Data_Type_Conversion9_out1_in_pipe_reg(5) <= X"0000000000000000";
        Data_Type_Conversion9_out1_in_pipe_reg(6) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion9_out1_in_pipe_reg(0) <= Data_Type_Conversion9_out1_in_pipe_reg_next(0);
        Data_Type_Conversion9_out1_in_pipe_reg(1) <= Data_Type_Conversion9_out1_in_pipe_reg_next(1);
        Data_Type_Conversion9_out1_in_pipe_reg(2) <= Data_Type_Conversion9_out1_in_pipe_reg_next(2);
        Data_Type_Conversion9_out1_in_pipe_reg(3) <= Data_Type_Conversion9_out1_in_pipe_reg_next(3);
        Data_Type_Conversion9_out1_in_pipe_reg(4) <= Data_Type_Conversion9_out1_in_pipe_reg_next(4);
        Data_Type_Conversion9_out1_in_pipe_reg(5) <= Data_Type_Conversion9_out1_in_pipe_reg_next(5);
        Data_Type_Conversion9_out1_in_pipe_reg(6) <= Data_Type_Conversion9_out1_in_pipe_reg_next(6);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion9_out1_in_pipe_process;

  Data_Type_Conversion9_out1_1 <= Data_Type_Conversion9_out1_in_pipe_reg(6);
  Data_Type_Conversion9_out1_in_pipe_reg_next(0) <= Data_Type_Conversion9_out1;
  Data_Type_Conversion9_out1_in_pipe_reg_next(1) <= Data_Type_Conversion9_out1_in_pipe_reg(0);
  Data_Type_Conversion9_out1_in_pipe_reg_next(2) <= Data_Type_Conversion9_out1_in_pipe_reg(1);
  Data_Type_Conversion9_out1_in_pipe_reg_next(3) <= Data_Type_Conversion9_out1_in_pipe_reg(2);
  Data_Type_Conversion9_out1_in_pipe_reg_next(4) <= Data_Type_Conversion9_out1_in_pipe_reg(3);
  Data_Type_Conversion9_out1_in_pipe_reg_next(5) <= Data_Type_Conversion9_out1_in_pipe_reg(4);
  Data_Type_Conversion9_out1_in_pipe_reg_next(6) <= Data_Type_Conversion9_out1_in_pipe_reg(5);

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Sign1_out1_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Sign1_out1_1 <= Sign1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Abs_out1_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Abs_out1_1 <= Abs_out1;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  pmsm_out4_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pmsm_out4_out_pipe_reg(0) <= X"0000000000000000";
        pmsm_out4_out_pipe_reg(1) <= X"0000000000000000";
        pmsm_out4_out_pipe_reg(2) <= X"0000000000000000";
        pmsm_out4_out_pipe_reg(3) <= X"0000000000000000";
        pmsm_out4_out_pipe_reg(4) <= X"0000000000000000";
        pmsm_out4_out_pipe_reg(5) <= X"0000000000000000";
        pmsm_out4_out_pipe_reg(6) <= X"0000000000000000";
        pmsm_out4_out_pipe_reg(7) <= X"0000000000000000";
        pmsm_out4_out_pipe_reg(8) <= X"0000000000000000";
        pmsm_out4_out_pipe_reg(9) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        pmsm_out4_out_pipe_reg(0) <= pmsm_out4_out_pipe_reg_next(0);
        pmsm_out4_out_pipe_reg(1) <= pmsm_out4_out_pipe_reg_next(1);
        pmsm_out4_out_pipe_reg(2) <= pmsm_out4_out_pipe_reg_next(2);
        pmsm_out4_out_pipe_reg(3) <= pmsm_out4_out_pipe_reg_next(3);
        pmsm_out4_out_pipe_reg(4) <= pmsm_out4_out_pipe_reg_next(4);
        pmsm_out4_out_pipe_reg(5) <= pmsm_out4_out_pipe_reg_next(5);
        pmsm_out4_out_pipe_reg(6) <= pmsm_out4_out_pipe_reg_next(6);
        pmsm_out4_out_pipe_reg(7) <= pmsm_out4_out_pipe_reg_next(7);
        pmsm_out4_out_pipe_reg(8) <= pmsm_out4_out_pipe_reg_next(8);
        pmsm_out4_out_pipe_reg(9) <= pmsm_out4_out_pipe_reg_next(9);
      END IF;
    END IF;
  END PROCESS pmsm_out4_out_pipe_process;

  pmsm_out4 <= pmsm_out4_out_pipe_reg(9);
  pmsm_out4_out_pipe_reg_next(0) <= Delay1_out1_2;
  pmsm_out4_out_pipe_reg_next(1) <= pmsm_out4_out_pipe_reg(0);
  pmsm_out4_out_pipe_reg_next(2) <= pmsm_out4_out_pipe_reg(1);
  pmsm_out4_out_pipe_reg_next(3) <= pmsm_out4_out_pipe_reg(2);
  pmsm_out4_out_pipe_reg_next(4) <= pmsm_out4_out_pipe_reg(3);
  pmsm_out4_out_pipe_reg_next(5) <= pmsm_out4_out_pipe_reg(4);
  pmsm_out4_out_pipe_reg_next(6) <= pmsm_out4_out_pipe_reg(5);
  pmsm_out4_out_pipe_reg_next(7) <= pmsm_out4_out_pipe_reg(6);
  pmsm_out4_out_pipe_reg_next(8) <= pmsm_out4_out_pipe_reg(7);
  pmsm_out4_out_pipe_reg_next(9) <= pmsm_out4_out_pipe_reg(8);

  
  Delay1_toDel <= Sum3_out1 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv;

  Delay1_lowered1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered1_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered1_bypass_reg <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS Delay1_lowered1_bypass_process;

  
  Delay1_toDel_1 <= Delay1_toDel WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered1_bypass_reg;

  Delay1_delOut <= Delay1_toDel_1;

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_delOut_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_delOut_1 <= Delay1_delOut;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  
  Delay1_out1_2 <= Delay1_delOut_1 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv;

  I_q_1 <= I_q;

  i_q_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_q_out_pipe_reg(0) <= X"0000000000000000";
        i_q_out_pipe_reg(1) <= X"0000000000000000";
        i_q_out_pipe_reg(2) <= X"0000000000000000";
        i_q_out_pipe_reg(3) <= X"0000000000000000";
        i_q_out_pipe_reg(4) <= X"0000000000000000";
        i_q_out_pipe_reg(5) <= X"0000000000000000";
        i_q_out_pipe_reg(6) <= X"0000000000000000";
        i_q_out_pipe_reg(7) <= X"0000000000000000";
        i_q_out_pipe_reg(8) <= X"0000000000000000";
        i_q_out_pipe_reg(9) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        i_q_out_pipe_reg(0) <= i_q_out_pipe_reg_next(0);
        i_q_out_pipe_reg(1) <= i_q_out_pipe_reg_next(1);
        i_q_out_pipe_reg(2) <= i_q_out_pipe_reg_next(2);
        i_q_out_pipe_reg(3) <= i_q_out_pipe_reg_next(3);
        i_q_out_pipe_reg(4) <= i_q_out_pipe_reg_next(4);
        i_q_out_pipe_reg(5) <= i_q_out_pipe_reg_next(5);
        i_q_out_pipe_reg(6) <= i_q_out_pipe_reg_next(6);
        i_q_out_pipe_reg(7) <= i_q_out_pipe_reg_next(7);
        i_q_out_pipe_reg(8) <= i_q_out_pipe_reg_next(8);
        i_q_out_pipe_reg(9) <= i_q_out_pipe_reg_next(9);
      END IF;
    END IF;
  END PROCESS i_q_out_pipe_process;

  i_q_2 <= i_q_out_pipe_reg(9);
  i_q_out_pipe_reg_next(0) <= I_q_1;
  i_q_out_pipe_reg_next(1) <= i_q_out_pipe_reg(0);
  i_q_out_pipe_reg_next(2) <= i_q_out_pipe_reg(1);
  i_q_out_pipe_reg_next(3) <= i_q_out_pipe_reg(2);
  i_q_out_pipe_reg_next(4) <= i_q_out_pipe_reg(3);
  i_q_out_pipe_reg_next(5) <= i_q_out_pipe_reg(4);
  i_q_out_pipe_reg_next(6) <= i_q_out_pipe_reg(5);
  i_q_out_pipe_reg_next(7) <= i_q_out_pipe_reg(6);
  i_q_out_pipe_reg_next(8) <= i_q_out_pipe_reg(7);
  i_q_out_pipe_reg_next(9) <= i_q_out_pipe_reg(8);

  pmsm_out3_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pmsm_out3_out_pipe_reg(0) <= X"0000000000000000";
        pmsm_out3_out_pipe_reg(1) <= X"0000000000000000";
        pmsm_out3_out_pipe_reg(2) <= X"0000000000000000";
        pmsm_out3_out_pipe_reg(3) <= X"0000000000000000";
        pmsm_out3_out_pipe_reg(4) <= X"0000000000000000";
        pmsm_out3_out_pipe_reg(5) <= X"0000000000000000";
        pmsm_out3_out_pipe_reg(6) <= X"0000000000000000";
        pmsm_out3_out_pipe_reg(7) <= X"0000000000000000";
        pmsm_out3_out_pipe_reg(8) <= X"0000000000000000";
        pmsm_out3_out_pipe_reg(9) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        pmsm_out3_out_pipe_reg(0) <= pmsm_out3_out_pipe_reg_next(0);
        pmsm_out3_out_pipe_reg(1) <= pmsm_out3_out_pipe_reg_next(1);
        pmsm_out3_out_pipe_reg(2) <= pmsm_out3_out_pipe_reg_next(2);
        pmsm_out3_out_pipe_reg(3) <= pmsm_out3_out_pipe_reg_next(3);
        pmsm_out3_out_pipe_reg(4) <= pmsm_out3_out_pipe_reg_next(4);
        pmsm_out3_out_pipe_reg(5) <= pmsm_out3_out_pipe_reg_next(5);
        pmsm_out3_out_pipe_reg(6) <= pmsm_out3_out_pipe_reg_next(6);
        pmsm_out3_out_pipe_reg(7) <= pmsm_out3_out_pipe_reg_next(7);
        pmsm_out3_out_pipe_reg(8) <= pmsm_out3_out_pipe_reg_next(8);
        pmsm_out3_out_pipe_reg(9) <= pmsm_out3_out_pipe_reg_next(9);
      END IF;
    END IF;
  END PROCESS pmsm_out3_out_pipe_process;

  pmsm_out3 <= pmsm_out3_out_pipe_reg(9);
  pmsm_out3_out_pipe_reg_next(0) <= Delay1_out1_3;
  pmsm_out3_out_pipe_reg_next(1) <= pmsm_out3_out_pipe_reg(0);
  pmsm_out3_out_pipe_reg_next(2) <= pmsm_out3_out_pipe_reg(1);
  pmsm_out3_out_pipe_reg_next(3) <= pmsm_out3_out_pipe_reg(2);
  pmsm_out3_out_pipe_reg_next(4) <= pmsm_out3_out_pipe_reg(3);
  pmsm_out3_out_pipe_reg_next(5) <= pmsm_out3_out_pipe_reg(4);
  pmsm_out3_out_pipe_reg_next(6) <= pmsm_out3_out_pipe_reg(5);
  pmsm_out3_out_pipe_reg_next(7) <= pmsm_out3_out_pipe_reg(6);
  pmsm_out3_out_pipe_reg_next(8) <= pmsm_out3_out_pipe_reg(7);
  pmsm_out3_out_pipe_reg_next(9) <= pmsm_out3_out_pipe_reg(8);

  M_Mi_1 <= M_Mi;

  M_Mi_3 <= M_Mi_2;

  M_Mi_4 <= M_Mi_3;

  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay_bypass_reg <= Sum_out1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Sum_out1_1 <= Sum_out1 WHEN enb_1_100_1 = '1' ELSE
      Delay_bypass_reg;

  Delay_out1 <= Sum_out1_1;

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay_out1_1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  
  Delay1_toDel_2 <= Sum3_out1_2 WHEN reset_integrators_3 = '0' ELSE
      Delay1_iv_1;

  Delay1_lowered3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered3_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered3_bypass_reg <= Delay1_toDel_2;
      END IF;
    END IF;
  END PROCESS Delay1_lowered3_bypass_process;

  
  Delay1_toDel_3 <= Delay1_toDel_2 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered3_bypass_reg;

  Delay1_delOut_2 <= Delay1_toDel_3;

  
  Delay1_out1 <= Delay1_delOut_2 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv_1;

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mechanical_system_out1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        mechanical_system_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  
  omega <= omega_mech WHEN simulate_mechanical_2 = '0' ELSE
      mechanical_system_out1;

  omega_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        omega_in_pipe_reg(0) <= X"0000000000000000";
        omega_in_pipe_reg(1) <= X"0000000000000000";
        omega_in_pipe_reg(2) <= X"0000000000000000";
        omega_in_pipe_reg(3) <= X"0000000000000000";
        omega_in_pipe_reg(4) <= X"0000000000000000";
        omega_in_pipe_reg(5) <= X"0000000000000000";
        omega_in_pipe_reg(6) <= X"0000000000000000";
        omega_in_pipe_reg(7) <= X"0000000000000000";
        omega_in_pipe_reg(8) <= X"0000000000000000";
        omega_in_pipe_reg(9) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        omega_in_pipe_reg(0) <= omega_in_pipe_reg_next(0);
        omega_in_pipe_reg(1) <= omega_in_pipe_reg_next(1);
        omega_in_pipe_reg(2) <= omega_in_pipe_reg_next(2);
        omega_in_pipe_reg(3) <= omega_in_pipe_reg_next(3);
        omega_in_pipe_reg(4) <= omega_in_pipe_reg_next(4);
        omega_in_pipe_reg(5) <= omega_in_pipe_reg_next(5);
        omega_in_pipe_reg(6) <= omega_in_pipe_reg_next(6);
        omega_in_pipe_reg(7) <= omega_in_pipe_reg_next(7);
        omega_in_pipe_reg(8) <= omega_in_pipe_reg_next(8);
        omega_in_pipe_reg(9) <= omega_in_pipe_reg_next(9);
      END IF;
    END IF;
  END PROCESS omega_in_pipe_process;

  omega_1 <= omega_in_pipe_reg(9);
  omega_in_pipe_reg_next(0) <= omega;
  omega_in_pipe_reg_next(1) <= omega_in_pipe_reg(0);
  omega_in_pipe_reg_next(2) <= omega_in_pipe_reg(1);
  omega_in_pipe_reg_next(3) <= omega_in_pipe_reg(2);
  omega_in_pipe_reg_next(4) <= omega_in_pipe_reg(3);
  omega_in_pipe_reg_next(5) <= omega_in_pipe_reg(4);
  omega_in_pipe_reg_next(6) <= omega_in_pipe_reg(5);
  omega_in_pipe_reg_next(7) <= omega_in_pipe_reg(6);
  omega_in_pipe_reg_next(8) <= omega_in_pipe_reg(7);
  omega_in_pipe_reg_next(9) <= omega_in_pipe_reg(8);

  omega_2 <= omega_1;

  
  Delay1_toDel_4 <= Sum3_out1_3 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_2;

  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel_4;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_5 <= Delay1_toDel_4 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut_3 <= Delay1_toDel_5;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_delOut_4 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_delOut_4 <= Delay1_delOut_3;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  Delay1_out1_3 <= Delay1_delOut_4 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_2;

  I_d_2 <= I_d_1;

  i_d_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_d_out_pipe_reg(0) <= X"0000000000000000";
        i_d_out_pipe_reg(1) <= X"0000000000000000";
        i_d_out_pipe_reg(2) <= X"0000000000000000";
        i_d_out_pipe_reg(3) <= X"0000000000000000";
        i_d_out_pipe_reg(4) <= X"0000000000000000";
        i_d_out_pipe_reg(5) <= X"0000000000000000";
        i_d_out_pipe_reg(6) <= X"0000000000000000";
        i_d_out_pipe_reg(7) <= X"0000000000000000";
        i_d_out_pipe_reg(8) <= X"0000000000000000";
        i_d_out_pipe_reg(9) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        i_d_out_pipe_reg(0) <= i_d_out_pipe_reg_next(0);
        i_d_out_pipe_reg(1) <= i_d_out_pipe_reg_next(1);
        i_d_out_pipe_reg(2) <= i_d_out_pipe_reg_next(2);
        i_d_out_pipe_reg(3) <= i_d_out_pipe_reg_next(3);
        i_d_out_pipe_reg(4) <= i_d_out_pipe_reg_next(4);
        i_d_out_pipe_reg(5) <= i_d_out_pipe_reg_next(5);
        i_d_out_pipe_reg(6) <= i_d_out_pipe_reg_next(6);
        i_d_out_pipe_reg(7) <= i_d_out_pipe_reg_next(7);
        i_d_out_pipe_reg(8) <= i_d_out_pipe_reg_next(8);
        i_d_out_pipe_reg(9) <= i_d_out_pipe_reg_next(9);
      END IF;
    END IF;
  END PROCESS i_d_out_pipe_process;

  i_d <= i_d_out_pipe_reg(9);
  i_d_out_pipe_reg_next(0) <= I_d_2;
  i_d_out_pipe_reg_next(1) <= i_d_out_pipe_reg(0);
  i_d_out_pipe_reg_next(2) <= i_d_out_pipe_reg(1);
  i_d_out_pipe_reg_next(3) <= i_d_out_pipe_reg(2);
  i_d_out_pipe_reg_next(4) <= i_d_out_pipe_reg(3);
  i_d_out_pipe_reg_next(5) <= i_d_out_pipe_reg(4);
  i_d_out_pipe_reg_next(6) <= i_d_out_pipe_reg(5);
  i_d_out_pipe_reg_next(7) <= i_d_out_pipe_reg(6);
  i_d_out_pipe_reg_next(8) <= i_d_out_pipe_reg(7);
  i_d_out_pipe_reg_next(9) <= i_d_out_pipe_reg(8);

  I_d_3 <= i_d;

  Mux_in_pipe0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux_in_pipe0_reg(0) <= X"00000000";
        Mux_in_pipe0_reg(1) <= X"00000000";
        Mux_in_pipe0_reg(2) <= X"00000000";
        Mux_in_pipe0_reg(3) <= X"00000000";
        Mux_in_pipe0_reg(4) <= X"00000000";
        Mux_in_pipe0_reg(5) <= X"00000000";
        Mux_in_pipe0_reg(6) <= X"00000000";
      ELSIF enb = '1' THEN
        Mux_in_pipe0_reg(0) <= Mux_in_pipe0_reg_next(0);
        Mux_in_pipe0_reg(1) <= Mux_in_pipe0_reg_next(1);
        Mux_in_pipe0_reg(2) <= Mux_in_pipe0_reg_next(2);
        Mux_in_pipe0_reg(3) <= Mux_in_pipe0_reg_next(3);
        Mux_in_pipe0_reg(4) <= Mux_in_pipe0_reg_next(4);
        Mux_in_pipe0_reg(5) <= Mux_in_pipe0_reg_next(5);
        Mux_in_pipe0_reg(6) <= Mux_in_pipe0_reg_next(6);
      END IF;
    END IF;
  END PROCESS Mux_in_pipe0_process;

  Data_Type_Conversion11_out1_1 <= Mux_in_pipe0_reg(6);
  Mux_in_pipe0_reg_next(0) <= Data_Type_Conversion11_out1;
  Mux_in_pipe0_reg_next(1) <= Mux_in_pipe0_reg(0);
  Mux_in_pipe0_reg_next(2) <= Mux_in_pipe0_reg(1);
  Mux_in_pipe0_reg_next(3) <= Mux_in_pipe0_reg(2);
  Mux_in_pipe0_reg_next(4) <= Mux_in_pipe0_reg(3);
  Mux_in_pipe0_reg_next(5) <= Mux_in_pipe0_reg(4);
  Mux_in_pipe0_reg_next(6) <= Mux_in_pipe0_reg(5);

  I_q_3 <= i_q_2;

  Mux_in_pipe1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux_in_pipe1_reg(0) <= X"00000000";
        Mux_in_pipe1_reg(1) <= X"00000000";
        Mux_in_pipe1_reg(2) <= X"00000000";
        Mux_in_pipe1_reg(3) <= X"00000000";
        Mux_in_pipe1_reg(4) <= X"00000000";
        Mux_in_pipe1_reg(5) <= X"00000000";
        Mux_in_pipe1_reg(6) <= X"00000000";
      ELSIF enb = '1' THEN
        Mux_in_pipe1_reg(0) <= Mux_in_pipe1_reg_next(0);
        Mux_in_pipe1_reg(1) <= Mux_in_pipe1_reg_next(1);
        Mux_in_pipe1_reg(2) <= Mux_in_pipe1_reg_next(2);
        Mux_in_pipe1_reg(3) <= Mux_in_pipe1_reg_next(3);
        Mux_in_pipe1_reg(4) <= Mux_in_pipe1_reg_next(4);
        Mux_in_pipe1_reg(5) <= Mux_in_pipe1_reg_next(5);
        Mux_in_pipe1_reg(6) <= Mux_in_pipe1_reg_next(6);
      END IF;
    END IF;
  END PROCESS Mux_in_pipe1_process;

  Data_Type_Conversion15_out1_1 <= Mux_in_pipe1_reg(6);
  Mux_in_pipe1_reg_next(0) <= Data_Type_Conversion15_out1;
  Mux_in_pipe1_reg_next(1) <= Mux_in_pipe1_reg(0);
  Mux_in_pipe1_reg_next(2) <= Mux_in_pipe1_reg(1);
  Mux_in_pipe1_reg_next(3) <= Mux_in_pipe1_reg(2);
  Mux_in_pipe1_reg_next(4) <= Mux_in_pipe1_reg(3);
  Mux_in_pipe1_reg_next(5) <= Mux_in_pipe1_reg(4);
  Mux_in_pipe1_reg_next(6) <= Mux_in_pipe1_reg(5);

  M_Mi_5 <= M_Mi_2;

  Mux_in_pipe2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux_in_pipe2_reg(0) <= X"00000000";
        Mux_in_pipe2_reg(1) <= X"00000000";
        Mux_in_pipe2_reg(2) <= X"00000000";
        Mux_in_pipe2_reg(3) <= X"00000000";
        Mux_in_pipe2_reg(4) <= X"00000000";
        Mux_in_pipe2_reg(5) <= X"00000000";
        Mux_in_pipe2_reg(6) <= X"00000000";
      ELSIF enb = '1' THEN
        Mux_in_pipe2_reg(0) <= Mux_in_pipe2_reg_next(0);
        Mux_in_pipe2_reg(1) <= Mux_in_pipe2_reg_next(1);
        Mux_in_pipe2_reg(2) <= Mux_in_pipe2_reg_next(2);
        Mux_in_pipe2_reg(3) <= Mux_in_pipe2_reg_next(3);
        Mux_in_pipe2_reg(4) <= Mux_in_pipe2_reg_next(4);
        Mux_in_pipe2_reg(5) <= Mux_in_pipe2_reg_next(5);
        Mux_in_pipe2_reg(6) <= Mux_in_pipe2_reg_next(6);
      END IF;
    END IF;
  END PROCESS Mux_in_pipe2_process;

  Data_Type_Conversion16_out1_1 <= Mux_in_pipe2_reg(6);
  Mux_in_pipe2_reg_next(0) <= Data_Type_Conversion16_out1;
  Mux_in_pipe2_reg_next(1) <= Mux_in_pipe2_reg(0);
  Mux_in_pipe2_reg_next(2) <= Mux_in_pipe2_reg(1);
  Mux_in_pipe2_reg_next(3) <= Mux_in_pipe2_reg(2);
  Mux_in_pipe2_reg_next(4) <= Mux_in_pipe2_reg(3);
  Mux_in_pipe2_reg_next(5) <= Mux_in_pipe2_reg(4);
  Mux_in_pipe2_reg_next(6) <= Mux_in_pipe2_reg(5);

  omega_3 <= omega;

  Mux_in_pipe3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux_in_pipe3_reg(0) <= X"00000000";
        Mux_in_pipe3_reg(1) <= X"00000000";
        Mux_in_pipe3_reg(2) <= X"00000000";
        Mux_in_pipe3_reg(3) <= X"00000000";
        Mux_in_pipe3_reg(4) <= X"00000000";
        Mux_in_pipe3_reg(5) <= X"00000000";
        Mux_in_pipe3_reg(6) <= X"00000000";
      ELSIF enb = '1' THEN
        Mux_in_pipe3_reg(0) <= Mux_in_pipe3_reg_next(0);
        Mux_in_pipe3_reg(1) <= Mux_in_pipe3_reg_next(1);
        Mux_in_pipe3_reg(2) <= Mux_in_pipe3_reg_next(2);
        Mux_in_pipe3_reg(3) <= Mux_in_pipe3_reg_next(3);
        Mux_in_pipe3_reg(4) <= Mux_in_pipe3_reg_next(4);
        Mux_in_pipe3_reg(5) <= Mux_in_pipe3_reg_next(5);
        Mux_in_pipe3_reg(6) <= Mux_in_pipe3_reg_next(6);
      END IF;
    END IF;
  END PROCESS Mux_in_pipe3_process;

  Data_Type_Conversion17_out1_1 <= Mux_in_pipe3_reg(6);
  Mux_in_pipe3_reg_next(0) <= Data_Type_Conversion17_out1;
  Mux_in_pipe3_reg_next(1) <= Mux_in_pipe3_reg(0);
  Mux_in_pipe3_reg_next(2) <= Mux_in_pipe3_reg(1);
  Mux_in_pipe3_reg_next(3) <= Mux_in_pipe3_reg(2);
  Mux_in_pipe3_reg_next(4) <= Mux_in_pipe3_reg(3);
  Mux_in_pipe3_reg_next(5) <= Mux_in_pipe3_reg(4);
  Mux_in_pipe3_reg_next(6) <= Mux_in_pipe3_reg(5);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_4 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_4 <= reset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  kconst_4 <= X"3eb0c6f7a0b5ed8d";

  const <= X"400921fb60000000";

  Constant_out1 <= X"401921fb54442d18";

  const_1 <= X"c00921fb60000000";

  Delay1_iv_3 <= X"0000000000000000";

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_5 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_5 <= Delay1_out1_4;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  
  Switch_out1 <= Sum_out1_3 WHEN Compare_To_Constant_out1 = '0' ELSE
      Sum1_out1_2;

  
  Angular_Position <= Switch_out1 WHEN Compare_To_Constant1_out1 = '0' ELSE
      Sum2_out1_1;

  
  Delay1_toDel_6 <= Angular_Position WHEN reset_integrators_4 = '0' ELSE
      Delay1_iv_3;

  Delay1_lowered2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered2_bypass_reg <= Delay1_toDel_6;
      END IF;
    END IF;
  END PROCESS Delay1_lowered2_bypass_process;

  
  Delay1_toDel_7 <= Delay1_toDel_6 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered2_bypass_reg;

  Delay1_delOut_5 <= Delay1_toDel_7;

  
  Delay1_out1_4 <= Delay1_delOut_5 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv_3;

  Mux_in_pipe4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux_in_pipe4_reg(0) <= X"00000000";
        Mux_in_pipe4_reg(1) <= X"00000000";
        Mux_in_pipe4_reg(2) <= X"00000000";
        Mux_in_pipe4_reg(3) <= X"00000000";
        Mux_in_pipe4_reg(4) <= X"00000000";
        Mux_in_pipe4_reg(5) <= X"00000000";
        Mux_in_pipe4_reg(6) <= X"00000000";
      ELSIF enb = '1' THEN
        Mux_in_pipe4_reg(0) <= Mux_in_pipe4_reg_next(0);
        Mux_in_pipe4_reg(1) <= Mux_in_pipe4_reg_next(1);
        Mux_in_pipe4_reg(2) <= Mux_in_pipe4_reg_next(2);
        Mux_in_pipe4_reg(3) <= Mux_in_pipe4_reg_next(3);
        Mux_in_pipe4_reg(4) <= Mux_in_pipe4_reg_next(4);
        Mux_in_pipe4_reg(5) <= Mux_in_pipe4_reg_next(5);
        Mux_in_pipe4_reg(6) <= Mux_in_pipe4_reg_next(6);
      END IF;
    END IF;
  END PROCESS Mux_in_pipe4_process;

  Data_Type_Conversion20_out1_1 <= Mux_in_pipe4_reg(6);
  Mux_in_pipe4_reg_next(0) <= Data_Type_Conversion20_out1;
  Mux_in_pipe4_reg_next(1) <= Mux_in_pipe4_reg(0);
  Mux_in_pipe4_reg_next(2) <= Mux_in_pipe4_reg(1);
  Mux_in_pipe4_reg_next(3) <= Mux_in_pipe4_reg(2);
  Mux_in_pipe4_reg_next(4) <= Mux_in_pipe4_reg(3);
  Mux_in_pipe4_reg_next(5) <= Mux_in_pipe4_reg(4);
  Mux_in_pipe4_reg_next(6) <= Mux_in_pipe4_reg(5);

  Mux_out1(0) <= Data_Type_Conversion11_out1_1;
  Mux_out1(1) <= Data_Type_Conversion15_out1_1;
  Mux_out1(2) <= Data_Type_Conversion16_out1_1;
  Mux_out1(3) <= Data_Type_Conversion17_out1_1;
  Mux_out1(4) <= Data_Type_Conversion20_out1_1;

  -- Downsample register
  t5_ds_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t5_ds_out(0) <= X"00000000";
        t5_ds_out(1) <= X"00000000";
        t5_ds_out(2) <= X"00000000";
        t5_ds_out(3) <= X"00000000";
        t5_ds_out(4) <= X"00000000";
      ELSIF enb_1_100_91 = '1' THEN
        t5_ds_out(0) <= Mux_out1(0);
        t5_ds_out(1) <= Mux_out1(1);
        t5_ds_out(2) <= Mux_out1(2);
        t5_ds_out(3) <= Mux_out1(3);
        t5_ds_out(4) <= Mux_out1(4);
      END IF;
    END IF;
  END PROCESS t5_ds_process;


  -- Downsample output register
  t5_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux_out1_1(0) <= X"00000000";
        Mux_out1_1(1) <= X"00000000";
        Mux_out1_1(2) <= X"00000000";
        Mux_out1_1(3) <= X"00000000";
        Mux_out1_1(4) <= X"00000000";
      ELSIF enb_1_100_0 = '1' THEN
        Mux_out1_1(0) <= t5_ds_out(0);
        Mux_out1_1(1) <= t5_ds_out(1);
        Mux_out1_1(2) <= t5_ds_out(2);
        Mux_out1_1(3) <= t5_ds_out(3);
        Mux_out1_1(4) <= t5_ds_out(4);
      END IF;
    END IF;
  END PROCESS t5_output_process;



  t4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t4_bypass_reg(0) <= X"00000000";
        t4_bypass_reg(1) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t4_bypass_reg(0) <= t4_bypass_reg_next(0);
        t4_bypass_reg(1) <= t4_bypass_reg_next(1);
      END IF;
    END IF;
  END PROCESS t4_bypass_process;

  
  Data_Type_Conversion19_out1_1(0) <= Data_Type_Conversion19_out1(0) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(0);
  
  Data_Type_Conversion19_out1_1(1) <= Data_Type_Conversion19_out1(1) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(1);
  t4_bypass_reg_next(0) <= Data_Type_Conversion19_out1(0);
  t4_bypass_reg_next(1) <= Data_Type_Conversion19_out1(1);

  I_d_4 <= i_d;


  outputgen: FOR k IN 0 TO 1 GENERATE
    Data_Type_Conversion3_out1_1(k) <= signed(Data_Type_Conversion3_out1(k));
  END GENERATE;

  t2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t2_bypass_reg(0) <= to_signed(16#0000000#, 27);
        t2_bypass_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        t2_bypass_reg(0) <= t2_bypass_reg_next(0);
        t2_bypass_reg(1) <= t2_bypass_reg_next(1);
      END IF;
    END IF;
  END PROCESS t2_bypass_process;

  
  Data_Type_Conversion3_out1_2(0) <= Data_Type_Conversion3_out1_1(0) WHEN enb_1_100_1 = '1' ELSE
      t2_bypass_reg(0);
  
  Data_Type_Conversion3_out1_2(1) <= Data_Type_Conversion3_out1_1(1) WHEN enb_1_100_1 = '1' ELSE
      t2_bypass_reg(1);
  t2_bypass_reg_next(0) <= Data_Type_Conversion3_out1_1(0);
  t2_bypass_reg_next(1) <= Data_Type_Conversion3_out1_1(1);

  currents_dq_out_0 <= std_logic_vector(Data_Type_Conversion3_out1_2(0));

  currents_dq_out_1 <= std_logic_vector(Data_Type_Conversion3_out1_2(1));

  theta_el <= Delay1_out1_4;

  Data_Type_Conversion2_out1_signed <= signed(Data_Type_Conversion2_out1);

  t3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t3_bypass_reg <= to_signed(16#00000#, 18);
      ELSIF enb_1_100_1 = '1' THEN
        t3_bypass_reg <= Data_Type_Conversion2_out1_signed;
      END IF;
    END IF;
  END PROCESS t3_bypass_process;

  
  Data_Type_Conversion2_out1_1 <= Data_Type_Conversion2_out1_signed WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg;

  theta_el_out <= std_logic_vector(Data_Type_Conversion2_out1_1);

  ce_out <= enb_1_100_1;

  outputs_0 <= Mux_out1_1(0);

  outputs_1 <= Mux_out1_1(1);

  outputs_2 <= Mux_out1_1(2);

  outputs_3 <= Mux_out1_1(3);

  outputs_4 <= Mux_out1_1(4);

  voltage_input_dq_out_axi_fb_0 <= Data_Type_Conversion19_out1_1(0);

  voltage_input_dq_out_axi_fb_1 <= Data_Type_Conversion19_out1_1(1);

END rtl;

