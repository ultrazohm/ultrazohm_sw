-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_VSDinv_6ph_asym is
port (
    in_alpha : IN STD_LOGIC_VECTOR (31 downto 0);
    in_beta : IN STD_LOGIC_VECTOR (31 downto 0);
    out_a1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_b1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_c1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_a2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_b2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_c2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of uz_VSDinv_6ph_asym is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_VSDinv_6ph_asym_uz_VSDinv_6ph_asym,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7eg-ffvf1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=8,HLS_SYN_TPT=9,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5512,HLS_SYN_LUT=5219,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal multiply_1_U0_ap_start : STD_LOGIC;
    signal multiply_1_U0_ap_done : STD_LOGIC;
    signal multiply_1_U0_ap_continue : STD_LOGIC;
    signal multiply_1_U0_ap_idle : STD_LOGIC;
    signal multiply_1_U0_ap_ready : STD_LOGIC;
    signal multiply_1_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_full_n : STD_LOGIC;
    signal multiply_224_U0_ap_start : STD_LOGIC;
    signal multiply_224_U0_ap_done : STD_LOGIC;
    signal multiply_224_U0_ap_continue : STD_LOGIC;
    signal multiply_224_U0_ap_idle : STD_LOGIC;
    signal multiply_224_U0_ap_ready : STD_LOGIC;
    signal multiply_224_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_full_n : STD_LOGIC;
    signal Block_entry4245_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4245_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4245_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4245_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4245_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4245_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_load_loc_channel_full_n : STD_LOGIC;
    signal Block_entry4246_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4246_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4246_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4246_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4246_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4246_proc_U0_out_a1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4246_proc_U0_out_a1_ap_vld : STD_LOGIC;
    signal multiply_3_U0_ap_start : STD_LOGIC;
    signal multiply_3_U0_ap_done : STD_LOGIC;
    signal multiply_3_U0_ap_continue : STD_LOGIC;
    signal multiply_3_U0_ap_idle : STD_LOGIC;
    signal multiply_3_U0_ap_ready : STD_LOGIC;
    signal multiply_3_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_1_full_n : STD_LOGIC;
    signal multiply_425_U0_ap_start : STD_LOGIC;
    signal multiply_425_U0_ap_done : STD_LOGIC;
    signal multiply_425_U0_ap_continue : STD_LOGIC;
    signal multiply_425_U0_ap_idle : STD_LOGIC;
    signal multiply_425_U0_ap_ready : STD_LOGIC;
    signal multiply_425_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_1_full_n : STD_LOGIC;
    signal Block_entry4250_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4250_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4250_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4250_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4250_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4250_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_1_load_loc_channel_full_n : STD_LOGIC;
    signal Block_entry4251_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4251_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4251_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4251_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4251_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4251_proc_U0_out_b1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4251_proc_U0_out_b1_ap_vld : STD_LOGIC;
    signal multiply_5_U0_ap_start : STD_LOGIC;
    signal multiply_5_U0_ap_done : STD_LOGIC;
    signal multiply_5_U0_ap_continue : STD_LOGIC;
    signal multiply_5_U0_ap_idle : STD_LOGIC;
    signal multiply_5_U0_ap_ready : STD_LOGIC;
    signal multiply_5_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_2_full_n : STD_LOGIC;
    signal multiply_626_U0_ap_start : STD_LOGIC;
    signal multiply_626_U0_ap_done : STD_LOGIC;
    signal multiply_626_U0_ap_continue : STD_LOGIC;
    signal multiply_626_U0_ap_idle : STD_LOGIC;
    signal multiply_626_U0_ap_ready : STD_LOGIC;
    signal multiply_626_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_2_full_n : STD_LOGIC;
    signal Block_entry4255_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4255_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4255_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4255_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4255_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4255_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_2_load_loc_channel_full_n : STD_LOGIC;
    signal Block_entry4256_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4256_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4256_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4256_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4256_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4256_proc_U0_out_c1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4256_proc_U0_out_c1_ap_vld : STD_LOGIC;
    signal multiply_7_U0_ap_start : STD_LOGIC;
    signal multiply_7_U0_ap_done : STD_LOGIC;
    signal multiply_7_U0_ap_continue : STD_LOGIC;
    signal multiply_7_U0_ap_idle : STD_LOGIC;
    signal multiply_7_U0_ap_ready : STD_LOGIC;
    signal multiply_7_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_3_full_n : STD_LOGIC;
    signal multiply_827_U0_ap_start : STD_LOGIC;
    signal multiply_827_U0_ap_done : STD_LOGIC;
    signal multiply_827_U0_ap_continue : STD_LOGIC;
    signal multiply_827_U0_ap_idle : STD_LOGIC;
    signal multiply_827_U0_ap_ready : STD_LOGIC;
    signal multiply_827_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_3_full_n : STD_LOGIC;
    signal Block_entry4260_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4260_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4260_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4260_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4260_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4260_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_3_load_loc_channel_full_n : STD_LOGIC;
    signal Block_entry4261_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4261_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4261_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4261_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4261_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4261_proc_U0_out_a2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4261_proc_U0_out_a2_ap_vld : STD_LOGIC;
    signal multiply_9_U0_ap_start : STD_LOGIC;
    signal multiply_9_U0_ap_done : STD_LOGIC;
    signal multiply_9_U0_ap_continue : STD_LOGIC;
    signal multiply_9_U0_ap_idle : STD_LOGIC;
    signal multiply_9_U0_ap_ready : STD_LOGIC;
    signal multiply_9_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_4_full_n : STD_LOGIC;
    signal multiply_1028_U0_ap_start : STD_LOGIC;
    signal multiply_1028_U0_ap_done : STD_LOGIC;
    signal multiply_1028_U0_ap_continue : STD_LOGIC;
    signal multiply_1028_U0_ap_idle : STD_LOGIC;
    signal multiply_1028_U0_ap_ready : STD_LOGIC;
    signal multiply_1028_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_4_full_n : STD_LOGIC;
    signal Block_entry4265_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4265_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4265_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4265_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4265_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4265_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_4_load_loc_channel_full_n : STD_LOGIC;
    signal Block_entry4266_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4266_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4266_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4266_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4266_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4266_proc_U0_out_b2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4266_proc_U0_out_b2_ap_vld : STD_LOGIC;
    signal multiply_11_U0_ap_start : STD_LOGIC;
    signal multiply_11_U0_ap_done : STD_LOGIC;
    signal multiply_11_U0_ap_continue : STD_LOGIC;
    signal multiply_11_U0_ap_idle : STD_LOGIC;
    signal multiply_11_U0_ap_ready : STD_LOGIC;
    signal multiply_11_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_5_full_n : STD_LOGIC;
    signal multiply29_U0_ap_start : STD_LOGIC;
    signal multiply29_U0_ap_done : STD_LOGIC;
    signal multiply29_U0_ap_continue : STD_LOGIC;
    signal multiply29_U0_ap_idle : STD_LOGIC;
    signal multiply29_U0_ap_ready : STD_LOGIC;
    signal multiply29_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_5_full_n : STD_LOGIC;
    signal Block_entry4270_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4270_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4270_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4270_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4270_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4270_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_5_load_loc_channel_full_n : STD_LOGIC;
    signal Block_entry4271_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4271_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4271_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4271_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4271_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4271_proc_U0_out_c2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4271_proc_U0_out_c2_ap_vld : STD_LOGIC;
    signal products_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_empty_n : STD_LOGIC;
    signal products_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_empty_n : STD_LOGIC;
    signal products_assign_load_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_load_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_load_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_load_loc_channel_empty_n : STD_LOGIC;
    signal products_0_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_1_empty_n : STD_LOGIC;
    signal products_1_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_1_empty_n : STD_LOGIC;
    signal products_assign_1_load_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_1_load_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_1_load_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_1_load_loc_channel_empty_n : STD_LOGIC;
    signal products_0_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_2_empty_n : STD_LOGIC;
    signal products_1_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_2_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_2_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_2_empty_n : STD_LOGIC;
    signal products_assign_2_load_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_2_load_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_2_load_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_2_load_loc_channel_empty_n : STD_LOGIC;
    signal products_0_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_3_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_3_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_3_empty_n : STD_LOGIC;
    signal products_1_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_3_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_3_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_3_empty_n : STD_LOGIC;
    signal products_assign_3_load_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_3_load_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_3_load_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_3_load_loc_channel_empty_n : STD_LOGIC;
    signal products_0_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_4_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_4_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_4_empty_n : STD_LOGIC;
    signal products_1_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_4_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_4_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_4_empty_n : STD_LOGIC;
    signal products_assign_4_load_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_4_load_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_4_load_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_4_load_loc_channel_empty_n : STD_LOGIC;
    signal products_0_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_5_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_5_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_5_empty_n : STD_LOGIC;
    signal products_1_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_5_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_5_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_5_empty_n : STD_LOGIC;
    signal products_assign_5_load_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_5_load_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_5_load_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_5_load_loc_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_1_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_224_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_224_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_3_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_425_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_425_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_5_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_5_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_626_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_626_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_7_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_7_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_827_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_827_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_9_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_9_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_1028_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_1028_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_11_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_11_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply29_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply29_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component uz_VSDinv_6ph_asym_multiply_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_multiply_224 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4245_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4246_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_a1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_a1_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_VSDinv_6ph_asym_multiply_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_multiply_425 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4250_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4251_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_b1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_b1_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_VSDinv_6ph_asym_multiply_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_multiply_626 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4255_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4256_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_c1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_c1_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_VSDinv_6ph_asym_multiply_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_multiply_827 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4260_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4261_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_a2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_a2_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_VSDinv_6ph_asym_multiply_9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_multiply_1028 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4265_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4266_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_b2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_b2_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_VSDinv_6ph_asym_multiply_11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_multiply29 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4270_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSDinv_6ph_asym_Block_entry4271_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_c2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_c2_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_VSDinv_6ph_asym_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component uz_VSDinv_6ph_asym_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    multiply_1_U0 : component uz_VSDinv_6ph_asym_multiply_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_1_U0_ap_start,
        ap_done => multiply_1_U0_ap_done,
        ap_continue => multiply_1_U0_ap_continue,
        ap_idle => multiply_1_U0_ap_idle,
        ap_ready => multiply_1_U0_ap_ready,
        arg2 => in_alpha,
        ap_return => multiply_1_U0_ap_return);

    multiply_224_U0 : component uz_VSDinv_6ph_asym_multiply_224
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_224_U0_ap_start,
        ap_done => multiply_224_U0_ap_done,
        ap_continue => multiply_224_U0_ap_continue,
        ap_idle => multiply_224_U0_ap_idle,
        ap_ready => multiply_224_U0_ap_ready,
        arg2 => in_beta,
        ap_return => multiply_224_U0_ap_return);

    Block_entry4245_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4245_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4245_proc_U0_ap_start,
        ap_done => Block_entry4245_proc_U0_ap_done,
        ap_continue => Block_entry4245_proc_U0_ap_continue,
        ap_idle => Block_entry4245_proc_U0_ap_idle,
        ap_ready => Block_entry4245_proc_U0_ap_ready,
        p_read => products_0_dout,
        ap_return => Block_entry4245_proc_U0_ap_return);

    Block_entry4246_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4246_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4246_proc_U0_ap_start,
        ap_done => Block_entry4246_proc_U0_ap_done,
        ap_continue => Block_entry4246_proc_U0_ap_continue,
        ap_idle => Block_entry4246_proc_U0_ap_idle,
        ap_ready => Block_entry4246_proc_U0_ap_ready,
        p_read => products_1_dout,
        p_read1 => products_assign_load_loc_channel_dout,
        out_a1 => Block_entry4246_proc_U0_out_a1,
        out_a1_ap_vld => Block_entry4246_proc_U0_out_a1_ap_vld);

    multiply_3_U0 : component uz_VSDinv_6ph_asym_multiply_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_3_U0_ap_start,
        ap_done => multiply_3_U0_ap_done,
        ap_continue => multiply_3_U0_ap_continue,
        ap_idle => multiply_3_U0_ap_idle,
        ap_ready => multiply_3_U0_ap_ready,
        arg2 => in_alpha,
        ap_return => multiply_3_U0_ap_return);

    multiply_425_U0 : component uz_VSDinv_6ph_asym_multiply_425
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_425_U0_ap_start,
        ap_done => multiply_425_U0_ap_done,
        ap_continue => multiply_425_U0_ap_continue,
        ap_idle => multiply_425_U0_ap_idle,
        ap_ready => multiply_425_U0_ap_ready,
        arg2 => in_beta,
        ap_return => multiply_425_U0_ap_return);

    Block_entry4250_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4250_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4250_proc_U0_ap_start,
        ap_done => Block_entry4250_proc_U0_ap_done,
        ap_continue => Block_entry4250_proc_U0_ap_continue,
        ap_idle => Block_entry4250_proc_U0_ap_idle,
        ap_ready => Block_entry4250_proc_U0_ap_ready,
        p_read => products_0_1_dout,
        ap_return => Block_entry4250_proc_U0_ap_return);

    Block_entry4251_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4251_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4251_proc_U0_ap_start,
        ap_done => Block_entry4251_proc_U0_ap_done,
        ap_continue => Block_entry4251_proc_U0_ap_continue,
        ap_idle => Block_entry4251_proc_U0_ap_idle,
        ap_ready => Block_entry4251_proc_U0_ap_ready,
        p_read => products_1_1_dout,
        p_read1 => products_assign_1_load_loc_channel_dout,
        out_b1 => Block_entry4251_proc_U0_out_b1,
        out_b1_ap_vld => Block_entry4251_proc_U0_out_b1_ap_vld);

    multiply_5_U0 : component uz_VSDinv_6ph_asym_multiply_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_5_U0_ap_start,
        ap_done => multiply_5_U0_ap_done,
        ap_continue => multiply_5_U0_ap_continue,
        ap_idle => multiply_5_U0_ap_idle,
        ap_ready => multiply_5_U0_ap_ready,
        arg2 => in_alpha,
        ap_return => multiply_5_U0_ap_return);

    multiply_626_U0 : component uz_VSDinv_6ph_asym_multiply_626
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_626_U0_ap_start,
        ap_done => multiply_626_U0_ap_done,
        ap_continue => multiply_626_U0_ap_continue,
        ap_idle => multiply_626_U0_ap_idle,
        ap_ready => multiply_626_U0_ap_ready,
        arg2 => in_beta,
        ap_return => multiply_626_U0_ap_return);

    Block_entry4255_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4255_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4255_proc_U0_ap_start,
        ap_done => Block_entry4255_proc_U0_ap_done,
        ap_continue => Block_entry4255_proc_U0_ap_continue,
        ap_idle => Block_entry4255_proc_U0_ap_idle,
        ap_ready => Block_entry4255_proc_U0_ap_ready,
        p_read => products_0_2_dout,
        ap_return => Block_entry4255_proc_U0_ap_return);

    Block_entry4256_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4256_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4256_proc_U0_ap_start,
        ap_done => Block_entry4256_proc_U0_ap_done,
        ap_continue => Block_entry4256_proc_U0_ap_continue,
        ap_idle => Block_entry4256_proc_U0_ap_idle,
        ap_ready => Block_entry4256_proc_U0_ap_ready,
        p_read => products_1_2_dout,
        p_read1 => products_assign_2_load_loc_channel_dout,
        out_c1 => Block_entry4256_proc_U0_out_c1,
        out_c1_ap_vld => Block_entry4256_proc_U0_out_c1_ap_vld);

    multiply_7_U0 : component uz_VSDinv_6ph_asym_multiply_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_7_U0_ap_start,
        ap_done => multiply_7_U0_ap_done,
        ap_continue => multiply_7_U0_ap_continue,
        ap_idle => multiply_7_U0_ap_idle,
        ap_ready => multiply_7_U0_ap_ready,
        arg2 => in_alpha,
        ap_return => multiply_7_U0_ap_return);

    multiply_827_U0 : component uz_VSDinv_6ph_asym_multiply_827
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_827_U0_ap_start,
        ap_done => multiply_827_U0_ap_done,
        ap_continue => multiply_827_U0_ap_continue,
        ap_idle => multiply_827_U0_ap_idle,
        ap_ready => multiply_827_U0_ap_ready,
        arg2 => in_beta,
        ap_return => multiply_827_U0_ap_return);

    Block_entry4260_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4260_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4260_proc_U0_ap_start,
        ap_done => Block_entry4260_proc_U0_ap_done,
        ap_continue => Block_entry4260_proc_U0_ap_continue,
        ap_idle => Block_entry4260_proc_U0_ap_idle,
        ap_ready => Block_entry4260_proc_U0_ap_ready,
        p_read => products_0_3_dout,
        ap_return => Block_entry4260_proc_U0_ap_return);

    Block_entry4261_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4261_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4261_proc_U0_ap_start,
        ap_done => Block_entry4261_proc_U0_ap_done,
        ap_continue => Block_entry4261_proc_U0_ap_continue,
        ap_idle => Block_entry4261_proc_U0_ap_idle,
        ap_ready => Block_entry4261_proc_U0_ap_ready,
        p_read => products_1_3_dout,
        p_read1 => products_assign_3_load_loc_channel_dout,
        out_a2 => Block_entry4261_proc_U0_out_a2,
        out_a2_ap_vld => Block_entry4261_proc_U0_out_a2_ap_vld);

    multiply_9_U0 : component uz_VSDinv_6ph_asym_multiply_9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_9_U0_ap_start,
        ap_done => multiply_9_U0_ap_done,
        ap_continue => multiply_9_U0_ap_continue,
        ap_idle => multiply_9_U0_ap_idle,
        ap_ready => multiply_9_U0_ap_ready,
        arg2 => in_alpha,
        ap_return => multiply_9_U0_ap_return);

    multiply_1028_U0 : component uz_VSDinv_6ph_asym_multiply_1028
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_1028_U0_ap_start,
        ap_done => multiply_1028_U0_ap_done,
        ap_continue => multiply_1028_U0_ap_continue,
        ap_idle => multiply_1028_U0_ap_idle,
        ap_ready => multiply_1028_U0_ap_ready,
        arg2 => in_beta,
        ap_return => multiply_1028_U0_ap_return);

    Block_entry4265_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4265_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4265_proc_U0_ap_start,
        ap_done => Block_entry4265_proc_U0_ap_done,
        ap_continue => Block_entry4265_proc_U0_ap_continue,
        ap_idle => Block_entry4265_proc_U0_ap_idle,
        ap_ready => Block_entry4265_proc_U0_ap_ready,
        p_read => products_0_4_dout,
        ap_return => Block_entry4265_proc_U0_ap_return);

    Block_entry4266_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4266_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4266_proc_U0_ap_start,
        ap_done => Block_entry4266_proc_U0_ap_done,
        ap_continue => Block_entry4266_proc_U0_ap_continue,
        ap_idle => Block_entry4266_proc_U0_ap_idle,
        ap_ready => Block_entry4266_proc_U0_ap_ready,
        p_read => products_1_4_dout,
        p_read1 => products_assign_4_load_loc_channel_dout,
        out_b2 => Block_entry4266_proc_U0_out_b2,
        out_b2_ap_vld => Block_entry4266_proc_U0_out_b2_ap_vld);

    multiply_11_U0 : component uz_VSDinv_6ph_asym_multiply_11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_11_U0_ap_start,
        ap_done => multiply_11_U0_ap_done,
        ap_continue => multiply_11_U0_ap_continue,
        ap_idle => multiply_11_U0_ap_idle,
        ap_ready => multiply_11_U0_ap_ready,
        arg2 => in_alpha,
        ap_return => multiply_11_U0_ap_return);

    multiply29_U0 : component uz_VSDinv_6ph_asym_multiply29
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply29_U0_ap_start,
        ap_done => multiply29_U0_ap_done,
        ap_continue => multiply29_U0_ap_continue,
        ap_idle => multiply29_U0_ap_idle,
        ap_ready => multiply29_U0_ap_ready,
        arg2 => in_beta,
        ap_return => multiply29_U0_ap_return);

    Block_entry4270_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4270_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4270_proc_U0_ap_start,
        ap_done => Block_entry4270_proc_U0_ap_done,
        ap_continue => Block_entry4270_proc_U0_ap_continue,
        ap_idle => Block_entry4270_proc_U0_ap_idle,
        ap_ready => Block_entry4270_proc_U0_ap_ready,
        p_read => products_0_5_dout,
        ap_return => Block_entry4270_proc_U0_ap_return);

    Block_entry4271_proc_U0 : component uz_VSDinv_6ph_asym_Block_entry4271_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry4271_proc_U0_ap_start,
        ap_done => Block_entry4271_proc_U0_ap_done,
        ap_continue => Block_entry4271_proc_U0_ap_continue,
        ap_idle => Block_entry4271_proc_U0_ap_idle,
        ap_ready => Block_entry4271_proc_U0_ap_ready,
        p_read => products_1_5_dout,
        p_read1 => products_assign_5_load_loc_channel_dout,
        out_c2 => Block_entry4271_proc_U0_out_c2,
        out_c2_ap_vld => Block_entry4271_proc_U0_out_c2_ap_vld);

    products_0_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_1_U0_ap_return,
        if_full_n => products_0_full_n,
        if_write => multiply_1_U0_ap_done,
        if_dout => products_0_dout,
        if_num_data_valid => products_0_num_data_valid,
        if_fifo_cap => products_0_fifo_cap,
        if_empty_n => products_0_empty_n,
        if_read => Block_entry4245_proc_U0_ap_ready);

    products_1_U : component uz_VSDinv_6ph_asym_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_224_U0_ap_return,
        if_full_n => products_1_full_n,
        if_write => multiply_224_U0_ap_done,
        if_dout => products_1_dout,
        if_num_data_valid => products_1_num_data_valid,
        if_fifo_cap => products_1_fifo_cap,
        if_empty_n => products_1_empty_n,
        if_read => Block_entry4246_proc_U0_ap_ready);

    products_assign_load_loc_channel_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4245_proc_U0_ap_return,
        if_full_n => products_assign_load_loc_channel_full_n,
        if_write => Block_entry4245_proc_U0_ap_done,
        if_dout => products_assign_load_loc_channel_dout,
        if_num_data_valid => products_assign_load_loc_channel_num_data_valid,
        if_fifo_cap => products_assign_load_loc_channel_fifo_cap,
        if_empty_n => products_assign_load_loc_channel_empty_n,
        if_read => Block_entry4246_proc_U0_ap_ready);

    products_0_1_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_3_U0_ap_return,
        if_full_n => products_0_1_full_n,
        if_write => multiply_3_U0_ap_done,
        if_dout => products_0_1_dout,
        if_num_data_valid => products_0_1_num_data_valid,
        if_fifo_cap => products_0_1_fifo_cap,
        if_empty_n => products_0_1_empty_n,
        if_read => Block_entry4250_proc_U0_ap_ready);

    products_1_1_U : component uz_VSDinv_6ph_asym_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_425_U0_ap_return,
        if_full_n => products_1_1_full_n,
        if_write => multiply_425_U0_ap_done,
        if_dout => products_1_1_dout,
        if_num_data_valid => products_1_1_num_data_valid,
        if_fifo_cap => products_1_1_fifo_cap,
        if_empty_n => products_1_1_empty_n,
        if_read => Block_entry4251_proc_U0_ap_ready);

    products_assign_1_load_loc_channel_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4250_proc_U0_ap_return,
        if_full_n => products_assign_1_load_loc_channel_full_n,
        if_write => Block_entry4250_proc_U0_ap_done,
        if_dout => products_assign_1_load_loc_channel_dout,
        if_num_data_valid => products_assign_1_load_loc_channel_num_data_valid,
        if_fifo_cap => products_assign_1_load_loc_channel_fifo_cap,
        if_empty_n => products_assign_1_load_loc_channel_empty_n,
        if_read => Block_entry4251_proc_U0_ap_ready);

    products_0_2_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_5_U0_ap_return,
        if_full_n => products_0_2_full_n,
        if_write => multiply_5_U0_ap_done,
        if_dout => products_0_2_dout,
        if_num_data_valid => products_0_2_num_data_valid,
        if_fifo_cap => products_0_2_fifo_cap,
        if_empty_n => products_0_2_empty_n,
        if_read => Block_entry4255_proc_U0_ap_ready);

    products_1_2_U : component uz_VSDinv_6ph_asym_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_626_U0_ap_return,
        if_full_n => products_1_2_full_n,
        if_write => multiply_626_U0_ap_done,
        if_dout => products_1_2_dout,
        if_num_data_valid => products_1_2_num_data_valid,
        if_fifo_cap => products_1_2_fifo_cap,
        if_empty_n => products_1_2_empty_n,
        if_read => Block_entry4256_proc_U0_ap_ready);

    products_assign_2_load_loc_channel_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4255_proc_U0_ap_return,
        if_full_n => products_assign_2_load_loc_channel_full_n,
        if_write => Block_entry4255_proc_U0_ap_done,
        if_dout => products_assign_2_load_loc_channel_dout,
        if_num_data_valid => products_assign_2_load_loc_channel_num_data_valid,
        if_fifo_cap => products_assign_2_load_loc_channel_fifo_cap,
        if_empty_n => products_assign_2_load_loc_channel_empty_n,
        if_read => Block_entry4256_proc_U0_ap_ready);

    products_0_3_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_7_U0_ap_return,
        if_full_n => products_0_3_full_n,
        if_write => multiply_7_U0_ap_done,
        if_dout => products_0_3_dout,
        if_num_data_valid => products_0_3_num_data_valid,
        if_fifo_cap => products_0_3_fifo_cap,
        if_empty_n => products_0_3_empty_n,
        if_read => Block_entry4260_proc_U0_ap_ready);

    products_1_3_U : component uz_VSDinv_6ph_asym_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_827_U0_ap_return,
        if_full_n => products_1_3_full_n,
        if_write => multiply_827_U0_ap_done,
        if_dout => products_1_3_dout,
        if_num_data_valid => products_1_3_num_data_valid,
        if_fifo_cap => products_1_3_fifo_cap,
        if_empty_n => products_1_3_empty_n,
        if_read => Block_entry4261_proc_U0_ap_ready);

    products_assign_3_load_loc_channel_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4260_proc_U0_ap_return,
        if_full_n => products_assign_3_load_loc_channel_full_n,
        if_write => Block_entry4260_proc_U0_ap_done,
        if_dout => products_assign_3_load_loc_channel_dout,
        if_num_data_valid => products_assign_3_load_loc_channel_num_data_valid,
        if_fifo_cap => products_assign_3_load_loc_channel_fifo_cap,
        if_empty_n => products_assign_3_load_loc_channel_empty_n,
        if_read => Block_entry4261_proc_U0_ap_ready);

    products_0_4_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_9_U0_ap_return,
        if_full_n => products_0_4_full_n,
        if_write => multiply_9_U0_ap_done,
        if_dout => products_0_4_dout,
        if_num_data_valid => products_0_4_num_data_valid,
        if_fifo_cap => products_0_4_fifo_cap,
        if_empty_n => products_0_4_empty_n,
        if_read => Block_entry4265_proc_U0_ap_ready);

    products_1_4_U : component uz_VSDinv_6ph_asym_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_1028_U0_ap_return,
        if_full_n => products_1_4_full_n,
        if_write => multiply_1028_U0_ap_done,
        if_dout => products_1_4_dout,
        if_num_data_valid => products_1_4_num_data_valid,
        if_fifo_cap => products_1_4_fifo_cap,
        if_empty_n => products_1_4_empty_n,
        if_read => Block_entry4266_proc_U0_ap_ready);

    products_assign_4_load_loc_channel_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4265_proc_U0_ap_return,
        if_full_n => products_assign_4_load_loc_channel_full_n,
        if_write => Block_entry4265_proc_U0_ap_done,
        if_dout => products_assign_4_load_loc_channel_dout,
        if_num_data_valid => products_assign_4_load_loc_channel_num_data_valid,
        if_fifo_cap => products_assign_4_load_loc_channel_fifo_cap,
        if_empty_n => products_assign_4_load_loc_channel_empty_n,
        if_read => Block_entry4266_proc_U0_ap_ready);

    products_0_5_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_11_U0_ap_return,
        if_full_n => products_0_5_full_n,
        if_write => multiply_11_U0_ap_done,
        if_dout => products_0_5_dout,
        if_num_data_valid => products_0_5_num_data_valid,
        if_fifo_cap => products_0_5_fifo_cap,
        if_empty_n => products_0_5_empty_n,
        if_read => Block_entry4270_proc_U0_ap_ready);

    products_1_5_U : component uz_VSDinv_6ph_asym_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply29_U0_ap_return,
        if_full_n => products_1_5_full_n,
        if_write => multiply29_U0_ap_done,
        if_dout => products_1_5_dout,
        if_num_data_valid => products_1_5_num_data_valid,
        if_fifo_cap => products_1_5_fifo_cap,
        if_empty_n => products_1_5_empty_n,
        if_read => Block_entry4271_proc_U0_ap_ready);

    products_assign_5_load_loc_channel_U : component uz_VSDinv_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4270_proc_U0_ap_return,
        if_full_n => products_assign_5_load_loc_channel_full_n,
        if_write => Block_entry4270_proc_U0_ap_done,
        if_dout => products_assign_5_load_loc_channel_dout,
        if_num_data_valid => products_assign_5_load_loc_channel_num_data_valid,
        if_fifo_cap => products_assign_5_load_loc_channel_fifo_cap,
        if_empty_n => products_assign_5_load_loc_channel_empty_n,
        if_read => Block_entry4271_proc_U0_ap_ready);





    ap_sync_reg_multiply29_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply29_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply29_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply29_U0_ap_ready <= ap_sync_multiply29_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_1028_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_1028_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_1028_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_1028_U0_ap_ready <= ap_sync_multiply_1028_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_11_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_11_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_11_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_11_U0_ap_ready <= ap_sync_multiply_11_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_1_U0_ap_ready <= ap_sync_multiply_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_224_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_224_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_224_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_224_U0_ap_ready <= ap_sync_multiply_224_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_3_U0_ap_ready <= ap_sync_multiply_3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_425_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_425_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_425_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_425_U0_ap_ready <= ap_sync_multiply_425_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_5_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_5_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_5_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_5_U0_ap_ready <= ap_sync_multiply_5_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_626_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_626_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_626_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_626_U0_ap_ready <= ap_sync_multiply_626_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_7_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_7_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_7_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_7_U0_ap_ready <= ap_sync_multiply_7_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_827_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_827_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_827_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_827_U0_ap_ready <= ap_sync_multiply_827_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_9_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_9_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_9_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_9_U0_ap_ready <= ap_sync_multiply_9_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_entry4245_proc_U0_ap_continue <= products_assign_load_loc_channel_full_n;
    Block_entry4245_proc_U0_ap_start <= products_0_empty_n;
    Block_entry4246_proc_U0_ap_continue <= ap_sync_done;
    Block_entry4246_proc_U0_ap_start <= (products_assign_load_loc_channel_empty_n and products_1_empty_n);
    Block_entry4250_proc_U0_ap_continue <= products_assign_1_load_loc_channel_full_n;
    Block_entry4250_proc_U0_ap_start <= products_0_1_empty_n;
    Block_entry4251_proc_U0_ap_continue <= ap_sync_done;
    Block_entry4251_proc_U0_ap_start <= (products_assign_1_load_loc_channel_empty_n and products_1_1_empty_n);
    Block_entry4255_proc_U0_ap_continue <= products_assign_2_load_loc_channel_full_n;
    Block_entry4255_proc_U0_ap_start <= products_0_2_empty_n;
    Block_entry4256_proc_U0_ap_continue <= ap_sync_done;
    Block_entry4256_proc_U0_ap_start <= (products_assign_2_load_loc_channel_empty_n and products_1_2_empty_n);
    Block_entry4260_proc_U0_ap_continue <= products_assign_3_load_loc_channel_full_n;
    Block_entry4260_proc_U0_ap_start <= products_0_3_empty_n;
    Block_entry4261_proc_U0_ap_continue <= ap_sync_done;
    Block_entry4261_proc_U0_ap_start <= (products_assign_3_load_loc_channel_empty_n and products_1_3_empty_n);
    Block_entry4265_proc_U0_ap_continue <= products_assign_4_load_loc_channel_full_n;
    Block_entry4265_proc_U0_ap_start <= products_0_4_empty_n;
    Block_entry4266_proc_U0_ap_continue <= ap_sync_done;
    Block_entry4266_proc_U0_ap_start <= (products_assign_4_load_loc_channel_empty_n and products_1_4_empty_n);
    Block_entry4270_proc_U0_ap_continue <= products_assign_5_load_loc_channel_full_n;
    Block_entry4270_proc_U0_ap_start <= products_0_5_empty_n;
    Block_entry4271_proc_U0_ap_continue <= ap_sync_done;
    Block_entry4271_proc_U0_ap_start <= (products_assign_5_load_loc_channel_empty_n and products_1_5_empty_n);
    ap_done <= ap_sync_done;
    ap_idle <= (multiply_9_U0_ap_idle and multiply_827_U0_ap_idle and multiply_7_U0_ap_idle and multiply_626_U0_ap_idle and multiply_5_U0_ap_idle and multiply_425_U0_ap_idle and multiply_3_U0_ap_idle and multiply_224_U0_ap_idle and multiply_1_U0_ap_idle and multiply_11_U0_ap_idle and multiply_1028_U0_ap_idle and multiply29_U0_ap_idle and (products_assign_5_load_loc_channel_empty_n xor ap_const_logic_1) and (products_1_5_empty_n xor ap_const_logic_1) and (products_0_5_empty_n xor ap_const_logic_1) and (products_assign_4_load_loc_channel_empty_n xor ap_const_logic_1) and (products_1_4_empty_n xor ap_const_logic_1) and (products_0_4_empty_n xor ap_const_logic_1) and (products_assign_3_load_loc_channel_empty_n xor ap_const_logic_1) and (products_1_3_empty_n xor ap_const_logic_1) and (products_0_3_empty_n xor ap_const_logic_1) and (products_assign_2_load_loc_channel_empty_n xor ap_const_logic_1) and (products_1_2_empty_n xor ap_const_logic_1) and (products_0_2_empty_n xor ap_const_logic_1) and (products_assign_1_load_loc_channel_empty_n xor ap_const_logic_1) and (products_1_1_empty_n xor ap_const_logic_1) and (products_0_1_empty_n xor ap_const_logic_1) and (products_assign_load_loc_channel_empty_n xor ap_const_logic_1) and (products_1_empty_n xor ap_const_logic_1) and (products_0_empty_n xor ap_const_logic_1) and Block_entry4271_proc_U0_ap_idle and Block_entry4270_proc_U0_ap_idle and Block_entry4266_proc_U0_ap_idle and Block_entry4265_proc_U0_ap_idle and Block_entry4261_proc_U0_ap_idle and Block_entry4260_proc_U0_ap_idle and Block_entry4256_proc_U0_ap_idle and Block_entry4255_proc_U0_ap_idle and Block_entry4251_proc_U0_ap_idle and Block_entry4250_proc_U0_ap_idle and Block_entry4246_proc_U0_ap_idle and Block_entry4245_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_done <= (Block_entry4271_proc_U0_ap_done and Block_entry4266_proc_U0_ap_done and Block_entry4261_proc_U0_ap_done and Block_entry4256_proc_U0_ap_done and Block_entry4251_proc_U0_ap_done and Block_entry4246_proc_U0_ap_done);
    ap_sync_multiply29_U0_ap_ready <= (multiply29_U0_ap_ready or ap_sync_reg_multiply29_U0_ap_ready);
    ap_sync_multiply_1028_U0_ap_ready <= (multiply_1028_U0_ap_ready or ap_sync_reg_multiply_1028_U0_ap_ready);
    ap_sync_multiply_11_U0_ap_ready <= (multiply_11_U0_ap_ready or ap_sync_reg_multiply_11_U0_ap_ready);
    ap_sync_multiply_1_U0_ap_ready <= (multiply_1_U0_ap_ready or ap_sync_reg_multiply_1_U0_ap_ready);
    ap_sync_multiply_224_U0_ap_ready <= (multiply_224_U0_ap_ready or ap_sync_reg_multiply_224_U0_ap_ready);
    ap_sync_multiply_3_U0_ap_ready <= (multiply_3_U0_ap_ready or ap_sync_reg_multiply_3_U0_ap_ready);
    ap_sync_multiply_425_U0_ap_ready <= (multiply_425_U0_ap_ready or ap_sync_reg_multiply_425_U0_ap_ready);
    ap_sync_multiply_5_U0_ap_ready <= (multiply_5_U0_ap_ready or ap_sync_reg_multiply_5_U0_ap_ready);
    ap_sync_multiply_626_U0_ap_ready <= (multiply_626_U0_ap_ready or ap_sync_reg_multiply_626_U0_ap_ready);
    ap_sync_multiply_7_U0_ap_ready <= (multiply_7_U0_ap_ready or ap_sync_reg_multiply_7_U0_ap_ready);
    ap_sync_multiply_827_U0_ap_ready <= (multiply_827_U0_ap_ready or ap_sync_reg_multiply_827_U0_ap_ready);
    ap_sync_multiply_9_U0_ap_ready <= (multiply_9_U0_ap_ready or ap_sync_reg_multiply_9_U0_ap_ready);
    ap_sync_ready <= (ap_sync_multiply_9_U0_ap_ready and ap_sync_multiply_827_U0_ap_ready and ap_sync_multiply_7_U0_ap_ready and ap_sync_multiply_626_U0_ap_ready and ap_sync_multiply_5_U0_ap_ready and ap_sync_multiply_425_U0_ap_ready and ap_sync_multiply_3_U0_ap_ready and ap_sync_multiply_224_U0_ap_ready and ap_sync_multiply_1_U0_ap_ready and ap_sync_multiply_11_U0_ap_ready and ap_sync_multiply_1028_U0_ap_ready and ap_sync_multiply29_U0_ap_ready);
    multiply29_U0_ap_continue <= products_1_5_full_n;
    multiply29_U0_ap_start <= ((ap_sync_reg_multiply29_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_1028_U0_ap_continue <= products_1_4_full_n;
    multiply_1028_U0_ap_start <= ((ap_sync_reg_multiply_1028_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_11_U0_ap_continue <= products_0_5_full_n;
    multiply_11_U0_ap_start <= ((ap_sync_reg_multiply_11_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_1_U0_ap_continue <= products_0_full_n;
    multiply_1_U0_ap_start <= ((ap_sync_reg_multiply_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_224_U0_ap_continue <= products_1_full_n;
    multiply_224_U0_ap_start <= ((ap_sync_reg_multiply_224_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_3_U0_ap_continue <= products_0_1_full_n;
    multiply_3_U0_ap_start <= ((ap_sync_reg_multiply_3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_425_U0_ap_continue <= products_1_1_full_n;
    multiply_425_U0_ap_start <= ((ap_sync_reg_multiply_425_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_5_U0_ap_continue <= products_0_2_full_n;
    multiply_5_U0_ap_start <= ((ap_sync_reg_multiply_5_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_626_U0_ap_continue <= products_1_2_full_n;
    multiply_626_U0_ap_start <= ((ap_sync_reg_multiply_626_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_7_U0_ap_continue <= products_0_3_full_n;
    multiply_7_U0_ap_start <= ((ap_sync_reg_multiply_7_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_827_U0_ap_continue <= products_1_3_full_n;
    multiply_827_U0_ap_start <= ((ap_sync_reg_multiply_827_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_9_U0_ap_continue <= products_0_4_full_n;
    multiply_9_U0_ap_start <= ((ap_sync_reg_multiply_9_U0_ap_ready xor ap_const_logic_1) and ap_start);
    out_a1 <= Block_entry4246_proc_U0_out_a1;
    out_a2 <= Block_entry4261_proc_U0_out_a2;
    out_b1 <= Block_entry4251_proc_U0_out_b1;
    out_b2 <= Block_entry4266_proc_U0_out_b2;
    out_c1 <= Block_entry4256_proc_U0_out_c1;
    out_c2 <= Block_entry4271_proc_U0_out_c2;
end behav;
