-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_VSD_6ph_asym is
port (
    in_a1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_b1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_c1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_a2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_b2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_c2 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_alpha : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_beta : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of uz_VSD_6ph_asym is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_VSD_6ph_asym_uz_VSD_6ph_asym,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.018000,HLS_SYN_LAT=5,HLS_SYN_TPT=6,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6858,HLS_SYN_LUT=6552,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal multiply_1_U0_ap_start : STD_LOGIC;
    signal multiply_1_U0_ap_done : STD_LOGIC;
    signal multiply_1_U0_ap_continue : STD_LOGIC;
    signal multiply_1_U0_ap_idle : STD_LOGIC;
    signal multiply_1_U0_ap_ready : STD_LOGIC;
    signal multiply_1_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_full_n : STD_LOGIC;
    signal multiply_224_U0_ap_start : STD_LOGIC;
    signal multiply_224_U0_ap_done : STD_LOGIC;
    signal multiply_224_U0_ap_continue : STD_LOGIC;
    signal multiply_224_U0_ap_idle : STD_LOGIC;
    signal multiply_224_U0_ap_ready : STD_LOGIC;
    signal multiply_224_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_full_n : STD_LOGIC;
    signal multiply_325_U0_ap_start : STD_LOGIC;
    signal multiply_325_U0_ap_done : STD_LOGIC;
    signal multiply_325_U0_ap_continue : STD_LOGIC;
    signal multiply_325_U0_ap_idle : STD_LOGIC;
    signal multiply_325_U0_ap_ready : STD_LOGIC;
    signal multiply_325_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_2_full_n : STD_LOGIC;
    signal multiply_426_U0_ap_start : STD_LOGIC;
    signal multiply_426_U0_ap_done : STD_LOGIC;
    signal multiply_426_U0_ap_continue : STD_LOGIC;
    signal multiply_426_U0_ap_idle : STD_LOGIC;
    signal multiply_426_U0_ap_ready : STD_LOGIC;
    signal multiply_426_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_3_full_n : STD_LOGIC;
    signal multiply_527_U0_ap_start : STD_LOGIC;
    signal multiply_527_U0_ap_done : STD_LOGIC;
    signal multiply_527_U0_ap_continue : STD_LOGIC;
    signal multiply_527_U0_ap_idle : STD_LOGIC;
    signal multiply_527_U0_ap_ready : STD_LOGIC;
    signal multiply_527_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_4_full_n : STD_LOGIC;
    signal multiply_628_U0_ap_start : STD_LOGIC;
    signal multiply_628_U0_ap_done : STD_LOGIC;
    signal multiply_628_U0_ap_continue : STD_LOGIC;
    signal multiply_628_U0_ap_idle : STD_LOGIC;
    signal multiply_628_U0_ap_ready : STD_LOGIC;
    signal multiply_628_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_5_full_n : STD_LOGIC;
    signal Block_entry1421_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1421_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1421_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1421_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1421_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1421_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_load_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1422_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1422_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1422_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1422_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1422_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1422_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1423_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1423_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1423_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1423_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1423_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1423_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_i_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1424_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1424_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1424_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1424_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1424_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1424_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_i_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1425_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1425_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1425_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1425_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1425_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1425_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add7_i_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1426_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1426_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1426_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1426_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1426_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1426_proc_U0_out_alpha : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1426_proc_U0_out_alpha_ap_vld : STD_LOGIC;
    signal multiply_7_U0_ap_start : STD_LOGIC;
    signal multiply_7_U0_ap_done : STD_LOGIC;
    signal multiply_7_U0_ap_continue : STD_LOGIC;
    signal multiply_7_U0_ap_idle : STD_LOGIC;
    signal multiply_7_U0_ap_ready : STD_LOGIC;
    signal multiply_7_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_1_full_n : STD_LOGIC;
    signal multiply_829_U0_ap_start : STD_LOGIC;
    signal multiply_829_U0_ap_done : STD_LOGIC;
    signal multiply_829_U0_ap_continue : STD_LOGIC;
    signal multiply_829_U0_ap_idle : STD_LOGIC;
    signal multiply_829_U0_ap_ready : STD_LOGIC;
    signal multiply_829_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_1_full_n : STD_LOGIC;
    signal multiply_930_U0_ap_start : STD_LOGIC;
    signal multiply_930_U0_ap_done : STD_LOGIC;
    signal multiply_930_U0_ap_continue : STD_LOGIC;
    signal multiply_930_U0_ap_idle : STD_LOGIC;
    signal multiply_930_U0_ap_ready : STD_LOGIC;
    signal multiply_930_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_2_1_full_n : STD_LOGIC;
    signal multiply_1031_U0_ap_start : STD_LOGIC;
    signal multiply_1031_U0_ap_done : STD_LOGIC;
    signal multiply_1031_U0_ap_continue : STD_LOGIC;
    signal multiply_1031_U0_ap_idle : STD_LOGIC;
    signal multiply_1031_U0_ap_ready : STD_LOGIC;
    signal multiply_1031_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_3_1_full_n : STD_LOGIC;
    signal multiply_1132_U0_ap_start : STD_LOGIC;
    signal multiply_1132_U0_ap_done : STD_LOGIC;
    signal multiply_1132_U0_ap_continue : STD_LOGIC;
    signal multiply_1132_U0_ap_idle : STD_LOGIC;
    signal multiply_1132_U0_ap_ready : STD_LOGIC;
    signal multiply_1132_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_4_1_full_n : STD_LOGIC;
    signal multiply33_U0_ap_start : STD_LOGIC;
    signal multiply33_U0_ap_done : STD_LOGIC;
    signal multiply33_U0_ap_continue : STD_LOGIC;
    signal multiply33_U0_ap_idle : STD_LOGIC;
    signal multiply33_U0_ap_ready : STD_LOGIC;
    signal multiply33_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_5_1_full_n : STD_LOGIC;
    signal Block_entry1434_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1434_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1434_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1434_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1434_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1434_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_1_load_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1435_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1435_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1435_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1435_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1435_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1435_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i1_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1436_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1436_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1436_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1436_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1436_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1436_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_i1_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1437_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1437_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1437_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1437_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1437_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1437_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_i1_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1438_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1438_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1438_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1438_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1438_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1438_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add7_i1_loc_channel_full_n : STD_LOGIC;
    signal Block_entry1439_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1439_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1439_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1439_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1439_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1439_proc_U0_out_beta : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1439_proc_U0_out_beta_ap_vld : STD_LOGIC;
    signal products_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_empty_n : STD_LOGIC;
    signal products_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_empty_n : STD_LOGIC;
    signal products_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_2_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_2_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_2_empty_n : STD_LOGIC;
    signal products_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_3_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal products_3_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal products_3_empty_n : STD_LOGIC;
    signal products_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_4_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal products_4_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal products_4_empty_n : STD_LOGIC;
    signal products_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_5_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal products_5_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal products_5_empty_n : STD_LOGIC;
    signal products_assign_load_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_load_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_load_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_load_loc_channel_empty_n : STD_LOGIC;
    signal add_i_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add_i_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add_i_loc_channel_empty_n : STD_LOGIC;
    signal add3_i_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_i_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add3_i_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add3_i_loc_channel_empty_n : STD_LOGIC;
    signal add5_i_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_i_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add5_i_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add5_i_loc_channel_empty_n : STD_LOGIC;
    signal add7_i_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal add7_i_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add7_i_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add7_i_loc_channel_empty_n : STD_LOGIC;
    signal products_0_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_0_1_empty_n : STD_LOGIC;
    signal products_1_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_1_1_empty_n : STD_LOGIC;
    signal products_2_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_2_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal products_2_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal products_2_1_empty_n : STD_LOGIC;
    signal products_3_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_3_1_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal products_3_1_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal products_3_1_empty_n : STD_LOGIC;
    signal products_4_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_4_1_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal products_4_1_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal products_4_1_empty_n : STD_LOGIC;
    signal products_5_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_5_1_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal products_5_1_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal products_5_1_empty_n : STD_LOGIC;
    signal products_assign_1_load_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_assign_1_load_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_1_load_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal products_assign_1_load_loc_channel_empty_n : STD_LOGIC;
    signal add_i1_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i1_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add_i1_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add_i1_loc_channel_empty_n : STD_LOGIC;
    signal add3_i1_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_i1_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add3_i1_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add3_i1_loc_channel_empty_n : STD_LOGIC;
    signal add5_i1_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_i1_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add5_i1_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add5_i1_loc_channel_empty_n : STD_LOGIC;
    signal add7_i1_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal add7_i1_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add7_i1_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add7_i1_loc_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_1_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_224_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_224_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_325_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_325_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_426_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_426_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_527_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_527_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_628_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_628_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_7_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_7_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_829_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_829_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_930_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_930_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_1031_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_1031_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply_1132_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply_1132_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_multiply33_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_multiply33_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component uz_VSD_6ph_asym_multiply_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply_224 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply_325 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply_426 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply_527 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply_628 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1421_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1422_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1423_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1424_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1425_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1426_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_alpha : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_alpha_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_multiply_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply_829 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply_930 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply_1031 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply_1132 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_multiply33 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arg2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1434_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1435_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1436_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1437_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1438_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_Block_entry1439_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_beta : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_beta_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_fifo_w32_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_fifo_w32_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_fifo_w32_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    multiply_1_U0 : component uz_VSD_6ph_asym_multiply_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_1_U0_ap_start,
        ap_done => multiply_1_U0_ap_done,
        ap_continue => multiply_1_U0_ap_continue,
        ap_idle => multiply_1_U0_ap_idle,
        ap_ready => multiply_1_U0_ap_ready,
        arg2 => in_a1,
        ap_return => multiply_1_U0_ap_return);

    multiply_224_U0 : component uz_VSD_6ph_asym_multiply_224
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_224_U0_ap_start,
        ap_done => multiply_224_U0_ap_done,
        ap_continue => multiply_224_U0_ap_continue,
        ap_idle => multiply_224_U0_ap_idle,
        ap_ready => multiply_224_U0_ap_ready,
        arg2 => in_b1,
        ap_return => multiply_224_U0_ap_return);

    multiply_325_U0 : component uz_VSD_6ph_asym_multiply_325
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_325_U0_ap_start,
        ap_done => multiply_325_U0_ap_done,
        ap_continue => multiply_325_U0_ap_continue,
        ap_idle => multiply_325_U0_ap_idle,
        ap_ready => multiply_325_U0_ap_ready,
        arg2 => in_c1,
        ap_return => multiply_325_U0_ap_return);

    multiply_426_U0 : component uz_VSD_6ph_asym_multiply_426
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_426_U0_ap_start,
        ap_done => multiply_426_U0_ap_done,
        ap_continue => multiply_426_U0_ap_continue,
        ap_idle => multiply_426_U0_ap_idle,
        ap_ready => multiply_426_U0_ap_ready,
        arg2 => in_a2,
        ap_return => multiply_426_U0_ap_return);

    multiply_527_U0 : component uz_VSD_6ph_asym_multiply_527
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_527_U0_ap_start,
        ap_done => multiply_527_U0_ap_done,
        ap_continue => multiply_527_U0_ap_continue,
        ap_idle => multiply_527_U0_ap_idle,
        ap_ready => multiply_527_U0_ap_ready,
        arg2 => in_b2,
        ap_return => multiply_527_U0_ap_return);

    multiply_628_U0 : component uz_VSD_6ph_asym_multiply_628
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_628_U0_ap_start,
        ap_done => multiply_628_U0_ap_done,
        ap_continue => multiply_628_U0_ap_continue,
        ap_idle => multiply_628_U0_ap_idle,
        ap_ready => multiply_628_U0_ap_ready,
        arg2 => in_c2,
        ap_return => multiply_628_U0_ap_return);

    Block_entry1421_proc_U0 : component uz_VSD_6ph_asym_Block_entry1421_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1421_proc_U0_ap_start,
        ap_done => Block_entry1421_proc_U0_ap_done,
        ap_continue => Block_entry1421_proc_U0_ap_continue,
        ap_idle => Block_entry1421_proc_U0_ap_idle,
        ap_ready => Block_entry1421_proc_U0_ap_ready,
        p_read => products_0_dout,
        ap_return => Block_entry1421_proc_U0_ap_return);

    Block_entry1422_proc_U0 : component uz_VSD_6ph_asym_Block_entry1422_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1422_proc_U0_ap_start,
        ap_done => Block_entry1422_proc_U0_ap_done,
        ap_continue => Block_entry1422_proc_U0_ap_continue,
        ap_idle => Block_entry1422_proc_U0_ap_idle,
        ap_ready => Block_entry1422_proc_U0_ap_ready,
        p_read => products_1_dout,
        p_read1 => products_assign_load_loc_channel_dout,
        ap_return => Block_entry1422_proc_U0_ap_return);

    Block_entry1423_proc_U0 : component uz_VSD_6ph_asym_Block_entry1423_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1423_proc_U0_ap_start,
        ap_done => Block_entry1423_proc_U0_ap_done,
        ap_continue => Block_entry1423_proc_U0_ap_continue,
        ap_idle => Block_entry1423_proc_U0_ap_idle,
        ap_ready => Block_entry1423_proc_U0_ap_ready,
        p_read => products_2_dout,
        p_read1 => add_i_loc_channel_dout,
        ap_return => Block_entry1423_proc_U0_ap_return);

    Block_entry1424_proc_U0 : component uz_VSD_6ph_asym_Block_entry1424_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1424_proc_U0_ap_start,
        ap_done => Block_entry1424_proc_U0_ap_done,
        ap_continue => Block_entry1424_proc_U0_ap_continue,
        ap_idle => Block_entry1424_proc_U0_ap_idle,
        ap_ready => Block_entry1424_proc_U0_ap_ready,
        p_read => products_3_dout,
        p_read1 => add3_i_loc_channel_dout,
        ap_return => Block_entry1424_proc_U0_ap_return);

    Block_entry1425_proc_U0 : component uz_VSD_6ph_asym_Block_entry1425_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1425_proc_U0_ap_start,
        ap_done => Block_entry1425_proc_U0_ap_done,
        ap_continue => Block_entry1425_proc_U0_ap_continue,
        ap_idle => Block_entry1425_proc_U0_ap_idle,
        ap_ready => Block_entry1425_proc_U0_ap_ready,
        p_read => products_4_dout,
        p_read1 => add5_i_loc_channel_dout,
        ap_return => Block_entry1425_proc_U0_ap_return);

    Block_entry1426_proc_U0 : component uz_VSD_6ph_asym_Block_entry1426_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1426_proc_U0_ap_start,
        ap_done => Block_entry1426_proc_U0_ap_done,
        ap_continue => Block_entry1426_proc_U0_ap_continue,
        ap_idle => Block_entry1426_proc_U0_ap_idle,
        ap_ready => Block_entry1426_proc_U0_ap_ready,
        p_read => products_5_dout,
        p_read1 => add7_i_loc_channel_dout,
        out_alpha => Block_entry1426_proc_U0_out_alpha,
        out_alpha_ap_vld => Block_entry1426_proc_U0_out_alpha_ap_vld);

    multiply_7_U0 : component uz_VSD_6ph_asym_multiply_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_7_U0_ap_start,
        ap_done => multiply_7_U0_ap_done,
        ap_continue => multiply_7_U0_ap_continue,
        ap_idle => multiply_7_U0_ap_idle,
        ap_ready => multiply_7_U0_ap_ready,
        arg2 => in_a1,
        ap_return => multiply_7_U0_ap_return);

    multiply_829_U0 : component uz_VSD_6ph_asym_multiply_829
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_829_U0_ap_start,
        ap_done => multiply_829_U0_ap_done,
        ap_continue => multiply_829_U0_ap_continue,
        ap_idle => multiply_829_U0_ap_idle,
        ap_ready => multiply_829_U0_ap_ready,
        arg2 => in_b1,
        ap_return => multiply_829_U0_ap_return);

    multiply_930_U0 : component uz_VSD_6ph_asym_multiply_930
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_930_U0_ap_start,
        ap_done => multiply_930_U0_ap_done,
        ap_continue => multiply_930_U0_ap_continue,
        ap_idle => multiply_930_U0_ap_idle,
        ap_ready => multiply_930_U0_ap_ready,
        arg2 => in_c1,
        ap_return => multiply_930_U0_ap_return);

    multiply_1031_U0 : component uz_VSD_6ph_asym_multiply_1031
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_1031_U0_ap_start,
        ap_done => multiply_1031_U0_ap_done,
        ap_continue => multiply_1031_U0_ap_continue,
        ap_idle => multiply_1031_U0_ap_idle,
        ap_ready => multiply_1031_U0_ap_ready,
        arg2 => in_a2,
        ap_return => multiply_1031_U0_ap_return);

    multiply_1132_U0 : component uz_VSD_6ph_asym_multiply_1132
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_1132_U0_ap_start,
        ap_done => multiply_1132_U0_ap_done,
        ap_continue => multiply_1132_U0_ap_continue,
        ap_idle => multiply_1132_U0_ap_idle,
        ap_ready => multiply_1132_U0_ap_ready,
        arg2 => in_b2,
        ap_return => multiply_1132_U0_ap_return);

    multiply33_U0 : component uz_VSD_6ph_asym_multiply33
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply33_U0_ap_start,
        ap_done => multiply33_U0_ap_done,
        ap_continue => multiply33_U0_ap_continue,
        ap_idle => multiply33_U0_ap_idle,
        ap_ready => multiply33_U0_ap_ready,
        arg2 => in_c2,
        ap_return => multiply33_U0_ap_return);

    Block_entry1434_proc_U0 : component uz_VSD_6ph_asym_Block_entry1434_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1434_proc_U0_ap_start,
        ap_done => Block_entry1434_proc_U0_ap_done,
        ap_continue => Block_entry1434_proc_U0_ap_continue,
        ap_idle => Block_entry1434_proc_U0_ap_idle,
        ap_ready => Block_entry1434_proc_U0_ap_ready,
        p_read => products_0_1_dout,
        ap_return => Block_entry1434_proc_U0_ap_return);

    Block_entry1435_proc_U0 : component uz_VSD_6ph_asym_Block_entry1435_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1435_proc_U0_ap_start,
        ap_done => Block_entry1435_proc_U0_ap_done,
        ap_continue => Block_entry1435_proc_U0_ap_continue,
        ap_idle => Block_entry1435_proc_U0_ap_idle,
        ap_ready => Block_entry1435_proc_U0_ap_ready,
        p_read => products_1_1_dout,
        p_read1 => products_assign_1_load_loc_channel_dout,
        ap_return => Block_entry1435_proc_U0_ap_return);

    Block_entry1436_proc_U0 : component uz_VSD_6ph_asym_Block_entry1436_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1436_proc_U0_ap_start,
        ap_done => Block_entry1436_proc_U0_ap_done,
        ap_continue => Block_entry1436_proc_U0_ap_continue,
        ap_idle => Block_entry1436_proc_U0_ap_idle,
        ap_ready => Block_entry1436_proc_U0_ap_ready,
        p_read => products_2_1_dout,
        p_read1 => add_i1_loc_channel_dout,
        ap_return => Block_entry1436_proc_U0_ap_return);

    Block_entry1437_proc_U0 : component uz_VSD_6ph_asym_Block_entry1437_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1437_proc_U0_ap_start,
        ap_done => Block_entry1437_proc_U0_ap_done,
        ap_continue => Block_entry1437_proc_U0_ap_continue,
        ap_idle => Block_entry1437_proc_U0_ap_idle,
        ap_ready => Block_entry1437_proc_U0_ap_ready,
        p_read => products_3_1_dout,
        p_read1 => add3_i1_loc_channel_dout,
        ap_return => Block_entry1437_proc_U0_ap_return);

    Block_entry1438_proc_U0 : component uz_VSD_6ph_asym_Block_entry1438_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1438_proc_U0_ap_start,
        ap_done => Block_entry1438_proc_U0_ap_done,
        ap_continue => Block_entry1438_proc_U0_ap_continue,
        ap_idle => Block_entry1438_proc_U0_ap_idle,
        ap_ready => Block_entry1438_proc_U0_ap_ready,
        p_read => products_4_1_dout,
        p_read1 => add5_i1_loc_channel_dout,
        ap_return => Block_entry1438_proc_U0_ap_return);

    Block_entry1439_proc_U0 : component uz_VSD_6ph_asym_Block_entry1439_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry1439_proc_U0_ap_start,
        ap_done => Block_entry1439_proc_U0_ap_done,
        ap_continue => Block_entry1439_proc_U0_ap_continue,
        ap_idle => Block_entry1439_proc_U0_ap_idle,
        ap_ready => Block_entry1439_proc_U0_ap_ready,
        p_read => products_5_1_dout,
        p_read1 => add7_i1_loc_channel_dout,
        out_beta => Block_entry1439_proc_U0_out_beta,
        out_beta_ap_vld => Block_entry1439_proc_U0_out_beta_ap_vld);

    products_0_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_1_U0_ap_return,
        if_full_n => products_0_full_n,
        if_write => multiply_1_U0_ap_done,
        if_dout => products_0_dout,
        if_num_data_valid => products_0_num_data_valid,
        if_fifo_cap => products_0_fifo_cap,
        if_empty_n => products_0_empty_n,
        if_read => Block_entry1421_proc_U0_ap_ready);

    products_1_U : component uz_VSD_6ph_asym_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_224_U0_ap_return,
        if_full_n => products_1_full_n,
        if_write => multiply_224_U0_ap_done,
        if_dout => products_1_dout,
        if_num_data_valid => products_1_num_data_valid,
        if_fifo_cap => products_1_fifo_cap,
        if_empty_n => products_1_empty_n,
        if_read => Block_entry1422_proc_U0_ap_ready);

    products_2_U : component uz_VSD_6ph_asym_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_325_U0_ap_return,
        if_full_n => products_2_full_n,
        if_write => multiply_325_U0_ap_done,
        if_dout => products_2_dout,
        if_num_data_valid => products_2_num_data_valid,
        if_fifo_cap => products_2_fifo_cap,
        if_empty_n => products_2_empty_n,
        if_read => Block_entry1423_proc_U0_ap_ready);

    products_3_U : component uz_VSD_6ph_asym_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_426_U0_ap_return,
        if_full_n => products_3_full_n,
        if_write => multiply_426_U0_ap_done,
        if_dout => products_3_dout,
        if_num_data_valid => products_3_num_data_valid,
        if_fifo_cap => products_3_fifo_cap,
        if_empty_n => products_3_empty_n,
        if_read => Block_entry1424_proc_U0_ap_ready);

    products_4_U : component uz_VSD_6ph_asym_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_527_U0_ap_return,
        if_full_n => products_4_full_n,
        if_write => multiply_527_U0_ap_done,
        if_dout => products_4_dout,
        if_num_data_valid => products_4_num_data_valid,
        if_fifo_cap => products_4_fifo_cap,
        if_empty_n => products_4_empty_n,
        if_read => Block_entry1425_proc_U0_ap_ready);

    products_5_U : component uz_VSD_6ph_asym_fifo_w32_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_628_U0_ap_return,
        if_full_n => products_5_full_n,
        if_write => multiply_628_U0_ap_done,
        if_dout => products_5_dout,
        if_num_data_valid => products_5_num_data_valid,
        if_fifo_cap => products_5_fifo_cap,
        if_empty_n => products_5_empty_n,
        if_read => Block_entry1426_proc_U0_ap_ready);

    products_assign_load_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1421_proc_U0_ap_return,
        if_full_n => products_assign_load_loc_channel_full_n,
        if_write => Block_entry1421_proc_U0_ap_done,
        if_dout => products_assign_load_loc_channel_dout,
        if_num_data_valid => products_assign_load_loc_channel_num_data_valid,
        if_fifo_cap => products_assign_load_loc_channel_fifo_cap,
        if_empty_n => products_assign_load_loc_channel_empty_n,
        if_read => Block_entry1422_proc_U0_ap_ready);

    add_i_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1422_proc_U0_ap_return,
        if_full_n => add_i_loc_channel_full_n,
        if_write => Block_entry1422_proc_U0_ap_done,
        if_dout => add_i_loc_channel_dout,
        if_num_data_valid => add_i_loc_channel_num_data_valid,
        if_fifo_cap => add_i_loc_channel_fifo_cap,
        if_empty_n => add_i_loc_channel_empty_n,
        if_read => Block_entry1423_proc_U0_ap_ready);

    add3_i_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1423_proc_U0_ap_return,
        if_full_n => add3_i_loc_channel_full_n,
        if_write => Block_entry1423_proc_U0_ap_done,
        if_dout => add3_i_loc_channel_dout,
        if_num_data_valid => add3_i_loc_channel_num_data_valid,
        if_fifo_cap => add3_i_loc_channel_fifo_cap,
        if_empty_n => add3_i_loc_channel_empty_n,
        if_read => Block_entry1424_proc_U0_ap_ready);

    add5_i_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1424_proc_U0_ap_return,
        if_full_n => add5_i_loc_channel_full_n,
        if_write => Block_entry1424_proc_U0_ap_done,
        if_dout => add5_i_loc_channel_dout,
        if_num_data_valid => add5_i_loc_channel_num_data_valid,
        if_fifo_cap => add5_i_loc_channel_fifo_cap,
        if_empty_n => add5_i_loc_channel_empty_n,
        if_read => Block_entry1425_proc_U0_ap_ready);

    add7_i_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1425_proc_U0_ap_return,
        if_full_n => add7_i_loc_channel_full_n,
        if_write => Block_entry1425_proc_U0_ap_done,
        if_dout => add7_i_loc_channel_dout,
        if_num_data_valid => add7_i_loc_channel_num_data_valid,
        if_fifo_cap => add7_i_loc_channel_fifo_cap,
        if_empty_n => add7_i_loc_channel_empty_n,
        if_read => Block_entry1426_proc_U0_ap_ready);

    products_0_1_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_7_U0_ap_return,
        if_full_n => products_0_1_full_n,
        if_write => multiply_7_U0_ap_done,
        if_dout => products_0_1_dout,
        if_num_data_valid => products_0_1_num_data_valid,
        if_fifo_cap => products_0_1_fifo_cap,
        if_empty_n => products_0_1_empty_n,
        if_read => Block_entry1434_proc_U0_ap_ready);

    products_1_1_U : component uz_VSD_6ph_asym_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_829_U0_ap_return,
        if_full_n => products_1_1_full_n,
        if_write => multiply_829_U0_ap_done,
        if_dout => products_1_1_dout,
        if_num_data_valid => products_1_1_num_data_valid,
        if_fifo_cap => products_1_1_fifo_cap,
        if_empty_n => products_1_1_empty_n,
        if_read => Block_entry1435_proc_U0_ap_ready);

    products_2_1_U : component uz_VSD_6ph_asym_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_930_U0_ap_return,
        if_full_n => products_2_1_full_n,
        if_write => multiply_930_U0_ap_done,
        if_dout => products_2_1_dout,
        if_num_data_valid => products_2_1_num_data_valid,
        if_fifo_cap => products_2_1_fifo_cap,
        if_empty_n => products_2_1_empty_n,
        if_read => Block_entry1436_proc_U0_ap_ready);

    products_3_1_U : component uz_VSD_6ph_asym_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_1031_U0_ap_return,
        if_full_n => products_3_1_full_n,
        if_write => multiply_1031_U0_ap_done,
        if_dout => products_3_1_dout,
        if_num_data_valid => products_3_1_num_data_valid,
        if_fifo_cap => products_3_1_fifo_cap,
        if_empty_n => products_3_1_empty_n,
        if_read => Block_entry1437_proc_U0_ap_ready);

    products_4_1_U : component uz_VSD_6ph_asym_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_1132_U0_ap_return,
        if_full_n => products_4_1_full_n,
        if_write => multiply_1132_U0_ap_done,
        if_dout => products_4_1_dout,
        if_num_data_valid => products_4_1_num_data_valid,
        if_fifo_cap => products_4_1_fifo_cap,
        if_empty_n => products_4_1_empty_n,
        if_read => Block_entry1438_proc_U0_ap_ready);

    products_5_1_U : component uz_VSD_6ph_asym_fifo_w32_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply33_U0_ap_return,
        if_full_n => products_5_1_full_n,
        if_write => multiply33_U0_ap_done,
        if_dout => products_5_1_dout,
        if_num_data_valid => products_5_1_num_data_valid,
        if_fifo_cap => products_5_1_fifo_cap,
        if_empty_n => products_5_1_empty_n,
        if_read => Block_entry1439_proc_U0_ap_ready);

    products_assign_1_load_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1434_proc_U0_ap_return,
        if_full_n => products_assign_1_load_loc_channel_full_n,
        if_write => Block_entry1434_proc_U0_ap_done,
        if_dout => products_assign_1_load_loc_channel_dout,
        if_num_data_valid => products_assign_1_load_loc_channel_num_data_valid,
        if_fifo_cap => products_assign_1_load_loc_channel_fifo_cap,
        if_empty_n => products_assign_1_load_loc_channel_empty_n,
        if_read => Block_entry1435_proc_U0_ap_ready);

    add_i1_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1435_proc_U0_ap_return,
        if_full_n => add_i1_loc_channel_full_n,
        if_write => Block_entry1435_proc_U0_ap_done,
        if_dout => add_i1_loc_channel_dout,
        if_num_data_valid => add_i1_loc_channel_num_data_valid,
        if_fifo_cap => add_i1_loc_channel_fifo_cap,
        if_empty_n => add_i1_loc_channel_empty_n,
        if_read => Block_entry1436_proc_U0_ap_ready);

    add3_i1_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1436_proc_U0_ap_return,
        if_full_n => add3_i1_loc_channel_full_n,
        if_write => Block_entry1436_proc_U0_ap_done,
        if_dout => add3_i1_loc_channel_dout,
        if_num_data_valid => add3_i1_loc_channel_num_data_valid,
        if_fifo_cap => add3_i1_loc_channel_fifo_cap,
        if_empty_n => add3_i1_loc_channel_empty_n,
        if_read => Block_entry1437_proc_U0_ap_ready);

    add5_i1_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1437_proc_U0_ap_return,
        if_full_n => add5_i1_loc_channel_full_n,
        if_write => Block_entry1437_proc_U0_ap_done,
        if_dout => add5_i1_loc_channel_dout,
        if_num_data_valid => add5_i1_loc_channel_num_data_valid,
        if_fifo_cap => add5_i1_loc_channel_fifo_cap,
        if_empty_n => add5_i1_loc_channel_empty_n,
        if_read => Block_entry1438_proc_U0_ap_ready);

    add7_i1_loc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1438_proc_U0_ap_return,
        if_full_n => add7_i1_loc_channel_full_n,
        if_write => Block_entry1438_proc_U0_ap_done,
        if_dout => add7_i1_loc_channel_dout,
        if_num_data_valid => add7_i1_loc_channel_num_data_valid,
        if_fifo_cap => add7_i1_loc_channel_fifo_cap,
        if_empty_n => add7_i1_loc_channel_empty_n,
        if_read => Block_entry1439_proc_U0_ap_ready);





    ap_sync_reg_multiply33_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply33_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply33_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply33_U0_ap_ready <= ap_sync_multiply33_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_1031_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_1031_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_1031_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_1031_U0_ap_ready <= ap_sync_multiply_1031_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_1132_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_1132_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_1132_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_1132_U0_ap_ready <= ap_sync_multiply_1132_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_1_U0_ap_ready <= ap_sync_multiply_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_224_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_224_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_224_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_224_U0_ap_ready <= ap_sync_multiply_224_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_325_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_325_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_325_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_325_U0_ap_ready <= ap_sync_multiply_325_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_426_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_426_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_426_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_426_U0_ap_ready <= ap_sync_multiply_426_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_527_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_527_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_527_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_527_U0_ap_ready <= ap_sync_multiply_527_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_628_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_628_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_628_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_628_U0_ap_ready <= ap_sync_multiply_628_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_7_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_7_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_7_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_7_U0_ap_ready <= ap_sync_multiply_7_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_829_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_829_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_829_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_829_U0_ap_ready <= ap_sync_multiply_829_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_multiply_930_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_multiply_930_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_multiply_930_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_multiply_930_U0_ap_ready <= ap_sync_multiply_930_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_entry1421_proc_U0_ap_continue <= products_assign_load_loc_channel_full_n;
    Block_entry1421_proc_U0_ap_start <= products_0_empty_n;
    Block_entry1422_proc_U0_ap_continue <= add_i_loc_channel_full_n;
    Block_entry1422_proc_U0_ap_start <= (products_assign_load_loc_channel_empty_n and products_1_empty_n);
    Block_entry1423_proc_U0_ap_continue <= add3_i_loc_channel_full_n;
    Block_entry1423_proc_U0_ap_start <= (products_2_empty_n and add_i_loc_channel_empty_n);
    Block_entry1424_proc_U0_ap_continue <= add5_i_loc_channel_full_n;
    Block_entry1424_proc_U0_ap_start <= (products_3_empty_n and add3_i_loc_channel_empty_n);
    Block_entry1425_proc_U0_ap_continue <= add7_i_loc_channel_full_n;
    Block_entry1425_proc_U0_ap_start <= (products_4_empty_n and add5_i_loc_channel_empty_n);
    Block_entry1426_proc_U0_ap_continue <= ap_sync_done;
    Block_entry1426_proc_U0_ap_start <= (products_5_empty_n and add7_i_loc_channel_empty_n);
    Block_entry1434_proc_U0_ap_continue <= products_assign_1_load_loc_channel_full_n;
    Block_entry1434_proc_U0_ap_start <= products_0_1_empty_n;
    Block_entry1435_proc_U0_ap_continue <= add_i1_loc_channel_full_n;
    Block_entry1435_proc_U0_ap_start <= (products_assign_1_load_loc_channel_empty_n and products_1_1_empty_n);
    Block_entry1436_proc_U0_ap_continue <= add3_i1_loc_channel_full_n;
    Block_entry1436_proc_U0_ap_start <= (products_2_1_empty_n and add_i1_loc_channel_empty_n);
    Block_entry1437_proc_U0_ap_continue <= add5_i1_loc_channel_full_n;
    Block_entry1437_proc_U0_ap_start <= (products_3_1_empty_n and add3_i1_loc_channel_empty_n);
    Block_entry1438_proc_U0_ap_continue <= add7_i1_loc_channel_full_n;
    Block_entry1438_proc_U0_ap_start <= (products_4_1_empty_n and add5_i1_loc_channel_empty_n);
    Block_entry1439_proc_U0_ap_continue <= ap_sync_done;
    Block_entry1439_proc_U0_ap_start <= (products_5_1_empty_n and add7_i1_loc_channel_empty_n);
    ap_done <= ap_sync_done;
    ap_idle <= (multiply_930_U0_ap_idle and multiply_829_U0_ap_idle and multiply_7_U0_ap_idle and multiply_628_U0_ap_idle and multiply_527_U0_ap_idle and multiply_426_U0_ap_idle and multiply_325_U0_ap_idle and multiply_224_U0_ap_idle and multiply_1_U0_ap_idle and multiply_1132_U0_ap_idle and multiply_1031_U0_ap_idle and multiply33_U0_ap_idle and (products_assign_1_load_loc_channel_empty_n xor ap_const_logic_1) and (products_5_1_empty_n xor ap_const_logic_1) and (products_4_1_empty_n xor ap_const_logic_1) and (products_3_1_empty_n xor ap_const_logic_1) and (products_2_1_empty_n xor ap_const_logic_1) and (products_1_1_empty_n xor ap_const_logic_1) and (products_0_1_empty_n xor ap_const_logic_1) and (products_assign_load_loc_channel_empty_n xor ap_const_logic_1) and (products_5_empty_n xor ap_const_logic_1) and (products_4_empty_n xor ap_const_logic_1) and (products_3_empty_n xor ap_const_logic_1) and (products_2_empty_n xor ap_const_logic_1) and (products_1_empty_n xor ap_const_logic_1) and (products_0_empty_n xor ap_const_logic_1) and (ap_const_logic_1 xor add7_i1_loc_channel_empty_n) and (ap_const_logic_1 xor add5_i1_loc_channel_empty_n) and (ap_const_logic_1 xor add3_i1_loc_channel_empty_n) and (ap_const_logic_1 xor add_i1_loc_channel_empty_n) and (ap_const_logic_1 xor add7_i_loc_channel_empty_n) and (ap_const_logic_1 xor add5_i_loc_channel_empty_n) and (ap_const_logic_1 xor add3_i_loc_channel_empty_n) and (ap_const_logic_1 xor add_i_loc_channel_empty_n) and Block_entry1439_proc_U0_ap_idle and Block_entry1438_proc_U0_ap_idle and Block_entry1437_proc_U0_ap_idle and Block_entry1436_proc_U0_ap_idle and Block_entry1435_proc_U0_ap_idle and Block_entry1434_proc_U0_ap_idle and Block_entry1426_proc_U0_ap_idle and Block_entry1425_proc_U0_ap_idle and Block_entry1424_proc_U0_ap_idle and Block_entry1423_proc_U0_ap_idle and Block_entry1422_proc_U0_ap_idle and Block_entry1421_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_done <= (Block_entry1439_proc_U0_ap_done and Block_entry1426_proc_U0_ap_done);
    ap_sync_multiply33_U0_ap_ready <= (multiply33_U0_ap_ready or ap_sync_reg_multiply33_U0_ap_ready);
    ap_sync_multiply_1031_U0_ap_ready <= (multiply_1031_U0_ap_ready or ap_sync_reg_multiply_1031_U0_ap_ready);
    ap_sync_multiply_1132_U0_ap_ready <= (multiply_1132_U0_ap_ready or ap_sync_reg_multiply_1132_U0_ap_ready);
    ap_sync_multiply_1_U0_ap_ready <= (multiply_1_U0_ap_ready or ap_sync_reg_multiply_1_U0_ap_ready);
    ap_sync_multiply_224_U0_ap_ready <= (multiply_224_U0_ap_ready or ap_sync_reg_multiply_224_U0_ap_ready);
    ap_sync_multiply_325_U0_ap_ready <= (multiply_325_U0_ap_ready or ap_sync_reg_multiply_325_U0_ap_ready);
    ap_sync_multiply_426_U0_ap_ready <= (multiply_426_U0_ap_ready or ap_sync_reg_multiply_426_U0_ap_ready);
    ap_sync_multiply_527_U0_ap_ready <= (multiply_527_U0_ap_ready or ap_sync_reg_multiply_527_U0_ap_ready);
    ap_sync_multiply_628_U0_ap_ready <= (multiply_628_U0_ap_ready or ap_sync_reg_multiply_628_U0_ap_ready);
    ap_sync_multiply_7_U0_ap_ready <= (multiply_7_U0_ap_ready or ap_sync_reg_multiply_7_U0_ap_ready);
    ap_sync_multiply_829_U0_ap_ready <= (multiply_829_U0_ap_ready or ap_sync_reg_multiply_829_U0_ap_ready);
    ap_sync_multiply_930_U0_ap_ready <= (multiply_930_U0_ap_ready or ap_sync_reg_multiply_930_U0_ap_ready);
    ap_sync_ready <= (ap_sync_multiply_930_U0_ap_ready and ap_sync_multiply_829_U0_ap_ready and ap_sync_multiply_7_U0_ap_ready and ap_sync_multiply_628_U0_ap_ready and ap_sync_multiply_527_U0_ap_ready and ap_sync_multiply_426_U0_ap_ready and ap_sync_multiply_325_U0_ap_ready and ap_sync_multiply_224_U0_ap_ready and ap_sync_multiply_1_U0_ap_ready and ap_sync_multiply_1132_U0_ap_ready and ap_sync_multiply_1031_U0_ap_ready and ap_sync_multiply33_U0_ap_ready);
    multiply33_U0_ap_continue <= products_5_1_full_n;
    multiply33_U0_ap_start <= ((ap_sync_reg_multiply33_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_1031_U0_ap_continue <= products_3_1_full_n;
    multiply_1031_U0_ap_start <= ((ap_sync_reg_multiply_1031_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_1132_U0_ap_continue <= products_4_1_full_n;
    multiply_1132_U0_ap_start <= ((ap_sync_reg_multiply_1132_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_1_U0_ap_continue <= products_0_full_n;
    multiply_1_U0_ap_start <= ((ap_sync_reg_multiply_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_224_U0_ap_continue <= products_1_full_n;
    multiply_224_U0_ap_start <= ((ap_sync_reg_multiply_224_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_325_U0_ap_continue <= products_2_full_n;
    multiply_325_U0_ap_start <= ((ap_sync_reg_multiply_325_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_426_U0_ap_continue <= products_3_full_n;
    multiply_426_U0_ap_start <= ((ap_sync_reg_multiply_426_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_527_U0_ap_continue <= products_4_full_n;
    multiply_527_U0_ap_start <= ((ap_sync_reg_multiply_527_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_628_U0_ap_continue <= products_5_full_n;
    multiply_628_U0_ap_start <= ((ap_sync_reg_multiply_628_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_7_U0_ap_continue <= products_0_1_full_n;
    multiply_7_U0_ap_start <= ((ap_sync_reg_multiply_7_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_829_U0_ap_continue <= products_1_1_full_n;
    multiply_829_U0_ap_start <= ((ap_sync_reg_multiply_829_U0_ap_ready xor ap_const_logic_1) and ap_start);
    multiply_930_U0_ap_continue <= products_2_1_full_n;
    multiply_930_U0_ap_start <= ((ap_sync_reg_multiply_930_U0_ap_ready xor ap_const_logic_1) and ap_start);
    out_alpha <= Block_entry1426_proc_U0_out_alpha;
    out_beta <= Block_entry1439_proc_U0_out_beta;
end behav;
