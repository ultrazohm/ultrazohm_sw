-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage1.vhd
-- Created: 2022-06-01 13:39:43
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage1
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph/Line-Line to Phase voltage1
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_20_0                        :   IN    std_logic;
        In1                               :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
        Out1                              :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
        );
END uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage1;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage1 IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          a_b_c                           :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
          alpha_beta_0                    :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          alpha_beta_0                    :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
          a_b_c                           :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_sub_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_add_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_add_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block(rtl);

  -- Signals
  SIGNAL abc_to_alpha_beta_0_out1         : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Constant1_out1_re                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1_im                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg                      : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL reduced_reg_next                 : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL Product_C2ReIm_2_C2ReIm_A        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Re_AC                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_1                    : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL reduced_reg_next_1               : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL Product_C2ReIm_2_C2ReIm_B        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Re_BD                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Im_AD                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Im_BC                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux4_out1                        : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL alpha_beta_0_to_abc_out1         : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]

BEGIN
  u_abc_to_alpha_beta_0 : uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              a_b_c => In1,  -- single [3]
              alpha_beta_0 => abc_to_alpha_beta_0_out1  -- single [3]
              );

  u_nfp_mul_comp : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => abc_to_alpha_beta_0_out1(0),  -- single
              nfp_in2 => Product_C2ReIm_2_C2ReIm_A,  -- single
              nfp_out => Product_Re_AC  -- single
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => abc_to_alpha_beta_0_out1(1),  -- single
              nfp_in2 => Product_C2ReIm_2_C2ReIm_B,  -- single
              nfp_out => Product_Re_BD  -- single
              );

  u_nfp_sub_comp : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Product_Re_AC,  -- single
              nfp_in2 => Product_Re_BD,  -- single
              nfp_out => Mux4_out1(0)  -- single
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => abc_to_alpha_beta_0_out1(0),  -- single
              nfp_in2 => Product_C2ReIm_2_C2ReIm_B,  -- single
              nfp_out => Product_Im_AD  -- single
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => abc_to_alpha_beta_0_out1(1),  -- single
              nfp_in2 => Product_C2ReIm_2_C2ReIm_A,  -- single
              nfp_out => Product_Im_BC  -- single
              );

  u_nfp_add_comp : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Product_Im_AD,  -- single
              nfp_in2 => Product_Im_BC,  -- single
              nfp_out => Mux4_out1(1)  -- single
              );

  u_alpha_beta_0_to_abc : uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              alpha_beta_0 => Mux4_out1,  -- single [3]
              a_b_c => alpha_beta_0_to_abc_out1  -- single [3]
              );

  Constant1_out1_re <= X"3f000000";
  Constant1_out1_im <= X"be93cd3a";

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= X"00000000";
        reduced_reg(1) <= X"00000000";
        reduced_reg(2) <= X"00000000";
        reduced_reg(3) <= X"00000000";
        reduced_reg(4) <= X"00000000";
        reduced_reg(5) <= X"00000000";
        reduced_reg(6) <= X"00000000";
        reduced_reg(7) <= X"00000000";
        reduced_reg(8) <= X"00000000";
        reduced_reg(9) <= X"00000000";
        reduced_reg(10) <= X"00000000";
        reduced_reg(11) <= X"00000000";
        reduced_reg(12) <= X"00000000";
        reduced_reg(13) <= X"00000000";
        reduced_reg(14) <= X"00000000";
        reduced_reg(15) <= X"00000000";
        reduced_reg(16) <= X"00000000";
        reduced_reg(17) <= X"00000000";
        reduced_reg(18) <= X"00000000";
        reduced_reg(19) <= X"00000000";
        reduced_reg(20) <= X"00000000";
        reduced_reg(21) <= X"00000000";
        reduced_reg(22) <= X"00000000";
        reduced_reg(23) <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
        reduced_reg(6) <= reduced_reg_next(6);
        reduced_reg(7) <= reduced_reg_next(7);
        reduced_reg(8) <= reduced_reg_next(8);
        reduced_reg(9) <= reduced_reg_next(9);
        reduced_reg(10) <= reduced_reg_next(10);
        reduced_reg(11) <= reduced_reg_next(11);
        reduced_reg(12) <= reduced_reg_next(12);
        reduced_reg(13) <= reduced_reg_next(13);
        reduced_reg(14) <= reduced_reg_next(14);
        reduced_reg(15) <= reduced_reg_next(15);
        reduced_reg(16) <= reduced_reg_next(16);
        reduced_reg(17) <= reduced_reg_next(17);
        reduced_reg(18) <= reduced_reg_next(18);
        reduced_reg(19) <= reduced_reg_next(19);
        reduced_reg(20) <= reduced_reg_next(20);
        reduced_reg(21) <= reduced_reg_next(21);
        reduced_reg(22) <= reduced_reg_next(22);
        reduced_reg(23) <= reduced_reg_next(23);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Product_C2ReIm_2_C2ReIm_A <= reduced_reg(23);
  reduced_reg_next(0) <= Constant1_out1_re;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);
  reduced_reg_next(6) <= reduced_reg(5);
  reduced_reg_next(7) <= reduced_reg(6);
  reduced_reg_next(8) <= reduced_reg(7);
  reduced_reg_next(9) <= reduced_reg(8);
  reduced_reg_next(10) <= reduced_reg(9);
  reduced_reg_next(11) <= reduced_reg(10);
  reduced_reg_next(12) <= reduced_reg(11);
  reduced_reg_next(13) <= reduced_reg(12);
  reduced_reg_next(14) <= reduced_reg(13);
  reduced_reg_next(15) <= reduced_reg(14);
  reduced_reg_next(16) <= reduced_reg(15);
  reduced_reg_next(17) <= reduced_reg(16);
  reduced_reg_next(18) <= reduced_reg(17);
  reduced_reg_next(19) <= reduced_reg(18);
  reduced_reg_next(20) <= reduced_reg(19);
  reduced_reg_next(21) <= reduced_reg(20);
  reduced_reg_next(22) <= reduced_reg(21);
  reduced_reg_next(23) <= reduced_reg(22);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= X"00000000";
        reduced_reg_1(1) <= X"00000000";
        reduced_reg_1(2) <= X"00000000";
        reduced_reg_1(3) <= X"00000000";
        reduced_reg_1(4) <= X"00000000";
        reduced_reg_1(5) <= X"00000000";
        reduced_reg_1(6) <= X"00000000";
        reduced_reg_1(7) <= X"00000000";
        reduced_reg_1(8) <= X"00000000";
        reduced_reg_1(9) <= X"00000000";
        reduced_reg_1(10) <= X"00000000";
        reduced_reg_1(11) <= X"00000000";
        reduced_reg_1(12) <= X"00000000";
        reduced_reg_1(13) <= X"00000000";
        reduced_reg_1(14) <= X"00000000";
        reduced_reg_1(15) <= X"00000000";
        reduced_reg_1(16) <= X"00000000";
        reduced_reg_1(17) <= X"00000000";
        reduced_reg_1(18) <= X"00000000";
        reduced_reg_1(19) <= X"00000000";
        reduced_reg_1(20) <= X"00000000";
        reduced_reg_1(21) <= X"00000000";
        reduced_reg_1(22) <= X"00000000";
        reduced_reg_1(23) <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
        reduced_reg_1(4) <= reduced_reg_next_1(4);
        reduced_reg_1(5) <= reduced_reg_next_1(5);
        reduced_reg_1(6) <= reduced_reg_next_1(6);
        reduced_reg_1(7) <= reduced_reg_next_1(7);
        reduced_reg_1(8) <= reduced_reg_next_1(8);
        reduced_reg_1(9) <= reduced_reg_next_1(9);
        reduced_reg_1(10) <= reduced_reg_next_1(10);
        reduced_reg_1(11) <= reduced_reg_next_1(11);
        reduced_reg_1(12) <= reduced_reg_next_1(12);
        reduced_reg_1(13) <= reduced_reg_next_1(13);
        reduced_reg_1(14) <= reduced_reg_next_1(14);
        reduced_reg_1(15) <= reduced_reg_next_1(15);
        reduced_reg_1(16) <= reduced_reg_next_1(16);
        reduced_reg_1(17) <= reduced_reg_next_1(17);
        reduced_reg_1(18) <= reduced_reg_next_1(18);
        reduced_reg_1(19) <= reduced_reg_next_1(19);
        reduced_reg_1(20) <= reduced_reg_next_1(20);
        reduced_reg_1(21) <= reduced_reg_next_1(21);
        reduced_reg_1(22) <= reduced_reg_next_1(22);
        reduced_reg_1(23) <= reduced_reg_next_1(23);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Product_C2ReIm_2_C2ReIm_B <= reduced_reg_1(23);
  reduced_reg_next_1(0) <= Constant1_out1_im;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);
  reduced_reg_next_1(4) <= reduced_reg_1(3);
  reduced_reg_next_1(5) <= reduced_reg_1(4);
  reduced_reg_next_1(6) <= reduced_reg_1(5);
  reduced_reg_next_1(7) <= reduced_reg_1(6);
  reduced_reg_next_1(8) <= reduced_reg_1(7);
  reduced_reg_next_1(9) <= reduced_reg_1(8);
  reduced_reg_next_1(10) <= reduced_reg_1(9);
  reduced_reg_next_1(11) <= reduced_reg_1(10);
  reduced_reg_next_1(12) <= reduced_reg_1(11);
  reduced_reg_next_1(13) <= reduced_reg_1(12);
  reduced_reg_next_1(14) <= reduced_reg_1(13);
  reduced_reg_next_1(15) <= reduced_reg_1(14);
  reduced_reg_next_1(16) <= reduced_reg_1(15);
  reduced_reg_next_1(17) <= reduced_reg_1(16);
  reduced_reg_next_1(18) <= reduced_reg_1(17);
  reduced_reg_next_1(19) <= reduced_reg_1(18);
  reduced_reg_next_1(20) <= reduced_reg_1(19);
  reduced_reg_next_1(21) <= reduced_reg_1(20);
  reduced_reg_next_1(22) <= reduced_reg_1(21);
  reduced_reg_next_1(23) <= reduced_reg_1(22);

  Constant_out1 <= X"00000000";

  Mux4_out1(2) <= Constant_out1;

  Out1 <= alpha_beta_0_to_abc_out1;

END rtl;

