-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_vsd_and_park\hdlsrc\VSD_and_Park_transformation_6Phase\parallel_8_sim_vsd_and_park_src_vsd_and_park_tra1.vhd
-- Created: 2022-11-07 16:24:24
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_alpha                       ce_out        1e-08
-- i_alpha_axi                   ce_out        1e-08
-- i_beta                        ce_out        1e-08
-- i_beta_axi                    ce_out        1e-08
-- i_d                           ce_out        1e-08
-- i_d_axi                       ce_out        1e-08
-- i_q                           ce_out        1e-08
-- i_q_axi                       ce_out        1e-08
-- i_x                           ce_out        1e-08
-- i_x_axi                       ce_out        1e-08
-- i_y                           ce_out        1e-08
-- i_y_axi                       ce_out        1e-08
-- i_0_plus                      ce_out        1e-08
-- i_0_plus_axi                  ce_out        1e-08
-- i_0_minus                     ce_out        1e-08
-- i_0_minus_axi                 ce_out        1e-08
-- done_vsd_and_park             ce_out        1e-08
-- i_a1_axi                      ce_out        1e-08
-- i_b1_axi                      ce_out        1e-08
-- i_c1_axi                      ce_out        1e-08
-- i_a2_axi                      ce_out        1e-08
-- i_b2_axi                      ce_out        1e-08
-- i_c2_axi                      ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_sim_vsd_and_park_src_vsd_and_park_tra1
-- Source Path: VSD_and_Park_transformation_6Phase/vsd_and_park_tra1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_8_sim_vsd_and_park_src_vsd_and_park_tra1_pac.ALL;

ENTITY parallel_8_sim_vsd_and_park_src_vsd_and_park_tra1 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        i_a1                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_b1                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_c1                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_a2                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_b2                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_c2                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        theta_el                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        theta_el_offset_AXI               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        curent_valid_in                   :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        i_alpha                           :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_alpha_axi                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_beta                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_beta_axi                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_d                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_d_axi                           :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_q                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_q_axi                           :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_x                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_x_axi                           :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_y                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_y_axi                           :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_0_plus                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_0_plus_axi                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_0_minus                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_0_minus_axi                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        done_vsd_and_park                 :   OUT   std_logic;
        i_a1_axi                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_b1_axi                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_c1_axi                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_a2_axi                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_b2_axi                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_c2_axi                          :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
        );
END parallel_8_sim_vsd_and_park_src_vsd_and_park_tra1;


ARCHITECTURE rtl OF parallel_8_sim_vsd_and_park_src_vsd_and_park_tra1 IS

  -- Component Declarations
  COMPONENT parallel_8_sim_vsd_and_park_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_vsd_and_park_src_Compare_To_Constant1
    PORT( u                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_vsd_and_park_src_Compare_To_Constant
    PORT( u                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_vsd_and_park_src_Sine_HDL_Optimized1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          x                               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          y                               :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_vsd_and_park_src_MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          i_a1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          i_b1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          i_c1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          i_a2                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          i_b2                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          i_c2                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          sin_theta_el                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          cos_theta_el                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          i_alpha                         :   OUT   std_logic_vector(38 DOWNTO 0);  -- sfix39_En29
          i_beta                          :   OUT   std_logic_vector(38 DOWNTO 0);  -- sfix39_En29
          i_x                             :   OUT   std_logic_vector(38 DOWNTO 0);  -- sfix39_En29
          i_y                             :   OUT   std_logic_vector(38 DOWNTO 0);  -- sfix39_En29
          i_0_plus                        :   OUT   std_logic_vector(38 DOWNTO 0);  -- sfix39_En29
          i_0_minus                       :   OUT   std_logic_vector(38 DOWNTO 0);  -- sfix39_En29
          i_d                             :   OUT   std_logic_vector(55 DOWNTO 0);  -- sfix56_En43
          i_q                             :   OUT   std_logic_vector(55 DOWNTO 0)  -- sfix56_En43
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_sim_vsd_and_park_src_Detect_Rise_Positive
    USE ENTITY work.parallel_8_sim_vsd_and_park_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_8_sim_vsd_and_park_src_Compare_To_Constant1
    USE ENTITY work.parallel_8_sim_vsd_and_park_src_Compare_To_Constant1(rtl);

  FOR ALL : parallel_8_sim_vsd_and_park_src_Compare_To_Constant
    USE ENTITY work.parallel_8_sim_vsd_and_park_src_Compare_To_Constant(rtl);

  FOR ALL : parallel_8_sim_vsd_and_park_src_Sine_HDL_Optimized1
    USE ENTITY work.parallel_8_sim_vsd_and_park_src_Sine_HDL_Optimized1(rtl);

  FOR ALL : parallel_8_sim_vsd_and_park_src_MATLAB_Function
    USE ENTITY work.parallel_8_sim_vsd_and_park_src_MATLAB_Function(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL i_a1_signed                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on6_out1                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay6_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL i_b1_signed                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on1_out1                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL i_c1_signed                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on2_out1                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay2_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL i_a2_signed                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on3_out1                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay3_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL i_b2_signed                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on4_out1                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay4_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL i_c2_signed                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on5_out1                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay5_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL theta_el_signed                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_on8_out1                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay8_out1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL theta_el_offset_AXI_signed       : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_on7_out1                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay25_out1                     : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add1_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add1_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL Add1_out1_2                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Constant_out1                    : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add2_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL Add2_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_out1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Constant1_out1                   : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add3_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add3_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL End_Cycle_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Gain1_mul_temp                   : signed(47 DOWNTO 0);  -- sfix48_En40
  SIGNAL Gain1_out1                       : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay7_out1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Sine                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Cosine                           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL i_alpha_1                        : std_logic_vector(38 DOWNTO 0);  -- ufix39
  SIGNAL i_beta_1                         : std_logic_vector(38 DOWNTO 0);  -- ufix39
  SIGNAL i_x_1                            : std_logic_vector(38 DOWNTO 0);  -- ufix39
  SIGNAL i_y_1                            : std_logic_vector(38 DOWNTO 0);  -- ufix39
  SIGNAL i_0_plus_1                       : std_logic_vector(38 DOWNTO 0);  -- ufix39
  SIGNAL i_0_minus_1                      : std_logic_vector(38 DOWNTO 0);  -- ufix39
  SIGNAL i_d_1                            : std_logic_vector(55 DOWNTO 0);  -- ufix56
  SIGNAL i_q_1                            : std_logic_vector(55 DOWNTO 0);  -- ufix56
  SIGNAL i_alpha_signed                   : signed(38 DOWNTO 0);  -- sfix39_En29
  SIGNAL fc                               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_beta_signed                    : signed(38 DOWNTO 0);  -- sfix39_En29
  SIGNAL fc_1                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_d_signed                       : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL fc_2                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_q_signed                       : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL fc_3                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_x_signed                       : signed(38 DOWNTO 0);  -- sfix39_En29
  SIGNAL fc_4                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_y_signed                       : signed(38 DOWNTO 0);  -- sfix39_En29
  SIGNAL fc_5                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_0_plus_signed                  : signed(38 DOWNTO 0);  -- sfix39_En29
  SIGNAL fc_6                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_0_minus_signed                 : signed(38 DOWNTO 0);  -- sfix39_En29
  SIGNAL fc_7                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL delayMatch4_reg                  : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL Switch_on6_out1_1                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch5_reg                  : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL Switch_on1_out1_1                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch6_reg                  : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL Switch_on2_out1_1                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch7_reg                  : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL Switch_on3_out1_1                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch8_reg                  : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL Switch_on4_out1_1                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch9_reg                  : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL Switch_on5_out1_1                : signed(17 DOWNTO 0);  -- sfix18_En11

BEGIN
  u_Detect_Rise_Positive : parallel_8_sim_vsd_and_park_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              U => curent_valid_in,
              Y => End_Cycle
              );

  u_Compare_To_Constant1 : parallel_8_sim_vsd_and_park_src_Compare_To_Constant1
    PORT MAP( u => std_logic_vector(Add1_out1_1),  -- sfix24_En20
              y => Compare_To_Constant1_out1
              );

  u_Compare_To_Constant : parallel_8_sim_vsd_and_park_src_Compare_To_Constant
    PORT MAP( u => std_logic_vector(Add1_out1_1),  -- sfix24_En20
              y => Compare_To_Constant_out1
              );

  u_Sine_HDL_Optimized1 : parallel_8_sim_vsd_and_park_src_Sine_HDL_Optimized1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              u => std_logic_vector(Delay7_out1),  -- sfix24_En20
              x => Sine,  -- sfix16_En14
              y => Cosine  -- sfix16_En14
              );

  u_MATLAB_Function : parallel_8_sim_vsd_and_park_src_MATLAB_Function
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              i_a1 => std_logic_vector(Switch_on6_out1),  -- sfix18_En11
              i_b1 => std_logic_vector(Switch_on1_out1),  -- sfix18_En11
              i_c1 => std_logic_vector(Switch_on2_out1),  -- sfix18_En11
              i_a2 => std_logic_vector(Switch_on3_out1),  -- sfix18_En11
              i_b2 => std_logic_vector(Switch_on4_out1),  -- sfix18_En11
              i_c2 => std_logic_vector(Switch_on5_out1),  -- sfix18_En11
              sin_theta_el => Sine,  -- sfix16_En14
              cos_theta_el => Cosine,  -- sfix16_En14
              i_alpha => i_alpha_1,  -- sfix39_En29
              i_beta => i_beta_1,  -- sfix39_En29
              i_x => i_x_1,  -- sfix39_En29
              i_y => i_y_1,  -- sfix39_En29
              i_0_plus => i_0_plus_1,  -- sfix39_En29
              i_0_minus => i_0_minus_1,  -- sfix39_En29
              i_d => i_d_1,  -- sfix56_En43
              i_q => i_q_1  -- sfix56_En43
              );

  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  enb <= clk_enable;

  i_a1_signed <= signed(i_a1);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch_on6_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch_on6_out1 <= Delay6_out1 WHEN switch_compare_1 = '0' ELSE
      i_a1_signed;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  i_b1_signed <= signed(i_b1);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1_1 = '0' ELSE
      i_b1_signed;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  i_c1_signed <= signed(i_c1);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_on2_out1 <= Delay2_out1 WHEN switch_compare_1_2 = '0' ELSE
      i_c1_signed;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  i_a2_signed <= signed(i_a2);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_on3_out1 <= Delay3_out1 WHEN switch_compare_1_3 = '0' ELSE
      i_a2_signed;

  
  switch_compare_1_4 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  i_b2_signed <= signed(i_b2);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch_on4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_on4_out1 <= Delay4_out1 WHEN switch_compare_1_4 = '0' ELSE
      i_b2_signed;

  
  switch_compare_1_5 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  i_c2_signed <= signed(i_c2);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch_on5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch_on5_out1 <= Delay5_out1 WHEN switch_compare_1_5 = '0' ELSE
      i_c2_signed;

  
  switch_compare_1_6 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  theta_el_signed <= signed(theta_el);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch_on8_out1 <= Delay8_out1 WHEN switch_compare_1_6 = '0' ELSE
      theta_el_signed;

  
  switch_compare_1_7 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  theta_el_offset_AXI_signed <= signed(theta_el_offset_AXI);

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay25_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay25_out1 <= Switch_on7_out1;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  
  Switch_on7_out1 <= Delay25_out1 WHEN switch_compare_1_7 = '0' ELSE
      theta_el_offset_AXI_signed;

  Add1_out1 <= Switch_on8_out1 - Switch_on7_out1;

  Add1_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add1_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add1_out1_1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Add1_out_pipe_process;


  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Compare_To_Constant_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Compare_To_Constant_out1_1 <= Compare_To_Constant_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  switch_compare_1_8 <= '1' WHEN Compare_To_Constant_out1_1 > '0' ELSE
      '0';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add1_out1_2 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add1_out1_2 <= Add1_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  Constant_out1 <= to_signed(16#6487ED#, 24);

  Add2_out1 <= Add1_out1_1 - Constant_out1;

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Compare_To_Constant1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Compare_To_Constant1_out1_1 <= Compare_To_Constant1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  
  switch_compare_1_9 <= '1' WHEN Compare_To_Constant1_out1_1 > '0' ELSE
      '0';

  Add2_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add2_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add2_out1_1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS Add2_out_pipe_process;


  
  Switch_out1 <= Add1_out1_2 WHEN switch_compare_1_8 = '0' ELSE
      Add2_out1_1;

  Constant1_out1 <= to_signed(16#6487ED#, 24);

  Add3_out1 <= Add1_out1_1 + Constant1_out1;

  Add3_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add3_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add3_out1_1 <= Add3_out1;
      END IF;
    END IF;
  END PROCESS Add3_out_pipe_process;


  
  End_Cycle_1 <= Switch_out1 WHEN switch_compare_1_9 = '0' ELSE
      Add3_out1_1;

  Gain1_mul_temp <= to_signed(16#028BE6#, 24) * End_Cycle_1;
  Gain1_out1 <= Gain1_mul_temp(43 DOWNTO 20);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  i_alpha_signed <= signed(i_alpha_1);

  fc <= i_alpha_signed(35 DOWNTO 18);

  i_alpha <= std_logic_vector(fc);

  i_alpha_axi <= std_logic_vector(fc);

  i_beta_signed <= signed(i_beta_1);

  fc_1 <= i_beta_signed(35 DOWNTO 18);

  i_beta <= std_logic_vector(fc_1);

  i_beta_axi <= std_logic_vector(fc_1);

  i_d_signed <= signed(i_d_1);

  fc_2 <= i_d_signed(49 DOWNTO 32);

  i_d <= std_logic_vector(fc_2);

  i_d_axi <= std_logic_vector(fc_2);

  i_q_signed <= signed(i_q_1);

  fc_3 <= i_q_signed(49 DOWNTO 32);

  i_q <= std_logic_vector(fc_3);

  i_q_axi <= std_logic_vector(fc_3);

  i_x_signed <= signed(i_x_1);

  fc_4 <= i_x_signed(35 DOWNTO 18);

  i_x <= std_logic_vector(fc_4);

  i_x_axi <= std_logic_vector(fc_4);

  i_y_signed <= signed(i_y_1);

  fc_5 <= i_y_signed(35 DOWNTO 18);

  i_y <= std_logic_vector(fc_5);

  i_y_axi <= std_logic_vector(fc_5);

  i_0_plus_signed <= signed(i_0_plus_1);

  fc_6 <= i_0_plus_signed(35 DOWNTO 18);

  i_0_plus <= std_logic_vector(fc_6);

  i_0_plus_axi <= std_logic_vector(fc_6);

  i_0_minus_signed <= signed(i_0_minus_1);

  fc_7 <= i_0_minus_signed(35 DOWNTO 18);

  i_0_minus <= std_logic_vector(fc_7);

  i_0_minus_axi <= std_logic_vector(fc_7);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= End_Cycle;
        delayMatch3_reg(1 TO 2) <= delayMatch3_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  End_Cycle_2 <= delayMatch3_reg(2);

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch4_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= Switch_on6_out1;
        delayMatch4_reg(1 TO 2) <= delayMatch4_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Switch_on6_out1_1 <= delayMatch4_reg(2);

  i_a1_axi <= std_logic_vector(Switch_on6_out1_1);

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch5_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= Switch_on1_out1;
        delayMatch5_reg(1 TO 2) <= delayMatch5_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  Switch_on1_out1_1 <= delayMatch5_reg(2);

  i_b1_axi <= std_logic_vector(Switch_on1_out1_1);

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch6_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= Switch_on2_out1;
        delayMatch6_reg(1 TO 2) <= delayMatch6_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  Switch_on2_out1_1 <= delayMatch6_reg(2);

  i_c1_axi <= std_logic_vector(Switch_on2_out1_1);

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch7_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        delayMatch7_reg(0) <= Switch_on3_out1;
        delayMatch7_reg(1 TO 2) <= delayMatch7_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Switch_on3_out1_1 <= delayMatch7_reg(2);

  i_a2_axi <= std_logic_vector(Switch_on3_out1_1);

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch8_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= Switch_on4_out1;
        delayMatch8_reg(1 TO 2) <= delayMatch8_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  Switch_on4_out1_1 <= delayMatch8_reg(2);

  i_b2_axi <= std_logic_vector(Switch_on4_out1_1);

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch9_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        delayMatch9_reg(0) <= Switch_on5_out1;
        delayMatch9_reg(1 TO 2) <= delayMatch9_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  Switch_on5_out1_1 <= delayMatch9_reg(2);

  i_c2_axi <= std_logic_vector(Switch_on5_out1_1);

  ce_out <= clk_enable;

  done_vsd_and_park <= End_Cycle_2;

END rtl;

