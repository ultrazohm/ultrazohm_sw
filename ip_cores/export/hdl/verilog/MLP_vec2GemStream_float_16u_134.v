// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_vec2GemStream_float_16u_134 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_m_dout,
        p_m_empty_n,
        p_m_read,
        p_in_address0,
        p_in_ce0,
        p_in_q0,
        p_in_address1,
        p_in_ce1,
        p_in_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_pp0_stage0 = 11'd512;
parameter    ap_ST_fsm_state12 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [511:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_m_dout;
input   p_m_empty_n;
output   p_m_read;
output  [3:0] p_in_address0;
output   p_in_ce0;
input  [31:0] p_in_q0;
output  [3:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_out_write;
reg p_m_read;
reg[3:0] p_in_address0;
reg p_in_ce0;
reg[3:0] p_in_address1;
reg p_in_ce1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln86_reg_648;
reg    p_m_blk_n;
wire    ap_CS_fsm_state9;
reg   [59:0] indvar_flatten_reg_257;
reg   [27:0] i_reg_268;
reg    ap_block_state1;
reg   [31:0] l_val_m_Val_1_reg_428;
wire    ap_CS_fsm_state2;
reg   [31:0] l_val_m_Val_2_reg_443;
wire    ap_CS_fsm_state3;
reg   [31:0] l_val_m_Val_3_reg_448;
reg   [31:0] l_val_m_Val_4_reg_463;
wire    ap_CS_fsm_state4;
reg   [31:0] l_val_m_Val_5_reg_468;
reg   [31:0] l_val_m_Val_6_reg_483;
wire    ap_CS_fsm_state5;
reg   [31:0] l_val_m_Val_7_reg_488;
reg   [31:0] l_val_m_Val_8_reg_503;
wire    ap_CS_fsm_state6;
reg   [31:0] l_val_m_Val_9_reg_508;
reg   [31:0] l_val_m_Val_10_reg_523;
wire    ap_CS_fsm_state7;
reg   [31:0] l_val_m_Val_11_reg_528;
reg   [31:0] l_val_m_Val_12_reg_543;
wire    ap_CS_fsm_state8;
reg   [31:0] l_val_m_Val_13_reg_548;
wire   [27:0] trunc_ln_fu_279_p4;
reg   [27:0] trunc_ln_reg_563;
wire   [31:0] l_v_1_fu_289_p1;
reg   [31:0] l_v_1_reg_568;
wire   [31:0] l_v_2_fu_292_p1;
reg   [31:0] l_v_2_reg_573;
wire   [31:0] l_v_3_fu_295_p1;
reg   [31:0] l_v_3_reg_578;
wire   [31:0] l_v_4_fu_298_p1;
reg   [31:0] l_v_4_reg_583;
wire   [31:0] l_v_5_fu_301_p1;
reg   [31:0] l_v_5_reg_588;
wire   [31:0] l_v_6_fu_304_p1;
reg   [31:0] l_v_6_reg_593;
wire   [31:0] l_v_7_fu_307_p1;
reg   [31:0] l_v_7_reg_598;
wire   [31:0] l_v_8_fu_310_p1;
reg   [31:0] l_v_8_reg_603;
wire   [31:0] l_v_9_fu_313_p1;
reg   [31:0] l_v_9_reg_608;
wire   [31:0] l_v_10_fu_316_p1;
reg   [31:0] l_v_10_reg_613;
wire   [31:0] l_v_11_fu_319_p1;
reg   [31:0] l_v_11_reg_618;
wire   [31:0] l_v_12_fu_322_p1;
reg   [31:0] l_v_12_reg_623;
wire   [31:0] l_v_13_fu_325_p1;
reg   [31:0] l_v_13_reg_628;
wire   [31:0] l_v_14_fu_328_p1;
reg   [31:0] l_v_14_reg_633;
wire   [31:0] l_v_15_fu_332_p1;
reg   [31:0] l_v_15_reg_638;
wire   [59:0] bound_fu_344_p2;
reg   [59:0] bound_reg_643;
wire   [0:0] icmp_ln86_fu_350_p2;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [59:0] add_ln86_fu_355_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [27:0] add_ln87_fu_391_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
wire   [63:0] zext_ln92_fu_386_p1;
reg    ap_block_pp0_stage0_01001;
wire   [27:0] bound_fu_344_p0;
wire   [31:0] bound_fu_344_p1;
wire   [0:0] icmp_ln87_fu_361_p2;
wire   [27:0] select_ln86_fu_366_p3;
wire   [0:0] empty_fu_374_p1;
wire   [4:0] tmp_1_fu_378_p3;
wire   [31:0] l_v_fu_397_p1;
wire    ap_CS_fsm_state12;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [59:0] bound_fu_344_p00;
wire   [59:0] bound_fu_344_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

MLP_mul_28ns_32ns_60_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 60 ))
mul_28ns_32ns_60_1_1_U221(
    .din0(bound_fu_344_p0),
    .din1(bound_fu_344_p1),
    .dout(bound_fu_344_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state10))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((p_m_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((p_m_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln86_fu_350_p2 == 1'd0))) begin
        i_reg_268 <= add_ln87_fu_391_p2;
    end else if (((p_m_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_reg_268 <= 28'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln86_fu_350_p2 == 1'd0))) begin
        indvar_flatten_reg_257 <= add_ln86_fu_355_p2;
    end else if (((p_m_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        indvar_flatten_reg_257 <= 60'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((p_m_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        bound_reg_643 <= bound_fu_344_p2;
        l_v_10_reg_613 <= l_v_10_fu_316_p1;
        l_v_11_reg_618 <= l_v_11_fu_319_p1;
        l_v_12_reg_623 <= l_v_12_fu_322_p1;
        l_v_13_reg_628 <= l_v_13_fu_325_p1;
        l_v_14_reg_633 <= l_v_14_fu_328_p1;
        l_v_15_reg_638 <= l_v_15_fu_332_p1;
        l_v_1_reg_568 <= l_v_1_fu_289_p1;
        l_v_2_reg_573 <= l_v_2_fu_292_p1;
        l_v_3_reg_578 <= l_v_3_fu_295_p1;
        l_v_4_reg_583 <= l_v_4_fu_298_p1;
        l_v_5_reg_588 <= l_v_5_fu_301_p1;
        l_v_6_reg_593 <= l_v_6_fu_304_p1;
        l_v_7_reg_598 <= l_v_7_fu_307_p1;
        l_v_8_reg_603 <= l_v_8_fu_310_p1;
        l_v_9_reg_608 <= l_v_9_fu_313_p1;
        trunc_ln_reg_563 <= {{p_m_dout[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_reg_648 <= icmp_ln86_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        l_val_m_Val_10_reg_523 <= p_in_q0;
        l_val_m_Val_11_reg_528 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        l_val_m_Val_12_reg_543 <= p_in_q0;
        l_val_m_Val_13_reg_548 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        l_val_m_Val_1_reg_428 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        l_val_m_Val_2_reg_443 <= p_in_q1;
        l_val_m_Val_3_reg_448 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l_val_m_Val_4_reg_463 <= p_in_q0;
        l_val_m_Val_5_reg_468 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        l_val_m_Val_6_reg_483 <= p_in_q0;
        l_val_m_Val_7_reg_488 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        l_val_m_Val_8_reg_503 <= p_in_q0;
        l_val_m_Val_9_reg_508 <= p_in_q1;
    end
end

always @ (*) begin
    if ((icmp_ln86_fu_350_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_in_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_in_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_in_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_in_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_in_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_in_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_in_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_in_address0 = 64'd1;
    end else begin
        p_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_in_address1 = zext_ln92_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_in_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_in_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_in_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_in_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_in_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_in_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_in_address1 = 64'd2;
    end else begin
        p_in_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_in_ce0 = 1'b1;
    end else begin
        p_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_m_blk_n = p_m_empty_n;
    end else begin
        p_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_m_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        p_m_read = 1'b1;
    end else begin
        p_m_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_648 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_648 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((p_m_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln86_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln86_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_355_p2 = (indvar_flatten_reg_257 + 60'd1);

assign add_ln87_fu_391_p2 = (28'd1 + select_ln86_fu_366_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln86_reg_648 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln86_reg_648 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln86_reg_648 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((icmp_ln86_reg_648 == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_344_p0 = bound_fu_344_p00;

assign bound_fu_344_p00 = trunc_ln_fu_279_p4;

assign bound_fu_344_p1 = bound_fu_344_p10;

assign bound_fu_344_p10 = p_m_dout;

assign empty_fu_374_p1 = select_ln86_fu_366_p3[0:0];

assign icmp_ln86_fu_350_p2 = ((indvar_flatten_reg_257 == bound_reg_643) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_361_p2 = ((i_reg_268 == trunc_ln_reg_563) ? 1'b1 : 1'b0);

assign l_v_10_fu_316_p1 = l_val_m_Val_10_reg_523;

assign l_v_11_fu_319_p1 = l_val_m_Val_11_reg_528;

assign l_v_12_fu_322_p1 = l_val_m_Val_12_reg_543;

assign l_v_13_fu_325_p1 = l_val_m_Val_13_reg_548;

assign l_v_14_fu_328_p1 = p_in_q0;

assign l_v_15_fu_332_p1 = p_in_q1;

assign l_v_1_fu_289_p1 = l_val_m_Val_1_reg_428;

assign l_v_2_fu_292_p1 = l_val_m_Val_2_reg_443;

assign l_v_3_fu_295_p1 = l_val_m_Val_3_reg_448;

assign l_v_4_fu_298_p1 = l_val_m_Val_4_reg_463;

assign l_v_5_fu_301_p1 = l_val_m_Val_5_reg_468;

assign l_v_6_fu_304_p1 = l_val_m_Val_6_reg_483;

assign l_v_7_fu_307_p1 = l_val_m_Val_7_reg_488;

assign l_v_8_fu_310_p1 = l_val_m_Val_8_reg_503;

assign l_v_9_fu_313_p1 = l_val_m_Val_9_reg_508;

assign l_v_fu_397_p1 = p_in_q1;

assign p_out_din = {{{{{{{{{{{{{{{{l_v_15_reg_638}, {l_v_14_reg_633}}, {l_v_13_reg_628}}, {l_v_12_reg_623}}, {l_v_11_reg_618}}, {l_v_10_reg_613}}, {l_v_9_reg_608}}, {l_v_8_reg_603}}, {l_v_7_reg_598}}, {l_v_6_reg_593}}, {l_v_5_reg_588}}, {l_v_4_reg_583}}, {l_v_3_reg_578}}, {l_v_2_reg_573}}, {l_v_1_reg_568}}, {l_v_fu_397_p1}};

assign select_ln86_fu_366_p3 = ((icmp_ln87_fu_361_p2[0:0] === 1'b1) ? 28'd0 : i_reg_268);

assign tmp_1_fu_378_p3 = {{empty_fu_374_p1}, {4'd0}};

assign trunc_ln_fu_279_p4 = {{p_m_dout[31:4]}};

assign zext_ln92_fu_386_p1 = tmp_1_fu_378_p3;

endmodule //MLP_vec2GemStream_float_16u_134
