// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_accumulate_float_4u_126 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_values_dout,
        p_values_empty_n,
        p_values_read,
        p_accumulator_address0,
        p_accumulator_ce0,
        p_accumulator_we0,
        p_accumulator_d0,
        p_accumulator_q0,
        p_accumulator_address1,
        p_accumulator_ce1,
        p_accumulator_we1,
        p_accumulator_d1,
        p_accumulator_q1,
        p_size_dout,
        p_size_empty_n,
        p_size_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state14 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] p_values_dout;
input   p_values_empty_n;
output   p_values_read;
output  [15:0] p_accumulator_address0;
output   p_accumulator_ce0;
output   p_accumulator_we0;
output  [31:0] p_accumulator_d0;
input  [31:0] p_accumulator_q0;
output  [15:0] p_accumulator_address1;
output   p_accumulator_ce1;
output   p_accumulator_we1;
output  [31:0] p_accumulator_d1;
input  [31:0] p_accumulator_q1;
input  [31:0] p_size_dout;
input   p_size_empty_n;
output   p_size_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_values_read;
reg[15:0] p_accumulator_address0;
reg p_accumulator_ce0;
reg p_accumulator_we0;
reg[31:0] p_accumulator_d0;
reg[15:0] p_accumulator_address1;
reg p_accumulator_ce1;
reg p_accumulator_we1;
reg p_size_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_values_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln409_reg_269;
reg    p_size_blk_n;
reg   [29:0] i_reg_125;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] reg_140;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_state12_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln409_reg_269_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_state13_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg   [29:0] trunc_ln_reg_264;
reg    ap_block_state1;
wire   [0:0] icmp_ln409_fu_155_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln409_reg_269_pp0_iter2_reg;
wire   [29:0] add_ln409_fu_160_p2;
reg   [29:0] add_ln409_reg_273;
wire   [15:0] tmp_s_fu_170_p3;
reg   [15:0] tmp_s_reg_278;
reg   [15:0] p_accumulator_addr_reg_284;
reg   [15:0] p_accumulator_addr_reg_284_pp0_iter1_reg;
reg   [15:0] p_accumulator_addr_10_reg_289;
reg   [15:0] p_accumulator_addr_10_reg_289_pp0_iter1_reg;
reg   [15:0] p_accumulator_addr_10_reg_289_pp0_iter2_reg;
wire   [31:0] trunc_ln674_fu_194_p1;
reg   [31:0] trunc_ln674_reg_295;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] p_Result_i_reg_300;
reg   [31:0] p_Result_22_i_reg_305;
reg   [31:0] p_Result_23_i_reg_310;
reg   [31:0] p_accumulator_load_reg_315;
reg   [31:0] p_accumulator_load_10_reg_320;
reg   [15:0] p_accumulator_addr_11_reg_325;
reg   [15:0] p_accumulator_addr_11_reg_325_pp0_iter1_reg;
reg   [15:0] p_accumulator_addr_11_reg_325_pp0_iter2_reg;
reg   [15:0] p_accumulator_addr_12_reg_331;
reg   [15:0] p_accumulator_addr_12_reg_331_pp0_iter1_reg;
reg   [15:0] p_accumulator_addr_12_reg_331_pp0_iter2_reg;
wire   [31:0] bitcast_ln101_fu_248_p1;
reg   [31:0] p_accumulator_load_11_reg_341;
reg   [31:0] p_accumulator_load_12_reg_346;
wire   [31:0] bitcast_ln101_29_fu_252_p1;
wire   [31:0] bitcast_ln101_30_fu_256_p1;
wire   [31:0] bitcast_ln101_31_fu_260_p1;
reg   [31:0] add3_2_i_reg_366;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] add3_3_i_reg_371;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage3_subdone;
reg   [29:0] ap_phi_mux_i_phi_fu_129_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln416_fu_178_p1;
wire   [63:0] zext_ln416_10_fu_189_p1;
wire   [63:0] zext_ln416_11_fu_233_p1;
wire   [63:0] zext_ln416_12_fu_243_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_136_p0;
reg   [31:0] grp_fu_136_p1;
wire   [13:0] empty_fu_166_p1;
wire   [15:0] or_ln416_fu_183_p2;
wire   [15:0] or_ln416_7_fu_228_p2;
wire   [15:0] or_ln416_8_fu_238_p2;
reg    grp_fu_136_ce;
wire    ap_CS_fsm_state14;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U433(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_136_p0),
    .din1(grp_fu_136_p1),
    .ce(grp_fu_136_ce),
    .dout(grp_fu_136_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_size_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((p_size_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_size_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_125 <= 30'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln409_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_125 <= add_ln409_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln409_reg_269_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add3_2_i_reg_366 <= grp_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln409_reg_269_pp0_iter2_reg == 1'd0))) begin
        add3_3_i_reg_371 <= grp_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln409_reg_273 <= add_ln409_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln409_reg_269 <= icmp_ln409_fu_155_p2;
        icmp_ln409_reg_269_pp0_iter1_reg <= icmp_ln409_reg_269;
        icmp_ln409_reg_269_pp0_iter2_reg <= icmp_ln409_reg_269_pp0_iter1_reg;
        p_accumulator_addr_10_reg_289_pp0_iter1_reg[15 : 2] <= p_accumulator_addr_10_reg_289[15 : 2];
        p_accumulator_addr_10_reg_289_pp0_iter2_reg[15 : 2] <= p_accumulator_addr_10_reg_289_pp0_iter1_reg[15 : 2];
        p_accumulator_addr_reg_284_pp0_iter1_reg[15 : 2] <= p_accumulator_addr_reg_284[15 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln409_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Result_22_i_reg_305 <= {{p_values_dout[95:64]}};
        p_Result_23_i_reg_310 <= {{p_values_dout[127:96]}};
        p_Result_i_reg_300 <= {{p_values_dout[63:32]}};
        p_accumulator_addr_11_reg_325[15 : 2] <= zext_ln416_11_fu_233_p1[15 : 2];
        p_accumulator_addr_12_reg_331[15 : 2] <= zext_ln416_12_fu_243_p1[15 : 2];
        trunc_ln674_reg_295 <= trunc_ln674_fu_194_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln409_fu_155_p2 == 1'd0))) begin
        p_accumulator_addr_10_reg_289[15 : 2] <= zext_ln416_10_fu_189_p1[15 : 2];
        p_accumulator_addr_reg_284[15 : 2] <= zext_ln416_fu_178_p1[15 : 2];
        tmp_s_reg_278[15 : 2] <= tmp_s_fu_170_p3[15 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_accumulator_addr_11_reg_325_pp0_iter1_reg[15 : 2] <= p_accumulator_addr_11_reg_325[15 : 2];
        p_accumulator_addr_11_reg_325_pp0_iter2_reg[15 : 2] <= p_accumulator_addr_11_reg_325_pp0_iter1_reg[15 : 2];
        p_accumulator_addr_12_reg_331_pp0_iter1_reg[15 : 2] <= p_accumulator_addr_12_reg_331[15 : 2];
        p_accumulator_addr_12_reg_331_pp0_iter2_reg[15 : 2] <= p_accumulator_addr_12_reg_331_pp0_iter1_reg[15 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln409_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_accumulator_load_10_reg_320 <= p_accumulator_q0;
        p_accumulator_load_reg_315 <= p_accumulator_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln409_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_accumulator_load_11_reg_341 <= p_accumulator_q1;
        p_accumulator_load_12_reg_346 <= p_accumulator_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln409_reg_269_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln409_reg_269_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_140 <= grp_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_size_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln_reg_264 <= {{p_size_dout[31:2]}};
    end
end

always @ (*) begin
    if ((icmp_ln409_fu_155_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln409_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_129_p4 = add_ln409_reg_273;
    end else begin
        ap_phi_mux_i_phi_fu_129_p4 = i_reg_125;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_136_ce = 1'b1;
    end else begin
        grp_fu_136_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_136_p0 = p_accumulator_load_12_reg_346;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_136_p0 = p_accumulator_load_11_reg_341;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_136_p0 = p_accumulator_load_10_reg_320;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_136_p0 = p_accumulator_load_reg_315;
    end else begin
        grp_fu_136_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_136_p1 = bitcast_ln101_31_fu_260_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_136_p1 = bitcast_ln101_30_fu_256_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_136_p1 = bitcast_ln101_29_fu_252_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_136_p1 = bitcast_ln101_fu_248_p1;
    end else begin
        grp_fu_136_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_accumulator_address0 = p_accumulator_addr_12_reg_331_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_accumulator_address0 = p_accumulator_addr_11_reg_325_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_accumulator_address0 = zext_ln416_12_fu_243_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_accumulator_address0 = zext_ln416_10_fu_189_p1;
    end else begin
        p_accumulator_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_accumulator_address1 = p_accumulator_addr_10_reg_289_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_accumulator_address1 = p_accumulator_addr_reg_284_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_accumulator_address1 = zext_ln416_11_fu_233_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_accumulator_address1 = zext_ln416_fu_178_p1;
    end else begin
        p_accumulator_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        p_accumulator_ce0 = 1'b1;
    end else begin
        p_accumulator_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_accumulator_ce1 = 1'b1;
    end else begin
        p_accumulator_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_accumulator_d0 = add3_3_i_reg_371;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_accumulator_d0 = add3_2_i_reg_366;
        end else begin
            p_accumulator_d0 = 'bx;
        end
    end else begin
        p_accumulator_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln409_reg_269_pp0_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln409_reg_269_pp0_iter2_reg == 1'd0)))) begin
        p_accumulator_we0 = 1'b1;
    end else begin
        p_accumulator_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln409_reg_269_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln409_reg_269_pp0_iter2_reg == 1'd0)))) begin
        p_accumulator_we1 = 1'b1;
    end else begin
        p_accumulator_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_size_blk_n = p_size_empty_n;
    end else begin
        p_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_size_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_size_read = 1'b1;
    end else begin
        p_size_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln409_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_values_blk_n = p_values_empty_n;
    end else begin
        p_values_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln409_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_values_read = 1'b1;
    end else begin
        p_values_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_size_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln409_fu_155_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln409_fu_155_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln409_fu_160_p2 = (ap_phi_mux_i_phi_fu_129_p4 + 30'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln409_reg_269 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_values_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln409_reg_269 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_values_empty_n == 1'b0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((p_size_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln409_reg_269 == 1'd0) & (p_values_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln101_29_fu_252_p1 = p_Result_i_reg_300;

assign bitcast_ln101_30_fu_256_p1 = p_Result_22_i_reg_305;

assign bitcast_ln101_31_fu_260_p1 = p_Result_23_i_reg_310;

assign bitcast_ln101_fu_248_p1 = trunc_ln674_reg_295;

assign empty_fu_166_p1 = ap_phi_mux_i_phi_fu_129_p4[13:0];

assign icmp_ln409_fu_155_p2 = ((ap_phi_mux_i_phi_fu_129_p4 == trunc_ln_reg_264) ? 1'b1 : 1'b0);

assign or_ln416_7_fu_228_p2 = (tmp_s_reg_278 | 16'd2);

assign or_ln416_8_fu_238_p2 = (tmp_s_reg_278 | 16'd3);

assign or_ln416_fu_183_p2 = (tmp_s_fu_170_p3 | 16'd1);

assign p_accumulator_d1 = reg_140;

assign tmp_s_fu_170_p3 = {{empty_fu_166_p1}, {2'd0}};

assign trunc_ln674_fu_194_p1 = p_values_dout[31:0];

assign zext_ln416_10_fu_189_p1 = or_ln416_fu_183_p2;

assign zext_ln416_11_fu_233_p1 = or_ln416_7_fu_228_p2;

assign zext_ln416_12_fu_243_p1 = or_ln416_8_fu_238_p2;

assign zext_ln416_fu_178_p1 = tmp_s_fu_170_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_278[1:0] <= 2'b00;
    p_accumulator_addr_reg_284[1:0] <= 2'b00;
    p_accumulator_addr_reg_284_pp0_iter1_reg[1:0] <= 2'b00;
    p_accumulator_addr_10_reg_289[1:0] <= 2'b01;
    p_accumulator_addr_10_reg_289_pp0_iter1_reg[1:0] <= 2'b01;
    p_accumulator_addr_10_reg_289_pp0_iter2_reg[1:0] <= 2'b01;
    p_accumulator_addr_11_reg_325[1:0] <= 2'b10;
    p_accumulator_addr_11_reg_325_pp0_iter1_reg[1:0] <= 2'b10;
    p_accumulator_addr_11_reg_325_pp0_iter2_reg[1:0] <= 2'b10;
    p_accumulator_addr_12_reg_331[1:0] <= 2'b11;
    p_accumulator_addr_12_reg_331_pp0_iter1_reg[1:0] <= 2'b11;
    p_accumulator_addr_12_reg_331_pp0_iter2_reg[1:0] <= 2'b11;
end

endmodule //BGD_accumulate_float_4u_126
