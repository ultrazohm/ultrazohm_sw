// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uz_FOC_sample_uz_FOC_SpaceVector_Limitation_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        self_address0,
        self_ce0,
        self_we0,
        self_d0,
        u_input_Volts_0,
        u_input_Volts_1,
        V_dc_volts,
        omega_el_rad_per_sec,
        i_actual_Ampere_1,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 173'd1;
parameter    ap_ST_fsm_state2 = 173'd2;
parameter    ap_ST_fsm_state3 = 173'd4;
parameter    ap_ST_fsm_state4 = 173'd8;
parameter    ap_ST_fsm_state5 = 173'd16;
parameter    ap_ST_fsm_state6 = 173'd32;
parameter    ap_ST_fsm_state7 = 173'd64;
parameter    ap_ST_fsm_state8 = 173'd128;
parameter    ap_ST_fsm_state9 = 173'd256;
parameter    ap_ST_fsm_state10 = 173'd512;
parameter    ap_ST_fsm_state11 = 173'd1024;
parameter    ap_ST_fsm_state12 = 173'd2048;
parameter    ap_ST_fsm_state13 = 173'd4096;
parameter    ap_ST_fsm_state14 = 173'd8192;
parameter    ap_ST_fsm_state15 = 173'd16384;
parameter    ap_ST_fsm_state16 = 173'd32768;
parameter    ap_ST_fsm_state17 = 173'd65536;
parameter    ap_ST_fsm_state18 = 173'd131072;
parameter    ap_ST_fsm_state19 = 173'd262144;
parameter    ap_ST_fsm_state20 = 173'd524288;
parameter    ap_ST_fsm_state21 = 173'd1048576;
parameter    ap_ST_fsm_state22 = 173'd2097152;
parameter    ap_ST_fsm_state23 = 173'd4194304;
parameter    ap_ST_fsm_state24 = 173'd8388608;
parameter    ap_ST_fsm_state25 = 173'd16777216;
parameter    ap_ST_fsm_state26 = 173'd33554432;
parameter    ap_ST_fsm_state27 = 173'd67108864;
parameter    ap_ST_fsm_state28 = 173'd134217728;
parameter    ap_ST_fsm_state29 = 173'd268435456;
parameter    ap_ST_fsm_state30 = 173'd536870912;
parameter    ap_ST_fsm_state31 = 173'd1073741824;
parameter    ap_ST_fsm_state32 = 173'd2147483648;
parameter    ap_ST_fsm_state33 = 173'd4294967296;
parameter    ap_ST_fsm_state34 = 173'd8589934592;
parameter    ap_ST_fsm_state35 = 173'd17179869184;
parameter    ap_ST_fsm_state36 = 173'd34359738368;
parameter    ap_ST_fsm_state37 = 173'd68719476736;
parameter    ap_ST_fsm_state38 = 173'd137438953472;
parameter    ap_ST_fsm_state39 = 173'd274877906944;
parameter    ap_ST_fsm_state40 = 173'd549755813888;
parameter    ap_ST_fsm_state41 = 173'd1099511627776;
parameter    ap_ST_fsm_state42 = 173'd2199023255552;
parameter    ap_ST_fsm_state43 = 173'd4398046511104;
parameter    ap_ST_fsm_state44 = 173'd8796093022208;
parameter    ap_ST_fsm_state45 = 173'd17592186044416;
parameter    ap_ST_fsm_state46 = 173'd35184372088832;
parameter    ap_ST_fsm_state47 = 173'd70368744177664;
parameter    ap_ST_fsm_state48 = 173'd140737488355328;
parameter    ap_ST_fsm_state49 = 173'd281474976710656;
parameter    ap_ST_fsm_state50 = 173'd562949953421312;
parameter    ap_ST_fsm_state51 = 173'd1125899906842624;
parameter    ap_ST_fsm_state52 = 173'd2251799813685248;
parameter    ap_ST_fsm_state53 = 173'd4503599627370496;
parameter    ap_ST_fsm_state54 = 173'd9007199254740992;
parameter    ap_ST_fsm_state55 = 173'd18014398509481984;
parameter    ap_ST_fsm_state56 = 173'd36028797018963968;
parameter    ap_ST_fsm_state57 = 173'd72057594037927936;
parameter    ap_ST_fsm_state58 = 173'd144115188075855872;
parameter    ap_ST_fsm_state59 = 173'd288230376151711744;
parameter    ap_ST_fsm_state60 = 173'd576460752303423488;
parameter    ap_ST_fsm_state61 = 173'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 173'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 173'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 173'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 173'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 173'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 173'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 173'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 173'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 173'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 173'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 173'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 173'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 173'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 173'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 173'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 173'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 173'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 173'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 173'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 173'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 173'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 173'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 173'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 173'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 173'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 173'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 173'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 173'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 173'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 173'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 173'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 173'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 173'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 173'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 173'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 173'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 173'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 173'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 173'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 173'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 173'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 173'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 173'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 173'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 173'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 173'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 173'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 173'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 173'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 173'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 173'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 173'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 173'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 173'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 173'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 173'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 173'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 173'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 173'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 173'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 173'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 173'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 173'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 173'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 173'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 173'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 173'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 173'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 173'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 173'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 173'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 173'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 173'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 173'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 173'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 173'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 173'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 173'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 173'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 173'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 173'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 173'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 173'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 173'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 173'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 173'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 173'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 173'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 173'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 173'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 173'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 173'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 173'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 173'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 173'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 173'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 173'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 173'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 173'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 173'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 173'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 173'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 173'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 173'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 173'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 173'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 173'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 173'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 173'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 173'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 173'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 173'd5986310706507378352962293074805895248510699696029696;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] self_address0;
output   self_ce0;
output  [27:0] self_we0;
output  [223:0] self_d0;
input  [31:0] u_input_Volts_0;
input  [31:0] u_input_Volts_1;
input  [31:0] V_dc_volts;
input  [31:0] omega_el_rad_per_sec;
input  [31:0] i_actual_Ampere_1;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg self_ce0;
reg[27:0] self_we0;
reg[223:0] self_d0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [172:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_pow_generic_float_s_fu_159_ap_return;
reg   [31:0] reg_255;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state158;
wire   [31:0] grp_pow_generic_float_s_fu_179_ap_return;
reg   [31:0] reg_261;
wire   [31:0] grp_fu_199_p2;
reg   [31:0] reg_266;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state162;
wire   [31:0] grp_fu_250_p2;
reg   [31:0] reg_271;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state170;
wire   [31:0] grp_fu_203_p2;
reg   [31:0] reg_277;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state104;
wire   [31:0] grp_fu_208_p2;
reg   [31:0] U_SV_max_reg_1077;
wire   [0:0] or_ln35_fu_313_p2;
reg   [0:0] or_ln35_reg_1086;
wire   [0:0] or_ln35_2_fu_349_p2;
reg   [0:0] or_ln35_2_reg_1092;
wire   [31:0] sign_fu_391_p3;
wire    ap_CS_fsm_state29;
wire   [31:0] sign_2_fu_436_p3;
wire   [0:0] icmp_ln27_fu_481_p2;
reg   [0:0] icmp_ln27_reg_1108;
wire   [0:0] icmp_ln27_1_fu_487_p2;
reg   [0:0] icmp_ln27_1_reg_1113;
wire   [0:0] icmp_ln27_2_fu_493_p2;
reg   [0:0] icmp_ln27_2_reg_1118;
wire   [0:0] icmp_ln27_3_fu_499_p2;
reg   [0:0] icmp_ln27_3_reg_1123;
wire   [0:0] icmp_ln29_fu_523_p2;
reg   [0:0] icmp_ln29_reg_1128;
wire   [0:0] icmp_ln29_1_fu_529_p2;
reg   [0:0] icmp_ln29_1_reg_1133;
wire   [0:0] if_omega_equal_q_current_fu_549_p2;
reg   [0:0] if_omega_equal_q_current_reg_1138;
wire    ap_CS_fsm_state30;
wire   [0:0] and_ln29_1_fu_600_p2;
reg   [0:0] and_ln29_1_reg_1142;
wire   [31:0] bitcast_ln350_1_fu_617_p1;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln59_fu_654_p2;
reg   [0:0] icmp_ln59_reg_1151;
wire   [0:0] icmp_ln59_1_fu_660_p2;
reg   [0:0] icmp_ln59_1_reg_1156;
wire   [0:0] icmp_ln59_2_fu_666_p2;
reg   [0:0] icmp_ln59_2_reg_1161;
wire   [0:0] icmp_ln59_3_fu_672_p2;
reg   [0:0] icmp_ln59_3_reg_1166;
wire   [0:0] and_ln59_1_fu_692_p2;
reg   [0:0] and_ln59_1_reg_1171;
wire    ap_CS_fsm_state34;
wire   [31:0] sign_4_fu_771_p3;
reg   [31:0] sign_4_reg_1175;
wire   [31:0] select_ln60_1_fu_805_p3;
reg   [31:0] select_ln60_1_reg_1180;
wire    ap_CS_fsm_state67;
reg   [31:0] u_output_Volts_7_reg_1185;
wire    ap_CS_fsm_state70;
reg   [31:0] u_output_Volts_8_reg_1191;
wire    ap_CS_fsm_state101;
wire   [31:0] bitcast_ln350_fu_836_p1;
wire    ap_CS_fsm_state105;
wire   [0:0] icmp_ln47_fu_873_p2;
reg   [0:0] icmp_ln47_reg_1201;
wire   [0:0] icmp_ln47_1_fu_879_p2;
reg   [0:0] icmp_ln47_1_reg_1206;
wire   [0:0] icmp_ln47_2_fu_885_p2;
reg   [0:0] icmp_ln47_2_reg_1211;
wire   [0:0] icmp_ln47_3_fu_891_p2;
reg   [0:0] icmp_ln47_3_reg_1216;
wire   [0:0] and_ln47_1_fu_911_p2;
reg   [0:0] and_ln47_1_reg_1221;
wire    ap_CS_fsm_state106;
wire   [31:0] sign_3_fu_990_p3;
reg   [31:0] sign_3_reg_1225;
reg   [31:0] tmp_4_reg_1230;
wire    ap_CS_fsm_state122;
reg   [31:0] u_output_Volts_6_reg_1235;
wire    ap_CS_fsm_state137;
wire   [31:0] select_ln48_1_fu_1024_p3;
reg   [31:0] select_ln48_1_reg_1240;
wire    ap_CS_fsm_state139;
reg   [31:0] u_output_Volts_reg_1245;
wire    ap_CS_fsm_state142;
reg   [31:0] u_output_Volts_5_reg_1251;
wire    ap_CS_fsm_state173;
reg    grp_pow_generic_float_s_fu_159_ap_start;
wire    grp_pow_generic_float_s_fu_159_ap_done;
wire    grp_pow_generic_float_s_fu_159_ap_idle;
wire    grp_pow_generic_float_s_fu_159_ap_ready;
reg   [31:0] grp_pow_generic_float_s_fu_159_base_r;
reg    grp_pow_generic_float_s_fu_179_ap_start;
wire    grp_pow_generic_float_s_fu_179_ap_done;
wire    grp_pow_generic_float_s_fu_179_ap_idle;
wire    grp_pow_generic_float_s_fu_179_ap_ready;
reg   [31:0] grp_pow_generic_float_s_fu_179_base_r;
reg   [31:0] ap_phi_mux_u_output_Volts_11_phi_fu_132_p10;
reg   [31:0] u_output_Volts_11_reg_129;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state66;
reg   [31:0] ap_phi_mux_u_output_Volts_10_phi_fu_147_p10;
reg   [31:0] u_output_Volts_10_reg_144;
reg    grp_pow_generic_float_s_fu_159_ap_start_reg;
reg   [172:0] ap_NS_fsm;
wire    ap_NS_fsm_state35;
wire    ap_NS_fsm_state71;
wire    ap_NS_fsm_state107;
wire    ap_NS_fsm_state143;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state143;
reg    grp_pow_generic_float_s_fu_179_ap_start_reg;
reg   [31:0] grp_fu_199_p0;
reg   [31:0] grp_fu_199_p1;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state159;
reg   [31:0] grp_fu_203_p0;
reg   [31:0] grp_fu_203_p1;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state140;
wire    ap_CS_fsm_state171;
reg   [31:0] grp_fu_214_p0;
reg   [31:0] grp_fu_214_p1;
reg   [31:0] grp_fu_220_p0;
reg   [31:0] grp_fu_220_p1;
reg   [31:0] grp_fu_226_p0;
reg   [31:0] grp_fu_232_p0;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state163;
wire   [31:0] bitcast_ln35_fu_283_p1;
wire   [7:0] tmp_22_fu_287_p4;
wire   [22:0] trunc_ln35_fu_297_p1;
wire   [0:0] icmp_ln35_4_fu_307_p2;
wire   [0:0] icmp_ln35_fu_301_p2;
wire   [31:0] bitcast_ln35_2_fu_319_p1;
wire   [7:0] tmp_25_fu_323_p4;
wire   [22:0] trunc_ln35_2_fu_333_p1;
wire   [0:0] icmp_ln35_6_fu_343_p2;
wire   [0:0] icmp_ln35_5_fu_337_p2;
wire   [0:0] grp_fu_214_p2;
wire   [0:0] and_ln35_fu_355_p2;
wire   [0:0] grp_fu_220_p2;
wire   [0:0] grp_fu_226_p2;
wire   [0:0] xor_ln35_fu_368_p2;
wire   [0:0] xor_ln35_fu_374_p2;
wire   [0:0] and_ln35_fu_380_p2;
wire   [0:0] and_ln35_4_fu_386_p2;
wire   [31:0] select_ln35_fu_360_p3;
wire   [0:0] grp_fu_232_p2;
wire   [0:0] and_ln35_5_fu_400_p2;
wire   [0:0] grp_fu_238_p2;
wire   [0:0] grp_fu_244_p2;
wire   [0:0] xor_ln35_fu_413_p2;
wire   [0:0] xor_ln35_fu_419_p2;
wire   [0:0] and_ln35_fu_425_p2;
wire   [0:0] and_ln35_6_fu_431_p2;
wire   [31:0] select_ln35_5_fu_405_p3;
wire   [31:0] bitcast_ln27_fu_445_p1;
wire   [31:0] bitcast_ln27_1_fu_463_p1;
wire   [7:0] tmp_28_fu_449_p4;
wire   [22:0] trunc_ln27_fu_459_p1;
wire   [7:0] tmp_29_fu_467_p4;
wire   [22:0] trunc_ln27_1_fu_477_p1;
wire   [31:0] bitcast_ln29_fu_505_p1;
wire   [7:0] tmp_31_fu_509_p4;
wire   [22:0] trunc_ln29_fu_519_p1;
wire   [0:0] or_ln27_fu_535_p2;
wire   [0:0] or_ln27_1_fu_539_p2;
wire   [0:0] and_ln27_fu_543_p2;
wire   [31:0] bitcast_ln29_1_fu_555_p1;
wire   [7:0] tmp_32_fu_558_p4;
wire   [22:0] trunc_ln29_1_fu_568_p1;
wire   [0:0] icmp_ln29_3_fu_582_p2;
wire   [0:0] icmp_ln29_2_fu_576_p2;
wire   [0:0] or_ln29_fu_572_p2;
wire   [0:0] or_ln29_1_fu_588_p2;
wire   [0:0] and_ln29_fu_594_p2;
wire   [31:0] p_Val2_1_fu_606_p1;
wire   [30:0] p_Result_1_fu_609_p1;
wire   [31:0] zext_ln368_1_fu_613_p1;
wire   [31:0] bitcast_ln59_fu_636_p1;
wire   [7:0] tmp_40_fu_622_p4;
wire   [22:0] trunc_ln59_fu_632_p1;
wire   [7:0] tmp_41_fu_640_p4;
wire   [22:0] trunc_ln59_1_fu_650_p1;
wire   [0:0] or_ln59_fu_678_p2;
wire   [0:0] or_ln59_1_fu_682_p2;
wire   [0:0] and_ln59_fu_686_p2;
wire   [31:0] bitcast_ln35_4_fu_698_p1;
wire   [7:0] tmp_43_fu_701_p4;
wire   [22:0] trunc_ln35_4_fu_711_p1;
wire   [0:0] icmp_ln35_10_fu_721_p2;
wire   [0:0] icmp_ln35_9_fu_715_p2;
wire   [0:0] or_ln35_4_fu_727_p2;
wire   [0:0] and_ln35_9_fu_733_p2;
wire   [0:0] xor_ln35_fu_747_p2;
wire   [0:0] xor_ln35_fu_753_p2;
wire   [0:0] and_ln35_fu_759_p2;
wire   [0:0] and_ln35_10_fu_765_p2;
wire   [31:0] select_ln35_9_fu_739_p3;
wire   [0:0] xor_ln60_fu_787_p2;
wire   [0:0] xor_ln60_fu_793_p2;
wire   [0:0] and_ln60_fu_799_p2;
wire   [31:0] select_ln60_fu_779_p3;
wire   [31:0] p_Val2_s_fu_825_p1;
wire   [30:0] p_Result_s_fu_828_p1;
wire   [31:0] zext_ln368_fu_832_p1;
wire   [31:0] bitcast_ln47_fu_855_p1;
wire   [7:0] tmp_34_fu_841_p4;
wire   [22:0] trunc_ln47_fu_851_p1;
wire   [7:0] tmp_35_fu_859_p4;
wire   [22:0] trunc_ln47_1_fu_869_p1;
wire   [0:0] or_ln47_fu_897_p2;
wire   [0:0] or_ln47_1_fu_901_p2;
wire   [0:0] and_ln47_fu_905_p2;
wire   [31:0] bitcast_ln35_3_fu_917_p1;
wire   [7:0] tmp_37_fu_920_p4;
wire   [22:0] trunc_ln35_3_fu_930_p1;
wire   [0:0] icmp_ln35_8_fu_940_p2;
wire   [0:0] icmp_ln35_7_fu_934_p2;
wire   [0:0] or_ln35_3_fu_946_p2;
wire   [0:0] and_ln35_7_fu_952_p2;
wire   [0:0] xor_ln35_fu_966_p2;
wire   [0:0] xor_ln35_fu_972_p2;
wire   [0:0] and_ln35_fu_978_p2;
wire   [0:0] and_ln35_8_fu_984_p2;
wire   [31:0] select_ln35_7_fu_958_p3;
wire   [0:0] xor_ln48_fu_1006_p2;
wire   [0:0] xor_ln48_fu_1012_p2;
wire   [0:0] and_ln48_fu_1018_p2;
wire   [31:0] select_ln48_fu_998_p3;
reg   [1:0] grp_fu_199_opcode;
reg   [4:0] grp_fu_214_opcode;
reg   [4:0] grp_fu_220_opcode;
reg   [4:0] grp_fu_226_opcode;
reg   [4:0] grp_fu_232_opcode;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 173'd1;
#0 grp_pow_generic_float_s_fu_159_ap_start_reg = 1'b0;
#0 grp_pow_generic_float_s_fu_179_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

uz_FOC_sample_pow_generic_float_s grp_pow_generic_float_s_fu_159(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_float_s_fu_159_ap_start),
    .ap_done(grp_pow_generic_float_s_fu_159_ap_done),
    .ap_idle(grp_pow_generic_float_s_fu_159_ap_idle),
    .ap_ready(grp_pow_generic_float_s_fu_159_ap_ready),
    .ap_ce(1'b1),
    .base_r(grp_pow_generic_float_s_fu_159_base_r),
    .ap_return(grp_pow_generic_float_s_fu_159_ap_return)
);

uz_FOC_sample_pow_generic_float_s grp_pow_generic_float_s_fu_179(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_float_s_fu_179_ap_start),
    .ap_done(grp_pow_generic_float_s_fu_179_ap_done),
    .ap_idle(grp_pow_generic_float_s_fu_179_ap_idle),
    .ap_ready(grp_pow_generic_float_s_fu_179_ap_ready),
    .ap_ce(1'b1),
    .base_r(grp_pow_generic_float_s_fu_179_base_r),
    .ap_return(grp_pow_generic_float_s_fu_179_ap_return)
);

uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_199_p0),
    .din1(grp_fu_199_p1),
    .opcode(grp_fu_199_opcode),
    .ce(1'b1),
    .dout(grp_fu_199_p2)
);

uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_203_p0),
    .din1(grp_fu_203_p1),
    .ce(1'b1),
    .dout(grp_fu_203_p2)
);

uz_FOC_sample_fdiv_32ns_32ns_32_9_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_9_no_dsp_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_dc_volts),
    .din1(32'd1071494103),
    .ce(1'b1),
    .dout(grp_fu_208_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_214_p0),
    .din1(grp_fu_214_p1),
    .ce(1'b1),
    .opcode(grp_fu_214_opcode),
    .dout(grp_fu_214_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_220_p0),
    .din1(grp_fu_220_p1),
    .ce(1'b1),
    .opcode(grp_fu_220_opcode),
    .dout(grp_fu_220_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_226_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_226_opcode),
    .dout(grp_fu_226_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_232_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_232_opcode),
    .dout(grp_fu_232_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(i_actual_Ampere_1),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd8),
    .dout(grp_fu_238_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(i_actual_Ampere_1),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_244_p2)
);

uz_FOC_sample_fsqrt_32ns_32ns_32_8_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsqrt_32ns_32ns_32_8_no_dsp_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_266),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state102)) begin
            ap_return_0_preg <= ap_phi_mux_u_output_Volts_10_phi_fu_147_p10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state102)) begin
            ap_return_1_preg <= ap_phi_mux_u_output_Volts_11_phi_fu_132_p10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_float_s_fu_159_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state143) & (1'b1 == ap_CS_fsm_state142)) | ((1'b1 == ap_NS_fsm_state107) & (1'b1 == ap_CS_fsm_state106)) | ((1'b1 == ap_NS_fsm_state71) & (1'b1 == ap_CS_fsm_state70)) | ((1'b1 == ap_NS_fsm_state35) & (1'b1 == ap_CS_fsm_state34)))) begin
            grp_pow_generic_float_s_fu_159_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_float_s_fu_159_ap_ready == 1'b1)) begin
            grp_pow_generic_float_s_fu_159_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_float_s_fu_179_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state143) & (1'b1 == ap_CS_fsm_state142)) | ((1'b1 == ap_NS_fsm_state71) & (1'b1 == ap_CS_fsm_state70)))) begin
            grp_pow_generic_float_s_fu_179_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_float_s_fu_179_ap_ready == 1'b1)) begin
            grp_pow_generic_float_s_fu_179_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        u_output_Volts_10_reg_144 <= reg_277;
    end else if (((1'd1 == and_ln59_1_reg_1171) & (1'd1 == and_ln29_1_reg_1142) & (if_omega_equal_q_current_reg_1138 == 1'd0) & (1'b1 == ap_CS_fsm_state102))) begin
        u_output_Volts_10_reg_144 <= u_output_Volts_8_reg_1191;
    end else if (((1'd1 == and_ln47_1_reg_1221) & (1'd1 == and_ln29_1_reg_1142) & (if_omega_equal_q_current_reg_1138 == 1'd1) & (1'b1 == ap_CS_fsm_state102))) begin
        u_output_Volts_10_reg_144 <= u_output_Volts_reg_1245;
    end else if (((1'b1 == ap_CS_fsm_state138) | ((1'd0 == and_ln29_1_fu_600_p2) & (1'b1 == ap_CS_fsm_state30)))) begin
        u_output_Volts_10_reg_144 <= u_input_Volts_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln59_1_reg_1171) & (1'd1 == and_ln29_1_reg_1142) & (if_omega_equal_q_current_reg_1138 == 1'd0) & (1'b1 == ap_CS_fsm_state102))) begin
        u_output_Volts_11_reg_129 <= u_output_Volts_7_reg_1185;
    end else if ((1'b1 == ap_CS_fsm_state138)) begin
        u_output_Volts_11_reg_129 <= u_output_Volts_6_reg_1235;
    end else if (((1'd1 == and_ln47_1_reg_1221) & (1'd1 == and_ln29_1_reg_1142) & (if_omega_equal_q_current_reg_1138 == 1'd1) & (1'b1 == ap_CS_fsm_state102))) begin
        u_output_Volts_11_reg_129 <= u_output_Volts_5_reg_1251;
    end else if (((1'b1 == ap_CS_fsm_state66) | ((1'd0 == and_ln29_1_fu_600_p2) & (1'b1 == ap_CS_fsm_state30)))) begin
        u_output_Volts_11_reg_129 <= u_input_Volts_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        U_SV_max_reg_1077 <= grp_fu_208_p2;
        or_ln35_2_reg_1092 <= or_ln35_2_fu_349_p2;
        or_ln35_reg_1086 <= or_ln35_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        and_ln29_1_reg_1142 <= and_ln29_1_fu_600_p2;
        if_omega_equal_q_current_reg_1138 <= if_omega_equal_q_current_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        and_ln47_1_reg_1221 <= and_ln47_1_fu_911_p2;
        sign_3_reg_1225[29 : 23] <= sign_3_fu_990_p3[29 : 23];
sign_3_reg_1225[31] <= sign_3_fu_990_p3[31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        and_ln59_1_reg_1171 <= and_ln59_1_fu_692_p2;
        sign_4_reg_1175[29 : 23] <= sign_4_fu_771_p3[29 : 23];
sign_4_reg_1175[31] <= sign_4_fu_771_p3[31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        icmp_ln27_1_reg_1113 <= icmp_ln27_1_fu_487_p2;
        icmp_ln27_2_reg_1118 <= icmp_ln27_2_fu_493_p2;
        icmp_ln27_3_reg_1123 <= icmp_ln27_3_fu_499_p2;
        icmp_ln27_reg_1108 <= icmp_ln27_fu_481_p2;
        icmp_ln29_1_reg_1133 <= icmp_ln29_1_fu_529_p2;
        icmp_ln29_reg_1128 <= icmp_ln29_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        icmp_ln47_1_reg_1206 <= icmp_ln47_1_fu_879_p2;
        icmp_ln47_2_reg_1211 <= icmp_ln47_2_fu_885_p2;
        icmp_ln47_3_reg_1216 <= icmp_ln47_3_fu_891_p2;
        icmp_ln47_reg_1201 <= icmp_ln47_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        icmp_ln59_1_reg_1156 <= icmp_ln59_1_fu_660_p2;
        icmp_ln59_2_reg_1161 <= icmp_ln59_2_fu_666_p2;
        icmp_ln59_3_reg_1166 <= icmp_ln59_3_fu_672_p2;
        icmp_ln59_reg_1151 <= icmp_ln59_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_255 <= grp_pow_generic_float_s_fu_159_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_261 <= grp_pow_generic_float_s_fu_179_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_266 <= grp_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_271 <= grp_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_277 <= grp_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        select_ln48_1_reg_1240[1 : 0] <= select_ln48_1_fu_1024_p3[1 : 0];
select_ln48_1_reg_1240[5 : 4] <= select_ln48_1_fu_1024_p3[5 : 4];
select_ln48_1_reg_1240[9 : 8] <= select_ln48_1_fu_1024_p3[9 : 8];
select_ln48_1_reg_1240[13 : 12] <= select_ln48_1_fu_1024_p3[13 : 12];
select_ln48_1_reg_1240[17 : 16] <= select_ln48_1_fu_1024_p3[17 : 16];
select_ln48_1_reg_1240[22 : 20] <= select_ln48_1_fu_1024_p3[22 : 20];
select_ln48_1_reg_1240[29 : 24] <= select_ln48_1_fu_1024_p3[29 : 24];
select_ln48_1_reg_1240[31] <= select_ln48_1_fu_1024_p3[31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        select_ln60_1_reg_1180[1 : 0] <= select_ln60_1_fu_805_p3[1 : 0];
select_ln60_1_reg_1180[5 : 4] <= select_ln60_1_fu_805_p3[5 : 4];
select_ln60_1_reg_1180[9 : 8] <= select_ln60_1_fu_805_p3[9 : 8];
select_ln60_1_reg_1180[13 : 12] <= select_ln60_1_fu_805_p3[13 : 12];
select_ln60_1_reg_1180[17 : 16] <= select_ln60_1_fu_805_p3[17 : 16];
select_ln60_1_reg_1180[22 : 20] <= select_ln60_1_fu_805_p3[22 : 20];
select_ln60_1_reg_1180[29 : 24] <= select_ln60_1_fu_805_p3[29 : 24];
select_ln60_1_reg_1180[31] <= select_ln60_1_fu_805_p3[31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        tmp_4_reg_1230 <= grp_pow_generic_float_s_fu_159_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state173)) begin
        u_output_Volts_5_reg_1251 <= grp_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        u_output_Volts_6_reg_1235 <= grp_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        u_output_Volts_7_reg_1185 <= grp_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        u_output_Volts_8_reg_1191 <= grp_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        u_output_Volts_reg_1245 <= grp_fu_203_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state102) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln29_1_reg_1142) & (1'b1 == ap_CS_fsm_state102))) begin
        if (((1'd1 == and_ln59_1_reg_1171) & (if_omega_equal_q_current_reg_1138 == 1'd0))) begin
            ap_phi_mux_u_output_Volts_10_phi_fu_147_p10 = u_output_Volts_8_reg_1191;
        end else if (((1'd1 == and_ln47_1_reg_1221) & (if_omega_equal_q_current_reg_1138 == 1'd1))) begin
            ap_phi_mux_u_output_Volts_10_phi_fu_147_p10 = u_output_Volts_reg_1245;
        end else begin
            ap_phi_mux_u_output_Volts_10_phi_fu_147_p10 = u_output_Volts_10_reg_144;
        end
    end else begin
        ap_phi_mux_u_output_Volts_10_phi_fu_147_p10 = u_output_Volts_10_reg_144;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln29_1_reg_1142) & (1'b1 == ap_CS_fsm_state102))) begin
        if (((1'd1 == and_ln59_1_reg_1171) & (if_omega_equal_q_current_reg_1138 == 1'd0))) begin
            ap_phi_mux_u_output_Volts_11_phi_fu_132_p10 = u_output_Volts_7_reg_1185;
        end else if (((1'd1 == and_ln47_1_reg_1221) & (if_omega_equal_q_current_reg_1138 == 1'd1))) begin
            ap_phi_mux_u_output_Volts_11_phi_fu_132_p10 = u_output_Volts_5_reg_1251;
        end else begin
            ap_phi_mux_u_output_Volts_11_phi_fu_132_p10 = u_output_Volts_11_reg_129;
        end
    end else begin
        ap_phi_mux_u_output_Volts_11_phi_fu_132_p10 = u_output_Volts_11_reg_129;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        ap_return_0 = ap_phi_mux_u_output_Volts_10_phi_fu_147_p10;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        ap_return_1 = ap_phi_mux_u_output_Volts_11_phi_fu_132_p10;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state51))) begin
        grp_fu_199_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_199_opcode = 2'd0;
    end else begin
        grp_fu_199_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        grp_fu_199_p0 = tmp_4_reg_1230;
    end else if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_199_p0 = reg_255;
    end else begin
        grp_fu_199_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        grp_fu_199_p1 = reg_255;
    end else if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_199_p1 = reg_261;
    end else begin
        grp_fu_199_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        grp_fu_203_p0 = select_ln48_1_reg_1240;
    end else if (((1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state135))) begin
        grp_fu_203_p0 = sign_3_reg_1225;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_203_p0 = select_ln60_1_reg_1180;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state63))) begin
        grp_fu_203_p0 = sign_4_reg_1175;
    end else if ((((1'd1 == and_ln29_1_fu_600_p2) & (if_omega_equal_q_current_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((1'd1 == and_ln29_1_fu_600_p2) & (if_omega_equal_q_current_fu_549_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30)))) begin
        grp_fu_203_p0 = U_SV_max_reg_1077;
    end else begin
        grp_fu_203_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state68))) begin
        grp_fu_203_p1 = U_SV_max_reg_1077;
    end else if (((1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state63))) begin
        grp_fu_203_p1 = reg_271;
    end else if ((((1'd1 == and_ln29_1_fu_600_p2) & (if_omega_equal_q_current_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((1'd1 == and_ln29_1_fu_600_p2) & (if_omega_equal_q_current_fu_549_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30)))) begin
        grp_fu_203_p1 = 32'd1064514355;
    end else begin
        grp_fu_203_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_214_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_214_opcode = 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state28) | ((1'd1 == and_ln47_1_fu_911_p2) & (1'b1 == ap_CS_fsm_state106)) | ((1'd1 == and_ln59_1_fu_692_p2) & (1'b1 == ap_CS_fsm_state34)))) begin
        grp_fu_214_opcode = 5'd4;
    end else begin
        grp_fu_214_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_214_p0 = u_input_Volts_0;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_fu_214_p0 = bitcast_ln350_fu_836_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_214_p0 = u_input_Volts_1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_214_p0 = bitcast_ln350_1_fu_617_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_214_p0 = sign_fu_391_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_214_p0 = omega_el_rad_per_sec;
    end else begin
        grp_fu_214_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_214_p1 = reg_277;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_214_p1 = sign_2_fu_436_p3;
    end else if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_214_p1 = 32'd0;
    end else begin
        grp_fu_214_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_220_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_220_opcode = 5'd2;
    end else if (((1'b1 == ap_CS_fsm_state28) | ((1'd1 == and_ln47_1_fu_911_p2) & (1'b1 == ap_CS_fsm_state106)) | ((1'd1 == and_ln59_1_fu_692_p2) & (1'b1 == ap_CS_fsm_state34)))) begin
        grp_fu_220_opcode = 5'd8;
    end else begin
        grp_fu_220_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_220_p0 = u_input_Volts_1;
    end else if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_220_p0 = u_input_Volts_0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_220_p0 = reg_271;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_220_p0 = omega_el_rad_per_sec;
    end else begin
        grp_fu_220_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_220_p1 = U_SV_max_reg_1077;
    end else if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_220_p1 = 32'd0;
    end else begin
        grp_fu_220_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_226_opcode = 5'd8;
    end else if (((1'b1 == ap_CS_fsm_state28) | ((1'd1 == and_ln47_1_fu_911_p2) & (1'b1 == ap_CS_fsm_state106)) | ((1'd1 == and_ln59_1_fu_692_p2) & (1'b1 == ap_CS_fsm_state34)))) begin
        grp_fu_226_opcode = 5'd1;
    end else begin
        grp_fu_226_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_226_p0 = u_input_Volts_1;
    end else if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_226_p0 = u_input_Volts_0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_226_p0 = omega_el_rad_per_sec;
    end else begin
        grp_fu_226_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_232_opcode = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_232_opcode = 5'd4;
    end else begin
        grp_fu_232_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_fu_232_p0 = u_input_Volts_1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_232_p0 = u_input_Volts_0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_232_p0 = i_actual_Ampere_1;
    end else begin
        grp_fu_232_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_pow_generic_float_s_fu_159_ap_start = 1'b1;
    end else begin
        grp_pow_generic_float_s_fu_159_ap_start = grp_pow_generic_float_s_fu_159_ap_start_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state35))) begin
        grp_pow_generic_float_s_fu_159_base_r = U_SV_max_reg_1077;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_pow_generic_float_s_fu_159_base_r = u_input_Volts_0;
    end else begin
        grp_pow_generic_float_s_fu_159_base_r = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_pow_generic_float_s_fu_179_ap_start = 1'b1;
    end else begin
        grp_pow_generic_float_s_fu_179_ap_start = grp_pow_generic_float_s_fu_179_ap_start_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_pow_generic_float_s_fu_179_base_r = u_output_Volts_reg_1245;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_pow_generic_float_s_fu_179_base_r = u_output_Volts_7_reg_1185;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_pow_generic_float_s_fu_179_base_r = u_input_Volts_1;
    end else begin
        grp_pow_generic_float_s_fu_179_base_r = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln29_1_fu_600_p2) & (1'b1 == ap_CS_fsm_state30)) | ((1'd0 == and_ln29_1_fu_600_p2) & (1'b1 == ap_CS_fsm_state30)))) begin
        self_ce0 = 1'b1;
    end else begin
        self_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        if ((1'd1 == and_ln29_1_fu_600_p2)) begin
            self_d0 = 224'd1099511627776;
        end else if ((1'd0 == and_ln29_1_fu_600_p2)) begin
            self_d0 = 224'd0;
        end else begin
            self_d0 = 'bx;
        end
    end else begin
        self_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln29_1_fu_600_p2) & (1'b1 == ap_CS_fsm_state30)) | ((1'd0 == and_ln29_1_fu_600_p2) & (1'b1 == ap_CS_fsm_state30)))) begin
        self_we0 = 28'd32;
    end else begin
        self_we0 = 28'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'd1 == and_ln29_1_fu_600_p2) & (if_omega_equal_q_current_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else if (((1'd1 == and_ln29_1_fu_600_p2) & (if_omega_equal_q_current_fu_549_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'd1 == and_ln59_1_fu_692_p2) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            if (((1'd1 == and_ln47_1_fu_911_p2) & (1'b1 == ap_CS_fsm_state106))) begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln27_fu_543_p2 = (or_ln27_fu_535_p2 & or_ln27_1_fu_539_p2);

assign and_ln29_1_fu_600_p2 = (grp_fu_220_p2 & and_ln29_fu_594_p2);

assign and_ln29_fu_594_p2 = (or_ln29_fu_572_p2 & or_ln29_1_fu_588_p2);

assign and_ln35_10_fu_765_p2 = (or_ln35_4_fu_727_p2 & and_ln35_fu_759_p2);

assign and_ln35_4_fu_386_p2 = (or_ln35_reg_1086 & and_ln35_fu_380_p2);

assign and_ln35_5_fu_400_p2 = (or_ln35_2_reg_1092 & grp_fu_232_p2);

assign and_ln35_6_fu_431_p2 = (or_ln35_2_reg_1092 & and_ln35_fu_425_p2);

assign and_ln35_7_fu_952_p2 = (or_ln35_3_fu_946_p2 & grp_fu_220_p2);

assign and_ln35_8_fu_984_p2 = (or_ln35_3_fu_946_p2 & and_ln35_fu_978_p2);

assign and_ln35_9_fu_733_p2 = (or_ln35_4_fu_727_p2 & grp_fu_220_p2);

assign and_ln35_fu_355_p2 = (or_ln35_reg_1086 & grp_fu_214_p2);

assign and_ln35_fu_380_p2 = (xor_ln35_fu_374_p2 & xor_ln35_fu_368_p2);

assign and_ln35_fu_425_p2 = (xor_ln35_fu_419_p2 & xor_ln35_fu_413_p2);

assign and_ln35_fu_759_p2 = (xor_ln35_fu_753_p2 & xor_ln35_fu_747_p2);

assign and_ln35_fu_978_p2 = (xor_ln35_fu_972_p2 & xor_ln35_fu_966_p2);

assign and_ln47_1_fu_911_p2 = (grp_fu_214_p2 & and_ln47_fu_905_p2);

assign and_ln47_fu_905_p2 = (or_ln47_fu_897_p2 & or_ln47_1_fu_901_p2);

assign and_ln48_fu_1018_p2 = (xor_ln48_fu_1012_p2 & xor_ln48_fu_1006_p2);

assign and_ln59_1_fu_692_p2 = (grp_fu_214_p2 & and_ln59_fu_686_p2);

assign and_ln59_fu_686_p2 = (or_ln59_fu_678_p2 & or_ln59_1_fu_682_p2);

assign and_ln60_fu_799_p2 = (xor_ln60_fu_793_p2 & xor_ln60_fu_787_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state173 = ap_CS_fsm[32'd172];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_NS_fsm_state107 = ap_NS_fsm[32'd106];

assign ap_NS_fsm_state143 = ap_NS_fsm[32'd142];

assign ap_NS_fsm_state35 = ap_NS_fsm[32'd34];

assign ap_NS_fsm_state71 = ap_NS_fsm[32'd70];

assign bitcast_ln27_1_fu_463_p1 = sign_2_fu_436_p3;

assign bitcast_ln27_fu_445_p1 = sign_fu_391_p3;

assign bitcast_ln29_1_fu_555_p1 = U_SV_max_reg_1077;

assign bitcast_ln29_fu_505_p1 = reg_271;

assign bitcast_ln350_1_fu_617_p1 = zext_ln368_1_fu_613_p1;

assign bitcast_ln350_fu_836_p1 = zext_ln368_fu_832_p1;

assign bitcast_ln35_2_fu_319_p1 = i_actual_Ampere_1;

assign bitcast_ln35_3_fu_917_p1 = u_input_Volts_1;

assign bitcast_ln35_4_fu_698_p1 = u_input_Volts_0;

assign bitcast_ln35_fu_283_p1 = omega_el_rad_per_sec;

assign bitcast_ln47_fu_855_p1 = reg_277;

assign bitcast_ln59_fu_636_p1 = reg_277;

assign icmp_ln27_1_fu_487_p2 = ((trunc_ln27_fu_459_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_2_fu_493_p2 = ((tmp_29_fu_467_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_3_fu_499_p2 = ((trunc_ln27_1_fu_477_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_481_p2 = ((tmp_28_fu_449_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_529_p2 = ((trunc_ln29_fu_519_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_576_p2 = ((tmp_32_fu_558_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_582_p2 = ((trunc_ln29_1_fu_568_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_523_p2 = ((tmp_31_fu_509_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_10_fu_721_p2 = ((trunc_ln35_4_fu_711_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_4_fu_307_p2 = ((trunc_ln35_fu_297_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_5_fu_337_p2 = ((tmp_25_fu_323_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_6_fu_343_p2 = ((trunc_ln35_2_fu_333_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_7_fu_934_p2 = ((tmp_37_fu_920_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_8_fu_940_p2 = ((trunc_ln35_3_fu_930_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_9_fu_715_p2 = ((tmp_43_fu_701_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_301_p2 = ((tmp_22_fu_287_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln47_1_fu_879_p2 = ((trunc_ln47_fu_851_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_2_fu_885_p2 = ((tmp_35_fu_859_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln47_3_fu_891_p2 = ((trunc_ln47_1_fu_869_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_873_p2 = ((tmp_34_fu_841_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_1_fu_660_p2 = ((trunc_ln59_fu_632_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_2_fu_666_p2 = ((tmp_41_fu_640_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_3_fu_672_p2 = ((trunc_ln59_1_fu_650_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_654_p2 = ((tmp_40_fu_622_p4 != 8'd255) ? 1'b1 : 1'b0);

assign if_omega_equal_q_current_fu_549_p2 = (grp_fu_214_p2 & and_ln27_fu_543_p2);

assign or_ln27_1_fu_539_p2 = (icmp_ln27_3_reg_1123 | icmp_ln27_2_reg_1118);

assign or_ln27_fu_535_p2 = (icmp_ln27_reg_1108 | icmp_ln27_1_reg_1113);

assign or_ln29_1_fu_588_p2 = (icmp_ln29_3_fu_582_p2 | icmp_ln29_2_fu_576_p2);

assign or_ln29_fu_572_p2 = (icmp_ln29_reg_1128 | icmp_ln29_1_reg_1133);

assign or_ln35_2_fu_349_p2 = (icmp_ln35_6_fu_343_p2 | icmp_ln35_5_fu_337_p2);

assign or_ln35_3_fu_946_p2 = (icmp_ln35_8_fu_940_p2 | icmp_ln35_7_fu_934_p2);

assign or_ln35_4_fu_727_p2 = (icmp_ln35_9_fu_715_p2 | icmp_ln35_10_fu_721_p2);

assign or_ln35_fu_313_p2 = (icmp_ln35_fu_301_p2 | icmp_ln35_4_fu_307_p2);

assign or_ln47_1_fu_901_p2 = (icmp_ln47_3_reg_1216 | icmp_ln47_2_reg_1211);

assign or_ln47_fu_897_p2 = (icmp_ln47_reg_1201 | icmp_ln47_1_reg_1206);

assign or_ln59_1_fu_682_p2 = (icmp_ln59_3_reg_1166 | icmp_ln59_2_reg_1161);

assign or_ln59_fu_678_p2 = (icmp_ln59_reg_1151 | icmp_ln59_1_reg_1156);

assign p_Result_1_fu_609_p1 = p_Val2_1_fu_606_p1[30:0];

assign p_Result_s_fu_828_p1 = p_Val2_s_fu_825_p1[30:0];

assign p_Val2_1_fu_606_p1 = u_input_Volts_1;

assign p_Val2_s_fu_825_p1 = u_input_Volts_0;

assign select_ln35_5_fu_405_p3 = ((and_ln35_5_fu_400_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln35_7_fu_958_p3 = ((and_ln35_7_fu_952_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln35_9_fu_739_p3 = ((and_ln35_9_fu_733_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln35_fu_360_p3 = ((and_ln35_fu_355_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln48_1_fu_1024_p3 = ((and_ln48_fu_1018_p2[0:0] === 1'b1) ? select_ln48_fu_998_p3 : 32'd0);

assign select_ln48_fu_998_p3 = ((grp_fu_214_p2[0:0] === 1'b1) ? 32'd3211998003 : 32'd1064514355);

assign select_ln60_1_fu_805_p3 = ((and_ln60_fu_799_p2[0:0] === 1'b1) ? select_ln60_fu_779_p3 : 32'd0);

assign select_ln60_fu_779_p3 = ((grp_fu_214_p2[0:0] === 1'b1) ? 32'd3211998003 : 32'd1064514355);

assign self_address0 = 64'd0;

assign sign_2_fu_436_p3 = ((and_ln35_6_fu_431_p2[0:0] === 1'b1) ? select_ln35_5_fu_405_p3 : 32'd0);

assign sign_3_fu_990_p3 = ((and_ln35_8_fu_984_p2[0:0] === 1'b1) ? select_ln35_7_fu_958_p3 : 32'd0);

assign sign_4_fu_771_p3 = ((and_ln35_10_fu_765_p2[0:0] === 1'b1) ? select_ln35_9_fu_739_p3 : 32'd0);

assign sign_fu_391_p3 = ((and_ln35_4_fu_386_p2[0:0] === 1'b1) ? select_ln35_fu_360_p3 : 32'd0);

assign tmp_22_fu_287_p4 = {{bitcast_ln35_fu_283_p1[30:23]}};

assign tmp_25_fu_323_p4 = {{bitcast_ln35_2_fu_319_p1[30:23]}};

assign tmp_28_fu_449_p4 = {{bitcast_ln27_fu_445_p1[30:23]}};

assign tmp_29_fu_467_p4 = {{bitcast_ln27_1_fu_463_p1[30:23]}};

assign tmp_31_fu_509_p4 = {{bitcast_ln29_fu_505_p1[30:23]}};

assign tmp_32_fu_558_p4 = {{bitcast_ln29_1_fu_555_p1[30:23]}};

assign tmp_34_fu_841_p4 = {{p_Val2_s_fu_825_p1[30:23]}};

assign tmp_35_fu_859_p4 = {{bitcast_ln47_fu_855_p1[30:23]}};

assign tmp_37_fu_920_p4 = {{bitcast_ln35_3_fu_917_p1[30:23]}};

assign tmp_40_fu_622_p4 = {{p_Val2_1_fu_606_p1[30:23]}};

assign tmp_41_fu_640_p4 = {{bitcast_ln59_fu_636_p1[30:23]}};

assign tmp_43_fu_701_p4 = {{bitcast_ln35_4_fu_698_p1[30:23]}};

assign trunc_ln27_1_fu_477_p1 = bitcast_ln27_1_fu_463_p1[22:0];

assign trunc_ln27_fu_459_p1 = bitcast_ln27_fu_445_p1[22:0];

assign trunc_ln29_1_fu_568_p1 = bitcast_ln29_1_fu_555_p1[22:0];

assign trunc_ln29_fu_519_p1 = bitcast_ln29_fu_505_p1[22:0];

assign trunc_ln35_2_fu_333_p1 = bitcast_ln35_2_fu_319_p1[22:0];

assign trunc_ln35_3_fu_930_p1 = bitcast_ln35_3_fu_917_p1[22:0];

assign trunc_ln35_4_fu_711_p1 = bitcast_ln35_4_fu_698_p1[22:0];

assign trunc_ln35_fu_297_p1 = bitcast_ln35_fu_283_p1[22:0];

assign trunc_ln47_1_fu_869_p1 = bitcast_ln47_fu_855_p1[22:0];

assign trunc_ln47_fu_851_p1 = p_Val2_s_fu_825_p1[22:0];

assign trunc_ln59_1_fu_650_p1 = bitcast_ln59_fu_636_p1[22:0];

assign trunc_ln59_fu_632_p1 = p_Val2_1_fu_606_p1[22:0];

assign xor_ln35_fu_368_p2 = (grp_fu_220_p2 ^ 1'd1);

assign xor_ln35_fu_374_p2 = (grp_fu_226_p2 ^ 1'd1);

assign xor_ln35_fu_413_p2 = (grp_fu_238_p2 ^ 1'd1);

assign xor_ln35_fu_419_p2 = (grp_fu_244_p2 ^ 1'd1);

assign xor_ln35_fu_747_p2 = (grp_fu_226_p2 ^ 1'd1);

assign xor_ln35_fu_753_p2 = (grp_fu_232_p2 ^ 1'd1);

assign xor_ln35_fu_966_p2 = (grp_fu_226_p2 ^ 1'd1);

assign xor_ln35_fu_972_p2 = (grp_fu_232_p2 ^ 1'd1);

assign xor_ln48_fu_1006_p2 = (grp_fu_220_p2 ^ 1'd1);

assign xor_ln48_fu_1012_p2 = (grp_fu_226_p2 ^ 1'd1);

assign xor_ln60_fu_787_p2 = (grp_fu_220_p2 ^ 1'd1);

assign xor_ln60_fu_793_p2 = (grp_fu_226_p2 ^ 1'd1);

assign zext_ln368_1_fu_613_p1 = p_Result_1_fu_609_p1;

assign zext_ln368_fu_832_p1 = p_Result_s_fu_828_p1;

always @ (posedge ap_clk) begin
    sign_4_reg_1175[22:0] <= 23'b00000000000000000000000;
    sign_4_reg_1175[30] <= 1'b0;
    select_ln60_1_reg_1180[3:2] <= 2'b00;
    select_ln60_1_reg_1180[7:6] <= 2'b00;
    select_ln60_1_reg_1180[11:10] <= 2'b00;
    select_ln60_1_reg_1180[15:14] <= 2'b00;
    select_ln60_1_reg_1180[19:18] <= 2'b00;
    select_ln60_1_reg_1180[23:23] <= 1'b0;
    select_ln60_1_reg_1180[30] <= 1'b0;
    sign_3_reg_1225[22:0] <= 23'b00000000000000000000000;
    sign_3_reg_1225[30] <= 1'b0;
    select_ln48_1_reg_1240[3:2] <= 2'b00;
    select_ln48_1_reg_1240[7:6] <= 2'b00;
    select_ln48_1_reg_1240[11:10] <= 2'b00;
    select_ln48_1_reg_1240[15:14] <= 2'b00;
    select_ln48_1_reg_1240[19:18] <= 2'b00;
    select_ln48_1_reg_1240[23:23] <= 1'b0;
    select_ln48_1_reg_1240[30] <= 1'b0;
end

endmodule //uz_FOC_sample_uz_FOC_SpaceVector_Limitation_1
