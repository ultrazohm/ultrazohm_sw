// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_readVec2Stream_float_16u_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        bramWeightGradientAvg_address0,
        bramWeightGradientAvg_ce0,
        bramWeightGradientAvg_q0,
        bramWeightGradientAvg_address1,
        bramWeightGradientAvg_ce1,
        bramWeightGradientAvg_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [511:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
output  [13:0] bramWeightGradientAvg_address0;
output   bramWeightGradientAvg_ce0;
input  [31:0] bramWeightGradientAvg_q0;
output  [13:0] bramWeightGradientAvg_address1;
output   bramWeightGradientAvg_ce1;
input  [31:0] bramWeightGradientAvg_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_out_write;
reg p_n_read;
reg[13:0] bramWeightGradientAvg_address0;
reg bramWeightGradientAvg_ce0;
reg[13:0] bramWeightGradientAvg_address1;
reg bramWeightGradientAvg_ce1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln111_reg_528;
reg    p_n_blk_n;
reg   [27:0] i_reg_236;
reg   [27:0] trunc_ln_reg_523;
reg    ap_block_state1;
wire   [0:0] icmp_ln111_fu_257_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [27:0] add_ln111_fu_262_p2;
reg   [27:0] add_ln111_reg_532;
reg    ap_enable_reg_pp0_iter0;
wire   [13:0] tmp_4_fu_272_p3;
reg   [13:0] tmp_4_reg_537;
reg   [31:0] l_val_m_Val_0_reg_565;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] l_val_m_Val_1_reg_570;
reg   [31:0] l_val_m_Val_2_reg_585;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] l_val_m_Val_3_reg_590;
reg   [31:0] l_val_m_Val_4_reg_605;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] l_val_m_Val_5_reg_610;
reg   [31:0] l_val_m_Val_6_reg_625;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] l_val_m_Val_7_reg_630;
reg   [31:0] l_val_m_Val_8_reg_645;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] l_val_m_Val_9_reg_650;
reg   [31:0] l_val_m_Val_10_reg_665;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [31:0] l_val_m_Val_11_reg_670;
reg   [31:0] l_val_m_Val_12_reg_685;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
reg   [31:0] l_val_m_Val_13_reg_690;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage7_subdone;
reg   [27:0] ap_phi_mux_i_phi_fu_240_p4;
wire   [63:0] zext_ln116_fu_280_p1;
wire   [63:0] zext_ln116_1_fu_291_p1;
wire   [63:0] zext_ln116_2_fu_301_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln116_3_fu_311_p1;
wire   [63:0] zext_ln116_4_fu_321_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln116_5_fu_331_p1;
wire   [63:0] zext_ln116_6_fu_341_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln116_7_fu_351_p1;
wire   [63:0] zext_ln116_8_fu_361_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln116_9_fu_371_p1;
wire   [63:0] zext_ln116_10_fu_381_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln116_11_fu_391_p1;
wire   [63:0] zext_ln116_12_fu_401_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln116_13_fu_411_p1;
wire   [63:0] zext_ln116_14_fu_421_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln116_15_fu_431_p1;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] empty_fu_268_p1;
wire   [13:0] or_ln116_fu_285_p2;
wire   [13:0] or_ln116_1_fu_296_p2;
wire   [13:0] or_ln116_2_fu_306_p2;
wire   [13:0] or_ln116_3_fu_316_p2;
wire   [13:0] or_ln116_4_fu_326_p2;
wire   [13:0] or_ln116_5_fu_336_p2;
wire   [13:0] or_ln116_6_fu_346_p2;
wire   [13:0] or_ln116_7_fu_356_p2;
wire   [13:0] or_ln116_8_fu_366_p2;
wire   [13:0] or_ln116_9_fu_376_p2;
wire   [13:0] or_ln116_10_fu_386_p2;
wire   [13:0] or_ln116_11_fu_396_p2;
wire   [13:0] or_ln116_12_fu_406_p2;
wire   [13:0] or_ln116_13_fu_416_p2;
wire   [13:0] or_ln116_14_fu_426_p2;
wire   [31:0] l_v_90_fu_482_p1;
wire   [31:0] l_v_89_fu_478_p1;
wire   [31:0] l_v_88_fu_475_p1;
wire   [31:0] l_v_87_fu_472_p1;
wire   [31:0] l_v_86_fu_469_p1;
wire   [31:0] l_v_85_fu_466_p1;
wire   [31:0] l_v_84_fu_463_p1;
wire   [31:0] l_v_83_fu_460_p1;
wire   [31:0] l_v_82_fu_457_p1;
wire   [31:0] l_v_81_fu_454_p1;
wire   [31:0] l_v_80_fu_451_p1;
wire   [31:0] l_v_79_fu_448_p1;
wire   [31:0] l_v_78_fu_445_p1;
wire   [31:0] l_v_77_fu_442_p1;
wire   [31:0] l_v_76_fu_439_p1;
wire   [31:0] l_v_fu_436_p1;
wire    ap_CS_fsm_state11;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_236 <= add_ln111_reg_532;
    end else if ((~((p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_236 <= 28'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln111_reg_532 <= add_ln111_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln111_reg_528 <= icmp_ln111_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        l_val_m_Val_0_reg_565 <= bramWeightGradientAvg_q1;
        l_val_m_Val_1_reg_570 <= bramWeightGradientAvg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        l_val_m_Val_10_reg_665 <= bramWeightGradientAvg_q1;
        l_val_m_Val_11_reg_670 <= bramWeightGradientAvg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        l_val_m_Val_12_reg_685 <= bramWeightGradientAvg_q1;
        l_val_m_Val_13_reg_690 <= bramWeightGradientAvg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        l_val_m_Val_2_reg_585 <= bramWeightGradientAvg_q1;
        l_val_m_Val_3_reg_590 <= bramWeightGradientAvg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        l_val_m_Val_4_reg_605 <= bramWeightGradientAvg_q1;
        l_val_m_Val_5_reg_610 <= bramWeightGradientAvg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        l_val_m_Val_6_reg_625 <= bramWeightGradientAvg_q1;
        l_val_m_Val_7_reg_630 <= bramWeightGradientAvg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        l_val_m_Val_8_reg_645 <= bramWeightGradientAvg_q1;
        l_val_m_Val_9_reg_650 <= bramWeightGradientAvg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_fu_257_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_537[13 : 4] <= tmp_4_fu_272_p3[13 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln_reg_523 <= {{p_n_dout[31:4]}};
    end
end

always @ (*) begin
    if ((icmp_ln111_fu_257_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_240_p4 = add_ln111_reg_532;
    end else begin
        ap_phi_mux_i_phi_fu_240_p4 = i_reg_236;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            bramWeightGradientAvg_address0 = zext_ln116_15_fu_431_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            bramWeightGradientAvg_address0 = zext_ln116_13_fu_411_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            bramWeightGradientAvg_address0 = zext_ln116_11_fu_391_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            bramWeightGradientAvg_address0 = zext_ln116_9_fu_371_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            bramWeightGradientAvg_address0 = zext_ln116_7_fu_351_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            bramWeightGradientAvg_address0 = zext_ln116_5_fu_331_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            bramWeightGradientAvg_address0 = zext_ln116_3_fu_311_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            bramWeightGradientAvg_address0 = zext_ln116_1_fu_291_p1;
        end else begin
            bramWeightGradientAvg_address0 = 'bx;
        end
    end else begin
        bramWeightGradientAvg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            bramWeightGradientAvg_address1 = zext_ln116_14_fu_421_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            bramWeightGradientAvg_address1 = zext_ln116_12_fu_401_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            bramWeightGradientAvg_address1 = zext_ln116_10_fu_381_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            bramWeightGradientAvg_address1 = zext_ln116_8_fu_361_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            bramWeightGradientAvg_address1 = zext_ln116_6_fu_341_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            bramWeightGradientAvg_address1 = zext_ln116_4_fu_321_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            bramWeightGradientAvg_address1 = zext_ln116_2_fu_301_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            bramWeightGradientAvg_address1 = zext_ln116_fu_280_p1;
        end else begin
            bramWeightGradientAvg_address1 = 'bx;
        end
    end else begin
        bramWeightGradientAvg_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        bramWeightGradientAvg_ce0 = 1'b1;
    end else begin
        bramWeightGradientAvg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        bramWeightGradientAvg_ce1 = 1'b1;
    end else begin
        bramWeightGradientAvg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln111_reg_528 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_fu_257_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_fu_257_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln111_fu_262_p2 = (ap_phi_mux_i_phi_fu_240_p4 + 28'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln111_reg_528 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln111_reg_528 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln111_reg_528 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((icmp_ln111_reg_528 == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_fu_268_p1 = ap_phi_mux_i_phi_fu_240_p4[9:0];

assign icmp_ln111_fu_257_p2 = ((ap_phi_mux_i_phi_fu_240_p4 == trunc_ln_reg_523) ? 1'b1 : 1'b0);

assign l_v_76_fu_439_p1 = l_val_m_Val_1_reg_570;

assign l_v_77_fu_442_p1 = l_val_m_Val_2_reg_585;

assign l_v_78_fu_445_p1 = l_val_m_Val_3_reg_590;

assign l_v_79_fu_448_p1 = l_val_m_Val_4_reg_605;

assign l_v_80_fu_451_p1 = l_val_m_Val_5_reg_610;

assign l_v_81_fu_454_p1 = l_val_m_Val_6_reg_625;

assign l_v_82_fu_457_p1 = l_val_m_Val_7_reg_630;

assign l_v_83_fu_460_p1 = l_val_m_Val_8_reg_645;

assign l_v_84_fu_463_p1 = l_val_m_Val_9_reg_650;

assign l_v_85_fu_466_p1 = l_val_m_Val_10_reg_665;

assign l_v_86_fu_469_p1 = l_val_m_Val_11_reg_670;

assign l_v_87_fu_472_p1 = l_val_m_Val_12_reg_685;

assign l_v_88_fu_475_p1 = l_val_m_Val_13_reg_690;

assign l_v_89_fu_478_p1 = bramWeightGradientAvg_q1;

assign l_v_90_fu_482_p1 = bramWeightGradientAvg_q0;

assign l_v_fu_436_p1 = l_val_m_Val_0_reg_565;

assign or_ln116_10_fu_386_p2 = (tmp_4_reg_537 | 14'd11);

assign or_ln116_11_fu_396_p2 = (tmp_4_reg_537 | 14'd12);

assign or_ln116_12_fu_406_p2 = (tmp_4_reg_537 | 14'd13);

assign or_ln116_13_fu_416_p2 = (tmp_4_reg_537 | 14'd14);

assign or_ln116_14_fu_426_p2 = (tmp_4_reg_537 | 14'd15);

assign or_ln116_1_fu_296_p2 = (tmp_4_reg_537 | 14'd2);

assign or_ln116_2_fu_306_p2 = (tmp_4_reg_537 | 14'd3);

assign or_ln116_3_fu_316_p2 = (tmp_4_reg_537 | 14'd4);

assign or_ln116_4_fu_326_p2 = (tmp_4_reg_537 | 14'd5);

assign or_ln116_5_fu_336_p2 = (tmp_4_reg_537 | 14'd6);

assign or_ln116_6_fu_346_p2 = (tmp_4_reg_537 | 14'd7);

assign or_ln116_7_fu_356_p2 = (tmp_4_reg_537 | 14'd8);

assign or_ln116_8_fu_366_p2 = (tmp_4_reg_537 | 14'd9);

assign or_ln116_9_fu_376_p2 = (tmp_4_reg_537 | 14'd10);

assign or_ln116_fu_285_p2 = (tmp_4_fu_272_p3 | 14'd1);

assign p_out_din = {{{{{{{{{{{{{{{{l_v_90_fu_482_p1}, {l_v_89_fu_478_p1}}, {l_v_88_fu_475_p1}}, {l_v_87_fu_472_p1}}, {l_v_86_fu_469_p1}}, {l_v_85_fu_466_p1}}, {l_v_84_fu_463_p1}}, {l_v_83_fu_460_p1}}, {l_v_82_fu_457_p1}}, {l_v_81_fu_454_p1}}, {l_v_80_fu_451_p1}}, {l_v_79_fu_448_p1}}, {l_v_78_fu_445_p1}}, {l_v_77_fu_442_p1}}, {l_v_76_fu_439_p1}}, {l_v_fu_436_p1}};

assign tmp_4_fu_272_p3 = {{empty_fu_268_p1}, {4'd0}};

assign zext_ln116_10_fu_381_p1 = or_ln116_9_fu_376_p2;

assign zext_ln116_11_fu_391_p1 = or_ln116_10_fu_386_p2;

assign zext_ln116_12_fu_401_p1 = or_ln116_11_fu_396_p2;

assign zext_ln116_13_fu_411_p1 = or_ln116_12_fu_406_p2;

assign zext_ln116_14_fu_421_p1 = or_ln116_13_fu_416_p2;

assign zext_ln116_15_fu_431_p1 = or_ln116_14_fu_426_p2;

assign zext_ln116_1_fu_291_p1 = or_ln116_fu_285_p2;

assign zext_ln116_2_fu_301_p1 = or_ln116_1_fu_296_p2;

assign zext_ln116_3_fu_311_p1 = or_ln116_2_fu_306_p2;

assign zext_ln116_4_fu_321_p1 = or_ln116_3_fu_316_p2;

assign zext_ln116_5_fu_331_p1 = or_ln116_4_fu_326_p2;

assign zext_ln116_6_fu_341_p1 = or_ln116_5_fu_336_p2;

assign zext_ln116_7_fu_351_p1 = or_ln116_6_fu_346_p2;

assign zext_ln116_8_fu_361_p1 = or_ln116_7_fu_356_p2;

assign zext_ln116_9_fu_371_p1 = or_ln116_8_fu_366_p2;

assign zext_ln116_fu_280_p1 = tmp_4_fu_272_p3;

always @ (posedge ap_clk) begin
    tmp_4_reg_537[3:0] <= 4'b0000;
end

endmodule //BGD_readVec2Stream_float_16u_1
