-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\Trans_dq_alphabeta_123\Simulation\hdlsrc\Transformation_dq_alphabeta_123_V1\Trans_dq_alphabeta_123_ip_src_Cosine.vhd
-- Created: 2022-05-27 15:32:20
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Trans_dq_alphabeta_123_ip_src_Cosine
-- Source Path: Transformation_dq_alphabeta_123_V1/Trans_dq_alphabeta_123_fix_V1/Cosine
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Trans_dq_alphabeta_123_ip_src_Trans_dq_alphabeta_123_fix_V1_pkg.ALL;

ENTITY Trans_dq_alphabeta_123_ip_src_Cosine IS
  PORT( u                                 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        sin_2_pi_u                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        cos_2_pi_u                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END Trans_dq_alphabeta_123_ip_src_Cosine;


ARCHITECTURE rtl OF Trans_dq_alphabeta_123_ip_src_Cosine IS

  -- Constants
  CONSTANT Look_Up_Table_data             : vector_of_signed16(0 TO 512) := 
    (to_signed(16#0000#, 16), to_signed(16#0032#, 16), to_signed(16#0065#, 16), to_signed(16#0097#, 16),
     to_signed(16#00C9#, 16), to_signed(16#00FB#, 16), to_signed(16#012E#, 16), to_signed(16#0160#, 16),
     to_signed(16#0192#, 16), to_signed(16#01C4#, 16), to_signed(16#01F7#, 16), to_signed(16#0229#, 16),
     to_signed(16#025B#, 16), to_signed(16#028D#, 16), to_signed(16#02C0#, 16), to_signed(16#02F2#, 16),
     to_signed(16#0324#, 16), to_signed(16#0356#, 16), to_signed(16#0388#, 16), to_signed(16#03BB#, 16),
     to_signed(16#03ED#, 16), to_signed(16#041F#, 16), to_signed(16#0451#, 16), to_signed(16#0483#, 16),
     to_signed(16#04B5#, 16), to_signed(16#04E7#, 16), to_signed(16#051A#, 16), to_signed(16#054C#, 16),
     to_signed(16#057E#, 16), to_signed(16#05B0#, 16), to_signed(16#05E2#, 16), to_signed(16#0614#, 16),
     to_signed(16#0646#, 16), to_signed(16#0678#, 16), to_signed(16#06AA#, 16), to_signed(16#06DC#, 16),
     to_signed(16#070E#, 16), to_signed(16#0740#, 16), to_signed(16#0772#, 16), to_signed(16#07A4#, 16),
     to_signed(16#07D6#, 16), to_signed(16#0807#, 16), to_signed(16#0839#, 16), to_signed(16#086B#, 16),
     to_signed(16#089D#, 16), to_signed(16#08CF#, 16), to_signed(16#0901#, 16), to_signed(16#0932#, 16),
     to_signed(16#0964#, 16), to_signed(16#0996#, 16), to_signed(16#09C7#, 16), to_signed(16#09F9#, 16),
     to_signed(16#0A2B#, 16), to_signed(16#0A5C#, 16), to_signed(16#0A8E#, 16), to_signed(16#0AC0#, 16),
     to_signed(16#0AF1#, 16), to_signed(16#0B23#, 16), to_signed(16#0B54#, 16), to_signed(16#0B85#, 16),
     to_signed(16#0BB7#, 16), to_signed(16#0BE8#, 16), to_signed(16#0C1A#, 16), to_signed(16#0C4B#, 16),
     to_signed(16#0C7C#, 16), to_signed(16#0CAE#, 16), to_signed(16#0CDF#, 16), to_signed(16#0D10#, 16),
     to_signed(16#0D41#, 16), to_signed(16#0D72#, 16), to_signed(16#0DA4#, 16), to_signed(16#0DD5#, 16),
     to_signed(16#0E06#, 16), to_signed(16#0E37#, 16), to_signed(16#0E68#, 16), to_signed(16#0E99#, 16),
     to_signed(16#0ECA#, 16), to_signed(16#0EFB#, 16), to_signed(16#0F2B#, 16), to_signed(16#0F5C#, 16),
     to_signed(16#0F8D#, 16), to_signed(16#0FBE#, 16), to_signed(16#0FEE#, 16), to_signed(16#101F#, 16),
     to_signed(16#1050#, 16), to_signed(16#1080#, 16), to_signed(16#10B1#, 16), to_signed(16#10E1#, 16),
     to_signed(16#1112#, 16), to_signed(16#1142#, 16), to_signed(16#1173#, 16), to_signed(16#11A3#, 16),
     to_signed(16#11D3#, 16), to_signed(16#1204#, 16), to_signed(16#1234#, 16), to_signed(16#1264#, 16),
     to_signed(16#1294#, 16), to_signed(16#12C4#, 16), to_signed(16#12F4#, 16), to_signed(16#1324#, 16),
     to_signed(16#1354#, 16), to_signed(16#1384#, 16), to_signed(16#13B4#, 16), to_signed(16#13E4#, 16),
     to_signed(16#1413#, 16), to_signed(16#1443#, 16), to_signed(16#1473#, 16), to_signed(16#14A2#, 16),
     to_signed(16#14D2#, 16), to_signed(16#1501#, 16), to_signed(16#1531#, 16), to_signed(16#1560#, 16),
     to_signed(16#1590#, 16), to_signed(16#15BF#, 16), to_signed(16#15EE#, 16), to_signed(16#161D#, 16),
     to_signed(16#164C#, 16), to_signed(16#167C#, 16), to_signed(16#16AB#, 16), to_signed(16#16DA#, 16),
     to_signed(16#1709#, 16), to_signed(16#1737#, 16), to_signed(16#1766#, 16), to_signed(16#1795#, 16),
     to_signed(16#17C4#, 16), to_signed(16#17F2#, 16), to_signed(16#1821#, 16), to_signed(16#184F#, 16),
     to_signed(16#187E#, 16), to_signed(16#18AC#, 16), to_signed(16#18DB#, 16), to_signed(16#1909#, 16),
     to_signed(16#1937#, 16), to_signed(16#1965#, 16), to_signed(16#1993#, 16), to_signed(16#19C1#, 16),
     to_signed(16#19EF#, 16), to_signed(16#1A1D#, 16), to_signed(16#1A4B#, 16), to_signed(16#1A79#, 16),
     to_signed(16#1AA7#, 16), to_signed(16#1AD4#, 16), to_signed(16#1B02#, 16), to_signed(16#1B30#, 16),
     to_signed(16#1B5D#, 16), to_signed(16#1B8A#, 16), to_signed(16#1BB8#, 16), to_signed(16#1BE5#, 16),
     to_signed(16#1C12#, 16), to_signed(16#1C3F#, 16), to_signed(16#1C6C#, 16), to_signed(16#1C99#, 16),
     to_signed(16#1CC6#, 16), to_signed(16#1CF3#, 16), to_signed(16#1D20#, 16), to_signed(16#1D4D#, 16),
     to_signed(16#1D79#, 16), to_signed(16#1DA6#, 16), to_signed(16#1DD3#, 16), to_signed(16#1DFF#, 16),
     to_signed(16#1E2B#, 16), to_signed(16#1E58#, 16), to_signed(16#1E84#, 16), to_signed(16#1EB0#, 16),
     to_signed(16#1EDC#, 16), to_signed(16#1F08#, 16), to_signed(16#1F34#, 16), to_signed(16#1F60#, 16),
     to_signed(16#1F8C#, 16), to_signed(16#1FB7#, 16), to_signed(16#1FE3#, 16), to_signed(16#200F#, 16),
     to_signed(16#203A#, 16), to_signed(16#2065#, 16), to_signed(16#2091#, 16), to_signed(16#20BC#, 16),
     to_signed(16#20E7#, 16), to_signed(16#2112#, 16), to_signed(16#213D#, 16), to_signed(16#2168#, 16),
     to_signed(16#2193#, 16), to_signed(16#21BE#, 16), to_signed(16#21E8#, 16), to_signed(16#2213#, 16),
     to_signed(16#223D#, 16), to_signed(16#2268#, 16), to_signed(16#2292#, 16), to_signed(16#22BC#, 16),
     to_signed(16#22E7#, 16), to_signed(16#2311#, 16), to_signed(16#233B#, 16), to_signed(16#2365#, 16),
     to_signed(16#238E#, 16), to_signed(16#23B8#, 16), to_signed(16#23E2#, 16), to_signed(16#240B#, 16),
     to_signed(16#2435#, 16), to_signed(16#245E#, 16), to_signed(16#2488#, 16), to_signed(16#24B1#, 16),
     to_signed(16#24DA#, 16), to_signed(16#2503#, 16), to_signed(16#252C#, 16), to_signed(16#2555#, 16),
     to_signed(16#257E#, 16), to_signed(16#25A6#, 16), to_signed(16#25CF#, 16), to_signed(16#25F8#, 16),
     to_signed(16#2620#, 16), to_signed(16#2648#, 16), to_signed(16#2671#, 16), to_signed(16#2699#, 16),
     to_signed(16#26C1#, 16), to_signed(16#26E9#, 16), to_signed(16#2711#, 16), to_signed(16#2738#, 16),
     to_signed(16#2760#, 16), to_signed(16#2788#, 16), to_signed(16#27AF#, 16), to_signed(16#27D6#, 16),
     to_signed(16#27FE#, 16), to_signed(16#2825#, 16), to_signed(16#284C#, 16), to_signed(16#2873#, 16),
     to_signed(16#289A#, 16), to_signed(16#28C1#, 16), to_signed(16#28E7#, 16), to_signed(16#290E#, 16),
     to_signed(16#2935#, 16), to_signed(16#295B#, 16), to_signed(16#2981#, 16), to_signed(16#29A7#, 16),
     to_signed(16#29CE#, 16), to_signed(16#29F4#, 16), to_signed(16#2A1A#, 16), to_signed(16#2A3F#, 16),
     to_signed(16#2A65#, 16), to_signed(16#2A8B#, 16), to_signed(16#2AB0#, 16), to_signed(16#2AD6#, 16),
     to_signed(16#2AFB#, 16), to_signed(16#2B20#, 16), to_signed(16#2B45#, 16), to_signed(16#2B6A#, 16),
     to_signed(16#2B8F#, 16), to_signed(16#2BB4#, 16), to_signed(16#2BD8#, 16), to_signed(16#2BFD#, 16),
     to_signed(16#2C21#, 16), to_signed(16#2C46#, 16), to_signed(16#2C6A#, 16), to_signed(16#2C8E#, 16),
     to_signed(16#2CB2#, 16), to_signed(16#2CD6#, 16), to_signed(16#2CFA#, 16), to_signed(16#2D1E#, 16),
     to_signed(16#2D41#, 16), to_signed(16#2D65#, 16), to_signed(16#2D88#, 16), to_signed(16#2DAB#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DF2#, 16), to_signed(16#2E15#, 16), to_signed(16#2E37#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E9F#, 16), to_signed(16#2EC2#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2F06#, 16), to_signed(16#2F28#, 16), to_signed(16#2F4A#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F8D#, 16), to_signed(16#2FAF#, 16), to_signed(16#2FD0#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#3013#, 16), to_signed(16#3034#, 16), to_signed(16#3055#, 16),
     to_signed(16#3076#, 16), to_signed(16#3097#, 16), to_signed(16#30B8#, 16), to_signed(16#30D8#, 16),
     to_signed(16#30F9#, 16), to_signed(16#3119#, 16), to_signed(16#3139#, 16), to_signed(16#3159#, 16),
     to_signed(16#3179#, 16), to_signed(16#3199#, 16), to_signed(16#31B9#, 16), to_signed(16#31D8#, 16),
     to_signed(16#31F8#, 16), to_signed(16#3217#, 16), to_signed(16#3236#, 16), to_signed(16#3255#, 16),
     to_signed(16#3274#, 16), to_signed(16#3293#, 16), to_signed(16#32B2#, 16), to_signed(16#32D0#, 16),
     to_signed(16#32EF#, 16), to_signed(16#330D#, 16), to_signed(16#332C#, 16), to_signed(16#334A#, 16),
     to_signed(16#3368#, 16), to_signed(16#3386#, 16), to_signed(16#33A3#, 16), to_signed(16#33C1#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33FC#, 16), to_signed(16#3419#, 16), to_signed(16#3436#, 16),
     to_signed(16#3453#, 16), to_signed(16#3470#, 16), to_signed(16#348D#, 16), to_signed(16#34AA#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34E2#, 16), to_signed(16#34FF#, 16), to_signed(16#351B#, 16),
     to_signed(16#3537#, 16), to_signed(16#3553#, 16), to_signed(16#356E#, 16), to_signed(16#358A#, 16),
     to_signed(16#35A5#, 16), to_signed(16#35C1#, 16), to_signed(16#35DC#, 16), to_signed(16#35F7#, 16),
     to_signed(16#3612#, 16), to_signed(16#362D#, 16), to_signed(16#3648#, 16), to_signed(16#3662#, 16),
     to_signed(16#367D#, 16), to_signed(16#3697#, 16), to_signed(16#36B1#, 16), to_signed(16#36CB#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36FF#, 16), to_signed(16#3718#, 16), to_signed(16#3732#, 16),
     to_signed(16#374B#, 16), to_signed(16#3765#, 16), to_signed(16#377E#, 16), to_signed(16#3797#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37C8#, 16), to_signed(16#37E1#, 16), to_signed(16#37F9#, 16),
     to_signed(16#3812#, 16), to_signed(16#382A#, 16), to_signed(16#3842#, 16), to_signed(16#385A#, 16),
     to_signed(16#3871#, 16), to_signed(16#3889#, 16), to_signed(16#38A1#, 16), to_signed(16#38B8#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38E6#, 16), to_signed(16#38FD#, 16), to_signed(16#3914#, 16),
     to_signed(16#392B#, 16), to_signed(16#3941#, 16), to_signed(16#3958#, 16), to_signed(16#396E#, 16),
     to_signed(16#3984#, 16), to_signed(16#399A#, 16), to_signed(16#39B0#, 16), to_signed(16#39C5#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39F0#, 16), to_signed(16#3A06#, 16), to_signed(16#3A1B#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A45#, 16), to_signed(16#3A59#, 16), to_signed(16#3A6E#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A97#, 16), to_signed(16#3AAB#, 16), to_signed(16#3ABF#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AE6#, 16), to_signed(16#3AFA#, 16), to_signed(16#3B0E#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B34#, 16), to_signed(16#3B47#, 16), to_signed(16#3B5A#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B92#, 16), to_signed(16#3BA4#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BDA#, 16), to_signed(16#3BEC#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C20#, 16), to_signed(16#3C31#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C53#, 16), to_signed(16#3C64#, 16), to_signed(16#3C74#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C95#, 16), to_signed(16#3CA5#, 16), to_signed(16#3CB5#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CE4#, 16), to_signed(16#3CF4#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3D12#, 16), to_signed(16#3D21#, 16), to_signed(16#3D30#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D5B#, 16), to_signed(16#3D6A#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D86#, 16), to_signed(16#3D93#, 16), to_signed(16#3DA1#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DC9#, 16), to_signed(16#3DD6#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DFC#, 16), to_signed(16#3E09#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E21#, 16), to_signed(16#3E2D#, 16), to_signed(16#3E39#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E50#, 16), to_signed(16#3E5C#, 16), to_signed(16#3E67#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E88#, 16), to_signed(16#3E92#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EB1#, 16), to_signed(16#3EBB#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ED8#, 16), to_signed(16#3EE2#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EFD#, 16), to_signed(16#3F06#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F17#, 16), to_signed(16#3F20#, 16), to_signed(16#3F28#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F38#, 16), to_signed(16#3F40#, 16), to_signed(16#3F47#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F56#, 16), to_signed(16#3F5D#, 16), to_signed(16#3F64#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F72#, 16), to_signed(16#3F78#, 16), to_signed(16#3F7F#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F91#, 16), to_signed(16#3F97#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3FA2#, 16), to_signed(16#3FA7#, 16), to_signed(16#3FAC#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FBB#, 16), to_signed(16#3FBF#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FCC#, 16), to_signed(16#3FD0#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FDB#, 16), to_signed(16#3FDE#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE7#, 16), to_signed(16#3FEA#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FF1#, 16), to_signed(16#3FF3#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF8#, 16), to_signed(16#3FFA#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16));  -- sfix16 [513]
  CONSTANT Look_Up_Table_data_2           : vector_of_signed16(0 TO 512) := 
    (to_signed(16#0000#, 16), to_signed(16#0032#, 16), to_signed(16#0065#, 16), to_signed(16#0097#, 16),
     to_signed(16#00C9#, 16), to_signed(16#00FB#, 16), to_signed(16#012E#, 16), to_signed(16#0160#, 16),
     to_signed(16#0192#, 16), to_signed(16#01C4#, 16), to_signed(16#01F7#, 16), to_signed(16#0229#, 16),
     to_signed(16#025B#, 16), to_signed(16#028D#, 16), to_signed(16#02C0#, 16), to_signed(16#02F2#, 16),
     to_signed(16#0324#, 16), to_signed(16#0356#, 16), to_signed(16#0388#, 16), to_signed(16#03BB#, 16),
     to_signed(16#03ED#, 16), to_signed(16#041F#, 16), to_signed(16#0451#, 16), to_signed(16#0483#, 16),
     to_signed(16#04B5#, 16), to_signed(16#04E7#, 16), to_signed(16#051A#, 16), to_signed(16#054C#, 16),
     to_signed(16#057E#, 16), to_signed(16#05B0#, 16), to_signed(16#05E2#, 16), to_signed(16#0614#, 16),
     to_signed(16#0646#, 16), to_signed(16#0678#, 16), to_signed(16#06AA#, 16), to_signed(16#06DC#, 16),
     to_signed(16#070E#, 16), to_signed(16#0740#, 16), to_signed(16#0772#, 16), to_signed(16#07A4#, 16),
     to_signed(16#07D6#, 16), to_signed(16#0807#, 16), to_signed(16#0839#, 16), to_signed(16#086B#, 16),
     to_signed(16#089D#, 16), to_signed(16#08CF#, 16), to_signed(16#0901#, 16), to_signed(16#0932#, 16),
     to_signed(16#0964#, 16), to_signed(16#0996#, 16), to_signed(16#09C7#, 16), to_signed(16#09F9#, 16),
     to_signed(16#0A2B#, 16), to_signed(16#0A5C#, 16), to_signed(16#0A8E#, 16), to_signed(16#0AC0#, 16),
     to_signed(16#0AF1#, 16), to_signed(16#0B23#, 16), to_signed(16#0B54#, 16), to_signed(16#0B85#, 16),
     to_signed(16#0BB7#, 16), to_signed(16#0BE8#, 16), to_signed(16#0C1A#, 16), to_signed(16#0C4B#, 16),
     to_signed(16#0C7C#, 16), to_signed(16#0CAE#, 16), to_signed(16#0CDF#, 16), to_signed(16#0D10#, 16),
     to_signed(16#0D41#, 16), to_signed(16#0D72#, 16), to_signed(16#0DA4#, 16), to_signed(16#0DD5#, 16),
     to_signed(16#0E06#, 16), to_signed(16#0E37#, 16), to_signed(16#0E68#, 16), to_signed(16#0E99#, 16),
     to_signed(16#0ECA#, 16), to_signed(16#0EFB#, 16), to_signed(16#0F2B#, 16), to_signed(16#0F5C#, 16),
     to_signed(16#0F8D#, 16), to_signed(16#0FBE#, 16), to_signed(16#0FEE#, 16), to_signed(16#101F#, 16),
     to_signed(16#1050#, 16), to_signed(16#1080#, 16), to_signed(16#10B1#, 16), to_signed(16#10E1#, 16),
     to_signed(16#1112#, 16), to_signed(16#1142#, 16), to_signed(16#1173#, 16), to_signed(16#11A3#, 16),
     to_signed(16#11D3#, 16), to_signed(16#1204#, 16), to_signed(16#1234#, 16), to_signed(16#1264#, 16),
     to_signed(16#1294#, 16), to_signed(16#12C4#, 16), to_signed(16#12F4#, 16), to_signed(16#1324#, 16),
     to_signed(16#1354#, 16), to_signed(16#1384#, 16), to_signed(16#13B4#, 16), to_signed(16#13E4#, 16),
     to_signed(16#1413#, 16), to_signed(16#1443#, 16), to_signed(16#1473#, 16), to_signed(16#14A2#, 16),
     to_signed(16#14D2#, 16), to_signed(16#1501#, 16), to_signed(16#1531#, 16), to_signed(16#1560#, 16),
     to_signed(16#1590#, 16), to_signed(16#15BF#, 16), to_signed(16#15EE#, 16), to_signed(16#161D#, 16),
     to_signed(16#164C#, 16), to_signed(16#167C#, 16), to_signed(16#16AB#, 16), to_signed(16#16DA#, 16),
     to_signed(16#1709#, 16), to_signed(16#1737#, 16), to_signed(16#1766#, 16), to_signed(16#1795#, 16),
     to_signed(16#17C4#, 16), to_signed(16#17F2#, 16), to_signed(16#1821#, 16), to_signed(16#184F#, 16),
     to_signed(16#187E#, 16), to_signed(16#18AC#, 16), to_signed(16#18DB#, 16), to_signed(16#1909#, 16),
     to_signed(16#1937#, 16), to_signed(16#1965#, 16), to_signed(16#1993#, 16), to_signed(16#19C1#, 16),
     to_signed(16#19EF#, 16), to_signed(16#1A1D#, 16), to_signed(16#1A4B#, 16), to_signed(16#1A79#, 16),
     to_signed(16#1AA7#, 16), to_signed(16#1AD4#, 16), to_signed(16#1B02#, 16), to_signed(16#1B30#, 16),
     to_signed(16#1B5D#, 16), to_signed(16#1B8A#, 16), to_signed(16#1BB8#, 16), to_signed(16#1BE5#, 16),
     to_signed(16#1C12#, 16), to_signed(16#1C3F#, 16), to_signed(16#1C6C#, 16), to_signed(16#1C99#, 16),
     to_signed(16#1CC6#, 16), to_signed(16#1CF3#, 16), to_signed(16#1D20#, 16), to_signed(16#1D4D#, 16),
     to_signed(16#1D79#, 16), to_signed(16#1DA6#, 16), to_signed(16#1DD3#, 16), to_signed(16#1DFF#, 16),
     to_signed(16#1E2B#, 16), to_signed(16#1E58#, 16), to_signed(16#1E84#, 16), to_signed(16#1EB0#, 16),
     to_signed(16#1EDC#, 16), to_signed(16#1F08#, 16), to_signed(16#1F34#, 16), to_signed(16#1F60#, 16),
     to_signed(16#1F8C#, 16), to_signed(16#1FB7#, 16), to_signed(16#1FE3#, 16), to_signed(16#200F#, 16),
     to_signed(16#203A#, 16), to_signed(16#2065#, 16), to_signed(16#2091#, 16), to_signed(16#20BC#, 16),
     to_signed(16#20E7#, 16), to_signed(16#2112#, 16), to_signed(16#213D#, 16), to_signed(16#2168#, 16),
     to_signed(16#2193#, 16), to_signed(16#21BE#, 16), to_signed(16#21E8#, 16), to_signed(16#2213#, 16),
     to_signed(16#223D#, 16), to_signed(16#2268#, 16), to_signed(16#2292#, 16), to_signed(16#22BC#, 16),
     to_signed(16#22E7#, 16), to_signed(16#2311#, 16), to_signed(16#233B#, 16), to_signed(16#2365#, 16),
     to_signed(16#238E#, 16), to_signed(16#23B8#, 16), to_signed(16#23E2#, 16), to_signed(16#240B#, 16),
     to_signed(16#2435#, 16), to_signed(16#245E#, 16), to_signed(16#2488#, 16), to_signed(16#24B1#, 16),
     to_signed(16#24DA#, 16), to_signed(16#2503#, 16), to_signed(16#252C#, 16), to_signed(16#2555#, 16),
     to_signed(16#257E#, 16), to_signed(16#25A6#, 16), to_signed(16#25CF#, 16), to_signed(16#25F8#, 16),
     to_signed(16#2620#, 16), to_signed(16#2648#, 16), to_signed(16#2671#, 16), to_signed(16#2699#, 16),
     to_signed(16#26C1#, 16), to_signed(16#26E9#, 16), to_signed(16#2711#, 16), to_signed(16#2738#, 16),
     to_signed(16#2760#, 16), to_signed(16#2788#, 16), to_signed(16#27AF#, 16), to_signed(16#27D6#, 16),
     to_signed(16#27FE#, 16), to_signed(16#2825#, 16), to_signed(16#284C#, 16), to_signed(16#2873#, 16),
     to_signed(16#289A#, 16), to_signed(16#28C1#, 16), to_signed(16#28E7#, 16), to_signed(16#290E#, 16),
     to_signed(16#2935#, 16), to_signed(16#295B#, 16), to_signed(16#2981#, 16), to_signed(16#29A7#, 16),
     to_signed(16#29CE#, 16), to_signed(16#29F4#, 16), to_signed(16#2A1A#, 16), to_signed(16#2A3F#, 16),
     to_signed(16#2A65#, 16), to_signed(16#2A8B#, 16), to_signed(16#2AB0#, 16), to_signed(16#2AD6#, 16),
     to_signed(16#2AFB#, 16), to_signed(16#2B20#, 16), to_signed(16#2B45#, 16), to_signed(16#2B6A#, 16),
     to_signed(16#2B8F#, 16), to_signed(16#2BB4#, 16), to_signed(16#2BD8#, 16), to_signed(16#2BFD#, 16),
     to_signed(16#2C21#, 16), to_signed(16#2C46#, 16), to_signed(16#2C6A#, 16), to_signed(16#2C8E#, 16),
     to_signed(16#2CB2#, 16), to_signed(16#2CD6#, 16), to_signed(16#2CFA#, 16), to_signed(16#2D1E#, 16),
     to_signed(16#2D41#, 16), to_signed(16#2D65#, 16), to_signed(16#2D88#, 16), to_signed(16#2DAB#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DF2#, 16), to_signed(16#2E15#, 16), to_signed(16#2E37#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E9F#, 16), to_signed(16#2EC2#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2F06#, 16), to_signed(16#2F28#, 16), to_signed(16#2F4A#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F8D#, 16), to_signed(16#2FAF#, 16), to_signed(16#2FD0#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#3013#, 16), to_signed(16#3034#, 16), to_signed(16#3055#, 16),
     to_signed(16#3076#, 16), to_signed(16#3097#, 16), to_signed(16#30B8#, 16), to_signed(16#30D8#, 16),
     to_signed(16#30F9#, 16), to_signed(16#3119#, 16), to_signed(16#3139#, 16), to_signed(16#3159#, 16),
     to_signed(16#3179#, 16), to_signed(16#3199#, 16), to_signed(16#31B9#, 16), to_signed(16#31D8#, 16),
     to_signed(16#31F8#, 16), to_signed(16#3217#, 16), to_signed(16#3236#, 16), to_signed(16#3255#, 16),
     to_signed(16#3274#, 16), to_signed(16#3293#, 16), to_signed(16#32B2#, 16), to_signed(16#32D0#, 16),
     to_signed(16#32EF#, 16), to_signed(16#330D#, 16), to_signed(16#332C#, 16), to_signed(16#334A#, 16),
     to_signed(16#3368#, 16), to_signed(16#3386#, 16), to_signed(16#33A3#, 16), to_signed(16#33C1#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33FC#, 16), to_signed(16#3419#, 16), to_signed(16#3436#, 16),
     to_signed(16#3453#, 16), to_signed(16#3470#, 16), to_signed(16#348D#, 16), to_signed(16#34AA#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34E2#, 16), to_signed(16#34FF#, 16), to_signed(16#351B#, 16),
     to_signed(16#3537#, 16), to_signed(16#3553#, 16), to_signed(16#356E#, 16), to_signed(16#358A#, 16),
     to_signed(16#35A5#, 16), to_signed(16#35C1#, 16), to_signed(16#35DC#, 16), to_signed(16#35F7#, 16),
     to_signed(16#3612#, 16), to_signed(16#362D#, 16), to_signed(16#3648#, 16), to_signed(16#3662#, 16),
     to_signed(16#367D#, 16), to_signed(16#3697#, 16), to_signed(16#36B1#, 16), to_signed(16#36CB#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36FF#, 16), to_signed(16#3718#, 16), to_signed(16#3732#, 16),
     to_signed(16#374B#, 16), to_signed(16#3765#, 16), to_signed(16#377E#, 16), to_signed(16#3797#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37C8#, 16), to_signed(16#37E1#, 16), to_signed(16#37F9#, 16),
     to_signed(16#3812#, 16), to_signed(16#382A#, 16), to_signed(16#3842#, 16), to_signed(16#385A#, 16),
     to_signed(16#3871#, 16), to_signed(16#3889#, 16), to_signed(16#38A1#, 16), to_signed(16#38B8#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38E6#, 16), to_signed(16#38FD#, 16), to_signed(16#3914#, 16),
     to_signed(16#392B#, 16), to_signed(16#3941#, 16), to_signed(16#3958#, 16), to_signed(16#396E#, 16),
     to_signed(16#3984#, 16), to_signed(16#399A#, 16), to_signed(16#39B0#, 16), to_signed(16#39C5#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39F0#, 16), to_signed(16#3A06#, 16), to_signed(16#3A1B#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A45#, 16), to_signed(16#3A59#, 16), to_signed(16#3A6E#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A97#, 16), to_signed(16#3AAB#, 16), to_signed(16#3ABF#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AE6#, 16), to_signed(16#3AFA#, 16), to_signed(16#3B0E#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B34#, 16), to_signed(16#3B47#, 16), to_signed(16#3B5A#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B92#, 16), to_signed(16#3BA4#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BDA#, 16), to_signed(16#3BEC#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C20#, 16), to_signed(16#3C31#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C53#, 16), to_signed(16#3C64#, 16), to_signed(16#3C74#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C95#, 16), to_signed(16#3CA5#, 16), to_signed(16#3CB5#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CE4#, 16), to_signed(16#3CF4#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3D12#, 16), to_signed(16#3D21#, 16), to_signed(16#3D30#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D5B#, 16), to_signed(16#3D6A#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D86#, 16), to_signed(16#3D93#, 16), to_signed(16#3DA1#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DC9#, 16), to_signed(16#3DD6#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DFC#, 16), to_signed(16#3E09#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E21#, 16), to_signed(16#3E2D#, 16), to_signed(16#3E39#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E50#, 16), to_signed(16#3E5C#, 16), to_signed(16#3E67#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E88#, 16), to_signed(16#3E92#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EB1#, 16), to_signed(16#3EBB#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ED8#, 16), to_signed(16#3EE2#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EFD#, 16), to_signed(16#3F06#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F17#, 16), to_signed(16#3F20#, 16), to_signed(16#3F28#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F38#, 16), to_signed(16#3F40#, 16), to_signed(16#3F47#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F56#, 16), to_signed(16#3F5D#, 16), to_signed(16#3F64#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F72#, 16), to_signed(16#3F78#, 16), to_signed(16#3F7F#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F91#, 16), to_signed(16#3F97#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3FA2#, 16), to_signed(16#3FA7#, 16), to_signed(16#3FAC#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FBB#, 16), to_signed(16#3FBF#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FCC#, 16), to_signed(16#3FD0#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FDB#, 16), to_signed(16#3FDE#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE7#, 16), to_signed(16#3FEA#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FF1#, 16), to_signed(16#3FF3#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF8#, 16), to_signed(16#3FFA#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16));  -- sfix16 [513]

  -- Signals
  SIGNAL u_signed                         : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL CastU16En16_out1                 : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Point50_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp50_relop1                    : std_logic;
  SIGNAL Amp50_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp50_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp50_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL CastU16En16_out1_dtc             : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle1_out1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Point25_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp25_1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL LTEp25_relop1                    : std_logic;
  SIGNAL p50mA_sub_cast                   : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL p50mA_sub_cast_1                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL p50mA_out1                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL QuadHandle1_out1_dtc             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL QuadHandle2_out1                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Look_Up_Table_out1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Negate_cast                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_cast_1                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL SignCorrected_out1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL CastU16En16_out1_1               : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Point25_out1_1                   : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp25_relop1_1                  : std_logic;
  SIGNAL Point75_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL GTEp75_relop1                    : std_logic;
  SIGNAL alpha1st_or_4th_Quad_bool        : std_logic;
  SIGNAL alpha1st_or_4th_Quad_out1        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Point50_out1_1                   : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp50_relop1_1                  : std_logic;
  SIGNAL p75mA_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p75mA_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p75mA_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp75_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp75_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp75_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle1b_out1                : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp25_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp25_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp25_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p25mA_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p25mA_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p25mA_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle1a_out1                : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle2_out1_1               : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Look_Up_Table_out1_1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Negate_cast_2                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_cast_3                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_out1_1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL SignCorrected_out1_1             : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  u_signed <= signed(u);

  CastU16En16_out1 <= unsigned(u_signed(19 DOWNTO 4));

  Point50_out1 <= to_unsigned(16#8000#, 16);

  
  LTEp50_relop1 <= '1' WHEN CastU16En16_out1 <= Point50_out1 ELSE
      '0';

  Amp50_sub_cast <= signed(resize(CastU16En16_out1, 17));
  Amp50_sub_cast_1 <= signed(resize(Point50_out1, 17));
  Amp50_out1 <= Amp50_sub_cast - Amp50_sub_cast_1;

  CastU16En16_out1_dtc <= signed(resize(CastU16En16_out1, 17));

  
  QuadHandle1_out1 <= Amp50_out1 WHEN LTEp50_relop1 = '0' ELSE
      CastU16En16_out1_dtc;

  Point25_out1 <= to_unsigned(16#4000#, 16);

  LTEp25_1_cast <= signed(resize(Point25_out1, 17));
  
  LTEp25_relop1 <= '1' WHEN QuadHandle1_out1 <= LTEp25_1_cast ELSE
      '0';

  p50mA_sub_cast <= signed(resize(Point50_out1, 18));
  p50mA_sub_cast_1 <= resize(QuadHandle1_out1, 18);
  p50mA_out1 <= p50mA_sub_cast - p50mA_sub_cast_1;

  QuadHandle1_out1_dtc <= resize(QuadHandle1_out1, 18);

  
  QuadHandle2_out1 <= p50mA_out1 WHEN LTEp25_relop1 = '0' ELSE
      QuadHandle1_out1_dtc;

  Look_Up_Table_output : PROCESS (QuadHandle2_out1)
    VARIABLE dout_low : signed(15 DOWNTO 0);
    VARIABLE k : unsigned(9 DOWNTO 0);
    VARIABLE f : unsigned(31 DOWNTO 0);
    VARIABLE in0 : signed(17 DOWNTO 0);
    VARIABLE in0_0 : signed(17 DOWNTO 0);
    VARIABLE add_cast : signed(49 DOWNTO 0);
    VARIABLE cast : signed(32 DOWNTO 0);
    VARIABLE sub_cast : signed(16 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(16 DOWNTO 0);
    VARIABLE sub_temp : signed(16 DOWNTO 0);
    VARIABLE mul_temp : signed(49 DOWNTO 0);
    VARIABLE add_cast_0 : signed(48 DOWNTO 0);
    VARIABLE add_cast_1 : signed(49 DOWNTO 0);
    VARIABLE add_temp : signed(49 DOWNTO 0);
  BEGIN
    in0 := to_signed(16#00000#, 18);
    in0_0 := to_signed(16#00000#, 18);
    IF QuadHandle2_out1 <= to_signed(16#00000#, 18) THEN 
      k := to_unsigned(16#000#, 10);
    ELSIF QuadHandle2_out1 >= to_signed(16#04000#, 18) THEN 
      k := to_unsigned(16#200#, 10);
    ELSE 
      in0 := SHIFT_RIGHT(QuadHandle2_out1, 5);
      k := unsigned(in0(9 DOWNTO 0));
    END IF;
    IF (QuadHandle2_out1 <= to_signed(16#00000#, 18)) OR (QuadHandle2_out1 >= to_signed(16#04000#, 18)) THEN 
      f := to_unsigned(0, 32);
    ELSE 
      in0_0 := QuadHandle2_out1 AND to_signed(16#0001F#, 18);
      f := unsigned(in0_0(4 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0');
    END IF;
    dout_low := Look_Up_Table_data(to_integer(k));
    IF  NOT (k = to_unsigned(16#200#, 10)) THEN 
      k := k + to_unsigned(16#001#, 10);
    END IF;
    add_cast := resize(dout_low & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 50);
    cast := signed(resize(f, 33));
    sub_cast := resize(Look_Up_Table_data(to_integer(k)), 17);
    sub_cast_0 := resize(dout_low, 17);
    sub_temp := sub_cast - sub_cast_0;
    mul_temp := cast * sub_temp;
    add_cast_0 := mul_temp(48 DOWNTO 0);
    add_cast_1 := resize(add_cast_0, 50);
    add_temp := add_cast + add_cast_1;
    Look_Up_Table_out1 <= add_temp(47 DOWNTO 32);
  END PROCESS Look_Up_Table_output;


  Negate_cast <= resize(Look_Up_Table_out1, 17);
  Negate_cast_1 <=  - (Negate_cast);
  Negate_out1 <= Negate_cast_1(15 DOWNTO 0);

  
  SignCorrected_out1 <= Negate_out1 WHEN LTEp50_relop1 = '0' ELSE
      Look_Up_Table_out1;

  sin_2_pi_u <= std_logic_vector(SignCorrected_out1);

  CastU16En16_out1_1 <= unsigned(u_signed(19 DOWNTO 4));

  Point25_out1_1 <= to_unsigned(16#4000#, 16);

  
  LTEp25_relop1_1 <= '1' WHEN CastU16En16_out1_1 <= Point25_out1_1 ELSE
      '0';

  Point75_out1 <= to_unsigned(16#C000#, 16);

  
  GTEp75_relop1 <= '1' WHEN CastU16En16_out1_1 >= Point75_out1 ELSE
      '0';

  alpha1st_or_4th_Quad_bool <= LTEp25_relop1_1 OR GTEp75_relop1;

  alpha1st_or_4th_Quad_out1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & alpha1st_or_4th_Quad_bool;

  Point50_out1_1 <= to_unsigned(16#8000#, 16);

  
  LTEp50_relop1_1 <= '1' WHEN CastU16En16_out1_1 <= Point50_out1_1 ELSE
      '0';

  p75mA_sub_cast <= signed(resize(Point75_out1, 17));
  p75mA_sub_cast_1 <= signed(resize(CastU16En16_out1_1, 17));
  p75mA_out1 <= p75mA_sub_cast - p75mA_sub_cast_1;

  Amp75_sub_cast <= signed(resize(CastU16En16_out1_1, 17));
  Amp75_sub_cast_1 <= signed(resize(Point75_out1, 17));
  Amp75_out1 <= Amp75_sub_cast - Amp75_sub_cast_1;

  
  QuadHandle1b_out1 <= p75mA_out1 WHEN GTEp75_relop1 = '0' ELSE
      Amp75_out1;

  Amp25_sub_cast <= signed(resize(CastU16En16_out1_1, 17));
  Amp25_sub_cast_1 <= signed(resize(Point25_out1_1, 17));
  Amp25_out1 <= Amp25_sub_cast - Amp25_sub_cast_1;

  p25mA_sub_cast <= signed(resize(Point25_out1_1, 17));
  p25mA_sub_cast_1 <= signed(resize(CastU16En16_out1_1, 17));
  p25mA_out1 <= p25mA_sub_cast - p25mA_sub_cast_1;

  
  QuadHandle1a_out1 <= Amp25_out1 WHEN LTEp25_relop1_1 = '0' ELSE
      p25mA_out1;

  
  QuadHandle2_out1_1 <= QuadHandle1b_out1 WHEN LTEp50_relop1_1 = '0' ELSE
      QuadHandle1a_out1;

  Look_Up_Table_1_output : PROCESS (QuadHandle2_out1_1)
    VARIABLE dout_low1 : signed(15 DOWNTO 0);
    VARIABLE k1 : unsigned(9 DOWNTO 0);
    VARIABLE f1 : unsigned(31 DOWNTO 0);
    VARIABLE in01 : signed(16 DOWNTO 0);
    VARIABLE in0_01 : signed(16 DOWNTO 0);
    VARIABLE add_cast1 : signed(49 DOWNTO 0);
    VARIABLE cast1 : signed(32 DOWNTO 0);
    VARIABLE sub_cast1 : signed(16 DOWNTO 0);
    VARIABLE sub_cast_01 : signed(16 DOWNTO 0);
    VARIABLE sub_temp1 : signed(16 DOWNTO 0);
    VARIABLE mul_temp1 : signed(49 DOWNTO 0);
    VARIABLE add_cast_01 : signed(48 DOWNTO 0);
    VARIABLE add_cast_11 : signed(49 DOWNTO 0);
    VARIABLE add_temp1 : signed(49 DOWNTO 0);
  BEGIN
    in01 := to_signed(16#00000#, 17);
    in0_01 := to_signed(16#00000#, 17);
    IF QuadHandle2_out1_1 <= to_signed(16#00000#, 17) THEN 
      k1 := to_unsigned(16#000#, 10);
    ELSIF QuadHandle2_out1_1 >= to_signed(16#04000#, 17) THEN 
      k1 := to_unsigned(16#200#, 10);
    ELSE 
      in01 := SHIFT_RIGHT(QuadHandle2_out1_1, 5);
      k1 := unsigned(in01(9 DOWNTO 0));
    END IF;
    IF (QuadHandle2_out1_1 <= to_signed(16#00000#, 17)) OR (QuadHandle2_out1_1 >= to_signed(16#04000#, 17)) THEN 
      f1 := to_unsigned(0, 32);
    ELSE 
      in0_01 := QuadHandle2_out1_1 AND to_signed(16#0001F#, 17);
      f1 := unsigned(in0_01(4 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0');
    END IF;
    dout_low1 := Look_Up_Table_data_2(to_integer(k1));
    IF  NOT (k1 = to_unsigned(16#200#, 10)) THEN 
      k1 := k1 + to_unsigned(16#001#, 10);
    END IF;
    add_cast1 := resize(dout_low1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 50);
    cast1 := signed(resize(f1, 33));
    sub_cast1 := resize(Look_Up_Table_data_2(to_integer(k1)), 17);
    sub_cast_01 := resize(dout_low1, 17);
    sub_temp1 := sub_cast1 - sub_cast_01;
    mul_temp1 := cast1 * sub_temp1;
    add_cast_01 := mul_temp1(48 DOWNTO 0);
    add_cast_11 := resize(add_cast_01, 50);
    add_temp1 := add_cast1 + add_cast_11;
    Look_Up_Table_out1_1 <= add_temp1(47 DOWNTO 32);
  END PROCESS Look_Up_Table_1_output;


  Negate_cast_2 <= resize(Look_Up_Table_out1_1, 17);
  Negate_cast_3 <=  - (Negate_cast_2);
  Negate_out1_1 <= Negate_cast_3(15 DOWNTO 0);

  
  SignCorrected_out1_1 <= Negate_out1_1 WHEN alpha1st_or_4th_Quad_out1 = to_unsigned(16#00#, 8) ELSE
      Look_Up_Table_out1_1;

  cos_2_pi_u <= std_logic_vector(SignCorrected_out1_1);

END rtl;

