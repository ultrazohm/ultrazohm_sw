-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_dot134 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_m_empty_n : IN STD_LOGIC;
    p_m_read : OUT STD_LOGIC;
    p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_m_out_full_n : IN STD_LOGIC;
    p_m_out_write : OUT STD_LOGIC;
    p_M_r_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    p_M_r_empty_n : IN STD_LOGIC;
    p_M_r_read : OUT STD_LOGIC;
    p_x_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    p_x_empty_n : IN STD_LOGIC;
    p_x_read : OUT STD_LOGIC;
    p_y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_y_full_n : IN STD_LOGIC;
    p_y_write : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC );
end;


architecture behav of MLP_dot134 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_m_blk_n : STD_LOGIC;
    signal call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n : STD_LOGIC;
    signal p_m_out_blk_n : STD_LOGIC;
    signal p_n_blk_n : STD_LOGIC;
    signal p_m_read_reg_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_n_read_reg_75 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dot_fu_48_p_x_read : STD_LOGIC;
    signal grp_dot_fu_48_p_y_read : STD_LOGIC;
    signal grp_dot_fu_48_p_res_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dot_fu_48_p_res_write : STD_LOGIC;
    signal grp_dot_fu_48_ap_start : STD_LOGIC;
    signal grp_dot_fu_48_ap_done : STD_LOGIC;
    signal grp_dot_fu_48_ap_ready : STD_LOGIC;
    signal grp_dot_fu_48_ap_idle : STD_LOGIC;
    signal grp_dot_fu_48_ap_continue : STD_LOGIC;
    signal call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_start : STD_LOGIC;
    signal call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_done : STD_LOGIC;
    signal call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_idle : STD_LOGIC;
    signal call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_ready : STD_LOGIC;
    signal call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_write : STD_LOGIC;
    signal grp_dot_fu_48_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call13 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_dot_fu_48_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dot_fu_48_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dot_fu_48_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dot_fu_48_ap_done : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call12 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component MLP_dot IS
    port (
        p_x_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        p_x_empty_n : IN STD_LOGIC;
        p_x_read : OUT STD_LOGIC;
        p_y_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        p_y_empty_n : IN STD_LOGIC;
        p_y_read : OUT STD_LOGIC;
        p_res_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_res_full_n : IN STD_LOGIC;
        p_res_write : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_iter : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_iter_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MLP_p_prop_scalar_p_m_proc114 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        scalar_p_m : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_full_n : IN STD_LOGIC;
        p_m_out_write : OUT STD_LOGIC;
        p_m_out_blk_n : OUT STD_LOGIC );
    end component;



begin
    grp_dot_fu_48 : component MLP_dot
    port map (
        p_x_dout => p_M_r_dout,
        p_x_empty_n => p_M_r_empty_n,
        p_x_read => grp_dot_fu_48_p_x_read,
        p_y_dout => p_x_dout,
        p_y_empty_n => p_x_empty_n,
        p_y_read => grp_dot_fu_48_p_y_read,
        p_res_din => grp_dot_fu_48_p_res_din,
        p_res_full_n => p_y_full_n,
        p_res_write => grp_dot_fu_48_p_res_write,
        p_n => p_n_read_reg_75,
        p_iter => p_m_read_reg_70,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_n_ap_vld => ap_const_logic_1,
        p_iter_ap_vld => ap_const_logic_1,
        ap_start => grp_dot_fu_48_ap_start,
        ap_done => grp_dot_fu_48_ap_done,
        ap_ready => grp_dot_fu_48_ap_ready,
        ap_idle => grp_dot_fu_48_ap_idle,
        ap_continue => grp_dot_fu_48_ap_continue);

    call_ln59_p_prop_scalar_p_m_proc114_fu_62 : component MLP_p_prop_scalar_p_m_proc114
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_start,
        ap_done => call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_done,
        ap_idle => call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_idle,
        ap_ready => call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_ready,
        scalar_p_m => p_m_dout,
        p_m_out_din => call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_din,
        p_m_out_full_n => p_m_out_full_n,
        p_m_out_write => call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_write,
        p_m_out_blk_n => call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dot_fu_48_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dot_fu_48_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_dot_fu_48_ap_done <= ap_const_logic_0;
                elsif ((grp_dot_fu_48_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dot_fu_48_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dot_fu_48_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dot_fu_48_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_dot_fu_48_ap_ready <= ap_const_logic_0;
                elsif ((grp_dot_fu_48_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dot_fu_48_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dot_fu_48_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dot_fu_48_ap_start_reg <= ap_const_logic_0;
            else
                if (((not(((ap_start = ap_const_logic_0) or (call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sync_grp_dot_fu_48_ap_ready = ap_const_logic_0)))) then 
                    grp_dot_fu_48_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dot_fu_48_ap_ready = ap_const_logic_1)) then 
                    grp_dot_fu_48_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_m_read_reg_70 <= p_m_dout;
                p_n_read_reg_75 <= p_n_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_m_empty_n, p_n_empty_n, call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call12_assign_proc : process(ap_start, ap_done_reg, p_m_empty_n, p_n_empty_n)
    begin
                ap_block_state1_ignore_call12 <= ((ap_start = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call13_assign_proc : process(ap_start, ap_done_reg, p_m_empty_n, p_n_empty_n, call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n)
    begin
                ap_block_state1_ignore_call13 <= ((ap_start = ap_const_logic_0) or (call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_dot_fu_48_ap_ready, ap_sync_grp_dot_fu_48_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_dot_fu_48_ap_ready and ap_sync_grp_dot_fu_48_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dot_fu_48_ap_done <= (grp_dot_fu_48_ap_done or ap_sync_reg_grp_dot_fu_48_ap_done);
    ap_sync_grp_dot_fu_48_ap_ready <= (grp_dot_fu_48_ap_ready or ap_sync_reg_grp_dot_fu_48_ap_ready);

    call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_start_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_start <= ap_const_logic_1;
        else 
            call_ln59_p_prop_scalar_p_m_proc114_fu_62_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_dot_fu_48_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            grp_dot_fu_48_ap_continue <= ap_const_logic_1;
        else 
            grp_dot_fu_48_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dot_fu_48_ap_start <= grp_dot_fu_48_ap_start_reg;

    p_M_r_read_assign_proc : process(grp_dot_fu_48_p_x_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_M_r_read <= grp_dot_fu_48_p_x_read;
        else 
            p_M_r_read <= ap_const_logic_0;
        end if; 
    end process;


    p_m_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_blk_n <= p_m_empty_n;
        else 
            p_m_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_m_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_out_blk_n <= call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n;
        else 
            p_m_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_m_out_din <= call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_din;

    p_m_out_write_assign_proc : process(ap_CS_fsm_state1, call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_m_out_write <= call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_write;
        else 
            p_m_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_m_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_read <= ap_const_logic_1;
        else 
            p_m_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (call_ln59_p_prop_scalar_p_m_proc114_fu_62_p_m_out_blk_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_x_read_assign_proc : process(grp_dot_fu_48_p_y_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_x_read <= grp_dot_fu_48_p_y_read;
        else 
            p_x_read <= ap_const_logic_0;
        end if; 
    end process;

    p_y_din <= grp_dot_fu_48_p_res_din;

    p_y_write_assign_proc : process(grp_dot_fu_48_p_res_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_y_write <= grp_dot_fu_48_p_res_write;
        else 
            p_y_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
