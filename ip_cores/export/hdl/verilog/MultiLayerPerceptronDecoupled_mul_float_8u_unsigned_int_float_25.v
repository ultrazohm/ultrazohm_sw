// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MultiLayerPerceptronDecoupled_mul_float_8u_unsigned_int_float_25 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_x_dout,
        p_x_empty_n,
        p_x_read,
        p_y_dout,
        p_y_empty_n,
        p_y_read,
        p_res_din,
        p_res_full_n,
        p_res_write,
        p_n,
        p_mulIters,
        p_n_out_din,
        p_n_out_full_n,
        p_n_out_write,
        p_mulIters_out_din,
        p_mulIters_out_full_n,
        p_mulIters_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [255:0] p_x_dout;
input   p_x_empty_n;
output   p_x_read;
input  [255:0] p_y_dout;
input   p_y_empty_n;
output   p_y_read;
output  [255:0] p_res_din;
input   p_res_full_n;
output   p_res_write;
input  [31:0] p_n;
input  [31:0] p_mulIters;
output  [31:0] p_n_out_din;
input   p_n_out_full_n;
output   p_n_out_write;
output  [31:0] p_mulIters_out_din;
input   p_mulIters_out_full_n;
output   p_mulIters_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_x_read;
reg p_y_read;
reg p_res_write;
reg p_n_out_write;
reg p_mulIters_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_x_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln50_reg_505;
reg    p_y_blk_n;
reg    p_res_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln50_reg_505_pp0_iter3_reg;
reg    p_n_out_blk_n;
reg    p_mulIters_out_blk_n;
reg   [60:0] indvar_flatten_reg_141;
wire   [60:0] bound_fu_202_p2;
reg   [60:0] bound_reg_500;
reg    ap_block_state1;
wire   [0:0] icmp_ln50_fu_208_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln50_reg_505_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_505_pp0_iter2_reg;
wire   [60:0] add_ln50_fu_213_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_152_p0;
wire   [31:0] grp_fu_152_p1;
wire   [31:0] grp_fu_156_p0;
wire   [31:0] grp_fu_156_p1;
wire   [31:0] grp_fu_160_p0;
wire   [31:0] grp_fu_160_p1;
wire   [31:0] grp_fu_164_p0;
wire   [31:0] grp_fu_164_p1;
wire   [31:0] grp_fu_168_p0;
wire   [31:0] grp_fu_168_p1;
wire   [31:0] grp_fu_172_p0;
wire   [31:0] grp_fu_172_p1;
wire   [31:0] grp_fu_176_p0;
wire   [31:0] grp_fu_176_p1;
wire   [31:0] grp_fu_180_p0;
wire   [31:0] grp_fu_180_p1;
wire   [28:0] trunc_ln_fu_184_p4;
wire   [28:0] bound_fu_202_p0;
wire   [31:0] bound_fu_202_p1;
wire   [31:0] trunc_ln674_fu_219_p1;
wire   [31:0] p_Result_8_i_fu_228_p4;
wire   [31:0] p_Result_9_i_fu_243_p4;
wire   [31:0] p_Result_i_fu_258_p4;
wire   [31:0] p_Result_1_i_fu_273_p4;
wire   [31:0] p_Result_2_i_fu_288_p4;
wire   [31:0] p_Result_3_i_fu_303_p4;
wire   [31:0] p_Result_4_i_fu_318_p4;
wire   [31:0] trunc_ln674_1_fu_333_p1;
wire   [31:0] p_Result_6_i_fu_342_p4;
wire   [31:0] p_Result_7_i_fu_357_p4;
wire   [31:0] p_Result_10_i_fu_372_p4;
wire   [31:0] p_Result_11_i_fu_387_p4;
wire   [31:0] p_Result_12_i_fu_402_p4;
wire   [31:0] p_Result_13_i_fu_417_p4;
wire   [31:0] p_Result_14_i_fu_432_p4;
wire   [31:0] grp_fu_152_p2;
wire   [31:0] grp_fu_156_p2;
wire   [31:0] grp_fu_160_p2;
wire   [31:0] grp_fu_164_p2;
wire   [31:0] grp_fu_168_p2;
wire   [31:0] grp_fu_172_p2;
wire   [31:0] grp_fu_176_p2;
wire   [31:0] grp_fu_180_p2;
wire   [31:0] l_v_21_fu_475_p1;
wire   [31:0] l_v_20_fu_471_p1;
wire   [31:0] l_v_19_fu_467_p1;
wire   [31:0] l_v_18_fu_463_p1;
wire   [31:0] l_v_17_fu_459_p1;
wire   [31:0] l_v_16_fu_455_p1;
wire   [31:0] l_v_15_fu_451_p1;
wire   [31:0] l_v_fu_447_p1;
reg    grp_fu_152_ce;
reg    grp_fu_156_ce;
reg    grp_fu_160_ce;
reg    grp_fu_164_ce;
reg    grp_fu_168_ce;
reg    grp_fu_172_ce;
reg    grp_fu_176_ce;
reg    grp_fu_180_ce;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [60:0] bound_fu_202_p00;
wire   [60:0] bound_fu_202_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

MultiLayerPerceptronDecoupled_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U247(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_152_p0),
    .din1(grp_fu_152_p1),
    .ce(grp_fu_152_ce),
    .dout(grp_fu_152_p2)
);

MultiLayerPerceptronDecoupled_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U248(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_156_p0),
    .din1(grp_fu_156_p1),
    .ce(grp_fu_156_ce),
    .dout(grp_fu_156_p2)
);

MultiLayerPerceptronDecoupled_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U249(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_160_p0),
    .din1(grp_fu_160_p1),
    .ce(grp_fu_160_ce),
    .dout(grp_fu_160_p2)
);

MultiLayerPerceptronDecoupled_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U250(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_164_p0),
    .din1(grp_fu_164_p1),
    .ce(grp_fu_164_ce),
    .dout(grp_fu_164_p2)
);

MultiLayerPerceptronDecoupled_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U251(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_168_p0),
    .din1(grp_fu_168_p1),
    .ce(grp_fu_168_ce),
    .dout(grp_fu_168_p2)
);

MultiLayerPerceptronDecoupled_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U252(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_172_p0),
    .din1(grp_fu_172_p1),
    .ce(grp_fu_172_ce),
    .dout(grp_fu_172_p2)
);

MultiLayerPerceptronDecoupled_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U253(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_176_p0),
    .din1(grp_fu_176_p1),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

MultiLayerPerceptronDecoupled_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U254(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_180_p0),
    .din1(grp_fu_180_p1),
    .ce(grp_fu_180_ce),
    .dout(grp_fu_180_p2)
);

MultiLayerPerceptronDecoupled_mul_29ns_32ns_61_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 61 ))
mul_29ns_32ns_61_1_1_U255(
    .din0(bound_fu_202_p0),
    .din1(bound_fu_202_p1),
    .dout(bound_fu_202_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln50_fu_208_p2 == 1'd0))) begin
        indvar_flatten_reg_141 <= add_ln50_fu_213_p2;
    end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_141 <= 61'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_500 <= bound_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_505 <= icmp_ln50_fu_208_p2;
        icmp_ln50_reg_505_pp0_iter1_reg <= icmp_ln50_reg_505;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln50_reg_505_pp0_iter2_reg <= icmp_ln50_reg_505_pp0_iter1_reg;
        icmp_ln50_reg_505_pp0_iter3_reg <= icmp_ln50_reg_505_pp0_iter2_reg;
    end
end

always @ (*) begin
    if ((icmp_ln50_fu_208_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_152_ce = 1'b1;
    end else begin
        grp_fu_152_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_156_ce = 1'b1;
    end else begin
        grp_fu_156_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_160_ce = 1'b1;
    end else begin
        grp_fu_160_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_164_ce = 1'b1;
    end else begin
        grp_fu_164_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_168_ce = 1'b1;
    end else begin
        grp_fu_168_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_172_ce = 1'b1;
    end else begin
        grp_fu_172_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_out_blk_n = p_mulIters_out_full_n;
    end else begin
        p_mulIters_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_out_write = 1'b1;
    end else begin
        p_mulIters_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_blk_n = p_n_out_full_n;
    end else begin
        p_n_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_write = 1'b1;
    end else begin
        p_n_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_505_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        p_res_blk_n = p_res_full_n;
    end else begin
        p_res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_505_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_res_write = 1'b1;
    end else begin
        p_res_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_505 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_x_blk_n = p_x_empty_n;
    end else begin
        p_x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_505 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_x_read = 1'b1;
    end else begin
        p_x_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_505 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_y_blk_n = p_y_empty_n;
    end else begin
        p_y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_505 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_y_read = 1'b1;
    end else begin
        p_y_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln50_fu_208_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln50_fu_208_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_213_p2 = (indvar_flatten_reg_141 + 61'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln50_reg_505_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (p_res_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln50_reg_505 == 1'd0) & (p_y_empty_n == 1'b0)) | ((icmp_ln50_reg_505 == 1'd0) & (p_x_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln50_reg_505_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (p_res_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln50_reg_505 == 1'd0) & (p_y_empty_n == 1'b0)) | ((icmp_ln50_reg_505 == 1'd0) & (p_x_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln50_reg_505_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (p_res_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln50_reg_505 == 1'd0) & (p_y_empty_n == 1'b0)) | ((icmp_ln50_reg_505 == 1'd0) & (p_x_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln50_reg_505 == 1'd0) & (p_y_empty_n == 1'b0)) | ((icmp_ln50_reg_505 == 1'd0) & (p_x_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln50_reg_505_pp0_iter3_reg == 1'd0) & (p_res_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_202_p0 = bound_fu_202_p00;

assign bound_fu_202_p00 = trunc_ln_fu_184_p4;

assign bound_fu_202_p1 = bound_fu_202_p10;

assign bound_fu_202_p10 = p_mulIters;

assign grp_fu_152_p0 = trunc_ln674_fu_219_p1;

assign grp_fu_152_p1 = trunc_ln674_1_fu_333_p1;

assign grp_fu_156_p0 = p_Result_8_i_fu_228_p4;

assign grp_fu_156_p1 = p_Result_6_i_fu_342_p4;

assign grp_fu_160_p0 = p_Result_9_i_fu_243_p4;

assign grp_fu_160_p1 = p_Result_7_i_fu_357_p4;

assign grp_fu_164_p0 = p_Result_i_fu_258_p4;

assign grp_fu_164_p1 = p_Result_10_i_fu_372_p4;

assign grp_fu_168_p0 = p_Result_1_i_fu_273_p4;

assign grp_fu_168_p1 = p_Result_11_i_fu_387_p4;

assign grp_fu_172_p0 = p_Result_2_i_fu_288_p4;

assign grp_fu_172_p1 = p_Result_12_i_fu_402_p4;

assign grp_fu_176_p0 = p_Result_3_i_fu_303_p4;

assign grp_fu_176_p1 = p_Result_13_i_fu_417_p4;

assign grp_fu_180_p0 = p_Result_4_i_fu_318_p4;

assign grp_fu_180_p1 = p_Result_14_i_fu_432_p4;

assign icmp_ln50_fu_208_p2 = ((indvar_flatten_reg_141 == bound_reg_500) ? 1'b1 : 1'b0);

assign l_v_15_fu_451_p1 = grp_fu_156_p2;

assign l_v_16_fu_455_p1 = grp_fu_160_p2;

assign l_v_17_fu_459_p1 = grp_fu_164_p2;

assign l_v_18_fu_463_p1 = grp_fu_168_p2;

assign l_v_19_fu_467_p1 = grp_fu_172_p2;

assign l_v_20_fu_471_p1 = grp_fu_176_p2;

assign l_v_21_fu_475_p1 = grp_fu_180_p2;

assign l_v_fu_447_p1 = grp_fu_152_p2;

assign p_Result_10_i_fu_372_p4 = {{p_y_dout[127:96]}};

assign p_Result_11_i_fu_387_p4 = {{p_y_dout[159:128]}};

assign p_Result_12_i_fu_402_p4 = {{p_y_dout[191:160]}};

assign p_Result_13_i_fu_417_p4 = {{p_y_dout[223:192]}};

assign p_Result_14_i_fu_432_p4 = {{p_y_dout[255:224]}};

assign p_Result_1_i_fu_273_p4 = {{p_x_dout[159:128]}};

assign p_Result_2_i_fu_288_p4 = {{p_x_dout[191:160]}};

assign p_Result_3_i_fu_303_p4 = {{p_x_dout[223:192]}};

assign p_Result_4_i_fu_318_p4 = {{p_x_dout[255:224]}};

assign p_Result_6_i_fu_342_p4 = {{p_y_dout[63:32]}};

assign p_Result_7_i_fu_357_p4 = {{p_y_dout[95:64]}};

assign p_Result_8_i_fu_228_p4 = {{p_x_dout[63:32]}};

assign p_Result_9_i_fu_243_p4 = {{p_x_dout[95:64]}};

assign p_Result_i_fu_258_p4 = {{p_x_dout[127:96]}};

assign p_mulIters_out_din = p_mulIters;

assign p_n_out_din = p_n;

assign p_res_din = {{{{{{{{l_v_21_fu_475_p1}, {l_v_20_fu_471_p1}}, {l_v_19_fu_467_p1}}, {l_v_18_fu_463_p1}}, {l_v_17_fu_459_p1}}, {l_v_16_fu_455_p1}}, {l_v_15_fu_451_p1}}, {l_v_fu_447_p1}};

assign start_out = real_start;

assign trunc_ln674_1_fu_333_p1 = p_y_dout[31:0];

assign trunc_ln674_fu_219_p1 = p_x_dout[31:0];

assign trunc_ln_fu_184_p4 = {{p_n[31:3]}};

endmodule //MultiLayerPerceptronDecoupled_mul_float_8u_unsigned_int_float_25
