-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\IP_Core_SS_Switch_and_PWM\PWM_and_SS_control_V4_ip_src_GenPWM.vhd
-- Created: 2021-09-21 17:37:40
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: PWM_and_SS_control_V4_ip_src_GenPWM
-- Source Path: IP_Core_SS_Switch_and_PWM/PWM_and_Switching_Signal_Control/GenPWM
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY PWM_and_SS_control_V4_ip_src_GenPWM IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        PWM_en_AXI                        :   IN    std_logic;
        f_carrier_kHz_AXI                 :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25_En26
        T_carrier_us_AXI                  :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25
        min_pulse_width_AXI               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        U1_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U2_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U3_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U4_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U5_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U6_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U7_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U8_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U9_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U10_norm                          :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U11_norm                          :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U12_norm                          :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        S1                                :   OUT   std_logic;  -- ufix1
        S2                                :   OUT   std_logic;  -- ufix1
        S3                                :   OUT   std_logic;  -- ufix1
        S4                                :   OUT   std_logic;  -- ufix1
        S5                                :   OUT   std_logic;  -- ufix1
        S6                                :   OUT   std_logic;  -- ufix1
        S7                                :   OUT   std_logic;  -- ufix1
        S8                                :   OUT   std_logic;  -- ufix1
        S9                                :   OUT   std_logic;  -- ufix1
        S10                               :   OUT   std_logic;  -- ufix1
        S11                               :   OUT   std_logic;  -- ufix1
        S12                               :   OUT   std_logic;  -- ufix1
        S13                               :   OUT   std_logic;  -- ufix1
        S14                               :   OUT   std_logic;  -- ufix1
        S15                               :   OUT   std_logic;  -- ufix1
        S16                               :   OUT   std_logic;  -- ufix1
        S17                               :   OUT   std_logic;  -- ufix1
        S18                               :   OUT   std_logic;  -- ufix1
        S19                               :   OUT   std_logic;  -- ufix1
        S20                               :   OUT   std_logic;  -- ufix1
        S21                               :   OUT   std_logic;  -- ufix1
        S22                               :   OUT   std_logic;  -- ufix1
        S23                               :   OUT   std_logic;  -- ufix1
        S24                               :   OUT   std_logic;  -- ufix1
        PWM_en_rd_AXI                     :   OUT   std_logic;
        f_carrier_kHz_rd_AXI              :   OUT   std_logic_vector(24 DOWNTO 0);  -- ufix25_En26
        T_carrier_us_rd_AXI               :   OUT   std_logic_vector(24 DOWNTO 0);  -- ufix25
        min_pulse_width_rd_AXI            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        enb_out                           :   OUT   std_logic;
        Triangle_Max                      :   OUT   std_logic;
        Triangle_Min                      :   OUT   std_logic
        );
END PWM_and_SS_control_V4_ip_src_GenPWM;


ARCHITECTURE rtl OF PWM_and_SS_control_V4_ip_src_GenPWM IS

  -- Component Declarations
  COMPONENT PWM_and_SS_control_V4_ip_src_Counter_Ctrl
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          hdl_cnt                         :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20
          f_carrier_kHz                   :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25_En26
          T_carrier_us                    :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25
          dir_ctrl                        :   OUT   std_logic;
          triangle_sig                    :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18_En17
          Period_CenterMax                :   OUT   std_logic;
          Period_CenterMin                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth1
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth2
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth3
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth4
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth5
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth6
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth7
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth8
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth9
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth10
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT PWM_and_SS_control_V4_ip_src_LimitPulseWidth11
    PORT( ref_sig                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          min_pulse_width                 :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : PWM_and_SS_control_V4_ip_src_Counter_Ctrl
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_Counter_Ctrl(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth1
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth1(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth2
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth2(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth3
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth3(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth4
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth4(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth5
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth5(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth6
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth6(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth7
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth7(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth8
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth8(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth9
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth9(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth10
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth10(rtl);

  FOR ALL : PWM_and_SS_control_V4_ip_src_LimitPulseWidth11
    USE ENTITY work.PWM_and_SS_control_V4_ip_src_LimitPulseWidth11(rtl);

  -- Signals
  SIGNAL PWM_en_AXI_1                     : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant10_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL f_carrier_kHz_AXI_unsigned       : unsigned(24 DOWNTO 0);  -- ufix25_En26
  SIGNAL f_carrier_kHz_AXI_1              : unsigned(24 DOWNTO 0);  -- ufix25_En26
  SIGNAL T_carrier_us_AXI_unsigned        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL T_carrier_us_AXI_1               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Counter_Ctrl_out1                : std_logic;
  SIGNAL HDL_Counter2_count               : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL HDL_Counter2_count_next          : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL HDL_Counter2_count_step          : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL HDL_Counter2_out1                : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Counter_Ctrl_out2                : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Counter_Ctrl_out3                : std_logic;
  SIGNAL Counter_Ctrl_out4                : std_logic;
  SIGNAL Counter_Ctrl_out2_unsigned       : unsigned(17 DOWNTO 0);  -- ufix18_En17
  SIGNAL Allow_assymetrical_anew_reference_value : std_logic;
  SIGNAL U1_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U1_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay_out1                       : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL min_pulse_width_AXI_signed       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL min_pulse_width_AXI_1            : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL LimitPulseWidth_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth_out1_signed      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator_1_cast       : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator_1_cast_1     : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant1_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant2_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch7_out1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch3_out1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch3_out1_0                   : std_logic;  -- ufix1
  SIGNAL Demux_out1                       : std_logic;  -- ufix1
  SIGNAL Switch3_out1_1                   : std_logic;  -- ufix1
  SIGNAL Demux_out2                       : std_logic;  -- ufix1
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL U2_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U2_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch1_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay1_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth1_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth1_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator1_1_cast      : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator1_1_cast_1    : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Constant4_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant5_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch8_out1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch4_out1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch4_out1_0                   : std_logic;  -- ufix1
  SIGNAL Demux1_out1                      : std_logic;  -- ufix1
  SIGNAL Switch4_out1_1                   : std_logic;  -- ufix1
  SIGNAL Demux1_out2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL U3_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U3_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch2_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay2_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth2_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth2_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator2_1_cast      : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator2_1_cast_1    : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Constant7_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant8_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch9_out1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch5_out1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch5_out1_0                   : std_logic;  -- ufix1
  SIGNAL Demux2_out1                      : std_logic;  -- ufix1
  SIGNAL Switch5_out1_1                   : std_logic;  -- ufix1
  SIGNAL Demux2_out2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL U4_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U4_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch10_out1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay3_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth3_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth3_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator3_1_cast      : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator3_1_cast_1    : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator3_relop1      : std_logic;
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL Constant3_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant6_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch12_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch11_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch11_out1_0                  : std_logic;  -- ufix1
  SIGNAL Demux3_out1                      : std_logic;  -- ufix1
  SIGNAL Switch11_out1_1                  : std_logic;  -- ufix1
  SIGNAL Demux3_out2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL U5_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U5_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch13_out1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay4_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth4_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth4_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator4_1_cast      : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator4_1_cast_1    : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL Constant9_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant12_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch15_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch14_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch14_out1_0                  : std_logic;  -- ufix1
  SIGNAL Demux4_out1                      : std_logic;  -- ufix1
  SIGNAL Switch14_out1_1                  : std_logic;  -- ufix1
  SIGNAL Demux4_out2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL U6_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U6_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch16_out1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay5_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth5_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth5_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator5_1_cast      : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator5_1_cast_1    : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator5_relop1      : std_logic;
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL Constant13_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant14_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch18_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch17_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch17_out1_0                  : std_logic;  -- ufix1
  SIGNAL Demux5_out1                      : std_logic;  -- ufix1
  SIGNAL Switch17_out1_1                  : std_logic;  -- ufix1
  SIGNAL Demux5_out2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL U7_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U7_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch19_out1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay6_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth6_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth6_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator6_1_cast      : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator6_1_cast_1    : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator6_relop1      : std_logic;
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL Constant18_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant19_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch21_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch20_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch20_out1_0                  : std_logic;  -- ufix1
  SIGNAL Demux6_out1                      : std_logic;  -- ufix1
  SIGNAL Switch20_out1_1                  : std_logic;  -- ufix1
  SIGNAL Demux6_out2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL U8_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U8_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch22_out1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay7_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth7_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth7_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator7_1_cast      : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator7_1_cast_1    : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator7_relop1      : std_logic;
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL Constant20_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant15_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch24_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch23_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch23_out1_0                  : std_logic;  -- ufix1
  SIGNAL Demux7_out1                      : std_logic;  -- ufix1
  SIGNAL Switch23_out1_1                  : std_logic;  -- ufix1
  SIGNAL Demux7_out2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL U9_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U9_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch25_out1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay8_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth8_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth8_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator8_1_cast      : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator8_1_cast_1    : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator8_relop1      : std_logic;
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL Constant16_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant17_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch27_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch26_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch26_out1_0                  : std_logic;  -- ufix1
  SIGNAL Demux8_out1                      : std_logic;  -- ufix1
  SIGNAL Switch26_out1_1                  : std_logic;  -- ufix1
  SIGNAL Demux8_out2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL U10_norm_signed                  : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U10_norm_1                       : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch28_out1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay9_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth9_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth9_out1_signed     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator9_1_cast      : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator9_1_cast_1    : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator9_relop1      : std_logic;
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL Constant24_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant25_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch30_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch29_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch29_out1_0                  : std_logic;  -- ufix1
  SIGNAL Demux9_out1                      : std_logic;  -- ufix1
  SIGNAL Switch29_out1_1                  : std_logic;  -- ufix1
  SIGNAL Demux9_out2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL U11_norm_signed                  : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U11_norm_1                       : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch31_out1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay10_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth10_out1           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth10_out1_signed    : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator10_1_cast     : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator10_1_cast_1   : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator10_relop1     : std_logic;
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL Constant26_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant21_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch33_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch32_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch32_out1_0                  : std_logic;  -- ufix1
  SIGNAL Demux10_out1                     : std_logic;  -- ufix1
  SIGNAL Switch32_out1_1                  : std_logic;  -- ufix1
  SIGNAL Demux10_out2                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL U12_norm_signed                  : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U12_norm_1                       : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch34_out1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay11_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL LimitPulseWidth11_out1           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth11_out1_signed    : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Relational_Operator11_1_cast     : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator11_1_cast_1   : signed(18 DOWNTO 0);  -- sfix19_En17
  SIGNAL Relational_Operator11_relop1     : std_logic;
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL Constant22_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant23_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch36_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch35_out1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch35_out1_0                  : std_logic;  -- ufix1
  SIGNAL Demux11_out1                     : std_logic;  -- ufix1
  SIGNAL Switch35_out1_1                  : std_logic;  -- ufix1
  SIGNAL Demux11_out2                     : std_logic;  -- ufix1
  SIGNAL PWM_en_AXI_2                     : std_logic;
  SIGNAL f_carrier_kHz_AXI_2              : unsigned(24 DOWNTO 0);  -- ufix25_En26
  SIGNAL T_carrier_us_AXI_2               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL min_pulse_width_AXI_2            : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Constant11_out1                  : std_logic;
  SIGNAL Switch6_out1                     : std_logic;
  SIGNAL Switch6_out1_1                   : std_logic;
  SIGNAL Counter_Ctrl_out3_1              : std_logic;
  SIGNAL Counter_Ctrl_out4_1              : std_logic;

BEGIN
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 1
  -- 
  -- Phase-leg 2
  -- 
  -- Phase-leg 3
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 4
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 5
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 6
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 9
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 8
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 7
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 12
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 11
  -- 
  -- Asymetrical allows on the min
  -- and max counter value, a new
  -- Duty-Cycle (Compare value)
  -- 
  -- Phase-leg 10

  u_Counter_Ctrl : PWM_and_SS_control_V4_ip_src_Counter_Ctrl
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              hdl_cnt => std_logic_vector(HDL_Counter2_out1),  -- ufix20
              f_carrier_kHz => std_logic_vector(f_carrier_kHz_AXI_1),  -- ufix25_En26
              T_carrier_us => std_logic_vector(T_carrier_us_AXI_1),  -- ufix25
              dir_ctrl => Counter_Ctrl_out1,
              triangle_sig => Counter_Ctrl_out2,  -- ufix18_En17
              Period_CenterMax => Counter_Ctrl_out3,
              Period_CenterMin => Counter_Ctrl_out4
              );

  u_LimitPulseWidth : PWM_and_SS_control_V4_ip_src_LimitPulseWidth
    PORT MAP( ref_sig => std_logic_vector(Switch_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth_out1  -- sfix18_En16
              );

  u_LimitPulseWidth1 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth1
    PORT MAP( ref_sig => std_logic_vector(Switch1_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth1_out1  -- sfix18_En16
              );

  u_LimitPulseWidth2 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth2
    PORT MAP( ref_sig => std_logic_vector(Switch2_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth2_out1  -- sfix18_En16
              );

  u_LimitPulseWidth3 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth3
    PORT MAP( ref_sig => std_logic_vector(Switch10_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth3_out1  -- sfix18_En16
              );

  u_LimitPulseWidth4 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth4
    PORT MAP( ref_sig => std_logic_vector(Switch13_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth4_out1  -- sfix18_En16
              );

  u_LimitPulseWidth5 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth5
    PORT MAP( ref_sig => std_logic_vector(Switch16_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth5_out1  -- sfix18_En16
              );

  u_LimitPulseWidth6 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth6
    PORT MAP( ref_sig => std_logic_vector(Switch19_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth6_out1  -- sfix18_En16
              );

  u_LimitPulseWidth7 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth7
    PORT MAP( ref_sig => std_logic_vector(Switch22_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth7_out1  -- sfix18_En16
              );

  u_LimitPulseWidth8 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth8
    PORT MAP( ref_sig => std_logic_vector(Switch25_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth8_out1  -- sfix18_En16
              );

  u_LimitPulseWidth9 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth9
    PORT MAP( ref_sig => std_logic_vector(Switch28_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth9_out1  -- sfix18_En16
              );

  u_LimitPulseWidth10 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth10
    PORT MAP( ref_sig => std_logic_vector(Switch31_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth10_out1  -- sfix18_En16
              );

  u_LimitPulseWidth11 : PWM_and_SS_control_V4_ip_src_LimitPulseWidth11
    PORT MAP( ref_sig => std_logic_vector(Switch34_out1),  -- sfix14_En12
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- sfix18_En16
              ref_sig_limit => LimitPulseWidth11_out1  -- sfix18_En16
              );

  in_0_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        PWM_en_AXI_1 <= '0';
      ELSIF enb = '1' THEN
        PWM_en_AXI_1 <= PWM_en_AXI;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  
  switch_compare_1 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  Constant10_out1(0) <= '0';
  Constant10_out1(1) <= '0';

  f_carrier_kHz_AXI_unsigned <= unsigned(f_carrier_kHz_AXI);

  in_1_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        f_carrier_kHz_AXI_1 <= to_unsigned(16#0000000#, 25);
      ELSIF enb = '1' THEN
        f_carrier_kHz_AXI_1 <= f_carrier_kHz_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  T_carrier_us_AXI_unsigned <= unsigned(T_carrier_us_AXI);

  in_2_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        T_carrier_us_AXI_1 <= to_unsigned(16#0000000#, 25);
      ELSIF enb = '1' THEN
        T_carrier_us_AXI_1 <= T_carrier_us_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter2_count <= to_unsigned(16#00000#, 20);
      ELSIF enb = '1' AND PWM_en_AXI_1 = '1' THEN
        HDL_Counter2_count <= HDL_Counter2_count_next;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;

  HDL_Counter2_out1 <= HDL_Counter2_count;
  
  HDL_Counter2_count_step <= to_unsigned(16#00001#, 20) WHEN Counter_Ctrl_out1 = '1' ELSE
      to_unsigned(16#FFFFF#, 20);
  HDL_Counter2_count_next <= HDL_Counter2_count + HDL_Counter2_count_step;

  Counter_Ctrl_out2_unsigned <= unsigned(Counter_Ctrl_out2);

  Allow_assymetrical_anew_reference_value <= Counter_Ctrl_out3 OR Counter_Ctrl_out4;

  U1_norm_signed <= signed(U1_norm);

  in_4_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U1_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U1_norm_1 <= U1_norm_signed;
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Switch_out1 <= Delay_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U1_norm_1;

  min_pulse_width_AXI_signed <= signed(min_pulse_width_AXI);

  in_3_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        min_pulse_width_AXI_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        min_pulse_width_AXI_1 <= min_pulse_width_AXI_signed;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  LimitPulseWidth_out1_signed <= signed(LimitPulseWidth_out1);

  Relational_Operator_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator_1_cast_1 <= LimitPulseWidth_out1_signed & '0';
  
  Relational_Operator_relop1 <= '1' WHEN Relational_Operator_1_cast >= Relational_Operator_1_cast_1 ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  Constant1_out1(0) <= '1';
  Constant1_out1(1) <= '0';

  Constant2_out1(0) <= '0';
  Constant2_out1(1) <= '1';

  
  Switch7_out1 <= Constant1_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant2_out1;

  
  Switch3_out1 <= Constant10_out1 WHEN switch_compare_1 = '0' ELSE
      Switch7_out1;

  Switch3_out1_0 <= Switch3_out1(0);

  out_0_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux_out1 <= Switch3_out1_0;
      END IF;
    END IF;
  END PROCESS out_0_pipe_process;


  Switch3_out1_1 <= Switch3_out1(1);

  out_1_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux_out2 <= Switch3_out1_1;
      END IF;
    END IF;
  END PROCESS out_1_pipe_process;


  
  switch_compare_1_2 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U2_norm_signed <= signed(U2_norm);

  in_5_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U2_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U2_norm_1 <= U2_norm_signed;
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch1_out1 <= Delay1_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U2_norm_1;

  LimitPulseWidth1_out1_signed <= signed(LimitPulseWidth1_out1);

  Relational_Operator1_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator1_1_cast_1 <= LimitPulseWidth1_out1_signed & '0';
  
  Relational_Operator1_relop1 <= '1' WHEN Relational_Operator1_1_cast >= Relational_Operator1_1_cast_1 ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN Relational_Operator1_relop1 > '0' ELSE
      '0';

  Constant4_out1(0) <= '1';
  Constant4_out1(1) <= '0';

  Constant5_out1(0) <= '0';
  Constant5_out1(1) <= '1';

  
  Switch8_out1 <= Constant4_out1 WHEN switch_compare_1_3 = '0' ELSE
      Constant5_out1;

  
  Switch4_out1 <= Constant10_out1 WHEN switch_compare_1_2 = '0' ELSE
      Switch8_out1;

  Switch4_out1_0 <= Switch4_out1(0);

  out_2_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux1_out1 <= Switch4_out1_0;
      END IF;
    END IF;
  END PROCESS out_2_pipe_process;


  Switch4_out1_1 <= Switch4_out1(1);

  out_3_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux1_out2 <= Switch4_out1_1;
      END IF;
    END IF;
  END PROCESS out_3_pipe_process;


  
  switch_compare_1_4 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U3_norm_signed <= signed(U3_norm);

  in_6_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U3_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U3_norm_1 <= U3_norm_signed;
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch2_out1 <= Delay2_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U3_norm_1;

  LimitPulseWidth2_out1_signed <= signed(LimitPulseWidth2_out1);

  Relational_Operator2_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator2_1_cast_1 <= LimitPulseWidth2_out1_signed & '0';
  
  Relational_Operator2_relop1 <= '1' WHEN Relational_Operator2_1_cast >= Relational_Operator2_1_cast_1 ELSE
      '0';

  
  switch_compare_1_5 <= '1' WHEN Relational_Operator2_relop1 > '0' ELSE
      '0';

  Constant7_out1(0) <= '1';
  Constant7_out1(1) <= '0';

  Constant8_out1(0) <= '0';
  Constant8_out1(1) <= '1';

  
  Switch9_out1 <= Constant7_out1 WHEN switch_compare_1_5 = '0' ELSE
      Constant8_out1;

  
  Switch5_out1 <= Constant10_out1 WHEN switch_compare_1_4 = '0' ELSE
      Switch9_out1;

  Switch5_out1_0 <= Switch5_out1(0);

  out_4_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux2_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux2_out1 <= Switch5_out1_0;
      END IF;
    END IF;
  END PROCESS out_4_pipe_process;


  Switch5_out1_1 <= Switch5_out1(1);

  out_5_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux2_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux2_out2 <= Switch5_out1_1;
      END IF;
    END IF;
  END PROCESS out_5_pipe_process;


  
  switch_compare_1_6 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U4_norm_signed <= signed(U4_norm);

  in_7_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U4_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U4_norm_1 <= U4_norm_signed;
      END IF;
    END IF;
  END PROCESS in_7_pipe_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch10_out1 <= Delay3_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U4_norm_1;

  LimitPulseWidth3_out1_signed <= signed(LimitPulseWidth3_out1);

  Relational_Operator3_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator3_1_cast_1 <= LimitPulseWidth3_out1_signed & '0';
  
  Relational_Operator3_relop1 <= '1' WHEN Relational_Operator3_1_cast >= Relational_Operator3_1_cast_1 ELSE
      '0';

  
  switch_compare_1_7 <= '1' WHEN Relational_Operator3_relop1 > '0' ELSE
      '0';

  Constant3_out1(0) <= '1';
  Constant3_out1(1) <= '0';

  Constant6_out1(0) <= '0';
  Constant6_out1(1) <= '1';

  
  Switch12_out1 <= Constant3_out1 WHEN switch_compare_1_7 = '0' ELSE
      Constant6_out1;

  
  Switch11_out1 <= Constant10_out1 WHEN switch_compare_1_6 = '0' ELSE
      Switch12_out1;

  Switch11_out1_0 <= Switch11_out1(0);

  out_6_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux3_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux3_out1 <= Switch11_out1_0;
      END IF;
    END IF;
  END PROCESS out_6_pipe_process;


  Switch11_out1_1 <= Switch11_out1(1);

  out_7_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux3_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux3_out2 <= Switch11_out1_1;
      END IF;
    END IF;
  END PROCESS out_7_pipe_process;


  
  switch_compare_1_8 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U5_norm_signed <= signed(U5_norm);

  in_8_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U5_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U5_norm_1 <= U5_norm_signed;
      END IF;
    END IF;
  END PROCESS in_8_pipe_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch13_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch13_out1 <= Delay4_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U5_norm_1;

  LimitPulseWidth4_out1_signed <= signed(LimitPulseWidth4_out1);

  Relational_Operator4_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator4_1_cast_1 <= LimitPulseWidth4_out1_signed & '0';
  
  Relational_Operator4_relop1 <= '1' WHEN Relational_Operator4_1_cast >= Relational_Operator4_1_cast_1 ELSE
      '0';

  
  switch_compare_1_9 <= '1' WHEN Relational_Operator4_relop1 > '0' ELSE
      '0';

  Constant9_out1(0) <= '1';
  Constant9_out1(1) <= '0';

  Constant12_out1(0) <= '0';
  Constant12_out1(1) <= '1';

  
  Switch15_out1 <= Constant9_out1 WHEN switch_compare_1_9 = '0' ELSE
      Constant12_out1;

  
  Switch14_out1 <= Constant10_out1 WHEN switch_compare_1_8 = '0' ELSE
      Switch15_out1;

  Switch14_out1_0 <= Switch14_out1(0);

  out_8_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux4_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux4_out1 <= Switch14_out1_0;
      END IF;
    END IF;
  END PROCESS out_8_pipe_process;


  Switch14_out1_1 <= Switch14_out1(1);

  out_9_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux4_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux4_out2 <= Switch14_out1_1;
      END IF;
    END IF;
  END PROCESS out_9_pipe_process;


  
  switch_compare_1_10 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U6_norm_signed <= signed(U6_norm);

  in_9_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U6_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U6_norm_1 <= U6_norm_signed;
      END IF;
    END IF;
  END PROCESS in_9_pipe_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch16_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch16_out1 <= Delay5_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U6_norm_1;

  LimitPulseWidth5_out1_signed <= signed(LimitPulseWidth5_out1);

  Relational_Operator5_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator5_1_cast_1 <= LimitPulseWidth5_out1_signed & '0';
  
  Relational_Operator5_relop1 <= '1' WHEN Relational_Operator5_1_cast >= Relational_Operator5_1_cast_1 ELSE
      '0';

  
  switch_compare_1_11 <= '1' WHEN Relational_Operator5_relop1 > '0' ELSE
      '0';

  Constant13_out1(0) <= '1';
  Constant13_out1(1) <= '0';

  Constant14_out1(0) <= '0';
  Constant14_out1(1) <= '1';

  
  Switch18_out1 <= Constant13_out1 WHEN switch_compare_1_11 = '0' ELSE
      Constant14_out1;

  
  Switch17_out1 <= Constant10_out1 WHEN switch_compare_1_10 = '0' ELSE
      Switch18_out1;

  Switch17_out1_0 <= Switch17_out1(0);

  out_10_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux5_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux5_out1 <= Switch17_out1_0;
      END IF;
    END IF;
  END PROCESS out_10_pipe_process;


  Switch17_out1_1 <= Switch17_out1(1);

  out_11_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux5_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux5_out2 <= Switch17_out1_1;
      END IF;
    END IF;
  END PROCESS out_11_pipe_process;


  
  switch_compare_1_12 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U7_norm_signed <= signed(U7_norm);

  in_10_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U7_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U7_norm_1 <= U7_norm_signed;
      END IF;
    END IF;
  END PROCESS in_10_pipe_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch19_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch19_out1 <= Delay6_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U7_norm_1;

  LimitPulseWidth6_out1_signed <= signed(LimitPulseWidth6_out1);

  Relational_Operator6_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator6_1_cast_1 <= LimitPulseWidth6_out1_signed & '0';
  
  Relational_Operator6_relop1 <= '1' WHEN Relational_Operator6_1_cast >= Relational_Operator6_1_cast_1 ELSE
      '0';

  
  switch_compare_1_13 <= '1' WHEN Relational_Operator6_relop1 > '0' ELSE
      '0';

  Constant18_out1(0) <= '1';
  Constant18_out1(1) <= '0';

  Constant19_out1(0) <= '0';
  Constant19_out1(1) <= '1';

  
  Switch21_out1 <= Constant18_out1 WHEN switch_compare_1_13 = '0' ELSE
      Constant19_out1;

  
  Switch20_out1 <= Constant10_out1 WHEN switch_compare_1_12 = '0' ELSE
      Switch21_out1;

  Switch20_out1_0 <= Switch20_out1(0);

  out_12_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux6_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux6_out1 <= Switch20_out1_0;
      END IF;
    END IF;
  END PROCESS out_12_pipe_process;


  Switch20_out1_1 <= Switch20_out1(1);

  out_13_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux6_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux6_out2 <= Switch20_out1_1;
      END IF;
    END IF;
  END PROCESS out_13_pipe_process;


  
  switch_compare_1_14 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U8_norm_signed <= signed(U8_norm);

  in_11_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U8_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U8_norm_1 <= U8_norm_signed;
      END IF;
    END IF;
  END PROCESS in_11_pipe_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch22_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch22_out1 <= Delay7_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U8_norm_1;

  LimitPulseWidth7_out1_signed <= signed(LimitPulseWidth7_out1);

  Relational_Operator7_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator7_1_cast_1 <= LimitPulseWidth7_out1_signed & '0';
  
  Relational_Operator7_relop1 <= '1' WHEN Relational_Operator7_1_cast >= Relational_Operator7_1_cast_1 ELSE
      '0';

  
  switch_compare_1_15 <= '1' WHEN Relational_Operator7_relop1 > '0' ELSE
      '0';

  Constant20_out1(0) <= '1';
  Constant20_out1(1) <= '0';

  Constant15_out1(0) <= '0';
  Constant15_out1(1) <= '1';

  
  Switch24_out1 <= Constant20_out1 WHEN switch_compare_1_15 = '0' ELSE
      Constant15_out1;

  
  Switch23_out1 <= Constant10_out1 WHEN switch_compare_1_14 = '0' ELSE
      Switch24_out1;

  Switch23_out1_0 <= Switch23_out1(0);

  out_14_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux7_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux7_out1 <= Switch23_out1_0;
      END IF;
    END IF;
  END PROCESS out_14_pipe_process;


  Switch23_out1_1 <= Switch23_out1(1);

  out_15_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux7_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux7_out2 <= Switch23_out1_1;
      END IF;
    END IF;
  END PROCESS out_15_pipe_process;


  
  switch_compare_1_16 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U9_norm_signed <= signed(U9_norm);

  in_12_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U9_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U9_norm_1 <= U9_norm_signed;
      END IF;
    END IF;
  END PROCESS in_12_pipe_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch25_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch25_out1 <= Delay8_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U9_norm_1;

  LimitPulseWidth8_out1_signed <= signed(LimitPulseWidth8_out1);

  Relational_Operator8_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator8_1_cast_1 <= LimitPulseWidth8_out1_signed & '0';
  
  Relational_Operator8_relop1 <= '1' WHEN Relational_Operator8_1_cast >= Relational_Operator8_1_cast_1 ELSE
      '0';

  
  switch_compare_1_17 <= '1' WHEN Relational_Operator8_relop1 > '0' ELSE
      '0';

  Constant16_out1(0) <= '1';
  Constant16_out1(1) <= '0';

  Constant17_out1(0) <= '0';
  Constant17_out1(1) <= '1';

  
  Switch27_out1 <= Constant16_out1 WHEN switch_compare_1_17 = '0' ELSE
      Constant17_out1;

  
  Switch26_out1 <= Constant10_out1 WHEN switch_compare_1_16 = '0' ELSE
      Switch27_out1;

  Switch26_out1_0 <= Switch26_out1(0);

  out_16_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux8_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux8_out1 <= Switch26_out1_0;
      END IF;
    END IF;
  END PROCESS out_16_pipe_process;


  Switch26_out1_1 <= Switch26_out1(1);

  out_17_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux8_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux8_out2 <= Switch26_out1_1;
      END IF;
    END IF;
  END PROCESS out_17_pipe_process;


  
  switch_compare_1_18 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U10_norm_signed <= signed(U10_norm);

  in_13_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U10_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U10_norm_1 <= U10_norm_signed;
      END IF;
    END IF;
  END PROCESS in_13_pipe_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch28_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch28_out1 <= Delay9_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U10_norm_1;

  LimitPulseWidth9_out1_signed <= signed(LimitPulseWidth9_out1);

  Relational_Operator9_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator9_1_cast_1 <= LimitPulseWidth9_out1_signed & '0';
  
  Relational_Operator9_relop1 <= '1' WHEN Relational_Operator9_1_cast >= Relational_Operator9_1_cast_1 ELSE
      '0';

  
  switch_compare_1_19 <= '1' WHEN Relational_Operator9_relop1 > '0' ELSE
      '0';

  Constant24_out1(0) <= '1';
  Constant24_out1(1) <= '0';

  Constant25_out1(0) <= '0';
  Constant25_out1(1) <= '1';

  
  Switch30_out1 <= Constant24_out1 WHEN switch_compare_1_19 = '0' ELSE
      Constant25_out1;

  
  Switch29_out1 <= Constant10_out1 WHEN switch_compare_1_18 = '0' ELSE
      Switch30_out1;

  Switch29_out1_0 <= Switch29_out1(0);

  out_18_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux9_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux9_out1 <= Switch29_out1_0;
      END IF;
    END IF;
  END PROCESS out_18_pipe_process;


  Switch29_out1_1 <= Switch29_out1(1);

  out_19_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux9_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux9_out2 <= Switch29_out1_1;
      END IF;
    END IF;
  END PROCESS out_19_pipe_process;


  
  switch_compare_1_20 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U11_norm_signed <= signed(U11_norm);

  in_14_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U11_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U11_norm_1 <= U11_norm_signed;
      END IF;
    END IF;
  END PROCESS in_14_pipe_process;


  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay10_out1 <= Switch31_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch31_out1 <= Delay10_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U11_norm_1;

  LimitPulseWidth10_out1_signed <= signed(LimitPulseWidth10_out1);

  Relational_Operator10_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator10_1_cast_1 <= LimitPulseWidth10_out1_signed & '0';
  
  Relational_Operator10_relop1 <= '1' WHEN Relational_Operator10_1_cast >= Relational_Operator10_1_cast_1 ELSE
      '0';

  
  switch_compare_1_21 <= '1' WHEN Relational_Operator10_relop1 > '0' ELSE
      '0';

  Constant26_out1(0) <= '1';
  Constant26_out1(1) <= '0';

  Constant21_out1(0) <= '0';
  Constant21_out1(1) <= '1';

  
  Switch33_out1 <= Constant26_out1 WHEN switch_compare_1_21 = '0' ELSE
      Constant21_out1;

  
  Switch32_out1 <= Constant10_out1 WHEN switch_compare_1_20 = '0' ELSE
      Switch33_out1;

  Switch32_out1_0 <= Switch32_out1(0);

  out_20_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux10_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux10_out1 <= Switch32_out1_0;
      END IF;
    END IF;
  END PROCESS out_20_pipe_process;


  Switch32_out1_1 <= Switch32_out1(1);

  out_21_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux10_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux10_out2 <= Switch32_out1_1;
      END IF;
    END IF;
  END PROCESS out_21_pipe_process;


  
  switch_compare_1_22 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  U12_norm_signed <= signed(U12_norm);

  in_15_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U12_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U12_norm_1 <= U12_norm_signed;
      END IF;
    END IF;
  END PROCESS in_15_pipe_process;


  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay11_out1 <= Switch34_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  Switch34_out1 <= Delay11_out1 WHEN Allow_assymetrical_anew_reference_value = '0' ELSE
      U12_norm_1;

  LimitPulseWidth11_out1_signed <= signed(LimitPulseWidth11_out1);

  Relational_Operator11_1_cast <= signed(resize(Counter_Ctrl_out2_unsigned, 19));
  Relational_Operator11_1_cast_1 <= LimitPulseWidth11_out1_signed & '0';
  
  Relational_Operator11_relop1 <= '1' WHEN Relational_Operator11_1_cast >= Relational_Operator11_1_cast_1 ELSE
      '0';

  
  switch_compare_1_23 <= '1' WHEN Relational_Operator11_relop1 > '0' ELSE
      '0';

  Constant22_out1(0) <= '1';
  Constant22_out1(1) <= '0';

  Constant23_out1(0) <= '0';
  Constant23_out1(1) <= '1';

  
  Switch36_out1 <= Constant22_out1 WHEN switch_compare_1_23 = '0' ELSE
      Constant23_out1;

  
  Switch35_out1 <= Constant10_out1 WHEN switch_compare_1_22 = '0' ELSE
      Switch36_out1;

  Switch35_out1_0 <= Switch35_out1(0);

  out_22_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux11_out1 <= '0';
      ELSIF enb = '1' THEN
        Demux11_out1 <= Switch35_out1_0;
      END IF;
    END IF;
  END PROCESS out_22_pipe_process;


  Switch35_out1_1 <= Switch35_out1(1);

  out_23_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux11_out2 <= '0';
      ELSIF enb = '1' THEN
        Demux11_out2 <= Switch35_out1_1;
      END IF;
    END IF;
  END PROCESS out_23_pipe_process;


  out_24_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        PWM_en_AXI_2 <= '0';
      ELSIF enb = '1' THEN
        PWM_en_AXI_2 <= PWM_en_AXI_1;
      END IF;
    END IF;
  END PROCESS out_24_pipe_process;


  out_25_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        f_carrier_kHz_AXI_2 <= to_unsigned(16#0000000#, 25);
      ELSIF enb = '1' THEN
        f_carrier_kHz_AXI_2 <= f_carrier_kHz_AXI_1;
      END IF;
    END IF;
  END PROCESS out_25_pipe_process;


  f_carrier_kHz_rd_AXI <= std_logic_vector(f_carrier_kHz_AXI_2);

  out_26_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        T_carrier_us_AXI_2 <= to_unsigned(16#0000000#, 25);
      ELSIF enb = '1' THEN
        T_carrier_us_AXI_2 <= T_carrier_us_AXI_1;
      END IF;
    END IF;
  END PROCESS out_26_pipe_process;


  T_carrier_us_rd_AXI <= std_logic_vector(T_carrier_us_AXI_2);

  out_27_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        min_pulse_width_AXI_2 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        min_pulse_width_AXI_2 <= min_pulse_width_AXI_1;
      END IF;
    END IF;
  END PROCESS out_27_pipe_process;


  min_pulse_width_rd_AXI <= std_logic_vector(min_pulse_width_AXI_2);

  Constant_out1 <= '1';

  Constant11_out1 <= '0';

  
  Switch6_out1 <= Constant_out1 WHEN Counter_Ctrl_out2_unsigned = to_unsigned(16#00000#, 18) ELSE
      Constant11_out1;

  out_28_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch6_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch6_out1_1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS out_28_pipe_process;


  out_29_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Counter_Ctrl_out3_1 <= '0';
      ELSIF enb = '1' THEN
        Counter_Ctrl_out3_1 <= Counter_Ctrl_out3;
      END IF;
    END IF;
  END PROCESS out_29_pipe_process;


  out_30_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Counter_Ctrl_out4_1 <= '0';
      ELSIF enb = '1' THEN
        Counter_Ctrl_out4_1 <= Counter_Ctrl_out4;
      END IF;
    END IF;
  END PROCESS out_30_pipe_process;


  S1 <= Demux_out1;

  S2 <= Demux_out2;

  S3 <= Demux1_out1;

  S4 <= Demux1_out2;

  S5 <= Demux2_out1;

  S6 <= Demux2_out2;

  S7 <= Demux3_out1;

  S8 <= Demux3_out2;

  S9 <= Demux4_out1;

  S10 <= Demux4_out2;

  S11 <= Demux5_out1;

  S12 <= Demux5_out2;

  S13 <= Demux6_out1;

  S14 <= Demux6_out2;

  S15 <= Demux7_out1;

  S16 <= Demux7_out2;

  S17 <= Demux8_out1;

  S18 <= Demux8_out2;

  S19 <= Demux9_out1;

  S20 <= Demux9_out2;

  S21 <= Demux10_out1;

  S22 <= Demux10_out2;

  S23 <= Demux11_out1;

  S24 <= Demux11_out2;

  PWM_en_rd_AXI <= PWM_en_AXI_2;

  enb_out <= Switch6_out1_1;

  Triangle_Max <= Counter_Ctrl_out3_1;

  Triangle_Min <= Counter_Ctrl_out4_1;

END rtl;

