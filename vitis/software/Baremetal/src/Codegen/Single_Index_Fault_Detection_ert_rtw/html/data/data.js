var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"VSD_FD_codegen_V2/Single_Index_Fault_Detection","ref":false,"files":[{"name":"Single_Index_Fault_Detection.c","type":"source","group":"model","path":"C:\\ultrazohm_sw\\vitis\\software\\Baremetal\\src\\Codegen\\Single_Index_Fault_Detection_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Single_Index_Fault_Detection.c\r\n *\r\n * Code generated for Simulink model 'Single_Index_Fault_Detection'.\r\n *\r\n * Model version                  : 3.4\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Tue May 24 14:21:41 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-R\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. Traceability\r\n * Validation result: Passed (11), Warning (1), Error (0)\r\n */\r\n\r\n#include \"Single_Index_Fault_Detection.h\"\r\n\r\n/* Model step function */\r\nvoid Single_Index_Fault_Detection_step(RT_MODEL_Single_Index_Fault_Det *const\r\n  rtM_Single_Index_Fault_Detecti)\r\n{\r\n  DW_Single_Index_Fault_Detection *rtDW_Single_Index_Fault_Detecti =\r\n    rtM_Single_Index_Fault_Detecti->dwork;\r\n  ExtU_Single_Index_Fault_Detecti *rtU_Single_Index_Fault_Detectio =\r\n    (ExtU_Single_Index_Fault_Detecti *) rtM_Single_Index_Fault_Detecti->inputs;\r\n  ExtY_Single_Index_Fault_Detecti *rtY_Single_Index_Fault_Detectio =\r\n    (ExtY_Single_Index_Fault_Detecti *) rtM_Single_Index_Fault_Detecti->outputs;\r\n  real_T B;\r\n  real_T rtb_Ro;\r\n\r\n  /* MATLAB Function: '<S1>/Single_Index' incorporates:\r\n   *  Inport: '<Root>/i_ab_xy_z1z2'\r\n   */\r\n  /* MATLAB Function 'Single_Index_Fault_Detection/Single_Index': '<S4>:1' */\r\n  /* https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8948312&tag=1 */\r\n  /* '<S4>:1:5' A= i_x*i_x+i_y*i_y; */\r\n  /* '<S4>:1:6' B= i_a*i_a+i_b*i_b; */\r\n  B = rtU_Single_Index_Fault_Detectio->i_ab_xy_z1z2[0] *\r\n    rtU_Single_Index_Fault_Detectio->i_ab_xy_z1z2[0] +\r\n    rtU_Single_Index_Fault_Detectio->i_ab_xy_z1z2[1] *\r\n    rtU_Single_Index_Fault_Detectio->i_ab_xy_z1z2[1];\r\n\r\n  /* '<S4>:1:9' if B == 0 */\r\n  if (B == 0.0) {\r\n    /* '<S4>:1:10' R=0; */\r\n    B = 0.0;\r\n  } else {\r\n    /* '<S4>:1:11' else */\r\n    /* '<S4>:1:12' R=A/B; */\r\n    B = (rtU_Single_Index_Fault_Detectio->i_ab_xy_z1z2[2] *\r\n         rtU_Single_Index_Fault_Detectio->i_ab_xy_z1z2[2] +\r\n         rtU_Single_Index_Fault_Detectio->i_ab_xy_z1z2[3] *\r\n         rtU_Single_Index_Fault_Detectio->i_ab_xy_z1z2[3]) / B;\r\n  }\r\n\r\n  /* End of MATLAB Function: '<S1>/Single_Index' */\r\n\r\n  /* MATLAB Function: '<S1>/HystereseBand1' incorporates:\r\n   *  Inport: '<Root>/HB_Wert'\r\n   */\r\n  /*  if (1-e <= Ri) & (Ri <= 1+e)      %das funktioniert nicht fÃ¼r einen Vektor */\r\n  /*      Ro = Ri; */\r\n  /*  else */\r\n  /*      Ro = 0; */\r\n  /*  end */\r\n  /* MATLAB Function 'Single_Index_Fault_Detection/HystereseBand1': '<S3>:1' */\r\n  /* Hystereseband, Ausgang Ro ist gleich Ri falls Ri im Bereich von +-e um 1 */\r\n  /* ist, ansonsten ist Ro = 0 */\r\n  /* '<S3>:1:12' X = ((1-e <= Ri) & (Ri <= 1+e)); */\r\n  /* '<S3>:1:13' Ro = X.*Ri; */\r\n  rtb_Ro = (real_T)((1.0 - rtU_Single_Index_Fault_Detectio->HB_Wert <= B) && (B <=\r\n    rtU_Single_Index_Fault_Detectio->HB_Wert + 1.0)) * B;\r\n\r\n  /* Outport: '<Root>/FD_filtered' incorporates:\r\n   *  Gain: '<S5>/C'\r\n   *  Gain: '<S5>/D'\r\n   *  Sum: '<S5>/sum1'\r\n   *  UnitDelay: '<S5>/Delay_x'\r\n   */\r\n  rtY_Single_Index_Fault_Detectio->FD_filtered = 0.0099013168773229958 * rtb_Ro\r\n    + 9.900986831226771E-5 * rtDW_Single_Index_Fault_Detecti->Delay_x_DSTATE;\r\n\r\n  /* Outport: '<Root>/FD_hyst' */\r\n  rtY_Single_Index_Fault_Detectio->FD_hyst = rtb_Ro;\r\n\r\n  /* Outport: '<Root>/FD_raw' */\r\n  rtY_Single_Index_Fault_Detectio->FD_raw = B;\r\n\r\n  /* Update for UnitDelay: '<S5>/Delay_x' incorporates:\r\n   *  Gain: '<S5>/A'\r\n   *  Gain: '<S5>/B'\r\n   *  Sum: '<S5>/A*x(k) + B*u(k)'\r\n   */\r\n  rtDW_Single_Index_Fault_Detecti->Delay_x_DSTATE = 0.980197366245354 *\r\n    rtDW_Single_Index_Fault_Detecti->Delay_x_DSTATE + 198.0263375464599 * rtb_Ro;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Single_Index_Fault_Detection_initialize(RT_MODEL_Single_Index_Fault_Det *\r\n  const rtM_Single_Index_Fault_Detecti)\r\n{\r\n  DW_Single_Index_Fault_Detection *rtDW_Single_Index_Fault_Detecti =\r\n    rtM_Single_Index_Fault_Detecti->dwork;\r\n  ExtU_Single_Index_Fault_Detecti *rtU_Single_Index_Fault_Detectio =\r\n    (ExtU_Single_Index_Fault_Detecti *) rtM_Single_Index_Fault_Detecti->inputs;\r\n  ExtY_Single_Index_Fault_Detecti *rtY_Single_Index_Fault_Detectio =\r\n    (ExtY_Single_Index_Fault_Detecti *) rtM_Single_Index_Fault_Detecti->outputs;\r\n\r\n  /* Registration code */\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)rtDW_Single_Index_Fault_Detecti, 0,\r\n                sizeof(DW_Single_Index_Fault_Detection));\r\n\r\n  /* external inputs */\r\n  (void)memset(rtU_Single_Index_Fault_Detectio, 0, sizeof\r\n               (ExtU_Single_Index_Fault_Detecti));\r\n\r\n  /* external outputs */\r\n  (void)memset(rtY_Single_Index_Fault_Detectio, 0, sizeof\r\n               (ExtY_Single_Index_Fault_Detecti));\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Single_Index_Fault_Detection.h","type":"header","group":"model","path":"C:\\ultrazohm_sw\\vitis\\software\\Baremetal\\src\\Codegen\\Single_Index_Fault_Detection_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Single_Index_Fault_Detection.h\r\n *\r\n * Code generated for Simulink model 'Single_Index_Fault_Detection'.\r\n *\r\n * Model version                  : 3.4\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Tue May 24 14:21:41 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-R\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. Traceability\r\n * Validation result: Passed (11), Warning (1), Error (0)\r\n */\r\n\r\n#ifndef RTW_HEADER_Single_Index_Fault_Detection_h_\r\n#define RTW_HEADER_Single_Index_Fault_Detection_h_\r\n#include <string.h>\r\n#ifndef Single_Index_Fault_Detection_COMMON_INCLUDES_\r\n#define Single_Index_Fault_Detection_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                       /* Single_Index_Fault_Detection_COMMON_INCLUDES_ */\r\n\r\n/* Model Code Variants */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetRootDWork\r\n#define rtmGetRootDWork(rtm)           ((rtm)->dwork)\r\n#endif\r\n\r\n#ifndef rtmSetRootDWork\r\n#define rtmSetRootDWork(rtm, val)      ((rtm)->dwork = (val))\r\n#endif\r\n\r\n#ifndef rtmGetU\r\n#define rtmGetU(rtm)                   ((rtm)->inputs)\r\n#endif\r\n\r\n#ifndef rtmSetU\r\n#define rtmSetU(rtm, val)              ((rtm)->inputs = (val))\r\n#endif\r\n\r\n#ifndef rtmGetY\r\n#define rtmGetY(rtm)                   ((rtm)->outputs)\r\n#endif\r\n\r\n#ifndef rtmSetY\r\n#define rtmSetY(rtm, val)              ((rtm)->outputs = (val))\r\n#endif\r\n\r\n#define Single_Index_Fault_Detection_M (rtM_Single_Index_Fault_Detecti)\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_Single_Index_Fault_Dete RT_MODEL_Single_Index_Fault_Det;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T Delay_x_DSTATE;               /* '<S5>/Delay_x' */\r\n} DW_Single_Index_Fault_Detection;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T HB_Wert;                      /* '<Root>/HB_Wert' */\r\n  real_T i_ab_xy_z1z2[4];              /* '<Root>/i_ab_xy_z1z2' */\r\n} ExtU_Single_Index_Fault_Detecti;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T FD_filtered;                  /* '<Root>/FD_filtered' */\r\n  real_T FD_hyst;                      /* '<Root>/FD_hyst' */\r\n  real_T FD_raw;                       /* '<Root>/FD_raw' */\r\n} ExtY_Single_Index_Fault_Detecti;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_Single_Index_Fault_Dete {\r\n  ExtU_Single_Index_Fault_Detecti *inputs;\r\n  ExtY_Single_Index_Fault_Detecti *outputs;\r\n  DW_Single_Index_Fault_Detection *dwork;\r\n};\r\n\r\n/* Model entry point functions */\r\nextern void Single_Index_Fault_Detection_initialize\r\n  (RT_MODEL_Single_Index_Fault_Det *const rtM_Single_Index_Fault_Detecti);\r\nextern void Single_Index_Fault_Detection_step(RT_MODEL_Single_Index_Fault_Det *\r\n  const rtM_Single_Index_Fault_Detecti);\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S1>/Scope16' : Unused code path elimination\r\n * Block '<S1>/Reshape1' : Reshape block reduction\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('VSD_FD_codegen_V2/Single_Index_Fault_Detection')    - opens subsystem VSD_FD_codegen_V2/Single_Index_Fault_Detection\r\n * hilite_system('VSD_FD_codegen_V2/Single_Index_Fault_Detection/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'VSD_FD_codegen_V2'\r\n * '<S1>'   : 'VSD_FD_codegen_V2/Single_Index_Fault_Detection'\r\n * '<S2>'   : 'VSD_FD_codegen_V2/Single_Index_Fault_Detection/First-Order Filter'\r\n * '<S3>'   : 'VSD_FD_codegen_V2/Single_Index_Fault_Detection/HystereseBand1'\r\n * '<S4>'   : 'VSD_FD_codegen_V2/Single_Index_Fault_Detection/Single_Index'\r\n * '<S5>'   : 'VSD_FD_codegen_V2/Single_Index_Fault_Detection/First-Order Filter/Model'\r\n */\r\n\r\n/*-\r\n * Requirements for '<Root>': Single_Index_Fault_Detection\r\n */\r\n#endif                          /* RTW_HEADER_Single_Index_Fault_Detection_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\ultrazohm_sw\\vitis\\software\\Baremetal\\src\\Codegen\\Single_Index_Fault_Detection_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Single_Index_Fault_Detection'.\r\n *\r\n * Model version                  : 3.4\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Tue May 24 14:21:41 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-R\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. Traceability\r\n * Validation result: Passed (11), Warning (1), Error (0)\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-R\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\ultrazohm_sw\\vitis\\software\\Baremetal\\src\\Codegen\\Single_Index_Fault_Detection_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'Single_Index_Fault_Detection'.\r\n *\r\n * Model version                  : 3.4\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Tue May 24 14:21:41 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-R\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. Traceability\r\n * Validation result: Passed (11), Warning (1), Error (0)\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"Single_Index_Fault_Detection.h\"\r\n\r\n/*\r\n * ROOT_IO_FORMAT: 0 (Individual arguments)\r\n * ROOT_IO_FORMAT: 1 (Structure reference)\r\n * ROOT_IO_FORMAT: 2 (Part of model data structure)\r\n */\r\n#define ROOT_IO_FORMAT                 2\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((void*) 0)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((void) 0)\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"trace":"{\"model\":\"Single_Index_Fault_Detection\",\"sources\":[\"Single_Index_Fault_Detection.c\",\"Single_Index_Fault_Detection.h\"],\"categoricalProps\":[\"ModelElemCategory\",\"StorageClass\"],\"categoricalValues\":[\"InternalData\",\"Default\",\"Inports\",\"Outports\"],\"sidPrefixes\":[\"Single_Index_Fault_Detection\"],\"fileRecords\":{\"1\":{\"records\":[{\"tk\":[64,3,64,9],\"els\":[\"1:1548:10:101\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[64,10,64,24],\"els\":[\"1:1548:10:101\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[64,24,64,25],\"els\":[\"1:1548:10:101\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[69,3,69,9],\"els\":[\"1:1556\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[69,10,69,17],\"els\":[\"1:1556\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[69,17,69,18],\"els\":[\"1:1556\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[70,3,70,9],\"els\":[\"1:1557\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[70,10,70,22],\"els\":[\"1:1557\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[70,22,70,23],\"els\":[\"1:1557\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[70,23,70,24],\"els\":[\"1:1557\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[70,24,70,25],\"els\":[\"1:1557\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[70,25,70,26],\"els\":[\"1:1557\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[75,3,75,9],\"els\":[\"1:1558\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[75,10,75,21],\"els\":[\"1:1558\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[75,21,75,22],\"els\":[\"1:1558\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[76,3,76,9],\"els\":[\"1:1559\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[76,10,76,17],\"els\":[\"1:1559\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[76,17,76,18],\"els\":[\"1:1559\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[77,3,77,9],\"els\":[\"1:1560\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[77,10,77,16],\"els\":[\"1:1560\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[77,16,77,17],\"els\":[\"1:1560\"],\"ct\":{\"1\":1,\"0\":3}}]},\"0\":{\"records\":[{\"tk\":[44,3,44,4],\"els\":[\"0:939:131-132\"]},{\"tk\":[44,5,44,6],\"els\":[\"0:939:131-149\",\"0:939\",\"0:939::19\"]},{\"tk\":[44,7,44,38],\"els\":[\"0:1557\"]},{\"tk\":[44,40,44,52],\"els\":[\"0:1557\"]},{\"tk\":[44,52,44,53],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[44,53,44,54],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[44,56,44,57],\"els\":[\"0:939:134-141\",\"0:939\",\"0:939::19\"]},{\"tk\":[45,5,45,36],\"els\":[\"0:1557\"]},{\"tk\":[45,38,45,50],\"els\":[\"0:1557\"]},{\"tk\":[45,50,45,51],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[45,51,45,52],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[45,54,45,55],\"els\":[\"0:939:134-149\",\"0:939\",\"0:939::19\"]},{\"tk\":[46,5,46,36],\"els\":[\"0:1557\"]},{\"tk\":[46,38,46,50],\"els\":[\"0:1557\"]},{\"tk\":[46,50,46,51],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[46,51,46,52],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[46,54,46,55],\"els\":[\"0:939:142-149\",\"0:939\",\"0:939::19\"]},{\"tk\":[47,5,47,36],\"els\":[\"0:1557\"]},{\"tk\":[47,38,47,50],\"els\":[\"0:1557\"]},{\"tk\":[47,50,47,51],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[47,51,47,52],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[50,3,50,5],\"els\":[\"0:939:153-191\",\"0:939\",\"0:939::19\"]},{\"tk\":[50,7,50,8],\"els\":[\"0:939:131-132\"]},{\"tk\":[50,9,50,11],\"els\":[\"0:939:156-162\",\"0:939\",\"0:939::19\"]},{\"tk\":[50,12,50,15],\"els\":[\"0:939:156-162\",\"0:939\",\"0:939::19\"]},{\"tk\":[52,5,52,6],\"els\":[\"0:939:131-132\"]},{\"tk\":[52,7,52,8],\"els\":[\"0:939:167-170\",\"0:939\",\"0:939::19\"]},{\"tk\":[52,9,52,12],\"els\":[\"0:939:167-170\",\"0:939\",\"0:939::19\"]},{\"tk\":[56,5,56,6],\"els\":[\"0:939:131-132\"]},{\"tk\":[56,7,56,8],\"els\":[\"0:939:181-186\",\"0:939\",\"0:939::19\"]},{\"tk\":[56,10,56,41],\"els\":[\"0:1557\"]},{\"tk\":[56,43,56,55],\"els\":[\"0:1557\"]},{\"tk\":[56,55,56,56],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[56,56,56,57],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[56,59,56,60],\"els\":[\"0:939:114-121\",\"0:939\",\"0:939::19\"]},{\"tk\":[57,10,57,41],\"els\":[\"0:1557\"]},{\"tk\":[57,43,57,55],\"els\":[\"0:1557\"]},{\"tk\":[57,55,57,56],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[57,56,57,57],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[57,59,57,60],\"els\":[\"0:939:114-129\",\"0:939\",\"0:939::19\"]},{\"tk\":[58,10,58,41],\"els\":[\"0:1557\"]},{\"tk\":[58,43,58,55],\"els\":[\"0:1557\"]},{\"tk\":[58,55,58,56],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[58,56,58,57],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[58,59,58,60],\"els\":[\"0:939:122-129\",\"0:939\",\"0:939::19\"]},{\"tk\":[59,10,59,41],\"els\":[\"0:1557\"]},{\"tk\":[59,43,59,55],\"els\":[\"0:1557\"]},{\"tk\":[59,55,59,56],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[59,56,59,57],\"els\":[\"0:939\",\"0:939::19\"]},{\"tk\":[59,60,59,61],\"els\":[\"0:939:183-186\",\"0:939\",\"0:939::19\"]},{\"tk\":[59,62,59,63],\"els\":[\"0:939:131-132\"]},{\"tk\":[77,3,77,9],\"els\":[\"0:931::19#out:2\"]},{\"tk\":[77,10,77,11],\"els\":[\"0:931:281-291\",\"0:931\",\"0:931::19\"]},{\"tk\":[77,12,77,13],\"els\":[\"0:931:286-291\",\"0:931\",\"0:931::19\"]},{\"tk\":[77,22,77,25],\"els\":[\"0:931:254-257\",\"0:931\",\"0:931::19\"]},{\"tk\":[77,26,77,27],\"els\":[\"0:931:254-257\",\"0:931\",\"0:931::19\"]},{\"tk\":[77,28,77,59],\"els\":[\"0:1556\"]},{\"tk\":[77,61,77,68],\"els\":[\"0:1556\"]},{\"tk\":[77,69,77,71],\"els\":[\"0:931:254-263\",\"0:931\",\"0:931::19\"]},{\"tk\":[77,72,77,73],\"els\":[\"0:939:131-132\"]},{\"tk\":[77,75,77,77],\"els\":[\"0:931:253-278\",\"0:931\",\"0:931::19\"]},{\"tk\":[77,79,77,80],\"els\":[\"0:939:131-132\"]},{\"tk\":[77,81,77,83],\"els\":[\"0:931:268-277\",\"0:931\",\"0:931::19\"]},{\"tk\":[78,5,78,36],\"els\":[\"0:1556\"]},{\"tk\":[78,38,78,45],\"els\":[\"0:1556\"]},{\"tk\":[78,46,78,47],\"els\":[\"0:931:274-277\",\"0:931\",\"0:931::19\"]},{\"tk\":[78,48,78,51],\"els\":[\"0:931:274-277\",\"0:931\",\"0:931::19\"]},{\"tk\":[78,54,78,55],\"els\":[\"0:931:286-291\",\"0:931\",\"0:931::19\"]},{\"tk\":[78,56,78,57],\"els\":[\"0:939:131-132\"]},{\"tk\":[86,3,86,34],\"els\":[\"0:1558\"]},{\"tk\":[86,36,86,47],\"els\":[\"0:1558\"]},{\"tk\":[86,48,86,49],\"els\":[\"0:1558\"]},{\"tk\":[86,50,86,71],\"els\":[\"0:1548:10:120\"]},{\"tk\":[86,72,86,73],\"els\":[\"0:1548:10:120\"]},{\"tk\":[86,74,86,80],\"els\":[\"0:931::19#out:2\"]},{\"tk\":[87,5,87,6],\"els\":[\"0:1548:10:119\"]},{\"tk\":[87,7,87,27],\"els\":[\"0:1548:10:118\"]},{\"tk\":[87,28,87,29],\"els\":[\"0:1548:10:118\"]},{\"tk\":[87,30,87,61],\"els\":[\"0:1548:10:101\"]},{\"tk\":[87,63,87,77],\"els\":[\"0:1548:10:101\"]},{\"tk\":[90,3,90,34],\"els\":[\"0:1559\"]},{\"tk\":[90,36,90,43],\"els\":[\"0:1559\"]},{\"tk\":[90,44,90,45],\"els\":[\"0:1559\"]},{\"tk\":[90,46,90,52],\"els\":[\"0:931::19#out:2\"]},{\"tk\":[93,3,93,34],\"els\":[\"0:1560\"]},{\"tk\":[93,36,93,42],\"els\":[\"0:1560\"]},{\"tk\":[93,43,93,44],\"els\":[\"0:1560\"]},{\"tk\":[93,45,93,46],\"els\":[\"0:939:131-132\"]},{\"tk\":[100,3,100,34],\"els\":[\"0:1548:10:101\"]},{\"tk\":[100,36,100,50],\"els\":[\"0:1548:10:101\"]},{\"tk\":[100,51,100,52],\"els\":[\"0:1548:10:101\"]},{\"tk\":[100,53,100,70],\"els\":[\"0:1548:10:116\"]},{\"tk\":[100,71,100,72],\"els\":[\"0:1548:10:116\"]},{\"tk\":[101,5,101,36],\"els\":[\"0:1548:10:101\"]},{\"tk\":[101,38,101,52],\"els\":[\"0:1548:10:101\"]},{\"tk\":[101,53,101,54],\"els\":[\"0:1548:10:95\"]},{\"tk\":[101,55,101,72],\"els\":[\"0:1548:10:117\"]},{\"tk\":[101,73,101,74],\"els\":[\"0:1548:10:117\"]},{\"tk\":[101,75,101,81],\"els\":[\"0:931::19#out:2\"]}]}}}","blocks":[{"RTWName":"<S1>/HB_Wert","SIDString":"VSD_FD_codegen_V2:1545"},{"RTWName":"<S1>/i_ab_xy_z1z2","SIDString":"VSD_FD_codegen_V2:1546"},{"RTWName":"<S1>/Demux1","SIDString":"VSD_FD_codegen_V2:1547"},{"RTWName":"<S1>/Demux7","SIDString":"VSD_FD_codegen_V2:928"},{"RTWName":"<S1>/Demux8","SIDString":"VSD_FD_codegen_V2:929"},{"RTWName":"<S2>/In","SIDString":"VSD_FD_codegen_V2:1548:1"},{"RTWName":"<S5>/In","SIDString":"VSD_FD_codegen_V2:1548:10:7"},{"RTWName":"<S5>/A","SIDString":"VSD_FD_codegen_V2:1548:10:116"},{"RTWName":"<S5>/A*x(k) + B*u(k)","SIDString":"VSD_FD_codegen_V2:1548:10:95"},{"RTWName":"<S5>/B","SIDString":"VSD_FD_codegen_V2:1548:10:117"},{"RTWName":"<S5>/C","SIDString":"VSD_FD_codegen_V2:1548:10:118"},{"RTWName":"<S5>/D","SIDString":"VSD_FD_codegen_V2:1548:10:120"},{"RTWName":"<S5>/Delay_x","SIDString":"VSD_FD_codegen_V2:1548:10:101"},{"RTWName":"<S5>/sum1","SIDString":"VSD_FD_codegen_V2:1548:10:119"},{"RTWName":"<S5>/Out","SIDString":"VSD_FD_codegen_V2:1548:10:8"},{"RTWName":"<S2>/Out","SIDString":"VSD_FD_codegen_V2:1548:3"},{"RTWName":"<S3>:1","SIDString":"VSD_FD_codegen_V2:931:1"},{"RTWName":"<S1>/Reshape1","SIDString":"VSD_FD_codegen_V2:1549"},{"RTWName":"<S1>/Scope16","SIDString":"VSD_FD_codegen_V2:935"},{"RTWName":"<S4>:1","SIDString":"VSD_FD_codegen_V2:939:1"},{"RTWName":"<S1>/FD_filtered","SIDString":"VSD_FD_codegen_V2:1550"},{"RTWName":"<S1>/FD_hyst","SIDString":"VSD_FD_codegen_V2:1551"},{"RTWName":"<S1>/FD_raw","SIDString":"VSD_FD_codegen_V2:1552"},{"RTWName":"<Root>/Single_Index_Fault_Detection","SIDString":"VSD_FD_codegen_V2:922"},{"RTWName":"<S1>/First-Order\nFilter","SIDString":"VSD_FD_codegen_V2:1548"},{"RTWName":"<S2>/Model","SIDString":"VSD_FD_codegen_V2:1548:10"},{"RTWName":"<S1>/HystereseBand1","SIDString":"VSD_FD_codegen_V2:931"},{"RTWName":"<S1>/Single_Index","SIDString":"VSD_FD_codegen_V2:939"}],"cm":{"GlobalVarInfo":[],"GlobalConstInfo":[],"FcnInfo":[{"Name":"Single_Index_Fault_Detection_initialize","UniqueKey":"$Single_Index_Fault_Detection_initialize","Idx":1,"NumCommentLines":4,"NumTotalLines":24,"NumCodeLines":12,"Callee":{"Name":"memset","Weight":3},"Caller":[],"Stack":12,"HasDefinition":1,"File":["C:\\ultrazohm_sw\\vitis\\software\\Baremetal\\src\\Codegen\\Single_Index_Fault_Detection_ert_rtw\\Single_Index_Fault_Detection.c"],"IsStatic":0,"Complexity":1,"StackTotal":12,"CalleeIdx":3},{"Name":"Single_Index_Fault_Detection_step","UniqueKey":"$Single_Index_Fault_Detection_step","Idx":2,"NumCommentLines":38,"NumTotalLines":78,"NumCodeLines":28,"Callee":[],"Caller":[],"Stack":28,"HasDefinition":1,"File":["C:\\ultrazohm_sw\\vitis\\software\\Baremetal\\src\\Codegen\\Single_Index_Fault_Detection_ert_rtw\\Single_Index_Fault_Detection.c"],"IsStatic":0,"Complexity":2,"StackTotal":28,"CalleeIdx":[]},{"Name":"memset","UniqueKey":"$memset","Idx":3,"NumCommentLines":0,"NumTotalLines":0,"NumCodeLines":0,"Callee":[],"Caller":{"Name":"Single_Index_Fault_Detection_initialize","Weight":3},"Stack":0,"HasDefinition":0,"File":["C:\\Program Files\\MATLAB\\R2021b\\polyspace\\verifier\\cxx\\include\\include-libc\\string.h"],"IsStatic":0,"Complexity":0,"StackTotal":0,"CalleeIdx":[]}]}};