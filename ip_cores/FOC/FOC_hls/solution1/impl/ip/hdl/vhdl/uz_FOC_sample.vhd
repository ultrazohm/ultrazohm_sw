-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_FOC_sample is
generic (
    C_M_AXI_DOUT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DOUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DOUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_DIN_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_DIN_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DOUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DOUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DOUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_Dout_AWVALID : OUT STD_LOGIC;
    m_axi_Dout_AWREADY : IN STD_LOGIC;
    m_axi_Dout_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ADDR_WIDTH-1 downto 0);
    m_axi_Dout_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Dout_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_AWUSER_WIDTH-1 downto 0);
    m_axi_Dout_WVALID : OUT STD_LOGIC;
    m_axi_Dout_WREADY : IN STD_LOGIC;
    m_axi_Dout_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_DATA_WIDTH-1 downto 0);
    m_axi_Dout_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_DATA_WIDTH/8-1 downto 0);
    m_axi_Dout_WLAST : OUT STD_LOGIC;
    m_axi_Dout_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_WUSER_WIDTH-1 downto 0);
    m_axi_Dout_ARVALID : OUT STD_LOGIC;
    m_axi_Dout_ARREADY : IN STD_LOGIC;
    m_axi_Dout_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ADDR_WIDTH-1 downto 0);
    m_axi_Dout_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Dout_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ARUSER_WIDTH-1 downto 0);
    m_axi_Dout_RVALID : IN STD_LOGIC;
    m_axi_Dout_RREADY : OUT STD_LOGIC;
    m_axi_Dout_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_DATA_WIDTH-1 downto 0);
    m_axi_Dout_RLAST : IN STD_LOGIC;
    m_axi_Dout_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_RUSER_WIDTH-1 downto 0);
    m_axi_Dout_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_BVALID : IN STD_LOGIC;
    m_axi_Dout_BREADY : OUT STD_LOGIC;
    m_axi_Dout_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_BUSER_WIDTH-1 downto 0);
    s_axi_Din_AWVALID : IN STD_LOGIC;
    s_axi_Din_AWREADY : OUT STD_LOGIC;
    s_axi_Din_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_ADDR_WIDTH-1 downto 0);
    s_axi_Din_WVALID : IN STD_LOGIC;
    s_axi_Din_WREADY : OUT STD_LOGIC;
    s_axi_Din_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_DATA_WIDTH-1 downto 0);
    s_axi_Din_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_DATA_WIDTH/8-1 downto 0);
    s_axi_Din_ARVALID : IN STD_LOGIC;
    s_axi_Din_ARREADY : OUT STD_LOGIC;
    s_axi_Din_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_ADDR_WIDTH-1 downto 0);
    s_axi_Din_RVALID : OUT STD_LOGIC;
    s_axi_Din_RREADY : IN STD_LOGIC;
    s_axi_Din_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DIN_DATA_WIDTH-1 downto 0);
    s_axi_Din_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_Din_BVALID : OUT STD_LOGIC;
    s_axi_Din_BREADY : IN STD_LOGIC;
    s_axi_Din_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of uz_FOC_sample is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_FOC_sample_uz_FOC_sample,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.324600,HLS_SYN_LAT=88,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=9561,HLS_SYN_LUT=13099,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal self_i : STD_LOGIC_VECTOR (255 downto 0);
    signal self_o_ap_vld : STD_LOGIC;
    signal Controller_id : STD_LOGIC_VECTOR (159 downto 0);
    signal Controller_iq : STD_LOGIC_VECTOR (159 downto 0);
    signal i_reference_Ampere : STD_LOGIC_VECTOR (95 downto 0);
    signal i_actual_Ampere : STD_LOGIC_VECTOR (95 downto 0);
    signal V_dc_volts : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_el_rad_per_sec : STD_LOGIC_VECTOR (31 downto 0);
    signal output_volts_d : STD_LOGIC_VECTOR (63 downto 0);
    signal output_volts_q : STD_LOGIC_VECTOR (63 downto 0);
    signal I_sum_d : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_sum_q : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Dout_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Dout_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal Dout_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal Dout_AWVALID : STD_LOGIC;
    signal Dout_AWREADY : STD_LOGIC;
    signal Dout_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Dout_WVALID : STD_LOGIC;
    signal Dout_WREADY : STD_LOGIC;
    signal Dout_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Dout_ARREADY : STD_LOGIC;
    signal Dout_RVALID : STD_LOGIC;
    signal Dout_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Dout_RLAST : STD_LOGIC;
    signal Dout_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal Dout_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Dout_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Dout_BVALID : STD_LOGIC;
    signal Dout_BREADY : STD_LOGIC;
    signal Dout_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Dout_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal Dout_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln33_reg_1762 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_34_reg_1756 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_el_rad_per_sec_read_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_dc_volts_read_reg_1629 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_1634 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_reg_1639 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_49_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_49_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast3_reg_1649 : STD_LOGIC_VECTOR (31 downto 0);
    signal self_read_reg_1655 : STD_LOGIC_VECTOR (255 downto 0);
    signal trunc_ln_reg_1660 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_reg_1665 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln60_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln60_reg_1670 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln61_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln61_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_1_reg_1685 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_2_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_2_reg_1690 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_3_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_3_reg_1695 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_4_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_4_reg_1700 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_5_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_5_reg_1705 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln7_reg_1710 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_1_reg_1715 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_8_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_8_reg_1720 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_9_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_9_reg_1725 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_10_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_10_reg_1730 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_11_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_11_reg_1735 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_1740 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln9_reg_1746 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_reg_1751 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln33_fu_652_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln20_2_reg_1768 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_reg_1773 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_1_reg_1778 : STD_LOGIC_VECTOR (31 downto 0);
    signal Dout_addr_reg_1783 : STD_LOGIC_VECTOR (63 downto 0);
    signal Dout_addr_1_reg_1789 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reference_Ampere_d_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reference_Ampere_q_fu_730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_actual_Ampere_d_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_actual_Ampere_q_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_actual_Ampere_q_reg_1811 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln25_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln25_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_1_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln25_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_2_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_i_i_reg_1842 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln58_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bitcast_ln59_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln60_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln61_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sum_d_reg_1867 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sum_q_reg_1872 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln35_1_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_1_reg_1887 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_3_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_3_reg_1893 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln71_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_fu_866_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_1914 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_1919 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_1924 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_1929 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_1934 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_dq_vor_Volts_reg_1939 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_dq_vor_Volts_2_reg_1944 : STD_LOGIC_VECTOR (31 downto 0);
    signal decouple_voltage_3_fu_870_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal decouple_voltage_3_reg_1949 : STD_LOGIC_VECTOR (31 downto 0);
    signal decouple_voltage_2_fu_876_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal decouple_voltage_2_reg_1954 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln64_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln64_reg_1959 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal and_ln23_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_reg_1967 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_2_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_2_reg_1973 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln65_fu_942_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln65_reg_1979 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln23_5_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_5_reg_1987 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_7_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_7_reg_1993 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_reg_1999 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal and_ln25_1_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_1_reg_2005 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln64_1_fu_1012_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln64_1_reg_2011 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal select_ln25_fu_1016_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln65_1_fu_1023_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln65_1_reg_2022 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln25_1_fu_1027_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_12_fu_1046_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_12_reg_2034 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal output_13_fu_1064_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_13_reg_2039 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_2044 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_5_reg_2049 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_2054 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_2059 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_8_fu_1084_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_8_reg_2064 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal output_10_fu_1106_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_10_reg_2073 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln35_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_reg_2082 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal or_ln35_2_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_2_reg_2089 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_fu_1220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sign_1_fu_1262_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_2106 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_2111 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_reg_2116 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_fu_1319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_2121 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_3_fu_1325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_3_reg_2126 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_2_fu_1367_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sign_3_fu_1409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_2141 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_4_fu_1454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_4_reg_2146 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_5_fu_1460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_5_reg_2151 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_6_fu_1466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_6_reg_2156 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_7_fu_1472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_7_reg_2161 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_fu_1560_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_reg_2166 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal select_ln67_fu_1568_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln67_reg_2171 : STD_LOGIC_VECTOR (31 downto 0);
    signal newret_reg_2176 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_ready : STD_LOGIC;
    signal grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done : STD_LOGIC;
    signal u_output_Volts_d_reg_2181 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_output_Volts_q_reg_2186 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start : STD_LOGIC;
    signal grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_idle : STD_LOGIC;
    signal grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_0 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln37_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln38_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln37_fu_1588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln38_fu_1592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_fu_1596_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal select_ln82_1_fu_1603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_318_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_468_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_1_fu_478_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_4_fu_500_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_3_fu_510_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_16_fu_552_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_5_fu_562_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_18_fu_584_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_7_fu_594_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln5_fu_686_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln6_fu_706_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln35_1_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_794_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_1_fu_804_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_3_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_2_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_3_fu_826_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_830_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_3_fu_840_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_7_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_6_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln23_fu_886_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_890_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_900_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_1_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_1_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_2_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln23_1_fu_946_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_950_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_2_fu_960_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_7_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_6_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_3_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_4_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_5_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_fu_1039_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln49_1_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_6_fu_1057_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln23_1_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_3_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_4_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_6_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_8_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_9_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_fu_1114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1117_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_fu_1127_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_1_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_2_fu_1149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1152_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_2_fu_1162_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_5_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_4_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_1_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_1189_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_2_fu_1229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_3_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_2_fu_1233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_fu_1271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_1_fu_1289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1275_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_fu_1285_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_1293_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_1_fu_1303_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln35_4_fu_1331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_5_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_4_fu_1336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_6_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_7_fu_1404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_6_fu_1380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_2_fu_1418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_3_fu_1436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_1422_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_2_fu_1432_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_29_fu_1440_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_3_fu_1450_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln31_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_fu_1488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_1_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_1_fu_1496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_2_fu_1502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_1482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_4_fu_1514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_2_fu_1524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_3_fu_1528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_5_fu_1532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_6_fu_1538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_1_fu_1518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_9_fu_1508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_11_fu_1544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal clamping_active_d_fu_1550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal clamping_active_q_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_289_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_289_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_293_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_297_ce : STD_LOGIC;
    signal grp_fu_313_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_318_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_323_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_328_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_333_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_338_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component uz_FOC_sample_uz_FOC_SpaceVector_Limitation_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (255 downto 0);
        u_input_Volts_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        u_input_Volts_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        V_dc_volts : IN STD_LOGIC_VECTOR (31 downto 0);
        omega_el_rad_per_sec : IN STD_LOGIC_VECTOR (31 downto 0);
        i_actual_Ampere_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_FOC_sample_Din_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        i_reference_Ampere : OUT STD_LOGIC_VECTOR (95 downto 0);
        self_o : IN STD_LOGIC_VECTOR (255 downto 0);
        self_o_ap_vld : IN STD_LOGIC;
        self_i : OUT STD_LOGIC_VECTOR (255 downto 0);
        i_actual_Ampere : OUT STD_LOGIC_VECTOR (95 downto 0);
        V_dc_volts : OUT STD_LOGIC_VECTOR (31 downto 0);
        omega_el_rad_per_sec : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        Controller_id : OUT STD_LOGIC_VECTOR (159 downto 0);
        Controller_iq : OUT STD_LOGIC_VECTOR (159 downto 0) );
    end component;


    component uz_FOC_sample_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_volts_d : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_volts_q : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component uz_FOC_sample_Dout_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Din_s_axi_U : component uz_FOC_sample_Din_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_DIN_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_DIN_DATA_WIDTH)
    port map (
        AWVALID => s_axi_Din_AWVALID,
        AWREADY => s_axi_Din_AWREADY,
        AWADDR => s_axi_Din_AWADDR,
        WVALID => s_axi_Din_WVALID,
        WREADY => s_axi_Din_WREADY,
        WDATA => s_axi_Din_WDATA,
        WSTRB => s_axi_Din_WSTRB,
        ARVALID => s_axi_Din_ARVALID,
        ARREADY => s_axi_Din_ARREADY,
        ARADDR => s_axi_Din_ARADDR,
        RVALID => s_axi_Din_RVALID,
        RREADY => s_axi_Din_RREADY,
        RDATA => s_axi_Din_RDATA,
        RRESP => s_axi_Din_RRESP,
        BVALID => s_axi_Din_BVALID,
        BREADY => s_axi_Din_BREADY,
        BRESP => s_axi_Din_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        i_reference_Ampere => i_reference_Ampere,
        self_o => newret_reg_2176,
        self_o_ap_vld => self_o_ap_vld,
        self_i => self_i,
        i_actual_Ampere => i_actual_Ampere,
        V_dc_volts => V_dc_volts,
        omega_el_rad_per_sec => omega_el_rad_per_sec,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        Controller_id => Controller_id,
        Controller_iq => Controller_iq);

    control_s_axi_U : component uz_FOC_sample_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_volts_d => output_volts_d,
        output_volts_q => output_volts_q);

    Dout_m_axi_U : component uz_FOC_sample_Dout_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DOUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DOUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DOUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DOUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DOUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DOUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DOUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DOUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DOUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DOUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DOUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_Dout_AWVALID,
        AWREADY => m_axi_Dout_AWREADY,
        AWADDR => m_axi_Dout_AWADDR,
        AWID => m_axi_Dout_AWID,
        AWLEN => m_axi_Dout_AWLEN,
        AWSIZE => m_axi_Dout_AWSIZE,
        AWBURST => m_axi_Dout_AWBURST,
        AWLOCK => m_axi_Dout_AWLOCK,
        AWCACHE => m_axi_Dout_AWCACHE,
        AWPROT => m_axi_Dout_AWPROT,
        AWQOS => m_axi_Dout_AWQOS,
        AWREGION => m_axi_Dout_AWREGION,
        AWUSER => m_axi_Dout_AWUSER,
        WVALID => m_axi_Dout_WVALID,
        WREADY => m_axi_Dout_WREADY,
        WDATA => m_axi_Dout_WDATA,
        WSTRB => m_axi_Dout_WSTRB,
        WLAST => m_axi_Dout_WLAST,
        WID => m_axi_Dout_WID,
        WUSER => m_axi_Dout_WUSER,
        ARVALID => m_axi_Dout_ARVALID,
        ARREADY => m_axi_Dout_ARREADY,
        ARADDR => m_axi_Dout_ARADDR,
        ARID => m_axi_Dout_ARID,
        ARLEN => m_axi_Dout_ARLEN,
        ARSIZE => m_axi_Dout_ARSIZE,
        ARBURST => m_axi_Dout_ARBURST,
        ARLOCK => m_axi_Dout_ARLOCK,
        ARCACHE => m_axi_Dout_ARCACHE,
        ARPROT => m_axi_Dout_ARPROT,
        ARQOS => m_axi_Dout_ARQOS,
        ARREGION => m_axi_Dout_ARREGION,
        ARUSER => m_axi_Dout_ARUSER,
        RVALID => m_axi_Dout_RVALID,
        RREADY => m_axi_Dout_RREADY,
        RDATA => m_axi_Dout_RDATA,
        RLAST => m_axi_Dout_RLAST,
        RID => m_axi_Dout_RID,
        RUSER => m_axi_Dout_RUSER,
        RRESP => m_axi_Dout_RRESP,
        BVALID => m_axi_Dout_BVALID,
        BREADY => m_axi_Dout_BREADY,
        BRESP => m_axi_Dout_BRESP,
        BID => m_axi_Dout_BID,
        BUSER => m_axi_Dout_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => Dout_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => Dout_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => Dout_RDATA,
        I_RID => Dout_RID,
        I_RUSER => Dout_RUSER,
        I_RRESP => Dout_RRESP,
        I_RLAST => Dout_RLAST,
        I_AWVALID => Dout_AWVALID,
        I_AWREADY => Dout_AWREADY,
        I_AWADDR => Dout_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => Dout_WVALID,
        I_WREADY => Dout_WREADY,
        I_WDATA => Dout_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => Dout_BVALID,
        I_BREADY => Dout_BREADY,
        I_BRESP => Dout_BRESP,
        I_BID => Dout_BID,
        I_BUSER => Dout_BUSER);

    grp_uz_FOC_SpaceVector_Limitation_1_fu_265 : component uz_FOC_sample_uz_FOC_SpaceVector_Limitation_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start,
        ap_done => grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done,
        ap_idle => grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_idle,
        ap_ready => grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_ready,
        p_read => self_read_reg_1655,
        u_input_Volts_0 => reg_362,
        u_input_Volts_1 => reg_373,
        V_dc_volts => V_dc_volts_read_reg_1629,
        omega_el_rad_per_sec => omega_el_rad_per_sec_read_reg_1622,
        i_actual_Ampere_1 => i_actual_Ampere_q_reg_1811,
        ap_return_0 => grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_0,
        ap_return_1 => grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_1,
        ap_return_2 => grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_2);

    faddfsub_32ns_32ns_32_4_full_dsp_1_U48 : component uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_289_p0,
        din1 => grp_fu_289_p1,
        opcode => grp_fu_289_opcode,
        ce => grp_fu_289_ce,
        dout => grp_fu_289_p2);

    faddfsub_32ns_32ns_32_4_full_dsp_1_U49 : component uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_293_p0,
        din1 => grp_fu_293_p1,
        opcode => grp_fu_293_opcode,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U50 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        ce => grp_fu_297_ce,
        dout => grp_fu_297_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U51 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_301_p0,
        din1 => grp_fu_301_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_301_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U52 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_305_p0,
        din1 => grp_fu_305_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_305_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U53 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_309_p0,
        din1 => grp_fu_309_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U54 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_313_p0,
        din1 => grp_fu_313_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_313_opcode,
        dout => grp_fu_313_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U55 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_318_p0,
        din1 => grp_fu_318_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_318_opcode,
        dout => grp_fu_318_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U56 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_323_p0,
        din1 => grp_fu_323_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_323_opcode,
        dout => grp_fu_323_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U57 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_328_p0,
        din1 => grp_fu_328_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_328_opcode,
        dout => grp_fu_328_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U58 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_333_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => grp_fu_333_opcode,
        dout => grp_fu_333_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U59 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_338_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => grp_fu_338_opcode,
        dout => grp_fu_338_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U60 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => output_10_reg_2073,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_343_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U61 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => output_10_reg_2073,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_348_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_ready = ap_const_logic_1)) then 
                    grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                Dout_addr_1_reg_1789 <= sext_ln38_fu_716_p1;
                Dout_addr_reg_1783 <= sext_ln37_fu_696_p1;
                V_dc_volts_read_reg_1629 <= V_dc_volts;
                empty_49_reg_1644 <= empty_49_fu_406_p1;
                empty_reg_1634 <= empty_fu_392_p1;
                icmp_ln23_10_reg_1730 <= icmp_ln23_10_fu_604_p2;
                icmp_ln23_11_reg_1735 <= icmp_ln23_11_fu_610_p2;
                icmp_ln23_2_reg_1690 <= icmp_ln23_2_fu_488_p2;
                icmp_ln23_3_reg_1695 <= icmp_ln23_3_fu_494_p2;
                icmp_ln23_4_reg_1700 <= icmp_ln23_4_fu_520_p2;
                icmp_ln23_5_reg_1705 <= icmp_ln23_5_fu_526_p2;
                icmp_ln23_8_reg_1720 <= icmp_ln23_8_fu_572_p2;
                icmp_ln23_9_reg_1725 <= icmp_ln23_9_fu_578_p2;
                omega_el_rad_per_sec_read_reg_1622 <= omega_el_rad_per_sec;
                p_cast3_reg_1649 <= i_actual_Ampere(63 downto 32);
                p_cast_reg_1639 <= i_reference_Ampere(63 downto 32);
                self_read_reg_1655 <= self_i;
                tmp_33_reg_1740 <= self_i(16 downto 16);
                tmp_34_reg_1756 <= self_i(8 downto 8);
                trunc_ln1_reg_1665 <= Controller_iq(63 downto 32);
                trunc_ln20_1_reg_1778 <= self_i(127 downto 96);
                trunc_ln20_2_reg_1768 <= self_i(159 downto 128);
                trunc_ln2_reg_1751 <= Controller_iq(95 downto 64);
                trunc_ln33_reg_1762 <= trunc_ln33_fu_652_p1;
                trunc_ln3_reg_1773 <= self_i(95 downto 64);
                trunc_ln4_reg_1680 <= Controller_id(127 downto 96);
                trunc_ln60_reg_1670 <= trunc_ln60_fu_440_p1;
                trunc_ln61_reg_1675 <= trunc_ln61_fu_444_p1;
                trunc_ln64_1_reg_1685 <= Controller_id(159 downto 128);
                trunc_ln65_1_reg_1715 <= Controller_iq(159 downto 128);
                trunc_ln7_reg_1710 <= Controller_iq(127 downto 96);
                trunc_ln9_reg_1746 <= Controller_id(95 downto 64);
                trunc_ln_reg_1660 <= Controller_id(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                I_sum_d <= select_ln82_fu_1596_p3;
                I_sum_q <= select_ln82_1_fu_1603_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                P_sum_d_reg_1867 <= grp_fu_305_p2;
                P_sum_q_reg_1872 <= grp_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                and_ln23_2_reg_1973 <= and_ln23_2_fu_936_p2;
                and_ln23_5_reg_1987 <= and_ln23_5_fu_986_p2;
                and_ln23_7_reg_1993 <= and_ln23_7_fu_996_p2;
                and_ln23_reg_1967 <= and_ln23_fu_926_p2;
                bitcast_ln64_reg_1959 <= bitcast_ln64_fu_882_p1;
                bitcast_ln65_reg_1979 <= bitcast_ln65_fu_942_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                and_ln25_1_reg_2005 <= and_ln25_1_fu_1007_p2;
                and_ln25_reg_1999 <= and_ln25_fu_1002_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                bitcast_ln64_1_reg_2011 <= bitcast_ln64_1_fu_1012_p1;
                bitcast_ln65_1_reg_2022 <= bitcast_ln65_1_fu_1023_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                decouple_voltage_2_reg_1954 <= decouple_voltage_2_fu_876_p3;
                decouple_voltage_3_reg_1949 <= decouple_voltage_3_fu_870_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                fcmp_ln35_reg_1914 <= grp_fu_318_p2;
                fcmp_ln35_reg_1919 <= grp_fu_323_p2;
                fcmp_ln35_reg_1929 <= grp_fu_333_p2;
                fcmp_ln35_reg_1934 <= grp_fu_338_p2;
                tmp_25_reg_1924 <= grp_fu_328_p2;
                tmp_7_reg_1909 <= grp_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_actual_Ampere_q_reg_1811 <= i_actual_Ampere_q_fu_739_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                icmp_ln31_1_reg_2116 <= icmp_ln31_1_fu_1313_p2;
                icmp_ln31_2_reg_2121 <= icmp_ln31_2_fu_1319_p2;
                icmp_ln31_3_reg_2126 <= icmp_ln31_3_fu_1325_p2;
                icmp_ln31_4_reg_2146 <= icmp_ln31_4_fu_1454_p2;
                icmp_ln31_5_reg_2151 <= icmp_ln31_5_fu_1460_p2;
                icmp_ln31_6_reg_2156 <= icmp_ln31_6_fu_1466_p2;
                icmp_ln31_7_reg_2161 <= icmp_ln31_7_fu_1472_p2;
                icmp_ln31_reg_2111 <= icmp_ln31_fu_1307_p2;
                tmp_11_reg_2106 <= grp_fu_328_p2;
                tmp_27_reg_2141 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln33_reg_1762 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul1_i_i_reg_1842 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                newret_reg_2176 <= grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_0;
                u_output_Volts_d_reg_2181 <= grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_1;
                u_output_Volts_q_reg_2186 <= grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                or_ln35_1_reg_1887 <= or_ln35_1_fu_820_p2;
                or_ln35_3_reg_1893 <= or_ln35_3_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                or_ln35_2_reg_2089 <= or_ln35_2_fu_1178_p2;
                or_ln35_reg_2082 <= or_ln35_fu_1143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                output_10_reg_2073 <= output_10_fu_1106_p3;
                output_8_reg_2064 <= output_8_fu_1084_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                output_12_reg_2034 <= output_12_fu_1046_p3;
                output_13_reg_2039 <= output_13_fu_1064_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((trunc_ln33_reg_1762 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_353 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln33_reg_1762 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_362 <= grp_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_373 <= grp_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_384 <= grp_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                select_ln66_reg_2166 <= select_ln66_fu_1560_p3;
                select_ln67_reg_2171 <= select_ln67_fu_1568_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_17_reg_2054 <= grp_fu_323_p2;
                tmp_19_reg_2059 <= grp_fu_328_p2;
                tmp_2_reg_2044 <= grp_fu_313_p2;
                tmp_5_reg_2049 <= grp_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln33_reg_1762 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                u_dq_vor_Volts_2_reg_1944 <= grp_fu_309_p2;
                u_dq_vor_Volts_reg_1939 <= grp_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln33_reg_1762 = ap_const_lv1_1) and (ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                xor_ln25_reg_1822 <= xor_ln25_fu_747_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state3, ap_CS_fsm_state24, ap_CS_fsm_state29, Dout_AWREADY, Dout_WREADY, Dout_BVALID, ap_CS_fsm_state22, grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Dout_AWADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Dout_AWREADY, Dout_addr_reg_1783, Dout_addr_1_reg_1789)
    begin
        if ((ap_const_logic_1 = Dout_AWREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                Dout_AWADDR <= Dout_addr_1_reg_1789;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                Dout_AWADDR <= Dout_addr_reg_1783;
            else 
                Dout_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            Dout_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Dout_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Dout_AWREADY)
    begin
        if ((((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            Dout_AWVALID <= ap_const_logic_1;
        else 
            Dout_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    Dout_BREADY_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, Dout_BVALID)
    begin
        if ((((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            Dout_BREADY <= ap_const_logic_1;
        else 
            Dout_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    Dout_WDATA_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state24, bitcast_ln37_fu_1588_p1, bitcast_ln38_fu_1592_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Dout_WDATA <= bitcast_ln38_fu_1592_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Dout_WDATA <= bitcast_ln37_fu_1588_p1;
        else 
            Dout_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Dout_WVALID_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state24, Dout_WREADY)
    begin
        if ((((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            Dout_WVALID <= ap_const_logic_1;
        else 
            Dout_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    Dout_blk_n_AW_assign_proc : process(m_axi_Dout_AWREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Dout_blk_n_AW <= m_axi_Dout_AWREADY;
        else 
            Dout_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    Dout_blk_n_B_assign_proc : process(m_axi_Dout_BVALID, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            Dout_blk_n_B <= m_axi_Dout_BVALID;
        else 
            Dout_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    Dout_blk_n_W_assign_proc : process(m_axi_Dout_WREADY, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            Dout_blk_n_W <= m_axi_Dout_WREADY;
        else 
            Dout_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    and_ln23_1_fu_1070_p2 <= (tmp_2_reg_2044 and and_ln23_reg_1967);
    and_ln23_2_fu_936_p2 <= (or_ln23_fu_916_p2 and or_ln23_2_fu_932_p2);
    and_ln23_3_fu_1074_p2 <= (tmp_5_reg_2049 and and_ln23_2_reg_1973);
    and_ln23_4_fu_1078_p2 <= (and_ln23_3_fu_1074_p2 and and_ln23_1_fu_1070_p2);
    and_ln23_5_fu_986_p2 <= (or_ln23_4_fu_982_p2 and or_ln23_3_fu_976_p2);
    and_ln23_6_fu_1092_p2 <= (tmp_17_reg_2054 and and_ln23_5_reg_1987);
    and_ln23_7_fu_996_p2 <= (or_ln23_5_fu_992_p2 and or_ln23_3_fu_976_p2);
    and_ln23_8_fu_1096_p2 <= (tmp_19_reg_2059 and and_ln23_7_reg_1993);
    and_ln23_9_fu_1100_p2 <= (and_ln23_8_fu_1096_p2 and and_ln23_6_fu_1092_p2);
    and_ln23_fu_926_p2 <= (or_ln23_fu_916_p2 and or_ln23_1_fu_922_p2);
    and_ln25_1_fu_1007_p2 <= (grp_fu_318_p2 and and_ln23_7_reg_1993);
    and_ln25_fu_1002_p2 <= (grp_fu_313_p2 and and_ln23_2_reg_1973);
    and_ln31_1_fu_1496_p2 <= (or_ln31_fu_1488_p2 and or_ln31_1_fu_1492_p2);
    and_ln31_2_fu_1502_p2 <= (grp_fu_313_p2 and and_ln31_1_fu_1496_p2);
    and_ln31_4_fu_1514_p2 <= (tmp_27_reg_2141 and or_ln35_2_reg_2089);
    and_ln31_5_fu_1532_p2 <= (or_ln31_3_fu_1528_p2 and or_ln31_2_fu_1524_p2);
    and_ln31_6_fu_1538_p2 <= (grp_fu_318_p2 and and_ln31_5_fu_1532_p2);
    and_ln31_fu_1478_p2 <= (tmp_11_reg_2106 and or_ln35_reg_2082);
    and_ln35_1_fu_1215_p2 <= (or_ln35_reg_2082 and and_ln35_fu_1209_p2);
    and_ln35_2_fu_1229_p2 <= (tmp_7_reg_1909 and or_ln35_1_reg_1887);
    and_ln35_3_fu_1257_p2 <= (or_ln35_1_reg_1887 and and_ln35_fu_1251_p2);
    and_ln35_4_fu_1331_p2 <= (or_ln35_2_reg_2089 and grp_fu_333_p2);
    and_ln35_5_fu_1362_p2 <= (or_ln35_2_reg_2089 and and_ln35_fu_1356_p2);
    and_ln35_6_fu_1376_p2 <= (tmp_25_reg_1924 and or_ln35_3_reg_1893);
    and_ln35_7_fu_1404_p2 <= (or_ln35_3_reg_1893 and and_ln35_fu_1398_p2);
    and_ln35_fu_1184_p2 <= (or_ln35_reg_2082 and grp_fu_313_p2);
    and_ln35_fu_1209_p2 <= (xor_ln35_fu_1203_p2 and xor_ln35_fu_1197_p2);
    and_ln35_fu_1251_p2 <= (xor_ln35_fu_1246_p2 and xor_ln35_fu_1241_p2);
    and_ln35_fu_1356_p2 <= (xor_ln35_fu_1350_p2 and xor_ln35_fu_1344_p2);
    and_ln35_fu_1398_p2 <= (xor_ln35_fu_1393_p2 and xor_ln35_fu_1388_p2);
    and_ln49_1_fu_1052_p2 <= (grp_fu_318_p2 and and_ln23_5_reg_1987);
    and_ln49_fu_1034_p2 <= (grp_fu_313_p2 and and_ln23_reg_1967);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state29, Dout_BVALID)
    begin
        if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29, Dout_BVALID)
    begin
        if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln23_1_fu_946_p1 <= reg_373;
    bitcast_ln23_fu_886_p1 <= reg_362;
    bitcast_ln25_fu_756_p1 <= xor_ln25_reg_1822;
    bitcast_ln31_1_fu_1289_p1 <= sign_1_fu_1262_p3;
    bitcast_ln31_2_fu_1418_p1 <= sign_2_fu_1367_p3;
    bitcast_ln31_3_fu_1436_p1 <= sign_3_fu_1409_p3;
    bitcast_ln31_fu_1271_p1 <= sign_fu_1220_p3;
    bitcast_ln35_1_fu_790_p1 <= reg_353;
    bitcast_ln35_2_fu_1149_p1 <= output_10_reg_2073;
    bitcast_ln35_3_fu_826_p1 <= reg_384;
    bitcast_ln35_fu_1114_p1 <= output_8_reg_2064;
    bitcast_ln37_fu_1588_p1 <= u_output_Volts_d_reg_2181;
    bitcast_ln38_fu_1592_p1 <= u_output_Volts_q_reg_2186;
    bitcast_ln58_fu_764_p1 <= trunc_ln_reg_1660;
    bitcast_ln59_fu_768_p1 <= trunc_ln1_reg_1665;
    bitcast_ln60_fu_772_p1 <= trunc_ln60_reg_1670;
    bitcast_ln61_fu_776_p1 <= trunc_ln61_reg_1675;
    bitcast_ln64_1_fu_1012_p1 <= trunc_ln64_1_reg_1685;
    bitcast_ln64_fu_882_p1 <= trunc_ln4_reg_1680;
    bitcast_ln65_1_fu_1023_p1 <= trunc_ln65_1_reg_1715;
    bitcast_ln65_fu_942_p1 <= trunc_ln7_reg_1710;
    bitcast_ln71_fu_862_p1 <= trunc_ln9_reg_1746;
    bitcast_ln76_fu_866_p1 <= trunc_ln2_reg_1751;
    clamping_active_d_fu_1550_p2 <= (tmp_33_reg_1740 or output_9_fu_1508_p2);
    clamping_active_q_fu_1555_p2 <= (tmp_33_reg_1740 or output_11_fu_1544_p2);
    config_1_fu_752_p1 <= trunc_ln20_1_reg_1778;
    config_2_fu_760_p1 <= trunc_ln20_2_reg_1768;
    config_fu_743_p1 <= trunc_ln3_reg_1773;
    decouple_voltage_2_fu_876_p3 <= 
        u_dq_vor_Volts_reg_1939 when (trunc_ln33_reg_1762(0) = '1') else 
        ap_const_lv32_0;
    decouple_voltage_3_fu_870_p3 <= 
        u_dq_vor_Volts_2_reg_1944 when (trunc_ln33_reg_1762(0) = '1') else 
        ap_const_lv32_0;
    empty_49_fu_406_p1 <= i_actual_Ampere(32 - 1 downto 0);
    empty_fu_392_p1 <= i_reference_Ampere(32 - 1 downto 0);

    grp_fu_289_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state23, ap_CS_fsm_state3, ap_CS_fsm_state24, Dout_AWREADY, Dout_WREADY, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done, ap_CS_fsm_state25, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_289_ce <= ap_const_logic_1;
        else 
            grp_fu_289_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_289_opcode_assign_proc : process(ap_CS_fsm_state2, trunc_ln33_reg_1762, tmp_34_reg_1756, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            grp_fu_289_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((trunc_ln33_reg_1762 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            grp_fu_289_opcode <= ap_const_lv2_0;
        else 
            grp_fu_289_opcode <= "XX";
        end if; 
    end process;


    grp_fu_289_p0_assign_proc : process(I_sum_d, ap_CS_fsm_state2, reg_353, reg_362, ap_CS_fsm_state5, i_reference_Ampere_d_fu_726_p1, ap_CS_fsm_state9, ap_CS_fsm_state15, output_12_reg_2034, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_289_p0 <= output_12_reg_2034;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_289_p0 <= reg_362;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_289_p0 <= I_sum_d;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_289_p0 <= reg_353;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_289_p0 <= i_reference_Ampere_d_fu_726_p1;
        else 
            grp_fu_289_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_289_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, i_actual_Ampere_d_fu_734_p1, config_2_fu_760_p1, P_sum_d_reg_1867, ap_CS_fsm_state9, decouple_voltage_2_reg_1954, ap_CS_fsm_state15, select_ln25_fu_1016_p3, ap_CS_fsm_state17, select_ln66_reg_2166, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_289_p1 <= select_ln66_reg_2166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_289_p1 <= decouple_voltage_2_reg_1954;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_289_p1 <= select_ln25_fu_1016_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_289_p1 <= P_sum_d_reg_1867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_289_p1 <= config_2_fu_760_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_289_p1 <= i_actual_Ampere_d_fu_734_p1;
        else 
            grp_fu_289_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_293_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state23, ap_CS_fsm_state3, ap_CS_fsm_state24, Dout_AWREADY, Dout_WREADY, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_293_ce <= ap_const_logic_1;
        else 
            grp_fu_293_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_293_opcode_assign_proc : process(ap_CS_fsm_state2, tmp_34_reg_1756, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            grp_fu_293_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            grp_fu_293_opcode <= ap_const_lv2_0;
        else 
            grp_fu_293_opcode <= "XX";
        end if; 
    end process;


    grp_fu_293_p0_assign_proc : process(I_sum_q, ap_CS_fsm_state2, reg_373, i_reference_Ampere_q_fu_730_p1, ap_CS_fsm_state9, ap_CS_fsm_state15, output_13_reg_2039, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_293_p0 <= output_13_reg_2039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_293_p0 <= reg_373;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_293_p0 <= I_sum_q;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_293_p0 <= i_reference_Ampere_q_fu_730_p1;
        else 
            grp_fu_293_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_293_p1_assign_proc : process(ap_CS_fsm_state2, i_actual_Ampere_q_fu_739_p1, P_sum_q_reg_1872, ap_CS_fsm_state9, decouple_voltage_3_reg_1949, ap_CS_fsm_state15, select_ln25_1_fu_1027_p3, ap_CS_fsm_state17, select_ln67_reg_2171, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_293_p1 <= select_ln67_reg_2171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_293_p1 <= decouple_voltage_3_reg_1949;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_293_p1 <= select_ln25_1_fu_1027_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_293_p1 <= P_sum_q_reg_1872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_293_p1 <= i_actual_Ampere_q_fu_739_p1;
        else 
            grp_fu_293_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Dout_AWREADY, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_297_ce <= ap_const_logic_1;
        else 
            grp_fu_297_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_297_p0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, reg_353, reg_362, i_actual_Ampere_d_fu_734_p1, bitcast_ln25_fu_756_p1, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_297_p0 <= reg_353;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_297_p0 <= reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_297_p0 <= bitcast_ln25_fu_756_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_297_p0 <= i_actual_Ampere_d_fu_734_p1;
        else 
            grp_fu_297_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, config_fu_743_p1, config_1_fu_752_p1, bitcast_ln58_fu_764_p1, ap_CS_fsm_state6, ap_CS_fsm_state9, bitcast_ln71_fu_862_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_297_p1 <= bitcast_ln71_fu_862_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_297_p1 <= bitcast_ln58_fu_764_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_297_p1 <= config_1_fu_752_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_297_p1 <= config_fu_743_p1;
        else 
            grp_fu_297_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_301_p0_assign_proc : process(reg_373, reg_384, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_301_p0 <= reg_384;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_301_p0 <= reg_373;
        else 
            grp_fu_301_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_301_p1_assign_proc : process(ap_CS_fsm_state6, bitcast_ln59_fu_768_p1, ap_CS_fsm_state9, bitcast_ln76_fu_866_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_301_p1 <= bitcast_ln76_fu_866_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_301_p1 <= bitcast_ln59_fu_768_p1;
        else 
            grp_fu_301_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_305_p0_assign_proc : process(reg_362, mul1_i_i_reg_1842, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_305_p0 <= mul1_i_i_reg_1842;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_305_p0 <= reg_362;
        else 
            grp_fu_305_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_305_p1_assign_proc : process(omega_el_rad_per_sec_read_reg_1622, ap_CS_fsm_state6, bitcast_ln60_fu_772_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_305_p1 <= omega_el_rad_per_sec_read_reg_1622;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_305_p1 <= bitcast_ln60_fu_772_p1;
        else 
            grp_fu_305_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_309_p0_assign_proc : process(reg_362, reg_373, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_309_p0 <= reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_309_p0 <= reg_373;
        else 
            grp_fu_309_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_309_p1_assign_proc : process(omega_el_rad_per_sec_read_reg_1622, ap_CS_fsm_state6, bitcast_ln61_fu_776_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_309_p1 <= omega_el_rad_per_sec_read_reg_1622;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_309_p1 <= bitcast_ln61_fu_776_p1;
        else 
            grp_fu_309_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_313_opcode_assign_proc : process(tmp_34_reg_1756, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state13, and_ln25_reg_1999, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_313_opcode <= ap_const_lv5_1;
        elsif (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_313_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_313_opcode <= ap_const_lv5_2;
        elsif ((((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_0 = and_ln25_reg_1999) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            grp_fu_313_opcode <= ap_const_lv5_4;
        else 
            grp_fu_313_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_313_p0_assign_proc : process(reg_353, reg_362, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, output_8_reg_2064, ap_CS_fsm_state19, sign_fu_1220_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_313_p0 <= sign_fu_1220_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_313_p0 <= output_8_reg_2064;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_313_p0 <= reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_313_p0 <= reg_353;
        else 
            grp_fu_313_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_313_p1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state9, bitcast_ln64_fu_882_p1, ap_CS_fsm_state13, bitcast_ln64_1_fu_1012_p1, bitcast_ln64_1_reg_2011, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, sign_1_fu_1262_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_313_p1 <= sign_1_fu_1262_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_313_p1 <= bitcast_ln64_1_reg_2011;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_313_p1 <= bitcast_ln64_1_fu_1012_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_313_p1 <= bitcast_ln64_fu_882_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_313_p1 <= ap_const_lv32_0;
        else 
            grp_fu_313_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_318_opcode_assign_proc : process(tmp_34_reg_1756, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state13, and_ln25_1_reg_2005, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_318_opcode <= ap_const_lv5_1;
        elsif (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_318_opcode <= ap_const_lv5_5;
        elsif (((ap_const_lv1_0 = and_ln25_1_reg_2005) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_318_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_318_opcode <= ap_const_lv5_2;
        elsif ((((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_318_opcode <= ap_const_lv5_8;
        else 
            grp_fu_318_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_318_p0_assign_proc : process(reg_353, reg_362, ap_CS_fsm_state20, reg_373, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, output_8_reg_2064, ap_CS_fsm_state19, sign_2_fu_1367_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_318_p0 <= sign_2_fu_1367_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_318_p0 <= output_8_reg_2064;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_318_p0 <= reg_362;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_318_p0 <= reg_373;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_318_p0 <= reg_353;
        else 
            grp_fu_318_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_318_p1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state9, bitcast_ln64_reg_1959, ap_CS_fsm_state13, bitcast_ln65_fu_942_p1, ap_CS_fsm_state15, bitcast_ln65_1_fu_1023_p1, ap_CS_fsm_state16, ap_CS_fsm_state19, sign_3_fu_1409_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_318_p1 <= sign_3_fu_1409_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_318_p1 <= bitcast_ln64_reg_1959;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_318_p1 <= bitcast_ln65_1_fu_1023_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_318_p1 <= bitcast_ln65_fu_942_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_318_p1 <= ap_const_lv32_0;
        else 
            grp_fu_318_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_323_opcode_assign_proc : process(tmp_34_reg_1756, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if (((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_323_opcode <= ap_const_lv5_3;
        elsif ((((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((tmp_34_reg_1756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_323_opcode <= ap_const_lv5_1;
        else 
            grp_fu_323_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_323_p0_assign_proc : process(reg_353, reg_373, ap_CS_fsm_state9, ap_CS_fsm_state16, output_8_reg_2064, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_323_p0 <= output_8_reg_2064;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_323_p0 <= reg_373;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_323_p0 <= reg_353;
        else 
            grp_fu_323_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_323_p1_assign_proc : process(ap_CS_fsm_state9, bitcast_ln65_1_reg_2022, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_323_p1 <= bitcast_ln65_1_reg_2022;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_323_p1 <= ap_const_lv32_0;
        else 
            grp_fu_323_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_328_opcode_assign_proc : process(tmp_34_reg_1756, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if ((tmp_34_reg_1756 = ap_const_lv1_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                grp_fu_328_opcode <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                grp_fu_328_opcode <= ap_const_lv5_5;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                grp_fu_328_opcode <= ap_const_lv5_4;
            else 
                grp_fu_328_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_328_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_328_p0_assign_proc : process(reg_373, reg_384, ap_CS_fsm_state9, ap_CS_fsm_state16, output_8_reg_2064, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_328_p0 <= output_8_reg_2064;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_328_p0 <= reg_373;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_328_p0 <= reg_384;
        else 
            grp_fu_328_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_328_p1_assign_proc : process(ap_CS_fsm_state9, bitcast_ln65_reg_1979, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_328_p1 <= bitcast_ln65_reg_1979;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_328_p1 <= ap_const_lv32_0;
        else 
            grp_fu_328_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_333_opcode_assign_proc : process(tmp_34_reg_1756, ap_CS_fsm_state9, ap_CS_fsm_state19)
    begin
        if ((tmp_34_reg_1756 = ap_const_lv1_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                grp_fu_333_opcode <= ap_const_lv5_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                grp_fu_333_opcode <= ap_const_lv5_8;
            else 
                grp_fu_333_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_333_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_333_p0_assign_proc : process(reg_384, ap_CS_fsm_state9, output_10_reg_2073, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_333_p0 <= output_10_reg_2073;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_333_p0 <= reg_384;
        else 
            grp_fu_333_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_opcode_assign_proc : process(tmp_34_reg_1756, ap_CS_fsm_state9, ap_CS_fsm_state19)
    begin
        if ((tmp_34_reg_1756 = ap_const_lv1_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                grp_fu_338_opcode <= ap_const_lv5_8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                grp_fu_338_opcode <= ap_const_lv5_1;
            else 
                grp_fu_338_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_338_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_338_p0_assign_proc : process(reg_384, ap_CS_fsm_state9, output_10_reg_2073, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_338_p0 <= output_10_reg_2073;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_338_p0 <= reg_384;
        else 
            grp_fu_338_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start <= grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg;
    i_actual_Ampere_d_fu_734_p1 <= empty_49_reg_1644;
    i_actual_Ampere_q_fu_739_p1 <= p_cast3_reg_1649;
    i_reference_Ampere_d_fu_726_p1 <= empty_reg_1634;
    i_reference_Ampere_q_fu_730_p1 <= p_cast_reg_1639;
    icmp_ln23_10_fu_604_p2 <= "0" when (tmp_18_fu_584_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_11_fu_610_p2 <= "1" when (trunc_ln23_7_fu_594_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_1_fu_910_p2 <= "1" when (trunc_ln23_fu_900_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_2_fu_488_p2 <= "0" when (tmp_1_fu_468_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_3_fu_494_p2 <= "1" when (trunc_ln23_1_fu_478_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_4_fu_520_p2 <= "0" when (tmp_4_fu_500_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_5_fu_526_p2 <= "1" when (trunc_ln23_3_fu_510_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_6_fu_964_p2 <= "0" when (tmp_15_fu_950_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_7_fu_970_p2 <= "1" when (trunc_ln23_2_fu_960_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_8_fu_572_p2 <= "0" when (tmp_16_fu_552_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_9_fu_578_p2 <= "1" when (trunc_ln23_5_fu_562_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_fu_904_p2 <= "0" when (tmp_fu_890_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_1_fu_1313_p2 <= "1" when (trunc_ln31_fu_1285_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_2_fu_1319_p2 <= "0" when (tmp_13_fu_1293_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_3_fu_1325_p2 <= "1" when (trunc_ln31_1_fu_1303_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_4_fu_1454_p2 <= "0" when (tmp_28_fu_1422_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_5_fu_1460_p2 <= "1" when (trunc_ln31_2_fu_1432_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_6_fu_1466_p2 <= "0" when (tmp_29_fu_1440_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_7_fu_1472_p2 <= "1" when (trunc_ln31_3_fu_1450_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_fu_1307_p2 <= "0" when (tmp_12_fu_1275_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_1_fu_1137_p2 <= "1" when (trunc_ln35_fu_1127_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_2_fu_808_p2 <= "0" when (tmp_6_fu_794_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_3_fu_814_p2 <= "1" when (trunc_ln35_1_fu_804_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_4_fu_1166_p2 <= "0" when (tmp_21_fu_1152_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_5_fu_1172_p2 <= "1" when (trunc_ln35_2_fu_1162_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_6_fu_844_p2 <= "0" when (tmp_24_fu_830_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_7_fu_850_p2 <= "1" when (trunc_ln35_3_fu_840_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_fu_1131_p2 <= "0" when (tmp_9_fu_1117_p4 = ap_const_lv8_FF) else "1";
    or_ln23_1_fu_922_p2 <= (icmp_ln23_3_reg_1695 or icmp_ln23_2_reg_1690);
    or_ln23_2_fu_932_p2 <= (icmp_ln23_5_reg_1705 or icmp_ln23_4_reg_1700);
    or_ln23_3_fu_976_p2 <= (icmp_ln23_7_fu_970_p2 or icmp_ln23_6_fu_964_p2);
    or_ln23_4_fu_982_p2 <= (icmp_ln23_9_reg_1725 or icmp_ln23_8_reg_1720);
    or_ln23_5_fu_992_p2 <= (icmp_ln23_11_reg_1735 or icmp_ln23_10_reg_1730);
    or_ln23_fu_916_p2 <= (icmp_ln23_fu_904_p2 or icmp_ln23_1_fu_910_p2);
    or_ln31_1_fu_1492_p2 <= (icmp_ln31_3_reg_2126 or icmp_ln31_2_reg_2121);
    or_ln31_2_fu_1524_p2 <= (icmp_ln31_5_reg_2151 or icmp_ln31_4_reg_2146);
    or_ln31_3_fu_1528_p2 <= (icmp_ln31_7_reg_2161 or icmp_ln31_6_reg_2156);
    or_ln31_fu_1488_p2 <= (icmp_ln31_reg_2111 or icmp_ln31_1_reg_2116);
    or_ln35_1_fu_820_p2 <= (icmp_ln35_3_fu_814_p2 or icmp_ln35_2_fu_808_p2);
    or_ln35_2_fu_1178_p2 <= (icmp_ln35_5_fu_1172_p2 or icmp_ln35_4_fu_1166_p2);
    or_ln35_3_fu_856_p2 <= (icmp_ln35_7_fu_850_p2 or icmp_ln35_6_fu_844_p2);
    or_ln35_fu_1143_p2 <= (icmp_ln35_fu_1131_p2 or icmp_ln35_1_fu_1137_p2);
    output_10_fu_1106_p3 <= 
        ap_const_lv32_0 when (and_ln23_9_fu_1100_p2(0) = '1') else 
        grp_fu_293_p2;
    output_11_fu_1544_p2 <= (xor_ln31_1_fu_1518_p2 and and_ln31_6_fu_1538_p2);
    output_12_fu_1046_p3 <= 
        bitcast_ln64_reg_1959 when (and_ln25_reg_1999(0) = '1') else 
        output_fu_1039_p3;
    output_13_fu_1064_p3 <= 
        bitcast_ln65_reg_1979 when (and_ln25_1_reg_2005(0) = '1') else 
        output_6_fu_1057_p3;
    output_6_fu_1057_p3 <= 
        bitcast_ln65_1_reg_2022 when (and_ln49_1_fu_1052_p2(0) = '1') else 
        reg_373;
    output_8_fu_1084_p3 <= 
        ap_const_lv32_0 when (and_ln23_4_fu_1078_p2(0) = '1') else 
        grp_fu_289_p2;
    output_9_fu_1508_p2 <= (xor_ln31_fu_1482_p2 and and_ln31_2_fu_1502_p2);
    output_fu_1039_p3 <= 
        bitcast_ln64_1_reg_2011 when (and_ln49_fu_1034_p2(0) = '1') else 
        reg_362;
    select_ln25_1_fu_1027_p3 <= 
        bitcast_ln65_reg_1979 when (and_ln25_1_reg_2005(0) = '1') else 
        bitcast_ln65_1_fu_1023_p1;
    select_ln25_fu_1016_p3 <= 
        bitcast_ln64_reg_1959 when (and_ln25_reg_1999(0) = '1') else 
        bitcast_ln64_1_fu_1012_p1;
    select_ln35_2_fu_1233_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_2_fu_1229_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_4_fu_1336_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_4_fu_1331_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_6_fu_1380_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_6_fu_1376_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_fu_1189_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_fu_1184_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln66_fu_1560_p3 <= 
        ap_const_lv32_0 when (clamping_active_d_fu_1550_p2(0) = '1') else 
        reg_353;
    select_ln67_fu_1568_p3 <= 
        ap_const_lv32_0 when (clamping_active_q_fu_1555_p2(0) = '1') else 
        reg_384;
    select_ln82_1_fu_1603_p3 <= 
        ap_const_lv32_0 when (tmp_34_reg_1756(0) = '1') else 
        grp_fu_293_p2;
    select_ln82_fu_1596_p3 <= 
        ap_const_lv32_0 when (tmp_34_reg_1756(0) = '1') else 
        grp_fu_289_p2;

    self_o_ap_vld_assign_proc : process(ap_CS_fsm_state23, Dout_WREADY)
    begin
        if (((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            self_o_ap_vld <= ap_const_logic_1;
        else 
            self_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln37_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_686_p4),64));

        sext_ln38_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_706_p4),64));

    sign_1_fu_1262_p3 <= 
        select_ln35_2_fu_1233_p3 when (and_ln35_3_fu_1257_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_2_fu_1367_p3 <= 
        select_ln35_4_fu_1336_p3 when (and_ln35_5_fu_1362_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_3_fu_1409_p3 <= 
        select_ln35_6_fu_1380_p3 when (and_ln35_7_fu_1404_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_fu_1220_p3 <= 
        select_ln35_fu_1189_p3 when (and_ln35_1_fu_1215_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_12_fu_1275_p4 <= bitcast_ln31_fu_1271_p1(30 downto 23);
    tmp_13_fu_1293_p4 <= bitcast_ln31_1_fu_1289_p1(30 downto 23);
    tmp_15_fu_950_p4 <= bitcast_ln23_1_fu_946_p1(30 downto 23);
    tmp_16_fu_552_p4 <= Controller_iq(158 downto 151);
    tmp_18_fu_584_p4 <= Controller_iq(126 downto 119);
    tmp_1_fu_468_p4 <= Controller_id(158 downto 151);
    tmp_21_fu_1152_p4 <= bitcast_ln35_2_fu_1149_p1(30 downto 23);
    tmp_24_fu_830_p4 <= bitcast_ln35_3_fu_826_p1(30 downto 23);
    tmp_28_fu_1422_p4 <= bitcast_ln31_2_fu_1418_p1(30 downto 23);
    tmp_29_fu_1440_p4 <= bitcast_ln31_3_fu_1436_p1(30 downto 23);
    tmp_4_fu_500_p4 <= Controller_id(126 downto 119);
    tmp_6_fu_794_p4 <= bitcast_ln35_1_fu_790_p1(30 downto 23);
    tmp_9_fu_1117_p4 <= bitcast_ln35_fu_1114_p1(30 downto 23);
    tmp_fu_890_p4 <= bitcast_ln23_fu_886_p1(30 downto 23);
    trunc_ln23_1_fu_478_p4 <= Controller_id(150 downto 128);
    trunc_ln23_2_fu_960_p1 <= bitcast_ln23_1_fu_946_p1(23 - 1 downto 0);
    trunc_ln23_3_fu_510_p4 <= Controller_id(118 downto 96);
    trunc_ln23_5_fu_562_p4 <= Controller_iq(150 downto 128);
    trunc_ln23_7_fu_594_p4 <= Controller_iq(118 downto 96);
    trunc_ln23_fu_900_p1 <= bitcast_ln23_fu_886_p1(23 - 1 downto 0);
    trunc_ln31_1_fu_1303_p1 <= bitcast_ln31_1_fu_1289_p1(23 - 1 downto 0);
    trunc_ln31_2_fu_1432_p1 <= bitcast_ln31_2_fu_1418_p1(23 - 1 downto 0);
    trunc_ln31_3_fu_1450_p1 <= bitcast_ln31_3_fu_1436_p1(23 - 1 downto 0);
    trunc_ln31_fu_1285_p1 <= bitcast_ln31_fu_1271_p1(23 - 1 downto 0);
    trunc_ln33_fu_652_p1 <= self_i(1 - 1 downto 0);
    trunc_ln35_1_fu_804_p1 <= bitcast_ln35_1_fu_790_p1(23 - 1 downto 0);
    trunc_ln35_2_fu_1162_p1 <= bitcast_ln35_2_fu_1149_p1(23 - 1 downto 0);
    trunc_ln35_3_fu_840_p1 <= bitcast_ln35_3_fu_826_p1(23 - 1 downto 0);
    trunc_ln35_fu_1127_p1 <= bitcast_ln35_fu_1114_p1(23 - 1 downto 0);
    trunc_ln5_fu_686_p4 <= output_volts_d(63 downto 2);
    trunc_ln60_fu_440_p1 <= Controller_id(32 - 1 downto 0);
    trunc_ln61_fu_444_p1 <= Controller_iq(32 - 1 downto 0);
    trunc_ln6_fu_706_p4 <= output_volts_q(63 downto 2);
    xor_ln25_fu_747_p2 <= (p_cast3_reg_1649 xor ap_const_lv32_80000000);
    xor_ln31_1_fu_1518_p2 <= (ap_const_lv1_1 xor and_ln31_4_fu_1514_p2);
    xor_ln31_fu_1482_p2 <= (ap_const_lv1_1 xor and_ln31_fu_1478_p2);
    xor_ln35_fu_1197_p2 <= (grp_fu_318_p2 xor ap_const_lv1_1);
    xor_ln35_fu_1203_p2 <= (grp_fu_323_p2 xor ap_const_lv1_1);
    xor_ln35_fu_1241_p2 <= (fcmp_ln35_reg_1914 xor ap_const_lv1_1);
    xor_ln35_fu_1246_p2 <= (fcmp_ln35_reg_1919 xor ap_const_lv1_1);
    xor_ln35_fu_1344_p2 <= (grp_fu_338_p2 xor ap_const_lv1_1);
    xor_ln35_fu_1350_p2 <= (grp_fu_343_p2 xor ap_const_lv1_1);
    xor_ln35_fu_1388_p2 <= (fcmp_ln35_reg_1929 xor ap_const_lv1_1);
    xor_ln35_fu_1393_p2 <= (fcmp_ln35_reg_1934 xor ap_const_lv1_1);
end behav;
