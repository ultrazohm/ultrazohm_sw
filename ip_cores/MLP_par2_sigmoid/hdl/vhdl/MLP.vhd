-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP is
generic (
    C_M_AXI_READ_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_READ_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_READ_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_WRITE_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_WRITE_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_READ_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_READ_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_READ_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_WRITE_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_WRITE_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_WRITE_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_read_r_AWVALID : OUT STD_LOGIC;
    m_axi_read_r_AWREADY : IN STD_LOGIC;
    m_axi_read_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ADDR_WIDTH-1 downto 0);
    m_axi_read_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_read_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_read_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_read_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_AWUSER_WIDTH-1 downto 0);
    m_axi_read_r_WVALID : OUT STD_LOGIC;
    m_axi_read_r_WREADY : IN STD_LOGIC;
    m_axi_read_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_DATA_WIDTH-1 downto 0);
    m_axi_read_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_DATA_WIDTH/8-1 downto 0);
    m_axi_read_r_WLAST : OUT STD_LOGIC;
    m_axi_read_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_WUSER_WIDTH-1 downto 0);
    m_axi_read_r_ARVALID : OUT STD_LOGIC;
    m_axi_read_r_ARREADY : IN STD_LOGIC;
    m_axi_read_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ADDR_WIDTH-1 downto 0);
    m_axi_read_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_read_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_read_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_read_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ARUSER_WIDTH-1 downto 0);
    m_axi_read_r_RVALID : IN STD_LOGIC;
    m_axi_read_r_RREADY : OUT STD_LOGIC;
    m_axi_read_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_DATA_WIDTH-1 downto 0);
    m_axi_read_r_RLAST : IN STD_LOGIC;
    m_axi_read_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_RUSER_WIDTH-1 downto 0);
    m_axi_read_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_BVALID : IN STD_LOGIC;
    m_axi_read_r_BREADY : OUT STD_LOGIC;
    m_axi_read_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_BUSER_WIDTH-1 downto 0);
    m_axi_write_r_AWVALID : OUT STD_LOGIC;
    m_axi_write_r_AWREADY : IN STD_LOGIC;
    m_axi_write_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ADDR_WIDTH-1 downto 0);
    m_axi_write_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_write_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_write_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_write_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_AWUSER_WIDTH-1 downto 0);
    m_axi_write_r_WVALID : OUT STD_LOGIC;
    m_axi_write_r_WREADY : IN STD_LOGIC;
    m_axi_write_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_DATA_WIDTH-1 downto 0);
    m_axi_write_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_DATA_WIDTH/8-1 downto 0);
    m_axi_write_r_WLAST : OUT STD_LOGIC;
    m_axi_write_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_WUSER_WIDTH-1 downto 0);
    m_axi_write_r_ARVALID : OUT STD_LOGIC;
    m_axi_write_r_ARREADY : IN STD_LOGIC;
    m_axi_write_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ADDR_WIDTH-1 downto 0);
    m_axi_write_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_write_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_write_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_write_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ARUSER_WIDTH-1 downto 0);
    m_axi_write_r_RVALID : IN STD_LOGIC;
    m_axi_write_r_RREADY : OUT STD_LOGIC;
    m_axi_write_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_DATA_WIDTH-1 downto 0);
    m_axi_write_r_RLAST : IN STD_LOGIC;
    m_axi_write_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_RUSER_WIDTH-1 downto 0);
    m_axi_write_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_BVALID : IN STD_LOGIC;
    m_axi_write_r_BREADY : OUT STD_LOGIC;
    m_axi_write_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of MLP is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MLP_MLP,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.561000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=92,HLS_SYN_DSP=0,HLS_SYN_FF=23916,HLS_SYN_LUT=26582,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (67 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (67 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (67 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (67 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (67 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (67 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (67 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (67 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (67 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (67 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiLayerOutput : STD_LOGIC_VECTOR (63 downto 0);
    signal numberInputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOutputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberLayers : STD_LOGIC_VECTOR (31 downto 0);
    signal numberNeurons : STD_LOGIC_VECTOR (31 downto 0);
    signal loadParameters : STD_LOGIC_VECTOR (31 downto 0);
    signal exportLayers : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bramWeight_ce0 : STD_LOGIC;
    signal bramWeight_we0 : STD_LOGIC;
    signal bramWeight_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bramWeight_ce1 : STD_LOGIC;
    signal bramWeight_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramBias_ce0 : STD_LOGIC;
    signal bramBias_we0 : STD_LOGIC;
    signal bramBias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal read_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond316_reg_1223 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond294_reg_1277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond305_reg_1253 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal write_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal icmp_ln107_reg_1481 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal exitcond272_reg_1491 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond272_reg_1491_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal icmp_ln63_reg_1291 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal exitcond1_reg_1520 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_1520_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal icmp_ln110_reg_1510 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_r_AWREADY : STD_LOGIC;
    signal read_r_WREADY : STD_LOGIC;
    signal read_r_ARVALID : STD_LOGIC;
    signal read_r_ARREADY : STD_LOGIC;
    signal read_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal read_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_r_RVALID : STD_LOGIC;
    signal read_r_RREADY : STD_LOGIC;
    signal read_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal read_r_RLAST : STD_LOGIC;
    signal read_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal read_r_BVALID : STD_LOGIC;
    signal read_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal read_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_AWVALID : STD_LOGIC;
    signal write_r_AWREADY : STD_LOGIC;
    signal write_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal write_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_r_WVALID : STD_LOGIC;
    signal write_r_WREADY : STD_LOGIC;
    signal write_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_r_ARREADY : STD_LOGIC;
    signal write_r_RVALID : STD_LOGIC;
    signal write_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_r_RLAST : STD_LOGIC;
    signal write_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal write_r_BVALID : STD_LOGIC;
    signal write_r_BREADY : STD_LOGIC;
    signal write_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal write_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index23_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index23_reg_462_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_index17_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index17_reg_474_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal loop_index11_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index11_reg_486_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state32_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_18_reg_498 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_19_reg_509 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_20_reg_531 : STD_LOGIC_VECTOR (30 downto 0);
    signal loop_index5_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal axiLayerOutput_read_reg_1118 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasInput_read_reg_1123 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput_read_reg_1128 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_read_reg_1133 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_read_reg_1138 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal numberInputs_read_reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln45_fu_621_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_reg_1158 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_1_fu_625_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln45_1_reg_1164 : STD_LOGIC_VECTOR (15 downto 0);
    signal numberNeurons_read_reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberLayers_read_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOutputs_read_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln53_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_addr_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond316_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond316_reg_1223_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_138_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_138_reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal read_addr_read_reg_1232 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_2_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_2_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln58_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_addr_1_reg_1247 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond305_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond305_reg_1253_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_140_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_140_reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal read_addr_1_read_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln61_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal read_addr_2_reg_1271 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond294_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond294_reg_1277_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_143_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_143_reg_1281 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal read_addr_2_read_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal trunc_ln1_reg_1295 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln137_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_1300 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state37_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln137_fu_814_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal zext_ln143_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_reg_1309 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_4_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_4_reg_1319 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln128_fu_848_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln128_reg_1329 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_copyArray_float_2u_s_fu_603_ap_ready : STD_LOGIC;
    signal grp_copyArray_float_2u_s_fu_603_ap_done : STD_LOGIC;
    signal ap_block_state42_on_subcall_done : BOOLEAN;
    signal trunc_ln137_3_reg_1334 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln137_1_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_1_reg_1340 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state43_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal add_ln137_1_fu_865_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal zext_ln143_5_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_5_reg_1349 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_6_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_6_reg_1359 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub21_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub21_reg_1369 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal trunc_ln84_fu_904_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln84_reg_1375 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln86_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln86_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal icmp_ln81_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln86_fu_932_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln86_reg_1395 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1100_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_1112_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln86_1_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal add_ln92_fu_950_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln92_reg_1416 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_processLayer_float_2u_1u_s_fu_576_ap_ready : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_ap_done : STD_LOGIC;
    signal ap_sync_grp_processLayer_float_2u_1u_s_fu_576_ap_ready : STD_LOGIC;
    signal ap_sync_grp_processLayer_float_2u_1u_s_fu_576_ap_done : STD_LOGIC;
    signal ap_block_state53_on_subcall_done : BOOLEAN;
    signal icmp_ln137_2_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_2_reg_1421 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state56_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state57_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal add_ln137_2_fu_959_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal zext_ln143_7_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_7_reg_1430 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_8_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_8_reg_1440 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1106_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln99_1_reg_1450 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_fu_611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln99_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln101_fu_993_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln101_reg_1460 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln106_fu_998_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln106_reg_1465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_outputLayer_float_2u_1u_s_fu_589_ap_ready : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_ap_done : STD_LOGIC;
    signal ap_sync_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready : STD_LOGIC;
    signal ap_sync_grp_outputLayer_float_2u_1u_s_fu_589_ap_done : STD_LOGIC;
    signal ap_block_state62_on_subcall_done : BOOLEAN;
    signal trunc_ln106_fu_1002_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln106_reg_1470 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln107_fu_1006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln107_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal icmp_ln107_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state64_io : BOOLEAN;
    signal exitcond272_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state65_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state66_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state67_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state67_io : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal empty_149_fu_1041_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal bramLayerResults_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramLayerResults_load_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal icmp_ln110_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op362_writeresp_state72 : BOOLEAN;
    signal ap_block_state72 : BOOLEAN;
    signal write_addr_1_reg_1514 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_1080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state74_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state75_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state76_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state76_io : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal empty_153_fu_1085_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal layerBuffer0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer0_load_4_reg_1534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state37 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state43 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_block_state55_on_subcall_done : BOOLEAN;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state56 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state65 : STD_LOGIC;
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state74 : STD_LOGIC;
    signal inputData_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal inputData_ce0 : STD_LOGIC;
    signal inputData_we0 : STD_LOGIC;
    signal inputData_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputData_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal inputData_ce1 : STD_LOGIC;
    signal inputData_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal layerBuffer0_ce0 : STD_LOGIC;
    signal layerBuffer0_we0 : STD_LOGIC;
    signal layerBuffer0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal layerBuffer0_ce1 : STD_LOGIC;
    signal layerBuffer0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal layerBuffer1_ce0 : STD_LOGIC;
    signal layerBuffer1_we0 : STD_LOGIC;
    signal layerBuffer1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal layerBuffer1_ce1 : STD_LOGIC;
    signal layerBuffer1_we1 : STD_LOGIC;
    signal layerBuffer1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramLayerResults_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramLayerResults_ce0 : STD_LOGIC;
    signal bramLayerResults_we0 : STD_LOGIC;
    signal bramLayerResults_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramLayerResults_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramLayerResults_ce1 : STD_LOGIC;
    signal bramLayerResults_we1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_weights_ce0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_weights_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_weights_we0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_weights_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_weights_ce1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_weights_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_weights_we1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_input_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_input_ce0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_input_we0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_input_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_input_ce1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_input_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_input_we1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_bias_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_bias_ce0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_bias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_bias_we0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_bias_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_bias_ce1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_bias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_bias_we1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_output_ce0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_output_we0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_output_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_output_ce1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_p_output_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_1_fu_564_p_output_we1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_ap_start : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_ap_done : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_ap_ready : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_ap_idle : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_1_fu_564_ap_continue : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_weights_ce0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_weights_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_weights_we0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_weights_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_weights_ce1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_weights_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_weights_we1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_input_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_input_ce0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_input_we0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_input_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_input_ce1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_input_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_input_we1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_bias_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_bias_ce0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_bias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_bias_we0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_bias_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_bias_ce1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_bias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_bias_we1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_output_ce0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_output_we0 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_output_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_output_ce1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_p_output_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_2u_1u_s_fu_576_p_output_we1 : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_ap_start : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_ap_idle : STD_LOGIC;
    signal grp_processLayer_float_2u_1u_s_fu_576_ap_continue : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_weights_ce0 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_weights_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_weights_we0 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_weights_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_weights_ce1 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_weights_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_weights_we1 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_input_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_input_ce0 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_input_we0 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_input_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_input_ce1 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_input_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_input_we1 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_bias_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_bias_ce0 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_bias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_bias_we0 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_bias_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_bias_ce1 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_bias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_bias_we1 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_output_ce0 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_output_we0 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_output_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_output_ce1 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_output_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_2u_1u_s_fu_589_p_output_we1 : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_ap_start : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_ap_idle : STD_LOGIC;
    signal grp_outputLayer_float_2u_1u_s_fu_589_ap_continue : STD_LOGIC;
    signal grp_copyArray_float_2u_s_fu_603_ap_start : STD_LOGIC;
    signal grp_copyArray_float_2u_s_fu_603_ap_idle : STD_LOGIC;
    signal grp_copyArray_float_2u_s_fu_603_p_input_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_copyArray_float_2u_s_fu_603_p_input_ce0 : STD_LOGIC;
    signal grp_copyArray_float_2u_s_fu_603_p_input_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_copyArray_float_2u_s_fu_603_p_input_ce1 : STD_LOGIC;
    signal grp_copyArray_float_2u_s_fu_603_p_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_copyArray_float_2u_s_fu_603_p_output_ce0 : STD_LOGIC;
    signal grp_copyArray_float_2u_s_fu_603_p_output_we0 : STD_LOGIC;
    signal grp_copyArray_float_2u_s_fu_603_p_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copyArray_float_2u_s_fu_603_p_output_offset : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_copyArray_float_2u_s_fu_603_size : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index23_phi_fu_466_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index17_phi_fu_478_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index11_phi_fu_490_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_processLayer_float_2u_1u_1_fu_564_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_ready : STD_LOGIC;
    signal ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_done : STD_LOGIC;
    signal ap_block_state36_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_done : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_block_state40_on_subcall_done : BOOLEAN;
    signal grp_processLayer_float_2u_1u_s_fu_576_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_done : STD_LOGIC := '0';
    signal grp_outputLayer_float_2u_1u_s_fu_589_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_done : STD_LOGIC := '0';
    signal grp_copyArray_float_2u_s_fu_603_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal loop_index23_cast_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index17_cast_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index11_cast_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal loop_index5_cast_fu_1047_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_cast_fu_1091_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast28_cast_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast29_cast_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast33_cast_fu_1025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast34_cast_fu_1070_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_150_fu_1052_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp6_stage0_01001 : BOOLEAN;
    signal ap_block_state81 : BOOLEAN;
    signal empty_154_fu_1096_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp7_stage0_01001 : BOOLEAN;
    signal add_ln50_fu_629_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_fu_635_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_1_fu_641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_fu_661_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast2_fu_711_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast_fu_755_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_145_fu_820_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_824_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln143_fu_837_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_146_fu_871_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_875_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_1_fu_888_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln84_2_fu_922_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln86_fu_932_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln97_fu_937_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln97_fu_941_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_147_fu_965_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_969_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_2_fu_982_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast3_fu_1016_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast4_fu_1061_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1100_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_1106_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;

    component MLP_processLayer_float_2u_1u_1 IS
    port (
        p_weights_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weights_ce0 : OUT STD_LOGIC;
        p_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we0 : OUT STD_LOGIC;
        p_weights_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weights_ce1 : OUT STD_LOGIC;
        p_weights_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we1 : OUT STD_LOGIC;
        p_input_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        p_input_ce0 : OUT STD_LOGIC;
        p_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we0 : OUT STD_LOGIC;
        p_input_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        p_input_ce1 : OUT STD_LOGIC;
        p_input_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we1 : OUT STD_LOGIC;
        p_bias_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_bias_ce0 : OUT STD_LOGIC;
        p_bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we0 : OUT STD_LOGIC;
        p_bias_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_bias_ce1 : OUT STD_LOGIC;
        p_bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we1 : OUT STD_LOGIC;
        p_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_output_ce0 : OUT STD_LOGIC;
        p_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we0 : OUT STD_LOGIC;
        p_output_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_output_ce1 : OUT STD_LOGIC;
        p_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we1 : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MLP_processLayer_float_2u_1u_s IS
    port (
        p_weights_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weights_ce0 : OUT STD_LOGIC;
        p_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we0 : OUT STD_LOGIC;
        p_weights_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weights_ce1 : OUT STD_LOGIC;
        p_weights_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we1 : OUT STD_LOGIC;
        p_weights_offset : IN STD_LOGIC_VECTOR (15 downto 0);
        p_input_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_input_ce0 : OUT STD_LOGIC;
        p_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we0 : OUT STD_LOGIC;
        p_input_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_input_ce1 : OUT STD_LOGIC;
        p_input_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we1 : OUT STD_LOGIC;
        p_bias_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_bias_ce0 : OUT STD_LOGIC;
        p_bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we0 : OUT STD_LOGIC;
        p_bias_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_bias_ce1 : OUT STD_LOGIC;
        p_bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we1 : OUT STD_LOGIC;
        p_bias_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        p_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_output_ce0 : OUT STD_LOGIC;
        p_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we0 : OUT STD_LOGIC;
        p_output_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_output_ce1 : OUT STD_LOGIC;
        p_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we1 : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_weights_offset_ap_vld : IN STD_LOGIC;
        p_bias_offset_ap_vld : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MLP_outputLayer_float_2u_1u_s IS
    port (
        p_weights_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weights_ce0 : OUT STD_LOGIC;
        p_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we0 : OUT STD_LOGIC;
        p_weights_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weights_ce1 : OUT STD_LOGIC;
        p_weights_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we1 : OUT STD_LOGIC;
        p_weights_offset : IN STD_LOGIC_VECTOR (15 downto 0);
        p_input_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_input_ce0 : OUT STD_LOGIC;
        p_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we0 : OUT STD_LOGIC;
        p_input_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_input_ce1 : OUT STD_LOGIC;
        p_input_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we1 : OUT STD_LOGIC;
        p_bias_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_bias_ce0 : OUT STD_LOGIC;
        p_bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we0 : OUT STD_LOGIC;
        p_bias_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_bias_ce1 : OUT STD_LOGIC;
        p_bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we1 : OUT STD_LOGIC;
        p_bias_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        p_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_output_ce0 : OUT STD_LOGIC;
        p_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we0 : OUT STD_LOGIC;
        p_output_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_output_ce1 : OUT STD_LOGIC;
        p_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we1 : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_weights_offset_ap_vld : IN STD_LOGIC;
        p_bias_offset_ap_vld : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MLP_copyArray_float_2u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_input_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_input_ce0 : OUT STD_LOGIC;
        p_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_input_ce1 : OUT STD_LOGIC;
        p_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_output_ce0 : OUT STD_LOGIC;
        p_output_we0 : OUT STD_LOGIC;
        p_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component MLP_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component MLP_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component MLP_bramWeight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_bramBias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_inputData IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_layerBuffer0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_layerBuffer1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_bramLayerResults IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiWeightInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiBiasInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiLayerOutput : OUT STD_LOGIC_VECTOR (63 downto 0);
        numberInputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberOutputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberLayers : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberNeurons : OUT STD_LOGIC_VECTOR (31 downto 0);
        loadParameters : OUT STD_LOGIC_VECTOR (31 downto 0);
        exportLayers : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_read_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MLP_write_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bramWeight_U : component MLP_bramWeight
    generic map (
        DataWidth => 32,
        AddressRange => 40960,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_address0,
        ce0 => bramWeight_ce0,
        we0 => bramWeight_we0,
        d0 => bramWeight_d0,
        q0 => bramWeight_q0,
        address1 => bramWeight_address1,
        ce1 => bramWeight_ce1,
        q1 => bramWeight_q1);

    bramBias_U : component MLP_bramBias
    generic map (
        DataWidth => 32,
        AddressRange => 416,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramBias_address0,
        ce0 => bramBias_ce0,
        we0 => bramBias_we0,
        d0 => bramBias_d0,
        q0 => bramBias_q0);

    control_s_axi_U : component MLP_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        axiWeightInput => axiWeightInput,
        axiBiasInput => axiBiasInput,
        axiLayerOutput => axiLayerOutput,
        numberInputs => numberInputs,
        numberOutputs => numberOutputs,
        numberLayers => numberLayers,
        numberNeurons => numberNeurons,
        loadParameters => loadParameters,
        exportLayers => exportLayers);

    read_r_m_axi_U : component MLP_read_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 128,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_READ_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_READ_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_READ_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_READ_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_READ_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_READ_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_READ_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_READ_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_READ_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_READ_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_READ_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_read_r_AWVALID,
        AWREADY => m_axi_read_r_AWREADY,
        AWADDR => m_axi_read_r_AWADDR,
        AWID => m_axi_read_r_AWID,
        AWLEN => m_axi_read_r_AWLEN,
        AWSIZE => m_axi_read_r_AWSIZE,
        AWBURST => m_axi_read_r_AWBURST,
        AWLOCK => m_axi_read_r_AWLOCK,
        AWCACHE => m_axi_read_r_AWCACHE,
        AWPROT => m_axi_read_r_AWPROT,
        AWQOS => m_axi_read_r_AWQOS,
        AWREGION => m_axi_read_r_AWREGION,
        AWUSER => m_axi_read_r_AWUSER,
        WVALID => m_axi_read_r_WVALID,
        WREADY => m_axi_read_r_WREADY,
        WDATA => m_axi_read_r_WDATA,
        WSTRB => m_axi_read_r_WSTRB,
        WLAST => m_axi_read_r_WLAST,
        WID => m_axi_read_r_WID,
        WUSER => m_axi_read_r_WUSER,
        ARVALID => m_axi_read_r_ARVALID,
        ARREADY => m_axi_read_r_ARREADY,
        ARADDR => m_axi_read_r_ARADDR,
        ARID => m_axi_read_r_ARID,
        ARLEN => m_axi_read_r_ARLEN,
        ARSIZE => m_axi_read_r_ARSIZE,
        ARBURST => m_axi_read_r_ARBURST,
        ARLOCK => m_axi_read_r_ARLOCK,
        ARCACHE => m_axi_read_r_ARCACHE,
        ARPROT => m_axi_read_r_ARPROT,
        ARQOS => m_axi_read_r_ARQOS,
        ARREGION => m_axi_read_r_ARREGION,
        ARUSER => m_axi_read_r_ARUSER,
        RVALID => m_axi_read_r_RVALID,
        RREADY => m_axi_read_r_RREADY,
        RDATA => m_axi_read_r_RDATA,
        RLAST => m_axi_read_r_RLAST,
        RID => m_axi_read_r_RID,
        RUSER => m_axi_read_r_RUSER,
        RRESP => m_axi_read_r_RRESP,
        BVALID => m_axi_read_r_BVALID,
        BREADY => m_axi_read_r_BREADY,
        BRESP => m_axi_read_r_BRESP,
        BID => m_axi_read_r_BID,
        BUSER => m_axi_read_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read_r_ARVALID,
        I_ARREADY => read_r_ARREADY,
        I_ARADDR => read_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => read_r_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => read_r_RVALID,
        I_RREADY => read_r_RREADY,
        I_RDATA => read_r_RDATA,
        I_RID => read_r_RID,
        I_RUSER => read_r_RUSER,
        I_RRESP => read_r_RRESP,
        I_RLAST => read_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => read_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => read_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => read_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => read_r_BRESP,
        I_BID => read_r_BID,
        I_BUSER => read_r_BUSER);

    write_r_m_axi_U : component MLP_write_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_WRITE_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_WRITE_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_WRITE_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_WRITE_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_WRITE_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_WRITE_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_WRITE_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_WRITE_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_WRITE_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_WRITE_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_WRITE_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_write_r_AWVALID,
        AWREADY => m_axi_write_r_AWREADY,
        AWADDR => m_axi_write_r_AWADDR,
        AWID => m_axi_write_r_AWID,
        AWLEN => m_axi_write_r_AWLEN,
        AWSIZE => m_axi_write_r_AWSIZE,
        AWBURST => m_axi_write_r_AWBURST,
        AWLOCK => m_axi_write_r_AWLOCK,
        AWCACHE => m_axi_write_r_AWCACHE,
        AWPROT => m_axi_write_r_AWPROT,
        AWQOS => m_axi_write_r_AWQOS,
        AWREGION => m_axi_write_r_AWREGION,
        AWUSER => m_axi_write_r_AWUSER,
        WVALID => m_axi_write_r_WVALID,
        WREADY => m_axi_write_r_WREADY,
        WDATA => m_axi_write_r_WDATA,
        WSTRB => m_axi_write_r_WSTRB,
        WLAST => m_axi_write_r_WLAST,
        WID => m_axi_write_r_WID,
        WUSER => m_axi_write_r_WUSER,
        ARVALID => m_axi_write_r_ARVALID,
        ARREADY => m_axi_write_r_ARREADY,
        ARADDR => m_axi_write_r_ARADDR,
        ARID => m_axi_write_r_ARID,
        ARLEN => m_axi_write_r_ARLEN,
        ARSIZE => m_axi_write_r_ARSIZE,
        ARBURST => m_axi_write_r_ARBURST,
        ARLOCK => m_axi_write_r_ARLOCK,
        ARCACHE => m_axi_write_r_ARCACHE,
        ARPROT => m_axi_write_r_ARPROT,
        ARQOS => m_axi_write_r_ARQOS,
        ARREGION => m_axi_write_r_ARREGION,
        ARUSER => m_axi_write_r_ARUSER,
        RVALID => m_axi_write_r_RVALID,
        RREADY => m_axi_write_r_RREADY,
        RDATA => m_axi_write_r_RDATA,
        RLAST => m_axi_write_r_RLAST,
        RID => m_axi_write_r_RID,
        RUSER => m_axi_write_r_RUSER,
        RRESP => m_axi_write_r_RRESP,
        BVALID => m_axi_write_r_BVALID,
        BREADY => m_axi_write_r_BREADY,
        BRESP => m_axi_write_r_BRESP,
        BID => m_axi_write_r_BID,
        BUSER => m_axi_write_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => write_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => write_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => write_r_RDATA,
        I_RID => write_r_RID,
        I_RUSER => write_r_RUSER,
        I_RRESP => write_r_RRESP,
        I_RLAST => write_r_RLAST,
        I_AWVALID => write_r_AWVALID,
        I_AWREADY => write_r_AWREADY,
        I_AWADDR => write_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => write_r_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => write_r_WVALID,
        I_WREADY => write_r_WREADY,
        I_WDATA => write_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => write_r_BVALID,
        I_BREADY => write_r_BREADY,
        I_BRESP => write_r_BRESP,
        I_BID => write_r_BID,
        I_BUSER => write_r_BUSER);

    inputData_U : component MLP_inputData
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => inputData_address0,
        ce0 => inputData_ce0,
        we0 => inputData_we0,
        d0 => inputData_d0,
        q0 => inputData_q0,
        address1 => inputData_address1,
        ce1 => inputData_ce1,
        q1 => inputData_q1);

    layerBuffer0_U : component MLP_layerBuffer0
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layerBuffer0_address0,
        ce0 => layerBuffer0_ce0,
        we0 => layerBuffer0_we0,
        d0 => layerBuffer0_d0,
        q0 => layerBuffer0_q0,
        address1 => layerBuffer0_address1,
        ce1 => layerBuffer0_ce1,
        q1 => layerBuffer0_q1);

    layerBuffer1_U : component MLP_layerBuffer1
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layerBuffer1_address0,
        ce0 => layerBuffer1_ce0,
        we0 => layerBuffer1_we0,
        d0 => layerBuffer0_q0,
        q0 => layerBuffer1_q0,
        address1 => layerBuffer1_address1,
        ce1 => layerBuffer1_ce1,
        we1 => layerBuffer1_we1,
        d1 => layerBuffer0_q1,
        q1 => layerBuffer1_q1);

    bramLayerResults_U : component MLP_bramLayerResults
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramLayerResults_address0,
        ce0 => bramLayerResults_ce0,
        we0 => bramLayerResults_we0,
        d0 => bramLayerResults_d0,
        q0 => bramLayerResults_q0,
        address1 => bramLayerResults_address1,
        ce1 => bramLayerResults_ce1,
        we1 => bramLayerResults_we1,
        d1 => inputData_q1);

    grp_processLayer_float_2u_1u_1_fu_564 : component MLP_processLayer_float_2u_1u_1
    port map (
        p_weights_address0 => grp_processLayer_float_2u_1u_1_fu_564_p_weights_address0,
        p_weights_ce0 => grp_processLayer_float_2u_1u_1_fu_564_p_weights_ce0,
        p_weights_d0 => grp_processLayer_float_2u_1u_1_fu_564_p_weights_d0,
        p_weights_q0 => bramWeight_q0,
        p_weights_we0 => grp_processLayer_float_2u_1u_1_fu_564_p_weights_we0,
        p_weights_address1 => grp_processLayer_float_2u_1u_1_fu_564_p_weights_address1,
        p_weights_ce1 => grp_processLayer_float_2u_1u_1_fu_564_p_weights_ce1,
        p_weights_d1 => grp_processLayer_float_2u_1u_1_fu_564_p_weights_d1,
        p_weights_q1 => bramWeight_q1,
        p_weights_we1 => grp_processLayer_float_2u_1u_1_fu_564_p_weights_we1,
        p_input_address0 => grp_processLayer_float_2u_1u_1_fu_564_p_input_address0,
        p_input_ce0 => grp_processLayer_float_2u_1u_1_fu_564_p_input_ce0,
        p_input_d0 => grp_processLayer_float_2u_1u_1_fu_564_p_input_d0,
        p_input_q0 => inputData_q0,
        p_input_we0 => grp_processLayer_float_2u_1u_1_fu_564_p_input_we0,
        p_input_address1 => grp_processLayer_float_2u_1u_1_fu_564_p_input_address1,
        p_input_ce1 => grp_processLayer_float_2u_1u_1_fu_564_p_input_ce1,
        p_input_d1 => grp_processLayer_float_2u_1u_1_fu_564_p_input_d1,
        p_input_q1 => inputData_q1,
        p_input_we1 => grp_processLayer_float_2u_1u_1_fu_564_p_input_we1,
        p_bias_address0 => grp_processLayer_float_2u_1u_1_fu_564_p_bias_address0,
        p_bias_ce0 => grp_processLayer_float_2u_1u_1_fu_564_p_bias_ce0,
        p_bias_d0 => grp_processLayer_float_2u_1u_1_fu_564_p_bias_d0,
        p_bias_q0 => bramBias_q0,
        p_bias_we0 => grp_processLayer_float_2u_1u_1_fu_564_p_bias_we0,
        p_bias_address1 => grp_processLayer_float_2u_1u_1_fu_564_p_bias_address1,
        p_bias_ce1 => grp_processLayer_float_2u_1u_1_fu_564_p_bias_ce1,
        p_bias_d1 => grp_processLayer_float_2u_1u_1_fu_564_p_bias_d1,
        p_bias_q1 => ap_const_lv32_0,
        p_bias_we1 => grp_processLayer_float_2u_1u_1_fu_564_p_bias_we1,
        p_output_address0 => grp_processLayer_float_2u_1u_1_fu_564_p_output_address0,
        p_output_ce0 => grp_processLayer_float_2u_1u_1_fu_564_p_output_ce0,
        p_output_d0 => grp_processLayer_float_2u_1u_1_fu_564_p_output_d0,
        p_output_q0 => ap_const_lv32_0,
        p_output_we0 => grp_processLayer_float_2u_1u_1_fu_564_p_output_we0,
        p_output_address1 => grp_processLayer_float_2u_1u_1_fu_564_p_output_address1,
        p_output_ce1 => grp_processLayer_float_2u_1u_1_fu_564_p_output_ce1,
        p_output_d1 => grp_processLayer_float_2u_1u_1_fu_564_p_output_d1,
        p_output_q1 => ap_const_lv32_0,
        p_output_we1 => grp_processLayer_float_2u_1u_1_fu_564_p_output_we1,
        p_n => numberNeurons_read_reg_1170,
        p_k => numberInputs_read_reg_1147,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        ap_start => grp_processLayer_float_2u_1u_1_fu_564_ap_start,
        ap_done => grp_processLayer_float_2u_1u_1_fu_564_ap_done,
        ap_ready => grp_processLayer_float_2u_1u_1_fu_564_ap_ready,
        ap_idle => grp_processLayer_float_2u_1u_1_fu_564_ap_idle,
        ap_continue => grp_processLayer_float_2u_1u_1_fu_564_ap_continue);

    grp_processLayer_float_2u_1u_s_fu_576 : component MLP_processLayer_float_2u_1u_s
    port map (
        p_weights_address0 => grp_processLayer_float_2u_1u_s_fu_576_p_weights_address0,
        p_weights_ce0 => grp_processLayer_float_2u_1u_s_fu_576_p_weights_ce0,
        p_weights_d0 => grp_processLayer_float_2u_1u_s_fu_576_p_weights_d0,
        p_weights_q0 => bramWeight_q0,
        p_weights_we0 => grp_processLayer_float_2u_1u_s_fu_576_p_weights_we0,
        p_weights_address1 => grp_processLayer_float_2u_1u_s_fu_576_p_weights_address1,
        p_weights_ce1 => grp_processLayer_float_2u_1u_s_fu_576_p_weights_ce1,
        p_weights_d1 => grp_processLayer_float_2u_1u_s_fu_576_p_weights_d1,
        p_weights_q1 => bramWeight_q1,
        p_weights_we1 => grp_processLayer_float_2u_1u_s_fu_576_p_weights_we1,
        p_weights_offset => mul_ln86_1_reg_1411,
        p_input_address0 => grp_processLayer_float_2u_1u_s_fu_576_p_input_address0,
        p_input_ce0 => grp_processLayer_float_2u_1u_s_fu_576_p_input_ce0,
        p_input_d0 => grp_processLayer_float_2u_1u_s_fu_576_p_input_d0,
        p_input_q0 => layerBuffer1_q0,
        p_input_we0 => grp_processLayer_float_2u_1u_s_fu_576_p_input_we0,
        p_input_address1 => grp_processLayer_float_2u_1u_s_fu_576_p_input_address1,
        p_input_ce1 => grp_processLayer_float_2u_1u_s_fu_576_p_input_ce1,
        p_input_d1 => grp_processLayer_float_2u_1u_s_fu_576_p_input_d1,
        p_input_q1 => layerBuffer1_q1,
        p_input_we1 => grp_processLayer_float_2u_1u_s_fu_576_p_input_we1,
        p_bias_address0 => grp_processLayer_float_2u_1u_s_fu_576_p_bias_address0,
        p_bias_ce0 => grp_processLayer_float_2u_1u_s_fu_576_p_bias_ce0,
        p_bias_d0 => grp_processLayer_float_2u_1u_s_fu_576_p_bias_d0,
        p_bias_q0 => bramBias_q0,
        p_bias_we0 => grp_processLayer_float_2u_1u_s_fu_576_p_bias_we0,
        p_bias_address1 => grp_processLayer_float_2u_1u_s_fu_576_p_bias_address1,
        p_bias_ce1 => grp_processLayer_float_2u_1u_s_fu_576_p_bias_ce1,
        p_bias_d1 => grp_processLayer_float_2u_1u_s_fu_576_p_bias_d1,
        p_bias_q1 => ap_const_lv32_0,
        p_bias_we1 => grp_processLayer_float_2u_1u_s_fu_576_p_bias_we1,
        p_bias_offset => mul_ln86_reg_1395,
        p_output_address0 => grp_processLayer_float_2u_1u_s_fu_576_p_output_address0,
        p_output_ce0 => grp_processLayer_float_2u_1u_s_fu_576_p_output_ce0,
        p_output_d0 => grp_processLayer_float_2u_1u_s_fu_576_p_output_d0,
        p_output_q0 => ap_const_lv32_0,
        p_output_we0 => grp_processLayer_float_2u_1u_s_fu_576_p_output_we0,
        p_output_address1 => grp_processLayer_float_2u_1u_s_fu_576_p_output_address1,
        p_output_ce1 => grp_processLayer_float_2u_1u_s_fu_576_p_output_ce1,
        p_output_d1 => grp_processLayer_float_2u_1u_s_fu_576_p_output_d1,
        p_output_q1 => ap_const_lv32_0,
        p_output_we1 => grp_processLayer_float_2u_1u_s_fu_576_p_output_we1,
        p_n => numberNeurons_read_reg_1170,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_weights_offset_ap_vld => ap_const_logic_1,
        p_bias_offset_ap_vld => ap_const_logic_1,
        p_n_ap_vld => ap_const_logic_1,
        ap_start => grp_processLayer_float_2u_1u_s_fu_576_ap_start,
        ap_done => grp_processLayer_float_2u_1u_s_fu_576_ap_done,
        ap_ready => grp_processLayer_float_2u_1u_s_fu_576_ap_ready,
        ap_idle => grp_processLayer_float_2u_1u_s_fu_576_ap_idle,
        ap_continue => grp_processLayer_float_2u_1u_s_fu_576_ap_continue);

    grp_outputLayer_float_2u_1u_s_fu_589 : component MLP_outputLayer_float_2u_1u_s
    port map (
        p_weights_address0 => grp_outputLayer_float_2u_1u_s_fu_589_p_weights_address0,
        p_weights_ce0 => grp_outputLayer_float_2u_1u_s_fu_589_p_weights_ce0,
        p_weights_d0 => grp_outputLayer_float_2u_1u_s_fu_589_p_weights_d0,
        p_weights_q0 => bramWeight_q0,
        p_weights_we0 => grp_outputLayer_float_2u_1u_s_fu_589_p_weights_we0,
        p_weights_address1 => grp_outputLayer_float_2u_1u_s_fu_589_p_weights_address1,
        p_weights_ce1 => grp_outputLayer_float_2u_1u_s_fu_589_p_weights_ce1,
        p_weights_d1 => grp_outputLayer_float_2u_1u_s_fu_589_p_weights_d1,
        p_weights_q1 => bramWeight_q1,
        p_weights_we1 => grp_outputLayer_float_2u_1u_s_fu_589_p_weights_we1,
        p_weights_offset => mul_ln99_1_reg_1450,
        p_input_address0 => grp_outputLayer_float_2u_1u_s_fu_589_p_input_address0,
        p_input_ce0 => grp_outputLayer_float_2u_1u_s_fu_589_p_input_ce0,
        p_input_d0 => grp_outputLayer_float_2u_1u_s_fu_589_p_input_d0,
        p_input_q0 => layerBuffer1_q0,
        p_input_we0 => grp_outputLayer_float_2u_1u_s_fu_589_p_input_we0,
        p_input_address1 => grp_outputLayer_float_2u_1u_s_fu_589_p_input_address1,
        p_input_ce1 => grp_outputLayer_float_2u_1u_s_fu_589_p_input_ce1,
        p_input_d1 => grp_outputLayer_float_2u_1u_s_fu_589_p_input_d1,
        p_input_q1 => layerBuffer1_q1,
        p_input_we1 => grp_outputLayer_float_2u_1u_s_fu_589_p_input_we1,
        p_bias_address0 => grp_outputLayer_float_2u_1u_s_fu_589_p_bias_address0,
        p_bias_ce0 => grp_outputLayer_float_2u_1u_s_fu_589_p_bias_ce0,
        p_bias_d0 => grp_outputLayer_float_2u_1u_s_fu_589_p_bias_d0,
        p_bias_q0 => bramBias_q0,
        p_bias_we0 => grp_outputLayer_float_2u_1u_s_fu_589_p_bias_we0,
        p_bias_address1 => grp_outputLayer_float_2u_1u_s_fu_589_p_bias_address1,
        p_bias_ce1 => grp_outputLayer_float_2u_1u_s_fu_589_p_bias_ce1,
        p_bias_d1 => grp_outputLayer_float_2u_1u_s_fu_589_p_bias_d1,
        p_bias_q1 => ap_const_lv32_0,
        p_bias_we1 => grp_outputLayer_float_2u_1u_s_fu_589_p_bias_we1,
        p_bias_offset => trunc_ln101_reg_1460,
        p_output_address0 => grp_outputLayer_float_2u_1u_s_fu_589_p_output_address0,
        p_output_ce0 => grp_outputLayer_float_2u_1u_s_fu_589_p_output_ce0,
        p_output_d0 => grp_outputLayer_float_2u_1u_s_fu_589_p_output_d0,
        p_output_q0 => ap_const_lv32_0,
        p_output_we0 => grp_outputLayer_float_2u_1u_s_fu_589_p_output_we0,
        p_output_address1 => grp_outputLayer_float_2u_1u_s_fu_589_p_output_address1,
        p_output_ce1 => grp_outputLayer_float_2u_1u_s_fu_589_p_output_ce1,
        p_output_d1 => grp_outputLayer_float_2u_1u_s_fu_589_p_output_d1,
        p_output_q1 => ap_const_lv32_0,
        p_output_we1 => grp_outputLayer_float_2u_1u_s_fu_589_p_output_we1,
        p_n => numberOutputs_read_reg_1190,
        p_k => numberNeurons_read_reg_1170,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_weights_offset_ap_vld => ap_const_logic_1,
        p_bias_offset_ap_vld => ap_const_logic_1,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        ap_start => grp_outputLayer_float_2u_1u_s_fu_589_ap_start,
        ap_done => grp_outputLayer_float_2u_1u_s_fu_589_ap_done,
        ap_ready => grp_outputLayer_float_2u_1u_s_fu_589_ap_ready,
        ap_idle => grp_outputLayer_float_2u_1u_s_fu_589_ap_idle,
        ap_continue => grp_outputLayer_float_2u_1u_s_fu_589_ap_continue);

    grp_copyArray_float_2u_s_fu_603 : component MLP_copyArray_float_2u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copyArray_float_2u_s_fu_603_ap_start,
        ap_done => grp_copyArray_float_2u_s_fu_603_ap_done,
        ap_idle => grp_copyArray_float_2u_s_fu_603_ap_idle,
        ap_ready => grp_copyArray_float_2u_s_fu_603_ap_ready,
        p_input_address0 => grp_copyArray_float_2u_s_fu_603_p_input_address0,
        p_input_ce0 => grp_copyArray_float_2u_s_fu_603_p_input_ce0,
        p_input_q0 => layerBuffer0_q0,
        p_input_address1 => grp_copyArray_float_2u_s_fu_603_p_input_address1,
        p_input_ce1 => grp_copyArray_float_2u_s_fu_603_p_input_ce1,
        p_input_q1 => layerBuffer0_q1,
        p_output_address0 => grp_copyArray_float_2u_s_fu_603_p_output_address0,
        p_output_ce0 => grp_copyArray_float_2u_s_fu_603_p_output_ce0,
        p_output_we0 => grp_copyArray_float_2u_s_fu_603_p_output_we0,
        p_output_d0 => grp_copyArray_float_2u_s_fu_603_p_output_d0,
        p_output_offset => grp_copyArray_float_2u_s_fu_603_p_output_offset,
        size => grp_copyArray_float_2u_s_fu_603_size);

    mul_32s_32s_32_1_1_U480 : component MLP_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberLayers_read_reg_1184,
        din1 => numberNeurons_read_reg_1170,
        dout => grp_fu_611_p2);

    mul_32s_32s_32_1_1_U481 : component MLP_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons,
        din1 => mul_ln50_fu_635_p1,
        dout => mul_ln50_fu_635_p2);

    mul_32s_32s_32_1_1_U482 : component MLP_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1170,
        din1 => valuesToCopy_fu_650_p1,
        dout => valuesToCopy_fu_650_p2);

    mul_9s_9s_9_1_1_U483 : component MLP_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => trunc_ln128_reg_1329,
        din1 => mul_ln86_fu_932_p1,
        dout => mul_ln86_fu_932_p2);

    mul_32s_32s_32_1_1_U484 : component MLP_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1170,
        din1 => sub21_reg_1369,
        dout => mul_ln97_fu_937_p2);

    mac_muladd_16s_16s_16ns_16_4_1_U485 : component MLP_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln84_reg_1375,
        din1 => grp_fu_1100_p1,
        din2 => trunc_ln45_1_reg_1164,
        ce => ap_const_logic_1,
        dout => grp_fu_1100_p3);

    mul_mul_16s_16s_16_4_1_U486 : component MLP_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1106_p0,
        din1 => trunc_ln84_reg_1375,
        ce => ap_const_logic_1,
        dout => grp_fu_1106_p2);

    mul_mul_16s_16s_16_4_1_U487 : component MLP_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln84_reg_1375,
        din1 => grp_fu_1100_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1112_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state32);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state37))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln63_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state37))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state37);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((icmp_ln63_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state43))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state42_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state43))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state43);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((ap_const_boolean_0 = ap_block_state42_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state56))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state55_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state56))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state56);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif (((ap_const_boolean_0 = ap_block_state55_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state65))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state64_io) or (grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0))) and (icmp_ln107_reg_1481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state65)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state65);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state64_io) or (grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0))) and (icmp_ln107_reg_1481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state74))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state74)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state74);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state62_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                    ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_done <= ap_const_logic_0;
                elsif ((grp_outputLayer_float_2u_1u_s_fu_589_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state62_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                    ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready <= ap_const_logic_0;
                elsif ((grp_outputLayer_float_2u_1u_s_fu_589_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_done <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state40_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
                    ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_done <= ap_const_logic_0;
                elsif ((grp_processLayer_float_2u_1u_1_fu_564_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_ready <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state40_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
                    ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_ready <= ap_const_logic_0;
                elsif ((grp_processLayer_float_2u_1u_1_fu_564_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_done <= ap_const_logic_0;
                elsif ((grp_processLayer_float_2u_1u_s_fu_576_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_ready <= ap_const_logic_0;
                elsif ((grp_processLayer_float_2u_1u_s_fu_576_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_copyArray_float_2u_s_fu_603_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copyArray_float_2u_s_fu_603_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                    grp_copyArray_float_2u_s_fu_603_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copyArray_float_2u_s_fu_603_ap_ready = ap_const_logic_1)) then 
                    grp_copyArray_float_2u_s_fu_603_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_outputLayer_float_2u_1u_s_fu_589_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_outputLayer_float_2u_1u_s_fu_589_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state61) or ((ap_sync_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
                    grp_outputLayer_float_2u_1u_s_fu_589_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_outputLayer_float_2u_1u_s_fu_589_ap_ready = ap_const_logic_1)) then 
                    grp_outputLayer_float_2u_1u_s_fu_589_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processLayer_float_2u_1u_1_fu_564_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_processLayer_float_2u_1u_1_fu_564_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_ready = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_ready = ap_const_logic_0)) or ((icmp_ln63_fu_794_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
                    grp_processLayer_float_2u_1u_1_fu_564_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processLayer_float_2u_1u_1_fu_564_ap_ready = ap_const_logic_1)) then 
                    grp_processLayer_float_2u_1u_1_fu_564_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processLayer_float_2u_1u_s_fu_576_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_processLayer_float_2u_1u_s_fu_576_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_sync_grp_processLayer_float_2u_1u_s_fu_576_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
                    grp_processLayer_float_2u_1u_s_fu_576_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processLayer_float_2u_1u_s_fu_576_ap_ready = ap_const_logic_1)) then 
                    grp_processLayer_float_2u_1u_s_fu_576_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_18_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln137_fu_809_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_18_reg_498 <= add_ln137_fu_814_p2;
            elsif (((icmp_ln63_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                i_18_reg_498 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_19_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_1_fu_860_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_19_reg_509 <= add_ln137_1_fu_865_p2;
            elsif (((ap_const_boolean_0 = ap_block_state42_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                i_19_reg_509 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_20_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_2_fu_954_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i_20_reg_531 <= add_ln137_2_fu_959_p2;
            elsif (((ap_const_boolean_0 = ap_block_state55_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                i_20_reg_531 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                i_reg_520 <= add_ln86_reg_1385;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                i_reg_520 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    loop_index11_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                loop_index11_reg_486 <= ap_const_lv32_0;
            elsif (((exitcond294_reg_1277 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                loop_index11_reg_486 <= empty_143_reg_1281;
            end if; 
        end if;
    end process;

    loop_index17_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                loop_index17_reg_474 <= ap_const_lv32_0;
            elsif (((exitcond305_reg_1253 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                loop_index17_reg_474 <= empty_140_reg_1257;
            end if; 
        end if;
    end process;

    loop_index23_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                loop_index23_reg_462 <= ap_const_lv32_0;
            elsif (((exitcond316_reg_1223 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                loop_index23_reg_462 <= empty_138_reg_1227;
            end if; 
        end if;
    end process;

    loop_index5_reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state64_io) or (grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0))) and (icmp_ln107_reg_1481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                loop_index5_reg_542 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (exitcond272_fu_1036_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                loop_index5_reg_542 <= empty_149_fu_1041_p2;
            end if; 
        end if;
    end process;

    loop_index_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                loop_index_reg_553 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (exitcond1_fu_1080_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                loop_index_reg_553 <= empty_153_fu_1085_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state62_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                add_ln106_reg_1465 <= add_ln106_fu_998_p2;
                trunc_ln106_reg_1470 <= trunc_ln106_fu_1002_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                add_ln107_reg_1475 <= add_ln107_fu_1006_p2;
                icmp_ln107_reg_1481 <= icmp_ln107_fu_1010_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln86_reg_1385 <= add_ln86_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                add_ln92_reg_1416 <= add_ln92_fu_950_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                axiBiasInput_read_reg_1123 <= axiBiasInput;
                axiLayerOutput_read_reg_1118 <= axiLayerOutput;
                axiWeightInput_read_reg_1128 <= axiWeightInput;
                input_read_reg_1138 <= input_r;
                numberInputs_read_reg_1147 <= numberInputs;
                numberLayers_read_reg_1184 <= numberLayers;
                numberNeurons_read_reg_1170 <= numberNeurons;
                numberOutputs_read_reg_1190 <= numberOutputs;
                output_read_reg_1133 <= output_r;
                trunc_ln45_1_reg_1164 <= trunc_ln45_1_fu_625_p1;
                trunc_ln45_reg_1158 <= trunc_ln45_fu_621_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (exitcond272_reg_1491 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                bramLayerResults_load_reg_1505 <= bramLayerResults_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_138_reg_1227 <= empty_138_fu_685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_140_reg_1257 <= empty_140_fu_735_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                empty_143_reg_1281 <= empty_143_fu_779_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                exitcond1_reg_1520 <= exitcond1_fu_1080_p2;
                exitcond1_reg_1520_pp7_iter1_reg <= exitcond1_reg_1520;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                exitcond272_reg_1491 <= exitcond272_fu_1036_p2;
                exitcond272_reg_1491_pp6_iter1_reg <= exitcond272_reg_1491;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond294_reg_1277 <= exitcond294_fu_774_p2;
                exitcond294_reg_1277_pp2_iter1_reg <= exitcond294_reg_1277;
                loop_index11_reg_486_pp2_iter1_reg <= loop_index11_reg_486;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond305_reg_1253 <= exitcond305_fu_730_p2;
                exitcond305_reg_1253_pp1_iter1_reg <= exitcond305_reg_1253;
                loop_index17_reg_474_pp1_iter1_reg <= loop_index17_reg_474;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond316_reg_1223 <= exitcond316_fu_680_p2;
                exitcond316_reg_1223_pp0_iter1_reg <= exitcond316_reg_1223;
                loop_index23_reg_462_pp0_iter1_reg <= loop_index23_reg_462;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op362_writeresp_state72 = ap_const_boolean_1) and (write_r_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                icmp_ln110_reg_1510 <= icmp_ln110_fu_1056_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln137_1_reg_1340 <= icmp_ln137_1_fu_860_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln137_2_reg_1421 <= icmp_ln137_2_fu_954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln137_reg_1300 <= icmp_ln137_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                icmp_ln63_reg_1291 <= icmp_ln63_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (exitcond1_reg_1520 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                layerBuffer0_load_4_reg_1534 <= layerBuffer0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln45_fu_615_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln50_reg_1202 <= mul_ln50_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                mul_ln86_1_reg_1411 <= grp_fu_1112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_907_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                mul_ln86_reg_1395 <= mul_ln86_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                mul_ln99_1_reg_1450 <= grp_fu_1106_p2;
                mul_ln99_reg_1455 <= grp_fu_611_p2;
                trunc_ln101_reg_1460 <= trunc_ln101_fu_993_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond305_reg_1253 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                read_addr_1_read_reg_1262 <= read_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_705_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                read_addr_1_reg_1247 <= p_cast29_cast_fu_720_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond294_reg_1277 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                read_addr_2_read_reg_1286 <= read_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_750_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                read_addr_2_reg_1271 <= p_cast_cast_fu_764_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond316_reg_1223 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                read_addr_read_reg_1232 <= read_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_655_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                read_addr_reg_1217 <= p_cast28_cast_fu_670_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                sub21_reg_1369 <= sub21_fu_899_p2;
                trunc_ln84_reg_1375 <= trunc_ln84_fu_904_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state42_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                trunc_ln128_reg_1329 <= trunc_ln128_fu_848_p1;
                trunc_ln137_3_reg_1334 <= numberNeurons_read_reg_1170(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                trunc_ln1_reg_1295 <= numberInputs_read_reg_1147(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                valuesToCopy_2_reg_1237 <= valuesToCopy_2_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                valuesToCopy_reg_1207 <= valuesToCopy_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op362_writeresp_state72 = ap_const_boolean_1) and (write_r_BVALID = ap_const_logic_0))) and (icmp_ln110_fu_1056_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                write_addr_1_reg_1514 <= p_cast34_cast_fu_1070_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_809_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                    zext_ln143_4_reg_1319(8 downto 1) <= zext_ln143_4_fu_843_p1(8 downto 1);
                    zext_ln143_reg_1309(8 downto 1) <= zext_ln143_fu_832_p1(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_1_fu_860_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    zext_ln143_5_reg_1349(6 downto 1) <= zext_ln143_5_fu_883_p1(6 downto 1);
                    zext_ln143_6_reg_1359(6 downto 1) <= zext_ln143_6_fu_894_p1(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_2_fu_954_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                    zext_ln143_7_reg_1430(6 downto 1) <= zext_ln143_7_fu_977_p1(6 downto 1);
                    zext_ln143_8_reg_1440(6 downto 1) <= zext_ln143_8_fu_988_p1(6 downto 1);
            end if;
        end if;
    end process;
    zext_ln143_reg_1309(0) <= '0';
    zext_ln143_reg_1309(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln143_4_reg_1319(0) <= '1';
    zext_ln143_4_reg_1319(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln143_5_reg_1349(0) <= '0';
    zext_ln143_5_reg_1349(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_6_reg_1359(0) <= '1';
    zext_ln143_6_reg_1359(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_7_reg_1430(0) <= '0';
    zext_ln143_7_reg_1430(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_8_reg_1440(0) <= '1';
    zext_ln143_8_reg_1440(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_CS_fsm_state25, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state14, ap_CS_fsm_state64, icmp_ln107_reg_1481, ap_enable_reg_pp6_iter2, ap_CS_fsm_state72, icmp_ln63_reg_1291, ap_CS_fsm_state73, ap_enable_reg_pp7_iter2, ap_CS_fsm_state81, icmp_ln110_reg_1510, read_r_ARREADY, write_r_AWREADY, write_r_BVALID, icmp_ln45_fu_615_p2, ap_CS_fsm_state2, icmp_ln53_fu_655_p2, exitcond316_fu_680_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, icmp_ln58_fu_705_p2, exitcond305_fu_730_p2, ap_enable_reg_pp1_iter0, icmp_ln61_fu_750_p2, ap_CS_fsm_state24, exitcond294_fu_774_p2, ap_enable_reg_pp2_iter0, icmp_ln63_fu_794_p2, ap_CS_fsm_state35, icmp_ln137_fu_809_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state42, grp_copyArray_float_2u_s_fu_603_ap_done, ap_block_state42_on_subcall_done, icmp_ln137_1_fu_860_p2, ap_enable_reg_pp4_iter0, ap_CS_fsm_state46, icmp_ln81_fu_907_p2, ap_CS_fsm_state53, ap_block_state53_on_subcall_done, icmp_ln137_2_fu_954_p2, ap_enable_reg_pp5_iter0, ap_CS_fsm_state62, ap_block_state62_on_subcall_done, ap_block_state64_io, exitcond272_fu_1036_p2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, icmp_ln110_fu_1056_p2, ap_predicate_op362_writeresp_state72, exitcond1_fu_1080_p2, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_CS_fsm_state55, ap_block_state55_on_subcall_done, ap_block_pp5_stage0_subdone, ap_block_pp6_stage0_subdone, ap_block_pp7_stage0_subdone, ap_CS_fsm_state36, ap_block_state36_on_subcall_done, ap_CS_fsm_state40, ap_block_state40_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln45_fu_615_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln45_fu_615_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln53_fu_655_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond316_fu_680_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond316_fu_680_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln58_fu_705_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond305_fu_730_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond305_fu_730_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln61_fu_750_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond294_fu_774_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond294_fu_774_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln63_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln137_fu_809_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln137_fu_809_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_boolean_0 = ap_block_state40_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_boolean_0 = ap_block_state42_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_1_fu_860_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_1_fu_860_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln81_fu_907_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((icmp_ln63_reg_1291 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                elsif (((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((ap_const_boolean_0 = ap_block_state55_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_2_fu_954_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_2_fu_954_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (((icmp_ln63_reg_1291 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state62_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                elsif (((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state62_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if ((not(((ap_const_boolean_1 = ap_block_state64_io) or (grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0))) and (icmp_ln107_reg_1481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state64_io) or (grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0))) and (icmp_ln107_reg_1481 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (exitcond272_fu_1036_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (exitcond272_fu_1036_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if ((not(((ap_predicate_op362_writeresp_state72 = ap_const_boolean_1) and (write_r_BVALID = ap_const_logic_0))) and (icmp_ln110_fu_1056_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                elsif ((not(((ap_predicate_op362_writeresp_state72 = ap_const_boolean_1) and (write_r_BVALID = ap_const_logic_0))) and (icmp_ln110_fu_1056_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                if (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (exitcond1_fu_1080_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (exitcond1_fu_1080_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                if ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1510 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln106_fu_998_p2 <= std_logic_vector(unsigned(numberInputs_read_reg_1147) + unsigned(mul_ln99_reg_1455));
    add_ln107_fu_1006_p2 <= std_logic_vector(unsigned(numberOutputs_read_reg_1190) + unsigned(add_ln106_reg_1465));
    add_ln137_1_fu_865_p2 <= std_logic_vector(unsigned(i_19_reg_509) + unsigned(ap_const_lv31_1));
    add_ln137_2_fu_959_p2 <= std_logic_vector(unsigned(i_20_reg_531) + unsigned(ap_const_lv31_1));
    add_ln137_fu_814_p2 <= std_logic_vector(unsigned(i_18_reg_498) + unsigned(ap_const_lv31_1));
    add_ln50_fu_629_p0 <= numberLayers;
    add_ln51_1_fu_641_p2 <= std_logic_vector(unsigned(numberInputs_read_reg_1147) + unsigned(mul_ln50_reg_1202));
    add_ln86_fu_912_p2 <= std_logic_vector(unsigned(i_reg_520) + unsigned(ap_const_lv32_1));
    add_ln92_fu_950_p2 <= std_logic_vector(unsigned(mul_ln86_reg_1395) + unsigned(trunc_ln45_reg_1158));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(30);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(35);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(55);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(62);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(26);
    ap_CS_fsm_state35 <= ap_CS_fsm(28);
    ap_CS_fsm_state36 <= ap_CS_fsm(29);
    ap_CS_fsm_state39 <= ap_CS_fsm(31);
    ap_CS_fsm_state40 <= ap_CS_fsm(32);
    ap_CS_fsm_state41 <= ap_CS_fsm(33);
    ap_CS_fsm_state42 <= ap_CS_fsm(34);
    ap_CS_fsm_state45 <= ap_CS_fsm(36);
    ap_CS_fsm_state46 <= ap_CS_fsm(37);
    ap_CS_fsm_state48 <= ap_CS_fsm(39);
    ap_CS_fsm_state49 <= ap_CS_fsm(40);
    ap_CS_fsm_state52 <= ap_CS_fsm(43);
    ap_CS_fsm_state53 <= ap_CS_fsm(44);
    ap_CS_fsm_state54 <= ap_CS_fsm(45);
    ap_CS_fsm_state55 <= ap_CS_fsm(46);
    ap_CS_fsm_state58 <= ap_CS_fsm(48);
    ap_CS_fsm_state61 <= ap_CS_fsm(51);
    ap_CS_fsm_state62 <= ap_CS_fsm(52);
    ap_CS_fsm_state63 <= ap_CS_fsm(53);
    ap_CS_fsm_state64 <= ap_CS_fsm(54);
    ap_CS_fsm_state72 <= ap_CS_fsm(60);
    ap_CS_fsm_state73 <= ap_CS_fsm(61);
    ap_CS_fsm_state81 <= ap_CS_fsm(67);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond316_reg_1223, read_r_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond316_reg_1223 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond316_reg_1223, read_r_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((read_r_RVALID = ap_const_logic_0) and (exitcond316_reg_1223 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond305_reg_1253, read_r_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond305_reg_1253 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond305_reg_1253, read_r_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((read_r_RVALID = ap_const_logic_0) and (exitcond305_reg_1253 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond294_reg_1277, read_r_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond294_reg_1277 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond294_reg_1277, read_r_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((read_r_RVALID = ap_const_logic_0) and (exitcond294_reg_1277 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state67_io)
    begin
                ap_block_pp6_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state67_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state67_io)
    begin
                ap_block_pp6_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state67_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage0_11001_assign_proc : process(ap_enable_reg_pp7_iter2, ap_block_state76_io)
    begin
                ap_block_pp7_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state76_io) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage0_subdone_assign_proc : process(ap_enable_reg_pp7_iter2, ap_block_state76_io)
    begin
                ap_block_pp7_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state76_io) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(exitcond316_reg_1223, read_r_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond316_reg_1223 = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage0_iter1_assign_proc : process(exitcond305_reg_1253, read_r_RVALID)
    begin
                ap_block_state22_pp1_stage0_iter1 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond305_reg_1253 = ap_const_lv1_0));
    end process;

        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_pp2_stage0_iter1_assign_proc : process(exitcond294_reg_1277, read_r_RVALID)
    begin
                ap_block_state33_pp2_stage0_iter1 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond294_reg_1277 = ap_const_lv1_0));
    end process;

        ap_block_state34_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_on_subcall_done_assign_proc : process(ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_ready, ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_done)
    begin
                ap_block_state36_on_subcall_done <= ((ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_ready and ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state37_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state40_on_subcall_done_assign_proc : process(ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_ready, ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_done)
    begin
                ap_block_state40_on_subcall_done <= ((ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_ready and ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state42_on_subcall_done_assign_proc : process(icmp_ln63_reg_1291, grp_copyArray_float_2u_s_fu_603_ap_done)
    begin
                ap_block_state42_on_subcall_done <= ((grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0) and (icmp_ln63_reg_1291 = ap_const_lv1_1));
    end process;

        ap_block_state43_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state53_on_subcall_done_assign_proc : process(ap_sync_grp_processLayer_float_2u_1u_s_fu_576_ap_ready, ap_sync_grp_processLayer_float_2u_1u_s_fu_576_ap_done)
    begin
                ap_block_state53_on_subcall_done <= ((ap_sync_grp_processLayer_float_2u_1u_s_fu_576_ap_ready and ap_sync_grp_processLayer_float_2u_1u_s_fu_576_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state55_on_subcall_done_assign_proc : process(icmp_ln63_reg_1291, grp_copyArray_float_2u_s_fu_603_ap_done)
    begin
                ap_block_state55_on_subcall_done <= ((grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0) and (icmp_ln63_reg_1291 = ap_const_lv1_1));
    end process;

        ap_block_state56_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state62_on_subcall_done_assign_proc : process(ap_sync_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready, ap_sync_grp_outputLayer_float_2u_1u_s_fu_589_ap_done)
    begin
                ap_block_state62_on_subcall_done <= ((ap_sync_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready and ap_sync_grp_outputLayer_float_2u_1u_s_fu_589_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state64_io_assign_proc : process(icmp_ln107_reg_1481, write_r_AWREADY)
    begin
                ap_block_state64_io <= ((write_r_AWREADY = ap_const_logic_0) and (icmp_ln107_reg_1481 = ap_const_lv1_0));
    end process;

        ap_block_state65_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state67_io_assign_proc : process(exitcond272_reg_1491_pp6_iter1_reg, write_r_WREADY)
    begin
                ap_block_state67_io <= ((write_r_WREADY = ap_const_logic_0) and (exitcond272_reg_1491_pp6_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state67_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state72_assign_proc : process(write_r_BVALID, ap_predicate_op362_writeresp_state72)
    begin
                ap_block_state72 <= ((ap_predicate_op362_writeresp_state72 = ap_const_boolean_1) and (write_r_BVALID = ap_const_logic_0));
    end process;

        ap_block_state74_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state76_io_assign_proc : process(exitcond1_reg_1520_pp7_iter1_reg, write_r_WREADY)
    begin
                ap_block_state76_io <= ((write_r_WREADY = ap_const_logic_0) and (exitcond1_reg_1520_pp7_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state76_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state81_assign_proc : process(icmp_ln110_reg_1510, write_r_BVALID)
    begin
                ap_block_state81 <= ((write_r_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1510 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond316_fu_680_p2)
    begin
        if ((exitcond316_fu_680_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(exitcond305_fu_730_p2)
    begin
        if ((exitcond305_fu_730_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state32_assign_proc : process(exitcond294_fu_774_p2)
    begin
        if ((exitcond294_fu_774_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state37_assign_proc : process(icmp_ln137_fu_809_p2)
    begin
        if ((icmp_ln137_fu_809_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state43_assign_proc : process(icmp_ln137_1_fu_860_p2)
    begin
        if ((icmp_ln137_1_fu_860_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state43 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state56_assign_proc : process(icmp_ln137_2_fu_954_p2)
    begin
        if ((icmp_ln137_2_fu_954_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state56 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state56 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state65_assign_proc : process(exitcond272_fu_1036_p2)
    begin
        if ((exitcond272_fu_1036_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state65 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state65 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state74_assign_proc : process(exitcond1_fu_1080_p2)
    begin
        if ((exitcond1_fu_1080_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state74 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state74 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state81, icmp_ln110_reg_1510, write_r_BVALID)
    begin
        if ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1510 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_loop_index11_phi_fu_490_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond294_reg_1277, loop_index11_reg_486, empty_143_reg_1281)
    begin
        if (((exitcond294_reg_1277 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_loop_index11_phi_fu_490_p4 <= empty_143_reg_1281;
        else 
            ap_phi_mux_loop_index11_phi_fu_490_p4 <= loop_index11_reg_486;
        end if; 
    end process;


    ap_phi_mux_loop_index17_phi_fu_478_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond305_reg_1253, loop_index17_reg_474, empty_140_reg_1257)
    begin
        if (((exitcond305_reg_1253 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_loop_index17_phi_fu_478_p4 <= empty_140_reg_1257;
        else 
            ap_phi_mux_loop_index17_phi_fu_478_p4 <= loop_index17_reg_474;
        end if; 
    end process;


    ap_phi_mux_loop_index23_phi_fu_466_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond316_reg_1223, loop_index23_reg_462, empty_138_reg_1227)
    begin
        if (((exitcond316_reg_1223 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_loop_index23_phi_fu_466_p4 <= empty_138_reg_1227;
        else 
            ap_phi_mux_loop_index23_phi_fu_466_p4 <= loop_index23_reg_462;
        end if; 
    end process;


    ap_predicate_op362_writeresp_state72_assign_proc : process(icmp_ln107_reg_1481, icmp_ln63_reg_1291)
    begin
                ap_predicate_op362_writeresp_state72 <= ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (icmp_ln107_reg_1481 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state81, icmp_ln110_reg_1510, write_r_BVALID)
    begin
        if ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1510 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_outputLayer_float_2u_1u_s_fu_589_ap_done <= (grp_outputLayer_float_2u_1u_s_fu_589_ap_done or ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_done);
    ap_sync_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready <= (grp_outputLayer_float_2u_1u_s_fu_589_ap_ready or ap_sync_reg_grp_outputLayer_float_2u_1u_s_fu_589_ap_ready);
    ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_done <= (grp_processLayer_float_2u_1u_1_fu_564_ap_done or ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_done);
    ap_sync_grp_processLayer_float_2u_1u_1_fu_564_ap_ready <= (grp_processLayer_float_2u_1u_1_fu_564_ap_ready or ap_sync_reg_grp_processLayer_float_2u_1u_1_fu_564_ap_ready);
    ap_sync_grp_processLayer_float_2u_1u_s_fu_576_ap_done <= (grp_processLayer_float_2u_1u_s_fu_576_ap_done or ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_done);
    ap_sync_grp_processLayer_float_2u_1u_s_fu_576_ap_ready <= (grp_processLayer_float_2u_1u_s_fu_576_ap_ready or ap_sync_reg_grp_processLayer_float_2u_1u_s_fu_576_ap_ready);

    bramBias_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state53, ap_CS_fsm_state62, ap_enable_reg_pp1_iter2, grp_processLayer_float_2u_1u_1_fu_564_p_bias_address0, grp_processLayer_float_2u_1u_s_fu_576_p_bias_address0, grp_outputLayer_float_2u_1u_s_fu_589_p_bias_address0, ap_CS_fsm_state36, ap_CS_fsm_state40, loop_index17_cast_fu_741_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_address0 <= loop_index17_cast_fu_741_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            bramBias_address0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_bias_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBias_address0 <= grp_processLayer_float_2u_1u_s_fu_576_p_bias_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            bramBias_address0 <= grp_processLayer_float_2u_1u_1_fu_564_p_bias_address0;
        else 
            bramBias_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramBias_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state53, ap_CS_fsm_state62, ap_enable_reg_pp1_iter2, grp_processLayer_float_2u_1u_1_fu_564_p_bias_ce0, grp_processLayer_float_2u_1u_s_fu_576_p_bias_ce0, grp_outputLayer_float_2u_1u_s_fu_589_p_bias_ce0, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            bramBias_ce0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_bias_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBias_ce0 <= grp_processLayer_float_2u_1u_s_fu_576_p_bias_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            bramBias_ce0 <= grp_processLayer_float_2u_1u_1_fu_564_p_bias_ce0;
        else 
            bramBias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bramBias_d0 <= read_addr_1_read_reg_1262;

    bramBias_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond305_reg_1253_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((exitcond305_reg_1253_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_we0 <= ap_const_logic_1;
        else 
            bramBias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramLayerResults_address0_assign_proc : process(ap_CS_fsm_state64, ap_block_pp6_stage0, icmp_ln63_reg_1291, ap_CS_fsm_pp3_stage0, zext_ln143_4_reg_1319, ap_CS_fsm_state42, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state55, grp_copyArray_float_2u_s_fu_603_p_output_address0, ap_block_pp3_stage0, loop_index5_cast_fu_1047_p1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            bramLayerResults_address0 <= loop_index5_cast_fu_1047_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            bramLayerResults_address0 <= zext_ln143_4_reg_1319(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            bramLayerResults_address0 <= grp_copyArray_float_2u_s_fu_603_p_output_address0;
        else 
            bramLayerResults_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    bramLayerResults_address1 <= zext_ln143_reg_1309(9 - 1 downto 0);

    bramLayerResults_ce0_assign_proc : process(ap_CS_fsm_state64, icmp_ln63_reg_1291, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state42, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state55, grp_copyArray_float_2u_s_fu_603_p_output_ce0)
    begin
        if ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)))) then 
            bramLayerResults_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            bramLayerResults_ce0 <= grp_copyArray_float_2u_s_fu_603_p_output_ce0;
        else 
            bramLayerResults_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramLayerResults_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            bramLayerResults_ce1 <= ap_const_logic_1;
        else 
            bramLayerResults_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramLayerResults_d0_assign_proc : process(ap_CS_fsm_state64, icmp_ln63_reg_1291, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state42, ap_enable_reg_pp3_iter1, ap_CS_fsm_state55, inputData_q0, grp_copyArray_float_2u_s_fu_603_p_output_d0, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            bramLayerResults_d0 <= inputData_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            bramLayerResults_d0 <= grp_copyArray_float_2u_s_fu_603_p_output_d0;
        else 
            bramLayerResults_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramLayerResults_we0_assign_proc : process(ap_CS_fsm_state64, icmp_ln63_reg_1291, icmp_ln137_reg_1300, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state42, ap_enable_reg_pp3_iter1, ap_CS_fsm_state55, grp_copyArray_float_2u_s_fu_603_p_output_we0)
    begin
        if (((icmp_ln137_reg_1300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            bramLayerResults_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            bramLayerResults_we0 <= grp_copyArray_float_2u_s_fu_603_p_output_we0;
        else 
            bramLayerResults_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramLayerResults_we1_assign_proc : process(icmp_ln137_reg_1300, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((icmp_ln137_reg_1300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            bramLayerResults_we1 <= ap_const_logic_1;
        else 
            bramLayerResults_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state53, ap_CS_fsm_state62, ap_enable_reg_pp0_iter2, grp_processLayer_float_2u_1u_1_fu_564_p_weights_address0, grp_processLayer_float_2u_1u_s_fu_576_p_weights_address0, grp_outputLayer_float_2u_1u_s_fu_589_p_weights_address0, ap_CS_fsm_state36, ap_CS_fsm_state40, loop_index23_cast_fu_691_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_address0 <= loop_index23_cast_fu_691_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            bramWeight_address0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_weights_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeight_address0 <= grp_processLayer_float_2u_1u_s_fu_576_p_weights_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            bramWeight_address0 <= grp_processLayer_float_2u_1u_1_fu_564_p_weights_address0;
        else 
            bramWeight_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeight_address1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state62, grp_processLayer_float_2u_1u_1_fu_564_p_weights_address1, grp_processLayer_float_2u_1u_s_fu_576_p_weights_address1, grp_outputLayer_float_2u_1u_s_fu_589_p_weights_address1, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            bramWeight_address1 <= grp_outputLayer_float_2u_1u_s_fu_589_p_weights_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeight_address1 <= grp_processLayer_float_2u_1u_s_fu_576_p_weights_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            bramWeight_address1 <= grp_processLayer_float_2u_1u_1_fu_564_p_weights_address1;
        else 
            bramWeight_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeight_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state53, ap_CS_fsm_state62, ap_enable_reg_pp0_iter2, grp_processLayer_float_2u_1u_1_fu_564_p_weights_ce0, grp_processLayer_float_2u_1u_s_fu_576_p_weights_ce0, grp_outputLayer_float_2u_1u_s_fu_589_p_weights_ce0, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            bramWeight_ce0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_weights_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeight_ce0 <= grp_processLayer_float_2u_1u_s_fu_576_p_weights_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            bramWeight_ce0 <= grp_processLayer_float_2u_1u_1_fu_564_p_weights_ce0;
        else 
            bramWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_ce1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state62, grp_processLayer_float_2u_1u_1_fu_564_p_weights_ce1, grp_processLayer_float_2u_1u_s_fu_576_p_weights_ce1, grp_outputLayer_float_2u_1u_s_fu_589_p_weights_ce1, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            bramWeight_ce1 <= grp_outputLayer_float_2u_1u_s_fu_589_p_weights_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeight_ce1 <= grp_processLayer_float_2u_1u_s_fu_576_p_weights_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            bramWeight_ce1 <= grp_processLayer_float_2u_1u_1_fu_564_p_weights_ce1;
        else 
            bramWeight_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bramWeight_d0 <= read_addr_read_reg_1232;

    bramWeight_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond316_reg_1223_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((exitcond316_reg_1223_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_we0 <= ap_const_logic_1;
        else 
            bramWeight_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_138_fu_685_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index23_phi_fu_466_p4) + unsigned(ap_const_lv32_1));
    empty_140_fu_735_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index17_phi_fu_478_p4) + unsigned(ap_const_lv32_1));
    empty_143_fu_779_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index11_phi_fu_490_p4) + unsigned(ap_const_lv32_1));
    empty_145_fu_820_p1 <= i_18_reg_498(8 - 1 downto 0);
    empty_146_fu_871_p1 <= i_19_reg_509(6 - 1 downto 0);
    empty_147_fu_965_p1 <= i_20_reg_531(6 - 1 downto 0);
    empty_149_fu_1041_p2 <= std_logic_vector(unsigned(loop_index5_reg_542) + unsigned(ap_const_lv32_1));
    empty_150_fu_1052_p1 <= bramLayerResults_load_reg_1505;
    empty_153_fu_1085_p2 <= std_logic_vector(unsigned(loop_index_reg_553) + unsigned(ap_const_lv32_1));
    empty_154_fu_1096_p1 <= layerBuffer0_load_4_reg_1534;
    exitcond1_fu_1080_p2 <= "1" when (loop_index_reg_553 = numberOutputs_read_reg_1190) else "0";
    exitcond272_fu_1036_p2 <= "1" when (loop_index5_reg_542 = add_ln107_reg_1475) else "0";
    exitcond294_fu_774_p2 <= "1" when (ap_phi_mux_loop_index11_phi_fu_490_p4 = numberInputs_read_reg_1147) else "0";
    exitcond305_fu_730_p2 <= "1" when (ap_phi_mux_loop_index17_phi_fu_478_p4 = valuesToCopy_2_reg_1237) else "0";
    exitcond316_fu_680_p2 <= "1" when (ap_phi_mux_loop_index23_phi_fu_466_p4 = valuesToCopy_reg_1207) else "0";
    grp_copyArray_float_2u_s_fu_603_ap_start <= grp_copyArray_float_2u_s_fu_603_ap_start_reg;

    grp_copyArray_float_2u_s_fu_603_p_output_offset_assign_proc : process(ap_CS_fsm_state64, icmp_ln63_reg_1291, trunc_ln45_reg_1158, ap_CS_fsm_state42, add_ln92_reg_1416, trunc_ln106_reg_1470, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_copyArray_float_2u_s_fu_603_p_output_offset <= trunc_ln106_reg_1470;
        elsif (((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_copyArray_float_2u_s_fu_603_p_output_offset <= add_ln92_reg_1416;
        elsif (((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            grp_copyArray_float_2u_s_fu_603_p_output_offset <= trunc_ln45_reg_1158;
        else 
            grp_copyArray_float_2u_s_fu_603_p_output_offset <= "XXXXXXXXX";
        end if; 
    end process;


    grp_copyArray_float_2u_s_fu_603_size_assign_proc : process(ap_CS_fsm_state64, icmp_ln63_reg_1291, numberNeurons_read_reg_1170, numberOutputs_read_reg_1190, ap_CS_fsm_state42, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_copyArray_float_2u_s_fu_603_size <= numberOutputs_read_reg_1190;
        elsif ((((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            grp_copyArray_float_2u_s_fu_603_size <= numberNeurons_read_reg_1170;
        else 
            grp_copyArray_float_2u_s_fu_603_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1100_p1 <= i_reg_520(16 - 1 downto 0);
    grp_fu_1106_p0 <= std_logic_vector(unsigned(trunc_ln97_fu_941_p1) + unsigned(trunc_ln45_1_reg_1164));

    grp_outputLayer_float_2u_1u_s_fu_589_ap_continue_assign_proc : process(ap_CS_fsm_state62, ap_block_state62_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state62_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            grp_outputLayer_float_2u_1u_s_fu_589_ap_continue <= ap_const_logic_1;
        else 
            grp_outputLayer_float_2u_1u_s_fu_589_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_outputLayer_float_2u_1u_s_fu_589_ap_start <= grp_outputLayer_float_2u_1u_s_fu_589_ap_start_reg;

    grp_processLayer_float_2u_1u_1_fu_564_ap_continue_assign_proc : process(ap_CS_fsm_state36, ap_block_state36_on_subcall_done, ap_CS_fsm_state40, ap_block_state40_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state40_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
            grp_processLayer_float_2u_1u_1_fu_564_ap_continue <= ap_const_logic_1;
        else 
            grp_processLayer_float_2u_1u_1_fu_564_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_processLayer_float_2u_1u_1_fu_564_ap_start <= grp_processLayer_float_2u_1u_1_fu_564_ap_start_reg;

    grp_processLayer_float_2u_1u_s_fu_576_ap_continue_assign_proc : process(ap_CS_fsm_state53, ap_block_state53_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_processLayer_float_2u_1u_s_fu_576_ap_continue <= ap_const_logic_1;
        else 
            grp_processLayer_float_2u_1u_s_fu_576_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_processLayer_float_2u_1u_s_fu_576_ap_start <= grp_processLayer_float_2u_1u_s_fu_576_ap_start_reg;
    icmp_ln107_fu_1010_p2 <= "1" when (add_ln107_fu_1006_p2 = ap_const_lv32_0) else "0";
    icmp_ln110_fu_1056_p2 <= "1" when (numberOutputs_read_reg_1190 = ap_const_lv32_0) else "0";
    icmp_ln137_1_fu_860_p2 <= "1" when (i_19_reg_509 = trunc_ln137_3_reg_1334) else "0";
    icmp_ln137_2_fu_954_p2 <= "1" when (i_20_reg_531 = trunc_ln137_3_reg_1334) else "0";
    icmp_ln137_fu_809_p2 <= "1" when (i_18_reg_498 = trunc_ln1_reg_1295) else "0";
    icmp_ln45_fu_615_p2 <= "1" when (loadParameters = ap_const_lv32_0) else "0";
    icmp_ln53_fu_655_p2 <= "1" when (valuesToCopy_fu_650_p2 = ap_const_lv32_0) else "0";
    icmp_ln58_fu_705_p2 <= "1" when (valuesToCopy_2_fu_700_p2 = ap_const_lv32_0) else "0";
    icmp_ln61_fu_750_p2 <= "1" when (numberInputs_read_reg_1147 = ap_const_lv32_0) else "0";
    icmp_ln63_fu_794_p2 <= "0" when (exportLayers = ap_const_lv32_0) else "1";
    icmp_ln81_fu_907_p2 <= "1" when (i_reg_520 = sub21_reg_1369) else "0";

    inputData_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, zext_ln143_4_fu_843_p1, ap_enable_reg_pp2_iter2, grp_processLayer_float_2u_1u_1_fu_564_p_input_address0, ap_CS_fsm_state36, ap_CS_fsm_state40, loop_index11_cast_fu_785_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            inputData_address0 <= zext_ln143_4_fu_843_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            inputData_address0 <= loop_index11_cast_fu_785_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            inputData_address0 <= grp_processLayer_float_2u_1u_1_fu_564_p_input_address0;
        else 
            inputData_address0 <= "XXXXX";
        end if; 
    end process;


    inputData_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, zext_ln143_fu_832_p1, grp_processLayer_float_2u_1u_1_fu_564_p_input_address1, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            inputData_address1 <= zext_ln143_fu_832_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            inputData_address1 <= grp_processLayer_float_2u_1u_1_fu_564_p_input_address1;
        else 
            inputData_address1 <= "XXXXX";
        end if; 
    end process;


    inputData_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter2, grp_processLayer_float_2u_1u_1_fu_564_p_input_ce0, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            inputData_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            inputData_ce0 <= grp_processLayer_float_2u_1u_1_fu_564_p_input_ce0;
        else 
            inputData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputData_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, grp_processLayer_float_2u_1u_1_fu_564_p_input_ce1, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            inputData_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            inputData_ce1 <= grp_processLayer_float_2u_1u_1_fu_564_p_input_ce1;
        else 
            inputData_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    inputData_d0 <= read_addr_2_read_reg_1286;

    inputData_we0_assign_proc : process(ap_block_pp2_stage0_11001, exitcond294_reg_1277_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((exitcond294_reg_1277_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            inputData_we0 <= ap_const_logic_1;
        else 
            inputData_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer0_address0_assign_proc : process(ap_CS_fsm_state64, icmp_ln63_reg_1291, ap_block_pp7_stage0, ap_CS_fsm_state42, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln143_6_fu_894_p1, ap_CS_fsm_state53, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln143_8_fu_988_p1, ap_CS_fsm_state62, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_CS_fsm_state55, grp_processLayer_float_2u_1u_1_fu_564_p_output_address0, grp_processLayer_float_2u_1u_s_fu_576_p_output_address0, grp_outputLayer_float_2u_1u_s_fu_589_p_output_address0, grp_copyArray_float_2u_s_fu_603_p_input_address0, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_block_pp4_stage0, ap_block_pp5_stage0, loop_index_cast_fu_1091_p1)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            layerBuffer0_address0 <= loop_index_cast_fu_1091_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            layerBuffer0_address0 <= zext_ln143_8_fu_988_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            layerBuffer0_address0 <= zext_ln143_6_fu_894_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            layerBuffer0_address0 <= grp_copyArray_float_2u_s_fu_603_p_input_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layerBuffer0_address0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer0_address0 <= grp_processLayer_float_2u_1u_s_fu_576_p_output_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            layerBuffer0_address0 <= grp_processLayer_float_2u_1u_1_fu_564_p_output_address0;
        else 
            layerBuffer0_address0 <= "XXXXXXX";
        end if; 
    end process;


    layerBuffer0_address1_assign_proc : process(ap_CS_fsm_state64, icmp_ln63_reg_1291, ap_CS_fsm_state42, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln143_5_fu_883_p1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln143_7_fu_977_p1, ap_CS_fsm_state55, grp_copyArray_float_2u_s_fu_603_p_input_address1, ap_block_pp4_stage0, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            layerBuffer0_address1 <= zext_ln143_7_fu_977_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            layerBuffer0_address1 <= zext_ln143_5_fu_883_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            layerBuffer0_address1 <= grp_copyArray_float_2u_s_fu_603_p_input_address1;
        else 
            layerBuffer0_address1 <= "XXXXXXX";
        end if; 
    end process;


    layerBuffer0_ce0_assign_proc : process(ap_CS_fsm_state64, icmp_ln63_reg_1291, ap_CS_fsm_state42, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_state53, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_state62, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0, ap_CS_fsm_state55, grp_processLayer_float_2u_1u_1_fu_564_p_output_ce0, grp_processLayer_float_2u_1u_s_fu_576_p_output_ce0, grp_outputLayer_float_2u_1u_s_fu_589_p_output_ce0, grp_copyArray_float_2u_s_fu_603_p_input_ce0, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if ((((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            layerBuffer0_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            layerBuffer0_ce0 <= grp_copyArray_float_2u_s_fu_603_p_input_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layerBuffer0_ce0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer0_ce0 <= grp_processLayer_float_2u_1u_s_fu_576_p_output_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            layerBuffer0_ce0 <= grp_processLayer_float_2u_1u_1_fu_564_p_output_ce0;
        else 
            layerBuffer0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer0_ce1_assign_proc : process(ap_CS_fsm_state64, icmp_ln63_reg_1291, ap_CS_fsm_state42, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_state55, grp_copyArray_float_2u_s_fu_603_p_input_ce1)
    begin
        if ((((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            layerBuffer0_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)))) then 
            layerBuffer0_ce1 <= grp_copyArray_float_2u_s_fu_603_p_input_ce1;
        else 
            layerBuffer0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer0_d0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state62, grp_processLayer_float_2u_1u_1_fu_564_p_output_d0, grp_processLayer_float_2u_1u_s_fu_576_p_output_d0, grp_outputLayer_float_2u_1u_s_fu_589_p_output_d0, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layerBuffer0_d0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_output_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer0_d0 <= grp_processLayer_float_2u_1u_s_fu_576_p_output_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            layerBuffer0_d0 <= grp_processLayer_float_2u_1u_1_fu_564_p_output_d0;
        else 
            layerBuffer0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layerBuffer0_we0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state62, grp_processLayer_float_2u_1u_1_fu_564_p_output_we0, grp_processLayer_float_2u_1u_s_fu_576_p_output_we0, grp_outputLayer_float_2u_1u_s_fu_589_p_output_we0, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layerBuffer0_we0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_output_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer0_we0 <= grp_processLayer_float_2u_1u_s_fu_576_p_output_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            layerBuffer0_we0 <= grp_processLayer_float_2u_1u_1_fu_564_p_output_we0;
        else 
            layerBuffer0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer1_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, zext_ln143_6_reg_1359, ap_CS_fsm_state53, ap_CS_fsm_pp5_stage0, zext_ln143_8_reg_1440, ap_CS_fsm_state62, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, grp_processLayer_float_2u_1u_s_fu_576_p_input_address0, grp_outputLayer_float_2u_1u_s_fu_589_p_input_address0, ap_block_pp4_stage0, ap_block_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            layerBuffer1_address0 <= zext_ln143_8_reg_1440(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            layerBuffer1_address0 <= zext_ln143_6_reg_1359(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layerBuffer1_address0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_input_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer1_address0 <= grp_processLayer_float_2u_1u_s_fu_576_p_input_address0;
        else 
            layerBuffer1_address0 <= "XXXXXXX";
        end if; 
    end process;


    layerBuffer1_address1_assign_proc : process(ap_CS_fsm_pp4_stage0, zext_ln143_5_reg_1349, ap_CS_fsm_state53, ap_CS_fsm_pp5_stage0, zext_ln143_7_reg_1430, ap_CS_fsm_state62, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, grp_processLayer_float_2u_1u_s_fu_576_p_input_address1, grp_outputLayer_float_2u_1u_s_fu_589_p_input_address1, ap_block_pp4_stage0, ap_block_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            layerBuffer1_address1 <= zext_ln143_7_reg_1430(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            layerBuffer1_address1 <= zext_ln143_5_reg_1349(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layerBuffer1_address1 <= grp_outputLayer_float_2u_1u_s_fu_589_p_input_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer1_address1 <= grp_processLayer_float_2u_1u_s_fu_576_p_input_address1;
        else 
            layerBuffer1_address1 <= "XXXXXXX";
        end if; 
    end process;


    layerBuffer1_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state53, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state62, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, grp_processLayer_float_2u_1u_s_fu_576_p_input_ce0, grp_outputLayer_float_2u_1u_s_fu_589_p_input_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            layerBuffer1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layerBuffer1_ce0 <= grp_outputLayer_float_2u_1u_s_fu_589_p_input_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer1_ce0 <= grp_processLayer_float_2u_1u_s_fu_576_p_input_ce0;
        else 
            layerBuffer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer1_ce1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state53, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state62, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, grp_processLayer_float_2u_1u_s_fu_576_p_input_ce1, grp_outputLayer_float_2u_1u_s_fu_589_p_input_ce1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            layerBuffer1_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layerBuffer1_ce1 <= grp_outputLayer_float_2u_1u_s_fu_589_p_input_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer1_ce1 <= grp_processLayer_float_2u_1u_s_fu_576_p_input_ce1;
        else 
            layerBuffer1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer1_we0_assign_proc : process(icmp_ln137_1_reg_1340, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln137_2_reg_1421, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1)
    begin
        if ((((icmp_ln137_2_reg_1421 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((icmp_ln137_1_reg_1340 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            layerBuffer1_we0 <= ap_const_logic_1;
        else 
            layerBuffer1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer1_we1_assign_proc : process(icmp_ln137_1_reg_1340, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln137_2_reg_1421, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1)
    begin
        if ((((icmp_ln137_2_reg_1421 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((icmp_ln137_1_reg_1340 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            layerBuffer1_we1 <= ap_const_logic_1;
        else 
            layerBuffer1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    loop_index11_cast_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index11_reg_486_pp2_iter1_reg),64));
    loop_index17_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index17_reg_474_pp1_iter1_reg),64));
    loop_index23_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index23_reg_462_pp0_iter1_reg),64));
    loop_index5_cast_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index5_reg_542),64));
    loop_index_cast_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_553),64));
    mul_ln50_fu_635_p1 <= std_logic_vector(signed(add_ln50_fu_629_p0) + signed(ap_const_lv32_FFFFFFFF));
    mul_ln86_fu_932_p1 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(trunc_ln84_2_fu_922_p1));
    or_ln143_1_fu_888_p2 <= (tmp_s_fu_875_p3 or ap_const_lv7_1);
    or_ln143_2_fu_982_p2 <= (tmp_1_fu_969_p3 or ap_const_lv7_1);
    or_ln143_fu_837_p2 <= (tmp_8_fu_824_p3 or ap_const_lv9_1);
    p_cast1_fu_661_p4 <= axiWeightInput_read_reg_1128(63 downto 2);
        p_cast28_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast1_fu_661_p4),64));

        p_cast29_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_fu_711_p4),64));

    p_cast2_fu_711_p4 <= axiBiasInput_read_reg_1123(63 downto 2);
        p_cast33_cast_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast3_fu_1016_p4),64));

        p_cast34_cast_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast4_fu_1061_p4),64));

    p_cast3_fu_1016_p4 <= axiLayerOutput_read_reg_1118(63 downto 2);
    p_cast4_fu_1061_p4 <= output_read_reg_1133(63 downto 2);
        p_cast_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_755_p4),64));

    p_cast_fu_755_p4 <= input_read_reg_1138(63 downto 2);

    read_r_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14, read_r_ARREADY, read_addr_reg_1217, read_addr_1_reg_1247, read_addr_2_reg_1271)
    begin
        if ((read_r_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                read_r_ARADDR <= read_addr_2_reg_1271;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                read_r_ARADDR <= read_addr_1_reg_1247;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                read_r_ARADDR <= read_addr_reg_1217;
            else 
                read_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            read_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    read_r_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14, read_r_ARREADY, numberInputs_read_reg_1147, valuesToCopy_reg_1207, valuesToCopy_2_reg_1237)
    begin
        if ((read_r_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                read_r_ARLEN <= numberInputs_read_reg_1147;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                read_r_ARLEN <= valuesToCopy_2_reg_1237;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                read_r_ARLEN <= valuesToCopy_reg_1207;
            else 
                read_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            read_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    read_r_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14, read_r_ARREADY)
    begin
        if ((((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            read_r_ARVALID <= ap_const_logic_1;
        else 
            read_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    read_r_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond316_reg_1223, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond294_reg_1277, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond305_reg_1253, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((exitcond305_reg_1253 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond294_reg_1277 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond316_reg_1223 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            read_r_RREADY <= ap_const_logic_1;
        else 
            read_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    read_r_blk_n_AR_assign_proc : process(m_axi_read_r_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            read_r_blk_n_AR <= m_axi_read_r_ARREADY;
        else 
            read_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    read_r_blk_n_R_assign_proc : process(m_axi_read_r_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond316_reg_1223, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond294_reg_1277, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond305_reg_1253)
    begin
        if ((((exitcond305_reg_1253 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond294_reg_1277 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond316_reg_1223 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            read_r_blk_n_R <= m_axi_read_r_RVALID;
        else 
            read_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    sub21_fu_899_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(numberLayers_read_reg_1184));
    tmp_1_fu_969_p3 <= (empty_147_fu_965_p1 & ap_const_lv1_0);
    tmp_8_fu_824_p3 <= (empty_145_fu_820_p1 & ap_const_lv1_0);
    tmp_s_fu_875_p3 <= (empty_146_fu_871_p1 & ap_const_lv1_0);
    trunc_ln101_fu_993_p1 <= grp_fu_611_p2(9 - 1 downto 0);
    trunc_ln106_fu_1002_p1 <= add_ln106_fu_998_p2(9 - 1 downto 0);
    trunc_ln128_fu_848_p1 <= numberNeurons_read_reg_1170(9 - 1 downto 0);
    trunc_ln45_1_fu_625_p1 <= numberInputs(16 - 1 downto 0);
    trunc_ln45_fu_621_p1 <= numberInputs(9 - 1 downto 0);
    trunc_ln84_2_fu_922_p1 <= i_reg_520(9 - 1 downto 0);
    trunc_ln84_fu_904_p1 <= numberNeurons_read_reg_1170(16 - 1 downto 0);
    trunc_ln97_fu_941_p1 <= mul_ln97_fu_937_p2(16 - 1 downto 0);
    valuesToCopy_2_fu_700_p2 <= std_logic_vector(unsigned(numberOutputs_read_reg_1190) + unsigned(grp_fu_611_p2));
    valuesToCopy_fu_650_p1 <= std_logic_vector(unsigned(add_ln51_1_fu_641_p2) + unsigned(numberOutputs_read_reg_1190));

    write_r_AWADDR_assign_proc : process(ap_CS_fsm_state64, icmp_ln107_reg_1481, ap_CS_fsm_state73, write_r_AWREADY, grp_copyArray_float_2u_s_fu_603_ap_done, ap_block_state64_io, write_addr_1_reg_1514, p_cast33_cast_fu_1025_p1)
    begin
        if (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            write_r_AWADDR <= write_addr_1_reg_1514;
        elsif ((not(((ap_const_boolean_1 = ap_block_state64_io) or (grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0))) and (icmp_ln107_reg_1481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            write_r_AWADDR <= p_cast33_cast_fu_1025_p1(32 - 1 downto 0);
        else 
            write_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    write_r_AWLEN_assign_proc : process(ap_CS_fsm_state64, icmp_ln107_reg_1481, ap_CS_fsm_state73, write_r_AWREADY, numberOutputs_read_reg_1190, grp_copyArray_float_2u_s_fu_603_ap_done, add_ln107_reg_1475, ap_block_state64_io)
    begin
        if (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            write_r_AWLEN <= numberOutputs_read_reg_1190;
        elsif ((not(((ap_const_boolean_1 = ap_block_state64_io) or (grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0))) and (icmp_ln107_reg_1481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            write_r_AWLEN <= add_ln107_reg_1475;
        else 
            write_r_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    write_r_AWVALID_assign_proc : process(ap_CS_fsm_state64, icmp_ln107_reg_1481, ap_CS_fsm_state73, write_r_AWREADY, grp_copyArray_float_2u_s_fu_603_ap_done, ap_block_state64_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state64_io) or (grp_copyArray_float_2u_s_fu_603_ap_done = ap_const_logic_0))) and (icmp_ln107_reg_1481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73)))) then 
            write_r_AWVALID <= ap_const_logic_1;
        else 
            write_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    write_r_BREADY_assign_proc : process(ap_CS_fsm_state72, ap_CS_fsm_state81, icmp_ln110_reg_1510, write_r_BVALID, ap_predicate_op362_writeresp_state72)
    begin
        if (((not(((ap_predicate_op362_writeresp_state72 = ap_const_boolean_1) and (write_r_BVALID = ap_const_logic_0))) and (ap_predicate_op362_writeresp_state72 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state72)) or (not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1510 = ap_const_lv1_0))) and (icmp_ln110_reg_1510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state81)))) then 
            write_r_BREADY <= ap_const_logic_1;
        else 
            write_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    write_r_WDATA_assign_proc : process(ap_enable_reg_pp6_iter2, exitcond272_reg_1491_pp6_iter1_reg, ap_enable_reg_pp7_iter2, exitcond1_reg_1520_pp7_iter1_reg, empty_150_fu_1052_p1, ap_block_pp6_stage0_01001, empty_154_fu_1096_p1, ap_block_pp7_stage0_01001)
    begin
        if (((exitcond1_reg_1520_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_01001))) then 
            write_r_WDATA <= empty_154_fu_1096_p1;
        elsif (((exitcond272_reg_1491_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_01001))) then 
            write_r_WDATA <= empty_150_fu_1052_p1;
        else 
            write_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    write_r_WVALID_assign_proc : process(ap_enable_reg_pp6_iter2, exitcond272_reg_1491_pp6_iter1_reg, ap_enable_reg_pp7_iter2, exitcond1_reg_1520_pp7_iter1_reg, ap_block_pp6_stage0_11001, ap_block_pp7_stage0_11001)
    begin
        if ((((exitcond1_reg_1520_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)) or ((exitcond272_reg_1491_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)))) then 
            write_r_WVALID <= ap_const_logic_1;
        else 
            write_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    write_r_blk_n_AW_assign_proc : process(m_axi_write_r_AWREADY, ap_CS_fsm_state64, icmp_ln107_reg_1481, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or ((icmp_ln107_reg_1481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64)))) then 
            write_r_blk_n_AW <= m_axi_write_r_AWREADY;
        else 
            write_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    write_r_blk_n_B_assign_proc : process(m_axi_write_r_BVALID, icmp_ln107_reg_1481, ap_CS_fsm_state72, icmp_ln63_reg_1291, ap_CS_fsm_state81, icmp_ln110_reg_1510)
    begin
        if ((((icmp_ln110_reg_1510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((icmp_ln63_reg_1291 = ap_const_lv1_1) and (icmp_ln107_reg_1481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72)))) then 
            write_r_blk_n_B <= m_axi_write_r_BVALID;
        else 
            write_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    write_r_blk_n_W_assign_proc : process(m_axi_write_r_WREADY, ap_enable_reg_pp6_iter2, ap_block_pp6_stage0, exitcond272_reg_1491_pp6_iter1_reg, ap_enable_reg_pp7_iter2, ap_block_pp7_stage0, exitcond1_reg_1520_pp7_iter1_reg)
    begin
        if ((((exitcond1_reg_1520_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0)) or ((exitcond272_reg_1491_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0)))) then 
            write_r_blk_n_W <= m_axi_write_r_WREADY;
        else 
            write_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln143_4_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_fu_837_p2),64));
    zext_ln143_5_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_875_p3),64));
    zext_ln143_6_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_1_fu_888_p2),64));
    zext_ln143_7_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_969_p3),64));
    zext_ln143_8_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_2_fu_982_p2),64));
    zext_ln143_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_824_p3),64));
end behav;
