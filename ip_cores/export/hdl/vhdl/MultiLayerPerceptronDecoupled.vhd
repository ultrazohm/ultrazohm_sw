-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MultiLayerPerceptronDecoupled is
generic (
    C_M_AXI_AXI_READ_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_READ_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_READ_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_WRITE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_WRITE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONFIGURATION_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONFIGURATION_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_READ_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_READ_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_READ_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_AXI_WRITE_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_WRITE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_WRITE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_axi_read_AWVALID : OUT STD_LOGIC;
    m_axi_axi_read_AWREADY : IN STD_LOGIC;
    m_axi_axi_read_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ADDR_WIDTH-1 downto 0);
    m_axi_axi_read_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_read_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_AWUSER_WIDTH-1 downto 0);
    m_axi_axi_read_WVALID : OUT STD_LOGIC;
    m_axi_axi_read_WREADY : IN STD_LOGIC;
    m_axi_axi_read_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_DATA_WIDTH-1 downto 0);
    m_axi_axi_read_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_DATA_WIDTH/8-1 downto 0);
    m_axi_axi_read_WLAST : OUT STD_LOGIC;
    m_axi_axi_read_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_WUSER_WIDTH-1 downto 0);
    m_axi_axi_read_ARVALID : OUT STD_LOGIC;
    m_axi_axi_read_ARREADY : IN STD_LOGIC;
    m_axi_axi_read_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ADDR_WIDTH-1 downto 0);
    m_axi_axi_read_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_read_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ARUSER_WIDTH-1 downto 0);
    m_axi_axi_read_RVALID : IN STD_LOGIC;
    m_axi_axi_read_RREADY : OUT STD_LOGIC;
    m_axi_axi_read_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_DATA_WIDTH-1 downto 0);
    m_axi_axi_read_RLAST : IN STD_LOGIC;
    m_axi_axi_read_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_RUSER_WIDTH-1 downto 0);
    m_axi_axi_read_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_BVALID : IN STD_LOGIC;
    m_axi_axi_read_BREADY : OUT STD_LOGIC;
    m_axi_axi_read_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_BUSER_WIDTH-1 downto 0);
    m_axi_axi_write_AWVALID : OUT STD_LOGIC;
    m_axi_axi_write_AWREADY : IN STD_LOGIC;
    m_axi_axi_write_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ADDR_WIDTH-1 downto 0);
    m_axi_axi_write_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_write_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_AWUSER_WIDTH-1 downto 0);
    m_axi_axi_write_WVALID : OUT STD_LOGIC;
    m_axi_axi_write_WREADY : IN STD_LOGIC;
    m_axi_axi_write_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_DATA_WIDTH-1 downto 0);
    m_axi_axi_write_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_DATA_WIDTH/8-1 downto 0);
    m_axi_axi_write_WLAST : OUT STD_LOGIC;
    m_axi_axi_write_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_WUSER_WIDTH-1 downto 0);
    m_axi_axi_write_ARVALID : OUT STD_LOGIC;
    m_axi_axi_write_ARREADY : IN STD_LOGIC;
    m_axi_axi_write_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ADDR_WIDTH-1 downto 0);
    m_axi_axi_write_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_write_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ARUSER_WIDTH-1 downto 0);
    m_axi_axi_write_RVALID : IN STD_LOGIC;
    m_axi_axi_write_RREADY : OUT STD_LOGIC;
    m_axi_axi_write_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_DATA_WIDTH-1 downto 0);
    m_axi_axi_write_RLAST : IN STD_LOGIC;
    m_axi_axi_write_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_RUSER_WIDTH-1 downto 0);
    m_axi_axi_write_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_BVALID : IN STD_LOGIC;
    m_axi_axi_write_BREADY : OUT STD_LOGIC;
    m_axi_axi_write_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_BUSER_WIDTH-1 downto 0);
    bramLayerResults_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bramLayerResults_EN_A : OUT STD_LOGIC;
    bramLayerResults_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    bramLayerResults_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bramLayerResults_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    bramLayerResults_Clk_A : OUT STD_LOGIC;
    bramLayerResults_Rst_A : OUT STD_LOGIC;
    s_axi_configuration_AWVALID : IN STD_LOGIC;
    s_axi_configuration_AWREADY : OUT STD_LOGIC;
    s_axi_configuration_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIGURATION_ADDR_WIDTH-1 downto 0);
    s_axi_configuration_WVALID : IN STD_LOGIC;
    s_axi_configuration_WREADY : OUT STD_LOGIC;
    s_axi_configuration_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIGURATION_DATA_WIDTH-1 downto 0);
    s_axi_configuration_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIGURATION_DATA_WIDTH/8-1 downto 0);
    s_axi_configuration_ARVALID : IN STD_LOGIC;
    s_axi_configuration_ARREADY : OUT STD_LOGIC;
    s_axi_configuration_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIGURATION_ADDR_WIDTH-1 downto 0);
    s_axi_configuration_RVALID : OUT STD_LOGIC;
    s_axi_configuration_RREADY : IN STD_LOGIC;
    s_axi_configuration_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONFIGURATION_DATA_WIDTH-1 downto 0);
    s_axi_configuration_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_configuration_BVALID : OUT STD_LOGIC;
    s_axi_configuration_BREADY : IN STD_LOGIC;
    s_axi_configuration_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of MultiLayerPerceptronDecoupled is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MultiLayerPerceptronDecoupled_MultiLayerPerceptronDecoupled,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.561000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=23715,HLS_SYN_LUT=25812,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (61 downto 0) := "00000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (61 downto 0) := "00000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (61 downto 0) := "00000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (61 downto 0) := "00000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (61 downto 0) := "00000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (61 downto 0) := "00001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (61 downto 0) := "00010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (61 downto 0) := "00100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (61 downto 0) := "01000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (61 downto 0) := "10000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightOutput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasOutput : STD_LOGIC_VECTOR (63 downto 0);
    signal numberInputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOutputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberLayers : STD_LOGIC_VECTOR (31 downto 0);
    signal numberNeurons : STD_LOGIC_VECTOR (31 downto 0);
    signal loadParameters : STD_LOGIC_VECTOR (31 downto 0);
    signal exportLayers : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramBias_ce0 : STD_LOGIC;
    signal bramBias_we0 : STD_LOGIC;
    signal bramBias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramWeight_0_ce0 : STD_LOGIC;
    signal bramWeight_0_we0 : STD_LOGIC;
    signal bramWeight_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_0_ce1 : STD_LOGIC;
    signal bramWeight_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramWeight_1_ce0 : STD_LOGIC;
    signal bramWeight_1_we0 : STD_LOGIC;
    signal bramWeight_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_1_ce1 : STD_LOGIC;
    signal bramWeight_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramWeight_2_ce0 : STD_LOGIC;
    signal bramWeight_2_we0 : STD_LOGIC;
    signal bramWeight_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_2_ce1 : STD_LOGIC;
    signal bramWeight_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramWeight_3_ce0 : STD_LOGIC;
    signal bramWeight_3_we0 : STD_LOGIC;
    signal bramWeight_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_3_ce1 : STD_LOGIC;
    signal bramWeight_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_4_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramWeight_4_ce0 : STD_LOGIC;
    signal bramWeight_4_we0 : STD_LOGIC;
    signal bramWeight_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_4_ce1 : STD_LOGIC;
    signal bramWeight_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_5_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramWeight_5_ce0 : STD_LOGIC;
    signal bramWeight_5_we0 : STD_LOGIC;
    signal bramWeight_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_5_ce1 : STD_LOGIC;
    signal bramWeight_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_6_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramWeight_6_ce0 : STD_LOGIC;
    signal bramWeight_6_we0 : STD_LOGIC;
    signal bramWeight_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_6_ce1 : STD_LOGIC;
    signal bramWeight_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_7_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramWeight_7_ce0 : STD_LOGIC;
    signal bramWeight_7_we0 : STD_LOGIC;
    signal bramWeight_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_7_ce1 : STD_LOGIC;
    signal bramWeight_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axi_read_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond928_reg_1330 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond939_reg_1306 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal axi_write_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal axi_write_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal exitcond1_reg_1532 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_1532_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal icmp_ln241_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_AWREADY : STD_LOGIC;
    signal axi_read_WREADY : STD_LOGIC;
    signal axi_read_ARVALID : STD_LOGIC;
    signal axi_read_ARREADY : STD_LOGIC;
    signal axi_read_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_RVALID : STD_LOGIC;
    signal axi_read_RREADY : STD_LOGIC;
    signal axi_read_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_RLAST : STD_LOGIC;
    signal axi_read_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_read_BVALID : STD_LOGIC;
    signal axi_read_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_read_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_AWVALID : STD_LOGIC;
    signal axi_write_AWREADY : STD_LOGIC;
    signal axi_write_WVALID : STD_LOGIC;
    signal axi_write_WREADY : STD_LOGIC;
    signal axi_write_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_ARREADY : STD_LOGIC;
    signal axi_write_RVALID : STD_LOGIC;
    signal axi_write_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_RLAST : STD_LOGIC;
    signal axi_write_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_write_BVALID : STD_LOGIC;
    signal axi_write_BREADY : STD_LOGIC;
    signal axi_write_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_write_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index67_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index61_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index61_reg_522_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal loop_index55_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index55_reg_534_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state32_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_9_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_10_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal axiBiasInput_read_reg_1164 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput_read_reg_1169 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_read_reg_1174 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_read_reg_1179 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln185_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal numberInputs_read_reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln189_fu_683_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln189_reg_1197 : STD_LOGIC_VECTOR (11 downto 0);
    signal numberNeurons_read_reg_1203 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln190_fu_687_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln190_reg_1218 : STD_LOGIC_VECTOR (11 downto 0);
    signal numberLayers_read_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOutputs_read_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln190_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln190_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln193_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_addr_reg_1261 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond9410_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_146_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_148_fu_753_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_148_reg_1276 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_148_reg_1276_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal newIndex_reg_1280 : STD_LOGIC_VECTOR (8 downto 0);
    signal newIndex_reg_1280_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal axi_read_addr_read_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_2_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_2_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln198_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_addr_1_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond939_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond939_reg_1306_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_149_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_149_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal axi_read_addr_1_read_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln203_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal axi_read_addr_2_reg_1324 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond928_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond928_reg_1330_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_152_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_152_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal axi_read_addr_2_read_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln205_fu_887_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln205_reg_1344 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_MyGemv_fu_651_ap_ready : STD_LOGIC;
    signal grp_MyGemv_fu_651_ap_done : STD_LOGIC;
    signal ap_sync_grp_MyGemv_fu_651_ap_ready : STD_LOGIC;
    signal ap_sync_grp_MyGemv_fu_651_ap_done : STD_LOGIC;
    signal ap_block_state36_on_subcall_done : BOOLEAN;
    signal icmp_ln208_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_1355 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln208_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state37_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln82_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal trunc_ln85_fu_923_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln85_reg_1377 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln82_2_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_2_reg_1382 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state40_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state41_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal add_ln82_1_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal zext_ln82_1_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_1_reg_1391 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_154_fu_952_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_154_reg_1401 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal sub18_fu_958_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub18_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln214_fu_963_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln214_fu_963_p2 : signal is "no";
    signal add_ln214_reg_1411 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln219_fu_974_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln219_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln214_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln219_fu_994_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln219_reg_1429 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln232_fu_999_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln232_reg_1435 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1141_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_1152_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln217_1_reg_1446 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal icmp_ln82_5_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_5_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state51_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state52_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal add_ln82_3_fu_1008_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal add_ln85_1_fu_1023_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln85_1_reg_1465 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln82_6_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_6_reg_1470 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state54_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state55_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal add_ln82_4_fu_1042_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal zext_ln82_4_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_4_reg_1479 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1147_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_1158_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln230_1_reg_1494 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal and_ln237_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_MyGemv_1_fu_623_ap_ready : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_ap_done : STD_LOGIC;
    signal ap_sync_grp_MyGemv_1_fu_623_ap_ready : STD_LOGIC;
    signal ap_sync_grp_MyGemv_1_fu_623_ap_done : STD_LOGIC;
    signal ap_block_state63_on_subcall_done : BOOLEAN;
    signal icmp_ln82_4_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_4_reg_1503 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state64_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state65_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal add_ln82_2_fu_1068_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal add_ln85_fu_1083_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln85_reg_1517 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln241_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal axi_write_addr_reg_1526 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_block_state68_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state69_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state70_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_state70_io : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal empty_157_fu_1126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal layerBuffer0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer0_load_4_reg_1546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state37 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state40 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_block_state50_on_subcall_done : BOOLEAN;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state51 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state54 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state64 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state68 : STD_LOGIC;
    signal inputData_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal inputData_ce0 : STD_LOGIC;
    signal inputData_we0 : STD_LOGIC;
    signal inputData_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputData_ce1 : STD_LOGIC;
    signal inputData_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layerBuffer0_ce0 : STD_LOGIC;
    signal layerBuffer0_we0 : STD_LOGIC;
    signal layerBuffer0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layerBuffer1_ce0 : STD_LOGIC;
    signal layerBuffer1_we0 : STD_LOGIC;
    signal layerBuffer1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer1_ce1 : STD_LOGIC;
    signal layerBuffer1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_0_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_0_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_0_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_0_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_1_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_1_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_1_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_1_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_2_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_2_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_2_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_2_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_2_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_3_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_3_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_3_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_3_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_3_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_4_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_4_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_4_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_4_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_4_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_4_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_5_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_5_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_5_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_5_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_5_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_5_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_6_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_6_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_6_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_6_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_6_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_6_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_7_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_7_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_7_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_7_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_1_fu_623_weights_7_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_7_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_weights_7_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_weights_offset : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_MyGemv_1_fu_623_input_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_MyGemv_1_fu_623_input_r_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_input_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_input_r_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_input_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_MyGemv_1_fu_623_input_r_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_input_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_input_r_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_bias_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MyGemv_1_fu_623_bias_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_bias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_bias_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_bias_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MyGemv_1_fu_623_bias_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_bias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_bias_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_bias_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MyGemv_1_fu_623_outputPort_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_MyGemv_1_fu_623_outputPort_ce0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_outputPort_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_outputPort_we0 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_outputPort_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_MyGemv_1_fu_623_outputPort_ce1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_outputPort_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_outputPort_we1 : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_p_n : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_1_fu_623_ap_start : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_ap_idle : STD_LOGIC;
    signal grp_MyGemv_1_fu_623_ap_continue : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_0_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_0_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_0_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_0_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_1_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_1_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_1_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_1_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_2_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_2_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_2_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_2_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_2_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_3_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_3_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_3_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_3_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_3_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_4_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_4_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_4_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_4_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_4_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_4_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_5_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_5_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_5_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_5_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_5_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_5_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_6_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_6_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_6_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_6_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_6_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_6_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_7_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_7_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_7_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_7_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MyGemv_fu_651_weights_7_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_weights_7_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_weights_7_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_input_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_MyGemv_fu_651_input_r_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_input_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_input_r_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_input_r_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_MyGemv_fu_651_input_r_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_input_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_input_r_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_bias_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MyGemv_fu_651_bias_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_bias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_bias_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_bias_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MyGemv_fu_651_bias_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_bias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_bias_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_outputPort_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_MyGemv_fu_651_outputPort_ce0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_outputPort_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_outputPort_we0 : STD_LOGIC;
    signal grp_MyGemv_fu_651_outputPort_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_MyGemv_fu_651_outputPort_ce1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_outputPort_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MyGemv_fu_651_outputPort_we1 : STD_LOGIC;
    signal grp_MyGemv_fu_651_ap_start : STD_LOGIC;
    signal grp_MyGemv_fu_651_ap_idle : STD_LOGIC;
    signal grp_MyGemv_fu_651_ap_continue : STD_LOGIC;
    signal ap_phi_mux_loop_index61_phi_fu_526_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index55_phi_fu_538_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_MyGemv_1_fu_623_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_MyGemv_1_fu_623_ap_done : STD_LOGIC := '0';
    signal grp_MyGemv_fu_651_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_sync_reg_grp_MyGemv_fu_651_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_MyGemv_fu_651_ap_done : STD_LOGIC := '0';
    signal newIndex_cast_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index61_cast_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index55_cast_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln85_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal zext_ln82_3_fu_1014_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal zext_ln85_2_fu_1033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal zext_ln82_2_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal zext_ln85_1_fu_1093_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_cast_fu_1132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast17_cast_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast18_cast_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast19_cast_fu_1111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state75 : BOOLEAN;
    signal ap_block_pp8_stage0_01001 : BOOLEAN;
    signal empty_147_fu_767_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln85_fu_927_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramLayerResults_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln85_2_fu_1028_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln85_1_fu_1088_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln190_fu_687_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln190_fu_691_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln190_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln191_1_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_fu_723_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal valuesToCopy_1_fu_789_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast2_fu_804_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast_fu_848_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_155_fu_955_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln217_fu_984_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln219_fu_994_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln85_2_fu_1019_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln82_3_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln85_1_fu_1079_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast3_fu_1102_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1141_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;

    component MultiLayerPerceptronDecoupled_MyGemv_1 IS
    port (
        weights_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_0_ce0 : OUT STD_LOGIC;
        weights_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_we0 : OUT STD_LOGIC;
        weights_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_0_ce1 : OUT STD_LOGIC;
        weights_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_we1 : OUT STD_LOGIC;
        weights_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_1_ce0 : OUT STD_LOGIC;
        weights_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_1_we0 : OUT STD_LOGIC;
        weights_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_1_ce1 : OUT STD_LOGIC;
        weights_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_1_we1 : OUT STD_LOGIC;
        weights_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_2_ce0 : OUT STD_LOGIC;
        weights_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_2_we0 : OUT STD_LOGIC;
        weights_2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_2_ce1 : OUT STD_LOGIC;
        weights_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_2_we1 : OUT STD_LOGIC;
        weights_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_3_ce0 : OUT STD_LOGIC;
        weights_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_3_we0 : OUT STD_LOGIC;
        weights_3_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_3_ce1 : OUT STD_LOGIC;
        weights_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_3_we1 : OUT STD_LOGIC;
        weights_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_4_ce0 : OUT STD_LOGIC;
        weights_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_4_we0 : OUT STD_LOGIC;
        weights_4_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_4_ce1 : OUT STD_LOGIC;
        weights_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_4_we1 : OUT STD_LOGIC;
        weights_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_5_ce0 : OUT STD_LOGIC;
        weights_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_5_we0 : OUT STD_LOGIC;
        weights_5_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_5_ce1 : OUT STD_LOGIC;
        weights_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_5_we1 : OUT STD_LOGIC;
        weights_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_6_ce0 : OUT STD_LOGIC;
        weights_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_6_we0 : OUT STD_LOGIC;
        weights_6_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_6_ce1 : OUT STD_LOGIC;
        weights_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_6_we1 : OUT STD_LOGIC;
        weights_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_7_ce0 : OUT STD_LOGIC;
        weights_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_7_we0 : OUT STD_LOGIC;
        weights_7_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_7_ce1 : OUT STD_LOGIC;
        weights_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_7_we1 : OUT STD_LOGIC;
        weights_offset : IN STD_LOGIC_VECTOR (11 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_we0 : OUT STD_LOGIC;
        input_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_we1 : OUT STD_LOGIC;
        bias_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_we0 : OUT STD_LOGIC;
        bias_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias_ce1 : OUT STD_LOGIC;
        bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_we1 : OUT STD_LOGIC;
        bias_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        outputPort_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        outputPort_ce0 : OUT STD_LOGIC;
        outputPort_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputPort_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputPort_we0 : OUT STD_LOGIC;
        outputPort_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        outputPort_ce1 : OUT STD_LOGIC;
        outputPort_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputPort_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputPort_we1 : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        weights_offset_ap_vld : IN STD_LOGIC;
        bias_offset_ap_vld : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_MyGemv IS
    port (
        weights_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_0_ce0 : OUT STD_LOGIC;
        weights_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_we0 : OUT STD_LOGIC;
        weights_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_0_ce1 : OUT STD_LOGIC;
        weights_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_we1 : OUT STD_LOGIC;
        weights_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_1_ce0 : OUT STD_LOGIC;
        weights_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_1_we0 : OUT STD_LOGIC;
        weights_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_1_ce1 : OUT STD_LOGIC;
        weights_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_1_we1 : OUT STD_LOGIC;
        weights_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_2_ce0 : OUT STD_LOGIC;
        weights_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_2_we0 : OUT STD_LOGIC;
        weights_2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_2_ce1 : OUT STD_LOGIC;
        weights_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_2_we1 : OUT STD_LOGIC;
        weights_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_3_ce0 : OUT STD_LOGIC;
        weights_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_3_we0 : OUT STD_LOGIC;
        weights_3_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_3_ce1 : OUT STD_LOGIC;
        weights_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_3_we1 : OUT STD_LOGIC;
        weights_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_4_ce0 : OUT STD_LOGIC;
        weights_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_4_we0 : OUT STD_LOGIC;
        weights_4_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_4_ce1 : OUT STD_LOGIC;
        weights_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_4_we1 : OUT STD_LOGIC;
        weights_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_5_ce0 : OUT STD_LOGIC;
        weights_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_5_we0 : OUT STD_LOGIC;
        weights_5_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_5_ce1 : OUT STD_LOGIC;
        weights_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_5_we1 : OUT STD_LOGIC;
        weights_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_6_ce0 : OUT STD_LOGIC;
        weights_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_6_we0 : OUT STD_LOGIC;
        weights_6_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_6_ce1 : OUT STD_LOGIC;
        weights_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_6_we1 : OUT STD_LOGIC;
        weights_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_7_ce0 : OUT STD_LOGIC;
        weights_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_7_we0 : OUT STD_LOGIC;
        weights_7_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_7_ce1 : OUT STD_LOGIC;
        weights_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_7_we1 : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_we0 : OUT STD_LOGIC;
        input_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_we1 : OUT STD_LOGIC;
        bias_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_we0 : OUT STD_LOGIC;
        bias_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias_ce1 : OUT STD_LOGIC;
        bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_we1 : OUT STD_LOGIC;
        outputPort_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        outputPort_ce0 : OUT STD_LOGIC;
        outputPort_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputPort_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputPort_we0 : OUT STD_LOGIC;
        outputPort_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        outputPort_ce1 : OUT STD_LOGIC;
        outputPort_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputPort_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputPort_we1 : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_mac_muladd_12s_12s_12ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_mul_mul_12s_12s_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_bramBias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_bramWeight_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_inputData IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_layerBuffer0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_layerBuffer1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_configuration_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        numberInputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberOutputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberLayers : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberNeurons : OUT STD_LOGIC_VECTOR (31 downto 0);
        loadParameters : OUT STD_LOGIC_VECTOR (31 downto 0);
        exportLayers : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiWeightInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiBiasInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiWeightOutput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiBiasOutput : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_axi_read_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_axi_write_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bramBias_U : component MultiLayerPerceptronDecoupled_bramBias
    generic map (
        DataWidth => 32,
        AddressRange => 136,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramBias_address0,
        ce0 => bramBias_ce0,
        we0 => bramBias_we0,
        d0 => bramBias_d0,
        q0 => bramBias_q0);

    bramWeight_0_U : component MultiLayerPerceptronDecoupled_bramWeight_0
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_0_address0,
        ce0 => bramWeight_0_ce0,
        we0 => bramWeight_0_we0,
        d0 => empty_147_fu_767_p1,
        q0 => bramWeight_0_q0,
        address1 => grp_MyGemv_1_fu_623_weights_0_address1,
        ce1 => bramWeight_0_ce1,
        q1 => bramWeight_0_q1);

    bramWeight_1_U : component MultiLayerPerceptronDecoupled_bramWeight_0
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_1_address0,
        ce0 => bramWeight_1_ce0,
        we0 => bramWeight_1_we0,
        d0 => empty_147_fu_767_p1,
        q0 => bramWeight_1_q0,
        address1 => grp_MyGemv_1_fu_623_weights_1_address1,
        ce1 => bramWeight_1_ce1,
        q1 => bramWeight_1_q1);

    bramWeight_2_U : component MultiLayerPerceptronDecoupled_bramWeight_0
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_2_address0,
        ce0 => bramWeight_2_ce0,
        we0 => bramWeight_2_we0,
        d0 => empty_147_fu_767_p1,
        q0 => bramWeight_2_q0,
        address1 => grp_MyGemv_1_fu_623_weights_2_address1,
        ce1 => bramWeight_2_ce1,
        q1 => bramWeight_2_q1);

    bramWeight_3_U : component MultiLayerPerceptronDecoupled_bramWeight_0
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_3_address0,
        ce0 => bramWeight_3_ce0,
        we0 => bramWeight_3_we0,
        d0 => empty_147_fu_767_p1,
        q0 => bramWeight_3_q0,
        address1 => grp_MyGemv_1_fu_623_weights_3_address1,
        ce1 => bramWeight_3_ce1,
        q1 => bramWeight_3_q1);

    bramWeight_4_U : component MultiLayerPerceptronDecoupled_bramWeight_0
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_4_address0,
        ce0 => bramWeight_4_ce0,
        we0 => bramWeight_4_we0,
        d0 => empty_147_fu_767_p1,
        q0 => bramWeight_4_q0,
        address1 => grp_MyGemv_1_fu_623_weights_4_address1,
        ce1 => bramWeight_4_ce1,
        q1 => bramWeight_4_q1);

    bramWeight_5_U : component MultiLayerPerceptronDecoupled_bramWeight_0
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_5_address0,
        ce0 => bramWeight_5_ce0,
        we0 => bramWeight_5_we0,
        d0 => empty_147_fu_767_p1,
        q0 => bramWeight_5_q0,
        address1 => grp_MyGemv_1_fu_623_weights_5_address1,
        ce1 => bramWeight_5_ce1,
        q1 => bramWeight_5_q1);

    bramWeight_6_U : component MultiLayerPerceptronDecoupled_bramWeight_0
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_6_address0,
        ce0 => bramWeight_6_ce0,
        we0 => bramWeight_6_we0,
        d0 => empty_147_fu_767_p1,
        q0 => bramWeight_6_q0,
        address1 => grp_MyGemv_1_fu_623_weights_6_address1,
        ce1 => bramWeight_6_ce1,
        q1 => bramWeight_6_q1);

    bramWeight_7_U : component MultiLayerPerceptronDecoupled_bramWeight_0
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_7_address0,
        ce0 => bramWeight_7_ce0,
        we0 => bramWeight_7_we0,
        d0 => empty_147_fu_767_p1,
        q0 => bramWeight_7_q0,
        address1 => grp_MyGemv_1_fu_623_weights_7_address1,
        ce1 => bramWeight_7_ce1,
        q1 => bramWeight_7_q1);

    configuration_s_axi_U : component MultiLayerPerceptronDecoupled_configuration_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONFIGURATION_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONFIGURATION_DATA_WIDTH)
    port map (
        AWVALID => s_axi_configuration_AWVALID,
        AWREADY => s_axi_configuration_AWREADY,
        AWADDR => s_axi_configuration_AWADDR,
        WVALID => s_axi_configuration_WVALID,
        WREADY => s_axi_configuration_WREADY,
        WDATA => s_axi_configuration_WDATA,
        WSTRB => s_axi_configuration_WSTRB,
        ARVALID => s_axi_configuration_ARVALID,
        ARREADY => s_axi_configuration_ARREADY,
        ARADDR => s_axi_configuration_ARADDR,
        RVALID => s_axi_configuration_RVALID,
        RREADY => s_axi_configuration_RREADY,
        RDATA => s_axi_configuration_RDATA,
        RRESP => s_axi_configuration_RRESP,
        BVALID => s_axi_configuration_BVALID,
        BREADY => s_axi_configuration_BREADY,
        BRESP => s_axi_configuration_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        numberInputs => numberInputs,
        numberOutputs => numberOutputs,
        numberLayers => numberLayers,
        numberNeurons => numberNeurons,
        loadParameters => loadParameters,
        exportLayers => exportLayers,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_s_axi_U : component MultiLayerPerceptronDecoupled_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        axiWeightInput => axiWeightInput,
        axiBiasInput => axiBiasInput,
        axiWeightOutput => axiWeightOutput,
        axiBiasOutput => axiBiasOutput);

    axi_read_m_axi_U : component MultiLayerPerceptronDecoupled_axi_read_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 128,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_READ_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_READ_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_READ_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_READ_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_READ_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_READ_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_READ_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_READ_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXI_READ_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_READ_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_READ_CACHE_VALUE)
    port map (
        AWVALID => m_axi_axi_read_AWVALID,
        AWREADY => m_axi_axi_read_AWREADY,
        AWADDR => m_axi_axi_read_AWADDR,
        AWID => m_axi_axi_read_AWID,
        AWLEN => m_axi_axi_read_AWLEN,
        AWSIZE => m_axi_axi_read_AWSIZE,
        AWBURST => m_axi_axi_read_AWBURST,
        AWLOCK => m_axi_axi_read_AWLOCK,
        AWCACHE => m_axi_axi_read_AWCACHE,
        AWPROT => m_axi_axi_read_AWPROT,
        AWQOS => m_axi_axi_read_AWQOS,
        AWREGION => m_axi_axi_read_AWREGION,
        AWUSER => m_axi_axi_read_AWUSER,
        WVALID => m_axi_axi_read_WVALID,
        WREADY => m_axi_axi_read_WREADY,
        WDATA => m_axi_axi_read_WDATA,
        WSTRB => m_axi_axi_read_WSTRB,
        WLAST => m_axi_axi_read_WLAST,
        WID => m_axi_axi_read_WID,
        WUSER => m_axi_axi_read_WUSER,
        ARVALID => m_axi_axi_read_ARVALID,
        ARREADY => m_axi_axi_read_ARREADY,
        ARADDR => m_axi_axi_read_ARADDR,
        ARID => m_axi_axi_read_ARID,
        ARLEN => m_axi_axi_read_ARLEN,
        ARSIZE => m_axi_axi_read_ARSIZE,
        ARBURST => m_axi_axi_read_ARBURST,
        ARLOCK => m_axi_axi_read_ARLOCK,
        ARCACHE => m_axi_axi_read_ARCACHE,
        ARPROT => m_axi_axi_read_ARPROT,
        ARQOS => m_axi_axi_read_ARQOS,
        ARREGION => m_axi_axi_read_ARREGION,
        ARUSER => m_axi_axi_read_ARUSER,
        RVALID => m_axi_axi_read_RVALID,
        RREADY => m_axi_axi_read_RREADY,
        RDATA => m_axi_axi_read_RDATA,
        RLAST => m_axi_axi_read_RLAST,
        RID => m_axi_axi_read_RID,
        RUSER => m_axi_axi_read_RUSER,
        RRESP => m_axi_axi_read_RRESP,
        BVALID => m_axi_axi_read_BVALID,
        BREADY => m_axi_axi_read_BREADY,
        BRESP => m_axi_axi_read_BRESP,
        BID => m_axi_axi_read_BID,
        BUSER => m_axi_axi_read_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => axi_read_ARVALID,
        I_ARREADY => axi_read_ARREADY,
        I_ARADDR => axi_read_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => axi_read_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => axi_read_RVALID,
        I_RREADY => axi_read_RREADY,
        I_RDATA => axi_read_RDATA,
        I_RID => axi_read_RID,
        I_RUSER => axi_read_RUSER,
        I_RRESP => axi_read_RRESP,
        I_RLAST => axi_read_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => axi_read_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => axi_read_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => axi_read_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => axi_read_BRESP,
        I_BID => axi_read_BID,
        I_BUSER => axi_read_BUSER);

    axi_write_m_axi_U : component MultiLayerPerceptronDecoupled_axi_write_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_WRITE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_WRITE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_WRITE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_WRITE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_WRITE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_WRITE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_WRITE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_WRITE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXI_WRITE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_WRITE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_WRITE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_axi_write_AWVALID,
        AWREADY => m_axi_axi_write_AWREADY,
        AWADDR => m_axi_axi_write_AWADDR,
        AWID => m_axi_axi_write_AWID,
        AWLEN => m_axi_axi_write_AWLEN,
        AWSIZE => m_axi_axi_write_AWSIZE,
        AWBURST => m_axi_axi_write_AWBURST,
        AWLOCK => m_axi_axi_write_AWLOCK,
        AWCACHE => m_axi_axi_write_AWCACHE,
        AWPROT => m_axi_axi_write_AWPROT,
        AWQOS => m_axi_axi_write_AWQOS,
        AWREGION => m_axi_axi_write_AWREGION,
        AWUSER => m_axi_axi_write_AWUSER,
        WVALID => m_axi_axi_write_WVALID,
        WREADY => m_axi_axi_write_WREADY,
        WDATA => m_axi_axi_write_WDATA,
        WSTRB => m_axi_axi_write_WSTRB,
        WLAST => m_axi_axi_write_WLAST,
        WID => m_axi_axi_write_WID,
        WUSER => m_axi_axi_write_WUSER,
        ARVALID => m_axi_axi_write_ARVALID,
        ARREADY => m_axi_axi_write_ARREADY,
        ARADDR => m_axi_axi_write_ARADDR,
        ARID => m_axi_axi_write_ARID,
        ARLEN => m_axi_axi_write_ARLEN,
        ARSIZE => m_axi_axi_write_ARSIZE,
        ARBURST => m_axi_axi_write_ARBURST,
        ARLOCK => m_axi_axi_write_ARLOCK,
        ARCACHE => m_axi_axi_write_ARCACHE,
        ARPROT => m_axi_axi_write_ARPROT,
        ARQOS => m_axi_axi_write_ARQOS,
        ARREGION => m_axi_axi_write_ARREGION,
        ARUSER => m_axi_axi_write_ARUSER,
        RVALID => m_axi_axi_write_RVALID,
        RREADY => m_axi_axi_write_RREADY,
        RDATA => m_axi_axi_write_RDATA,
        RLAST => m_axi_axi_write_RLAST,
        RID => m_axi_axi_write_RID,
        RUSER => m_axi_axi_write_RUSER,
        RRESP => m_axi_axi_write_RRESP,
        BVALID => m_axi_axi_write_BVALID,
        BREADY => m_axi_axi_write_BREADY,
        BRESP => m_axi_axi_write_BRESP,
        BID => m_axi_axi_write_BID,
        BUSER => m_axi_axi_write_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => axi_write_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => axi_write_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => axi_write_RDATA,
        I_RID => axi_write_RID,
        I_RUSER => axi_write_RUSER,
        I_RRESP => axi_write_RRESP,
        I_RLAST => axi_write_RLAST,
        I_AWVALID => axi_write_AWVALID,
        I_AWREADY => axi_write_AWREADY,
        I_AWADDR => axi_write_addr_reg_1526,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => numberOutputs_read_reg_1234,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => axi_write_WVALID,
        I_WREADY => axi_write_WREADY,
        I_WDATA => axi_write_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => axi_write_BVALID,
        I_BREADY => axi_write_BREADY,
        I_BRESP => axi_write_BRESP,
        I_BID => axi_write_BID,
        I_BUSER => axi_write_BUSER);

    inputData_U : component MultiLayerPerceptronDecoupled_inputData
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => inputData_address0,
        ce0 => inputData_ce0,
        we0 => inputData_we0,
        d0 => inputData_d0,
        q0 => inputData_q0,
        address1 => grp_MyGemv_fu_651_input_r_address1,
        ce1 => inputData_ce1,
        q1 => inputData_q1);

    layerBuffer0_U : component MultiLayerPerceptronDecoupled_layerBuffer0
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layerBuffer0_address0,
        ce0 => layerBuffer0_ce0,
        we0 => layerBuffer0_we0,
        d0 => layerBuffer0_d0,
        q0 => layerBuffer0_q0);

    layerBuffer1_U : component MultiLayerPerceptronDecoupled_layerBuffer1
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layerBuffer1_address0,
        ce0 => layerBuffer1_ce0,
        we0 => layerBuffer1_we0,
        d0 => layerBuffer0_q0,
        q0 => layerBuffer1_q0,
        address1 => grp_MyGemv_1_fu_623_input_r_address1,
        ce1 => layerBuffer1_ce1,
        q1 => layerBuffer1_q1);

    grp_MyGemv_1_fu_623 : component MultiLayerPerceptronDecoupled_MyGemv_1
    port map (
        weights_0_address0 => grp_MyGemv_1_fu_623_weights_0_address0,
        weights_0_ce0 => grp_MyGemv_1_fu_623_weights_0_ce0,
        weights_0_d0 => grp_MyGemv_1_fu_623_weights_0_d0,
        weights_0_q0 => bramWeight_0_q0,
        weights_0_we0 => grp_MyGemv_1_fu_623_weights_0_we0,
        weights_0_address1 => grp_MyGemv_1_fu_623_weights_0_address1,
        weights_0_ce1 => grp_MyGemv_1_fu_623_weights_0_ce1,
        weights_0_d1 => grp_MyGemv_1_fu_623_weights_0_d1,
        weights_0_q1 => bramWeight_0_q1,
        weights_0_we1 => grp_MyGemv_1_fu_623_weights_0_we1,
        weights_1_address0 => grp_MyGemv_1_fu_623_weights_1_address0,
        weights_1_ce0 => grp_MyGemv_1_fu_623_weights_1_ce0,
        weights_1_d0 => grp_MyGemv_1_fu_623_weights_1_d0,
        weights_1_q0 => bramWeight_1_q0,
        weights_1_we0 => grp_MyGemv_1_fu_623_weights_1_we0,
        weights_1_address1 => grp_MyGemv_1_fu_623_weights_1_address1,
        weights_1_ce1 => grp_MyGemv_1_fu_623_weights_1_ce1,
        weights_1_d1 => grp_MyGemv_1_fu_623_weights_1_d1,
        weights_1_q1 => bramWeight_1_q1,
        weights_1_we1 => grp_MyGemv_1_fu_623_weights_1_we1,
        weights_2_address0 => grp_MyGemv_1_fu_623_weights_2_address0,
        weights_2_ce0 => grp_MyGemv_1_fu_623_weights_2_ce0,
        weights_2_d0 => grp_MyGemv_1_fu_623_weights_2_d0,
        weights_2_q0 => bramWeight_2_q0,
        weights_2_we0 => grp_MyGemv_1_fu_623_weights_2_we0,
        weights_2_address1 => grp_MyGemv_1_fu_623_weights_2_address1,
        weights_2_ce1 => grp_MyGemv_1_fu_623_weights_2_ce1,
        weights_2_d1 => grp_MyGemv_1_fu_623_weights_2_d1,
        weights_2_q1 => bramWeight_2_q1,
        weights_2_we1 => grp_MyGemv_1_fu_623_weights_2_we1,
        weights_3_address0 => grp_MyGemv_1_fu_623_weights_3_address0,
        weights_3_ce0 => grp_MyGemv_1_fu_623_weights_3_ce0,
        weights_3_d0 => grp_MyGemv_1_fu_623_weights_3_d0,
        weights_3_q0 => bramWeight_3_q0,
        weights_3_we0 => grp_MyGemv_1_fu_623_weights_3_we0,
        weights_3_address1 => grp_MyGemv_1_fu_623_weights_3_address1,
        weights_3_ce1 => grp_MyGemv_1_fu_623_weights_3_ce1,
        weights_3_d1 => grp_MyGemv_1_fu_623_weights_3_d1,
        weights_3_q1 => bramWeight_3_q1,
        weights_3_we1 => grp_MyGemv_1_fu_623_weights_3_we1,
        weights_4_address0 => grp_MyGemv_1_fu_623_weights_4_address0,
        weights_4_ce0 => grp_MyGemv_1_fu_623_weights_4_ce0,
        weights_4_d0 => grp_MyGemv_1_fu_623_weights_4_d0,
        weights_4_q0 => bramWeight_4_q0,
        weights_4_we0 => grp_MyGemv_1_fu_623_weights_4_we0,
        weights_4_address1 => grp_MyGemv_1_fu_623_weights_4_address1,
        weights_4_ce1 => grp_MyGemv_1_fu_623_weights_4_ce1,
        weights_4_d1 => grp_MyGemv_1_fu_623_weights_4_d1,
        weights_4_q1 => bramWeight_4_q1,
        weights_4_we1 => grp_MyGemv_1_fu_623_weights_4_we1,
        weights_5_address0 => grp_MyGemv_1_fu_623_weights_5_address0,
        weights_5_ce0 => grp_MyGemv_1_fu_623_weights_5_ce0,
        weights_5_d0 => grp_MyGemv_1_fu_623_weights_5_d0,
        weights_5_q0 => bramWeight_5_q0,
        weights_5_we0 => grp_MyGemv_1_fu_623_weights_5_we0,
        weights_5_address1 => grp_MyGemv_1_fu_623_weights_5_address1,
        weights_5_ce1 => grp_MyGemv_1_fu_623_weights_5_ce1,
        weights_5_d1 => grp_MyGemv_1_fu_623_weights_5_d1,
        weights_5_q1 => bramWeight_5_q1,
        weights_5_we1 => grp_MyGemv_1_fu_623_weights_5_we1,
        weights_6_address0 => grp_MyGemv_1_fu_623_weights_6_address0,
        weights_6_ce0 => grp_MyGemv_1_fu_623_weights_6_ce0,
        weights_6_d0 => grp_MyGemv_1_fu_623_weights_6_d0,
        weights_6_q0 => bramWeight_6_q0,
        weights_6_we0 => grp_MyGemv_1_fu_623_weights_6_we0,
        weights_6_address1 => grp_MyGemv_1_fu_623_weights_6_address1,
        weights_6_ce1 => grp_MyGemv_1_fu_623_weights_6_ce1,
        weights_6_d1 => grp_MyGemv_1_fu_623_weights_6_d1,
        weights_6_q1 => bramWeight_6_q1,
        weights_6_we1 => grp_MyGemv_1_fu_623_weights_6_we1,
        weights_7_address0 => grp_MyGemv_1_fu_623_weights_7_address0,
        weights_7_ce0 => grp_MyGemv_1_fu_623_weights_7_ce0,
        weights_7_d0 => grp_MyGemv_1_fu_623_weights_7_d0,
        weights_7_q0 => bramWeight_7_q0,
        weights_7_we0 => grp_MyGemv_1_fu_623_weights_7_we0,
        weights_7_address1 => grp_MyGemv_1_fu_623_weights_7_address1,
        weights_7_ce1 => grp_MyGemv_1_fu_623_weights_7_ce1,
        weights_7_d1 => grp_MyGemv_1_fu_623_weights_7_d1,
        weights_7_q1 => bramWeight_7_q1,
        weights_7_we1 => grp_MyGemv_1_fu_623_weights_7_we1,
        weights_offset => grp_MyGemv_1_fu_623_weights_offset,
        input_r_address0 => grp_MyGemv_1_fu_623_input_r_address0,
        input_r_ce0 => grp_MyGemv_1_fu_623_input_r_ce0,
        input_r_d0 => grp_MyGemv_1_fu_623_input_r_d0,
        input_r_q0 => layerBuffer1_q0,
        input_r_we0 => grp_MyGemv_1_fu_623_input_r_we0,
        input_r_address1 => grp_MyGemv_1_fu_623_input_r_address1,
        input_r_ce1 => grp_MyGemv_1_fu_623_input_r_ce1,
        input_r_d1 => grp_MyGemv_1_fu_623_input_r_d1,
        input_r_q1 => layerBuffer1_q1,
        input_r_we1 => grp_MyGemv_1_fu_623_input_r_we1,
        bias_address0 => grp_MyGemv_1_fu_623_bias_address0,
        bias_ce0 => grp_MyGemv_1_fu_623_bias_ce0,
        bias_d0 => grp_MyGemv_1_fu_623_bias_d0,
        bias_q0 => bramBias_q0,
        bias_we0 => grp_MyGemv_1_fu_623_bias_we0,
        bias_address1 => grp_MyGemv_1_fu_623_bias_address1,
        bias_ce1 => grp_MyGemv_1_fu_623_bias_ce1,
        bias_d1 => grp_MyGemv_1_fu_623_bias_d1,
        bias_q1 => ap_const_lv32_0,
        bias_we1 => grp_MyGemv_1_fu_623_bias_we1,
        bias_offset => grp_MyGemv_1_fu_623_bias_offset,
        outputPort_address0 => grp_MyGemv_1_fu_623_outputPort_address0,
        outputPort_ce0 => grp_MyGemv_1_fu_623_outputPort_ce0,
        outputPort_d0 => grp_MyGemv_1_fu_623_outputPort_d0,
        outputPort_q0 => ap_const_lv32_0,
        outputPort_we0 => grp_MyGemv_1_fu_623_outputPort_we0,
        outputPort_address1 => grp_MyGemv_1_fu_623_outputPort_address1,
        outputPort_ce1 => grp_MyGemv_1_fu_623_outputPort_ce1,
        outputPort_d1 => grp_MyGemv_1_fu_623_outputPort_d1,
        outputPort_q1 => ap_const_lv32_0,
        outputPort_we1 => grp_MyGemv_1_fu_623_outputPort_we1,
        p_n => grp_MyGemv_1_fu_623_p_n,
        p_k => numberNeurons_read_reg_1203,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        weights_offset_ap_vld => ap_const_logic_1,
        bias_offset_ap_vld => ap_const_logic_1,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        ap_start => grp_MyGemv_1_fu_623_ap_start,
        ap_done => grp_MyGemv_1_fu_623_ap_done,
        ap_ready => grp_MyGemv_1_fu_623_ap_ready,
        ap_idle => grp_MyGemv_1_fu_623_ap_idle,
        ap_continue => grp_MyGemv_1_fu_623_ap_continue);

    grp_MyGemv_fu_651 : component MultiLayerPerceptronDecoupled_MyGemv
    port map (
        weights_0_address0 => grp_MyGemv_fu_651_weights_0_address0,
        weights_0_ce0 => grp_MyGemv_fu_651_weights_0_ce0,
        weights_0_d0 => grp_MyGemv_fu_651_weights_0_d0,
        weights_0_q0 => bramWeight_0_q0,
        weights_0_we0 => grp_MyGemv_fu_651_weights_0_we0,
        weights_0_address1 => grp_MyGemv_fu_651_weights_0_address1,
        weights_0_ce1 => grp_MyGemv_fu_651_weights_0_ce1,
        weights_0_d1 => grp_MyGemv_fu_651_weights_0_d1,
        weights_0_q1 => ap_const_lv32_0,
        weights_0_we1 => grp_MyGemv_fu_651_weights_0_we1,
        weights_1_address0 => grp_MyGemv_fu_651_weights_1_address0,
        weights_1_ce0 => grp_MyGemv_fu_651_weights_1_ce0,
        weights_1_d0 => grp_MyGemv_fu_651_weights_1_d0,
        weights_1_q0 => bramWeight_1_q0,
        weights_1_we0 => grp_MyGemv_fu_651_weights_1_we0,
        weights_1_address1 => grp_MyGemv_fu_651_weights_1_address1,
        weights_1_ce1 => grp_MyGemv_fu_651_weights_1_ce1,
        weights_1_d1 => grp_MyGemv_fu_651_weights_1_d1,
        weights_1_q1 => ap_const_lv32_0,
        weights_1_we1 => grp_MyGemv_fu_651_weights_1_we1,
        weights_2_address0 => grp_MyGemv_fu_651_weights_2_address0,
        weights_2_ce0 => grp_MyGemv_fu_651_weights_2_ce0,
        weights_2_d0 => grp_MyGemv_fu_651_weights_2_d0,
        weights_2_q0 => bramWeight_2_q0,
        weights_2_we0 => grp_MyGemv_fu_651_weights_2_we0,
        weights_2_address1 => grp_MyGemv_fu_651_weights_2_address1,
        weights_2_ce1 => grp_MyGemv_fu_651_weights_2_ce1,
        weights_2_d1 => grp_MyGemv_fu_651_weights_2_d1,
        weights_2_q1 => ap_const_lv32_0,
        weights_2_we1 => grp_MyGemv_fu_651_weights_2_we1,
        weights_3_address0 => grp_MyGemv_fu_651_weights_3_address0,
        weights_3_ce0 => grp_MyGemv_fu_651_weights_3_ce0,
        weights_3_d0 => grp_MyGemv_fu_651_weights_3_d0,
        weights_3_q0 => bramWeight_3_q0,
        weights_3_we0 => grp_MyGemv_fu_651_weights_3_we0,
        weights_3_address1 => grp_MyGemv_fu_651_weights_3_address1,
        weights_3_ce1 => grp_MyGemv_fu_651_weights_3_ce1,
        weights_3_d1 => grp_MyGemv_fu_651_weights_3_d1,
        weights_3_q1 => ap_const_lv32_0,
        weights_3_we1 => grp_MyGemv_fu_651_weights_3_we1,
        weights_4_address0 => grp_MyGemv_fu_651_weights_4_address0,
        weights_4_ce0 => grp_MyGemv_fu_651_weights_4_ce0,
        weights_4_d0 => grp_MyGemv_fu_651_weights_4_d0,
        weights_4_q0 => bramWeight_4_q0,
        weights_4_we0 => grp_MyGemv_fu_651_weights_4_we0,
        weights_4_address1 => grp_MyGemv_fu_651_weights_4_address1,
        weights_4_ce1 => grp_MyGemv_fu_651_weights_4_ce1,
        weights_4_d1 => grp_MyGemv_fu_651_weights_4_d1,
        weights_4_q1 => ap_const_lv32_0,
        weights_4_we1 => grp_MyGemv_fu_651_weights_4_we1,
        weights_5_address0 => grp_MyGemv_fu_651_weights_5_address0,
        weights_5_ce0 => grp_MyGemv_fu_651_weights_5_ce0,
        weights_5_d0 => grp_MyGemv_fu_651_weights_5_d0,
        weights_5_q0 => bramWeight_5_q0,
        weights_5_we0 => grp_MyGemv_fu_651_weights_5_we0,
        weights_5_address1 => grp_MyGemv_fu_651_weights_5_address1,
        weights_5_ce1 => grp_MyGemv_fu_651_weights_5_ce1,
        weights_5_d1 => grp_MyGemv_fu_651_weights_5_d1,
        weights_5_q1 => ap_const_lv32_0,
        weights_5_we1 => grp_MyGemv_fu_651_weights_5_we1,
        weights_6_address0 => grp_MyGemv_fu_651_weights_6_address0,
        weights_6_ce0 => grp_MyGemv_fu_651_weights_6_ce0,
        weights_6_d0 => grp_MyGemv_fu_651_weights_6_d0,
        weights_6_q0 => bramWeight_6_q0,
        weights_6_we0 => grp_MyGemv_fu_651_weights_6_we0,
        weights_6_address1 => grp_MyGemv_fu_651_weights_6_address1,
        weights_6_ce1 => grp_MyGemv_fu_651_weights_6_ce1,
        weights_6_d1 => grp_MyGemv_fu_651_weights_6_d1,
        weights_6_q1 => ap_const_lv32_0,
        weights_6_we1 => grp_MyGemv_fu_651_weights_6_we1,
        weights_7_address0 => grp_MyGemv_fu_651_weights_7_address0,
        weights_7_ce0 => grp_MyGemv_fu_651_weights_7_ce0,
        weights_7_d0 => grp_MyGemv_fu_651_weights_7_d0,
        weights_7_q0 => bramWeight_7_q0,
        weights_7_we0 => grp_MyGemv_fu_651_weights_7_we0,
        weights_7_address1 => grp_MyGemv_fu_651_weights_7_address1,
        weights_7_ce1 => grp_MyGemv_fu_651_weights_7_ce1,
        weights_7_d1 => grp_MyGemv_fu_651_weights_7_d1,
        weights_7_q1 => ap_const_lv32_0,
        weights_7_we1 => grp_MyGemv_fu_651_weights_7_we1,
        input_r_address0 => grp_MyGemv_fu_651_input_r_address0,
        input_r_ce0 => grp_MyGemv_fu_651_input_r_ce0,
        input_r_d0 => grp_MyGemv_fu_651_input_r_d0,
        input_r_q0 => inputData_q0,
        input_r_we0 => grp_MyGemv_fu_651_input_r_we0,
        input_r_address1 => grp_MyGemv_fu_651_input_r_address1,
        input_r_ce1 => grp_MyGemv_fu_651_input_r_ce1,
        input_r_d1 => grp_MyGemv_fu_651_input_r_d1,
        input_r_q1 => inputData_q1,
        input_r_we1 => grp_MyGemv_fu_651_input_r_we1,
        bias_address0 => grp_MyGemv_fu_651_bias_address0,
        bias_ce0 => grp_MyGemv_fu_651_bias_ce0,
        bias_d0 => grp_MyGemv_fu_651_bias_d0,
        bias_q0 => bramBias_q0,
        bias_we0 => grp_MyGemv_fu_651_bias_we0,
        bias_address1 => grp_MyGemv_fu_651_bias_address1,
        bias_ce1 => grp_MyGemv_fu_651_bias_ce1,
        bias_d1 => grp_MyGemv_fu_651_bias_d1,
        bias_q1 => ap_const_lv32_0,
        bias_we1 => grp_MyGemv_fu_651_bias_we1,
        outputPort_address0 => grp_MyGemv_fu_651_outputPort_address0,
        outputPort_ce0 => grp_MyGemv_fu_651_outputPort_ce0,
        outputPort_d0 => grp_MyGemv_fu_651_outputPort_d0,
        outputPort_q0 => ap_const_lv32_0,
        outputPort_we0 => grp_MyGemv_fu_651_outputPort_we0,
        outputPort_address1 => grp_MyGemv_fu_651_outputPort_address1,
        outputPort_ce1 => grp_MyGemv_fu_651_outputPort_ce1,
        outputPort_d1 => grp_MyGemv_fu_651_outputPort_d1,
        outputPort_q1 => ap_const_lv32_0,
        outputPort_we1 => grp_MyGemv_fu_651_outputPort_we1,
        p_n => numberNeurons_read_reg_1203,
        p_k => numberInputs_read_reg_1188,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        ap_start => grp_MyGemv_fu_651_ap_start,
        ap_done => grp_MyGemv_fu_651_ap_done,
        ap_ready => grp_MyGemv_fu_651_ap_ready,
        ap_idle => grp_MyGemv_fu_651_ap_idle,
        ap_continue => grp_MyGemv_fu_651_ap_continue);

    mul_32s_32s_32_1_1_U400 : component MultiLayerPerceptronDecoupled_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons,
        din1 => mul_ln190_fu_697_p1,
        dout => mul_ln190_fu_697_p2);

    mul_32s_32s_32_1_1_U401 : component MultiLayerPerceptronDecoupled_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1203,
        din1 => valuesToCopy_fu_712_p1,
        dout => valuesToCopy_fu_712_p2);

    mul_32s_32s_32_1_1_U402 : component MultiLayerPerceptronDecoupled_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberLayers_read_reg_1226,
        din1 => numberNeurons_read_reg_1203,
        dout => valuesToCopy_1_fu_789_p2);

    mul_8s_8s_8_1_1_U403 : component MultiLayerPerceptronDecoupled_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => trunc_ln205_reg_1344,
        din1 => mul_ln219_fu_994_p1,
        dout => mul_ln219_fu_994_p2);

    mul_8s_8s_8_1_1_U404 : component MultiLayerPerceptronDecoupled_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => empty_154_reg_1401,
        din1 => trunc_ln205_reg_1344,
        dout => mul_ln232_fu_999_p2);

    mac_muladd_12s_12s_12ns_12_4_1_U405 : component MultiLayerPerceptronDecoupled_mac_muladd_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln190_reg_1218,
        din1 => grp_fu_1141_p1,
        din2 => trunc_ln189_reg_1197,
        ce => ap_const_logic_1,
        dout => grp_fu_1141_p3);

    mac_muladd_12s_12s_12ns_12_4_1_U406 : component MultiLayerPerceptronDecoupled_mac_muladd_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln190_reg_1218,
        din1 => add_ln214_reg_1411,
        din2 => trunc_ln189_reg_1197,
        ce => ap_const_logic_1,
        dout => grp_fu_1147_p3);

    mul_mul_12s_12s_12_4_1_U407 : component MultiLayerPerceptronDecoupled_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln190_reg_1218,
        din1 => grp_fu_1141_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1152_p2);

    mul_mul_12s_12s_12_4_1_U408 : component MultiLayerPerceptronDecoupled_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln190_reg_1218,
        din1 => grp_fu_1147_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1158_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state32);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state37))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln208_fu_901_p2) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state37))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state37);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_lv1_1 = and_ln208_fu_901_p2) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state40))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state40))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state40);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state51))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln82_reg_1355 = ap_const_lv1_1) and (icmp_ln208_reg_1350 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state51))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state51);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif (((icmp_ln82_reg_1355 = ap_const_lv1_1) and (icmp_ln208_reg_1350 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state54))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln82_reg_1355 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state54))) then 
                    ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state54);
                elsif ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                elsif (((icmp_ln82_reg_1355 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state64))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln237_fu_1058_p2) and (ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state64))) then 
                    ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state64);
                elsif ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                elsif (((ap_const_lv1_1 = and_ln237_fu_1058_p2) and (ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                    ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state68) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state68)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state68);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                elsif (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                    ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_MyGemv_1_fu_623_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_MyGemv_1_fu_623_ap_done <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50)))) then 
                    ap_sync_reg_grp_MyGemv_1_fu_623_ap_done <= ap_const_logic_0;
                elsif ((grp_MyGemv_1_fu_623_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_MyGemv_1_fu_623_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50)))) then 
                    ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready <= ap_const_logic_0;
                elsif ((grp_MyGemv_1_fu_623_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_MyGemv_fu_651_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_MyGemv_fu_651_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    ap_sync_reg_grp_MyGemv_fu_651_ap_done <= ap_const_logic_0;
                elsif ((grp_MyGemv_fu_651_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_MyGemv_fu_651_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_MyGemv_fu_651_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_MyGemv_fu_651_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    ap_sync_reg_grp_MyGemv_fu_651_ap_ready <= ap_const_logic_0;
                elsif ((grp_MyGemv_fu_651_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_MyGemv_fu_651_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_MyGemv_1_fu_623_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_MyGemv_1_fu_623_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state49) or ((ap_sync_grp_MyGemv_1_fu_623_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_sync_grp_MyGemv_1_fu_623_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50)))) then 
                    grp_MyGemv_1_fu_623_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MyGemv_1_fu_623_ap_ready = ap_const_logic_1)) then 
                    grp_MyGemv_1_fu_623_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MyGemv_fu_651_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_MyGemv_fu_651_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_sync_grp_MyGemv_fu_651_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
                    grp_MyGemv_fu_651_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MyGemv_fu_651_ap_ready = ap_const_logic_1)) then 
                    grp_MyGemv_fu_651_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_10_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_reg_1355 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_10_reg_590 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln82_6_fu_1037_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                i_10_reg_590 <= add_ln82_4_fu_1042_p2;
            end if; 
        end if;
    end process;

    i_6_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i_6_reg_557 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln82_2_fu_936_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_6_reg_557 <= add_ln82_1_fu_941_p2;
            end if; 
        end if;
    end process;

    i_7_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                i_7_reg_568 <= add_ln219_reg_1419;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_7_reg_568 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_8_reg_601_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln237_fu_1058_p2) and (ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                i_8_reg_601 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (icmp_ln82_4_fu_1063_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                i_8_reg_601 <= add_ln82_2_fu_1068_p2;
            end if; 
        end if;
    end process;

    i_9_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_reg_1355 = ap_const_lv1_1) and (icmp_ln208_reg_1350 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                i_9_reg_579 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln82_5_fu_1003_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i_9_reg_579 <= add_ln82_3_fu_1008_p2;
            end if; 
        end if;
    end process;

    i_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln208_fu_901_p2) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i_reg_546 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln82_1_fu_907_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_reg_546 <= add_ln82_fu_912_p2;
            end if; 
        end if;
    end process;

    loop_index55_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                loop_index55_reg_534 <= ap_const_lv32_0;
            elsif (((exitcond928_reg_1330 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                loop_index55_reg_534 <= empty_152_reg_1334;
            end if; 
        end if;
    end process;

    loop_index61_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                loop_index61_reg_522 <= ap_const_lv32_0;
            elsif (((exitcond939_reg_1306 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                loop_index61_reg_522 <= empty_149_reg_1310;
            end if; 
        end if;
    end process;

    loop_index67_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                loop_index67_reg_511 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond9410_fu_742_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                loop_index67_reg_511 <= empty_146_fu_747_p2;
            end if; 
        end if;
    end process;

    loop_index_reg_612_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                loop_index_reg_612 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (exitcond1_fu_1121_p2 = ap_const_lv1_0))) then 
                loop_index_reg_612 <= empty_157_fu_1126_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                add_ln214_reg_1411 <= add_ln214_fu_963_p2;
                empty_154_reg_1401 <= empty_154_fu_952_p1;
                sub18_reg_1406 <= sub18_fu_958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                add_ln219_reg_1419 <= add_ln219_fu_974_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_5_fu_1003_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln85_1_reg_1465 <= add_ln85_1_fu_1023_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_4_fu_1063_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                add_ln85_reg_1517 <= add_ln85_fu_1083_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                axiBiasInput_read_reg_1164 <= axiBiasInput;
                axiWeightInput_read_reg_1169 <= axiWeightInput;
                input_read_reg_1179 <= input_r;
                numberInputs_read_reg_1188 <= numberInputs;
                numberLayers_read_reg_1226 <= numberLayers;
                numberNeurons_read_reg_1203 <= numberNeurons;
                numberOutputs_read_reg_1234 <= numberOutputs;
                output_read_reg_1174 <= output_r;
                trunc_ln189_reg_1197 <= trunc_ln189_fu_683_p1;
                trunc_ln190_reg_1218 <= trunc_ln190_fu_687_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond939_reg_1306 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                axi_read_addr_1_read_reg_1315 <= axi_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln198_fu_798_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                axi_read_addr_1_reg_1300 <= p_cast18_cast_fu_813_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond928_reg_1330 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                axi_read_addr_2_read_reg_1339 <= axi_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_843_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                axi_read_addr_2_reg_1324 <= p_cast_cast_fu_857_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                axi_read_addr_read_reg_1285 <= axi_read_RDATA;
                empty_148_reg_1276_pp0_iter1_reg <= empty_148_reg_1276;
                newIndex_reg_1280_pp0_iter1_reg <= newIndex_reg_1280;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_fu_717_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                axi_read_addr_reg_1261 <= p_cast17_cast_fu_732_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_1097_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                axi_write_addr_reg_1526 <= p_cast19_cast_fu_1111_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9410_fu_742_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_148_reg_1276 <= empty_148_fu_753_p1;
                newIndex_reg_1280 <= loop_index67_reg_511(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_149_reg_1310 <= empty_149_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                empty_152_reg_1334 <= empty_152_fu_872_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                exitcond1_reg_1532 <= exitcond1_fu_1121_p2;
                exitcond1_reg_1532_pp8_iter1_reg <= exitcond1_reg_1532;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond928_reg_1330 <= exitcond928_fu_867_p2;
                exitcond928_reg_1330_pp2_iter1_reg <= exitcond928_reg_1330;
                loop_index55_reg_534_pp2_iter1_reg <= loop_index55_reg_534;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond939_reg_1306 <= exitcond939_fu_823_p2;
                exitcond939_reg_1306_pp1_iter1_reg <= exitcond939_reg_1306;
                loop_index61_reg_522_pp1_iter1_reg <= loop_index61_reg_522;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                icmp_ln208_reg_1350 <= icmp_ln208_fu_890_p2;
                icmp_ln82_reg_1355 <= icmp_ln82_fu_896_p2;
                trunc_ln205_reg_1344 <= trunc_ln205_fu_887_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                icmp_ln241_reg_1522 <= icmp_ln241_fu_1097_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln82_1_reg_1363 <= icmp_ln82_1_fu_907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln82_2_reg_1382 <= icmp_ln82_2_fu_936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln82_4_reg_1503 <= icmp_ln82_4_fu_1063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln82_5_reg_1451 <= icmp_ln82_5_fu_1003_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln82_6_reg_1470 <= icmp_ln82_6_fu_1037_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1532 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1))) then
                layerBuffer0_load_4_reg_1546 <= layerBuffer0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln185_fu_677_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln190_reg_1246 <= mul_ln190_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                mul_ln217_1_reg_1446 <= grp_fu_1152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_969_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                mul_ln219_reg_1429 <= mul_ln219_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                mul_ln230_1_reg_1494 <= grp_fu_1158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_969_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                mul_ln232_reg_1435 <= mul_ln232_fu_999_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_1_fu_907_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                trunc_ln85_reg_1377 <= trunc_ln85_fu_923_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                valuesToCopy_2_reg_1290 <= valuesToCopy_2_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                valuesToCopy_reg_1251 <= valuesToCopy_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_2_fu_936_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    zext_ln82_1_reg_1391(31 downto 0) <= zext_ln82_1_fu_947_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_6_fu_1037_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                    zext_ln82_4_reg_1479(31 downto 0) <= zext_ln82_4_fu_1048_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln82_1_reg_1391(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln82_4_reg_1479(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_CS_fsm_state25, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state14, ap_CS_fsm_state67, ap_enable_reg_pp8_iter2, ap_CS_fsm_state75, icmp_ln241_reg_1522, axi_read_ARREADY, axi_write_AWREADY, axi_write_BVALID, icmp_ln185_fu_677_p2, ap_CS_fsm_state2, icmp_ln193_fu_717_p2, exitcond9410_fu_742_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, icmp_ln198_fu_798_p2, exitcond939_fu_823_p2, ap_enable_reg_pp1_iter0, icmp_ln203_fu_843_p2, ap_CS_fsm_state24, exitcond928_fu_867_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state36, ap_block_state36_on_subcall_done, icmp_ln208_reg_1350, icmp_ln82_reg_1355, and_ln208_fu_901_p2, icmp_ln82_1_fu_907_p2, ap_enable_reg_pp3_iter0, icmp_ln82_2_fu_936_p2, ap_enable_reg_pp4_iter0, ap_CS_fsm_state43, icmp_ln214_fu_969_p2, icmp_ln82_5_fu_1003_p2, ap_enable_reg_pp5_iter0, icmp_ln82_6_fu_1037_p2, ap_enable_reg_pp6_iter0, and_ln237_fu_1058_p2, ap_CS_fsm_state63, ap_block_state63_on_subcall_done, icmp_ln82_4_fu_1063_p2, ap_enable_reg_pp7_iter0, icmp_ln241_fu_1097_p2, ap_CS_fsm_state66, exitcond1_fu_1121_p2, ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_CS_fsm_state50, ap_block_state50_on_subcall_done, ap_block_pp5_stage0_subdone, ap_CS_fsm_state53, ap_block_pp6_stage0_subdone, ap_block_pp7_stage0_subdone, ap_block_pp8_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln185_fu_677_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln185_fu_677_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln193_fu_717_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond9410_fu_742_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond9410_fu_742_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln198_fu_798_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond939_fu_823_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond939_fu_823_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln203_fu_843_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond928_fu_867_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond928_fu_867_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_lv1_1 = and_ln208_fu_901_p2) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_lv1_0 = and_ln208_fu_901_p2) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln82_1_fu_907_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln82_1_fu_907_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln82_2_fu_936_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln82_2_fu_936_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln214_fu_969_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((icmp_ln82_reg_1355 = ap_const_lv1_1) and (icmp_ln208_reg_1350 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((icmp_ln82_reg_1355 = ap_const_lv1_0) and (icmp_ln208_reg_1350 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                elsif (((icmp_ln208_reg_1350 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln82_5_fu_1003_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln82_5_fu_1003_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state53 => 
                if (((icmp_ln82_reg_1355 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if (not(((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln82_6_fu_1037_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln82_6_fu_1037_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((ap_const_lv1_1 = and_ln237_fu_1058_p2) and (ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((ap_const_lv1_0 = and_ln237_fu_1058_p2) and (ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if (not(((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (icmp_ln82_4_fu_1063_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (icmp_ln82_4_fu_1063_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state66 => 
                if (((icmp_ln241_fu_1097_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (exitcond1_fu_1121_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (exitcond1_fu_1121_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln241_reg_1522 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln190_fu_691_p0 <= numberLayers;
    add_ln191_1_fu_703_p2 <= std_logic_vector(unsigned(numberInputs_read_reg_1188) + unsigned(mul_ln190_reg_1246));
    add_ln214_fu_963_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(empty_155_fu_955_p1));
    add_ln219_fu_974_p2 <= std_logic_vector(unsigned(i_7_reg_568) + unsigned(ap_const_lv32_1));
    add_ln82_1_fu_941_p2 <= std_logic_vector(unsigned(i_6_reg_557) + unsigned(ap_const_lv32_1));
    add_ln82_2_fu_1068_p2 <= std_logic_vector(unsigned(i_8_reg_601) + unsigned(ap_const_lv32_1));
    add_ln82_3_fu_1008_p2 <= std_logic_vector(unsigned(i_9_reg_579) + unsigned(ap_const_lv32_1));
    add_ln82_4_fu_1042_p2 <= std_logic_vector(unsigned(i_10_reg_590) + unsigned(ap_const_lv32_1));
    add_ln82_fu_912_p2 <= std_logic_vector(unsigned(i_reg_546) + unsigned(ap_const_lv32_1));
    add_ln85_1_fu_1023_p2 <= std_logic_vector(unsigned(trunc_ln85_2_fu_1019_p1) + unsigned(mul_ln219_reg_1429));
    add_ln85_fu_1083_p2 <= std_logic_vector(unsigned(trunc_ln85_1_fu_1079_p1) + unsigned(mul_ln232_reg_1435));
    and_ln208_fu_901_p2 <= (icmp_ln82_fu_896_p2 and icmp_ln208_fu_890_p2);
    and_ln237_fu_1058_p2 <= (icmp_ln82_3_fu_1053_p2 and icmp_ln208_reg_1350);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(30);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(42);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(44);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(53);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(56);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(26);
    ap_CS_fsm_state35 <= ap_CS_fsm(28);
    ap_CS_fsm_state36 <= ap_CS_fsm(29);
    ap_CS_fsm_state39 <= ap_CS_fsm(31);
    ap_CS_fsm_state42 <= ap_CS_fsm(33);
    ap_CS_fsm_state43 <= ap_CS_fsm(34);
    ap_CS_fsm_state45 <= ap_CS_fsm(36);
    ap_CS_fsm_state46 <= ap_CS_fsm(37);
    ap_CS_fsm_state49 <= ap_CS_fsm(40);
    ap_CS_fsm_state50 <= ap_CS_fsm(41);
    ap_CS_fsm_state53 <= ap_CS_fsm(43);
    ap_CS_fsm_state56 <= ap_CS_fsm(45);
    ap_CS_fsm_state58 <= ap_CS_fsm(47);
    ap_CS_fsm_state59 <= ap_CS_fsm(48);
    ap_CS_fsm_state62 <= ap_CS_fsm(51);
    ap_CS_fsm_state63 <= ap_CS_fsm(52);
    ap_CS_fsm_state66 <= ap_CS_fsm(54);
    ap_CS_fsm_state67 <= ap_CS_fsm(55);
    ap_CS_fsm_state75 <= ap_CS_fsm(61);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, axi_read_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, axi_read_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond939_reg_1306, axi_read_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond939_reg_1306 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond939_reg_1306, axi_read_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond939_reg_1306 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond928_reg_1330, axi_read_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond928_reg_1330 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond928_reg_1330, axi_read_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond928_reg_1330 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp8_stage0_11001_assign_proc : process(ap_enable_reg_pp8_iter2, ap_block_state70_io)
    begin
                ap_block_pp8_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state70_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp8_stage0_subdone_assign_proc : process(ap_enable_reg_pp8_iter2, ap_block_state70_io)
    begin
                ap_block_pp8_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state70_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(axi_read_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter1 <= (axi_read_RVALID = ap_const_logic_0);
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage0_iter1_assign_proc : process(exitcond939_reg_1306, axi_read_RVALID)
    begin
                ap_block_state22_pp1_stage0_iter1 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond939_reg_1306 = ap_const_lv1_0));
    end process;

        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_pp2_stage0_iter1_assign_proc : process(exitcond928_reg_1330, axi_read_RVALID)
    begin
                ap_block_state33_pp2_stage0_iter1 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond928_reg_1330 = ap_const_lv1_0));
    end process;

        ap_block_state34_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_on_subcall_done_assign_proc : process(ap_sync_grp_MyGemv_fu_651_ap_ready, ap_sync_grp_MyGemv_fu_651_ap_done)
    begin
                ap_block_state36_on_subcall_done <= ((ap_sync_grp_MyGemv_fu_651_ap_ready and ap_sync_grp_MyGemv_fu_651_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state37_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state50_on_subcall_done_assign_proc : process(ap_sync_grp_MyGemv_1_fu_623_ap_ready, ap_sync_grp_MyGemv_1_fu_623_ap_done)
    begin
                ap_block_state50_on_subcall_done <= ((ap_sync_grp_MyGemv_1_fu_623_ap_ready and ap_sync_grp_MyGemv_1_fu_623_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state51_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state63_on_subcall_done_assign_proc : process(ap_sync_grp_MyGemv_1_fu_623_ap_ready, ap_sync_grp_MyGemv_1_fu_623_ap_done)
    begin
                ap_block_state63_on_subcall_done <= ((ap_sync_grp_MyGemv_1_fu_623_ap_ready and ap_sync_grp_MyGemv_1_fu_623_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state64_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state70_io_assign_proc : process(exitcond1_reg_1532_pp8_iter1_reg, axi_write_WREADY)
    begin
                ap_block_state70_io <= ((axi_write_WREADY = ap_const_logic_0) and (exitcond1_reg_1532_pp8_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state70_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_assign_proc : process(icmp_ln241_reg_1522, axi_write_BVALID)
    begin
                ap_block_state75 <= ((axi_write_BVALID = ap_const_logic_0) and (icmp_ln241_reg_1522 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond9410_fu_742_p2)
    begin
        if ((exitcond9410_fu_742_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(exitcond939_fu_823_p2)
    begin
        if ((exitcond939_fu_823_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state32_assign_proc : process(exitcond928_fu_867_p2)
    begin
        if ((exitcond928_fu_867_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state37_assign_proc : process(icmp_ln82_1_fu_907_p2)
    begin
        if ((icmp_ln82_1_fu_907_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state40_assign_proc : process(icmp_ln82_2_fu_936_p2)
    begin
        if ((icmp_ln82_2_fu_936_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state40 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state51_assign_proc : process(icmp_ln82_5_fu_1003_p2)
    begin
        if ((icmp_ln82_5_fu_1003_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state51 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state54_assign_proc : process(icmp_ln82_6_fu_1037_p2)
    begin
        if ((icmp_ln82_6_fu_1037_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state54 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state64_assign_proc : process(icmp_ln82_4_fu_1063_p2)
    begin
        if ((icmp_ln82_4_fu_1063_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state64 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state64 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state68_assign_proc : process(exitcond1_fu_1121_p2)
    begin
        if ((exitcond1_fu_1121_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state68 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state75, icmp_ln241_reg_1522, axi_write_BVALID)
    begin
        if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln241_reg_1522 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter2, ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1)
    begin
        if (((ap_enable_reg_pp8_iter2 = ap_const_logic_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_loop_index55_phi_fu_538_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond928_reg_1330, loop_index55_reg_534, empty_152_reg_1334)
    begin
        if (((exitcond928_reg_1330 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_loop_index55_phi_fu_538_p4 <= empty_152_reg_1334;
        else 
            ap_phi_mux_loop_index55_phi_fu_538_p4 <= loop_index55_reg_534;
        end if; 
    end process;


    ap_phi_mux_loop_index61_phi_fu_526_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond939_reg_1306, loop_index61_reg_522, empty_149_reg_1310)
    begin
        if (((exitcond939_reg_1306 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_loop_index61_phi_fu_526_p4 <= empty_149_reg_1310;
        else 
            ap_phi_mux_loop_index61_phi_fu_526_p4 <= loop_index61_reg_522;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state75, icmp_ln241_reg_1522, axi_write_BVALID)
    begin
        if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln241_reg_1522 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_MyGemv_1_fu_623_ap_done <= (grp_MyGemv_1_fu_623_ap_done or ap_sync_reg_grp_MyGemv_1_fu_623_ap_done);
    ap_sync_grp_MyGemv_1_fu_623_ap_ready <= (grp_MyGemv_1_fu_623_ap_ready or ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready);
    ap_sync_grp_MyGemv_fu_651_ap_done <= (grp_MyGemv_fu_651_ap_done or ap_sync_reg_grp_MyGemv_fu_651_ap_done);
    ap_sync_grp_MyGemv_fu_651_ap_ready <= (grp_MyGemv_fu_651_ap_ready or ap_sync_reg_grp_MyGemv_fu_651_ap_ready);

    axi_read_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14, axi_read_ARREADY, axi_read_addr_reg_1261, axi_read_addr_1_reg_1300, axi_read_addr_2_reg_1324)
    begin
        if ((axi_read_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                axi_read_ARADDR <= axi_read_addr_2_reg_1324;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                axi_read_ARADDR <= axi_read_addr_1_reg_1300;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_read_ARADDR <= axi_read_addr_reg_1261;
            else 
                axi_read_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            axi_read_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_read_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14, axi_read_ARREADY, numberInputs_read_reg_1188, valuesToCopy_reg_1251, valuesToCopy_2_reg_1290)
    begin
        if ((axi_read_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                axi_read_ARLEN <= numberInputs_read_reg_1188;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                axi_read_ARLEN <= valuesToCopy_2_reg_1290;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_read_ARLEN <= valuesToCopy_reg_1251;
            else 
                axi_read_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            axi_read_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_read_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14, axi_read_ARREADY)
    begin
        if ((((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            axi_read_ARVALID <= ap_const_logic_1;
        else 
            axi_read_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    axi_read_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond928_reg_1330, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond939_reg_1306, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond939_reg_1306 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond928_reg_1330 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            axi_read_RREADY <= ap_const_logic_1;
        else 
            axi_read_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    axi_read_blk_n_AR_assign_proc : process(m_axi_axi_read_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            axi_read_blk_n_AR <= m_axi_axi_read_ARREADY;
        else 
            axi_read_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    axi_read_blk_n_R_assign_proc : process(m_axi_axi_read_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond928_reg_1330, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond939_reg_1306)
    begin
        if ((((exitcond939_reg_1306 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond928_reg_1330 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            axi_read_blk_n_R <= m_axi_axi_read_RVALID;
        else 
            axi_read_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    axi_write_AWVALID_assign_proc : process(ap_CS_fsm_state67, axi_write_AWREADY)
    begin
        if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            axi_write_AWVALID <= ap_const_logic_1;
        else 
            axi_write_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    axi_write_BREADY_assign_proc : process(ap_CS_fsm_state75, icmp_ln241_reg_1522, axi_write_BVALID)
    begin
        if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln241_reg_1522 = ap_const_lv1_0))) and (icmp_ln241_reg_1522 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            axi_write_BREADY <= ap_const_logic_1;
        else 
            axi_write_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    axi_write_WDATA <= layerBuffer0_load_4_reg_1546;

    axi_write_WVALID_assign_proc : process(ap_enable_reg_pp8_iter2, exitcond1_reg_1532_pp8_iter1_reg, ap_block_pp8_stage0_11001)
    begin
        if (((exitcond1_reg_1532_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
            axi_write_WVALID <= ap_const_logic_1;
        else 
            axi_write_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    axi_write_blk_n_AW_assign_proc : process(m_axi_axi_write_AWREADY, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            axi_write_blk_n_AW <= m_axi_axi_write_AWREADY;
        else 
            axi_write_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    axi_write_blk_n_B_assign_proc : process(m_axi_axi_write_BVALID, ap_CS_fsm_state75, icmp_ln241_reg_1522)
    begin
        if (((icmp_ln241_reg_1522 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            axi_write_blk_n_B <= m_axi_axi_write_BVALID;
        else 
            axi_write_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    axi_write_blk_n_W_assign_proc : process(m_axi_axi_write_WREADY, ap_enable_reg_pp8_iter2, ap_block_pp8_stage0, exitcond1_reg_1532_pp8_iter1_reg)
    begin
        if (((exitcond1_reg_1532_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            axi_write_blk_n_W <= m_axi_axi_write_WREADY;
        else 
            axi_write_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    bitcast_ln85_1_fu_1088_p1 <= layerBuffer0_q0;
    bitcast_ln85_2_fu_1028_p1 <= layerBuffer0_q0;
    bitcast_ln85_fu_927_p1 <= layerBuffer0_q0;

    bramBias_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp1_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_bias_address0, grp_MyGemv_fu_651_bias_address0, loop_index61_cast_fu_834_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_address0 <= loop_index61_cast_fu_834_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramBias_address0 <= grp_MyGemv_fu_651_bias_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramBias_address0 <= grp_MyGemv_1_fu_623_bias_address0;
        else 
            bramBias_address0 <= "XXXXXXXX";
        end if; 
    end process;


    bramBias_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp1_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_bias_ce0, grp_MyGemv_fu_651_bias_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramBias_ce0 <= grp_MyGemv_fu_651_bias_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramBias_ce0 <= grp_MyGemv_1_fu_623_bias_ce0;
        else 
            bramBias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bramBias_d0 <= axi_read_addr_1_read_reg_1315;

    bramBias_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond939_reg_1306_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((exitcond939_reg_1306_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_we0 <= ap_const_logic_1;
        else 
            bramBias_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bramLayerResults_Addr_A <= std_logic_vector(shift_left(unsigned(bramLayerResults_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    bramLayerResults_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp7_iter1, ap_block_pp3_stage0, zext_ln85_fu_932_p1, ap_block_pp5_stage0, zext_ln85_2_fu_1033_p1, ap_block_pp7_stage0, zext_ln85_1_fu_1093_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1))) then 
            bramLayerResults_Addr_A_orig <= zext_ln85_1_fu_1093_p1(32 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            bramLayerResults_Addr_A_orig <= zext_ln85_2_fu_1033_p1(32 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            bramLayerResults_Addr_A_orig <= zext_ln85_fu_932_p1(32 - 1 downto 0);
        else 
            bramLayerResults_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    bramLayerResults_Clk_A <= ap_clk;

    bramLayerResults_Din_A_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp7_iter1, ap_block_pp3_stage0, ap_block_pp5_stage0, ap_block_pp7_stage0, bitcast_ln85_fu_927_p1, bitcast_ln85_2_fu_1028_p1, bitcast_ln85_1_fu_1088_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1))) then 
            bramLayerResults_Din_A <= bitcast_ln85_1_fu_1088_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            bramLayerResults_Din_A <= bitcast_ln85_2_fu_1028_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            bramLayerResults_Din_A <= bitcast_ln85_fu_927_p1;
        else 
            bramLayerResults_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramLayerResults_EN_A_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp7_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)))) then 
            bramLayerResults_EN_A <= ap_const_logic_1;
        else 
            bramLayerResults_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    bramLayerResults_Rst_A_assign_proc : process(ap_rst_n)
    begin
                bramLayerResults_Rst_A <= not(ap_rst_n);
    end process;


    bramLayerResults_WEN_A_assign_proc : process(icmp_ln82_1_reg_1363, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln82_5_reg_1451, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, icmp_ln82_4_reg_1503, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp7_iter1)
    begin
        if ((((icmp_ln82_4_reg_1503 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)) or ((icmp_ln82_5_reg_1451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((icmp_ln82_1_reg_1363 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)))) then 
            bramLayerResults_WEN_A <= ap_const_lv4_F;
        else 
            bramLayerResults_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;


    bramWeight_0_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_0_address0, grp_MyGemv_fu_651_weights_0_address0, newIndex_cast_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_0_address0 <= newIndex_cast_fu_778_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_0_address0 <= grp_MyGemv_fu_651_weights_0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_0_address0 <= grp_MyGemv_1_fu_623_weights_0_address0;
        else 
            bramWeight_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramWeight_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_0_ce0, grp_MyGemv_fu_651_weights_0_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_0_ce0 <= grp_MyGemv_fu_651_weights_0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_0_ce0 <= grp_MyGemv_1_fu_623_weights_0_ce0;
        else 
            bramWeight_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_0_ce1_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_0_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_0_ce1 <= grp_MyGemv_1_fu_623_weights_0_ce1;
        else 
            bramWeight_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, empty_148_reg_1276_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((empty_148_reg_1276_pp0_iter1_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_0_we0 <= ap_const_logic_1;
        else 
            bramWeight_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_1_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_1_address0, grp_MyGemv_fu_651_weights_1_address0, newIndex_cast_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_1_address0 <= newIndex_cast_fu_778_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_1_address0 <= grp_MyGemv_fu_651_weights_1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_1_address0 <= grp_MyGemv_1_fu_623_weights_1_address0;
        else 
            bramWeight_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramWeight_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_1_ce0, grp_MyGemv_fu_651_weights_1_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_1_ce0 <= grp_MyGemv_fu_651_weights_1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_1_ce0 <= grp_MyGemv_1_fu_623_weights_1_ce0;
        else 
            bramWeight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_1_ce1_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_1_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_1_ce1 <= grp_MyGemv_1_fu_623_weights_1_ce1;
        else 
            bramWeight_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, empty_148_reg_1276_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((empty_148_reg_1276_pp0_iter1_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_1_we0 <= ap_const_logic_1;
        else 
            bramWeight_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_2_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_2_address0, grp_MyGemv_fu_651_weights_2_address0, newIndex_cast_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_2_address0 <= newIndex_cast_fu_778_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_2_address0 <= grp_MyGemv_fu_651_weights_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_2_address0 <= grp_MyGemv_1_fu_623_weights_2_address0;
        else 
            bramWeight_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramWeight_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_2_ce0, grp_MyGemv_fu_651_weights_2_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_2_ce0 <= grp_MyGemv_fu_651_weights_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_2_ce0 <= grp_MyGemv_1_fu_623_weights_2_ce0;
        else 
            bramWeight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_2_ce1_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_2_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_2_ce1 <= grp_MyGemv_1_fu_623_weights_2_ce1;
        else 
            bramWeight_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, empty_148_reg_1276_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((empty_148_reg_1276_pp0_iter1_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_2_we0 <= ap_const_logic_1;
        else 
            bramWeight_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_3_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_3_address0, grp_MyGemv_fu_651_weights_3_address0, newIndex_cast_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_3_address0 <= newIndex_cast_fu_778_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_3_address0 <= grp_MyGemv_fu_651_weights_3_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_3_address0 <= grp_MyGemv_1_fu_623_weights_3_address0;
        else 
            bramWeight_3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramWeight_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_3_ce0, grp_MyGemv_fu_651_weights_3_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_3_ce0 <= grp_MyGemv_fu_651_weights_3_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_3_ce0 <= grp_MyGemv_1_fu_623_weights_3_ce0;
        else 
            bramWeight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_3_ce1_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_3_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_3_ce1 <= grp_MyGemv_1_fu_623_weights_3_ce1;
        else 
            bramWeight_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, empty_148_reg_1276_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((empty_148_reg_1276_pp0_iter1_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_3_we0 <= ap_const_logic_1;
        else 
            bramWeight_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_4_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_4_address0, grp_MyGemv_fu_651_weights_4_address0, newIndex_cast_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_4_address0 <= newIndex_cast_fu_778_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_4_address0 <= grp_MyGemv_fu_651_weights_4_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_4_address0 <= grp_MyGemv_1_fu_623_weights_4_address0;
        else 
            bramWeight_4_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramWeight_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_4_ce0, grp_MyGemv_fu_651_weights_4_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_4_ce0 <= grp_MyGemv_fu_651_weights_4_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_4_ce0 <= grp_MyGemv_1_fu_623_weights_4_ce0;
        else 
            bramWeight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_4_ce1_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_4_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_4_ce1 <= grp_MyGemv_1_fu_623_weights_4_ce1;
        else 
            bramWeight_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, empty_148_reg_1276_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((empty_148_reg_1276_pp0_iter1_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_4_we0 <= ap_const_logic_1;
        else 
            bramWeight_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_5_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_5_address0, grp_MyGemv_fu_651_weights_5_address0, newIndex_cast_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_5_address0 <= newIndex_cast_fu_778_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_5_address0 <= grp_MyGemv_fu_651_weights_5_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_5_address0 <= grp_MyGemv_1_fu_623_weights_5_address0;
        else 
            bramWeight_5_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramWeight_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_5_ce0, grp_MyGemv_fu_651_weights_5_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_5_ce0 <= grp_MyGemv_fu_651_weights_5_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_5_ce0 <= grp_MyGemv_1_fu_623_weights_5_ce0;
        else 
            bramWeight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_5_ce1_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_5_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_5_ce1 <= grp_MyGemv_1_fu_623_weights_5_ce1;
        else 
            bramWeight_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, empty_148_reg_1276_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((empty_148_reg_1276_pp0_iter1_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_5_we0 <= ap_const_logic_1;
        else 
            bramWeight_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_6_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_6_address0, grp_MyGemv_fu_651_weights_6_address0, newIndex_cast_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_6_address0 <= newIndex_cast_fu_778_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_6_address0 <= grp_MyGemv_fu_651_weights_6_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_6_address0 <= grp_MyGemv_1_fu_623_weights_6_address0;
        else 
            bramWeight_6_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramWeight_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_6_ce0, grp_MyGemv_fu_651_weights_6_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_6_ce0 <= grp_MyGemv_fu_651_weights_6_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_6_ce0 <= grp_MyGemv_1_fu_623_weights_6_ce0;
        else 
            bramWeight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_6_ce1_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_6_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_6_ce1 <= grp_MyGemv_1_fu_623_weights_6_ce1;
        else 
            bramWeight_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, empty_148_reg_1276_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((empty_148_reg_1276_pp0_iter1_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_6_we0 <= ap_const_logic_1;
        else 
            bramWeight_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_7_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_7_address0, grp_MyGemv_fu_651_weights_7_address0, newIndex_cast_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_7_address0 <= newIndex_cast_fu_778_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_7_address0 <= grp_MyGemv_fu_651_weights_7_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_7_address0 <= grp_MyGemv_1_fu_623_weights_7_address0;
        else 
            bramWeight_7_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramWeight_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_enable_reg_pp0_iter2, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_7_ce0, grp_MyGemv_fu_651_weights_7_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            bramWeight_7_ce0 <= grp_MyGemv_fu_651_weights_7_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_7_ce0 <= grp_MyGemv_1_fu_623_weights_7_ce0;
        else 
            bramWeight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_7_ce1_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_weights_7_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            bramWeight_7_ce1 <= grp_MyGemv_1_fu_623_weights_7_ce1;
        else 
            bramWeight_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, empty_148_reg_1276_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((empty_148_reg_1276_pp0_iter1_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_7_we0 <= ap_const_logic_1;
        else 
            bramWeight_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_146_fu_747_p2 <= std_logic_vector(unsigned(loop_index67_reg_511) + unsigned(ap_const_lv32_1));
    empty_147_fu_767_p1 <= axi_read_addr_read_reg_1285;
    empty_148_fu_753_p1 <= loop_index67_reg_511(3 - 1 downto 0);
    empty_149_fu_828_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index61_phi_fu_526_p4) + unsigned(ap_const_lv32_1));
    empty_152_fu_872_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index55_phi_fu_538_p4) + unsigned(ap_const_lv32_1));
    empty_154_fu_952_p1 <= numberLayers_read_reg_1226(8 - 1 downto 0);
    empty_155_fu_955_p1 <= numberLayers_read_reg_1226(12 - 1 downto 0);
    empty_157_fu_1126_p2 <= std_logic_vector(unsigned(loop_index_reg_612) + unsigned(ap_const_lv32_1));
    exitcond1_fu_1121_p2 <= "1" when (loop_index_reg_612 = numberOutputs_read_reg_1234) else "0";
    exitcond928_fu_867_p2 <= "1" when (ap_phi_mux_loop_index55_phi_fu_538_p4 = numberInputs_read_reg_1188) else "0";
    exitcond939_fu_823_p2 <= "1" when (ap_phi_mux_loop_index61_phi_fu_526_p4 = valuesToCopy_2_reg_1290) else "0";
    exitcond9410_fu_742_p2 <= "1" when (loop_index67_reg_511 = valuesToCopy_reg_1251) else "0";

    grp_MyGemv_1_fu_623_ap_continue_assign_proc : process(ap_CS_fsm_state63, ap_block_state63_on_subcall_done, ap_CS_fsm_state50, ap_block_state50_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50)))) then 
            grp_MyGemv_1_fu_623_ap_continue <= ap_const_logic_1;
        else 
            grp_MyGemv_1_fu_623_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_MyGemv_1_fu_623_ap_start <= grp_MyGemv_1_fu_623_ap_start_reg;

    grp_MyGemv_1_fu_623_bias_offset_assign_proc : process(mul_ln219_reg_1429, mul_ln232_reg_1435, ap_CS_fsm_state63, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_MyGemv_1_fu_623_bias_offset <= mul_ln232_reg_1435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_MyGemv_1_fu_623_bias_offset <= mul_ln219_reg_1429;
        else 
            grp_MyGemv_1_fu_623_bias_offset <= "XXXXXXXX";
        end if; 
    end process;


    grp_MyGemv_1_fu_623_p_n_assign_proc : process(numberNeurons_read_reg_1203, numberOutputs_read_reg_1234, ap_CS_fsm_state63, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_MyGemv_1_fu_623_p_n <= numberOutputs_read_reg_1234;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_MyGemv_1_fu_623_p_n <= numberNeurons_read_reg_1203;
        else 
            grp_MyGemv_1_fu_623_p_n <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_MyGemv_1_fu_623_weights_offset_assign_proc : process(mul_ln217_1_reg_1446, mul_ln230_1_reg_1494, ap_CS_fsm_state63, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_MyGemv_1_fu_623_weights_offset <= mul_ln230_1_reg_1494;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_MyGemv_1_fu_623_weights_offset <= mul_ln217_1_reg_1446;
        else 
            grp_MyGemv_1_fu_623_weights_offset <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_MyGemv_fu_651_ap_continue_assign_proc : process(ap_CS_fsm_state36, ap_block_state36_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_MyGemv_fu_651_ap_continue <= ap_const_logic_1;
        else 
            grp_MyGemv_fu_651_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_MyGemv_fu_651_ap_start <= grp_MyGemv_fu_651_ap_start_reg;
    grp_fu_1141_p1 <= i_7_reg_568(12 - 1 downto 0);
    icmp_ln185_fu_677_p2 <= "1" when (loadParameters = ap_const_lv32_0) else "0";
    icmp_ln193_fu_717_p2 <= "1" when (valuesToCopy_fu_712_p2 = ap_const_lv32_0) else "0";
    icmp_ln198_fu_798_p2 <= "1" when (valuesToCopy_2_fu_793_p2 = ap_const_lv32_0) else "0";
    icmp_ln203_fu_843_p2 <= "1" when (numberInputs_read_reg_1188 = ap_const_lv32_0) else "0";
    icmp_ln208_fu_890_p2 <= "0" when (exportLayers = ap_const_lv32_0) else "1";
    icmp_ln214_fu_969_p2 <= "1" when (i_7_reg_568 = sub18_reg_1406) else "0";
    icmp_ln241_fu_1097_p2 <= "1" when (numberOutputs_read_reg_1234 = ap_const_lv32_0) else "0";
    icmp_ln82_1_fu_907_p2 <= "1" when (i_reg_546 = numberNeurons_read_reg_1203) else "0";
    icmp_ln82_2_fu_936_p2 <= "1" when (i_6_reg_557 = numberNeurons_read_reg_1203) else "0";
    icmp_ln82_3_fu_1053_p2 <= "0" when (numberOutputs_read_reg_1234 = ap_const_lv32_0) else "1";
    icmp_ln82_4_fu_1063_p2 <= "1" when (i_8_reg_601 = numberOutputs_read_reg_1234) else "0";
    icmp_ln82_5_fu_1003_p2 <= "1" when (i_9_reg_579 = numberNeurons_read_reg_1203) else "0";
    icmp_ln82_6_fu_1037_p2 <= "1" when (i_10_reg_590 = numberNeurons_read_reg_1203) else "0";
    icmp_ln82_fu_896_p2 <= "0" when (numberNeurons_read_reg_1203 = ap_const_lv32_0) else "1";

    inputData_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state36, ap_enable_reg_pp2_iter2, grp_MyGemv_fu_651_input_r_address0, loop_index55_cast_fu_878_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            inputData_address0 <= loop_index55_cast_fu_878_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            inputData_address0 <= grp_MyGemv_fu_651_input_r_address0;
        else 
            inputData_address0 <= "XXX";
        end if; 
    end process;


    inputData_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state36, ap_enable_reg_pp2_iter2, grp_MyGemv_fu_651_input_r_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            inputData_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            inputData_ce0 <= grp_MyGemv_fu_651_input_r_ce0;
        else 
            inputData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputData_ce1_assign_proc : process(ap_CS_fsm_state36, grp_MyGemv_fu_651_input_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            inputData_ce1 <= grp_MyGemv_fu_651_input_r_ce1;
        else 
            inputData_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    inputData_d0 <= axi_read_addr_2_read_reg_1339;

    inputData_we0_assign_proc : process(ap_block_pp2_stage0_11001, exitcond928_reg_1330_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((exitcond928_reg_1330_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            inputData_we0 <= ap_const_logic_1;
        else 
            inputData_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer0_address0_assign_proc : process(ap_block_pp8_stage0, ap_CS_fsm_state36, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln82_1_fu_947_p1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, zext_ln82_4_fu_1048_p1, ap_CS_fsm_state63, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_outputPort_address0, grp_MyGemv_fu_651_outputPort_address0, zext_ln82_fu_918_p1, ap_block_pp3_stage0, ap_block_pp4_stage0, zext_ln82_3_fu_1014_p1, ap_block_pp5_stage0, ap_block_pp6_stage0, zext_ln82_2_fu_1074_p1, ap_block_pp7_stage0, loop_index_cast_fu_1132_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1))) then 
            layerBuffer0_address0 <= loop_index_cast_fu_1132_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            layerBuffer0_address0 <= zext_ln82_2_fu_1074_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            layerBuffer0_address0 <= zext_ln82_4_fu_1048_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            layerBuffer0_address0 <= zext_ln82_3_fu_1014_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            layerBuffer0_address0 <= zext_ln82_1_fu_947_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            layerBuffer0_address0 <= zext_ln82_fu_918_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layerBuffer0_address0 <= grp_MyGemv_fu_651_outputPort_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            layerBuffer0_address0 <= grp_MyGemv_1_fu_623_outputPort_address0;
        else 
            layerBuffer0_address0 <= "XXXXX";
        end if; 
    end process;


    layerBuffer0_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, ap_CS_fsm_state63, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_enable_reg_pp8_iter0, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_outputPort_ce0, grp_MyGemv_fu_651_outputPort_ce0)
    begin
        if ((((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1)))) then 
            layerBuffer0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layerBuffer0_ce0 <= grp_MyGemv_fu_651_outputPort_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            layerBuffer0_ce0 <= grp_MyGemv_1_fu_623_outputPort_ce0;
        else 
            layerBuffer0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer0_d0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_outputPort_d0, grp_MyGemv_fu_651_outputPort_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layerBuffer0_d0 <= grp_MyGemv_fu_651_outputPort_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            layerBuffer0_d0 <= grp_MyGemv_1_fu_623_outputPort_d0;
        else 
            layerBuffer0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layerBuffer0_we0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_outputPort_we0, grp_MyGemv_fu_651_outputPort_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layerBuffer0_we0 <= grp_MyGemv_fu_651_outputPort_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            layerBuffer0_we0 <= grp_MyGemv_1_fu_623_outputPort_we0;
        else 
            layerBuffer0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer1_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, zext_ln82_1_reg_1391, ap_CS_fsm_pp6_stage0, zext_ln82_4_reg_1479, ap_CS_fsm_state63, ap_enable_reg_pp4_iter1, ap_CS_fsm_state50, ap_enable_reg_pp6_iter1, grp_MyGemv_1_fu_623_input_r_address0, ap_block_pp4_stage0, ap_block_pp6_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            layerBuffer1_address0 <= zext_ln82_4_reg_1479(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            layerBuffer1_address0 <= zext_ln82_1_reg_1391(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            layerBuffer1_address0 <= grp_MyGemv_1_fu_623_input_r_address0;
        else 
            layerBuffer1_address0 <= "XXXXX";
        end if; 
    end process;


    layerBuffer1_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_CS_fsm_state63, ap_enable_reg_pp4_iter1, ap_CS_fsm_state50, ap_enable_reg_pp6_iter1, grp_MyGemv_1_fu_623_input_r_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            layerBuffer1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            layerBuffer1_ce0 <= grp_MyGemv_1_fu_623_input_r_ce0;
        else 
            layerBuffer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer1_ce1_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state50, grp_MyGemv_1_fu_623_input_r_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            layerBuffer1_ce1 <= grp_MyGemv_1_fu_623_input_r_ce1;
        else 
            layerBuffer1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer1_we0_assign_proc : process(icmp_ln82_2_reg_1382, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln82_6_reg_1470, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp4_iter1, ap_enable_reg_pp6_iter1)
    begin
        if ((((icmp_ln82_6_reg_1470 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((icmp_ln82_2_reg_1382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            layerBuffer1_we0 <= ap_const_logic_1;
        else 
            layerBuffer1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loop_index55_cast_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index55_reg_534_pp2_iter1_reg),64));
    loop_index61_cast_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index61_reg_522_pp1_iter1_reg),64));
    loop_index_cast_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_612),64));
    mul_ln190_fu_697_p1 <= std_logic_vector(signed(add_ln190_fu_691_p0) + signed(ap_const_lv32_FFFFFFFF));
    mul_ln219_fu_994_p1 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(trunc_ln217_fu_984_p1));
    newIndex_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_reg_1280_pp0_iter1_reg),64));
        p_cast17_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast1_fu_723_p4),64));

        p_cast18_cast_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_fu_804_p4),64));

        p_cast19_cast_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast3_fu_1102_p4),64));

    p_cast1_fu_723_p4 <= axiWeightInput_read_reg_1169(63 downto 2);
    p_cast2_fu_804_p4 <= axiBiasInput_read_reg_1164(63 downto 2);
    p_cast3_fu_1102_p4 <= output_read_reg_1174(63 downto 2);
        p_cast_cast_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_848_p4),64));

    p_cast_fu_848_p4 <= input_read_reg_1179(63 downto 2);
    sub18_fu_958_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(numberLayers_read_reg_1226));
    trunc_ln189_fu_683_p1 <= numberInputs(12 - 1 downto 0);
    trunc_ln190_fu_687_p0 <= numberNeurons;
    trunc_ln190_fu_687_p1 <= trunc_ln190_fu_687_p0(12 - 1 downto 0);
    trunc_ln205_fu_887_p1 <= numberNeurons_read_reg_1203(8 - 1 downto 0);
    trunc_ln217_fu_984_p1 <= i_7_reg_568(8 - 1 downto 0);
    trunc_ln85_1_fu_1079_p1 <= i_8_reg_601(8 - 1 downto 0);
    trunc_ln85_2_fu_1019_p1 <= i_9_reg_579(8 - 1 downto 0);
    trunc_ln85_fu_923_p1 <= i_reg_546(8 - 1 downto 0);
    valuesToCopy_2_fu_793_p2 <= std_logic_vector(unsigned(numberOutputs_read_reg_1234) + unsigned(valuesToCopy_1_fu_789_p2));
    valuesToCopy_fu_712_p1 <= std_logic_vector(unsigned(add_ln191_1_fu_703_p2) + unsigned(numberOutputs_read_reg_1234));
    zext_ln82_1_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_557),64));
    zext_ln82_2_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_601),64));
    zext_ln82_3_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_579),64));
    zext_ln82_4_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_590),64));
    zext_ln82_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_546),64));
    zext_ln85_1_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_reg_1517),64));
    zext_ln85_2_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_1_reg_1465),64));
    zext_ln85_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln85_reg_1377),64));
end behav;
