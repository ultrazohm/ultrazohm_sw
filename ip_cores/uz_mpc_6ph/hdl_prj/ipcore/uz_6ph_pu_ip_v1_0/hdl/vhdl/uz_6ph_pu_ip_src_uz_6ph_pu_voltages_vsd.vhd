-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_6ph_pu_vsd_voltages\uz_6ph_pu_ip_src_uz_6ph_pu_voltages_vsd.vhd
-- Created: 2022-08-23 11:32:44
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- pu_ud                         ce_out        1e-08
-- pu_uq                         ce_out        1e-08
-- pu_ux                         ce_out        1e-08
-- pu_uy                         ce_out        1e-08
-- pu_ud_AXI                     ce_out        1e-08
-- pu_uq_AXI                     ce_out        1e-08
-- pu_ux_AXI                     ce_out        1e-08
-- pu_uy_AXI                     ce_out        1e-08
-- calc_done                     ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_6ph_pu_ip_src_uz_6ph_pu_voltages_vsd
-- Source Path: uz_6ph_pu_vsd_voltages/uz_6ph_pu_voltages_vsd
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_6ph_pu_ip_src_uz_6ph_pu_voltages_vsd IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        v_DC_pu                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        sin_angle                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        cos_angle                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        index                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        index_select                      :   IN    std_logic;
        index_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        trigger                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        pu_ud                             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_uq                             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_ux                             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_uy                             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_ud_AXI                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_uq_AXI                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_ux_AXI                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_uy_AXI                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        calc_done                         :   OUT   std_logic
        );
END uz_6ph_pu_ip_src_uz_6ph_pu_voltages_vsd;


ARCHITECTURE rtl OF uz_6ph_pu_ip_src_uz_6ph_pu_voltages_vsd IS

  -- Component Declarations
  COMPONENT uz_6ph_pu_ip_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_6ph_pu_ip_src_finite_control_set
    PORT( v_DC_pu                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          sin_angle                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          cos_angle                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          index                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          pu_ud                           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
          pu_uq                           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
          pu_ux                           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
          pu_uy                           :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En24
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_6ph_pu_ip_src_Detect_Rise_Positive
    USE ENTITY work.uz_6ph_pu_ip_src_Detect_Rise_Positive(rtl);

  FOR ALL : uz_6ph_pu_ip_src_finite_control_set
    USE ENTITY work.uz_6ph_pu_ip_src_finite_control_set(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL v_DC_pu_signed                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay9_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch27_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay56_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL sin_angle_signed                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay10_out1                     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Switch1_out1                     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay2_out1                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL cos_angle_signed                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay11_out1                     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Switch2_out1                     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay3_out1                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay16_ctrl_const_out           : std_logic;
  SIGNAL Delay16_ctrl_delay_out           : std_logic;
  SIGNAL Delay16_Initial_Val_out          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Delay15_out1                     : std_logic;
  SIGNAL Delay15_out1_dtc                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch5_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay16_out                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay16_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Delay14_ctrl_const_out           : std_logic;
  SIGNAL Delay14_ctrl_delay_out           : std_logic;
  SIGNAL Delay14_Initial_Val_out          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL index_AXI_unsigned               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay13_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch4_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay14_out                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay14_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL Delay8_ctrl_const_out            : std_logic;
  SIGNAL Delay8_ctrl_delay_out            : std_logic;
  SIGNAL Delay8_Initial_Val_out           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL index_unsigned                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay12_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch3_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay8_out                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay8_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL pu_ud_1                          : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL pu_uq_1                          : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL pu_ux_1                          : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL pu_uy_1                          : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL pu_ud_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_ud_tmp                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_uq_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_uq_tmp                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_ux_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_ux_tmp                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_uy_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_uy_tmp                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay1_out1                      : std_logic;

BEGIN
  -- 0=AXI 1=PL

  u_Detect_Rise_Positive : uz_6ph_pu_ip_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay_out1,
              Y => Detect_Rise_Positive_out1
              );

  u_finite_control_set : uz_6ph_pu_ip_src_finite_control_set
    PORT MAP( v_DC_pu => std_logic_vector(Switch27_out1),  -- sfix18_En15
              sin_angle => std_logic_vector(Switch1_out1),  -- sfix18_En16
              cos_angle => std_logic_vector(Switch2_out1),  -- sfix18_En16
              index => std_logic_vector(Switch_out1),  -- uint32
              pu_ud => pu_ud_1,  -- sfix27_En24
              pu_uq => pu_uq_1,  -- sfix27_En24
              pu_ux => pu_ux_1,  -- sfix27_En24
              pu_uy => pu_uy_1  -- sfix27_En24
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= trigger;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  switch_compare_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  v_DC_pu_signed <= signed(v_DC_pu);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay9_out1 <= v_DC_pu_signed;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay56_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay56_out1 <= Switch27_out1;
      END IF;
    END IF;
  END PROCESS Delay56_process;


  
  Switch27_out1 <= Delay56_out1 WHEN switch_compare_1 = '0' ELSE
      Delay9_out1;

  
  switch_compare_1_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  sin_angle_signed <= signed(sin_angle);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay10_out1 <= sin_angle_signed;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch1_out1 <= Delay2_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay10_out1;

  
  switch_compare_1_2 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  cos_angle_signed <= signed(cos_angle);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay11_out1 <= cos_angle_signed;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch2_out1 <= Delay3_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay11_out1;

  Delay16_ctrl_const_out <= '1';

  Delay16_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        Delay16_ctrl_delay_out <= Delay16_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay16_ctrl_delay_process;


  Delay16_Initial_Val_out <= to_unsigned(1, 32);

  
  switch_compare_1_3 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay15_out1 <= index_select;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  Delay15_out1_dtc <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Delay15_out1;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay16_out <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Delay16_out1 <= Delay16_Initial_Val_out WHEN Delay16_ctrl_delay_out = '0' ELSE
      Delay16_out;

  
  Switch5_out1 <= Delay16_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay15_out1_dtc;

  
  switch_compare_1_4 <= '1' WHEN Switch5_out1 > to_unsigned(0, 32) ELSE
      '0';

  
  switch_compare_1_5 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Delay14_ctrl_const_out <= '1';

  Delay14_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        Delay14_ctrl_delay_out <= Delay14_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay14_ctrl_delay_process;


  Delay14_Initial_Val_out <= to_unsigned(1, 32);

  index_AXI_unsigned <= unsigned(index_AXI);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay13_out1 <= index_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay14_out <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Delay14_out1 <= Delay14_Initial_Val_out WHEN Delay14_ctrl_delay_out = '0' ELSE
      Delay14_out;

  
  Switch4_out1 <= Delay14_out1 WHEN switch_compare_1_5 = '0' ELSE
      Delay13_out1;

  
  switch_compare_1_6 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Delay8_ctrl_const_out <= '1';

  Delay8_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        Delay8_ctrl_delay_out <= Delay8_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay8_ctrl_delay_process;


  Delay8_Initial_Val_out <= to_unsigned(1, 32);

  index_unsigned <= unsigned(index);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay12_out1 <= index_unsigned;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay8_out <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Delay8_out1 <= Delay8_Initial_Val_out WHEN Delay8_ctrl_delay_out = '0' ELSE
      Delay8_out;

  
  Switch3_out1 <= Delay8_out1 WHEN switch_compare_1_6 = '0' ELSE
      Delay12_out1;

  
  Switch_out1 <= Switch4_out1 WHEN switch_compare_1_4 = '0' ELSE
      Switch3_out1;

  pu_ud_signed <= signed(pu_ud_1);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pu_ud_tmp <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        pu_ud_tmp <= pu_ud_signed;
      END IF;
    END IF;
  END PROCESS reduced_process;


  pu_ud <= std_logic_vector(pu_ud_tmp);

  pu_uq_signed <= signed(pu_uq_1);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pu_uq_tmp <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        pu_uq_tmp <= pu_uq_signed;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  pu_uq <= std_logic_vector(pu_uq_tmp);

  pu_ux_signed <= signed(pu_ux_1);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pu_ux_tmp <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        pu_ux_tmp <= pu_ux_signed;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  pu_ux <= std_logic_vector(pu_ux_tmp);

  pu_uy_signed <= signed(pu_uy_1);

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pu_uy_tmp <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        pu_uy_tmp <= pu_uy_signed;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  pu_uy <= std_logic_vector(pu_uy_tmp);

  pu_ud_AXI <= std_logic_vector(pu_ud_tmp);

  pu_uq_AXI <= std_logic_vector(pu_uq_tmp);

  pu_ux_AXI <= std_logic_vector(pu_ux_tmp);

  pu_uy_AXI <= std_logic_vector(pu_uy_tmp);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= Detect_Rise_Positive_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  ce_out <= clk_enable;

  calc_done <= Delay1_out1;

END rtl;

