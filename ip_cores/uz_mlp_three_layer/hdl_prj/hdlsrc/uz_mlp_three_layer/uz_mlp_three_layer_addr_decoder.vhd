-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/uz_mlp_three_layer/uz_mlp_three_layer_addr_decoder.vhd
-- Created: 2021-02-12 15:30:37
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_mlp_three_layer_addr_decoder
-- Source Path: uz_mlp_three_layer/uz_mlp_three_layer_axi4/uz_mlp_three_layer_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_mlp_three_layer_pkg.ALL;

ENTITY uz_mlp_three_layer_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_axi_valid_output             :   IN    std_logic;  -- ufix1
        read_axi_nn_output                :   IN    vector_of_std_logic_vector32(0 TO 7);  -- sfix32_En14 [8]
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_axi_enable_nn               :   OUT   std_logic;  -- ufix1
        write_enable_nn                   :   OUT   std_logic;  -- ufix1
        write_axi_bias                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        write_axi_weight                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        write_axi_bias_addr               :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        write_axi_weight_addr             :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        write_axi_wrEnBias                :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        write_axi_wrEnWeights             :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        write_axi_layerNr                 :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        write_use_axi_input               :   OUT   std_logic;  -- ufix1
        write_axi_number_of_inputs        :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        write_axi_output_number_configuration :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        write_axi_x_input                 :   OUT   vector_of_std_logic_vector32(0 TO 15)  -- sfix32_En14 [16]
        );
END uz_mlp_three_layer_addr_decoder;


ARCHITECTURE rtl OF uz_mlp_three_layer_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_nn_output_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_valid_output_1_1  : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_axi_valid_output        : std_logic;  -- ufix1
  SIGNAL data_slice_axi_valid_output_1    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_valid_output_1_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_nn_output         : std_logic;  -- ufix1
  SIGNAL strobe_sel_axi_nn_output         : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL strobe_in_axi_nn_output          : std_logic;  -- ufix1
  SIGNAL strobe_sw_axi_nn_output          : std_logic;  -- ufix1
  SIGNAL strobe_reg_axi_nn_output         : std_logic;  -- ufix1
  SIGNAL read_axi_nn_output_signed        : vector_of_signed32(0 TO 7);  -- sfix32_En14 [8]
  SIGNAL sync_reg_axi_nn_output           : vector_of_signed32(0 TO 7);  -- sfix32_En14 [8]
  SIGNAL dtc_cast                         : vector_of_unsigned32(0 TO 7);  -- ufix32_En14 [8]
  SIGNAL data_slice_axi_nn_output_1       : vector_of_unsigned32(0 TO 7);  -- ufix32 [8]
  SIGNAL decode_sel_axi_nn_output_1_2     : std_logic;  -- ufix1
  SIGNAL data_slice_axi_nn_output_1_0     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_nn_output_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_nn_output_1_3     : std_logic;  -- ufix1
  SIGNAL data_slice_axi_nn_output_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_nn_output_1_2      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_nn_output_1_4     : std_logic;  -- ufix1
  SIGNAL data_slice_axi_nn_output_1_2     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_nn_output_1_3      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_nn_output_1_5     : std_logic;  -- ufix1
  SIGNAL data_slice_axi_nn_output_1_3     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_nn_output_1_4      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_nn_output_1_6     : std_logic;  -- ufix1
  SIGNAL data_slice_axi_nn_output_1_4     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_nn_output_1_5      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_nn_output_1_7     : std_logic;  -- ufix1
  SIGNAL data_slice_axi_nn_output_1_5     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_nn_output_1_6      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_nn_output_1_8     : std_logic;  -- ufix1
  SIGNAL data_slice_axi_nn_output_1_6     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_nn_output_1_7      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_axi_nn_output_1_7     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_nn_output_1_8      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable_nn_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_nn_1_1        : std_logic;  -- ufix1
  SIGNAL data_in_axi_enable_nn            : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_nn_1_1       : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_nn_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_enable_nn_1_1         : std_logic;  -- ufix1
  SIGNAL reg_enb_enable_nn_1_1            : std_logic;  -- ufix1
  SIGNAL data_in_enable_nn                : std_logic;  -- ufix1
  SIGNAL data_reg_enable_nn_1_1           : std_logic;  -- ufix1
  SIGNAL write_concats_enable_nn_1        : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_bias_1_1          : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_bias_1_1             : std_logic;  -- ufix1
  SIGNAL data_in_axi_bias                 : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_bias_1_1            : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL decode_sel_axi_weight_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_weight_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_axi_weight               : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_weight_1_1          : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL decode_sel_axi_bias_addr_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_bias_addr_1_1        : std_logic;  -- ufix1
  SIGNAL data_in_axi_bias_addr            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL data_reg_axi_bias_addr_1_1       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL decode_sel_axi_weight_addr_1_1   : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_weight_addr_1_1      : std_logic;  -- ufix1
  SIGNAL data_in_axi_weight_addr          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL data_reg_axi_weight_addr_1_1     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL decode_sel_axi_wrEnBias_1_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_wrEnBias_1_1         : std_logic;  -- ufix1
  SIGNAL data_in_axi_wrEnBias             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_reg_axi_wrEnBias_1_1        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL decode_sel_axi_wrEnWeights_1_1   : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_wrEnWeights_1_1      : std_logic;  -- ufix1
  SIGNAL data_in_axi_wrEnWeights          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_reg_axi_wrEnWeights_1_1     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL decode_sel_axi_layerNr_1_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_layerNr_1_1          : std_logic;  -- ufix1
  SIGNAL data_in_axi_layerNr              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_reg_axi_layerNr_1_1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL decode_sel_use_axi_input_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_use_axi_input_1_1        : std_logic;  -- ufix1
  SIGNAL data_in_use_axi_input            : std_logic;  -- ufix1
  SIGNAL data_reg_use_axi_input_1_1       : std_logic;  -- ufix1
  SIGNAL write_concats_use_axi_input_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_number_of_inputs_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_number_of_inputs_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_axi_number_of_inputs     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL data_reg_axi_number_of_inputs_1_1 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL decode_sel_axi_output_number_configuration_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_output_number_configuration_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_axi_output_number_configuration : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL data_reg_axi_output_number_configuration_1_1 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL decode_sel_axi_x_input           : std_logic;  -- ufix1
  SIGNAL strobe_sel_axi_x_input           : std_logic;  -- ufix1
  SIGNAL const_zero_1                     : std_logic;  -- ufix1
  SIGNAL strobe_in_axi_x_input            : std_logic;  -- ufix1
  SIGNAL strobe_sw_axi_x_input            : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_1_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_1_1          : std_logic;  -- ufix1
  SIGNAL data_in_axi_x_input              : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL decode_sel_axi_x_input_2_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_2_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_3_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_3_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_4_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_4_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_5_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_5_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_6_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_6_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_7_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_7_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_8_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_8_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_9_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_9_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_10_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_10_1         : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_11_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_11_1         : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_12_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_12_1         : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_13_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_13_1         : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_14_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_14_1         : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_15_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_15_1         : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_x_input_16_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_x_input_16_1         : std_logic;  -- ufix1
  SIGNAL strobe_reg_axi_x_input           : std_logic;  -- ufix1
  SIGNAL data_reg_axi_x_input_1_1         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_2_1         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_3_1         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_4_1         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_5_1         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_6_1         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_7_1         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_8_1         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_9_1         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_10_1        : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_11_1        : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_12_1        : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_13_1        : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_14_1        : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_15_1        : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL data_reg_axi_x_input_16_1        : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL write_reg_axi_x_input            : vector_of_signed32(0 TO 15);  -- sfix32_En14 [16]
  SIGNAL sync_reg_axi_x_input_1           : vector_of_signed32(0 TO 15);  -- sfix32_En14 [16]

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_axi_nn_output_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0068#, 14) ELSE
      '0';

  
  decode_sel_axi_valid_output_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_axi_valid_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_axi_valid_output <= '0';
      ELSIF enb = '1' THEN
        read_reg_axi_valid_output <= read_axi_valid_output;
      END IF;
    END IF;
  END PROCESS reg_axi_valid_output_process;


  data_slice_axi_valid_output_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_axi_valid_output;

  
  decode_rd_axi_valid_output_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_axi_valid_output_1_1 = '0' ELSE
      data_slice_axi_valid_output_1;

  
  decode_sel_axi_nn_output <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0070#, 14) ELSE
      '0';

  strobe_sel_axi_nn_output <= decode_sel_axi_nn_output AND wr_enb;

  const_zero <= '0';

  data_write_unsigned <= unsigned(data_write);

  strobe_in_axi_nn_output <= data_write_unsigned(0);

  
  strobe_sw_axi_nn_output <= const_zero WHEN strobe_sel_axi_nn_output = '0' ELSE
      strobe_in_axi_nn_output;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_axi_nn_output <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_axi_nn_output <= strobe_sw_axi_nn_output;
      END IF;
    END IF;
  END PROCESS reg_process;


  outputgen1: FOR k IN 0 TO 7 GENERATE
    read_axi_nn_output_signed(k) <= signed(read_axi_nn_output(k));
  END GENERATE;

  reg_axi_nn_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_axi_nn_output <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' AND strobe_reg_axi_nn_output = '1' THEN
        sync_reg_axi_nn_output <= read_axi_nn_output_signed;
      END IF;
    END IF;
  END PROCESS reg_axi_nn_output_process;



  data_slice_axi_nn_output_1_gen: FOR ii IN 0 TO 7 GENERATE
    dtc_cast(ii) <= unsigned(sync_reg_axi_nn_output(ii));
    data_slice_axi_nn_output_1(ii) <= dtc_cast(ii);
  END GENERATE data_slice_axi_nn_output_1_gen;


  
  decode_sel_axi_nn_output_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0069#, 14) ELSE
      '0';

  data_slice_axi_nn_output_1_0 <= data_slice_axi_nn_output_1(0);

  
  decode_rd_axi_nn_output_1_1 <= decode_rd_axi_valid_output_1_1 WHEN decode_sel_axi_nn_output_1_1 = '0' ELSE
      data_slice_axi_nn_output_1_0;

  
  decode_sel_axi_nn_output_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006A#, 14) ELSE
      '0';

  data_slice_axi_nn_output_1_1 <= data_slice_axi_nn_output_1(1);

  
  decode_rd_axi_nn_output_1_2 <= decode_rd_axi_nn_output_1_1 WHEN decode_sel_axi_nn_output_1_2 = '0' ELSE
      data_slice_axi_nn_output_1_1;

  
  decode_sel_axi_nn_output_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006B#, 14) ELSE
      '0';

  data_slice_axi_nn_output_1_2 <= data_slice_axi_nn_output_1(2);

  
  decode_rd_axi_nn_output_1_3 <= decode_rd_axi_nn_output_1_2 WHEN decode_sel_axi_nn_output_1_3 = '0' ELSE
      data_slice_axi_nn_output_1_2;

  
  decode_sel_axi_nn_output_1_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006C#, 14) ELSE
      '0';

  data_slice_axi_nn_output_1_3 <= data_slice_axi_nn_output_1(3);

  
  decode_rd_axi_nn_output_1_4 <= decode_rd_axi_nn_output_1_3 WHEN decode_sel_axi_nn_output_1_4 = '0' ELSE
      data_slice_axi_nn_output_1_3;

  
  decode_sel_axi_nn_output_1_6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006D#, 14) ELSE
      '0';

  data_slice_axi_nn_output_1_4 <= data_slice_axi_nn_output_1(4);

  
  decode_rd_axi_nn_output_1_5 <= decode_rd_axi_nn_output_1_4 WHEN decode_sel_axi_nn_output_1_5 = '0' ELSE
      data_slice_axi_nn_output_1_4;

  
  decode_sel_axi_nn_output_1_7 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006E#, 14) ELSE
      '0';

  data_slice_axi_nn_output_1_5 <= data_slice_axi_nn_output_1(5);

  
  decode_rd_axi_nn_output_1_6 <= decode_rd_axi_nn_output_1_5 WHEN decode_sel_axi_nn_output_1_6 = '0' ELSE
      data_slice_axi_nn_output_1_5;

  
  decode_sel_axi_nn_output_1_8 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006F#, 14) ELSE
      '0';

  data_slice_axi_nn_output_1_6 <= data_slice_axi_nn_output_1(6);

  
  decode_rd_axi_nn_output_1_7 <= decode_rd_axi_nn_output_1_6 WHEN decode_sel_axi_nn_output_1_7 = '0' ELSE
      data_slice_axi_nn_output_1_6;

  data_slice_axi_nn_output_1_7 <= data_slice_axi_nn_output_1(7);

  
  decode_rd_axi_nn_output_1_8 <= decode_rd_axi_nn_output_1_7 WHEN decode_sel_axi_nn_output_1_8 = '0' ELSE
      data_slice_axi_nn_output_1_7;

  data_read <= std_logic_vector(decode_rd_axi_nn_output_1_8);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

  
  decode_sel_axi_enable_nn_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_axi_enable_nn_1_1 <= decode_sel_axi_enable_nn_1_1 AND wr_enb;

  data_in_axi_enable_nn <= data_write_unsigned(0);

  reg_axi_enable_nn_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_nn_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_axi_enable_nn_1_1 = '1' THEN
        data_reg_axi_enable_nn_1_1 <= data_in_axi_enable_nn;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_nn_1_1_process;


  write_concats_axi_enable_nn_1 <= data_reg_axi_enable_nn_1_1;

  write_axi_enable_nn <= write_concats_axi_enable_nn_1;

  
  decode_sel_enable_nn_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_enable_nn_1_1 <= decode_sel_enable_nn_1_1 AND wr_enb;

  data_in_enable_nn <= data_write_unsigned(0);

  reg_enable_nn_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_enable_nn_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_enable_nn_1_1 = '1' THEN
        data_reg_enable_nn_1_1 <= data_in_enable_nn;
      END IF;
    END IF;
  END PROCESS reg_enable_nn_1_1_process;


  write_concats_enable_nn_1 <= data_reg_enable_nn_1_1;

  write_enable_nn <= write_concats_enable_nn_1;

  
  decode_sel_axi_bias_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_axi_bias_1_1 <= decode_sel_axi_bias_1_1 AND wr_enb;

  data_in_axi_bias <= signed(data_write_unsigned);

  reg_axi_bias_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_bias_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_bias_1_1 = '1' THEN
        data_reg_axi_bias_1_1 <= data_in_axi_bias;
      END IF;
    END IF;
  END PROCESS reg_axi_bias_1_1_process;


  write_axi_bias <= std_logic_vector(data_reg_axi_bias_1_1);

  
  decode_sel_axi_weight_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_axi_weight_1_1 <= decode_sel_axi_weight_1_1 AND wr_enb;

  data_in_axi_weight <= signed(data_write_unsigned);

  reg_axi_weight_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_weight_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_weight_1_1 = '1' THEN
        data_reg_axi_weight_1_1 <= data_in_axi_weight;
      END IF;
    END IF;
  END PROCESS reg_axi_weight_1_1_process;


  write_axi_weight <= std_logic_vector(data_reg_axi_weight_1_1);

  
  decode_sel_axi_bias_addr_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_axi_bias_addr_1_1 <= decode_sel_axi_bias_addr_1_1 AND wr_enb;

  data_in_axi_bias_addr <= data_write_unsigned(9 DOWNTO 0);

  reg_axi_bias_addr_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_bias_addr_1_1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' AND reg_enb_axi_bias_addr_1_1 = '1' THEN
        data_reg_axi_bias_addr_1_1 <= data_in_axi_bias_addr;
      END IF;
    END IF;
  END PROCESS reg_axi_bias_addr_1_1_process;


  write_axi_bias_addr <= std_logic_vector(data_reg_axi_bias_addr_1_1);

  
  decode_sel_axi_weight_addr_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_axi_weight_addr_1_1 <= decode_sel_axi_weight_addr_1_1 AND wr_enb;

  data_in_axi_weight_addr <= data_write_unsigned(9 DOWNTO 0);

  reg_axi_weight_addr_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_weight_addr_1_1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' AND reg_enb_axi_weight_addr_1_1 = '1' THEN
        data_reg_axi_weight_addr_1_1 <= data_in_axi_weight_addr;
      END IF;
    END IF;
  END PROCESS reg_axi_weight_addr_1_1_process;


  write_axi_weight_addr <= std_logic_vector(data_reg_axi_weight_addr_1_1);

  
  decode_sel_axi_wrEnBias_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_axi_wrEnBias_1_1 <= decode_sel_axi_wrEnBias_1_1 AND wr_enb;

  data_in_axi_wrEnBias <= data_write_unsigned(7 DOWNTO 0);

  reg_axi_wrEnBias_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_wrEnBias_1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' AND reg_enb_axi_wrEnBias_1_1 = '1' THEN
        data_reg_axi_wrEnBias_1_1 <= data_in_axi_wrEnBias;
      END IF;
    END IF;
  END PROCESS reg_axi_wrEnBias_1_1_process;


  write_axi_wrEnBias <= std_logic_vector(data_reg_axi_wrEnBias_1_1);

  
  decode_sel_axi_wrEnWeights_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_axi_wrEnWeights_1_1 <= decode_sel_axi_wrEnWeights_1_1 AND wr_enb;

  data_in_axi_wrEnWeights <= data_write_unsigned(7 DOWNTO 0);

  reg_axi_wrEnWeights_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_wrEnWeights_1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' AND reg_enb_axi_wrEnWeights_1_1 = '1' THEN
        data_reg_axi_wrEnWeights_1_1 <= data_in_axi_wrEnWeights;
      END IF;
    END IF;
  END PROCESS reg_axi_wrEnWeights_1_1_process;


  write_axi_wrEnWeights <= std_logic_vector(data_reg_axi_wrEnWeights_1_1);

  
  decode_sel_axi_layerNr_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_axi_layerNr_1_1 <= decode_sel_axi_layerNr_1_1 AND wr_enb;

  data_in_axi_layerNr <= data_write_unsigned(7 DOWNTO 0);

  reg_axi_layerNr_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_layerNr_1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' AND reg_enb_axi_layerNr_1_1 = '1' THEN
        data_reg_axi_layerNr_1_1 <= data_in_axi_layerNr;
      END IF;
    END IF;
  END PROCESS reg_axi_layerNr_1_1_process;


  write_axi_layerNr <= std_logic_vector(data_reg_axi_layerNr_1_1);

  
  decode_sel_use_axi_input_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_use_axi_input_1_1 <= decode_sel_use_axi_input_1_1 AND wr_enb;

  data_in_use_axi_input <= data_write_unsigned(0);

  reg_use_axi_input_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_use_axi_input_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_use_axi_input_1_1 = '1' THEN
        data_reg_use_axi_input_1_1 <= data_in_use_axi_input;
      END IF;
    END IF;
  END PROCESS reg_use_axi_input_1_1_process;


  write_concats_use_axi_input_1 <= data_reg_use_axi_input_1_1;

  write_use_axi_input <= write_concats_use_axi_input_1;

  
  decode_sel_axi_number_of_inputs_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_axi_number_of_inputs_1_1 <= decode_sel_axi_number_of_inputs_1_1 AND wr_enb;

  data_in_axi_number_of_inputs <= data_write_unsigned(9 DOWNTO 0);

  reg_axi_number_of_inputs_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_number_of_inputs_1_1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' AND reg_enb_axi_number_of_inputs_1_1 = '1' THEN
        data_reg_axi_number_of_inputs_1_1 <= data_in_axi_number_of_inputs;
      END IF;
    END IF;
  END PROCESS reg_axi_number_of_inputs_1_1_process;


  write_axi_number_of_inputs <= std_logic_vector(data_reg_axi_number_of_inputs_1_1);

  
  decode_sel_axi_output_number_configuration_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  reg_enb_axi_output_number_configuration_1_1 <= decode_sel_axi_output_number_configuration_1_1 AND wr_enb;

  data_in_axi_output_number_configuration <= data_write_unsigned(9 DOWNTO 0);

  reg_axi_output_number_configuration_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_output_number_configuration_1_1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' AND reg_enb_axi_output_number_configuration_1_1 = '1' THEN
        data_reg_axi_output_number_configuration_1_1 <= data_in_axi_output_number_configuration;
      END IF;
    END IF;
  END PROCESS reg_axi_output_number_configuration_1_1_process;


  write_axi_output_number_configuration <= std_logic_vector(data_reg_axi_output_number_configuration_1_1);

  
  decode_sel_axi_x_input <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0060#, 14) ELSE
      '0';

  strobe_sel_axi_x_input <= decode_sel_axi_x_input AND wr_enb;

  const_zero_1 <= '0';

  strobe_in_axi_x_input <= data_write_unsigned(0);

  
  strobe_sw_axi_x_input <= const_zero_1 WHEN strobe_sel_axi_x_input = '0' ELSE
      strobe_in_axi_x_input;

  
  decode_sel_axi_x_input_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  reg_enb_axi_x_input_1_1 <= decode_sel_axi_x_input_1_1 AND wr_enb;

  data_in_axi_x_input <= signed(data_write_unsigned);

  
  decode_sel_axi_x_input_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0051#, 14) ELSE
      '0';

  reg_enb_axi_x_input_2_1 <= decode_sel_axi_x_input_2_1 AND wr_enb;

  
  decode_sel_axi_x_input_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0052#, 14) ELSE
      '0';

  reg_enb_axi_x_input_3_1 <= decode_sel_axi_x_input_3_1 AND wr_enb;

  
  decode_sel_axi_x_input_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0053#, 14) ELSE
      '0';

  reg_enb_axi_x_input_4_1 <= decode_sel_axi_x_input_4_1 AND wr_enb;

  
  decode_sel_axi_x_input_5_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0054#, 14) ELSE
      '0';

  reg_enb_axi_x_input_5_1 <= decode_sel_axi_x_input_5_1 AND wr_enb;

  
  decode_sel_axi_x_input_6_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0055#, 14) ELSE
      '0';

  reg_enb_axi_x_input_6_1 <= decode_sel_axi_x_input_6_1 AND wr_enb;

  
  decode_sel_axi_x_input_7_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0056#, 14) ELSE
      '0';

  reg_enb_axi_x_input_7_1 <= decode_sel_axi_x_input_7_1 AND wr_enb;

  
  decode_sel_axi_x_input_8_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0057#, 14) ELSE
      '0';

  reg_enb_axi_x_input_8_1 <= decode_sel_axi_x_input_8_1 AND wr_enb;

  
  decode_sel_axi_x_input_9_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0058#, 14) ELSE
      '0';

  reg_enb_axi_x_input_9_1 <= decode_sel_axi_x_input_9_1 AND wr_enb;

  
  decode_sel_axi_x_input_10_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0059#, 14) ELSE
      '0';

  reg_enb_axi_x_input_10_1 <= decode_sel_axi_x_input_10_1 AND wr_enb;

  
  decode_sel_axi_x_input_11_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005A#, 14) ELSE
      '0';

  reg_enb_axi_x_input_11_1 <= decode_sel_axi_x_input_11_1 AND wr_enb;

  
  decode_sel_axi_x_input_12_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005B#, 14) ELSE
      '0';

  reg_enb_axi_x_input_12_1 <= decode_sel_axi_x_input_12_1 AND wr_enb;

  
  decode_sel_axi_x_input_13_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005C#, 14) ELSE
      '0';

  reg_enb_axi_x_input_13_1 <= decode_sel_axi_x_input_13_1 AND wr_enb;

  
  decode_sel_axi_x_input_14_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005D#, 14) ELSE
      '0';

  reg_enb_axi_x_input_14_1 <= decode_sel_axi_x_input_14_1 AND wr_enb;

  
  decode_sel_axi_x_input_15_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005E#, 14) ELSE
      '0';

  reg_enb_axi_x_input_15_1 <= decode_sel_axi_x_input_15_1 AND wr_enb;

  
  decode_sel_axi_x_input_16_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005F#, 14) ELSE
      '0';

  reg_enb_axi_x_input_16_1 <= decode_sel_axi_x_input_16_1 AND wr_enb;

  reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_axi_x_input <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_axi_x_input <= strobe_sw_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_axi_x_input_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_1_1 = '1' THEN
        data_reg_axi_x_input_1_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_1_1_process;


  reg_axi_x_input_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_2_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_2_1 = '1' THEN
        data_reg_axi_x_input_2_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_2_1_process;


  reg_axi_x_input_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_3_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_3_1 = '1' THEN
        data_reg_axi_x_input_3_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_3_1_process;


  reg_axi_x_input_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_4_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_4_1 = '1' THEN
        data_reg_axi_x_input_4_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_4_1_process;


  reg_axi_x_input_5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_5_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_5_1 = '1' THEN
        data_reg_axi_x_input_5_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_5_1_process;


  reg_axi_x_input_6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_6_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_6_1 = '1' THEN
        data_reg_axi_x_input_6_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_6_1_process;


  reg_axi_x_input_7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_7_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_7_1 = '1' THEN
        data_reg_axi_x_input_7_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_7_1_process;


  reg_axi_x_input_8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_8_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_8_1 = '1' THEN
        data_reg_axi_x_input_8_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_8_1_process;


  reg_axi_x_input_9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_9_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_9_1 = '1' THEN
        data_reg_axi_x_input_9_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_9_1_process;


  reg_axi_x_input_10_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_10_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_10_1 = '1' THEN
        data_reg_axi_x_input_10_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_10_1_process;


  reg_axi_x_input_11_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_11_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_11_1 = '1' THEN
        data_reg_axi_x_input_11_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_11_1_process;


  reg_axi_x_input_12_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_12_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_12_1 = '1' THEN
        data_reg_axi_x_input_12_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_12_1_process;


  reg_axi_x_input_13_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_13_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_13_1 = '1' THEN
        data_reg_axi_x_input_13_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_13_1_process;


  reg_axi_x_input_14_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_14_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_14_1 = '1' THEN
        data_reg_axi_x_input_14_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_14_1_process;


  reg_axi_x_input_15_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_15_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_15_1 = '1' THEN
        data_reg_axi_x_input_15_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_15_1_process;


  reg_axi_x_input_16_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_x_input_16_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_axi_x_input_16_1 = '1' THEN
        data_reg_axi_x_input_16_1 <= data_in_axi_x_input;
      END IF;
    END IF;
  END PROCESS reg_axi_x_input_16_1_process;


  write_reg_axi_x_input(0) <= data_reg_axi_x_input_1_1;
  write_reg_axi_x_input(1) <= data_reg_axi_x_input_2_1;
  write_reg_axi_x_input(2) <= data_reg_axi_x_input_3_1;
  write_reg_axi_x_input(3) <= data_reg_axi_x_input_4_1;
  write_reg_axi_x_input(4) <= data_reg_axi_x_input_5_1;
  write_reg_axi_x_input(5) <= data_reg_axi_x_input_6_1;
  write_reg_axi_x_input(6) <= data_reg_axi_x_input_7_1;
  write_reg_axi_x_input(7) <= data_reg_axi_x_input_8_1;
  write_reg_axi_x_input(8) <= data_reg_axi_x_input_9_1;
  write_reg_axi_x_input(9) <= data_reg_axi_x_input_10_1;
  write_reg_axi_x_input(10) <= data_reg_axi_x_input_11_1;
  write_reg_axi_x_input(11) <= data_reg_axi_x_input_12_1;
  write_reg_axi_x_input(12) <= data_reg_axi_x_input_13_1;
  write_reg_axi_x_input(13) <= data_reg_axi_x_input_14_1;
  write_reg_axi_x_input(14) <= data_reg_axi_x_input_15_1;
  write_reg_axi_x_input(15) <= data_reg_axi_x_input_16_1;

  sync_reg_axi_x_input_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_axi_x_input_1 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' AND strobe_reg_axi_x_input = '1' THEN
        sync_reg_axi_x_input_1 <= write_reg_axi_x_input;
      END IF;
    END IF;
  END PROCESS sync_reg_axi_x_input_process;


  outputgen: FOR k IN 0 TO 15 GENERATE
    write_axi_x_input(k) <= std_logic_vector(sync_reg_axi_x_input_1(k));
  END GENERATE;

END rtl;

