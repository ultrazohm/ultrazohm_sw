// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_copyArray_float_8u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_input_address0,
        p_input_ce0,
        p_input_q0,
        p_input_address1,
        p_input_ce1,
        p_input_q1,
        p_output_address0,
        p_output_ce0,
        p_output_we0,
        p_output_d0,
        p_output_address1,
        p_output_ce1,
        p_output_we1,
        p_output_d1,
        p_output_offset,
        size
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] p_input_address0;
output   p_input_ce0;
input  [31:0] p_input_q0;
output  [6:0] p_input_address1;
output   p_input_ce1;
input  [31:0] p_input_q1;
output  [8:0] p_output_address0;
output   p_output_ce0;
output   p_output_we0;
output  [31:0] p_output_d0;
output  [8:0] p_output_address1;
output   p_output_ce1;
output   p_output_we1;
output  [31:0] p_output_d1;
input  [8:0] p_output_offset;
input  [31:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] p_input_address0;
reg p_input_ce0;
reg[6:0] p_input_address1;
reg p_input_ce1;
reg[8:0] p_output_address0;
reg p_output_ce0;
reg p_output_we0;
reg[31:0] p_output_d0;
reg[8:0] p_output_address1;
reg p_output_ce1;
reg p_output_we1;
reg[31:0] p_output_d1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [28:0] i_reg_216;
reg   [31:0] reg_227;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln137_reg_430;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [28:0] trunc_ln_reg_425;
wire   [0:0] icmp_ln137_fu_243_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [28:0] add_ln137_fu_248_p2;
reg   [28:0] add_ln137_reg_434;
wire   [8:0] tmp_s_fu_258_p3;
reg   [8:0] tmp_s_reg_439;
wire   [8:0] or_ln143_fu_271_p2;
reg   [8:0] or_ln143_reg_455;
wire   [8:0] or_ln143_1_fu_291_p2;
reg   [8:0] or_ln143_1_reg_465;
wire   [8:0] or_ln143_2_fu_301_p2;
reg   [8:0] or_ln143_2_reg_475;
wire   [8:0] or_ln143_3_fu_329_p2;
reg   [8:0] or_ln143_3_reg_485;
wire   [8:0] or_ln143_4_fu_339_p2;
reg   [8:0] or_ln143_4_reg_495;
wire   [8:0] add_ln143_5_fu_367_p2;
reg   [8:0] add_ln143_5_reg_505;
wire   [8:0] add_ln143_6_fu_381_p2;
reg   [8:0] add_ln143_6_reg_515;
wire   [8:0] add_ln143_7_fu_396_p2;
reg   [8:0] add_ln143_7_reg_525;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage4_subdone;
reg   [28:0] ap_phi_mux_i_phi_fu_220_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln143_fu_266_p1;
wire   [63:0] zext_ln143_9_fu_277_p1;
wire   [63:0] zext_ln143_8_fu_286_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln143_11_fu_296_p1;
wire   [63:0] zext_ln143_13_fu_306_p1;
wire   [63:0] zext_ln143_10_fu_315_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln143_12_fu_324_p1;
wire   [63:0] zext_ln143_15_fu_334_p1;
wire   [63:0] zext_ln143_17_fu_344_p1;
wire   [63:0] zext_ln143_14_fu_353_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln143_16_fu_362_p1;
wire   [63:0] zext_ln143_19_fu_376_p1;
wire   [63:0] zext_ln143_21_fu_391_p1;
wire   [63:0] zext_ln143_18_fu_401_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln143_20_fu_405_p1;
wire   [63:0] zext_ln143_22_fu_409_p1;
wire   [5:0] empty_fu_254_p1;
wire   [8:0] add_ln143_fu_282_p2;
wire   [8:0] add_ln143_1_fu_311_p2;
wire   [8:0] add_ln143_2_fu_320_p2;
wire   [8:0] add_ln143_3_fu_349_p2;
wire   [8:0] add_ln143_4_fu_358_p2;
wire   [8:0] or_ln143_5_fu_371_p2;
wire   [8:0] or_ln143_6_fu_386_p2;
wire    ap_CS_fsm_state8;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_216 <= add_ln137_reg_434;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_216 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln137_reg_434 <= add_ln137_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln143_5_reg_505 <= add_ln143_5_fu_367_p2;
        add_ln143_6_reg_515 <= add_ln143_6_fu_381_p2;
        add_ln143_7_reg_525 <= add_ln143_7_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln137_reg_430 <= icmp_ln137_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln143_1_reg_465[8 : 3] <= or_ln143_1_fu_291_p2[8 : 3];
        or_ln143_2_reg_475[8 : 3] <= or_ln143_2_fu_301_p2[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        or_ln143_3_reg_485[8 : 3] <= or_ln143_3_fu_329_p2[8 : 3];
        or_ln143_4_reg_495[8 : 3] <= or_ln143_4_fu_339_p2[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln137_fu_243_p2 == 1'd0))) begin
        or_ln143_reg_455[8 : 3] <= or_ln143_fu_271_p2[8 : 3];
        tmp_s_reg_439[8 : 3] <= tmp_s_fu_258_p3[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        reg_227 <= p_input_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln_reg_425 <= {{size[31:3]}};
    end
end

always @ (*) begin
    if ((icmp_ln137_fu_243_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_220_p4 = add_ln137_reg_434;
    end else begin
        ap_phi_mux_i_phi_fu_220_p4 = i_reg_216;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_input_address0 = zext_ln143_21_fu_391_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_input_address0 = zext_ln143_17_fu_344_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_input_address0 = zext_ln143_13_fu_306_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_input_address0 = zext_ln143_9_fu_277_p1;
        end else begin
            p_input_address0 = 'bx;
        end
    end else begin
        p_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_input_address1 = zext_ln143_19_fu_376_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_input_address1 = zext_ln143_15_fu_334_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_input_address1 = zext_ln143_11_fu_296_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_input_address1 = zext_ln143_fu_266_p1;
        end else begin
            p_input_address1 = 'bx;
        end
    end else begin
        p_input_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_input_ce0 = 1'b1;
    end else begin
        p_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_input_ce1 = 1'b1;
    end else begin
        p_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_output_address0 = zext_ln143_22_fu_409_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_output_address0 = zext_ln143_18_fu_401_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_output_address0 = zext_ln143_14_fu_353_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_output_address0 = zext_ln143_12_fu_324_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_output_address0 = zext_ln143_8_fu_286_p1;
    end else begin
        p_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            p_output_address1 = zext_ln143_20_fu_405_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_output_address1 = zext_ln143_16_fu_362_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_output_address1 = zext_ln143_10_fu_315_p1;
        end else begin
            p_output_address1 = 'bx;
        end
    end else begin
        p_output_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        p_output_ce0 = 1'b1;
    end else begin
        p_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        p_output_ce1 = 1'b1;
    end else begin
        p_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        p_output_d0 = reg_227;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_output_d0 = p_input_q1;
    end else begin
        p_output_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        p_output_d1 = p_input_q1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_output_d1 = reg_227;
    end else begin
        p_output_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        p_output_we0 = 1'b1;
    end else begin
        p_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln137_reg_430 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        p_output_we1 = 1'b1;
    end else begin
        p_output_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln137_fu_243_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln137_fu_243_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln137_fu_248_p2 = (ap_phi_mux_i_phi_fu_220_p4 + 29'd1);

assign add_ln143_1_fu_311_p2 = (p_output_offset + or_ln143_reg_455);

assign add_ln143_2_fu_320_p2 = (p_output_offset + or_ln143_1_reg_465);

assign add_ln143_3_fu_349_p2 = (p_output_offset + or_ln143_2_reg_475);

assign add_ln143_4_fu_358_p2 = (p_output_offset + or_ln143_3_reg_485);

assign add_ln143_5_fu_367_p2 = (p_output_offset + or_ln143_4_reg_495);

assign add_ln143_6_fu_381_p2 = (p_output_offset + or_ln143_5_fu_371_p2);

assign add_ln143_7_fu_396_p2 = (p_output_offset + or_ln143_6_fu_386_p2);

assign add_ln143_fu_282_p2 = (p_output_offset + tmp_s_reg_439);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_fu_254_p1 = ap_phi_mux_i_phi_fu_220_p4[5:0];

assign icmp_ln137_fu_243_p2 = ((ap_phi_mux_i_phi_fu_220_p4 == trunc_ln_reg_425) ? 1'b1 : 1'b0);

assign or_ln143_1_fu_291_p2 = (tmp_s_reg_439 | 9'd2);

assign or_ln143_2_fu_301_p2 = (tmp_s_reg_439 | 9'd3);

assign or_ln143_3_fu_329_p2 = (tmp_s_reg_439 | 9'd4);

assign or_ln143_4_fu_339_p2 = (tmp_s_reg_439 | 9'd5);

assign or_ln143_5_fu_371_p2 = (tmp_s_reg_439 | 9'd6);

assign or_ln143_6_fu_386_p2 = (tmp_s_reg_439 | 9'd7);

assign or_ln143_fu_271_p2 = (tmp_s_fu_258_p3 | 9'd1);

assign tmp_s_fu_258_p3 = {{empty_fu_254_p1}, {3'd0}};

assign zext_ln143_10_fu_315_p1 = add_ln143_1_fu_311_p2;

assign zext_ln143_11_fu_296_p1 = or_ln143_1_fu_291_p2;

assign zext_ln143_12_fu_324_p1 = add_ln143_2_fu_320_p2;

assign zext_ln143_13_fu_306_p1 = or_ln143_2_fu_301_p2;

assign zext_ln143_14_fu_353_p1 = add_ln143_3_fu_349_p2;

assign zext_ln143_15_fu_334_p1 = or_ln143_3_fu_329_p2;

assign zext_ln143_16_fu_362_p1 = add_ln143_4_fu_358_p2;

assign zext_ln143_17_fu_344_p1 = or_ln143_4_fu_339_p2;

assign zext_ln143_18_fu_401_p1 = add_ln143_5_reg_505;

assign zext_ln143_19_fu_376_p1 = or_ln143_5_fu_371_p2;

assign zext_ln143_20_fu_405_p1 = add_ln143_6_reg_515;

assign zext_ln143_21_fu_391_p1 = or_ln143_6_fu_386_p2;

assign zext_ln143_22_fu_409_p1 = add_ln143_7_reg_525;

assign zext_ln143_8_fu_286_p1 = add_ln143_fu_282_p2;

assign zext_ln143_9_fu_277_p1 = or_ln143_fu_271_p2;

assign zext_ln143_fu_266_p1 = tmp_s_fu_258_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_439[2:0] <= 3'b000;
    or_ln143_reg_455[2:0] <= 3'b001;
    or_ln143_1_reg_465[2:0] <= 3'b010;
    or_ln143_2_reg_475[2:0] <= 3'b011;
    or_ln143_3_reg_485[2:0] <= 3'b100;
    or_ln143_4_reg_495[2:0] <= 3'b101;
end

endmodule //MLP_copyArray_float_8u_s
