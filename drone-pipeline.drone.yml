# This is a sample build configuration for Python.
# Check our guides at https://confluence.atlassian.com/x/x4UWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
kind: pipeline
name: default


platform:
  os: linux
  arch: amd64

steps:

 - name: copy_global_config
   image: ultrazohm/ultrazohm_remote_container
   depends_on: [ clone ]
   commands: 
   - cp -f vitis/software/Baremetal/src/uz/default_uz_global_configuration.h vitis/software/Baremetal/src/uz/uz_global_configuration.h
   
 - name: docs
   image: ultrazohm/ultrazohm_remote_container
   depends_on: [ copy_global_config ]
   commands: # Modify the commands below to build your repository.
   - cd docs
   - pip install -r requirements.txt
   - pip list
   - make docs
   - cd build
   - ls
  
#  - name: Ceedling unit tests
#    image: ultrazohm/ultrazohm_remote_container
#    depends_on: [ copy_global_config ]
#    commands:
#    - cd vitis/software/Baremetal
#    - ceedling test:all

 - name: Cppcheck
   image: ultrazohm/ultrazohm_remote_container
   depends_on: [ copy_global_config ]
   commands:
    - cppcheck vitis/software/Baremetal/src 
    - cppcheck --addon=cert vitis/software/Baremetal/src 
    - cppcheck --addon=misra --inline-suppr vitis/software/Baremetal/src 

 - name: Vivado_build_tcl
   image: vivado:2022.2
   depends_on: [ copy_global_config ]
   commands:
   - /bin/bash /opt/Xilinx/Vivado/2022.2/settings64.sh
   - cd vivado
   - /bin/bash /opt/Xilinx/Vivado/2022.2/bin/vivado -mode batch -nolog -nojournal -source build.tcl
   - cd ..
   - git status

# pipeline step just opens the vivado project
 - name: Vivado_open_project
   image: vivado:2022.2
   depends_on: [ Vivado_build_tcl ]
   commands:
   - /bin/bash /opt/Xilinx/Vivado/2022.2/settings64.sh
   - /bin/bash /opt/Xilinx/Vivado/2022.2/bin/vivado -mode batch -nolog -nojournal -source tcl_scripts/ci_vivado_open_project.tcl

# Open vivado project and check the syntax
 - name: Vivado_check_syntax
   image: vivado:2022.2
   depends_on: [ Vivado_open_project ]
   commands:
   - /bin/bash /opt/Xilinx/Vivado/2022.2/settings64.sh
   - /bin/bash /opt/Xilinx/Vivado/2022.2/bin/vivado -mode batch -nolog -nojournal -source tcl_scripts/ci_vivado_check_syntax.tcl

# Open vivado project, open the board design and validate the board design (F6 in Vivado GUI)
 - name: Vivado_validate_board_design
   image: vivado:2022.2
   depends_on: [ Vivado_check_syntax ]
   commands:
   - /bin/bash /opt/Xilinx/Vivado/2022.2/settings64.sh
   - /bin/bash /opt/Xilinx/Vivado/2022.2/bin/vivado -mode batch -nolog -nojournal -source tcl_scripts/ci_vivado_validate_bd_design.tcl

# Runs report_environment from vivado to check if the license is valid for debug reasons (only on main and develop branch)
#  - name: Vivado_check_license
#    image: vivado:2022.2
#    depends_on: [ Vivado_validate_board_design ]
#    commands:
#    - ip link show
#    - /bin/bash /opt/Xilinx/Vivado/2022.2/settings64.sh
#    - /bin/bash /opt/Xilinx/Vivado/2022.2/bin/vivado -mode batch -nolog -nojournal -source tcl_scripts/ci_vivado_check_license.tcl
#   #  when:
  #    branch:
  #    - main
  #    - develop
  #    ref:
  #    - refs/tags/vivado*

# Generates the bitstream, only on main or develop branch since the step takes ~1.5h, exports the xsa
 - name: Vivado_generate_bitstream
   image: vivado:2022.2
   depends_on: [ Vivado_check_license ]
   commands:
   - ip link show
   - /bin/bash /opt/Xilinx/Vivado/2022.2/settings64.sh
   - /bin/bash /opt/Xilinx/Vivado/2022.2/bin/vivado -mode batch -source tcl_scripts/ci_vivado_generate_bitstream.tcl
   - /bin/bash /opt/Xilinx/Vivado/2022.2/bin/vivado -mode batch -source tcl_scripts/ci_vivado_export_xsa.tcl
  #  when:
  #    branch:
  #    - main
  #    - develop

# Open vitis and generate the workspace with the existing xsa or with the new generated xsa if it is main/develop
 - name: Vitis_generate_Workspace
   image: vivado:2022.2
   depends_on: [ Vivado_generate_bitstream ]
   commands:
   - cp -f vitis/software/Baremetal/src/uz/default_uz_global_configuration.h vitis/software/Baremetal/src/uz/uz_global_configuration.h
   - /bin/bash /opt/Xilinx/Vitis/2022.2/settings64.sh
   - /bin/bash /opt/Xilinx/Vitis/2022.2/bin/xsct tcl_scripts/ci_vitis_generate_workspace.tcl
 
 - name: Baremetal_build_successful
   image: vivado:2022.2
   depends_on: [ Vitis_generate_Workspace ]
   commands:
   - /bin/bash /opt/Xilinx/Vitis/2022.2/settings64.sh
   - /bin/bash /opt/Xilinx/Vitis/2022.2/bin/xsct tcl_scripts/ci_vitis_checkIfBaremetalElfExists.tcl
   
 - name: FreeRTOS_build_successful
   image: vivado:2022.2
   depends_on: [ Vitis_generate_Workspace ]
   commands:
   - /bin/bash /opt/Xilinx/Vitis/2022.2/settings64.sh
   - /bin/bash /opt/Xilinx/Vitis/2022.2/bin/xsct tcl_scripts/ci_vitis_checkifFreeRTOSElfExists.tcl

# Update the platform just to test the update script (does not update the platform since it did not change)
 - name: Vitis_update_platform
   image: vivado:2022.2
   depends_on: [ Vitis_generate_Workspace ]
   commands:
   - /bin/bash /opt/Xilinx/Vitis/2022.2/settings64.sh
   - /bin/bash /opt/Xilinx/Vitis/2022.2/bin/xsct tcl_scripts/ci_vitis_update_platform.tcl

 - name: Push_binary
   depends_on: [ Vitis_generate_Workspace ]
   image: alpine/git
   environment:
     pass:
       from_secret: password
     user:
       from_secret: username
   commands:
   - apk add git-lfs
   - git status
   - git add -f vitis/vivado_exported_xsa/zusys_wrapper.xsa
   - git add -f ip_cores/vv_index.xml
   - git add -f vivado/project/ultrazohm.xpr
   - git add -f vivado/project/zusys/hdl/zusys_wrapper.vhd
   - git add -f vivado/project/zusys/zusys.bd
   - git add -f vivado/*.tcl
   - git add -f vivado/bd/*.tcl
   - git status
   - git commit -m "[skip ci] Commit Vivado binarys from DroneCI"
   - git status
   - git push --tags --set-upstream https://$user:$pass@bitbucket.org/ultrazohm/ultrazohm_sw.git main 
   when:
     branch:
     - main

 - name: Install_autotag
   image: curlimages/curl
   depends_on: [ Push_binary ]
   user: root
   volumes:
   - name: m2
     path: /root/.m2
   commands:
   - curl -sL https://git.io/autotag-install | sh -s -- -b /root/.m2/
   when:
     branch:
     - main

 - name: Autotag
   image: alpine/git
   depends_on: [ Install_autotag ]
   user: root
   volumes:
   - name: m2
     path: /root/.m2
   commands:
   - apk add git-lfs
   - ls
   - git status
   - git tag
   - git fetch --all --tags
   - git tag
   - /root/.m2/autotag --scheme=conventional -b=main
   - git tag
   when:
     branch:
     - main

 - name: Create_changelog
   image: node
   depends_on: [ Autotag ]
   commands:
   - npm install -g auto-changelog
   - auto-changelog
   when:
     branch:
     - main

 - name: Push_Changelog
   image: alpine/git
   depends_on: [ Create_changelog ]
   environment:
     pass:
       from_secret: password
     user:
       from_secret: username
   commands:
   - apk add git-lfs
   - git status
   - git add CHANGELOG.md
   - git commit -m "[skip ci] Commit changelog and tag from DroneCI"
   - git status
   - git push --tags --set-upstream https://$user:$pass@bitbucket.org/ultrazohm/ultrazohm_sw.git main 
   when:
     branch:
     - main

volumes:
- name: m2
  temp: {}
