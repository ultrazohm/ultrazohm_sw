-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_fixdt_to_float is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_fixed : IN STD_LOGIC_VECTOR (31 downto 0);
    fraction : IN STD_LOGIC_VECTOR (7 downto 0);
    word : IN STD_LOGIC_VECTOR (7 downto 0);
    sign : IN STD_LOGIC;
    out_float : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of uz_fixdt_to_float is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_fixdt_to_float_uz_fixdt_to_float,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.929000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=47,HLS_SYN_LUT=560,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln10_fu_104_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln10_reg_335 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_97_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_float_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_97_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln10_1_fu_100_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln10_fu_113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln10_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln10_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln10_fu_110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln3_fu_140_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln3_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln11_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln10_fu_152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_3_fu_182_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln17_fu_196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln9_fu_167_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln17_fu_200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ininf_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1031_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_sig_V_fu_192_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1023_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inf_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_fu_260_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_4_fu_266_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sig_V_1_fu_274_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln18_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln23_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_282_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_292_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln23_fu_306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component uz_fixdt_to_float_sitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sitofp_32ns_32_4_no_dsp_1_U1 : component uz_fixdt_to_float_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_97_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_97_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln10_reg_335 <= add_ln10_fu_104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_float_reg_345 <= grp_fu_97_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln10_fu_104_p2 <= std_logic_vector(unsigned(zext_ln10_1_fu_100_p1) + unsigned(ap_const_lv9_1FF));
    and_ln10_fu_122_p2 <= (shl_ln10_fu_116_p2 and in_fixed);
    and_ln18_fu_230_p2 <= (ininf_fu_206_p2 and icmp_ln1023_fu_224_p2);
    and_ln23_fu_248_p2 <= (icmp_ln23_fu_236_p2 and icmp_ln23_1_fu_242_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln23_fu_314_p1 <= select_ln23_fu_306_p3;
    data_V_fu_171_p1 <= input_float_reg_345;
    grp_fu_97_p0 <= (select_ln10_fu_152_p3 or in_fixed);
    icmp_ln1023_fu_224_p2 <= "0" when (xs_sig_V_fu_192_p1 = ap_const_lv23_0) else "1";
    icmp_ln1031_fu_212_p2 <= "1" when (sub_ln17_fu_200_p2 = ap_const_lv9_FF) else "0";
    icmp_ln10_fu_128_p2 <= "1" when (and_ln10_fu_122_p2 = ap_const_lv32_0) else "0";
    icmp_ln23_1_fu_242_p2 <= "1" when (signed(sub_ln17_fu_200_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln23_fu_236_p2 <= "0" when (xs_exp_V_3_fu_182_p4 = ap_const_lv8_0) else "1";
    inf_fu_218_p2 <= (ininf_fu_206_p2 or icmp_ln1031_fu_212_p2);
    ininf_fu_206_p2 <= "1" when (xs_exp_V_3_fu_182_p4 = ap_const_lv8_FF) else "0";
    or_ln10_fu_146_p2 <= (xor_ln3_fu_140_p2 or icmp_ln10_fu_128_p2);
    or_ln23_fu_254_p2 <= (ininf_fu_206_p2 or and_ln23_fu_248_p2);
    out_float <= select_ln18_fu_318_p3;
    p_Result_1_fu_282_p4 <= ((p_Result_s_fu_174_p3 & xs_exp_V_4_fu_266_p3) & xs_sig_V_1_fu_274_p3);
    p_Result_2_fu_292_p3 <= (p_Result_s_fu_174_p3 & ap_const_lv31_0);
    p_Result_s_fu_174_p3 <= data_V_fu_171_p1(31 downto 31);
    select_ln10_fu_152_p3 <= 
        ap_const_lv32_0 when (or_ln10_fu_146_p2(0) = '1') else 
        shl_ln11_fu_134_p2;
    select_ln18_fu_318_p3 <= 
        input_float_reg_345 when (and_ln18_fu_230_p2(0) = '1') else 
        bitcast_ln23_fu_314_p1;
    select_ln23_fu_306_p3 <= 
        p_Result_1_fu_282_p4 when (xor_ln23_fu_300_p2(0) = '1') else 
        p_Result_2_fu_292_p3;
        sext_ln10_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln10_reg_335),32));

    shl_ln10_fu_116_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & sext_ln10_fu_113_p1(31-1 downto 0)))));
    shl_ln11_fu_134_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln10_fu_110_p1(31-1 downto 0)))));
    sub_ln17_fu_200_p2 <= std_logic_vector(unsigned(zext_ln17_fu_196_p1) - unsigned(zext_ln9_fu_167_p1));
    xor_ln23_fu_300_p2 <= (or_ln23_fu_254_p2 xor and_ln18_fu_230_p2);
    xor_ln3_fu_140_p0 <= (0=>sign, others=>'-');
    xor_ln3_fu_140_p2 <= (xor_ln3_fu_140_p0 xor ap_const_lv1_1);
    xs_exp_V_3_fu_182_p4 <= data_V_fu_171_p1(30 downto 23);
    xs_exp_V_4_fu_266_p3 <= 
        ap_const_lv8_FF when (inf_fu_218_p2(0) = '1') else 
        xs_exp_V_fu_260_p2;
    xs_exp_V_fu_260_p2 <= std_logic_vector(unsigned(xs_exp_V_3_fu_182_p4) - unsigned(fraction));
    xs_sig_V_1_fu_274_p3 <= 
        ap_const_lv23_0 when (inf_fu_218_p2(0) = '1') else 
        xs_sig_V_fu_192_p1;
    xs_sig_V_fu_192_p1 <= data_V_fu_171_p1(23 - 1 downto 0);
    zext_ln10_1_fu_100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word),9));
    zext_ln10_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word),32));
    zext_ln17_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_3_fu_182_p4),9));
    zext_ln9_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fraction),9));
end behav;
