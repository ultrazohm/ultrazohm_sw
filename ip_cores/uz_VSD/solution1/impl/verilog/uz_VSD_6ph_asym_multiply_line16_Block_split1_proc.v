// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uz_VSD_6ph_asym_multiply_line16_Block_split1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        val_0_dout,
        val_0_empty_n,
        val_0_read,
        val_1_dout,
        val_1_empty_n,
        val_1_read,
        val_2_dout,
        val_2_empty_n,
        val_2_read,
        val_3_dout,
        val_3_empty_n,
        val_3_read,
        val_4_dout,
        val_4_empty_n,
        val_4_read,
        val_5_dout,
        val_5_empty_n,
        val_5_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] val_0_dout;
input   val_0_empty_n;
output   val_0_read;
input  [31:0] val_1_dout;
input   val_1_empty_n;
output   val_1_read;
input  [31:0] val_2_dout;
input   val_2_empty_n;
output   val_2_read;
input  [31:0] val_3_dout;
input   val_3_empty_n;
output   val_3_read;
input  [31:0] val_4_dout;
input   val_4_empty_n;
output   val_4_read;
input  [31:0] val_5_dout;
input   val_5_empty_n;
output   val_5_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg val_0_read;
reg val_1_read;
reg val_2_read;
reg val_3_read;
reg val_4_read;
reg val_5_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    val_0_blk_n;
reg    val_1_blk_n;
reg    val_2_blk_n;
reg    val_3_blk_n;
reg    val_4_blk_n;
reg    val_5_blk_n;
reg   [31:0] val_0_read_reg_146;
reg    ap_block_state1;
reg   [31:0] val_1_read_reg_151;
reg   [31:0] val_2_read_reg_156;
reg   [31:0] val_3_read_reg_161;
reg   [31:0] val_4_read_reg_166;
reg   [31:0] val_5_read_reg_171;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [31:0] bitcast_ln31_fu_85_p1;
wire   [31:0] xor_ln31_fu_88_p2;
wire   [31:0] bitcast_ln31_2_fu_98_p1;
wire   [31:0] xor_ln31_1_fu_101_p2;
wire   [31:0] grp_fu_70_p2;
wire   [31:0] bitcast_ln31_1_fu_94_p1;
wire   [31:0] grp_fu_75_p2;
wire   [31:0] bitcast_ln31_3_fu_107_p1;
wire   [31:0] grp_fu_80_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

uz_VSD_6ph_asym_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U453(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(val_0_read_reg_146),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_70_p2)
);

uz_VSD_6ph_asym_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U454(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(val_2_read_reg_156),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_75_p2)
);

uz_VSD_6ph_asym_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U455(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(val_4_read_reg_166),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (val_5_empty_n == 1'b0) | (val_4_empty_n == 1'b0) | (val_3_empty_n == 1'b0) | (val_2_empty_n == 1'b0) | (val_1_empty_n == 1'b0) | (val_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_0_read_reg_146 <= val_0_dout;
        val_1_read_reg_151 <= val_1_dout;
        val_2_read_reg_156 <= val_2_dout;
        val_3_read_reg_161 <= val_3_dout;
        val_4_read_reg_166 <= val_4_dout;
        val_5_read_reg_171 <= val_5_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_0_blk_n = val_0_empty_n;
    end else begin
        val_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (val_5_empty_n == 1'b0) | (val_4_empty_n == 1'b0) | (val_3_empty_n == 1'b0) | (val_2_empty_n == 1'b0) | (val_1_empty_n == 1'b0) | (val_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_0_read = 1'b1;
    end else begin
        val_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_1_blk_n = val_1_empty_n;
    end else begin
        val_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (val_5_empty_n == 1'b0) | (val_4_empty_n == 1'b0) | (val_3_empty_n == 1'b0) | (val_2_empty_n == 1'b0) | (val_1_empty_n == 1'b0) | (val_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_1_read = 1'b1;
    end else begin
        val_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_2_blk_n = val_2_empty_n;
    end else begin
        val_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (val_5_empty_n == 1'b0) | (val_4_empty_n == 1'b0) | (val_3_empty_n == 1'b0) | (val_2_empty_n == 1'b0) | (val_1_empty_n == 1'b0) | (val_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_2_read = 1'b1;
    end else begin
        val_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_3_blk_n = val_3_empty_n;
    end else begin
        val_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (val_5_empty_n == 1'b0) | (val_4_empty_n == 1'b0) | (val_3_empty_n == 1'b0) | (val_2_empty_n == 1'b0) | (val_1_empty_n == 1'b0) | (val_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_3_read = 1'b1;
    end else begin
        val_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_4_blk_n = val_4_empty_n;
    end else begin
        val_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (val_5_empty_n == 1'b0) | (val_4_empty_n == 1'b0) | (val_3_empty_n == 1'b0) | (val_2_empty_n == 1'b0) | (val_1_empty_n == 1'b0) | (val_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_4_read = 1'b1;
    end else begin
        val_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_5_blk_n = val_5_empty_n;
    end else begin
        val_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (val_5_empty_n == 1'b0) | (val_4_empty_n == 1'b0) | (val_3_empty_n == 1'b0) | (val_2_empty_n == 1'b0) | (val_1_empty_n == 1'b0) | (val_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_5_read = 1'b1;
    end else begin
        val_5_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (val_5_empty_n == 1'b0) | (val_4_empty_n == 1'b0) | (val_3_empty_n == 1'b0) | (val_2_empty_n == 1'b0) | (val_1_empty_n == 1'b0) | (val_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (val_5_empty_n == 1'b0) | (val_4_empty_n == 1'b0) | (val_3_empty_n == 1'b0) | (val_2_empty_n == 1'b0) | (val_1_empty_n == 1'b0) | (val_0_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = grp_fu_70_p2;

assign ap_return_1 = bitcast_ln31_1_fu_94_p1;

assign ap_return_2 = grp_fu_75_p2;

assign ap_return_3 = bitcast_ln31_3_fu_107_p1;

assign ap_return_4 = grp_fu_80_p2;

assign ap_return_5 = val_5_read_reg_171;

assign bitcast_ln31_1_fu_94_p1 = xor_ln31_fu_88_p2;

assign bitcast_ln31_2_fu_98_p1 = val_3_read_reg_161;

assign bitcast_ln31_3_fu_107_p1 = xor_ln31_1_fu_101_p2;

assign bitcast_ln31_fu_85_p1 = val_1_read_reg_151;

assign xor_ln31_1_fu_101_p2 = (bitcast_ln31_2_fu_98_p1 ^ 32'd2147483648);

assign xor_ln31_fu_88_p2 = (bitcast_ln31_fu_85_p1 ^ 32'd2147483648);

endmodule //uz_VSD_6ph_asym_multiply_line16_Block_split1_proc
