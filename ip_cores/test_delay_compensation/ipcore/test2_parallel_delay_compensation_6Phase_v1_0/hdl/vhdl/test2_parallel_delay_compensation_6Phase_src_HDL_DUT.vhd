-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\test_delay_compensation\hdlsrc\parallel_delay_compensation_6phase\test2_parallel_delay_compensation_6Phase_src_HDL_DUT.vhd
-- Created: 2022-10-10 12:10:24
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- id_k_1                        ce_out        1e-08
-- iq_k_1                        ce_out        1e-08
-- ix_k_1                        ce_out        1e-08
-- iy_k_1                        ce_out        1e-08
-- done                          ce_out        1e-08
-- id_k_1_AXI                    ce_out        1e-08
-- iq_k_1_AXI                    ce_out        1e-08
-- ix_k_1_AXI                    ce_out        1e-08
-- iy_k_1_AXI                    ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: test2_parallel_delay_compensation_6Phase_src_HDL_DUT
-- Source Path: parallel_delay_compensation_6phase/HDL_DUT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.test2_parallel_delay_compensation_6Phase_src_HDL_DUT_pkg.ALL;

ENTITY test2_parallel_delay_compensation_6Phase_src_HDL_DUT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        id_measured                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_measured                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_measured                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_measured                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        psiPM_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Lq_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Rs_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ld_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        last_applied_optimal_voltages_in_0 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltages_in_1 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltages_in_2 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltages_in_3 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        pole_pairs_AXI                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_m_measured                  :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        valid_in_ADC                      :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        id_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        done                              :   OUT   std_logic;
        id_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
        );
END test2_parallel_delay_compensation_6Phase_src_HDL_DUT;


ARCHITECTURE rtl OF test2_parallel_delay_compensation_6Phase_src_HDL_DUT IS

  -- Component Declarations
  COMPONENT test2_parallel_delay_compensation_6Phase_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT test2_parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT test2_parallel_delay_compensation_6Phase_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT test2_parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT test2_parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : test2_parallel_delay_compensation_6Phase_src_Detect_Rise_Positive
    USE ENTITY work.test2_parallel_delay_compensation_6Phase_src_Detect_Rise_Positive(rtl);

  FOR ALL : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    USE ENTITY work.test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single(rtl);

  FOR ALL : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    USE ENTITY work.test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single(rtl);

  FOR ALL : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    USE ENTITY work.test2_parallel_delay_compensation_6Phase_src_nfp_mul_single(rtl);

  FOR ALL : test2_parallel_delay_compensation_6Phase_src_nfp_sub_single
    USE ENTITY work.test2_parallel_delay_compensation_6Phase_src_nfp_sub_single(rtl);

  FOR ALL : test2_parallel_delay_compensation_6Phase_src_Detect_Rise_Positive1
    USE ENTITY work.test2_parallel_delay_compensation_6Phase_src_Detect_Rise_Positive1(rtl);

  FOR ALL : test2_parallel_delay_compensation_6Phase_src_nfp_add_single
    USE ENTITY work.test2_parallel_delay_compensation_6Phase_src_nfp_add_single(rtl);

  FOR ALL : test2_parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    USE ENTITY work.test2_parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Delay21_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg                      : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL reduced_reg_next                 : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL Switch_on2_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL reduced_reg_1                    : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL reduced_reg_next_1               : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch8_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL last_applied_optimal_voltages_in : vector_of_std_logic_vector24(0 TO 3);  -- ufix24 [4]
  SIGNAL last_applied_optimal_voltages_in_4 : vector_of_signed24(0 TO 3);  -- sfix24_En11 [4]
  SIGNAL last_applied_optimal_voltage_vector : vector_of_signed24(0 TO 3);  -- sfix24_En11 [4]
  SIGNAL nfp_out_1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch11_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch11_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Switch_on1_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL End_Cycle_3                      : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL id_measured_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay19_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Delay12_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on10_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on10_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_2                    : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL reduced_reg_next_2               : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Switch_on10_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_op_stage1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch13_reg                 : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL delayMatch13_reg_next            : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Subtract_op_stage1_1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay35_out1                     : std_logic;
  SIGNAL End_Cycle_4                      : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL delayMatch4_reg_next             : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL End_Cycle_5                      : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL delayMatch3_reg_next             : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch2_reg                  : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch2_reg_next             : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL pole_pairs_AXI_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay33_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on14_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on14_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Delay14_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on8_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on8_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_3                    : vector_of_std_logic_vector32(0 TO 9);  -- ufix32 [10]
  SIGNAL reduced_reg_next_3               : vector_of_std_logic_vector32(0 TO 9);  -- ufix32 [10]
  SIGNAL Switch_on8_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL iq_measured_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay18_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_4                    : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL reduced_reg_next_4               : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL Switch_on4_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch15_reg                 : vector_of_std_logic_vector32(0 TO 28);  -- ufix32 [29]
  SIGNAL delayMatch15_reg_next            : vector_of_std_logic_vector32(0 TO 28);  -- ufix32 [29]
  SIGNAL Switch_on3_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion_out1        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion_out1_1      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL Delay30_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_5                    : vector_of_std_logic_vector32(0 TO 28);  -- ufix32 [29]
  SIGNAL reduced_reg_next_5               : vector_of_std_logic_vector32(0 TO 28);  -- ufix32 [29]
  SIGNAL Switch_on11_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL delayMatch18_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch18_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL nfp_out_2_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay36_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on15_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on15_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch21_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch21_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Switch_on15_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product5_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_op_stage1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch23_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch23_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Subtract1_op_stage1_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch22_reg                 : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL delayMatch22_reg_next            : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL Switch_on14_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL Delay15_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_6                    : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL reduced_reg_next_6               : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL Switch_on7_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL Delay13_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on9_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on9_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_7                    : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL reduced_reg_next_7               : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Switch_on9_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product7_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product6_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_8                    : vector_of_std_logic_vector32(0 TO 18);  -- ufix32 [19]
  SIGNAL reduced_reg_next_8               : vector_of_std_logic_vector32(0 TO 18);  -- ufix32 [19]
  SIGNAL Switch_on4_out1_3                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL Delay31_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on12_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on12_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_9                    : vector_of_std_logic_vector32(0 TO 16);  -- ufix32 [17]
  SIGNAL reduced_reg_next_9               : vector_of_std_logic_vector32(0 TO 16);  -- ufix32 [17]
  SIGNAL Switch_on12_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL delayMatch28_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch28_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL nfp_out_3_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay37_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on16_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on16_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch31_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch31_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Switch_on16_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL delayMatch26_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch26_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL ix_measured_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay17_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product9_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product8_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch33_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch33_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL Switch_on5_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion8_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_10                   : vector_of_signed18(0 TO 11);  -- sfix18 [12]
  SIGNAL reduced_reg_next_10              : vector_of_signed18(0 TO 11);  -- sfix18_En11 [12]
  SIGNAL Data_Type_Conversion8_out1_1     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL Delay32_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_11                   : vector_of_std_logic_vector32(0 TO 16);  -- ufix32 [17]
  SIGNAL reduced_reg_next_11              : vector_of_std_logic_vector32(0 TO 16);  -- ufix32 [17]
  SIGNAL Switch_on13_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL stateControl_15                  : std_logic;
  SIGNAL delayMatch36_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch36_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_16                  : std_logic;
  SIGNAL nfp_out_4_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay38_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on17_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on17_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch39_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch39_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Switch_on17_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL stateControl_17                  : std_logic;
  SIGNAL delayMatch34_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch34_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_18                  : std_logic;
  SIGNAL iy_measured_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay16_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product11_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product10_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch41_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch41_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL Switch_on6_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add4_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion9_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_12                   : vector_of_signed18(0 TO 11);  -- sfix18 [12]
  SIGNAL reduced_reg_next_12              : vector_of_signed18(0 TO 11);  -- sfix18_En11 [12]
  SIGNAL Data_Type_Conversion9_out1_1     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch45_reg                 : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL delayMatch45_reg_next            : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL Delay22_out1                     : std_logic;

BEGIN
  u_Detect_Rise_Positive : test2_parallel_delay_compensation_6Phase_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay11_out1,
              Y => End_Cycle
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(last_applied_optimal_voltage_vector(0)),  -- sfix24_En11
              nfp_out => nfp_out_1_1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_18_En11_to_single : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay19_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion2_out1  -- single
              );

  u_nfp_mul_comp : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on3_out1,  -- single
              nfp_in2 => Switch_on10_out1_2,  -- single
              nfp_out => Product2_out1  -- single
              );

  u_nfp_sub_comp : test2_parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on1_out1_2,  -- single
              nfp_in2 => Product2_out1,  -- single
              nfp_out => Subtract_op_stage1  -- single
              );

  u_Detect_Rise_Positive1 : test2_parallel_delay_compensation_6Phase_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay35_out1,
              Y => End_Cycle_4
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single_1 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => omega_m_measured,  -- sfix24_En11
              nfp_out => Data_Type_Conversion4_out1  -- single
              );

  u_nfp_mul_comp_1 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion4_out1,  -- single
              nfp_in2 => pole_pairs_AXI_1,  -- single
              nfp_out => omega_el  -- single
              );

  -- mul #1
  u_nfp_mul_comp_2 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on14_out1,  -- single
              nfp_in2 => Switch_on8_out1_2,  -- single
              nfp_out => Product3_out_1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_18_En11_to_single_1 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay18_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion3_out1  -- single
              );

  -- mul #2
  u_nfp_mul_comp_3 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product3_out_1,  -- single
              nfp_in2 => Switch_on4_out1_2,  -- single
              nfp_out => Product3_out1  -- single
              );

  u_nfp_add_comp : test2_parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Subtract_op_stage1_1,  -- single
              nfp_in2 => Product3_out1,  -- single
              nfp_out => Subtract_out1  -- single
              );

  u_nfp_mul_comp_4 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on2_out1_2,  -- single
              nfp_in2 => Subtract_out1,  -- single
              nfp_out => Product1_out1  -- single
              );

  u_nfp_add_comp_1 : test2_parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product1_out1,  -- single
              nfp_in2 => Switch_on3_out1_2,  -- single
              nfp_out => Add_out1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_single_to_sfix_18_En11 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Add_out1,  -- single
              nfp_out => Data_Type_Conversion_out1  -- sfix18_En11
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single_2 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(last_applied_optimal_voltage_vector(1)),  -- sfix24_En11
              nfp_out => nfp_out_2_1  -- single
              );

  u_nfp_mul_comp_5 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on4_out1,  -- single
              nfp_in2 => Switch_on10_out1_2,  -- single
              nfp_out => Product5_out1  -- single
              );

  u_nfp_sub_comp_1 : test2_parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on15_out1_2,  -- single
              nfp_in2 => Product5_out1,  -- single
              nfp_out => Subtract1_op_stage1  -- single
              );

  u_nfp_mul_comp_6 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on3_out1,  -- single
              nfp_in2 => Switch_on9_out1_2,  -- single
              nfp_out => Product7_out1  -- single
              );

  u_nfp_add_comp_2 : test2_parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on7_out1_2,  -- single
              nfp_in2 => Product7_out1,  -- single
              nfp_out => Add2_out1  -- single
              );

  u_nfp_mul_comp_7 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on14_out1_2,  -- single
              nfp_in2 => Add2_out1,  -- single
              nfp_out => Product6_out1  -- single
              );

  u_nfp_sub_comp_2 : test2_parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Subtract1_op_stage1_1,  -- single
              nfp_in2 => Product6_out1,  -- single
              nfp_out => Subtract1_out1  -- single
              );

  u_nfp_mul_comp_8 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on11_out1_2,  -- single
              nfp_in2 => Subtract1_out1,  -- single
              nfp_out => Product4_out1  -- single
              );

  u_nfp_add_comp_3 : test2_parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product4_out1,  -- single
              nfp_in2 => Switch_on4_out1_3,  -- single
              nfp_out => Add1_out1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_single_to_sfix_18_En11_1 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Add1_out1,  -- single
              nfp_out => Data_Type_Conversion7_out1  -- sfix18_En11
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single_3 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(last_applied_optimal_voltage_vector(2)),  -- sfix24_En11
              nfp_out => nfp_out_3_1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_18_En11_to_single_2 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay17_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion5_out1  -- single
              );

  u_nfp_mul_comp_9 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on5_out1,  -- single
              nfp_in2 => Switch_on10_out1_2,  -- single
              nfp_out => Product9_out1  -- single
              );

  u_nfp_sub_comp_3 : test2_parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on16_out1_2,  -- single
              nfp_in2 => Product9_out1,  -- single
              nfp_out => Subtract2_out1  -- single
              );

  u_nfp_mul_comp_10 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on12_out1_2,  -- single
              nfp_in2 => Subtract2_out1,  -- single
              nfp_out => Product8_out1  -- single
              );

  u_nfp_add_comp_4 : test2_parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product8_out1,  -- single
              nfp_in2 => Switch_on5_out1_2,  -- single
              nfp_out => Add3_out1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_single_to_sfix_18_En11_2 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Add3_out1,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- sfix18_En11
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single_4 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(last_applied_optimal_voltage_vector(3)),  -- sfix24_En11
              nfp_out => nfp_out_4_1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_18_En11_to_single_3 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay16_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion6_out1  -- single
              );

  u_nfp_mul_comp_11 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on6_out1,  -- single
              nfp_in2 => Switch_on10_out1_2,  -- single
              nfp_out => Product11_out1  -- single
              );

  u_nfp_sub_comp_4 : test2_parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on17_out1_2,  -- single
              nfp_in2 => Product11_out1,  -- single
              nfp_out => Subtract3_out1  -- single
              );

  u_nfp_mul_comp_12 : test2_parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_on13_out1_2,  -- single
              nfp_in2 => Subtract3_out1,  -- single
              nfp_out => Product10_out1  -- single
              );

  u_nfp_add_comp_5 : test2_parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product10_out1,  -- single
              nfp_in2 => Switch_on6_out1_2,  -- single
              nfp_out => Add4_out1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_single_to_sfix_18_En11_3 : test2_parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Add4_out1,  -- single
              nfp_out => Data_Type_Conversion9_out1  -- sfix18_En11
              );

  enb <= clk_enable;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay21_out1 <= SampleTime_div_Ld_AXI;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  
  Switch_on2_out1_1 <= Switch_on2_out1 WHEN switch_compare_1 = '0' ELSE
      Delay21_out1;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on2_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on2_out1 <= Switch_on2_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= X"00000000";
        reduced_reg(1) <= X"00000000";
        reduced_reg(2) <= X"00000000";
        reduced_reg(3) <= X"00000000";
        reduced_reg(4) <= X"00000000";
        reduced_reg(5) <= X"00000000";
        reduced_reg(6) <= X"00000000";
        reduced_reg(7) <= X"00000000";
        reduced_reg(8) <= X"00000000";
        reduced_reg(9) <= X"00000000";
        reduced_reg(10) <= X"00000000";
        reduced_reg(11) <= X"00000000";
        reduced_reg(12) <= X"00000000";
        reduced_reg(13) <= X"00000000";
        reduced_reg(14) <= X"00000000";
        reduced_reg(15) <= X"00000000";
        reduced_reg(16) <= X"00000000";
        reduced_reg(17) <= X"00000000";
        reduced_reg(18) <= X"00000000";
        reduced_reg(19) <= X"00000000";
        reduced_reg(20) <= X"00000000";
        reduced_reg(21) <= X"00000000";
        reduced_reg(22) <= X"00000000";
        reduced_reg(23) <= X"00000000";
        reduced_reg(24) <= X"00000000";
        reduced_reg(25) <= X"00000000";
        reduced_reg(26) <= X"00000000";
        reduced_reg(27) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
        reduced_reg(6) <= reduced_reg_next(6);
        reduced_reg(7) <= reduced_reg_next(7);
        reduced_reg(8) <= reduced_reg_next(8);
        reduced_reg(9) <= reduced_reg_next(9);
        reduced_reg(10) <= reduced_reg_next(10);
        reduced_reg(11) <= reduced_reg_next(11);
        reduced_reg(12) <= reduced_reg_next(12);
        reduced_reg(13) <= reduced_reg_next(13);
        reduced_reg(14) <= reduced_reg_next(14);
        reduced_reg(15) <= reduced_reg_next(15);
        reduced_reg(16) <= reduced_reg_next(16);
        reduced_reg(17) <= reduced_reg_next(17);
        reduced_reg(18) <= reduced_reg_next(18);
        reduced_reg(19) <= reduced_reg_next(19);
        reduced_reg(20) <= reduced_reg_next(20);
        reduced_reg(21) <= reduced_reg_next(21);
        reduced_reg(22) <= reduced_reg_next(22);
        reduced_reg(23) <= reduced_reg_next(23);
        reduced_reg(24) <= reduced_reg_next(24);
        reduced_reg(25) <= reduced_reg_next(25);
        reduced_reg(26) <= reduced_reg_next(26);
        reduced_reg(27) <= reduced_reg_next(27);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Switch_on2_out1_2 <= reduced_reg(27);
  reduced_reg_next(0) <= Switch_on2_out1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);
  reduced_reg_next(6) <= reduced_reg(5);
  reduced_reg_next(7) <= reduced_reg(6);
  reduced_reg_next(8) <= reduced_reg(7);
  reduced_reg_next(9) <= reduced_reg(8);
  reduced_reg_next(10) <= reduced_reg(9);
  reduced_reg_next(11) <= reduced_reg(10);
  reduced_reg_next(12) <= reduced_reg(11);
  reduced_reg_next(13) <= reduced_reg(12);
  reduced_reg_next(14) <= reduced_reg(13);
  reduced_reg_next(15) <= reduced_reg(14);
  reduced_reg_next(16) <= reduced_reg(15);
  reduced_reg_next(17) <= reduced_reg(16);
  reduced_reg_next(18) <= reduced_reg(17);
  reduced_reg_next(19) <= reduced_reg(18);
  reduced_reg_next(20) <= reduced_reg(19);
  reduced_reg_next(21) <= reduced_reg(20);
  reduced_reg_next(22) <= reduced_reg(21);
  reduced_reg_next(23) <= reduced_reg(22);
  reduced_reg_next(24) <= reduced_reg(23);
  reduced_reg_next(25) <= reduced_reg(24);
  reduced_reg_next(26) <= reduced_reg(25);
  reduced_reg_next(27) <= reduced_reg(26);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        End_Cycle_1 <= '0';
      ELSIF enb = '1' THEN
        End_Cycle_1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= '0';
        reduced_reg_1(1) <= '0';
        reduced_reg_1(2) <= '0';
        reduced_reg_1(3) <= '0';
        reduced_reg_1(4) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
        reduced_reg_1(4) <= reduced_reg_next_1(4);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  End_Cycle_2 <= reduced_reg_1(4);
  reduced_reg_next_1(0) <= End_Cycle_1;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);
  reduced_reg_next_1(4) <= reduced_reg_1(3);

  
  switch_compare_1_1 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg(0) <= '0';
        delayMatch8_reg(1) <= '0';
        delayMatch8_reg(2) <= '0';
        delayMatch8_reg(3) <= '0';
        delayMatch8_reg(4) <= '0';
        delayMatch8_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
        delayMatch8_reg(2) <= delayMatch8_reg_next(2);
        delayMatch8_reg(3) <= delayMatch8_reg_next(3);
        delayMatch8_reg(4) <= delayMatch8_reg_next(4);
        delayMatch8_reg(5) <= delayMatch8_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  stateControl_2 <= delayMatch8_reg(5);
  delayMatch8_reg_next(0) <= stateControl_1;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);
  delayMatch8_reg_next(2) <= delayMatch8_reg(1);
  delayMatch8_reg_next(3) <= delayMatch8_reg(2);
  delayMatch8_reg_next(4) <= delayMatch8_reg(3);
  delayMatch8_reg_next(5) <= delayMatch8_reg(4);

  last_applied_optimal_voltages_in(0) <= last_applied_optimal_voltages_in_0;
  last_applied_optimal_voltages_in(1) <= last_applied_optimal_voltages_in_1;
  last_applied_optimal_voltages_in(2) <= last_applied_optimal_voltages_in_2;
  last_applied_optimal_voltages_in(3) <= last_applied_optimal_voltages_in_3;

  outputgen: FOR k IN 0 TO 3 GENERATE
    last_applied_optimal_voltages_in_4(k) <= signed(last_applied_optimal_voltages_in(k));
  END GENERATE;

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        last_applied_optimal_voltage_vector(0) <= to_signed(16#000000#, 24);
        last_applied_optimal_voltage_vector(1) <= to_signed(16#000000#, 24);
        last_applied_optimal_voltage_vector(2) <= to_signed(16#000000#, 24);
        last_applied_optimal_voltage_vector(3) <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        last_applied_optimal_voltage_vector(0) <= last_applied_optimal_voltages_in_4(0);
        last_applied_optimal_voltage_vector(1) <= last_applied_optimal_voltages_in_4(1);
        last_applied_optimal_voltage_vector(2) <= last_applied_optimal_voltages_in_4(2);
        last_applied_optimal_voltage_vector(3) <= last_applied_optimal_voltages_in_4(3);
      END IF;
    END IF;
  END PROCESS Delay20_process;


  
  Switch_on1_out1_1 <= Delay1_out1 WHEN stateControl_2 = '0' ELSE
      Switch_on1_out1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1_1 = '0' ELSE
      nfp_out_1_1;

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch11_reg(0) <= X"00000000";
        delayMatch11_reg(1) <= X"00000000";
        delayMatch11_reg(2) <= X"00000000";
        delayMatch11_reg(3) <= X"00000000";
        delayMatch11_reg(4) <= X"00000000";
        delayMatch11_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
        delayMatch11_reg(2) <= delayMatch11_reg_next(2);
        delayMatch11_reg(3) <= delayMatch11_reg_next(3);
        delayMatch11_reg(4) <= delayMatch11_reg_next(4);
        delayMatch11_reg(5) <= delayMatch11_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Switch_on1_out1_2 <= delayMatch11_reg(5);
  delayMatch11_reg_next(0) <= Switch_on1_out1;
  delayMatch11_reg_next(1) <= delayMatch11_reg(0);
  delayMatch11_reg_next(2) <= delayMatch11_reg(1);
  delayMatch11_reg_next(3) <= delayMatch11_reg(2);
  delayMatch11_reg_next(4) <= delayMatch11_reg(3);
  delayMatch11_reg_next(5) <= delayMatch11_reg(4);

  End_Cycle_3 <= End_Cycle_2;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_3 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg(0) <= '0';
        delayMatch_reg(1) <= '0';
        delayMatch_reg(2) <= '0';
        delayMatch_reg(3) <= '0';
        delayMatch_reg(4) <= '0';
        delayMatch_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_4 <= delayMatch_reg(5);
  delayMatch_reg_next(0) <= stateControl_3;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);

  id_measured_signed <= signed(id_measured);

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay19_out1 <= id_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  Switch_on3_out1_1 <= Delay3_out1 WHEN stateControl_4 = '0' ELSE
      Switch_on3_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_on3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_on3_out1 <= Delay3_out1 WHEN switch_compare_1_2 = '0' ELSE
      Data_Type_Conversion2_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay12_out1 <= Rs_AXI;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  Switch_on10_out1_1 <= Switch_on10_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay12_out1;

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on10_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on10_out1 <= Switch_on10_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_4_process;


  reduced_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2(0) <= X"00000000";
        reduced_reg_2(1) <= X"00000000";
        reduced_reg_2(2) <= X"00000000";
        reduced_reg_2(3) <= X"00000000";
        reduced_reg_2(4) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= reduced_reg_next_2(0);
        reduced_reg_2(1) <= reduced_reg_next_2(1);
        reduced_reg_2(2) <= reduced_reg_next_2(2);
        reduced_reg_2(3) <= reduced_reg_next_2(3);
        reduced_reg_2(4) <= reduced_reg_next_2(4);
      END IF;
    END IF;
  END PROCESS reduced_5_process;

  Switch_on10_out1_2 <= reduced_reg_2(4);
  reduced_reg_next_2(0) <= Switch_on10_out1;
  reduced_reg_next_2(1) <= reduced_reg_2(0);
  reduced_reg_next_2(2) <= reduced_reg_2(1);
  reduced_reg_next_2(3) <= reduced_reg_2(2);
  reduced_reg_next_2(4) <= reduced_reg_2(3);

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_reg(0) <= X"00000000";
        delayMatch13_reg(1) <= X"00000000";
        delayMatch13_reg(2) <= X"00000000";
        delayMatch13_reg(3) <= X"00000000";
        delayMatch13_reg(4) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch13_reg(0) <= delayMatch13_reg_next(0);
        delayMatch13_reg(1) <= delayMatch13_reg_next(1);
        delayMatch13_reg(2) <= delayMatch13_reg_next(2);
        delayMatch13_reg(3) <= delayMatch13_reg_next(3);
        delayMatch13_reg(4) <= delayMatch13_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  Subtract_op_stage1_1 <= delayMatch13_reg(4);
  delayMatch13_reg_next(0) <= Subtract_op_stage1;
  delayMatch13_reg_next(1) <= delayMatch13_reg(0);
  delayMatch13_reg_next(2) <= delayMatch13_reg(1);
  delayMatch13_reg_next(3) <= delayMatch13_reg(2);
  delayMatch13_reg_next(4) <= delayMatch13_reg(3);

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay35_out1 <= valid_in_ADC;
      END IF;
    END IF;
  END PROCESS Delay35_process;


  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg(0) <= '0';
        delayMatch4_reg(1) <= '0';
        delayMatch4_reg(2) <= '0';
        delayMatch4_reg(3) <= '0';
        delayMatch4_reg(4) <= '0';
        delayMatch4_reg(5) <= '0';
        delayMatch4_reg(6) <= '0';
        delayMatch4_reg(7) <= '0';
        delayMatch4_reg(8) <= '0';
        delayMatch4_reg(9) <= '0';
        delayMatch4_reg(10) <= '0';
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
        delayMatch4_reg(2) <= delayMatch4_reg_next(2);
        delayMatch4_reg(3) <= delayMatch4_reg_next(3);
        delayMatch4_reg(4) <= delayMatch4_reg_next(4);
        delayMatch4_reg(5) <= delayMatch4_reg_next(5);
        delayMatch4_reg(6) <= delayMatch4_reg_next(6);
        delayMatch4_reg(7) <= delayMatch4_reg_next(7);
        delayMatch4_reg(8) <= delayMatch4_reg_next(8);
        delayMatch4_reg(9) <= delayMatch4_reg_next(9);
        delayMatch4_reg(10) <= delayMatch4_reg_next(10);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  End_Cycle_5 <= delayMatch4_reg(10);
  delayMatch4_reg_next(0) <= End_Cycle_4;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);
  delayMatch4_reg_next(2) <= delayMatch4_reg(1);
  delayMatch4_reg_next(3) <= delayMatch4_reg(2);
  delayMatch4_reg_next(4) <= delayMatch4_reg(3);
  delayMatch4_reg_next(5) <= delayMatch4_reg(4);
  delayMatch4_reg_next(6) <= delayMatch4_reg(5);
  delayMatch4_reg_next(7) <= delayMatch4_reg(6);
  delayMatch4_reg_next(8) <= delayMatch4_reg(7);
  delayMatch4_reg_next(9) <= delayMatch4_reg(8);
  delayMatch4_reg_next(10) <= delayMatch4_reg(9);

  
  switch_compare_1_4 <= '1' WHEN End_Cycle_5 = '1' ELSE
      '0';

  stateControl_5 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg(0) <= '0';
        delayMatch3_reg(1) <= '0';
        delayMatch3_reg(2) <= '0';
        delayMatch3_reg(3) <= '0';
        delayMatch3_reg(4) <= '0';
        delayMatch3_reg(5) <= '0';
        delayMatch3_reg(6) <= '0';
        delayMatch3_reg(7) <= '0';
        delayMatch3_reg(8) <= '0';
        delayMatch3_reg(9) <= '0';
        delayMatch3_reg(10) <= '0';
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
        delayMatch3_reg(3) <= delayMatch3_reg_next(3);
        delayMatch3_reg(4) <= delayMatch3_reg_next(4);
        delayMatch3_reg(5) <= delayMatch3_reg_next(5);
        delayMatch3_reg(6) <= delayMatch3_reg_next(6);
        delayMatch3_reg(7) <= delayMatch3_reg_next(7);
        delayMatch3_reg(8) <= delayMatch3_reg_next(8);
        delayMatch3_reg(9) <= delayMatch3_reg_next(9);
        delayMatch3_reg(10) <= delayMatch3_reg_next(10);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_6 <= delayMatch3_reg(10);
  delayMatch3_reg_next(0) <= stateControl_5;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);
  delayMatch3_reg_next(3) <= delayMatch3_reg(2);
  delayMatch3_reg_next(4) <= delayMatch3_reg(3);
  delayMatch3_reg_next(5) <= delayMatch3_reg(4);
  delayMatch3_reg_next(6) <= delayMatch3_reg(5);
  delayMatch3_reg_next(7) <= delayMatch3_reg(6);
  delayMatch3_reg_next(8) <= delayMatch3_reg(7);
  delayMatch3_reg_next(9) <= delayMatch3_reg(8);
  delayMatch3_reg_next(10) <= delayMatch3_reg(9);

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch2_reg(0) <= X"00000000";
        delayMatch2_reg(1) <= X"00000000";
        delayMatch2_reg(2) <= X"00000000";
        delayMatch2_reg(3) <= X"00000000";
        delayMatch2_reg(4) <= X"00000000";
        delayMatch2_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  pole_pairs_AXI_1 <= delayMatch2_reg(5);
  delayMatch2_reg_next(0) <= pole_pairs_AXI;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);

  omega_el_1 <= omega_el;

  
  Switch_on14_out1_1 <= Delay33_out1 WHEN stateControl_6 = '0' ELSE
      Switch_on14_out1;

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay33_out1 <= Switch_on14_out1_1;
      END IF;
    END IF;
  END PROCESS Delay33_process;


  
  Switch_on14_out1 <= Delay33_out1 WHEN switch_compare_1_4 = '0' ELSE
      omega_el_1;

  
  switch_compare_1_5 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay14_out1 <= Lq_AXI;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch_on8_out1_1 <= Switch_on8_out1 WHEN switch_compare_1_5 = '0' ELSE
      Delay14_out1;

  reduced_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on8_out1 <= Switch_on8_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_6_process;


  reduced_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_3(0) <= X"00000000";
        reduced_reg_3(1) <= X"00000000";
        reduced_reg_3(2) <= X"00000000";
        reduced_reg_3(3) <= X"00000000";
        reduced_reg_3(4) <= X"00000000";
        reduced_reg_3(5) <= X"00000000";
        reduced_reg_3(6) <= X"00000000";
        reduced_reg_3(7) <= X"00000000";
        reduced_reg_3(8) <= X"00000000";
        reduced_reg_3(9) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_3(0) <= reduced_reg_next_3(0);
        reduced_reg_3(1) <= reduced_reg_next_3(1);
        reduced_reg_3(2) <= reduced_reg_next_3(2);
        reduced_reg_3(3) <= reduced_reg_next_3(3);
        reduced_reg_3(4) <= reduced_reg_next_3(4);
        reduced_reg_3(5) <= reduced_reg_next_3(5);
        reduced_reg_3(6) <= reduced_reg_next_3(6);
        reduced_reg_3(7) <= reduced_reg_next_3(7);
        reduced_reg_3(8) <= reduced_reg_next_3(8);
        reduced_reg_3(9) <= reduced_reg_next_3(9);
      END IF;
    END IF;
  END PROCESS reduced_7_process;

  Switch_on8_out1_2 <= reduced_reg_3(9);
  reduced_reg_next_3(0) <= Switch_on8_out1;
  reduced_reg_next_3(1) <= reduced_reg_3(0);
  reduced_reg_next_3(2) <= reduced_reg_3(1);
  reduced_reg_next_3(3) <= reduced_reg_3(2);
  reduced_reg_next_3(4) <= reduced_reg_3(3);
  reduced_reg_next_3(5) <= reduced_reg_3(4);
  reduced_reg_next_3(6) <= reduced_reg_3(5);
  reduced_reg_next_3(7) <= reduced_reg_3(6);
  reduced_reg_next_3(8) <= reduced_reg_3(7);
  reduced_reg_next_3(9) <= reduced_reg_3(8);

  
  switch_compare_1_6 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_7 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= '0';
        delayMatch6_reg(1) <= '0';
        delayMatch6_reg(2) <= '0';
        delayMatch6_reg(3) <= '0';
        delayMatch6_reg(4) <= '0';
        delayMatch6_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  stateControl_8 <= delayMatch6_reg(5);
  delayMatch6_reg_next(0) <= stateControl_7;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);
  delayMatch6_reg_next(5) <= delayMatch6_reg(4);

  iq_measured_signed <= signed(iq_measured);

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay18_out1 <= iq_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Switch_on4_out1_1 <= Delay4_out1 WHEN stateControl_8 = '0' ELSE
      Switch_on4_out1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch_on4_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_on4_out1 <= Delay4_out1 WHEN switch_compare_1_6 = '0' ELSE
      Data_Type_Conversion3_out1;

  reduced_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_4(0) <= X"00000000";
        reduced_reg_4(1) <= X"00000000";
        reduced_reg_4(2) <= X"00000000";
        reduced_reg_4(3) <= X"00000000";
        reduced_reg_4(4) <= X"00000000";
        reduced_reg_4(5) <= X"00000000";
        reduced_reg_4(6) <= X"00000000";
        reduced_reg_4(7) <= X"00000000";
        reduced_reg_4(8) <= X"00000000";
        reduced_reg_4(9) <= X"00000000";
        reduced_reg_4(10) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_4(0) <= reduced_reg_next_4(0);
        reduced_reg_4(1) <= reduced_reg_next_4(1);
        reduced_reg_4(2) <= reduced_reg_next_4(2);
        reduced_reg_4(3) <= reduced_reg_next_4(3);
        reduced_reg_4(4) <= reduced_reg_next_4(4);
        reduced_reg_4(5) <= reduced_reg_next_4(5);
        reduced_reg_4(6) <= reduced_reg_next_4(6);
        reduced_reg_4(7) <= reduced_reg_next_4(7);
        reduced_reg_4(8) <= reduced_reg_next_4(8);
        reduced_reg_4(9) <= reduced_reg_next_4(9);
        reduced_reg_4(10) <= reduced_reg_next_4(10);
      END IF;
    END IF;
  END PROCESS reduced_8_process;

  Switch_on4_out1_2 <= reduced_reg_4(10);
  reduced_reg_next_4(0) <= Switch_on4_out1;
  reduced_reg_next_4(1) <= reduced_reg_4(0);
  reduced_reg_next_4(2) <= reduced_reg_4(1);
  reduced_reg_next_4(3) <= reduced_reg_4(2);
  reduced_reg_next_4(4) <= reduced_reg_4(3);
  reduced_reg_next_4(5) <= reduced_reg_4(4);
  reduced_reg_next_4(6) <= reduced_reg_4(5);
  reduced_reg_next_4(7) <= reduced_reg_4(6);
  reduced_reg_next_4(8) <= reduced_reg_4(7);
  reduced_reg_next_4(9) <= reduced_reg_4(8);
  reduced_reg_next_4(10) <= reduced_reg_4(9);

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= X"00000000";
        delayMatch15_reg(1) <= X"00000000";
        delayMatch15_reg(2) <= X"00000000";
        delayMatch15_reg(3) <= X"00000000";
        delayMatch15_reg(4) <= X"00000000";
        delayMatch15_reg(5) <= X"00000000";
        delayMatch15_reg(6) <= X"00000000";
        delayMatch15_reg(7) <= X"00000000";
        delayMatch15_reg(8) <= X"00000000";
        delayMatch15_reg(9) <= X"00000000";
        delayMatch15_reg(10) <= X"00000000";
        delayMatch15_reg(11) <= X"00000000";
        delayMatch15_reg(12) <= X"00000000";
        delayMatch15_reg(13) <= X"00000000";
        delayMatch15_reg(14) <= X"00000000";
        delayMatch15_reg(15) <= X"00000000";
        delayMatch15_reg(16) <= X"00000000";
        delayMatch15_reg(17) <= X"00000000";
        delayMatch15_reg(18) <= X"00000000";
        delayMatch15_reg(19) <= X"00000000";
        delayMatch15_reg(20) <= X"00000000";
        delayMatch15_reg(21) <= X"00000000";
        delayMatch15_reg(22) <= X"00000000";
        delayMatch15_reg(23) <= X"00000000";
        delayMatch15_reg(24) <= X"00000000";
        delayMatch15_reg(25) <= X"00000000";
        delayMatch15_reg(26) <= X"00000000";
        delayMatch15_reg(27) <= X"00000000";
        delayMatch15_reg(28) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
        delayMatch15_reg(3) <= delayMatch15_reg_next(3);
        delayMatch15_reg(4) <= delayMatch15_reg_next(4);
        delayMatch15_reg(5) <= delayMatch15_reg_next(5);
        delayMatch15_reg(6) <= delayMatch15_reg_next(6);
        delayMatch15_reg(7) <= delayMatch15_reg_next(7);
        delayMatch15_reg(8) <= delayMatch15_reg_next(8);
        delayMatch15_reg(9) <= delayMatch15_reg_next(9);
        delayMatch15_reg(10) <= delayMatch15_reg_next(10);
        delayMatch15_reg(11) <= delayMatch15_reg_next(11);
        delayMatch15_reg(12) <= delayMatch15_reg_next(12);
        delayMatch15_reg(13) <= delayMatch15_reg_next(13);
        delayMatch15_reg(14) <= delayMatch15_reg_next(14);
        delayMatch15_reg(15) <= delayMatch15_reg_next(15);
        delayMatch15_reg(16) <= delayMatch15_reg_next(16);
        delayMatch15_reg(17) <= delayMatch15_reg_next(17);
        delayMatch15_reg(18) <= delayMatch15_reg_next(18);
        delayMatch15_reg(19) <= delayMatch15_reg_next(19);
        delayMatch15_reg(20) <= delayMatch15_reg_next(20);
        delayMatch15_reg(21) <= delayMatch15_reg_next(21);
        delayMatch15_reg(22) <= delayMatch15_reg_next(22);
        delayMatch15_reg(23) <= delayMatch15_reg_next(23);
        delayMatch15_reg(24) <= delayMatch15_reg_next(24);
        delayMatch15_reg(25) <= delayMatch15_reg_next(25);
        delayMatch15_reg(26) <= delayMatch15_reg_next(26);
        delayMatch15_reg(27) <= delayMatch15_reg_next(27);
        delayMatch15_reg(28) <= delayMatch15_reg_next(28);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  Switch_on3_out1_2 <= delayMatch15_reg(28);
  delayMatch15_reg_next(0) <= Switch_on3_out1;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);
  delayMatch15_reg_next(3) <= delayMatch15_reg(2);
  delayMatch15_reg_next(4) <= delayMatch15_reg(3);
  delayMatch15_reg_next(5) <= delayMatch15_reg(4);
  delayMatch15_reg_next(6) <= delayMatch15_reg(5);
  delayMatch15_reg_next(7) <= delayMatch15_reg(6);
  delayMatch15_reg_next(8) <= delayMatch15_reg(7);
  delayMatch15_reg_next(9) <= delayMatch15_reg(8);
  delayMatch15_reg_next(10) <= delayMatch15_reg(9);
  delayMatch15_reg_next(11) <= delayMatch15_reg(10);
  delayMatch15_reg_next(12) <= delayMatch15_reg(11);
  delayMatch15_reg_next(13) <= delayMatch15_reg(12);
  delayMatch15_reg_next(14) <= delayMatch15_reg(13);
  delayMatch15_reg_next(15) <= delayMatch15_reg(14);
  delayMatch15_reg_next(16) <= delayMatch15_reg(15);
  delayMatch15_reg_next(17) <= delayMatch15_reg(16);
  delayMatch15_reg_next(18) <= delayMatch15_reg(17);
  delayMatch15_reg_next(19) <= delayMatch15_reg(18);
  delayMatch15_reg_next(20) <= delayMatch15_reg(19);
  delayMatch15_reg_next(21) <= delayMatch15_reg(20);
  delayMatch15_reg_next(22) <= delayMatch15_reg(21);
  delayMatch15_reg_next(23) <= delayMatch15_reg(22);
  delayMatch15_reg_next(24) <= delayMatch15_reg(23);
  delayMatch15_reg_next(25) <= delayMatch15_reg(24);
  delayMatch15_reg_next(26) <= delayMatch15_reg(25);
  delayMatch15_reg_next(27) <= delayMatch15_reg(26);
  delayMatch15_reg_next(28) <= delayMatch15_reg(27);

  Data_Type_Conversion_out1_signed <= signed(Data_Type_Conversion_out1);

  reduced_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Data_Type_Conversion_out1_1 <= Data_Type_Conversion_out1_signed;
      END IF;
    END IF;
  END PROCESS reduced_9_process;


  id_k_1 <= std_logic_vector(Data_Type_Conversion_out1_1);

  
  switch_compare_1_7 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay30_out1 <= SampleTime_div_Lq_AXI;
      END IF;
    END IF;
  END PROCESS Delay30_process;


  
  Switch_on11_out1_1 <= Switch_on11_out1 WHEN switch_compare_1_7 = '0' ELSE
      Delay30_out1;

  reduced_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on11_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on11_out1 <= Switch_on11_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_10_process;


  reduced_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_5(0) <= X"00000000";
        reduced_reg_5(1) <= X"00000000";
        reduced_reg_5(2) <= X"00000000";
        reduced_reg_5(3) <= X"00000000";
        reduced_reg_5(4) <= X"00000000";
        reduced_reg_5(5) <= X"00000000";
        reduced_reg_5(6) <= X"00000000";
        reduced_reg_5(7) <= X"00000000";
        reduced_reg_5(8) <= X"00000000";
        reduced_reg_5(9) <= X"00000000";
        reduced_reg_5(10) <= X"00000000";
        reduced_reg_5(11) <= X"00000000";
        reduced_reg_5(12) <= X"00000000";
        reduced_reg_5(13) <= X"00000000";
        reduced_reg_5(14) <= X"00000000";
        reduced_reg_5(15) <= X"00000000";
        reduced_reg_5(16) <= X"00000000";
        reduced_reg_5(17) <= X"00000000";
        reduced_reg_5(18) <= X"00000000";
        reduced_reg_5(19) <= X"00000000";
        reduced_reg_5(20) <= X"00000000";
        reduced_reg_5(21) <= X"00000000";
        reduced_reg_5(22) <= X"00000000";
        reduced_reg_5(23) <= X"00000000";
        reduced_reg_5(24) <= X"00000000";
        reduced_reg_5(25) <= X"00000000";
        reduced_reg_5(26) <= X"00000000";
        reduced_reg_5(27) <= X"00000000";
        reduced_reg_5(28) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_5(0) <= reduced_reg_next_5(0);
        reduced_reg_5(1) <= reduced_reg_next_5(1);
        reduced_reg_5(2) <= reduced_reg_next_5(2);
        reduced_reg_5(3) <= reduced_reg_next_5(3);
        reduced_reg_5(4) <= reduced_reg_next_5(4);
        reduced_reg_5(5) <= reduced_reg_next_5(5);
        reduced_reg_5(6) <= reduced_reg_next_5(6);
        reduced_reg_5(7) <= reduced_reg_next_5(7);
        reduced_reg_5(8) <= reduced_reg_next_5(8);
        reduced_reg_5(9) <= reduced_reg_next_5(9);
        reduced_reg_5(10) <= reduced_reg_next_5(10);
        reduced_reg_5(11) <= reduced_reg_next_5(11);
        reduced_reg_5(12) <= reduced_reg_next_5(12);
        reduced_reg_5(13) <= reduced_reg_next_5(13);
        reduced_reg_5(14) <= reduced_reg_next_5(14);
        reduced_reg_5(15) <= reduced_reg_next_5(15);
        reduced_reg_5(16) <= reduced_reg_next_5(16);
        reduced_reg_5(17) <= reduced_reg_next_5(17);
        reduced_reg_5(18) <= reduced_reg_next_5(18);
        reduced_reg_5(19) <= reduced_reg_next_5(19);
        reduced_reg_5(20) <= reduced_reg_next_5(20);
        reduced_reg_5(21) <= reduced_reg_next_5(21);
        reduced_reg_5(22) <= reduced_reg_next_5(22);
        reduced_reg_5(23) <= reduced_reg_next_5(23);
        reduced_reg_5(24) <= reduced_reg_next_5(24);
        reduced_reg_5(25) <= reduced_reg_next_5(25);
        reduced_reg_5(26) <= reduced_reg_next_5(26);
        reduced_reg_5(27) <= reduced_reg_next_5(27);
        reduced_reg_5(28) <= reduced_reg_next_5(28);
      END IF;
    END IF;
  END PROCESS reduced_11_process;

  Switch_on11_out1_2 <= reduced_reg_5(28);
  reduced_reg_next_5(0) <= Switch_on11_out1;
  reduced_reg_next_5(1) <= reduced_reg_5(0);
  reduced_reg_next_5(2) <= reduced_reg_5(1);
  reduced_reg_next_5(3) <= reduced_reg_5(2);
  reduced_reg_next_5(4) <= reduced_reg_5(3);
  reduced_reg_next_5(5) <= reduced_reg_5(4);
  reduced_reg_next_5(6) <= reduced_reg_5(5);
  reduced_reg_next_5(7) <= reduced_reg_5(6);
  reduced_reg_next_5(8) <= reduced_reg_5(7);
  reduced_reg_next_5(9) <= reduced_reg_5(8);
  reduced_reg_next_5(10) <= reduced_reg_5(9);
  reduced_reg_next_5(11) <= reduced_reg_5(10);
  reduced_reg_next_5(12) <= reduced_reg_5(11);
  reduced_reg_next_5(13) <= reduced_reg_5(12);
  reduced_reg_next_5(14) <= reduced_reg_5(13);
  reduced_reg_next_5(15) <= reduced_reg_5(14);
  reduced_reg_next_5(16) <= reduced_reg_5(15);
  reduced_reg_next_5(17) <= reduced_reg_5(16);
  reduced_reg_next_5(18) <= reduced_reg_5(17);
  reduced_reg_next_5(19) <= reduced_reg_5(18);
  reduced_reg_next_5(20) <= reduced_reg_5(19);
  reduced_reg_next_5(21) <= reduced_reg_5(20);
  reduced_reg_next_5(22) <= reduced_reg_5(21);
  reduced_reg_next_5(23) <= reduced_reg_5(22);
  reduced_reg_next_5(24) <= reduced_reg_5(23);
  reduced_reg_next_5(25) <= reduced_reg_5(24);
  reduced_reg_next_5(26) <= reduced_reg_5(25);
  reduced_reg_next_5(27) <= reduced_reg_5(26);
  reduced_reg_next_5(28) <= reduced_reg_5(27);

  
  switch_compare_1_8 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_9 <= '1';

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch18_reg(0) <= '0';
        delayMatch18_reg(1) <= '0';
        delayMatch18_reg(2) <= '0';
        delayMatch18_reg(3) <= '0';
        delayMatch18_reg(4) <= '0';
        delayMatch18_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch18_reg(0) <= delayMatch18_reg_next(0);
        delayMatch18_reg(1) <= delayMatch18_reg_next(1);
        delayMatch18_reg(2) <= delayMatch18_reg_next(2);
        delayMatch18_reg(3) <= delayMatch18_reg_next(3);
        delayMatch18_reg(4) <= delayMatch18_reg_next(4);
        delayMatch18_reg(5) <= delayMatch18_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  stateControl_10 <= delayMatch18_reg(5);
  delayMatch18_reg_next(0) <= stateControl_9;
  delayMatch18_reg_next(1) <= delayMatch18_reg(0);
  delayMatch18_reg_next(2) <= delayMatch18_reg(1);
  delayMatch18_reg_next(3) <= delayMatch18_reg(2);
  delayMatch18_reg_next(4) <= delayMatch18_reg(3);
  delayMatch18_reg_next(5) <= delayMatch18_reg(4);

  
  Switch_on15_out1_1 <= Delay36_out1 WHEN stateControl_10 = '0' ELSE
      Switch_on15_out1;

  Delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay36_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay36_out1 <= Switch_on15_out1_1;
      END IF;
    END IF;
  END PROCESS Delay36_process;


  
  Switch_on15_out1 <= Delay36_out1 WHEN switch_compare_1_8 = '0' ELSE
      nfp_out_2_1;

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch21_reg(0) <= X"00000000";
        delayMatch21_reg(1) <= X"00000000";
        delayMatch21_reg(2) <= X"00000000";
        delayMatch21_reg(3) <= X"00000000";
        delayMatch21_reg(4) <= X"00000000";
        delayMatch21_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch21_reg(0) <= delayMatch21_reg_next(0);
        delayMatch21_reg(1) <= delayMatch21_reg_next(1);
        delayMatch21_reg(2) <= delayMatch21_reg_next(2);
        delayMatch21_reg(3) <= delayMatch21_reg_next(3);
        delayMatch21_reg(4) <= delayMatch21_reg_next(4);
        delayMatch21_reg(5) <= delayMatch21_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  Switch_on15_out1_2 <= delayMatch21_reg(5);
  delayMatch21_reg_next(0) <= Switch_on15_out1;
  delayMatch21_reg_next(1) <= delayMatch21_reg(0);
  delayMatch21_reg_next(2) <= delayMatch21_reg(1);
  delayMatch21_reg_next(3) <= delayMatch21_reg(2);
  delayMatch21_reg_next(4) <= delayMatch21_reg(3);
  delayMatch21_reg_next(5) <= delayMatch21_reg(4);

  delayMatch23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch23_reg(0) <= X"00000000";
        delayMatch23_reg(1) <= X"00000000";
        delayMatch23_reg(2) <= X"00000000";
        delayMatch23_reg(3) <= X"00000000";
        delayMatch23_reg(4) <= X"00000000";
        delayMatch23_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch23_reg(0) <= delayMatch23_reg_next(0);
        delayMatch23_reg(1) <= delayMatch23_reg_next(1);
        delayMatch23_reg(2) <= delayMatch23_reg_next(2);
        delayMatch23_reg(3) <= delayMatch23_reg_next(3);
        delayMatch23_reg(4) <= delayMatch23_reg_next(4);
        delayMatch23_reg(5) <= delayMatch23_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch23_process;

  Subtract1_op_stage1_1 <= delayMatch23_reg(5);
  delayMatch23_reg_next(0) <= Subtract1_op_stage1;
  delayMatch23_reg_next(1) <= delayMatch23_reg(0);
  delayMatch23_reg_next(2) <= delayMatch23_reg(1);
  delayMatch23_reg_next(3) <= delayMatch23_reg(2);
  delayMatch23_reg_next(4) <= delayMatch23_reg(3);
  delayMatch23_reg_next(5) <= delayMatch23_reg(4);

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch22_reg(0) <= X"00000000";
        delayMatch22_reg(1) <= X"00000000";
        delayMatch22_reg(2) <= X"00000000";
        delayMatch22_reg(3) <= X"00000000";
        delayMatch22_reg(4) <= X"00000000";
        delayMatch22_reg(5) <= X"00000000";
        delayMatch22_reg(6) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch22_reg(0) <= delayMatch22_reg_next(0);
        delayMatch22_reg(1) <= delayMatch22_reg_next(1);
        delayMatch22_reg(2) <= delayMatch22_reg_next(2);
        delayMatch22_reg(3) <= delayMatch22_reg_next(3);
        delayMatch22_reg(4) <= delayMatch22_reg_next(4);
        delayMatch22_reg(5) <= delayMatch22_reg_next(5);
        delayMatch22_reg(6) <= delayMatch22_reg_next(6);
      END IF;
    END IF;
  END PROCESS delayMatch22_process;

  Switch_on14_out1_2 <= delayMatch22_reg(6);
  delayMatch22_reg_next(0) <= Switch_on14_out1;
  delayMatch22_reg_next(1) <= delayMatch22_reg(0);
  delayMatch22_reg_next(2) <= delayMatch22_reg(1);
  delayMatch22_reg_next(3) <= delayMatch22_reg(2);
  delayMatch22_reg_next(4) <= delayMatch22_reg(3);
  delayMatch22_reg_next(5) <= delayMatch22_reg(4);
  delayMatch22_reg_next(6) <= delayMatch22_reg(5);

  
  switch_compare_1_9 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay15_out1 <= psiPM_AXI;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  
  Switch_on7_out1_1 <= Switch_on7_out1 WHEN switch_compare_1_9 = '0' ELSE
      Delay15_out1;

  reduced_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on7_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on7_out1 <= Switch_on7_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_12_process;


  reduced_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_6(0) <= X"00000000";
        reduced_reg_6(1) <= X"00000000";
        reduced_reg_6(2) <= X"00000000";
        reduced_reg_6(3) <= X"00000000";
        reduced_reg_6(4) <= X"00000000";
        reduced_reg_6(5) <= X"00000000";
        reduced_reg_6(6) <= X"00000000";
        reduced_reg_6(7) <= X"00000000";
        reduced_reg_6(8) <= X"00000000";
        reduced_reg_6(9) <= X"00000000";
        reduced_reg_6(10) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_6(0) <= reduced_reg_next_6(0);
        reduced_reg_6(1) <= reduced_reg_next_6(1);
        reduced_reg_6(2) <= reduced_reg_next_6(2);
        reduced_reg_6(3) <= reduced_reg_next_6(3);
        reduced_reg_6(4) <= reduced_reg_next_6(4);
        reduced_reg_6(5) <= reduced_reg_next_6(5);
        reduced_reg_6(6) <= reduced_reg_next_6(6);
        reduced_reg_6(7) <= reduced_reg_next_6(7);
        reduced_reg_6(8) <= reduced_reg_next_6(8);
        reduced_reg_6(9) <= reduced_reg_next_6(9);
        reduced_reg_6(10) <= reduced_reg_next_6(10);
      END IF;
    END IF;
  END PROCESS reduced_13_process;

  Switch_on7_out1_2 <= reduced_reg_6(10);
  reduced_reg_next_6(0) <= Switch_on7_out1;
  reduced_reg_next_6(1) <= reduced_reg_6(0);
  reduced_reg_next_6(2) <= reduced_reg_6(1);
  reduced_reg_next_6(3) <= reduced_reg_6(2);
  reduced_reg_next_6(4) <= reduced_reg_6(3);
  reduced_reg_next_6(5) <= reduced_reg_6(4);
  reduced_reg_next_6(6) <= reduced_reg_6(5);
  reduced_reg_next_6(7) <= reduced_reg_6(6);
  reduced_reg_next_6(8) <= reduced_reg_6(7);
  reduced_reg_next_6(9) <= reduced_reg_6(8);
  reduced_reg_next_6(10) <= reduced_reg_6(9);

  
  switch_compare_1_10 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay13_out1 <= Ld_AXI;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch_on9_out1_1 <= Switch_on9_out1 WHEN switch_compare_1_10 = '0' ELSE
      Delay13_out1;

  reduced_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on9_out1 <= Switch_on9_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_14_process;


  reduced_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_7(0) <= X"00000000";
        reduced_reg_7(1) <= X"00000000";
        reduced_reg_7(2) <= X"00000000";
        reduced_reg_7(3) <= X"00000000";
        reduced_reg_7(4) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_7(0) <= reduced_reg_next_7(0);
        reduced_reg_7(1) <= reduced_reg_next_7(1);
        reduced_reg_7(2) <= reduced_reg_next_7(2);
        reduced_reg_7(3) <= reduced_reg_next_7(3);
        reduced_reg_7(4) <= reduced_reg_next_7(4);
      END IF;
    END IF;
  END PROCESS reduced_15_process;

  Switch_on9_out1_2 <= reduced_reg_7(4);
  reduced_reg_next_7(0) <= Switch_on9_out1;
  reduced_reg_next_7(1) <= reduced_reg_7(0);
  reduced_reg_next_7(2) <= reduced_reg_7(1);
  reduced_reg_next_7(3) <= reduced_reg_7(2);
  reduced_reg_next_7(4) <= reduced_reg_7(3);

  reduced_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_8(0) <= X"00000000";
        reduced_reg_8(1) <= X"00000000";
        reduced_reg_8(2) <= X"00000000";
        reduced_reg_8(3) <= X"00000000";
        reduced_reg_8(4) <= X"00000000";
        reduced_reg_8(5) <= X"00000000";
        reduced_reg_8(6) <= X"00000000";
        reduced_reg_8(7) <= X"00000000";
        reduced_reg_8(8) <= X"00000000";
        reduced_reg_8(9) <= X"00000000";
        reduced_reg_8(10) <= X"00000000";
        reduced_reg_8(11) <= X"00000000";
        reduced_reg_8(12) <= X"00000000";
        reduced_reg_8(13) <= X"00000000";
        reduced_reg_8(14) <= X"00000000";
        reduced_reg_8(15) <= X"00000000";
        reduced_reg_8(16) <= X"00000000";
        reduced_reg_8(17) <= X"00000000";
        reduced_reg_8(18) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_8(0) <= reduced_reg_next_8(0);
        reduced_reg_8(1) <= reduced_reg_next_8(1);
        reduced_reg_8(2) <= reduced_reg_next_8(2);
        reduced_reg_8(3) <= reduced_reg_next_8(3);
        reduced_reg_8(4) <= reduced_reg_next_8(4);
        reduced_reg_8(5) <= reduced_reg_next_8(5);
        reduced_reg_8(6) <= reduced_reg_next_8(6);
        reduced_reg_8(7) <= reduced_reg_next_8(7);
        reduced_reg_8(8) <= reduced_reg_next_8(8);
        reduced_reg_8(9) <= reduced_reg_next_8(9);
        reduced_reg_8(10) <= reduced_reg_next_8(10);
        reduced_reg_8(11) <= reduced_reg_next_8(11);
        reduced_reg_8(12) <= reduced_reg_next_8(12);
        reduced_reg_8(13) <= reduced_reg_next_8(13);
        reduced_reg_8(14) <= reduced_reg_next_8(14);
        reduced_reg_8(15) <= reduced_reg_next_8(15);
        reduced_reg_8(16) <= reduced_reg_next_8(16);
        reduced_reg_8(17) <= reduced_reg_next_8(17);
        reduced_reg_8(18) <= reduced_reg_next_8(18);
      END IF;
    END IF;
  END PROCESS reduced_16_process;

  Switch_on4_out1_3 <= reduced_reg_8(18);
  reduced_reg_next_8(0) <= Switch_on4_out1_2;
  reduced_reg_next_8(1) <= reduced_reg_8(0);
  reduced_reg_next_8(2) <= reduced_reg_8(1);
  reduced_reg_next_8(3) <= reduced_reg_8(2);
  reduced_reg_next_8(4) <= reduced_reg_8(3);
  reduced_reg_next_8(5) <= reduced_reg_8(4);
  reduced_reg_next_8(6) <= reduced_reg_8(5);
  reduced_reg_next_8(7) <= reduced_reg_8(6);
  reduced_reg_next_8(8) <= reduced_reg_8(7);
  reduced_reg_next_8(9) <= reduced_reg_8(8);
  reduced_reg_next_8(10) <= reduced_reg_8(9);
  reduced_reg_next_8(11) <= reduced_reg_8(10);
  reduced_reg_next_8(12) <= reduced_reg_8(11);
  reduced_reg_next_8(13) <= reduced_reg_8(12);
  reduced_reg_next_8(14) <= reduced_reg_8(13);
  reduced_reg_next_8(15) <= reduced_reg_8(14);
  reduced_reg_next_8(16) <= reduced_reg_8(15);
  reduced_reg_next_8(17) <= reduced_reg_8(16);
  reduced_reg_next_8(18) <= reduced_reg_8(17);

  
  switch_compare_1_11 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay31_out1 <= SampleTime_div_Lx_AXI;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  
  Switch_on12_out1_1 <= Switch_on12_out1 WHEN switch_compare_1_11 = '0' ELSE
      Delay31_out1;

  reduced_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on12_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on12_out1 <= Switch_on12_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_17_process;


  reduced_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_9(0) <= X"00000000";
        reduced_reg_9(1) <= X"00000000";
        reduced_reg_9(2) <= X"00000000";
        reduced_reg_9(3) <= X"00000000";
        reduced_reg_9(4) <= X"00000000";
        reduced_reg_9(5) <= X"00000000";
        reduced_reg_9(6) <= X"00000000";
        reduced_reg_9(7) <= X"00000000";
        reduced_reg_9(8) <= X"00000000";
        reduced_reg_9(9) <= X"00000000";
        reduced_reg_9(10) <= X"00000000";
        reduced_reg_9(11) <= X"00000000";
        reduced_reg_9(12) <= X"00000000";
        reduced_reg_9(13) <= X"00000000";
        reduced_reg_9(14) <= X"00000000";
        reduced_reg_9(15) <= X"00000000";
        reduced_reg_9(16) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_9(0) <= reduced_reg_next_9(0);
        reduced_reg_9(1) <= reduced_reg_next_9(1);
        reduced_reg_9(2) <= reduced_reg_next_9(2);
        reduced_reg_9(3) <= reduced_reg_next_9(3);
        reduced_reg_9(4) <= reduced_reg_next_9(4);
        reduced_reg_9(5) <= reduced_reg_next_9(5);
        reduced_reg_9(6) <= reduced_reg_next_9(6);
        reduced_reg_9(7) <= reduced_reg_next_9(7);
        reduced_reg_9(8) <= reduced_reg_next_9(8);
        reduced_reg_9(9) <= reduced_reg_next_9(9);
        reduced_reg_9(10) <= reduced_reg_next_9(10);
        reduced_reg_9(11) <= reduced_reg_next_9(11);
        reduced_reg_9(12) <= reduced_reg_next_9(12);
        reduced_reg_9(13) <= reduced_reg_next_9(13);
        reduced_reg_9(14) <= reduced_reg_next_9(14);
        reduced_reg_9(15) <= reduced_reg_next_9(15);
        reduced_reg_9(16) <= reduced_reg_next_9(16);
      END IF;
    END IF;
  END PROCESS reduced_18_process;

  Switch_on12_out1_2 <= reduced_reg_9(16);
  reduced_reg_next_9(0) <= Switch_on12_out1;
  reduced_reg_next_9(1) <= reduced_reg_9(0);
  reduced_reg_next_9(2) <= reduced_reg_9(1);
  reduced_reg_next_9(3) <= reduced_reg_9(2);
  reduced_reg_next_9(4) <= reduced_reg_9(3);
  reduced_reg_next_9(5) <= reduced_reg_9(4);
  reduced_reg_next_9(6) <= reduced_reg_9(5);
  reduced_reg_next_9(7) <= reduced_reg_9(6);
  reduced_reg_next_9(8) <= reduced_reg_9(7);
  reduced_reg_next_9(9) <= reduced_reg_9(8);
  reduced_reg_next_9(10) <= reduced_reg_9(9);
  reduced_reg_next_9(11) <= reduced_reg_9(10);
  reduced_reg_next_9(12) <= reduced_reg_9(11);
  reduced_reg_next_9(13) <= reduced_reg_9(12);
  reduced_reg_next_9(14) <= reduced_reg_9(13);
  reduced_reg_next_9(15) <= reduced_reg_9(14);
  reduced_reg_next_9(16) <= reduced_reg_9(15);

  
  switch_compare_1_12 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_11 <= '1';

  delayMatch28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch28_reg(0) <= '0';
        delayMatch28_reg(1) <= '0';
        delayMatch28_reg(2) <= '0';
        delayMatch28_reg(3) <= '0';
        delayMatch28_reg(4) <= '0';
        delayMatch28_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch28_reg(0) <= delayMatch28_reg_next(0);
        delayMatch28_reg(1) <= delayMatch28_reg_next(1);
        delayMatch28_reg(2) <= delayMatch28_reg_next(2);
        delayMatch28_reg(3) <= delayMatch28_reg_next(3);
        delayMatch28_reg(4) <= delayMatch28_reg_next(4);
        delayMatch28_reg(5) <= delayMatch28_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch28_process;

  stateControl_12 <= delayMatch28_reg(5);
  delayMatch28_reg_next(0) <= stateControl_11;
  delayMatch28_reg_next(1) <= delayMatch28_reg(0);
  delayMatch28_reg_next(2) <= delayMatch28_reg(1);
  delayMatch28_reg_next(3) <= delayMatch28_reg(2);
  delayMatch28_reg_next(4) <= delayMatch28_reg(3);
  delayMatch28_reg_next(5) <= delayMatch28_reg(4);

  
  Switch_on16_out1_1 <= Delay37_out1 WHEN stateControl_12 = '0' ELSE
      Switch_on16_out1;

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay37_out1 <= Switch_on16_out1_1;
      END IF;
    END IF;
  END PROCESS Delay37_process;


  
  Switch_on16_out1 <= Delay37_out1 WHEN switch_compare_1_12 = '0' ELSE
      nfp_out_3_1;

  delayMatch31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch31_reg(0) <= X"00000000";
        delayMatch31_reg(1) <= X"00000000";
        delayMatch31_reg(2) <= X"00000000";
        delayMatch31_reg(3) <= X"00000000";
        delayMatch31_reg(4) <= X"00000000";
        delayMatch31_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch31_reg(0) <= delayMatch31_reg_next(0);
        delayMatch31_reg(1) <= delayMatch31_reg_next(1);
        delayMatch31_reg(2) <= delayMatch31_reg_next(2);
        delayMatch31_reg(3) <= delayMatch31_reg_next(3);
        delayMatch31_reg(4) <= delayMatch31_reg_next(4);
        delayMatch31_reg(5) <= delayMatch31_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch31_process;

  Switch_on16_out1_2 <= delayMatch31_reg(5);
  delayMatch31_reg_next(0) <= Switch_on16_out1;
  delayMatch31_reg_next(1) <= delayMatch31_reg(0);
  delayMatch31_reg_next(2) <= delayMatch31_reg(1);
  delayMatch31_reg_next(3) <= delayMatch31_reg(2);
  delayMatch31_reg_next(4) <= delayMatch31_reg(3);
  delayMatch31_reg_next(5) <= delayMatch31_reg(4);

  
  switch_compare_1_13 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_13 <= '1';

  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_reg(0) <= '0';
        delayMatch26_reg(1) <= '0';
        delayMatch26_reg(2) <= '0';
        delayMatch26_reg(3) <= '0';
        delayMatch26_reg(4) <= '0';
        delayMatch26_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch26_reg(0) <= delayMatch26_reg_next(0);
        delayMatch26_reg(1) <= delayMatch26_reg_next(1);
        delayMatch26_reg(2) <= delayMatch26_reg_next(2);
        delayMatch26_reg(3) <= delayMatch26_reg_next(3);
        delayMatch26_reg(4) <= delayMatch26_reg_next(4);
        delayMatch26_reg(5) <= delayMatch26_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch26_process;

  stateControl_14 <= delayMatch26_reg(5);
  delayMatch26_reg_next(0) <= stateControl_13;
  delayMatch26_reg_next(1) <= delayMatch26_reg(0);
  delayMatch26_reg_next(2) <= delayMatch26_reg(1);
  delayMatch26_reg_next(3) <= delayMatch26_reg(2);
  delayMatch26_reg_next(4) <= delayMatch26_reg(3);
  delayMatch26_reg_next(5) <= delayMatch26_reg(4);

  ix_measured_signed <= signed(ix_measured);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay17_out1 <= ix_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  Switch_on5_out1_1 <= Delay5_out1 WHEN stateControl_14 = '0' ELSE
      Switch_on5_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch_on5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch_on5_out1 <= Delay5_out1 WHEN switch_compare_1_13 = '0' ELSE
      Data_Type_Conversion5_out1;

  delayMatch33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch33_reg(0) <= X"00000000";
        delayMatch33_reg(1) <= X"00000000";
        delayMatch33_reg(2) <= X"00000000";
        delayMatch33_reg(3) <= X"00000000";
        delayMatch33_reg(4) <= X"00000000";
        delayMatch33_reg(5) <= X"00000000";
        delayMatch33_reg(6) <= X"00000000";
        delayMatch33_reg(7) <= X"00000000";
        delayMatch33_reg(8) <= X"00000000";
        delayMatch33_reg(9) <= X"00000000";
        delayMatch33_reg(10) <= X"00000000";
        delayMatch33_reg(11) <= X"00000000";
        delayMatch33_reg(12) <= X"00000000";
        delayMatch33_reg(13) <= X"00000000";
        delayMatch33_reg(14) <= X"00000000";
        delayMatch33_reg(15) <= X"00000000";
        delayMatch33_reg(16) <= X"00000000";
        delayMatch33_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch33_reg(0) <= delayMatch33_reg_next(0);
        delayMatch33_reg(1) <= delayMatch33_reg_next(1);
        delayMatch33_reg(2) <= delayMatch33_reg_next(2);
        delayMatch33_reg(3) <= delayMatch33_reg_next(3);
        delayMatch33_reg(4) <= delayMatch33_reg_next(4);
        delayMatch33_reg(5) <= delayMatch33_reg_next(5);
        delayMatch33_reg(6) <= delayMatch33_reg_next(6);
        delayMatch33_reg(7) <= delayMatch33_reg_next(7);
        delayMatch33_reg(8) <= delayMatch33_reg_next(8);
        delayMatch33_reg(9) <= delayMatch33_reg_next(9);
        delayMatch33_reg(10) <= delayMatch33_reg_next(10);
        delayMatch33_reg(11) <= delayMatch33_reg_next(11);
        delayMatch33_reg(12) <= delayMatch33_reg_next(12);
        delayMatch33_reg(13) <= delayMatch33_reg_next(13);
        delayMatch33_reg(14) <= delayMatch33_reg_next(14);
        delayMatch33_reg(15) <= delayMatch33_reg_next(15);
        delayMatch33_reg(16) <= delayMatch33_reg_next(16);
        delayMatch33_reg(17) <= delayMatch33_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch33_process;

  Switch_on5_out1_2 <= delayMatch33_reg(17);
  delayMatch33_reg_next(0) <= Switch_on5_out1;
  delayMatch33_reg_next(1) <= delayMatch33_reg(0);
  delayMatch33_reg_next(2) <= delayMatch33_reg(1);
  delayMatch33_reg_next(3) <= delayMatch33_reg(2);
  delayMatch33_reg_next(4) <= delayMatch33_reg(3);
  delayMatch33_reg_next(5) <= delayMatch33_reg(4);
  delayMatch33_reg_next(6) <= delayMatch33_reg(5);
  delayMatch33_reg_next(7) <= delayMatch33_reg(6);
  delayMatch33_reg_next(8) <= delayMatch33_reg(7);
  delayMatch33_reg_next(9) <= delayMatch33_reg(8);
  delayMatch33_reg_next(10) <= delayMatch33_reg(9);
  delayMatch33_reg_next(11) <= delayMatch33_reg(10);
  delayMatch33_reg_next(12) <= delayMatch33_reg(11);
  delayMatch33_reg_next(13) <= delayMatch33_reg(12);
  delayMatch33_reg_next(14) <= delayMatch33_reg(13);
  delayMatch33_reg_next(15) <= delayMatch33_reg(14);
  delayMatch33_reg_next(16) <= delayMatch33_reg(15);
  delayMatch33_reg_next(17) <= delayMatch33_reg(16);

  Data_Type_Conversion8_out1_signed <= signed(Data_Type_Conversion8_out1);

  reduced_19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_10(0) <= to_signed(16#00000#, 18);
        reduced_reg_10(1) <= to_signed(16#00000#, 18);
        reduced_reg_10(2) <= to_signed(16#00000#, 18);
        reduced_reg_10(3) <= to_signed(16#00000#, 18);
        reduced_reg_10(4) <= to_signed(16#00000#, 18);
        reduced_reg_10(5) <= to_signed(16#00000#, 18);
        reduced_reg_10(6) <= to_signed(16#00000#, 18);
        reduced_reg_10(7) <= to_signed(16#00000#, 18);
        reduced_reg_10(8) <= to_signed(16#00000#, 18);
        reduced_reg_10(9) <= to_signed(16#00000#, 18);
        reduced_reg_10(10) <= to_signed(16#00000#, 18);
        reduced_reg_10(11) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_10(0) <= reduced_reg_next_10(0);
        reduced_reg_10(1) <= reduced_reg_next_10(1);
        reduced_reg_10(2) <= reduced_reg_next_10(2);
        reduced_reg_10(3) <= reduced_reg_next_10(3);
        reduced_reg_10(4) <= reduced_reg_next_10(4);
        reduced_reg_10(5) <= reduced_reg_next_10(5);
        reduced_reg_10(6) <= reduced_reg_next_10(6);
        reduced_reg_10(7) <= reduced_reg_next_10(7);
        reduced_reg_10(8) <= reduced_reg_next_10(8);
        reduced_reg_10(9) <= reduced_reg_next_10(9);
        reduced_reg_10(10) <= reduced_reg_next_10(10);
        reduced_reg_10(11) <= reduced_reg_next_10(11);
      END IF;
    END IF;
  END PROCESS reduced_19_process;

  Data_Type_Conversion8_out1_1 <= reduced_reg_10(11);
  reduced_reg_next_10(0) <= Data_Type_Conversion8_out1_signed;
  reduced_reg_next_10(1) <= reduced_reg_10(0);
  reduced_reg_next_10(2) <= reduced_reg_10(1);
  reduced_reg_next_10(3) <= reduced_reg_10(2);
  reduced_reg_next_10(4) <= reduced_reg_10(3);
  reduced_reg_next_10(5) <= reduced_reg_10(4);
  reduced_reg_next_10(6) <= reduced_reg_10(5);
  reduced_reg_next_10(7) <= reduced_reg_10(6);
  reduced_reg_next_10(8) <= reduced_reg_10(7);
  reduced_reg_next_10(9) <= reduced_reg_10(8);
  reduced_reg_next_10(10) <= reduced_reg_10(9);
  reduced_reg_next_10(11) <= reduced_reg_10(10);

  ix_k_1 <= std_logic_vector(Data_Type_Conversion8_out1_1);

  
  switch_compare_1_14 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay32_out1 <= SampleTime_div_Ly_AXI;
      END IF;
    END IF;
  END PROCESS Delay32_process;


  
  Switch_on13_out1_1 <= Switch_on13_out1 WHEN switch_compare_1_14 = '0' ELSE
      Delay32_out1;

  reduced_20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_on13_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Switch_on13_out1 <= Switch_on13_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_20_process;


  reduced_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_11(0) <= X"00000000";
        reduced_reg_11(1) <= X"00000000";
        reduced_reg_11(2) <= X"00000000";
        reduced_reg_11(3) <= X"00000000";
        reduced_reg_11(4) <= X"00000000";
        reduced_reg_11(5) <= X"00000000";
        reduced_reg_11(6) <= X"00000000";
        reduced_reg_11(7) <= X"00000000";
        reduced_reg_11(8) <= X"00000000";
        reduced_reg_11(9) <= X"00000000";
        reduced_reg_11(10) <= X"00000000";
        reduced_reg_11(11) <= X"00000000";
        reduced_reg_11(12) <= X"00000000";
        reduced_reg_11(13) <= X"00000000";
        reduced_reg_11(14) <= X"00000000";
        reduced_reg_11(15) <= X"00000000";
        reduced_reg_11(16) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_11(0) <= reduced_reg_next_11(0);
        reduced_reg_11(1) <= reduced_reg_next_11(1);
        reduced_reg_11(2) <= reduced_reg_next_11(2);
        reduced_reg_11(3) <= reduced_reg_next_11(3);
        reduced_reg_11(4) <= reduced_reg_next_11(4);
        reduced_reg_11(5) <= reduced_reg_next_11(5);
        reduced_reg_11(6) <= reduced_reg_next_11(6);
        reduced_reg_11(7) <= reduced_reg_next_11(7);
        reduced_reg_11(8) <= reduced_reg_next_11(8);
        reduced_reg_11(9) <= reduced_reg_next_11(9);
        reduced_reg_11(10) <= reduced_reg_next_11(10);
        reduced_reg_11(11) <= reduced_reg_next_11(11);
        reduced_reg_11(12) <= reduced_reg_next_11(12);
        reduced_reg_11(13) <= reduced_reg_next_11(13);
        reduced_reg_11(14) <= reduced_reg_next_11(14);
        reduced_reg_11(15) <= reduced_reg_next_11(15);
        reduced_reg_11(16) <= reduced_reg_next_11(16);
      END IF;
    END IF;
  END PROCESS reduced_21_process;

  Switch_on13_out1_2 <= reduced_reg_11(16);
  reduced_reg_next_11(0) <= Switch_on13_out1;
  reduced_reg_next_11(1) <= reduced_reg_11(0);
  reduced_reg_next_11(2) <= reduced_reg_11(1);
  reduced_reg_next_11(3) <= reduced_reg_11(2);
  reduced_reg_next_11(4) <= reduced_reg_11(3);
  reduced_reg_next_11(5) <= reduced_reg_11(4);
  reduced_reg_next_11(6) <= reduced_reg_11(5);
  reduced_reg_next_11(7) <= reduced_reg_11(6);
  reduced_reg_next_11(8) <= reduced_reg_11(7);
  reduced_reg_next_11(9) <= reduced_reg_11(8);
  reduced_reg_next_11(10) <= reduced_reg_11(9);
  reduced_reg_next_11(11) <= reduced_reg_11(10);
  reduced_reg_next_11(12) <= reduced_reg_11(11);
  reduced_reg_next_11(13) <= reduced_reg_11(12);
  reduced_reg_next_11(14) <= reduced_reg_11(13);
  reduced_reg_next_11(15) <= reduced_reg_11(14);
  reduced_reg_next_11(16) <= reduced_reg_11(15);

  
  switch_compare_1_15 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_15 <= '1';

  delayMatch36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch36_reg(0) <= '0';
        delayMatch36_reg(1) <= '0';
        delayMatch36_reg(2) <= '0';
        delayMatch36_reg(3) <= '0';
        delayMatch36_reg(4) <= '0';
        delayMatch36_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch36_reg(0) <= delayMatch36_reg_next(0);
        delayMatch36_reg(1) <= delayMatch36_reg_next(1);
        delayMatch36_reg(2) <= delayMatch36_reg_next(2);
        delayMatch36_reg(3) <= delayMatch36_reg_next(3);
        delayMatch36_reg(4) <= delayMatch36_reg_next(4);
        delayMatch36_reg(5) <= delayMatch36_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch36_process;

  stateControl_16 <= delayMatch36_reg(5);
  delayMatch36_reg_next(0) <= stateControl_15;
  delayMatch36_reg_next(1) <= delayMatch36_reg(0);
  delayMatch36_reg_next(2) <= delayMatch36_reg(1);
  delayMatch36_reg_next(3) <= delayMatch36_reg(2);
  delayMatch36_reg_next(4) <= delayMatch36_reg(3);
  delayMatch36_reg_next(5) <= delayMatch36_reg(4);

  
  Switch_on17_out1_1 <= Delay38_out1 WHEN stateControl_16 = '0' ELSE
      Switch_on17_out1;

  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay38_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay38_out1 <= Switch_on17_out1_1;
      END IF;
    END IF;
  END PROCESS Delay38_process;


  
  Switch_on17_out1 <= Delay38_out1 WHEN switch_compare_1_15 = '0' ELSE
      nfp_out_4_1;

  delayMatch39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch39_reg(0) <= X"00000000";
        delayMatch39_reg(1) <= X"00000000";
        delayMatch39_reg(2) <= X"00000000";
        delayMatch39_reg(3) <= X"00000000";
        delayMatch39_reg(4) <= X"00000000";
        delayMatch39_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch39_reg(0) <= delayMatch39_reg_next(0);
        delayMatch39_reg(1) <= delayMatch39_reg_next(1);
        delayMatch39_reg(2) <= delayMatch39_reg_next(2);
        delayMatch39_reg(3) <= delayMatch39_reg_next(3);
        delayMatch39_reg(4) <= delayMatch39_reg_next(4);
        delayMatch39_reg(5) <= delayMatch39_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch39_process;

  Switch_on17_out1_2 <= delayMatch39_reg(5);
  delayMatch39_reg_next(0) <= Switch_on17_out1;
  delayMatch39_reg_next(1) <= delayMatch39_reg(0);
  delayMatch39_reg_next(2) <= delayMatch39_reg(1);
  delayMatch39_reg_next(3) <= delayMatch39_reg(2);
  delayMatch39_reg_next(4) <= delayMatch39_reg(3);
  delayMatch39_reg_next(5) <= delayMatch39_reg(4);

  
  switch_compare_1_16 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_17 <= '1';

  delayMatch34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch34_reg(0) <= '0';
        delayMatch34_reg(1) <= '0';
        delayMatch34_reg(2) <= '0';
        delayMatch34_reg(3) <= '0';
        delayMatch34_reg(4) <= '0';
        delayMatch34_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch34_reg(0) <= delayMatch34_reg_next(0);
        delayMatch34_reg(1) <= delayMatch34_reg_next(1);
        delayMatch34_reg(2) <= delayMatch34_reg_next(2);
        delayMatch34_reg(3) <= delayMatch34_reg_next(3);
        delayMatch34_reg(4) <= delayMatch34_reg_next(4);
        delayMatch34_reg(5) <= delayMatch34_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch34_process;

  stateControl_18 <= delayMatch34_reg(5);
  delayMatch34_reg_next(0) <= stateControl_17;
  delayMatch34_reg_next(1) <= delayMatch34_reg(0);
  delayMatch34_reg_next(2) <= delayMatch34_reg(1);
  delayMatch34_reg_next(3) <= delayMatch34_reg(2);
  delayMatch34_reg_next(4) <= delayMatch34_reg(3);
  delayMatch34_reg_next(5) <= delayMatch34_reg(4);

  iy_measured_signed <= signed(iy_measured);

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay16_out1 <= iy_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Switch_on6_out1_1 <= Delay6_out1 WHEN stateControl_18 = '0' ELSE
      Switch_on6_out1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch_on6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch_on6_out1 <= Delay6_out1 WHEN switch_compare_1_16 = '0' ELSE
      Data_Type_Conversion6_out1;

  delayMatch41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch41_reg(0) <= X"00000000";
        delayMatch41_reg(1) <= X"00000000";
        delayMatch41_reg(2) <= X"00000000";
        delayMatch41_reg(3) <= X"00000000";
        delayMatch41_reg(4) <= X"00000000";
        delayMatch41_reg(5) <= X"00000000";
        delayMatch41_reg(6) <= X"00000000";
        delayMatch41_reg(7) <= X"00000000";
        delayMatch41_reg(8) <= X"00000000";
        delayMatch41_reg(9) <= X"00000000";
        delayMatch41_reg(10) <= X"00000000";
        delayMatch41_reg(11) <= X"00000000";
        delayMatch41_reg(12) <= X"00000000";
        delayMatch41_reg(13) <= X"00000000";
        delayMatch41_reg(14) <= X"00000000";
        delayMatch41_reg(15) <= X"00000000";
        delayMatch41_reg(16) <= X"00000000";
        delayMatch41_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch41_reg(0) <= delayMatch41_reg_next(0);
        delayMatch41_reg(1) <= delayMatch41_reg_next(1);
        delayMatch41_reg(2) <= delayMatch41_reg_next(2);
        delayMatch41_reg(3) <= delayMatch41_reg_next(3);
        delayMatch41_reg(4) <= delayMatch41_reg_next(4);
        delayMatch41_reg(5) <= delayMatch41_reg_next(5);
        delayMatch41_reg(6) <= delayMatch41_reg_next(6);
        delayMatch41_reg(7) <= delayMatch41_reg_next(7);
        delayMatch41_reg(8) <= delayMatch41_reg_next(8);
        delayMatch41_reg(9) <= delayMatch41_reg_next(9);
        delayMatch41_reg(10) <= delayMatch41_reg_next(10);
        delayMatch41_reg(11) <= delayMatch41_reg_next(11);
        delayMatch41_reg(12) <= delayMatch41_reg_next(12);
        delayMatch41_reg(13) <= delayMatch41_reg_next(13);
        delayMatch41_reg(14) <= delayMatch41_reg_next(14);
        delayMatch41_reg(15) <= delayMatch41_reg_next(15);
        delayMatch41_reg(16) <= delayMatch41_reg_next(16);
        delayMatch41_reg(17) <= delayMatch41_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch41_process;

  Switch_on6_out1_2 <= delayMatch41_reg(17);
  delayMatch41_reg_next(0) <= Switch_on6_out1;
  delayMatch41_reg_next(1) <= delayMatch41_reg(0);
  delayMatch41_reg_next(2) <= delayMatch41_reg(1);
  delayMatch41_reg_next(3) <= delayMatch41_reg(2);
  delayMatch41_reg_next(4) <= delayMatch41_reg(3);
  delayMatch41_reg_next(5) <= delayMatch41_reg(4);
  delayMatch41_reg_next(6) <= delayMatch41_reg(5);
  delayMatch41_reg_next(7) <= delayMatch41_reg(6);
  delayMatch41_reg_next(8) <= delayMatch41_reg(7);
  delayMatch41_reg_next(9) <= delayMatch41_reg(8);
  delayMatch41_reg_next(10) <= delayMatch41_reg(9);
  delayMatch41_reg_next(11) <= delayMatch41_reg(10);
  delayMatch41_reg_next(12) <= delayMatch41_reg(11);
  delayMatch41_reg_next(13) <= delayMatch41_reg(12);
  delayMatch41_reg_next(14) <= delayMatch41_reg(13);
  delayMatch41_reg_next(15) <= delayMatch41_reg(14);
  delayMatch41_reg_next(16) <= delayMatch41_reg(15);
  delayMatch41_reg_next(17) <= delayMatch41_reg(16);

  Data_Type_Conversion9_out1_signed <= signed(Data_Type_Conversion9_out1);

  reduced_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_12(0) <= to_signed(16#00000#, 18);
        reduced_reg_12(1) <= to_signed(16#00000#, 18);
        reduced_reg_12(2) <= to_signed(16#00000#, 18);
        reduced_reg_12(3) <= to_signed(16#00000#, 18);
        reduced_reg_12(4) <= to_signed(16#00000#, 18);
        reduced_reg_12(5) <= to_signed(16#00000#, 18);
        reduced_reg_12(6) <= to_signed(16#00000#, 18);
        reduced_reg_12(7) <= to_signed(16#00000#, 18);
        reduced_reg_12(8) <= to_signed(16#00000#, 18);
        reduced_reg_12(9) <= to_signed(16#00000#, 18);
        reduced_reg_12(10) <= to_signed(16#00000#, 18);
        reduced_reg_12(11) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_12(0) <= reduced_reg_next_12(0);
        reduced_reg_12(1) <= reduced_reg_next_12(1);
        reduced_reg_12(2) <= reduced_reg_next_12(2);
        reduced_reg_12(3) <= reduced_reg_next_12(3);
        reduced_reg_12(4) <= reduced_reg_next_12(4);
        reduced_reg_12(5) <= reduced_reg_next_12(5);
        reduced_reg_12(6) <= reduced_reg_next_12(6);
        reduced_reg_12(7) <= reduced_reg_next_12(7);
        reduced_reg_12(8) <= reduced_reg_next_12(8);
        reduced_reg_12(9) <= reduced_reg_next_12(9);
        reduced_reg_12(10) <= reduced_reg_next_12(10);
        reduced_reg_12(11) <= reduced_reg_next_12(11);
      END IF;
    END IF;
  END PROCESS reduced_22_process;

  Data_Type_Conversion9_out1_1 <= reduced_reg_12(11);
  reduced_reg_next_12(0) <= Data_Type_Conversion9_out1_signed;
  reduced_reg_next_12(1) <= reduced_reg_12(0);
  reduced_reg_next_12(2) <= reduced_reg_12(1);
  reduced_reg_next_12(3) <= reduced_reg_12(2);
  reduced_reg_next_12(4) <= reduced_reg_12(3);
  reduced_reg_next_12(5) <= reduced_reg_12(4);
  reduced_reg_next_12(6) <= reduced_reg_12(5);
  reduced_reg_next_12(7) <= reduced_reg_12(6);
  reduced_reg_next_12(8) <= reduced_reg_12(7);
  reduced_reg_next_12(9) <= reduced_reg_12(8);
  reduced_reg_next_12(10) <= reduced_reg_12(9);
  reduced_reg_next_12(11) <= reduced_reg_12(10);

  iy_k_1 <= std_logic_vector(Data_Type_Conversion9_out1_1);

  delayMatch45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch45_reg(0) <= '0';
        delayMatch45_reg(1) <= '0';
        delayMatch45_reg(2) <= '0';
        delayMatch45_reg(3) <= '0';
        delayMatch45_reg(4) <= '0';
        delayMatch45_reg(5) <= '0';
        delayMatch45_reg(6) <= '0';
        delayMatch45_reg(7) <= '0';
        delayMatch45_reg(8) <= '0';
        delayMatch45_reg(9) <= '0';
        delayMatch45_reg(10) <= '0';
        delayMatch45_reg(11) <= '0';
        delayMatch45_reg(12) <= '0';
        delayMatch45_reg(13) <= '0';
        delayMatch45_reg(14) <= '0';
        delayMatch45_reg(15) <= '0';
        delayMatch45_reg(16) <= '0';
        delayMatch45_reg(17) <= '0';
        delayMatch45_reg(18) <= '0';
        delayMatch45_reg(19) <= '0';
        delayMatch45_reg(20) <= '0';
        delayMatch45_reg(21) <= '0';
        delayMatch45_reg(22) <= '0';
        delayMatch45_reg(23) <= '0';
        delayMatch45_reg(24) <= '0';
        delayMatch45_reg(25) <= '0';
        delayMatch45_reg(26) <= '0';
        delayMatch45_reg(27) <= '0';
        delayMatch45_reg(28) <= '0';
        delayMatch45_reg(29) <= '0';
        delayMatch45_reg(30) <= '0';
        delayMatch45_reg(31) <= '0';
        delayMatch45_reg(32) <= '0';
        delayMatch45_reg(33) <= '0';
        delayMatch45_reg(34) <= '0';
        delayMatch45_reg(35) <= '0';
        delayMatch45_reg(36) <= '0';
        delayMatch45_reg(37) <= '0';
        delayMatch45_reg(38) <= '0';
        delayMatch45_reg(39) <= '0';
        delayMatch45_reg(40) <= '0';
        delayMatch45_reg(41) <= '0';
        delayMatch45_reg(42) <= '0';
        delayMatch45_reg(43) <= '0';
        delayMatch45_reg(44) <= '0';
        delayMatch45_reg(45) <= '0';
        delayMatch45_reg(46) <= '0';
      ELSIF enb = '1' THEN
        delayMatch45_reg(0) <= delayMatch45_reg_next(0);
        delayMatch45_reg(1) <= delayMatch45_reg_next(1);
        delayMatch45_reg(2) <= delayMatch45_reg_next(2);
        delayMatch45_reg(3) <= delayMatch45_reg_next(3);
        delayMatch45_reg(4) <= delayMatch45_reg_next(4);
        delayMatch45_reg(5) <= delayMatch45_reg_next(5);
        delayMatch45_reg(6) <= delayMatch45_reg_next(6);
        delayMatch45_reg(7) <= delayMatch45_reg_next(7);
        delayMatch45_reg(8) <= delayMatch45_reg_next(8);
        delayMatch45_reg(9) <= delayMatch45_reg_next(9);
        delayMatch45_reg(10) <= delayMatch45_reg_next(10);
        delayMatch45_reg(11) <= delayMatch45_reg_next(11);
        delayMatch45_reg(12) <= delayMatch45_reg_next(12);
        delayMatch45_reg(13) <= delayMatch45_reg_next(13);
        delayMatch45_reg(14) <= delayMatch45_reg_next(14);
        delayMatch45_reg(15) <= delayMatch45_reg_next(15);
        delayMatch45_reg(16) <= delayMatch45_reg_next(16);
        delayMatch45_reg(17) <= delayMatch45_reg_next(17);
        delayMatch45_reg(18) <= delayMatch45_reg_next(18);
        delayMatch45_reg(19) <= delayMatch45_reg_next(19);
        delayMatch45_reg(20) <= delayMatch45_reg_next(20);
        delayMatch45_reg(21) <= delayMatch45_reg_next(21);
        delayMatch45_reg(22) <= delayMatch45_reg_next(22);
        delayMatch45_reg(23) <= delayMatch45_reg_next(23);
        delayMatch45_reg(24) <= delayMatch45_reg_next(24);
        delayMatch45_reg(25) <= delayMatch45_reg_next(25);
        delayMatch45_reg(26) <= delayMatch45_reg_next(26);
        delayMatch45_reg(27) <= delayMatch45_reg_next(27);
        delayMatch45_reg(28) <= delayMatch45_reg_next(28);
        delayMatch45_reg(29) <= delayMatch45_reg_next(29);
        delayMatch45_reg(30) <= delayMatch45_reg_next(30);
        delayMatch45_reg(31) <= delayMatch45_reg_next(31);
        delayMatch45_reg(32) <= delayMatch45_reg_next(32);
        delayMatch45_reg(33) <= delayMatch45_reg_next(33);
        delayMatch45_reg(34) <= delayMatch45_reg_next(34);
        delayMatch45_reg(35) <= delayMatch45_reg_next(35);
        delayMatch45_reg(36) <= delayMatch45_reg_next(36);
        delayMatch45_reg(37) <= delayMatch45_reg_next(37);
        delayMatch45_reg(38) <= delayMatch45_reg_next(38);
        delayMatch45_reg(39) <= delayMatch45_reg_next(39);
        delayMatch45_reg(40) <= delayMatch45_reg_next(40);
        delayMatch45_reg(41) <= delayMatch45_reg_next(41);
        delayMatch45_reg(42) <= delayMatch45_reg_next(42);
        delayMatch45_reg(43) <= delayMatch45_reg_next(43);
        delayMatch45_reg(44) <= delayMatch45_reg_next(44);
        delayMatch45_reg(45) <= delayMatch45_reg_next(45);
        delayMatch45_reg(46) <= delayMatch45_reg_next(46);
      END IF;
    END IF;
  END PROCESS delayMatch45_process;

  Delay22_out1 <= delayMatch45_reg(46);
  delayMatch45_reg_next(0) <= End_Cycle_1;
  delayMatch45_reg_next(1) <= delayMatch45_reg(0);
  delayMatch45_reg_next(2) <= delayMatch45_reg(1);
  delayMatch45_reg_next(3) <= delayMatch45_reg(2);
  delayMatch45_reg_next(4) <= delayMatch45_reg(3);
  delayMatch45_reg_next(5) <= delayMatch45_reg(4);
  delayMatch45_reg_next(6) <= delayMatch45_reg(5);
  delayMatch45_reg_next(7) <= delayMatch45_reg(6);
  delayMatch45_reg_next(8) <= delayMatch45_reg(7);
  delayMatch45_reg_next(9) <= delayMatch45_reg(8);
  delayMatch45_reg_next(10) <= delayMatch45_reg(9);
  delayMatch45_reg_next(11) <= delayMatch45_reg(10);
  delayMatch45_reg_next(12) <= delayMatch45_reg(11);
  delayMatch45_reg_next(13) <= delayMatch45_reg(12);
  delayMatch45_reg_next(14) <= delayMatch45_reg(13);
  delayMatch45_reg_next(15) <= delayMatch45_reg(14);
  delayMatch45_reg_next(16) <= delayMatch45_reg(15);
  delayMatch45_reg_next(17) <= delayMatch45_reg(16);
  delayMatch45_reg_next(18) <= delayMatch45_reg(17);
  delayMatch45_reg_next(19) <= delayMatch45_reg(18);
  delayMatch45_reg_next(20) <= delayMatch45_reg(19);
  delayMatch45_reg_next(21) <= delayMatch45_reg(20);
  delayMatch45_reg_next(22) <= delayMatch45_reg(21);
  delayMatch45_reg_next(23) <= delayMatch45_reg(22);
  delayMatch45_reg_next(24) <= delayMatch45_reg(23);
  delayMatch45_reg_next(25) <= delayMatch45_reg(24);
  delayMatch45_reg_next(26) <= delayMatch45_reg(25);
  delayMatch45_reg_next(27) <= delayMatch45_reg(26);
  delayMatch45_reg_next(28) <= delayMatch45_reg(27);
  delayMatch45_reg_next(29) <= delayMatch45_reg(28);
  delayMatch45_reg_next(30) <= delayMatch45_reg(29);
  delayMatch45_reg_next(31) <= delayMatch45_reg(30);
  delayMatch45_reg_next(32) <= delayMatch45_reg(31);
  delayMatch45_reg_next(33) <= delayMatch45_reg(32);
  delayMatch45_reg_next(34) <= delayMatch45_reg(33);
  delayMatch45_reg_next(35) <= delayMatch45_reg(34);
  delayMatch45_reg_next(36) <= delayMatch45_reg(35);
  delayMatch45_reg_next(37) <= delayMatch45_reg(36);
  delayMatch45_reg_next(38) <= delayMatch45_reg(37);
  delayMatch45_reg_next(39) <= delayMatch45_reg(38);
  delayMatch45_reg_next(40) <= delayMatch45_reg(39);
  delayMatch45_reg_next(41) <= delayMatch45_reg(40);
  delayMatch45_reg_next(42) <= delayMatch45_reg(41);
  delayMatch45_reg_next(43) <= delayMatch45_reg(42);
  delayMatch45_reg_next(44) <= delayMatch45_reg(43);
  delayMatch45_reg_next(45) <= delayMatch45_reg(44);
  delayMatch45_reg_next(46) <= delayMatch45_reg(45);

  done <= Delay22_out1;

  id_k_1_AXI <= std_logic_vector(Data_Type_Conversion_out1_1);

  ix_k_1_AXI <= std_logic_vector(Data_Type_Conversion8_out1_1);

  iy_k_1_AXI <= std_logic_vector(Data_Type_Conversion9_out1_1);

  ce_out <= clk_enable;

  iq_k_1 <= Data_Type_Conversion7_out1;

  iq_k_1_AXI <= Data_Type_Conversion7_out1;

END rtl;

