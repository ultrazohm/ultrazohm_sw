-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_VSD_6ph_asym_multiply_line14 is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    val_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_0_empty_n : IN STD_LOGIC;
    val_0_read : OUT STD_LOGIC;
    val_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_1_empty_n : IN STD_LOGIC;
    val_1_read : OUT STD_LOGIC;
    val_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_2_empty_n : IN STD_LOGIC;
    val_2_read : OUT STD_LOGIC;
    val_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_3_empty_n : IN STD_LOGIC;
    val_3_read : OUT STD_LOGIC;
    val_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_4_empty_n : IN STD_LOGIC;
    val_4_read : OUT STD_LOGIC;
    val_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    val_5_empty_n : IN STD_LOGIC;
    val_5_read : OUT STD_LOGIC;
    val_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_0_out_full_n : IN STD_LOGIC;
    val_0_out_write : OUT STD_LOGIC;
    val_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_1_out_full_n : IN STD_LOGIC;
    val_1_out_write : OUT STD_LOGIC;
    val_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_2_out_full_n : IN STD_LOGIC;
    val_2_out_write : OUT STD_LOGIC;
    val_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_3_out_full_n : IN STD_LOGIC;
    val_3_out_write : OUT STD_LOGIC;
    val_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_4_out_full_n : IN STD_LOGIC;
    val_4_out_write : OUT STD_LOGIC;
    val_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_5_out_full_n : IN STD_LOGIC;
    val_5_out_write : OUT STD_LOGIC;
    products_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    products_0_out_full_n : IN STD_LOGIC;
    products_0_out_write : OUT STD_LOGIC;
    products_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    products_1_out_full_n : IN STD_LOGIC;
    products_1_out_write : OUT STD_LOGIC;
    products_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    products_2_out_full_n : IN STD_LOGIC;
    products_2_out_write : OUT STD_LOGIC;
    products_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    products_3_out_full_n : IN STD_LOGIC;
    products_3_out_write : OUT STD_LOGIC;
    products_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    products_4_out_full_n : IN STD_LOGIC;
    products_4_out_write : OUT STD_LOGIC;
    products_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    products_5_out_full_n : IN STD_LOGIC;
    products_5_out_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of uz_VSD_6ph_asym_multiply_line14 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal multiply_line14_entry175_U0_ap_start : STD_LOGIC;
    signal multiply_line14_entry175_U0_ap_done : STD_LOGIC;
    signal multiply_line14_entry175_U0_ap_continue : STD_LOGIC;
    signal multiply_line14_entry175_U0_ap_idle : STD_LOGIC;
    signal multiply_line14_entry175_U0_ap_ready : STD_LOGIC;
    signal multiply_line14_entry175_U0_start_out : STD_LOGIC;
    signal multiply_line14_entry175_U0_start_write : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_5_read : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_4_read : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_3_read : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_2_read : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_1_read : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_0_read : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_entry175_U0_scalar_val_5_out_write : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_entry175_U0_scalar_val_4_out_write : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_entry175_U0_scalar_val_3_out_write : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_entry175_U0_scalar_val_2_out_write : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_entry175_U0_scalar_val_1_out_write : STD_LOGIC;
    signal multiply_line14_entry175_U0_scalar_val_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_entry175_U0_scalar_val_0_out_write : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_ap_start : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_ap_done : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_ap_continue : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_ap_idle : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_ap_ready : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_scalar_val_0_read : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_val_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_val_0_out_write : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_scalar_val_1_read : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_val_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_val_1_out_write : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_scalar_val_2_read : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_val_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_val_2_out_write : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_scalar_val_3_read : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_val_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_val_3_out_write : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_scalar_val_4_read : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_val_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_val_4_out_write : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_scalar_val_5_read : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_val_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_val_5_out_write : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal multiply_line14_Block_split1_proc174_U0_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_products_5_dc_channel : STD_LOGIC;
    signal products_5_dc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_products_5_dc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_products_5_dc_channel : STD_LOGIC;
    signal ap_channel_done_products_4_dc_channel : STD_LOGIC;
    signal products_4_dc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_products_4_dc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_products_4_dc_channel : STD_LOGIC;
    signal ap_channel_done_products_3_dc_channel : STD_LOGIC;
    signal products_3_dc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_products_3_dc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_products_3_dc_channel : STD_LOGIC;
    signal ap_channel_done_products_2_dc_channel : STD_LOGIC;
    signal products_2_dc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_products_2_dc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_products_2_dc_channel : STD_LOGIC;
    signal ap_channel_done_products_1_dc_channel : STD_LOGIC;
    signal products_1_dc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_products_1_dc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_products_1_dc_channel : STD_LOGIC;
    signal ap_channel_done_products_0_dc_channel : STD_LOGIC;
    signal products_0_dc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_products_0_dc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_products_0_dc_channel : STD_LOGIC;
    signal p_prop_ret_products_OC_0_dc_proc100_U0_ap_start : STD_LOGIC;
    signal p_prop_ret_products_OC_0_dc_proc100_U0_ap_done : STD_LOGIC;
    signal p_prop_ret_products_OC_0_dc_proc100_U0_ap_continue : STD_LOGIC;
    signal p_prop_ret_products_OC_0_dc_proc100_U0_ap_idle : STD_LOGIC;
    signal p_prop_ret_products_OC_0_dc_proc100_U0_ap_ready : STD_LOGIC;
    signal p_prop_ret_products_OC_0_dc_proc100_U0_products_0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_prop_ret_products_OC_0_dc_proc100_U0_products_0_out_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal p_prop_ret_products_OC_1_dc_proc101_U0_ap_start : STD_LOGIC;
    signal p_prop_ret_products_OC_1_dc_proc101_U0_ap_done : STD_LOGIC;
    signal p_prop_ret_products_OC_1_dc_proc101_U0_ap_continue : STD_LOGIC;
    signal p_prop_ret_products_OC_1_dc_proc101_U0_ap_idle : STD_LOGIC;
    signal p_prop_ret_products_OC_1_dc_proc101_U0_ap_ready : STD_LOGIC;
    signal p_prop_ret_products_OC_1_dc_proc101_U0_products_1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_prop_ret_products_OC_1_dc_proc101_U0_products_1_out_write : STD_LOGIC;
    signal p_prop_ret_products_OC_2_dc_proc102_U0_ap_start : STD_LOGIC;
    signal p_prop_ret_products_OC_2_dc_proc102_U0_ap_done : STD_LOGIC;
    signal p_prop_ret_products_OC_2_dc_proc102_U0_ap_continue : STD_LOGIC;
    signal p_prop_ret_products_OC_2_dc_proc102_U0_ap_idle : STD_LOGIC;
    signal p_prop_ret_products_OC_2_dc_proc102_U0_ap_ready : STD_LOGIC;
    signal p_prop_ret_products_OC_2_dc_proc102_U0_products_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_prop_ret_products_OC_2_dc_proc102_U0_products_2_out_write : STD_LOGIC;
    signal p_prop_ret_products_OC_3_dc_proc103_U0_ap_start : STD_LOGIC;
    signal p_prop_ret_products_OC_3_dc_proc103_U0_ap_done : STD_LOGIC;
    signal p_prop_ret_products_OC_3_dc_proc103_U0_ap_continue : STD_LOGIC;
    signal p_prop_ret_products_OC_3_dc_proc103_U0_ap_idle : STD_LOGIC;
    signal p_prop_ret_products_OC_3_dc_proc103_U0_ap_ready : STD_LOGIC;
    signal p_prop_ret_products_OC_3_dc_proc103_U0_products_3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_prop_ret_products_OC_3_dc_proc103_U0_products_3_out_write : STD_LOGIC;
    signal p_prop_ret_products_OC_4_dc_proc104_U0_ap_start : STD_LOGIC;
    signal p_prop_ret_products_OC_4_dc_proc104_U0_ap_done : STD_LOGIC;
    signal p_prop_ret_products_OC_4_dc_proc104_U0_ap_continue : STD_LOGIC;
    signal p_prop_ret_products_OC_4_dc_proc104_U0_ap_idle : STD_LOGIC;
    signal p_prop_ret_products_OC_4_dc_proc104_U0_ap_ready : STD_LOGIC;
    signal p_prop_ret_products_OC_4_dc_proc104_U0_products_4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_prop_ret_products_OC_4_dc_proc104_U0_products_4_out_write : STD_LOGIC;
    signal p_prop_ret_products_OC_5_dc_proc105_U0_ap_start : STD_LOGIC;
    signal p_prop_ret_products_OC_5_dc_proc105_U0_ap_done : STD_LOGIC;
    signal p_prop_ret_products_OC_5_dc_proc105_U0_ap_continue : STD_LOGIC;
    signal p_prop_ret_products_OC_5_dc_proc105_U0_ap_idle : STD_LOGIC;
    signal p_prop_ret_products_OC_5_dc_proc105_U0_ap_ready : STD_LOGIC;
    signal p_prop_ret_products_OC_5_dc_proc105_U0_products_5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_prop_ret_products_OC_5_dc_proc105_U0_products_5_out_write : STD_LOGIC;
    signal scalar_val_5_c_full_n : STD_LOGIC;
    signal scalar_val_5_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_5_c_empty_n : STD_LOGIC;
    signal scalar_val_4_c_full_n : STD_LOGIC;
    signal scalar_val_4_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_4_c_empty_n : STD_LOGIC;
    signal scalar_val_3_c_full_n : STD_LOGIC;
    signal scalar_val_3_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_3_c_empty_n : STD_LOGIC;
    signal scalar_val_2_c_full_n : STD_LOGIC;
    signal scalar_val_2_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_2_c_empty_n : STD_LOGIC;
    signal scalar_val_1_c_full_n : STD_LOGIC;
    signal scalar_val_1_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_1_c_empty_n : STD_LOGIC;
    signal scalar_val_0_c_full_n : STD_LOGIC;
    signal scalar_val_0_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_0_c_empty_n : STD_LOGIC;
    signal products_0_dc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_0_dc_channel_empty_n : STD_LOGIC;
    signal products_1_dc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_dc_channel_empty_n : STD_LOGIC;
    signal products_2_dc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_2_dc_channel_empty_n : STD_LOGIC;
    signal products_3_dc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_3_dc_channel_empty_n : STD_LOGIC;
    signal products_4_dc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_4_dc_channel_empty_n : STD_LOGIC;
    signal products_5_dc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal products_5_dc_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_multiply_line14_Block_split1_proc174_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_multiply_line14_Block_split1_proc174_U0_full_n : STD_LOGIC;
    signal start_for_multiply_line14_Block_split1_proc174_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_multiply_line14_Block_split1_proc174_U0_empty_n : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_start_full_n : STD_LOGIC;
    signal multiply_line14_Block_split1_proc174_U0_start_write : STD_LOGIC;
    signal p_prop_ret_products_OC_0_dc_proc100_U0_start_full_n : STD_LOGIC;
    signal p_prop_ret_products_OC_0_dc_proc100_U0_start_write : STD_LOGIC;
    signal p_prop_ret_products_OC_1_dc_proc101_U0_start_full_n : STD_LOGIC;
    signal p_prop_ret_products_OC_1_dc_proc101_U0_start_write : STD_LOGIC;
    signal p_prop_ret_products_OC_2_dc_proc102_U0_start_full_n : STD_LOGIC;
    signal p_prop_ret_products_OC_2_dc_proc102_U0_start_write : STD_LOGIC;
    signal p_prop_ret_products_OC_3_dc_proc103_U0_start_full_n : STD_LOGIC;
    signal p_prop_ret_products_OC_3_dc_proc103_U0_start_write : STD_LOGIC;
    signal p_prop_ret_products_OC_4_dc_proc104_U0_start_full_n : STD_LOGIC;
    signal p_prop_ret_products_OC_4_dc_proc104_U0_start_write : STD_LOGIC;
    signal p_prop_ret_products_OC_5_dc_proc105_U0_start_full_n : STD_LOGIC;
    signal p_prop_ret_products_OC_5_dc_proc105_U0_start_write : STD_LOGIC;

    component uz_VSD_6ph_asym_multiply_line14_entry175 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        scalar_val_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_5_empty_n : IN STD_LOGIC;
        scalar_val_5_read : OUT STD_LOGIC;
        scalar_val_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_4_empty_n : IN STD_LOGIC;
        scalar_val_4_read : OUT STD_LOGIC;
        scalar_val_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_3_empty_n : IN STD_LOGIC;
        scalar_val_3_read : OUT STD_LOGIC;
        scalar_val_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_2_empty_n : IN STD_LOGIC;
        scalar_val_2_read : OUT STD_LOGIC;
        scalar_val_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_1_empty_n : IN STD_LOGIC;
        scalar_val_1_read : OUT STD_LOGIC;
        scalar_val_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_0_empty_n : IN STD_LOGIC;
        scalar_val_0_read : OUT STD_LOGIC;
        scalar_val_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_5_out_full_n : IN STD_LOGIC;
        scalar_val_5_out_write : OUT STD_LOGIC;
        scalar_val_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_4_out_full_n : IN STD_LOGIC;
        scalar_val_4_out_write : OUT STD_LOGIC;
        scalar_val_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_3_out_full_n : IN STD_LOGIC;
        scalar_val_3_out_write : OUT STD_LOGIC;
        scalar_val_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_2_out_full_n : IN STD_LOGIC;
        scalar_val_2_out_write : OUT STD_LOGIC;
        scalar_val_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_1_out_full_n : IN STD_LOGIC;
        scalar_val_1_out_write : OUT STD_LOGIC;
        scalar_val_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_0_out_full_n : IN STD_LOGIC;
        scalar_val_0_out_write : OUT STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_multiply_line14_Block_split1_proc174 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        scalar_val_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_0_empty_n : IN STD_LOGIC;
        scalar_val_0_read : OUT STD_LOGIC;
        val_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_0_out_full_n : IN STD_LOGIC;
        val_0_out_write : OUT STD_LOGIC;
        scalar_val_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_1_empty_n : IN STD_LOGIC;
        scalar_val_1_read : OUT STD_LOGIC;
        val_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_1_out_full_n : IN STD_LOGIC;
        val_1_out_write : OUT STD_LOGIC;
        scalar_val_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_2_empty_n : IN STD_LOGIC;
        scalar_val_2_read : OUT STD_LOGIC;
        val_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_2_out_full_n : IN STD_LOGIC;
        val_2_out_write : OUT STD_LOGIC;
        scalar_val_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_3_empty_n : IN STD_LOGIC;
        scalar_val_3_read : OUT STD_LOGIC;
        val_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_3_out_full_n : IN STD_LOGIC;
        val_3_out_write : OUT STD_LOGIC;
        scalar_val_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_4_empty_n : IN STD_LOGIC;
        scalar_val_4_read : OUT STD_LOGIC;
        val_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_4_out_full_n : IN STD_LOGIC;
        val_4_out_write : OUT STD_LOGIC;
        scalar_val_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        scalar_val_5_empty_n : IN STD_LOGIC;
        scalar_val_5_read : OUT STD_LOGIC;
        val_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        val_5_out_full_n : IN STD_LOGIC;
        val_5_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_VSD_6ph_asym_p_prop_ret_products_OC_0_dc_proc100 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        products_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        products_0_out_full_n : IN STD_LOGIC;
        products_0_out_write : OUT STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_p_prop_ret_products_OC_1_dc_proc101 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        products_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        products_1_out_full_n : IN STD_LOGIC;
        products_1_out_write : OUT STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_p_prop_ret_products_OC_2_dc_proc102 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        products_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        products_2_out_full_n : IN STD_LOGIC;
        products_2_out_write : OUT STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_p_prop_ret_products_OC_3_dc_proc103 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        products_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        products_3_out_full_n : IN STD_LOGIC;
        products_3_out_write : OUT STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_p_prop_ret_products_OC_4_dc_proc104 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        products_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        products_4_out_full_n : IN STD_LOGIC;
        products_4_out_write : OUT STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_p_prop_ret_products_OC_5_dc_proc105 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        products_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        products_5_out_full_n : IN STD_LOGIC;
        products_5_out_write : OUT STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_fifo_w32_d2_S_x1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component uz_VSD_6ph_asym_start_for_multiply_line14_Block_split1_proc174_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    multiply_line14_entry175_U0 : component uz_VSD_6ph_asym_multiply_line14_entry175
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_line14_entry175_U0_ap_start,
        start_full_n => start_for_multiply_line14_Block_split1_proc174_U0_full_n,
        ap_done => multiply_line14_entry175_U0_ap_done,
        ap_continue => multiply_line14_entry175_U0_ap_continue,
        ap_idle => multiply_line14_entry175_U0_ap_idle,
        ap_ready => multiply_line14_entry175_U0_ap_ready,
        start_out => multiply_line14_entry175_U0_start_out,
        start_write => multiply_line14_entry175_U0_start_write,
        scalar_val_5_dout => val_5_dout,
        scalar_val_5_empty_n => val_5_empty_n,
        scalar_val_5_read => multiply_line14_entry175_U0_scalar_val_5_read,
        scalar_val_4_dout => val_4_dout,
        scalar_val_4_empty_n => val_4_empty_n,
        scalar_val_4_read => multiply_line14_entry175_U0_scalar_val_4_read,
        scalar_val_3_dout => val_3_dout,
        scalar_val_3_empty_n => val_3_empty_n,
        scalar_val_3_read => multiply_line14_entry175_U0_scalar_val_3_read,
        scalar_val_2_dout => val_2_dout,
        scalar_val_2_empty_n => val_2_empty_n,
        scalar_val_2_read => multiply_line14_entry175_U0_scalar_val_2_read,
        scalar_val_1_dout => val_1_dout,
        scalar_val_1_empty_n => val_1_empty_n,
        scalar_val_1_read => multiply_line14_entry175_U0_scalar_val_1_read,
        scalar_val_0_dout => val_0_dout,
        scalar_val_0_empty_n => val_0_empty_n,
        scalar_val_0_read => multiply_line14_entry175_U0_scalar_val_0_read,
        scalar_val_5_out_din => multiply_line14_entry175_U0_scalar_val_5_out_din,
        scalar_val_5_out_full_n => scalar_val_5_c_full_n,
        scalar_val_5_out_write => multiply_line14_entry175_U0_scalar_val_5_out_write,
        scalar_val_4_out_din => multiply_line14_entry175_U0_scalar_val_4_out_din,
        scalar_val_4_out_full_n => scalar_val_4_c_full_n,
        scalar_val_4_out_write => multiply_line14_entry175_U0_scalar_val_4_out_write,
        scalar_val_3_out_din => multiply_line14_entry175_U0_scalar_val_3_out_din,
        scalar_val_3_out_full_n => scalar_val_3_c_full_n,
        scalar_val_3_out_write => multiply_line14_entry175_U0_scalar_val_3_out_write,
        scalar_val_2_out_din => multiply_line14_entry175_U0_scalar_val_2_out_din,
        scalar_val_2_out_full_n => scalar_val_2_c_full_n,
        scalar_val_2_out_write => multiply_line14_entry175_U0_scalar_val_2_out_write,
        scalar_val_1_out_din => multiply_line14_entry175_U0_scalar_val_1_out_din,
        scalar_val_1_out_full_n => scalar_val_1_c_full_n,
        scalar_val_1_out_write => multiply_line14_entry175_U0_scalar_val_1_out_write,
        scalar_val_0_out_din => multiply_line14_entry175_U0_scalar_val_0_out_din,
        scalar_val_0_out_full_n => scalar_val_0_c_full_n,
        scalar_val_0_out_write => multiply_line14_entry175_U0_scalar_val_0_out_write);

    multiply_line14_Block_split1_proc174_U0 : component uz_VSD_6ph_asym_multiply_line14_Block_split1_proc174
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => multiply_line14_Block_split1_proc174_U0_ap_start,
        ap_done => multiply_line14_Block_split1_proc174_U0_ap_done,
        ap_continue => multiply_line14_Block_split1_proc174_U0_ap_continue,
        ap_idle => multiply_line14_Block_split1_proc174_U0_ap_idle,
        ap_ready => multiply_line14_Block_split1_proc174_U0_ap_ready,
        scalar_val_0_dout => scalar_val_0_c_dout,
        scalar_val_0_empty_n => scalar_val_0_c_empty_n,
        scalar_val_0_read => multiply_line14_Block_split1_proc174_U0_scalar_val_0_read,
        val_0_out_din => multiply_line14_Block_split1_proc174_U0_val_0_out_din,
        val_0_out_full_n => val_0_out_full_n,
        val_0_out_write => multiply_line14_Block_split1_proc174_U0_val_0_out_write,
        scalar_val_1_dout => scalar_val_1_c_dout,
        scalar_val_1_empty_n => scalar_val_1_c_empty_n,
        scalar_val_1_read => multiply_line14_Block_split1_proc174_U0_scalar_val_1_read,
        val_1_out_din => multiply_line14_Block_split1_proc174_U0_val_1_out_din,
        val_1_out_full_n => val_1_out_full_n,
        val_1_out_write => multiply_line14_Block_split1_proc174_U0_val_1_out_write,
        scalar_val_2_dout => scalar_val_2_c_dout,
        scalar_val_2_empty_n => scalar_val_2_c_empty_n,
        scalar_val_2_read => multiply_line14_Block_split1_proc174_U0_scalar_val_2_read,
        val_2_out_din => multiply_line14_Block_split1_proc174_U0_val_2_out_din,
        val_2_out_full_n => val_2_out_full_n,
        val_2_out_write => multiply_line14_Block_split1_proc174_U0_val_2_out_write,
        scalar_val_3_dout => scalar_val_3_c_dout,
        scalar_val_3_empty_n => scalar_val_3_c_empty_n,
        scalar_val_3_read => multiply_line14_Block_split1_proc174_U0_scalar_val_3_read,
        val_3_out_din => multiply_line14_Block_split1_proc174_U0_val_3_out_din,
        val_3_out_full_n => val_3_out_full_n,
        val_3_out_write => multiply_line14_Block_split1_proc174_U0_val_3_out_write,
        scalar_val_4_dout => scalar_val_4_c_dout,
        scalar_val_4_empty_n => scalar_val_4_c_empty_n,
        scalar_val_4_read => multiply_line14_Block_split1_proc174_U0_scalar_val_4_read,
        val_4_out_din => multiply_line14_Block_split1_proc174_U0_val_4_out_din,
        val_4_out_full_n => val_4_out_full_n,
        val_4_out_write => multiply_line14_Block_split1_proc174_U0_val_4_out_write,
        scalar_val_5_dout => scalar_val_5_c_dout,
        scalar_val_5_empty_n => scalar_val_5_c_empty_n,
        scalar_val_5_read => multiply_line14_Block_split1_proc174_U0_scalar_val_5_read,
        val_5_out_din => multiply_line14_Block_split1_proc174_U0_val_5_out_din,
        val_5_out_full_n => val_5_out_full_n,
        val_5_out_write => multiply_line14_Block_split1_proc174_U0_val_5_out_write,
        ap_return_0 => multiply_line14_Block_split1_proc174_U0_ap_return_0,
        ap_return_1 => multiply_line14_Block_split1_proc174_U0_ap_return_1,
        ap_return_2 => multiply_line14_Block_split1_proc174_U0_ap_return_2,
        ap_return_3 => multiply_line14_Block_split1_proc174_U0_ap_return_3,
        ap_return_4 => multiply_line14_Block_split1_proc174_U0_ap_return_4,
        ap_return_5 => multiply_line14_Block_split1_proc174_U0_ap_return_5);

    p_prop_ret_products_OC_0_dc_proc100_U0 : component uz_VSD_6ph_asym_p_prop_ret_products_OC_0_dc_proc100
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => p_prop_ret_products_OC_0_dc_proc100_U0_ap_start,
        ap_done => p_prop_ret_products_OC_0_dc_proc100_U0_ap_done,
        ap_continue => p_prop_ret_products_OC_0_dc_proc100_U0_ap_continue,
        ap_idle => p_prop_ret_products_OC_0_dc_proc100_U0_ap_idle,
        ap_ready => p_prop_ret_products_OC_0_dc_proc100_U0_ap_ready,
        p_read => products_0_dc_channel_dout,
        products_0_out_din => p_prop_ret_products_OC_0_dc_proc100_U0_products_0_out_din,
        products_0_out_full_n => products_0_out_full_n,
        products_0_out_write => p_prop_ret_products_OC_0_dc_proc100_U0_products_0_out_write);

    p_prop_ret_products_OC_1_dc_proc101_U0 : component uz_VSD_6ph_asym_p_prop_ret_products_OC_1_dc_proc101
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => p_prop_ret_products_OC_1_dc_proc101_U0_ap_start,
        ap_done => p_prop_ret_products_OC_1_dc_proc101_U0_ap_done,
        ap_continue => p_prop_ret_products_OC_1_dc_proc101_U0_ap_continue,
        ap_idle => p_prop_ret_products_OC_1_dc_proc101_U0_ap_idle,
        ap_ready => p_prop_ret_products_OC_1_dc_proc101_U0_ap_ready,
        p_read => products_1_dc_channel_dout,
        products_1_out_din => p_prop_ret_products_OC_1_dc_proc101_U0_products_1_out_din,
        products_1_out_full_n => products_1_out_full_n,
        products_1_out_write => p_prop_ret_products_OC_1_dc_proc101_U0_products_1_out_write);

    p_prop_ret_products_OC_2_dc_proc102_U0 : component uz_VSD_6ph_asym_p_prop_ret_products_OC_2_dc_proc102
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => p_prop_ret_products_OC_2_dc_proc102_U0_ap_start,
        ap_done => p_prop_ret_products_OC_2_dc_proc102_U0_ap_done,
        ap_continue => p_prop_ret_products_OC_2_dc_proc102_U0_ap_continue,
        ap_idle => p_prop_ret_products_OC_2_dc_proc102_U0_ap_idle,
        ap_ready => p_prop_ret_products_OC_2_dc_proc102_U0_ap_ready,
        p_read => products_2_dc_channel_dout,
        products_2_out_din => p_prop_ret_products_OC_2_dc_proc102_U0_products_2_out_din,
        products_2_out_full_n => products_2_out_full_n,
        products_2_out_write => p_prop_ret_products_OC_2_dc_proc102_U0_products_2_out_write);

    p_prop_ret_products_OC_3_dc_proc103_U0 : component uz_VSD_6ph_asym_p_prop_ret_products_OC_3_dc_proc103
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => p_prop_ret_products_OC_3_dc_proc103_U0_ap_start,
        ap_done => p_prop_ret_products_OC_3_dc_proc103_U0_ap_done,
        ap_continue => p_prop_ret_products_OC_3_dc_proc103_U0_ap_continue,
        ap_idle => p_prop_ret_products_OC_3_dc_proc103_U0_ap_idle,
        ap_ready => p_prop_ret_products_OC_3_dc_proc103_U0_ap_ready,
        p_read => products_3_dc_channel_dout,
        products_3_out_din => p_prop_ret_products_OC_3_dc_proc103_U0_products_3_out_din,
        products_3_out_full_n => products_3_out_full_n,
        products_3_out_write => p_prop_ret_products_OC_3_dc_proc103_U0_products_3_out_write);

    p_prop_ret_products_OC_4_dc_proc104_U0 : component uz_VSD_6ph_asym_p_prop_ret_products_OC_4_dc_proc104
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => p_prop_ret_products_OC_4_dc_proc104_U0_ap_start,
        ap_done => p_prop_ret_products_OC_4_dc_proc104_U0_ap_done,
        ap_continue => p_prop_ret_products_OC_4_dc_proc104_U0_ap_continue,
        ap_idle => p_prop_ret_products_OC_4_dc_proc104_U0_ap_idle,
        ap_ready => p_prop_ret_products_OC_4_dc_proc104_U0_ap_ready,
        p_read => products_4_dc_channel_dout,
        products_4_out_din => p_prop_ret_products_OC_4_dc_proc104_U0_products_4_out_din,
        products_4_out_full_n => products_4_out_full_n,
        products_4_out_write => p_prop_ret_products_OC_4_dc_proc104_U0_products_4_out_write);

    p_prop_ret_products_OC_5_dc_proc105_U0 : component uz_VSD_6ph_asym_p_prop_ret_products_OC_5_dc_proc105
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => p_prop_ret_products_OC_5_dc_proc105_U0_ap_start,
        ap_done => p_prop_ret_products_OC_5_dc_proc105_U0_ap_done,
        ap_continue => p_prop_ret_products_OC_5_dc_proc105_U0_ap_continue,
        ap_idle => p_prop_ret_products_OC_5_dc_proc105_U0_ap_idle,
        ap_ready => p_prop_ret_products_OC_5_dc_proc105_U0_ap_ready,
        p_read => products_5_dc_channel_dout,
        products_5_out_din => p_prop_ret_products_OC_5_dc_proc105_U0_products_5_out_din,
        products_5_out_full_n => products_5_out_full_n,
        products_5_out_write => p_prop_ret_products_OC_5_dc_proc105_U0_products_5_out_write);

    scalar_val_5_c_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_entry175_U0_scalar_val_5_out_din,
        if_full_n => scalar_val_5_c_full_n,
        if_write => multiply_line14_entry175_U0_scalar_val_5_out_write,
        if_dout => scalar_val_5_c_dout,
        if_empty_n => scalar_val_5_c_empty_n,
        if_read => multiply_line14_Block_split1_proc174_U0_scalar_val_5_read);

    scalar_val_4_c_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_entry175_U0_scalar_val_4_out_din,
        if_full_n => scalar_val_4_c_full_n,
        if_write => multiply_line14_entry175_U0_scalar_val_4_out_write,
        if_dout => scalar_val_4_c_dout,
        if_empty_n => scalar_val_4_c_empty_n,
        if_read => multiply_line14_Block_split1_proc174_U0_scalar_val_4_read);

    scalar_val_3_c_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_entry175_U0_scalar_val_3_out_din,
        if_full_n => scalar_val_3_c_full_n,
        if_write => multiply_line14_entry175_U0_scalar_val_3_out_write,
        if_dout => scalar_val_3_c_dout,
        if_empty_n => scalar_val_3_c_empty_n,
        if_read => multiply_line14_Block_split1_proc174_U0_scalar_val_3_read);

    scalar_val_2_c_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_entry175_U0_scalar_val_2_out_din,
        if_full_n => scalar_val_2_c_full_n,
        if_write => multiply_line14_entry175_U0_scalar_val_2_out_write,
        if_dout => scalar_val_2_c_dout,
        if_empty_n => scalar_val_2_c_empty_n,
        if_read => multiply_line14_Block_split1_proc174_U0_scalar_val_2_read);

    scalar_val_1_c_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_entry175_U0_scalar_val_1_out_din,
        if_full_n => scalar_val_1_c_full_n,
        if_write => multiply_line14_entry175_U0_scalar_val_1_out_write,
        if_dout => scalar_val_1_c_dout,
        if_empty_n => scalar_val_1_c_empty_n,
        if_read => multiply_line14_Block_split1_proc174_U0_scalar_val_1_read);

    scalar_val_0_c_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_entry175_U0_scalar_val_0_out_din,
        if_full_n => scalar_val_0_c_full_n,
        if_write => multiply_line14_entry175_U0_scalar_val_0_out_write,
        if_dout => scalar_val_0_c_dout,
        if_empty_n => scalar_val_0_c_empty_n,
        if_read => multiply_line14_Block_split1_proc174_U0_scalar_val_0_read);

    products_0_dc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_Block_split1_proc174_U0_ap_return_0,
        if_full_n => products_0_dc_channel_full_n,
        if_write => ap_channel_done_products_0_dc_channel,
        if_dout => products_0_dc_channel_dout,
        if_empty_n => products_0_dc_channel_empty_n,
        if_read => p_prop_ret_products_OC_0_dc_proc100_U0_ap_ready);

    products_1_dc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_Block_split1_proc174_U0_ap_return_1,
        if_full_n => products_1_dc_channel_full_n,
        if_write => ap_channel_done_products_1_dc_channel,
        if_dout => products_1_dc_channel_dout,
        if_empty_n => products_1_dc_channel_empty_n,
        if_read => p_prop_ret_products_OC_1_dc_proc101_U0_ap_ready);

    products_2_dc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_Block_split1_proc174_U0_ap_return_2,
        if_full_n => products_2_dc_channel_full_n,
        if_write => ap_channel_done_products_2_dc_channel,
        if_dout => products_2_dc_channel_dout,
        if_empty_n => products_2_dc_channel_empty_n,
        if_read => p_prop_ret_products_OC_2_dc_proc102_U0_ap_ready);

    products_3_dc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_Block_split1_proc174_U0_ap_return_3,
        if_full_n => products_3_dc_channel_full_n,
        if_write => ap_channel_done_products_3_dc_channel,
        if_dout => products_3_dc_channel_dout,
        if_empty_n => products_3_dc_channel_empty_n,
        if_read => p_prop_ret_products_OC_3_dc_proc103_U0_ap_ready);

    products_4_dc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_Block_split1_proc174_U0_ap_return_4,
        if_full_n => products_4_dc_channel_full_n,
        if_write => ap_channel_done_products_4_dc_channel,
        if_dout => products_4_dc_channel_dout,
        if_empty_n => products_4_dc_channel_empty_n,
        if_read => p_prop_ret_products_OC_4_dc_proc104_U0_ap_ready);

    products_5_dc_channel_U : component uz_VSD_6ph_asym_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => multiply_line14_Block_split1_proc174_U0_ap_return_5,
        if_full_n => products_5_dc_channel_full_n,
        if_write => ap_channel_done_products_5_dc_channel,
        if_dout => products_5_dc_channel_dout,
        if_empty_n => products_5_dc_channel_empty_n,
        if_read => p_prop_ret_products_OC_5_dc_proc105_U0_ap_ready);

    start_for_multiply_line14_Block_split1_proc174_U0_U : component uz_VSD_6ph_asym_start_for_multiply_line14_Block_split1_proc174_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_multiply_line14_Block_split1_proc174_U0_din,
        if_full_n => start_for_multiply_line14_Block_split1_proc174_U0_full_n,
        if_write => multiply_line14_entry175_U0_start_write,
        if_dout => start_for_multiply_line14_Block_split1_proc174_U0_dout,
        if_empty_n => start_for_multiply_line14_Block_split1_proc174_U0_empty_n,
        if_read => multiply_line14_Block_split1_proc174_U0_ap_ready);





    ap_sync_reg_channel_write_products_0_dc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_products_0_dc_channel <= ap_const_logic_0;
            else
                if (((multiply_line14_Block_split1_proc174_U0_ap_done and multiply_line14_Block_split1_proc174_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_products_0_dc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_products_0_dc_channel <= ap_sync_channel_write_products_0_dc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_products_1_dc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_products_1_dc_channel <= ap_const_logic_0;
            else
                if (((multiply_line14_Block_split1_proc174_U0_ap_done and multiply_line14_Block_split1_proc174_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_products_1_dc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_products_1_dc_channel <= ap_sync_channel_write_products_1_dc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_products_2_dc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_products_2_dc_channel <= ap_const_logic_0;
            else
                if (((multiply_line14_Block_split1_proc174_U0_ap_done and multiply_line14_Block_split1_proc174_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_products_2_dc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_products_2_dc_channel <= ap_sync_channel_write_products_2_dc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_products_3_dc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_products_3_dc_channel <= ap_const_logic_0;
            else
                if (((multiply_line14_Block_split1_proc174_U0_ap_done and multiply_line14_Block_split1_proc174_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_products_3_dc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_products_3_dc_channel <= ap_sync_channel_write_products_3_dc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_products_4_dc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_products_4_dc_channel <= ap_const_logic_0;
            else
                if (((multiply_line14_Block_split1_proc174_U0_ap_done and multiply_line14_Block_split1_proc174_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_products_4_dc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_products_4_dc_channel <= ap_sync_channel_write_products_4_dc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_products_5_dc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_products_5_dc_channel <= ap_const_logic_0;
            else
                if (((multiply_line14_Block_split1_proc174_U0_ap_done and multiply_line14_Block_split1_proc174_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_products_5_dc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_products_5_dc_channel <= ap_sync_channel_write_products_5_dc_channel;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_products_0_dc_channel <= (multiply_line14_Block_split1_proc174_U0_ap_done and (ap_sync_reg_channel_write_products_0_dc_channel xor ap_const_logic_1));
    ap_channel_done_products_1_dc_channel <= (multiply_line14_Block_split1_proc174_U0_ap_done and (ap_sync_reg_channel_write_products_1_dc_channel xor ap_const_logic_1));
    ap_channel_done_products_2_dc_channel <= (multiply_line14_Block_split1_proc174_U0_ap_done and (ap_sync_reg_channel_write_products_2_dc_channel xor ap_const_logic_1));
    ap_channel_done_products_3_dc_channel <= (multiply_line14_Block_split1_proc174_U0_ap_done and (ap_sync_reg_channel_write_products_3_dc_channel xor ap_const_logic_1));
    ap_channel_done_products_4_dc_channel <= (multiply_line14_Block_split1_proc174_U0_ap_done and (ap_sync_reg_channel_write_products_4_dc_channel xor ap_const_logic_1));
    ap_channel_done_products_5_dc_channel <= (multiply_line14_Block_split1_proc174_U0_ap_done and (ap_sync_reg_channel_write_products_5_dc_channel xor ap_const_logic_1));
    ap_done <= ap_sync_done;
    ap_idle <= (p_prop_ret_products_OC_5_dc_proc105_U0_ap_idle and p_prop_ret_products_OC_4_dc_proc104_U0_ap_idle and p_prop_ret_products_OC_3_dc_proc103_U0_ap_idle and p_prop_ret_products_OC_2_dc_proc102_U0_ap_idle and p_prop_ret_products_OC_1_dc_proc101_U0_ap_idle and p_prop_ret_products_OC_0_dc_proc100_U0_ap_idle and multiply_line14_entry175_U0_ap_idle and multiply_line14_Block_split1_proc174_U0_ap_idle and (products_5_dc_channel_empty_n xor ap_const_logic_1) and (products_4_dc_channel_empty_n xor ap_const_logic_1) and (products_3_dc_channel_empty_n xor ap_const_logic_1) and (products_2_dc_channel_empty_n xor ap_const_logic_1) and (products_1_dc_channel_empty_n xor ap_const_logic_1) and (products_0_dc_channel_empty_n xor ap_const_logic_1));
    ap_ready <= internal_ap_ready;
    ap_sync_channel_write_products_0_dc_channel <= ((products_0_dc_channel_full_n and ap_channel_done_products_0_dc_channel) or ap_sync_reg_channel_write_products_0_dc_channel);
    ap_sync_channel_write_products_1_dc_channel <= ((products_1_dc_channel_full_n and ap_channel_done_products_1_dc_channel) or ap_sync_reg_channel_write_products_1_dc_channel);
    ap_sync_channel_write_products_2_dc_channel <= ((products_2_dc_channel_full_n and ap_channel_done_products_2_dc_channel) or ap_sync_reg_channel_write_products_2_dc_channel);
    ap_sync_channel_write_products_3_dc_channel <= ((products_3_dc_channel_full_n and ap_channel_done_products_3_dc_channel) or ap_sync_reg_channel_write_products_3_dc_channel);
    ap_sync_channel_write_products_4_dc_channel <= ((products_4_dc_channel_full_n and ap_channel_done_products_4_dc_channel) or ap_sync_reg_channel_write_products_4_dc_channel);
    ap_sync_channel_write_products_5_dc_channel <= ((products_5_dc_channel_full_n and ap_channel_done_products_5_dc_channel) or ap_sync_reg_channel_write_products_5_dc_channel);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (p_prop_ret_products_OC_5_dc_proc105_U0_ap_done and p_prop_ret_products_OC_4_dc_proc104_U0_ap_done and p_prop_ret_products_OC_3_dc_proc103_U0_ap_done and p_prop_ret_products_OC_2_dc_proc102_U0_ap_done and p_prop_ret_products_OC_1_dc_proc101_U0_ap_done and p_prop_ret_products_OC_0_dc_proc100_U0_ap_done);
    ap_sync_ready <= multiply_line14_entry175_U0_ap_ready;
    internal_ap_ready <= ap_sync_ready;
    multiply_line14_Block_split1_proc174_U0_ap_continue <= (ap_sync_channel_write_products_5_dc_channel and ap_sync_channel_write_products_4_dc_channel and ap_sync_channel_write_products_3_dc_channel and ap_sync_channel_write_products_2_dc_channel and ap_sync_channel_write_products_1_dc_channel and ap_sync_channel_write_products_0_dc_channel);
    multiply_line14_Block_split1_proc174_U0_ap_start <= start_for_multiply_line14_Block_split1_proc174_U0_empty_n;
    multiply_line14_Block_split1_proc174_U0_start_full_n <= ap_const_logic_1;
    multiply_line14_Block_split1_proc174_U0_start_write <= ap_const_logic_0;
    multiply_line14_entry175_U0_ap_continue <= ap_const_logic_1;
    multiply_line14_entry175_U0_ap_start <= real_start;
    p_prop_ret_products_OC_0_dc_proc100_U0_ap_continue <= ap_sync_continue;
    p_prop_ret_products_OC_0_dc_proc100_U0_ap_start <= products_0_dc_channel_empty_n;
    p_prop_ret_products_OC_0_dc_proc100_U0_start_full_n <= ap_const_logic_1;
    p_prop_ret_products_OC_0_dc_proc100_U0_start_write <= ap_const_logic_0;
    p_prop_ret_products_OC_1_dc_proc101_U0_ap_continue <= ap_sync_continue;
    p_prop_ret_products_OC_1_dc_proc101_U0_ap_start <= products_1_dc_channel_empty_n;
    p_prop_ret_products_OC_1_dc_proc101_U0_start_full_n <= ap_const_logic_1;
    p_prop_ret_products_OC_1_dc_proc101_U0_start_write <= ap_const_logic_0;
    p_prop_ret_products_OC_2_dc_proc102_U0_ap_continue <= ap_sync_continue;
    p_prop_ret_products_OC_2_dc_proc102_U0_ap_start <= products_2_dc_channel_empty_n;
    p_prop_ret_products_OC_2_dc_proc102_U0_start_full_n <= ap_const_logic_1;
    p_prop_ret_products_OC_2_dc_proc102_U0_start_write <= ap_const_logic_0;
    p_prop_ret_products_OC_3_dc_proc103_U0_ap_continue <= ap_sync_continue;
    p_prop_ret_products_OC_3_dc_proc103_U0_ap_start <= products_3_dc_channel_empty_n;
    p_prop_ret_products_OC_3_dc_proc103_U0_start_full_n <= ap_const_logic_1;
    p_prop_ret_products_OC_3_dc_proc103_U0_start_write <= ap_const_logic_0;
    p_prop_ret_products_OC_4_dc_proc104_U0_ap_continue <= ap_sync_continue;
    p_prop_ret_products_OC_4_dc_proc104_U0_ap_start <= products_4_dc_channel_empty_n;
    p_prop_ret_products_OC_4_dc_proc104_U0_start_full_n <= ap_const_logic_1;
    p_prop_ret_products_OC_4_dc_proc104_U0_start_write <= ap_const_logic_0;
    p_prop_ret_products_OC_5_dc_proc105_U0_ap_continue <= ap_sync_continue;
    p_prop_ret_products_OC_5_dc_proc105_U0_ap_start <= products_5_dc_channel_empty_n;
    p_prop_ret_products_OC_5_dc_proc105_U0_start_full_n <= ap_const_logic_1;
    p_prop_ret_products_OC_5_dc_proc105_U0_start_write <= ap_const_logic_0;
    products_0_out_din <= p_prop_ret_products_OC_0_dc_proc100_U0_products_0_out_din;
    products_0_out_write <= p_prop_ret_products_OC_0_dc_proc100_U0_products_0_out_write;
    products_1_out_din <= p_prop_ret_products_OC_1_dc_proc101_U0_products_1_out_din;
    products_1_out_write <= p_prop_ret_products_OC_1_dc_proc101_U0_products_1_out_write;
    products_2_out_din <= p_prop_ret_products_OC_2_dc_proc102_U0_products_2_out_din;
    products_2_out_write <= p_prop_ret_products_OC_2_dc_proc102_U0_products_2_out_write;
    products_3_out_din <= p_prop_ret_products_OC_3_dc_proc103_U0_products_3_out_din;
    products_3_out_write <= p_prop_ret_products_OC_3_dc_proc103_U0_products_3_out_write;
    products_4_out_din <= p_prop_ret_products_OC_4_dc_proc104_U0_products_4_out_din;
    products_4_out_write <= p_prop_ret_products_OC_4_dc_proc104_U0_products_4_out_write;
    products_5_out_din <= p_prop_ret_products_OC_5_dc_proc105_U0_products_5_out_din;
    products_5_out_write <= p_prop_ret_products_OC_5_dc_proc105_U0_products_5_out_write;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_for_multiply_line14_Block_split1_proc174_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    val_0_out_din <= multiply_line14_Block_split1_proc174_U0_val_0_out_din;
    val_0_out_write <= multiply_line14_Block_split1_proc174_U0_val_0_out_write;
    val_0_read <= multiply_line14_entry175_U0_scalar_val_0_read;
    val_1_out_din <= multiply_line14_Block_split1_proc174_U0_val_1_out_din;
    val_1_out_write <= multiply_line14_Block_split1_proc174_U0_val_1_out_write;
    val_1_read <= multiply_line14_entry175_U0_scalar_val_1_read;
    val_2_out_din <= multiply_line14_Block_split1_proc174_U0_val_2_out_din;
    val_2_out_write <= multiply_line14_Block_split1_proc174_U0_val_2_out_write;
    val_2_read <= multiply_line14_entry175_U0_scalar_val_2_read;
    val_3_out_din <= multiply_line14_Block_split1_proc174_U0_val_3_out_din;
    val_3_out_write <= multiply_line14_Block_split1_proc174_U0_val_3_out_write;
    val_3_read <= multiply_line14_entry175_U0_scalar_val_3_read;
    val_4_out_din <= multiply_line14_Block_split1_proc174_U0_val_4_out_din;
    val_4_out_write <= multiply_line14_Block_split1_proc174_U0_val_4_out_write;
    val_4_read <= multiply_line14_entry175_U0_scalar_val_4_read;
    val_5_out_din <= multiply_line14_Block_split1_proc174_U0_val_5_out_din;
    val_5_out_write <= multiply_line14_Block_split1_proc174_U0_val_5_out_write;
    val_5_read <= multiply_line14_entry175_U0_scalar_val_5_read;
end behav;
