-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_6ph_dq\hdl_prj\hdlsrc\uz_pmsm_model_6ph_dq\uz_pmsm_model_6ph_dq_addr_decoder.vhd
-- Created: 2023-04-04 17:13:14
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_6ph_dq_addr_decoder
-- Source Path: uz_pmsm_model_6ph_dq/uz_pmsm_model_6ph_dq_axi4/uz_pmsm_model_6ph_dq_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_6ph_dq_pkg.ALL;

ENTITY uz_pmsm_model_6ph_dq_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_theta_el_out_axi             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_M_Mi_out_axi                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_omega_mech_out_axi           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_currents_dq_out_axi          :   IN    vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
        read_voltage_input_dq_out_axi_fb  :   IN    vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_reset_integrators           :   OUT   std_logic;  -- ufix1
        write_use_axi_input               :   OUT   std_logic;  -- ufix1
        write_simulate_mechanical         :   OUT   std_logic;  -- ufix1
        write_load_torque                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_omega_mech                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_voltage_input_dq_axi        :   OUT   vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
        write_physical_parameters_mu      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_M_R0    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_1_L_d   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_1_L_q   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_R_1     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_polepair :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_psi_pm  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_x     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_y     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_z1    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_L_z2    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_physical_parameters_1_J     :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_pmsm_model_6ph_dq_addr_decoder;


ARCHITECTURE rtl OF uz_pmsm_model_6ph_dq_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_theta_el_out_axi_unsigned   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_M_Mi_out_axi_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_omega_mech_out_axi_unsigned : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_currents_dq_out_axi_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_omega_mech_out_axi_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_M_Mi_out_axi_1_1      : std_logic;  -- ufix1
  SIGNAL decode_sel_theta_el_out_axi_1_1  : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_theta_el_out_axi        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_theta_el_out_axi_1_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_M_Mi_out_axi            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_M_Mi_out_axi_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_omega_mech_out_axi      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_omega_mech_out_axi_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_currents_dq_out_axi   : std_logic;  -- ufix1
  SIGNAL strobe_sel_currents_dq_out_axi   : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL strobe_in_currents_dq_out_axi    : std_logic;  -- ufix1
  SIGNAL strobe_sw_currents_dq_out_axi    : std_logic;  -- ufix1
  SIGNAL strobe_reg_currents_dq_out_axi   : std_logic;  -- ufix1
  SIGNAL read_currents_dq_out_axi_unsigned : vector_of_unsigned32(0 TO 5);  -- ufix32 [6]
  SIGNAL sync_reg_currents_dq_out_axi     : vector_of_unsigned32(0 TO 5);  -- ufix32 [6]
  SIGNAL data_slice_currents_dq_out_axi_1 : vector_of_unsigned32(0 TO 5);  -- ufix32 [6]
  SIGNAL decode_sel_currents_dq_out_axi_1_2 : std_logic;  -- ufix1
  SIGNAL data_slice_currents_dq_out_axi_1_0 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_currents_dq_out_axi_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_currents_dq_out_axi_1_3 : std_logic;  -- ufix1
  SIGNAL data_slice_currents_dq_out_axi_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_currents_dq_out_axi_1_2 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_currents_dq_out_axi_1_4 : std_logic;  -- ufix1
  SIGNAL data_slice_currents_dq_out_axi_1_2 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_currents_dq_out_axi_1_3 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_currents_dq_out_axi_1_5 : std_logic;  -- ufix1
  SIGNAL data_slice_currents_dq_out_axi_1_3 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_currents_dq_out_axi_1_4 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_currents_dq_out_axi_1_6 : std_logic;  -- ufix1
  SIGNAL data_slice_currents_dq_out_axi_1_4 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_currents_dq_out_axi_1_5 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_voltage_input_dq_out_axi_fb_1_1 : std_logic;  -- ufix1
  SIGNAL data_slice_currents_dq_out_axi_1_5 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_currents_dq_out_axi_1_6 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_voltage_input_dq_out_axi_fb : std_logic;  -- ufix1
  SIGNAL strobe_sel_voltage_input_dq_out_axi_fb : std_logic;  -- ufix1
  SIGNAL const_zero_1                     : std_logic;  -- ufix1
  SIGNAL strobe_in_voltage_input_dq_out_axi_fb : std_logic;  -- ufix1
  SIGNAL strobe_sw_voltage_input_dq_out_axi_fb : std_logic;  -- ufix1
  SIGNAL strobe_reg_voltage_input_dq_out_axi_fb : std_logic;  -- ufix1
  SIGNAL read_voltage_input_dq_out_axi_fb_unsigned : vector_of_unsigned32(0 TO 5);  -- ufix32 [6]
  SIGNAL sync_reg_voltage_input_dq_out_axi_fb : vector_of_unsigned32(0 TO 5);  -- ufix32 [6]
  SIGNAL data_slice_voltage_input_dq_out_axi_fb_1 : vector_of_unsigned32(0 TO 5);  -- ufix32 [6]
  SIGNAL decode_sel_voltage_input_dq_out_axi_fb_1_2 : std_logic;  -- ufix1
  SIGNAL data_slice_voltage_input_dq_out_axi_fb_1_0 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_voltage_input_dq_out_axi_fb_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_voltage_input_dq_out_axi_fb_1_3 : std_logic;  -- ufix1
  SIGNAL data_slice_voltage_input_dq_out_axi_fb_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_voltage_input_dq_out_axi_fb_1_2 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_voltage_input_dq_out_axi_fb_1_4 : std_logic;  -- ufix1
  SIGNAL data_slice_voltage_input_dq_out_axi_fb_1_2 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_voltage_input_dq_out_axi_fb_1_3 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_voltage_input_dq_out_axi_fb_1_5 : std_logic;  -- ufix1
  SIGNAL data_slice_voltage_input_dq_out_axi_fb_1_3 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_voltage_input_dq_out_axi_fb_1_4 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_voltage_input_dq_out_axi_fb_1_6 : std_logic;  -- ufix1
  SIGNAL data_slice_voltage_input_dq_out_axi_fb_1_4 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_voltage_input_dq_out_axi_fb_1_5 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_voltage_input_dq_out_axi_fb_1_5 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_voltage_input_dq_out_axi_fb_1_6 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_reset_integrators_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_reset_integrators_1_1    : std_logic;  -- ufix1
  SIGNAL data_in_reset_integrators        : std_logic;  -- ufix1
  SIGNAL data_reg_reset_integrators_1_1   : std_logic;  -- ufix1
  SIGNAL write_concats_reset_integrators_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_use_axi_input_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_use_axi_input_1_1        : std_logic;  -- ufix1
  SIGNAL data_in_use_axi_input            : std_logic;  -- ufix1
  SIGNAL data_reg_use_axi_input_1_1       : std_logic;  -- ufix1
  SIGNAL write_concats_use_axi_input_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_simulate_mechanical_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_simulate_mechanical_1_1  : std_logic;  -- ufix1
  SIGNAL data_in_simulate_mechanical      : std_logic;  -- ufix1
  SIGNAL data_reg_simulate_mechanical_1_1 : std_logic;  -- ufix1
  SIGNAL write_concats_simulate_mechanical_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_load_torque_1_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_load_torque_1_1          : std_logic;  -- ufix1
  SIGNAL data_reg_load_torque_1_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_omega_mech_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_omega_mech_1_1           : std_logic;  -- ufix1
  SIGNAL data_reg_omega_mech_1_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_voltage_input_dq_axi  : std_logic;  -- ufix1
  SIGNAL strobe_sel_voltage_input_dq_axi  : std_logic;  -- ufix1
  SIGNAL const_zero_2                     : std_logic;  -- ufix1
  SIGNAL strobe_in_voltage_input_dq_axi   : std_logic;  -- ufix1
  SIGNAL strobe_sw_voltage_input_dq_axi   : std_logic;  -- ufix1
  SIGNAL decode_sel_voltage_input_dq_axi_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_voltage_input_dq_axi_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_voltage_input_dq_axi_2_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_voltage_input_dq_axi_2_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_voltage_input_dq_axi_3_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_voltage_input_dq_axi_3_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_voltage_input_dq_axi_4_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_voltage_input_dq_axi_4_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_voltage_input_dq_axi_5_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_voltage_input_dq_axi_5_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_voltage_input_dq_axi_6_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_voltage_input_dq_axi_6_1 : std_logic;  -- ufix1
  SIGNAL strobe_reg_voltage_input_dq_axi  : std_logic;  -- ufix1
  SIGNAL data_reg_voltage_input_dq_axi_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_voltage_input_dq_axi_2_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_voltage_input_dq_axi_3_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_voltage_input_dq_axi_4_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_voltage_input_dq_axi_5_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_voltage_input_dq_axi_6_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_voltage_input_dq_axi   : vector_of_unsigned32(0 TO 5);  -- ufix32 [6]
  SIGNAL sync_reg_voltage_input_dq_axi_1  : vector_of_unsigned32(0 TO 5);  -- ufix32 [6]
  SIGNAL decode_sel_physical_parameters_mu_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_mu_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_mu_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_M_R0_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_M_R0_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_M_R0_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_1_L_d_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_1_L_d_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_1_L_d_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_1_L_q_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_1_L_q_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_1_L_q_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_R_1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_R_1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_R_1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_polepair_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_polepair_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_polepair_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_psi_pm_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_psi_pm_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_psi_pm_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_x_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_x_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_x_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_y_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_y_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_y_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_z1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_z1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_z1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_L_z2_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_L_z2_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_L_z2_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_physical_parameters_1_J_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_physical_parameters_1_J_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_physical_parameters_1_J_1_1 : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  read_theta_el_out_axi_unsigned <= unsigned(read_theta_el_out_axi);

  read_M_Mi_out_axi_unsigned <= unsigned(read_M_Mi_out_axi);

  read_omega_mech_out_axi_unsigned <= unsigned(read_omega_mech_out_axi);

  
  decode_sel_currents_dq_out_axi_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0080#, 14) ELSE
      '0';

  
  decode_sel_omega_mech_out_axi_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005E#, 14) ELSE
      '0';

  
  decode_sel_M_Mi_out_axi_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005D#, 14) ELSE
      '0';

  
  decode_sel_theta_el_out_axi_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0053#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_theta_el_out_axi_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_theta_el_out_axi <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_theta_el_out_axi <= read_theta_el_out_axi_unsigned;
      END IF;
    END IF;
  END PROCESS reg_theta_el_out_axi_process;


  
  decode_rd_theta_el_out_axi_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_theta_el_out_axi_1_1 = '0' ELSE
      read_reg_theta_el_out_axi;

  reg_M_Mi_out_axi_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_M_Mi_out_axi <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_M_Mi_out_axi <= read_M_Mi_out_axi_unsigned;
      END IF;
    END IF;
  END PROCESS reg_M_Mi_out_axi_process;


  
  decode_rd_M_Mi_out_axi_1_1 <= decode_rd_theta_el_out_axi_1_1 WHEN decode_sel_M_Mi_out_axi_1_1 = '0' ELSE
      read_reg_M_Mi_out_axi;

  reg_omega_mech_out_axi_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_omega_mech_out_axi <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_omega_mech_out_axi <= read_omega_mech_out_axi_unsigned;
      END IF;
    END IF;
  END PROCESS reg_omega_mech_out_axi_process;


  
  decode_rd_omega_mech_out_axi_1_1 <= decode_rd_M_Mi_out_axi_1_1 WHEN decode_sel_omega_mech_out_axi_1_1 = '0' ELSE
      read_reg_omega_mech_out_axi;

  
  decode_sel_currents_dq_out_axi <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0088#, 14) ELSE
      '0';

  strobe_sel_currents_dq_out_axi <= decode_sel_currents_dq_out_axi AND wr_enb;

  const_zero <= '0';

  data_write_unsigned <= unsigned(data_write);

  strobe_in_currents_dq_out_axi <= data_write_unsigned(0);

  
  strobe_sw_currents_dq_out_axi <= const_zero WHEN strobe_sel_currents_dq_out_axi = '0' ELSE
      strobe_in_currents_dq_out_axi;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_currents_dq_out_axi <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_currents_dq_out_axi <= strobe_sw_currents_dq_out_axi;
      END IF;
    END IF;
  END PROCESS reg_process;


  outputgen2: FOR k IN 0 TO 5 GENERATE
    read_currents_dq_out_axi_unsigned(k) <= unsigned(read_currents_dq_out_axi(k));
  END GENERATE;

  reg_currents_dq_out_axi_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_currents_dq_out_axi(0) <= to_unsigned(0, 32);
        sync_reg_currents_dq_out_axi(1) <= to_unsigned(0, 32);
        sync_reg_currents_dq_out_axi(2) <= to_unsigned(0, 32);
        sync_reg_currents_dq_out_axi(3) <= to_unsigned(0, 32);
        sync_reg_currents_dq_out_axi(4) <= to_unsigned(0, 32);
        sync_reg_currents_dq_out_axi(5) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_currents_dq_out_axi = '1' THEN
        sync_reg_currents_dq_out_axi(0) <= read_currents_dq_out_axi_unsigned(0);
        sync_reg_currents_dq_out_axi(1) <= read_currents_dq_out_axi_unsigned(1);
        sync_reg_currents_dq_out_axi(2) <= read_currents_dq_out_axi_unsigned(2);
        sync_reg_currents_dq_out_axi(3) <= read_currents_dq_out_axi_unsigned(3);
        sync_reg_currents_dq_out_axi(4) <= read_currents_dq_out_axi_unsigned(4);
        sync_reg_currents_dq_out_axi(5) <= read_currents_dq_out_axi_unsigned(5);
      END IF;
    END IF;
  END PROCESS reg_currents_dq_out_axi_process;


  data_slice_currents_dq_out_axi_1(0) <= sync_reg_currents_dq_out_axi(0);
  data_slice_currents_dq_out_axi_1(1) <= sync_reg_currents_dq_out_axi(1);
  data_slice_currents_dq_out_axi_1(2) <= sync_reg_currents_dq_out_axi(2);
  data_slice_currents_dq_out_axi_1(3) <= sync_reg_currents_dq_out_axi(3);
  data_slice_currents_dq_out_axi_1(4) <= sync_reg_currents_dq_out_axi(4);
  data_slice_currents_dq_out_axi_1(5) <= sync_reg_currents_dq_out_axi(5);

  
  decode_sel_currents_dq_out_axi_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0081#, 14) ELSE
      '0';

  data_slice_currents_dq_out_axi_1_0 <= data_slice_currents_dq_out_axi_1(0);

  
  decode_rd_currents_dq_out_axi_1_1 <= decode_rd_omega_mech_out_axi_1_1 WHEN decode_sel_currents_dq_out_axi_1_1 = '0' ELSE
      data_slice_currents_dq_out_axi_1_0;

  
  decode_sel_currents_dq_out_axi_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0082#, 14) ELSE
      '0';

  data_slice_currents_dq_out_axi_1_1 <= data_slice_currents_dq_out_axi_1(1);

  
  decode_rd_currents_dq_out_axi_1_2 <= decode_rd_currents_dq_out_axi_1_1 WHEN decode_sel_currents_dq_out_axi_1_2 = '0' ELSE
      data_slice_currents_dq_out_axi_1_1;

  
  decode_sel_currents_dq_out_axi_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0083#, 14) ELSE
      '0';

  data_slice_currents_dq_out_axi_1_2 <= data_slice_currents_dq_out_axi_1(2);

  
  decode_rd_currents_dq_out_axi_1_3 <= decode_rd_currents_dq_out_axi_1_2 WHEN decode_sel_currents_dq_out_axi_1_3 = '0' ELSE
      data_slice_currents_dq_out_axi_1_2;

  
  decode_sel_currents_dq_out_axi_1_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0084#, 14) ELSE
      '0';

  data_slice_currents_dq_out_axi_1_3 <= data_slice_currents_dq_out_axi_1(3);

  
  decode_rd_currents_dq_out_axi_1_4 <= decode_rd_currents_dq_out_axi_1_3 WHEN decode_sel_currents_dq_out_axi_1_4 = '0' ELSE
      data_slice_currents_dq_out_axi_1_3;

  
  decode_sel_currents_dq_out_axi_1_6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0085#, 14) ELSE
      '0';

  data_slice_currents_dq_out_axi_1_4 <= data_slice_currents_dq_out_axi_1(4);

  
  decode_rd_currents_dq_out_axi_1_5 <= decode_rd_currents_dq_out_axi_1_4 WHEN decode_sel_currents_dq_out_axi_1_5 = '0' ELSE
      data_slice_currents_dq_out_axi_1_4;

  
  decode_sel_voltage_input_dq_out_axi_fb_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A0#, 14) ELSE
      '0';

  data_slice_currents_dq_out_axi_1_5 <= data_slice_currents_dq_out_axi_1(5);

  
  decode_rd_currents_dq_out_axi_1_6 <= decode_rd_currents_dq_out_axi_1_5 WHEN decode_sel_currents_dq_out_axi_1_6 = '0' ELSE
      data_slice_currents_dq_out_axi_1_5;

  
  decode_sel_voltage_input_dq_out_axi_fb <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A8#, 14) ELSE
      '0';

  strobe_sel_voltage_input_dq_out_axi_fb <= decode_sel_voltage_input_dq_out_axi_fb AND wr_enb;

  const_zero_1 <= '0';

  strobe_in_voltage_input_dq_out_axi_fb <= data_write_unsigned(0);

  
  strobe_sw_voltage_input_dq_out_axi_fb <= const_zero_1 WHEN strobe_sel_voltage_input_dq_out_axi_fb = '0' ELSE
      strobe_in_voltage_input_dq_out_axi_fb;

  reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_voltage_input_dq_out_axi_fb <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_voltage_input_dq_out_axi_fb <= strobe_sw_voltage_input_dq_out_axi_fb;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  outputgen1: FOR k IN 0 TO 5 GENERATE
    read_voltage_input_dq_out_axi_fb_unsigned(k) <= unsigned(read_voltage_input_dq_out_axi_fb(k));
  END GENERATE;

  reg_voltage_input_dq_out_axi_fb_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_voltage_input_dq_out_axi_fb(0) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_out_axi_fb(1) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_out_axi_fb(2) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_out_axi_fb(3) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_out_axi_fb(4) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_out_axi_fb(5) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_voltage_input_dq_out_axi_fb = '1' THEN
        sync_reg_voltage_input_dq_out_axi_fb(0) <= read_voltage_input_dq_out_axi_fb_unsigned(0);
        sync_reg_voltage_input_dq_out_axi_fb(1) <= read_voltage_input_dq_out_axi_fb_unsigned(1);
        sync_reg_voltage_input_dq_out_axi_fb(2) <= read_voltage_input_dq_out_axi_fb_unsigned(2);
        sync_reg_voltage_input_dq_out_axi_fb(3) <= read_voltage_input_dq_out_axi_fb_unsigned(3);
        sync_reg_voltage_input_dq_out_axi_fb(4) <= read_voltage_input_dq_out_axi_fb_unsigned(4);
        sync_reg_voltage_input_dq_out_axi_fb(5) <= read_voltage_input_dq_out_axi_fb_unsigned(5);
      END IF;
    END IF;
  END PROCESS reg_voltage_input_dq_out_axi_fb_process;


  data_slice_voltage_input_dq_out_axi_fb_1(0) <= sync_reg_voltage_input_dq_out_axi_fb(0);
  data_slice_voltage_input_dq_out_axi_fb_1(1) <= sync_reg_voltage_input_dq_out_axi_fb(1);
  data_slice_voltage_input_dq_out_axi_fb_1(2) <= sync_reg_voltage_input_dq_out_axi_fb(2);
  data_slice_voltage_input_dq_out_axi_fb_1(3) <= sync_reg_voltage_input_dq_out_axi_fb(3);
  data_slice_voltage_input_dq_out_axi_fb_1(4) <= sync_reg_voltage_input_dq_out_axi_fb(4);
  data_slice_voltage_input_dq_out_axi_fb_1(5) <= sync_reg_voltage_input_dq_out_axi_fb(5);

  
  decode_sel_voltage_input_dq_out_axi_fb_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A1#, 14) ELSE
      '0';

  data_slice_voltage_input_dq_out_axi_fb_1_0 <= data_slice_voltage_input_dq_out_axi_fb_1(0);

  
  decode_rd_voltage_input_dq_out_axi_fb_1_1 <= decode_rd_currents_dq_out_axi_1_6 WHEN decode_sel_voltage_input_dq_out_axi_fb_1_1 = '0' ELSE
      data_slice_voltage_input_dq_out_axi_fb_1_0;

  
  decode_sel_voltage_input_dq_out_axi_fb_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A2#, 14) ELSE
      '0';

  data_slice_voltage_input_dq_out_axi_fb_1_1 <= data_slice_voltage_input_dq_out_axi_fb_1(1);

  
  decode_rd_voltage_input_dq_out_axi_fb_1_2 <= decode_rd_voltage_input_dq_out_axi_fb_1_1 WHEN decode_sel_voltage_input_dq_out_axi_fb_1_2 = '0' ELSE
      data_slice_voltage_input_dq_out_axi_fb_1_1;

  
  decode_sel_voltage_input_dq_out_axi_fb_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A3#, 14) ELSE
      '0';

  data_slice_voltage_input_dq_out_axi_fb_1_2 <= data_slice_voltage_input_dq_out_axi_fb_1(2);

  
  decode_rd_voltage_input_dq_out_axi_fb_1_3 <= decode_rd_voltage_input_dq_out_axi_fb_1_2 WHEN decode_sel_voltage_input_dq_out_axi_fb_1_3 = '0' ELSE
      data_slice_voltage_input_dq_out_axi_fb_1_2;

  
  decode_sel_voltage_input_dq_out_axi_fb_1_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A4#, 14) ELSE
      '0';

  data_slice_voltage_input_dq_out_axi_fb_1_3 <= data_slice_voltage_input_dq_out_axi_fb_1(3);

  
  decode_rd_voltage_input_dq_out_axi_fb_1_4 <= decode_rd_voltage_input_dq_out_axi_fb_1_3 WHEN decode_sel_voltage_input_dq_out_axi_fb_1_4 = '0' ELSE
      data_slice_voltage_input_dq_out_axi_fb_1_3;

  
  decode_sel_voltage_input_dq_out_axi_fb_1_6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A5#, 14) ELSE
      '0';

  data_slice_voltage_input_dq_out_axi_fb_1_4 <= data_slice_voltage_input_dq_out_axi_fb_1(4);

  
  decode_rd_voltage_input_dq_out_axi_fb_1_5 <= decode_rd_voltage_input_dq_out_axi_fb_1_4 WHEN decode_sel_voltage_input_dq_out_axi_fb_1_5 = '0' ELSE
      data_slice_voltage_input_dq_out_axi_fb_1_4;

  data_slice_voltage_input_dq_out_axi_fb_1_5 <= data_slice_voltage_input_dq_out_axi_fb_1(5);

  
  decode_rd_voltage_input_dq_out_axi_fb_1_6 <= decode_rd_voltage_input_dq_out_axi_fb_1_5 WHEN decode_sel_voltage_input_dq_out_axi_fb_1_6 = '0' ELSE
      data_slice_voltage_input_dq_out_axi_fb_1_5;

  data_read <= std_logic_vector(decode_rd_voltage_input_dq_out_axi_fb_1_6);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

  
  decode_sel_reset_integrators_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_reset_integrators_1_1 <= decode_sel_reset_integrators_1_1 AND wr_enb;

  data_in_reset_integrators <= data_write_unsigned(0);

  reg_reset_integrators_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_reset_integrators_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_reset_integrators_1_1 = '1' THEN
        data_reg_reset_integrators_1_1 <= data_in_reset_integrators;
      END IF;
    END IF;
  END PROCESS reg_reset_integrators_1_1_process;


  write_concats_reset_integrators_1 <= data_reg_reset_integrators_1_1;

  write_reset_integrators <= write_concats_reset_integrators_1;

  
  decode_sel_use_axi_input_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_use_axi_input_1_1 <= decode_sel_use_axi_input_1_1 AND wr_enb;

  data_in_use_axi_input <= data_write_unsigned(0);

  reg_use_axi_input_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_use_axi_input_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_use_axi_input_1_1 = '1' THEN
        data_reg_use_axi_input_1_1 <= data_in_use_axi_input;
      END IF;
    END IF;
  END PROCESS reg_use_axi_input_1_1_process;


  write_concats_use_axi_input_1 <= data_reg_use_axi_input_1_1;

  write_use_axi_input <= write_concats_use_axi_input_1;

  
  decode_sel_simulate_mechanical_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_simulate_mechanical_1_1 <= decode_sel_simulate_mechanical_1_1 AND wr_enb;

  data_in_simulate_mechanical <= data_write_unsigned(0);

  reg_simulate_mechanical_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_simulate_mechanical_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_simulate_mechanical_1_1 = '1' THEN
        data_reg_simulate_mechanical_1_1 <= data_in_simulate_mechanical;
      END IF;
    END IF;
  END PROCESS reg_simulate_mechanical_1_1_process;


  write_concats_simulate_mechanical_1 <= data_reg_simulate_mechanical_1_1;

  write_simulate_mechanical <= write_concats_simulate_mechanical_1;

  
  decode_sel_load_torque_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_load_torque_1_1 <= decode_sel_load_torque_1_1 AND wr_enb;

  reg_load_torque_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_load_torque_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_load_torque_1_1 = '1' THEN
        data_reg_load_torque_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_load_torque_1_1_process;


  write_load_torque <= std_logic_vector(data_reg_load_torque_1_1);

  
  decode_sel_omega_mech_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_omega_mech_1_1 <= decode_sel_omega_mech_1_1 AND wr_enb;

  reg_omega_mech_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_omega_mech_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_omega_mech_1_1 = '1' THEN
        data_reg_omega_mech_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_omega_mech_1_1_process;


  write_omega_mech <= std_logic_vector(data_reg_omega_mech_1_1);

  
  decode_sel_voltage_input_dq_axi <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0068#, 14) ELSE
      '0';

  strobe_sel_voltage_input_dq_axi <= decode_sel_voltage_input_dq_axi AND wr_enb;

  const_zero_2 <= '0';

  strobe_in_voltage_input_dq_axi <= data_write_unsigned(0);

  
  strobe_sw_voltage_input_dq_axi <= const_zero_2 WHEN strobe_sel_voltage_input_dq_axi = '0' ELSE
      strobe_in_voltage_input_dq_axi;

  
  decode_sel_voltage_input_dq_axi_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0060#, 14) ELSE
      '0';

  reg_enb_voltage_input_dq_axi_1_1 <= decode_sel_voltage_input_dq_axi_1_1 AND wr_enb;

  
  decode_sel_voltage_input_dq_axi_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0061#, 14) ELSE
      '0';

  reg_enb_voltage_input_dq_axi_2_1 <= decode_sel_voltage_input_dq_axi_2_1 AND wr_enb;

  
  decode_sel_voltage_input_dq_axi_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0062#, 14) ELSE
      '0';

  reg_enb_voltage_input_dq_axi_3_1 <= decode_sel_voltage_input_dq_axi_3_1 AND wr_enb;

  
  decode_sel_voltage_input_dq_axi_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0063#, 14) ELSE
      '0';

  reg_enb_voltage_input_dq_axi_4_1 <= decode_sel_voltage_input_dq_axi_4_1 AND wr_enb;

  
  decode_sel_voltage_input_dq_axi_5_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0064#, 14) ELSE
      '0';

  reg_enb_voltage_input_dq_axi_5_1 <= decode_sel_voltage_input_dq_axi_5_1 AND wr_enb;

  
  decode_sel_voltage_input_dq_axi_6_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0065#, 14) ELSE
      '0';

  reg_enb_voltage_input_dq_axi_6_1 <= decode_sel_voltage_input_dq_axi_6_1 AND wr_enb;

  reg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_voltage_input_dq_axi <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_voltage_input_dq_axi <= strobe_sw_voltage_input_dq_axi;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  reg_voltage_input_dq_axi_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_voltage_input_dq_axi_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_voltage_input_dq_axi_1_1 = '1' THEN
        data_reg_voltage_input_dq_axi_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_voltage_input_dq_axi_1_1_process;


  reg_voltage_input_dq_axi_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_voltage_input_dq_axi_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_voltage_input_dq_axi_2_1 = '1' THEN
        data_reg_voltage_input_dq_axi_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_voltage_input_dq_axi_2_1_process;


  reg_voltage_input_dq_axi_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_voltage_input_dq_axi_3_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_voltage_input_dq_axi_3_1 = '1' THEN
        data_reg_voltage_input_dq_axi_3_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_voltage_input_dq_axi_3_1_process;


  reg_voltage_input_dq_axi_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_voltage_input_dq_axi_4_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_voltage_input_dq_axi_4_1 = '1' THEN
        data_reg_voltage_input_dq_axi_4_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_voltage_input_dq_axi_4_1_process;


  reg_voltage_input_dq_axi_5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_voltage_input_dq_axi_5_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_voltage_input_dq_axi_5_1 = '1' THEN
        data_reg_voltage_input_dq_axi_5_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_voltage_input_dq_axi_5_1_process;


  reg_voltage_input_dq_axi_6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_voltage_input_dq_axi_6_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_voltage_input_dq_axi_6_1 = '1' THEN
        data_reg_voltage_input_dq_axi_6_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_voltage_input_dq_axi_6_1_process;


  write_reg_voltage_input_dq_axi(0) <= data_reg_voltage_input_dq_axi_1_1;
  write_reg_voltage_input_dq_axi(1) <= data_reg_voltage_input_dq_axi_2_1;
  write_reg_voltage_input_dq_axi(2) <= data_reg_voltage_input_dq_axi_3_1;
  write_reg_voltage_input_dq_axi(3) <= data_reg_voltage_input_dq_axi_4_1;
  write_reg_voltage_input_dq_axi(4) <= data_reg_voltage_input_dq_axi_5_1;
  write_reg_voltage_input_dq_axi(5) <= data_reg_voltage_input_dq_axi_6_1;

  sync_reg_voltage_input_dq_axi_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_voltage_input_dq_axi_1(0) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_axi_1(1) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_axi_1(2) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_axi_1(3) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_axi_1(4) <= to_unsigned(0, 32);
        sync_reg_voltage_input_dq_axi_1(5) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_voltage_input_dq_axi = '1' THEN
        sync_reg_voltage_input_dq_axi_1(0) <= write_reg_voltage_input_dq_axi(0);
        sync_reg_voltage_input_dq_axi_1(1) <= write_reg_voltage_input_dq_axi(1);
        sync_reg_voltage_input_dq_axi_1(2) <= write_reg_voltage_input_dq_axi(2);
        sync_reg_voltage_input_dq_axi_1(3) <= write_reg_voltage_input_dq_axi(3);
        sync_reg_voltage_input_dq_axi_1(4) <= write_reg_voltage_input_dq_axi(4);
        sync_reg_voltage_input_dq_axi_1(5) <= write_reg_voltage_input_dq_axi(5);
      END IF;
    END IF;
  END PROCESS sync_reg_voltage_input_dq_axi_process;


  outputgen: FOR k IN 0 TO 5 GENERATE
    write_voltage_input_dq_axi(k) <= std_logic_vector(sync_reg_voltage_input_dq_axi_1(k));
  END GENERATE;

  
  decode_sel_physical_parameters_mu_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_physical_parameters_mu_1_1 <= decode_sel_physical_parameters_mu_1_1 AND wr_enb;

  reg_physical_parameters_mu_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_mu_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_mu_1_1 = '1' THEN
        data_reg_physical_parameters_mu_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_mu_1_1_process;


  write_physical_parameters_mu <= std_logic_vector(data_reg_physical_parameters_mu_1_1);

  
  decode_sel_physical_parameters_M_R0_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_physical_parameters_M_R0_1_1 <= decode_sel_physical_parameters_M_R0_1_1 AND wr_enb;

  reg_physical_parameters_M_R0_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_M_R0_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_M_R0_1_1 = '1' THEN
        data_reg_physical_parameters_M_R0_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_M_R0_1_1_process;


  write_physical_parameters_M_R0 <= std_logic_vector(data_reg_physical_parameters_M_R0_1_1);

  
  decode_sel_physical_parameters_1_L_d_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_physical_parameters_1_L_d_1_1 <= decode_sel_physical_parameters_1_L_d_1_1 AND wr_enb;

  reg_physical_parameters_1_L_d_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_1_L_d_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_1_L_d_1_1 = '1' THEN
        data_reg_physical_parameters_1_L_d_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_1_L_d_1_1_process;


  write_physical_parameters_1_L_d <= std_logic_vector(data_reg_physical_parameters_1_L_d_1_1);

  
  decode_sel_physical_parameters_1_L_q_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_physical_parameters_1_L_q_1_1 <= decode_sel_physical_parameters_1_L_q_1_1 AND wr_enb;

  reg_physical_parameters_1_L_q_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_1_L_q_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_1_L_q_1_1 = '1' THEN
        data_reg_physical_parameters_1_L_q_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_1_L_q_1_1_process;


  write_physical_parameters_1_L_q <= std_logic_vector(data_reg_physical_parameters_1_L_q_1_1);

  
  decode_sel_physical_parameters_R_1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_physical_parameters_R_1_1_1 <= decode_sel_physical_parameters_R_1_1_1 AND wr_enb;

  reg_physical_parameters_R_1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_R_1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_R_1_1_1 = '1' THEN
        data_reg_physical_parameters_R_1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_R_1_1_1_process;


  write_physical_parameters_R_1 <= std_logic_vector(data_reg_physical_parameters_R_1_1_1);

  
  decode_sel_physical_parameters_polepair_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_physical_parameters_polepair_1_1 <= decode_sel_physical_parameters_polepair_1_1 AND wr_enb;

  reg_physical_parameters_polepair_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_polepair_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_polepair_1_1 = '1' THEN
        data_reg_physical_parameters_polepair_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_polepair_1_1_process;


  write_physical_parameters_polepair <= std_logic_vector(data_reg_physical_parameters_polepair_1_1);

  
  decode_sel_physical_parameters_psi_pm_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  reg_enb_physical_parameters_psi_pm_1_1 <= decode_sel_physical_parameters_psi_pm_1_1 AND wr_enb;

  reg_physical_parameters_psi_pm_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_psi_pm_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_psi_pm_1_1 = '1' THEN
        data_reg_physical_parameters_psi_pm_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_psi_pm_1_1_process;


  write_physical_parameters_psi_pm <= std_logic_vector(data_reg_physical_parameters_psi_pm_1_1);

  
  decode_sel_physical_parameters_L_x_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_x_1_1 <= decode_sel_physical_parameters_L_x_1_1 AND wr_enb;

  reg_physical_parameters_L_x_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_x_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_x_1_1 = '1' THEN
        data_reg_physical_parameters_L_x_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_x_1_1_process;


  write_physical_parameters_L_x <= std_logic_vector(data_reg_physical_parameters_L_x_1_1);

  
  decode_sel_physical_parameters_L_y_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_y_1_1 <= decode_sel_physical_parameters_L_y_1_1 AND wr_enb;

  reg_physical_parameters_L_y_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_y_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_y_1_1 = '1' THEN
        data_reg_physical_parameters_L_y_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_y_1_1_process;


  write_physical_parameters_L_y <= std_logic_vector(data_reg_physical_parameters_L_y_1_1);

  
  decode_sel_physical_parameters_L_z1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_z1_1_1 <= decode_sel_physical_parameters_L_z1_1_1 AND wr_enb;

  reg_physical_parameters_L_z1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_z1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_z1_1_1 = '1' THEN
        data_reg_physical_parameters_L_z1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_z1_1_1_process;


  write_physical_parameters_L_z1 <= std_logic_vector(data_reg_physical_parameters_L_z1_1_1);

  
  decode_sel_physical_parameters_L_z2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  reg_enb_physical_parameters_L_z2_1_1 <= decode_sel_physical_parameters_L_z2_1_1 AND wr_enb;

  reg_physical_parameters_L_z2_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_L_z2_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_L_z2_1_1 = '1' THEN
        data_reg_physical_parameters_L_z2_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_L_z2_1_1_process;


  write_physical_parameters_L_z2 <= std_logic_vector(data_reg_physical_parameters_L_z2_1_1);

  
  decode_sel_physical_parameters_1_J_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005C#, 14) ELSE
      '0';

  reg_enb_physical_parameters_1_J_1_1 <= decode_sel_physical_parameters_1_J_1_1 AND wr_enb;

  reg_physical_parameters_1_J_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_physical_parameters_1_J_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_physical_parameters_1_J_1_1 = '1' THEN
        data_reg_physical_parameters_1_J_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_physical_parameters_1_J_1_1_process;


  write_physical_parameters_1_J <= std_logic_vector(data_reg_physical_parameters_1_J_1_1);

END rtl;

