// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_float_to_sfixdt_uz_float_to_sfixdt,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.861833,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=115,HLS_SYN_LUT=960,HLS_VERSION=2022_2}" *)

module uz_float_to_sfixdt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_float,
        fraction,
        out_sfix
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_float;
input  [7:0] fraction;
output  [31:0] out_sfix;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] mask_table_address0;
reg    mask_table_ce0;
wire   [22:0] mask_table_q0;
wire   [4:0] one_half_table_address0;
reg    one_half_table_ce0;
wire   [23:0] one_half_table_q0;
wire   [31:0] dc_fu_293_p3;
reg   [31:0] dc_reg_548;
wire   [31:0] data_V_1_fu_301_p1;
reg   [31:0] data_V_1_reg_553;
wire   [0:0] icmp_ln1035_fu_315_p2;
reg   [0:0] icmp_ln1035_reg_559;
wire   [0:0] icmp_ln1035_1_fu_321_p2;
reg   [0:0] icmp_ln1035_1_reg_565;
wire   [63:0] zext_ln541_fu_337_p1;
wire    ap_CS_fsm_state2;
wire   [31:0] data_V_fu_145_p1;
wire   [7:0] xs_exp_V_5_fu_157_p4;
wire   [8:0] zext_ln17_fu_171_p1;
wire   [8:0] zext_ln9_fu_141_p1;
wire   [8:0] add_ln17_fu_175_p2;
wire   [0:0] ininf_fu_181_p2;
wire   [0:0] icmp_ln1031_fu_187_p2;
wire   [22:0] xs_sig_V_fu_167_p1;
wire   [0:0] icmp_ln1023_fu_199_p2;
wire   [0:0] icmp_ln23_1_fu_217_p2;
wire   [0:0] icmp_ln23_fu_211_p2;
wire   [0:0] and_ln23_fu_223_p2;
wire   [0:0] inf_fu_193_p2;
wire   [7:0] xs_exp_V_fu_235_p2;
wire   [0:0] p_Result_s_fu_149_p3;
wire   [7:0] xs_exp_V_6_fu_241_p3;
wire   [22:0] xs_sig_V_1_fu_249_p3;
wire   [0:0] and_ln18_fu_205_p2;
wire   [0:0] or_ln23_fu_229_p2;
wire   [0:0] xor_ln23_fu_275_p2;
wire   [31:0] p_Result_1_fu_257_p4;
wire   [31:0] p_Result_2_fu_267_p3;
wire   [31:0] select_ln23_fu_281_p3;
wire   [31:0] bitcast_ln23_fu_289_p1;
wire   [7:0] xs_exp_V_7_fu_305_p4;
wire   [4:0] index_fu_327_p4;
wire   [0:0] p_Result_3_fu_343_p3;
wire   [31:0] zext_ln204_fu_358_p1;
wire   [31:0] data_V_2_fu_362_p2;
wire   [22:0] trunc_ln628_fu_367_p1;
wire   [22:0] xor_ln1497_fu_371_p2;
wire   [8:0] tmp_fu_383_p4;
wire   [22:0] xs_sig_V_2_fu_377_p2;
wire   [31:0] p_Result_4_fu_350_p3;
wire   [31:0] p_Result_5_fu_393_p3;
wire   [31:0] select_ln1035_fu_401_p3;
wire   [0:0] xor_ln1035_fu_412_p2;
wire   [0:0] and_ln1035_fu_417_p2;
wire   [31:0] bitcast_ln1035_fu_408_p1;
wire   [31:0] dc_1_fu_422_p3;
wire   [31:0] data_V_3_fu_429_p1;
wire   [22:0] p_Result_6_fu_443_p1;
wire   [24:0] mantissa_fu_447_p4;
wire   [7:0] xs_exp_V_4_fu_433_p4;
wire   [8:0] zext_ln346_fu_461_p1;
wire   [8:0] add_ln346_fu_465_p2;
wire   [7:0] sub_ln1512_fu_479_p2;
wire   [0:0] isNeg_fu_471_p3;
wire  signed [8:0] sext_ln1512_fu_485_p1;
wire   [8:0] ush_fu_489_p3;
wire  signed [31:0] sext_ln1488_fu_497_p1;
wire   [78:0] zext_ln68_fu_457_p1;
wire   [78:0] zext_ln1488_fu_501_p1;
wire   [78:0] r_V_fu_505_p2;
wire   [0:0] tmp_4_fu_517_p3;
wire   [78:0] r_V_1_fu_511_p2;
wire   [31:0] zext_ln818_fu_525_p1;
wire   [31:0] tmp_1_fu_529_p4;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

uz_float_to_sfixdt_mask_table_ROM_AUTO_1R #(
    .DataWidth( 23 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0),
    .q0(mask_table_q0)
);

uz_float_to_sfixdt_one_half_table_ROM_AUTO_1R #(
    .DataWidth( 24 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
one_half_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table_address0),
    .ce0(one_half_table_ce0),
    .q0(one_half_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        data_V_1_reg_553 <= data_V_1_fu_301_p1;
        dc_reg_548 <= dc_fu_293_p3;
        icmp_ln1035_1_reg_565 <= icmp_ln1035_1_fu_321_p2;
        icmp_ln1035_reg_559 <= icmp_ln1035_fu_315_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mask_table_ce0 = 1'b1;
    end else begin
        mask_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        one_half_table_ce0 = 1'b1;
    end else begin
        one_half_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_175_p2 = (zext_ln17_fu_171_p1 + zext_ln9_fu_141_p1);

assign add_ln346_fu_465_p2 = ($signed(zext_ln346_fu_461_p1) + $signed(9'd385));

assign and_ln1035_fu_417_p2 = (xor_ln1035_fu_412_p2 & icmp_ln1035_1_reg_565);

assign and_ln18_fu_205_p2 = (ininf_fu_181_p2 & icmp_ln1023_fu_199_p2);

assign and_ln23_fu_223_p2 = (icmp_ln23_fu_211_p2 & icmp_ln23_1_fu_217_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign bitcast_ln1035_fu_408_p1 = select_ln1035_fu_401_p3;

assign bitcast_ln23_fu_289_p1 = select_ln23_fu_281_p3;

assign data_V_1_fu_301_p1 = dc_fu_293_p3;

assign data_V_2_fu_362_p2 = (zext_ln204_fu_358_p1 + data_V_1_reg_553);

assign data_V_3_fu_429_p1 = dc_1_fu_422_p3;

assign data_V_fu_145_p1 = in_float;

assign dc_1_fu_422_p3 = ((and_ln1035_fu_417_p2[0:0] == 1'b1) ? dc_reg_548 : bitcast_ln1035_fu_408_p1);

assign dc_fu_293_p3 = ((and_ln18_fu_205_p2[0:0] == 1'b1) ? in_float : bitcast_ln23_fu_289_p1);

assign icmp_ln1023_fu_199_p2 = ((xs_sig_V_fu_167_p1 != 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln1031_fu_187_p2 = ((add_ln17_fu_175_p2 > 9'd254) ? 1'b1 : 1'b0);

assign icmp_ln1035_1_fu_321_p2 = ((xs_exp_V_7_fu_305_p4 > 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_315_p2 = ((xs_exp_V_7_fu_305_p4 < 8'd126) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_217_p2 = ((add_ln17_fu_175_p2 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_211_p2 = ((xs_exp_V_5_fu_157_p4 != 8'd0) ? 1'b1 : 1'b0);

assign index_fu_327_p4 = {{data_V_1_fu_301_p1[27:23]}};

assign inf_fu_193_p2 = (ininf_fu_181_p2 | icmp_ln1031_fu_187_p2);

assign ininf_fu_181_p2 = ((xs_exp_V_5_fu_157_p4 == 8'd255) ? 1'b1 : 1'b0);

assign isNeg_fu_471_p3 = add_ln346_fu_465_p2[32'd8];

assign mantissa_fu_447_p4 = {{{{1'd1}, {p_Result_6_fu_443_p1}}}, {1'd0}};

assign mask_table_address0 = zext_ln541_fu_337_p1;

assign one_half_table_address0 = zext_ln541_fu_337_p1;

assign or_ln23_fu_229_p2 = (ininf_fu_181_p2 | and_ln23_fu_223_p2);

assign out_sfix = ((isNeg_fu_471_p3[0:0] == 1'b1) ? zext_ln818_fu_525_p1 : tmp_1_fu_529_p4);

assign p_Result_1_fu_257_p4 = {{{p_Result_s_fu_149_p3}, {xs_exp_V_6_fu_241_p3}}, {xs_sig_V_1_fu_249_p3}};

assign p_Result_2_fu_267_p3 = {{p_Result_s_fu_149_p3}, {31'd0}};

assign p_Result_3_fu_343_p3 = data_V_1_reg_553[32'd31];

assign p_Result_4_fu_350_p3 = {{p_Result_3_fu_343_p3}, {31'd0}};

assign p_Result_5_fu_393_p3 = {{tmp_fu_383_p4}, {xs_sig_V_2_fu_377_p2}};

assign p_Result_6_fu_443_p1 = data_V_3_fu_429_p1[22:0];

assign p_Result_s_fu_149_p3 = data_V_fu_145_p1[32'd31];

assign r_V_1_fu_511_p2 = zext_ln68_fu_457_p1 << zext_ln1488_fu_501_p1;

assign r_V_fu_505_p2 = zext_ln68_fu_457_p1 >> zext_ln1488_fu_501_p1;

assign select_ln1035_fu_401_p3 = ((icmp_ln1035_reg_559[0:0] == 1'b1) ? p_Result_4_fu_350_p3 : p_Result_5_fu_393_p3);

assign select_ln23_fu_281_p3 = ((xor_ln23_fu_275_p2[0:0] == 1'b1) ? p_Result_1_fu_257_p4 : p_Result_2_fu_267_p3);

assign sext_ln1488_fu_497_p1 = $signed(ush_fu_489_p3);

assign sext_ln1512_fu_485_p1 = $signed(sub_ln1512_fu_479_p2);

assign sub_ln1512_fu_479_p2 = (8'd127 - xs_exp_V_4_fu_433_p4);

assign tmp_1_fu_529_p4 = {{r_V_1_fu_511_p2[55:24]}};

assign tmp_4_fu_517_p3 = r_V_fu_505_p2[32'd24];

assign tmp_fu_383_p4 = {{data_V_2_fu_362_p2[31:23]}};

assign trunc_ln628_fu_367_p1 = data_V_2_fu_362_p2[22:0];

assign ush_fu_489_p3 = ((isNeg_fu_471_p3[0:0] == 1'b1) ? sext_ln1512_fu_485_p1 : add_ln346_fu_465_p2);

assign xor_ln1035_fu_412_p2 = (icmp_ln1035_reg_559 ^ 1'd1);

assign xor_ln1497_fu_371_p2 = (mask_table_q0 ^ 23'd8388607);

assign xor_ln23_fu_275_p2 = (or_ln23_fu_229_p2 ^ and_ln18_fu_205_p2);

assign xs_exp_V_4_fu_433_p4 = {{data_V_3_fu_429_p1[30:23]}};

assign xs_exp_V_5_fu_157_p4 = {{data_V_fu_145_p1[30:23]}};

assign xs_exp_V_6_fu_241_p3 = ((inf_fu_193_p2[0:0] == 1'b1) ? 8'd255 : xs_exp_V_fu_235_p2);

assign xs_exp_V_7_fu_305_p4 = {{data_V_1_fu_301_p1[30:23]}};

assign xs_exp_V_fu_235_p2 = (xs_exp_V_5_fu_157_p4 + fraction);

assign xs_sig_V_1_fu_249_p3 = ((inf_fu_193_p2[0:0] == 1'b1) ? 23'd0 : xs_sig_V_fu_167_p1);

assign xs_sig_V_2_fu_377_p2 = (xor_ln1497_fu_371_p2 & trunc_ln628_fu_367_p1);

assign xs_sig_V_fu_167_p1 = data_V_fu_145_p1[22:0];

assign zext_ln1488_fu_501_p1 = $unsigned(sext_ln1488_fu_497_p1);

assign zext_ln17_fu_171_p1 = xs_exp_V_5_fu_157_p4;

assign zext_ln204_fu_358_p1 = one_half_table_q0;

assign zext_ln346_fu_461_p1 = xs_exp_V_4_fu_433_p4;

assign zext_ln541_fu_337_p1 = index_fu_327_p4;

assign zext_ln68_fu_457_p1 = mantissa_fu_447_p4;

assign zext_ln818_fu_525_p1 = tmp_4_fu_517_p3;

assign zext_ln9_fu_141_p1 = fraction;

endmodule //uz_float_to_sfixdt
