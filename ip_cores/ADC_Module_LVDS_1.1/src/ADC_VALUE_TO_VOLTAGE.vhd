-- -------------------------------------------------------------
-- 
-- File Name: D:\Projektarbeit\hdl_prj\hdlsrc\ADC_VALUE_TO_VOLTAGE\ADC_VALUE_TO_VOLTAGE.vhd
-- Created: 2017-06-29 16:11:47
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- CALC_VOLTAGE                  ce_out        0.2
-- calculated_voltage_valid            ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ADC_VALUE_TO_VOLTAGE
-- Source Path: ADC_VALUE_TO_VOLTAGE
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ADC_VALUE_TO_VOLTAGE IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ADC_IN                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        ADC_DATA_VALID                    :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        CALC_VOLTAGE                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        calculated_voltage_valid                :   OUT   std_logic
        );
END ADC_VALUE_TO_VOLTAGE;


ARCHITECTURE rtl OF ADC_VALUE_TO_VOLTAGE IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL OFFSET_2_5V_out1                 : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL ADC_IN_signed                    : signed(15 DOWNTO 0);  -- int16
  SIGNAL STEPS_uV_out1                    : signed(15 DOWNTO 0);  -- sfix16_En27
  SIGNAL Product1_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Product1_out1                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Add_add_cast                     : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL Add_add_cast_1                   : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL Add_add_temp                     : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL Add_out1                         : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Switch_out1                      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En12

BEGIN
  enb <= clk_enable;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= ADC_DATA_VALID;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  OFFSET_2_5V_out1 <= to_signed(16#5000#, 16);

  ADC_IN_signed <= signed(ADC_IN);

  STEPS_uV_out1 <= to_signed(16#2800#, 16);

  Product1_mul_temp <= ADC_IN_signed * STEPS_uV_out1;
  Product1_out1 <= Product1_mul_temp(30 DOWNTO 15);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Add_add_cast <= resize(OFFSET_2_5V_out1, 18);
  Add_add_cast_1 <= resize(Delay1_out1 & '0', 18);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_out1 <= Add_add_temp(16 DOWNTO 1);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_out1 <= Delay4_out1 WHEN Delay3_out1 = '0' ELSE
      Delay_out1;

  CALC_VOLTAGE <= std_logic_vector(Switch_out1);

  ce_out <= clk_enable;

  calculated_voltage_valid <= Delay3_out1;

END rtl;

