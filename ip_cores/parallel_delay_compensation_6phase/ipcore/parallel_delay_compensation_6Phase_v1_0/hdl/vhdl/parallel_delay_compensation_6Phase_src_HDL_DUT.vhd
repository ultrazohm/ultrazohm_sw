-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_delay_compensation_6phase\hdlsrc\parallel_delay_compensation_6phase\parallel_delay_compensation_6Phase_src_HDL_DUT.vhd
-- Created: 2022-10-05 14:30:54
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- id_k_1                        ce_out        1e-08
-- iq_k_1                        ce_out        1e-08
-- ix_k_1                        ce_out        1e-08
-- iy_k_1                        ce_out        1e-08
-- done                          ce_out        1e-08
-- id_k_1_AXI                    ce_out        1e-08
-- iq_k_1_AXI                    ce_out        1e-08
-- ix_k_1_AXI                    ce_out        1e-08
-- iy_k_1_AXI                    ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_delay_compensation_6Phase_src_HDL_DUT
-- Source Path: parallel_delay_compensation_6phase/HDL_DUT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_delay_compensation_6Phase_src_HDL_DUT_pkg.ALL;

ENTITY parallel_delay_compensation_6Phase_src_HDL_DUT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        id_measured                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_measured                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_measured                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_measured                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        psiPM_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Lq_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Rs_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ld_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        last_applied_optimal_voltages_in_0 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltages_in_1 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltages_in_2 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltages_in_3 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        pole_pairs_AXI                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_m_measured                  :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        valid_in_ADC                      :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        id_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        done                              :   OUT   std_logic;
        id_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
        );
END parallel_delay_compensation_6Phase_src_HDL_DUT;


ARCHITECTURE rtl OF parallel_delay_compensation_6Phase_src_HDL_DUT IS

  -- Component Declarations
  COMPONENT parallel_delay_compensation_6Phase_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_delay_compensation_6Phase_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_delay_compensation_6Phase_src_MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          SampleTime_div_Ld               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lq               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lx               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Ly               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          last_applied_optimal_voltage_vector :   IN    vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          id_measured                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_measured                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_measured                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_measured                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          psiPM                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Lq                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Ld                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Rs                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          omega_el                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_k_1                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          iq_k_1                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          ix_k_1                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          iy_k_1                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_delay_compensation_6Phase_src_Detect_Rise_Positive
    USE ENTITY work.parallel_delay_compensation_6Phase_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    USE ENTITY work.parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single(rtl);

  FOR ALL : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    USE ENTITY work.parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single(rtl);

  FOR ALL : parallel_delay_compensation_6Phase_src_Detect_Rise_Positive1
    USE ENTITY work.parallel_delay_compensation_6Phase_src_Detect_Rise_Positive1(rtl);

  FOR ALL : parallel_delay_compensation_6Phase_src_nfp_mul_single
    USE ENTITY work.parallel_delay_compensation_6Phase_src_nfp_mul_single(rtl);

  FOR ALL : parallel_delay_compensation_6Phase_src_MATLAB_Function
    USE ENTITY work.parallel_delay_compensation_6Phase_src_MATLAB_Function(rtl);

  FOR ALL : parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    USE ENTITY work.parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Delay21_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Delay30_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay27_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Delay31_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on12_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay28_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Delay32_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay29_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL End_Cycle_3                      : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch5_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch5_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL last_applied_optimal_voltages_in : vector_of_std_logic_vector24(0 TO 3);  -- ufix24 [4]
  SIGNAL last_applied_optimal_voltages_in_4 : vector_of_signed24(0 TO 3);  -- sfix24_En11 [4]
  SIGNAL last_applied_optimal_voltage_vector : vector_of_signed24(0 TO 3);  -- sfix24_En11 [4]
  SIGNAL Data_Type_Conversion1_out1       : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Delay1_out1                      : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Switch_on1_out1                  : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Switch_on1_out1_1                : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch7_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL id_measured_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay19_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch9_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch9_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL iq_measured_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay18_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch11_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL ix_measured_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay17_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL delayMatch13_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch13_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL iy_measured_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay16_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL Delay15_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay7_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL Delay14_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on8_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay8_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL Delay13_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on9_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL Delay12_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on10_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay35_out1                     : std_logic;
  SIGNAL End_Cycle_4                      : std_logic;
  SIGNAL delayMatch17_reg                 : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL delayMatch17_reg_next            : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL End_Cycle_5                      : std_logic;
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL delayMatch16_reg                 : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL delayMatch16_reg_next            : std_logic_vector(0 TO 10);  -- ufix1 [11]
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch15_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch15_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL pole_pairs_AXI_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay33_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on14_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on14_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL id_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL iq_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ix_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL iy_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion_out1        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion_out1_1      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion8_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_1                    : vector_of_signed18(0 TO 11);  -- sfix18 [12]
  SIGNAL reduced_reg_next_1               : vector_of_signed18(0 TO 11);  -- sfix18_En11 [12]
  SIGNAL Data_Type_Conversion8_out1_1     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion9_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_2                    : vector_of_signed18(0 TO 11);  -- sfix18 [12]
  SIGNAL reduced_reg_next_2               : vector_of_signed18(0 TO 11);  -- sfix18_En11 [12]
  SIGNAL Data_Type_Conversion9_out1_1     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch21_reg                 : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL delayMatch21_reg_next            : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL Delay22_out1                     : std_logic;

BEGIN
  u_Detect_Rise_Positive : parallel_delay_compensation_6Phase_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay11_out1,
              Y => End_Cycle
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(last_applied_optimal_voltage_vector(0)),  -- sfix24_En11
              nfp_out => Data_Type_Conversion1_out1(0)  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single_1 : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(last_applied_optimal_voltage_vector(1)),  -- sfix24_En11
              nfp_out => Data_Type_Conversion1_out1(1)  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single_2 : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(last_applied_optimal_voltage_vector(2)),  -- sfix24_En11
              nfp_out => Data_Type_Conversion1_out1(2)  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single_3 : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(last_applied_optimal_voltage_vector(3)),  -- sfix24_En11
              nfp_out => Data_Type_Conversion1_out1(3)  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_18_En11_to_single : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay19_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion2_out1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_18_En11_to_single_1 : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay18_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion3_out1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_18_En11_to_single_2 : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay17_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion5_out1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_18_En11_to_single_3 : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay16_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion6_out1  -- single
              );

  u_Detect_Rise_Positive1 : parallel_delay_compensation_6Phase_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay35_out1,
              Y => End_Cycle_4
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_sfix_24_En11_to_single_4 : parallel_delay_compensation_6Phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => omega_m_measured,  -- sfix24_En11
              nfp_out => Data_Type_Conversion4_out1  -- single
              );

  u_nfp_mul_comp : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion4_out1,  -- single
              nfp_in2 => pole_pairs_AXI_1,  -- single
              nfp_out => omega_el  -- single
              );

  u_MATLAB_Function : parallel_delay_compensation_6Phase_src_MATLAB_Function
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              SampleTime_div_Ld => Switch_on2_out1,  -- single
              SampleTime_div_Lq => Switch_on11_out1,  -- single
              SampleTime_div_Lx => Switch_on12_out1,  -- single
              SampleTime_div_Ly => Switch_on13_out1,  -- single
              last_applied_optimal_voltage_vector => Switch_on1_out1,  -- single [4]
              id_measured => Switch_on3_out1,  -- single
              iq_measured => Switch_on4_out1,  -- single
              ix_measured => Switch_on5_out1,  -- single
              iy_measured => Switch_on6_out1,  -- single
              psiPM => Switch_on7_out1,  -- single
              Lq => Switch_on8_out1,  -- single
              Ld => Switch_on9_out1,  -- single
              Rs => Switch_on10_out1,  -- single
              omega_el => Switch_on14_out1,  -- single
              id_k_1 => id_k_1_1,  -- single
              iq_k_1 => iq_k_1_1,  -- single
              ix_k_1 => ix_k_1_1,  -- single
              iy_k_1 => iy_k_1_1  -- single
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_single_to_sfix_18_En11 : parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => id_k_1_1,  -- single
              nfp_out => Data_Type_Conversion_out1  -- sfix18_En11
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_single_to_sfix_18_En11_1 : parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => iq_k_1_1,  -- single
              nfp_out => Data_Type_Conversion7_out1  -- sfix18_En11
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_single_to_sfix_18_En11_2 : parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => ix_k_1_1,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- sfix18_En11
              );

  u_parallel_delay_compensation_6phase_HDL_DUT_nfp_convert_single_to_sfix_18_En11_3 : parallel_delay_compensation_6Phase_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => iy_k_1_1,  -- single
              nfp_out => Data_Type_Conversion9_out1  -- sfix18_En11
              );

  enb <= clk_enable;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay21_out1 <= SampleTime_div_Ld_AXI;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_on2_out1 <= Delay2_out1 WHEN switch_compare_1 = '0' ELSE
      Delay21_out1;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay30_out1 <= SampleTime_div_Lq_AXI;
      END IF;
    END IF;
  END PROCESS Delay30_process;


  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay27_out1 <= Switch_on11_out1;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  
  Switch_on11_out1 <= Delay27_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay30_out1;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay31_out1 <= SampleTime_div_Lx_AXI;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay28_out1 <= Switch_on12_out1;
      END IF;
    END IF;
  END PROCESS Delay28_process;


  
  Switch_on12_out1 <= Delay28_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay31_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay32_out1 <= SampleTime_div_Ly_AXI;
      END IF;
    END IF;
  END PROCESS Delay32_process;


  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay29_out1 <= Switch_on13_out1;
      END IF;
    END IF;
  END PROCESS Delay29_process;


  
  Switch_on13_out1 <= Delay29_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay32_out1;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        End_Cycle_1 <= '0';
      ELSIF enb = '1' THEN
        End_Cycle_1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= '0';
        reduced_reg(1) <= '0';
        reduced_reg(2) <= '0';
        reduced_reg(3) <= '0';
        reduced_reg(4) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  End_Cycle_2 <= reduced_reg(4);
  reduced_reg_next(0) <= End_Cycle_1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);

  End_Cycle_3 <= End_Cycle_2;

  
  switch_compare_1_4 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch5_reg(0) <= '0';
        delayMatch5_reg(1) <= '0';
        delayMatch5_reg(2) <= '0';
        delayMatch5_reg(3) <= '0';
        delayMatch5_reg(4) <= '0';
        delayMatch5_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= delayMatch5_reg_next(0);
        delayMatch5_reg(1) <= delayMatch5_reg_next(1);
        delayMatch5_reg(2) <= delayMatch5_reg_next(2);
        delayMatch5_reg(3) <= delayMatch5_reg_next(3);
        delayMatch5_reg(4) <= delayMatch5_reg_next(4);
        delayMatch5_reg(5) <= delayMatch5_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  stateControl_2 <= delayMatch5_reg(5);
  delayMatch5_reg_next(0) <= stateControl_1;
  delayMatch5_reg_next(1) <= delayMatch5_reg(0);
  delayMatch5_reg_next(2) <= delayMatch5_reg(1);
  delayMatch5_reg_next(3) <= delayMatch5_reg(2);
  delayMatch5_reg_next(4) <= delayMatch5_reg(3);
  delayMatch5_reg_next(5) <= delayMatch5_reg(4);

  last_applied_optimal_voltages_in(0) <= last_applied_optimal_voltages_in_0;
  last_applied_optimal_voltages_in(1) <= last_applied_optimal_voltages_in_1;
  last_applied_optimal_voltages_in(2) <= last_applied_optimal_voltages_in_2;
  last_applied_optimal_voltages_in(3) <= last_applied_optimal_voltages_in_3;

  outputgen: FOR k IN 0 TO 3 GENERATE
    last_applied_optimal_voltages_in_4(k) <= signed(last_applied_optimal_voltages_in(k));
  END GENERATE;

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        last_applied_optimal_voltage_vector(0) <= to_signed(16#000000#, 24);
        last_applied_optimal_voltage_vector(1) <= to_signed(16#000000#, 24);
        last_applied_optimal_voltage_vector(2) <= to_signed(16#000000#, 24);
        last_applied_optimal_voltage_vector(3) <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        last_applied_optimal_voltage_vector(0) <= last_applied_optimal_voltages_in_4(0);
        last_applied_optimal_voltage_vector(1) <= last_applied_optimal_voltages_in_4(1);
        last_applied_optimal_voltage_vector(2) <= last_applied_optimal_voltages_in_4(2);
        last_applied_optimal_voltage_vector(3) <= last_applied_optimal_voltages_in_4(3);
      END IF;
    END IF;
  END PROCESS Delay20_process;



  
  Switch_on1_out1_1(0) <= Delay1_out1(0) WHEN stateControl_2 = '0' ELSE
      Switch_on1_out1(0);
  
  Switch_on1_out1_1(1) <= Delay1_out1(1) WHEN stateControl_2 = '0' ELSE
      Switch_on1_out1(1);
  
  Switch_on1_out1_1(2) <= Delay1_out1(2) WHEN stateControl_2 = '0' ELSE
      Switch_on1_out1(2);
  
  Switch_on1_out1_1(3) <= Delay1_out1(3) WHEN stateControl_2 = '0' ELSE
      Switch_on1_out1(3);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1(0) <= X"00000000";
        Delay1_out1(1) <= X"00000000";
        Delay1_out1(2) <= X"00000000";
        Delay1_out1(3) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1(0) <= Switch_on1_out1_1(0);
        Delay1_out1(1) <= Switch_on1_out1_1(1);
        Delay1_out1(2) <= Switch_on1_out1_1(2);
        Delay1_out1(3) <= Switch_on1_out1_1(3);
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1(0) <= Delay1_out1(0) WHEN switch_compare_1_4 = '0' ELSE
      Data_Type_Conversion1_out1(0);
  
  Switch_on1_out1(1) <= Delay1_out1(1) WHEN switch_compare_1_4 = '0' ELSE
      Data_Type_Conversion1_out1(1);
  
  Switch_on1_out1(2) <= Delay1_out1(2) WHEN switch_compare_1_4 = '0' ELSE
      Data_Type_Conversion1_out1(2);
  
  Switch_on1_out1(3) <= Delay1_out1(3) WHEN switch_compare_1_4 = '0' ELSE
      Data_Type_Conversion1_out1(3);

  
  switch_compare_1_5 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_3 <= '1';

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch7_reg(0) <= '0';
        delayMatch7_reg(1) <= '0';
        delayMatch7_reg(2) <= '0';
        delayMatch7_reg(3) <= '0';
        delayMatch7_reg(4) <= '0';
        delayMatch7_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch7_reg(0) <= delayMatch7_reg_next(0);
        delayMatch7_reg(1) <= delayMatch7_reg_next(1);
        delayMatch7_reg(2) <= delayMatch7_reg_next(2);
        delayMatch7_reg(3) <= delayMatch7_reg_next(3);
        delayMatch7_reg(4) <= delayMatch7_reg_next(4);
        delayMatch7_reg(5) <= delayMatch7_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  stateControl_4 <= delayMatch7_reg(5);
  delayMatch7_reg_next(0) <= stateControl_3;
  delayMatch7_reg_next(1) <= delayMatch7_reg(0);
  delayMatch7_reg_next(2) <= delayMatch7_reg(1);
  delayMatch7_reg_next(3) <= delayMatch7_reg(2);
  delayMatch7_reg_next(4) <= delayMatch7_reg(3);
  delayMatch7_reg_next(5) <= delayMatch7_reg(4);

  id_measured_signed <= signed(id_measured);

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay19_out1 <= id_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  Switch_on3_out1_1 <= Delay3_out1 WHEN stateControl_4 = '0' ELSE
      Switch_on3_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_on3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_on3_out1 <= Delay3_out1 WHEN switch_compare_1_5 = '0' ELSE
      Data_Type_Conversion2_out1;

  
  switch_compare_1_6 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_5 <= '1';

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch9_reg(0) <= '0';
        delayMatch9_reg(1) <= '0';
        delayMatch9_reg(2) <= '0';
        delayMatch9_reg(3) <= '0';
        delayMatch9_reg(4) <= '0';
        delayMatch9_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch9_reg(0) <= delayMatch9_reg_next(0);
        delayMatch9_reg(1) <= delayMatch9_reg_next(1);
        delayMatch9_reg(2) <= delayMatch9_reg_next(2);
        delayMatch9_reg(3) <= delayMatch9_reg_next(3);
        delayMatch9_reg(4) <= delayMatch9_reg_next(4);
        delayMatch9_reg(5) <= delayMatch9_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  stateControl_6 <= delayMatch9_reg(5);
  delayMatch9_reg_next(0) <= stateControl_5;
  delayMatch9_reg_next(1) <= delayMatch9_reg(0);
  delayMatch9_reg_next(2) <= delayMatch9_reg(1);
  delayMatch9_reg_next(3) <= delayMatch9_reg(2);
  delayMatch9_reg_next(4) <= delayMatch9_reg(3);
  delayMatch9_reg_next(5) <= delayMatch9_reg(4);

  iq_measured_signed <= signed(iq_measured);

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay18_out1 <= iq_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Switch_on4_out1_1 <= Delay4_out1 WHEN stateControl_6 = '0' ELSE
      Switch_on4_out1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch_on4_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_on4_out1 <= Delay4_out1 WHEN switch_compare_1_6 = '0' ELSE
      Data_Type_Conversion3_out1;

  
  switch_compare_1_7 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_7 <= '1';

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch11_reg(0) <= '0';
        delayMatch11_reg(1) <= '0';
        delayMatch11_reg(2) <= '0';
        delayMatch11_reg(3) <= '0';
        delayMatch11_reg(4) <= '0';
        delayMatch11_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
        delayMatch11_reg(2) <= delayMatch11_reg_next(2);
        delayMatch11_reg(3) <= delayMatch11_reg_next(3);
        delayMatch11_reg(4) <= delayMatch11_reg_next(4);
        delayMatch11_reg(5) <= delayMatch11_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  stateControl_8 <= delayMatch11_reg(5);
  delayMatch11_reg_next(0) <= stateControl_7;
  delayMatch11_reg_next(1) <= delayMatch11_reg(0);
  delayMatch11_reg_next(2) <= delayMatch11_reg(1);
  delayMatch11_reg_next(3) <= delayMatch11_reg(2);
  delayMatch11_reg_next(4) <= delayMatch11_reg(3);
  delayMatch11_reg_next(5) <= delayMatch11_reg(4);

  ix_measured_signed <= signed(ix_measured);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay17_out1 <= ix_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  Switch_on5_out1_1 <= Delay5_out1 WHEN stateControl_8 = '0' ELSE
      Switch_on5_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch_on5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch_on5_out1 <= Delay5_out1 WHEN switch_compare_1_7 = '0' ELSE
      Data_Type_Conversion5_out1;

  
  switch_compare_1_8 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_9 <= '1';

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_reg(0) <= '0';
        delayMatch13_reg(1) <= '0';
        delayMatch13_reg(2) <= '0';
        delayMatch13_reg(3) <= '0';
        delayMatch13_reg(4) <= '0';
        delayMatch13_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch13_reg(0) <= delayMatch13_reg_next(0);
        delayMatch13_reg(1) <= delayMatch13_reg_next(1);
        delayMatch13_reg(2) <= delayMatch13_reg_next(2);
        delayMatch13_reg(3) <= delayMatch13_reg_next(3);
        delayMatch13_reg(4) <= delayMatch13_reg_next(4);
        delayMatch13_reg(5) <= delayMatch13_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  stateControl_10 <= delayMatch13_reg(5);
  delayMatch13_reg_next(0) <= stateControl_9;
  delayMatch13_reg_next(1) <= delayMatch13_reg(0);
  delayMatch13_reg_next(2) <= delayMatch13_reg(1);
  delayMatch13_reg_next(3) <= delayMatch13_reg(2);
  delayMatch13_reg_next(4) <= delayMatch13_reg(3);
  delayMatch13_reg_next(5) <= delayMatch13_reg(4);

  iy_measured_signed <= signed(iy_measured);

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay16_out1 <= iy_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Switch_on6_out1_1 <= Delay6_out1 WHEN stateControl_10 = '0' ELSE
      Switch_on6_out1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch_on6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch_on6_out1 <= Delay6_out1 WHEN switch_compare_1_8 = '0' ELSE
      Data_Type_Conversion6_out1;

  
  switch_compare_1_9 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay15_out1 <= psiPM_AXI;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch_on7_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch_on7_out1 <= Delay7_out1 WHEN switch_compare_1_9 = '0' ELSE
      Delay15_out1;

  
  switch_compare_1_10 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay14_out1 <= Lq_AXI;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch_on8_out1 <= Delay8_out1 WHEN switch_compare_1_10 = '0' ELSE
      Delay14_out1;

  
  switch_compare_1_11 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay13_out1 <= Ld_AXI;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch_on9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch_on9_out1 <= Delay9_out1 WHEN switch_compare_1_11 = '0' ELSE
      Delay13_out1;

  
  switch_compare_1_12 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay12_out1 <= Rs_AXI;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1 <= Switch_on10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch_on10_out1 <= Delay10_out1 WHEN switch_compare_1_12 = '0' ELSE
      Delay12_out1;

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay35_out1 <= valid_in_ADC;
      END IF;
    END IF;
  END PROCESS Delay35_process;


  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch17_reg(0) <= '0';
        delayMatch17_reg(1) <= '0';
        delayMatch17_reg(2) <= '0';
        delayMatch17_reg(3) <= '0';
        delayMatch17_reg(4) <= '0';
        delayMatch17_reg(5) <= '0';
        delayMatch17_reg(6) <= '0';
        delayMatch17_reg(7) <= '0';
        delayMatch17_reg(8) <= '0';
        delayMatch17_reg(9) <= '0';
        delayMatch17_reg(10) <= '0';
      ELSIF enb = '1' THEN
        delayMatch17_reg(0) <= delayMatch17_reg_next(0);
        delayMatch17_reg(1) <= delayMatch17_reg_next(1);
        delayMatch17_reg(2) <= delayMatch17_reg_next(2);
        delayMatch17_reg(3) <= delayMatch17_reg_next(3);
        delayMatch17_reg(4) <= delayMatch17_reg_next(4);
        delayMatch17_reg(5) <= delayMatch17_reg_next(5);
        delayMatch17_reg(6) <= delayMatch17_reg_next(6);
        delayMatch17_reg(7) <= delayMatch17_reg_next(7);
        delayMatch17_reg(8) <= delayMatch17_reg_next(8);
        delayMatch17_reg(9) <= delayMatch17_reg_next(9);
        delayMatch17_reg(10) <= delayMatch17_reg_next(10);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  End_Cycle_5 <= delayMatch17_reg(10);
  delayMatch17_reg_next(0) <= End_Cycle_4;
  delayMatch17_reg_next(1) <= delayMatch17_reg(0);
  delayMatch17_reg_next(2) <= delayMatch17_reg(1);
  delayMatch17_reg_next(3) <= delayMatch17_reg(2);
  delayMatch17_reg_next(4) <= delayMatch17_reg(3);
  delayMatch17_reg_next(5) <= delayMatch17_reg(4);
  delayMatch17_reg_next(6) <= delayMatch17_reg(5);
  delayMatch17_reg_next(7) <= delayMatch17_reg(6);
  delayMatch17_reg_next(8) <= delayMatch17_reg(7);
  delayMatch17_reg_next(9) <= delayMatch17_reg(8);
  delayMatch17_reg_next(10) <= delayMatch17_reg(9);

  
  switch_compare_1_13 <= '1' WHEN End_Cycle_5 = '1' ELSE
      '0';

  stateControl_11 <= '1';

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch16_reg(0) <= '0';
        delayMatch16_reg(1) <= '0';
        delayMatch16_reg(2) <= '0';
        delayMatch16_reg(3) <= '0';
        delayMatch16_reg(4) <= '0';
        delayMatch16_reg(5) <= '0';
        delayMatch16_reg(6) <= '0';
        delayMatch16_reg(7) <= '0';
        delayMatch16_reg(8) <= '0';
        delayMatch16_reg(9) <= '0';
        delayMatch16_reg(10) <= '0';
      ELSIF enb = '1' THEN
        delayMatch16_reg(0) <= delayMatch16_reg_next(0);
        delayMatch16_reg(1) <= delayMatch16_reg_next(1);
        delayMatch16_reg(2) <= delayMatch16_reg_next(2);
        delayMatch16_reg(3) <= delayMatch16_reg_next(3);
        delayMatch16_reg(4) <= delayMatch16_reg_next(4);
        delayMatch16_reg(5) <= delayMatch16_reg_next(5);
        delayMatch16_reg(6) <= delayMatch16_reg_next(6);
        delayMatch16_reg(7) <= delayMatch16_reg_next(7);
        delayMatch16_reg(8) <= delayMatch16_reg_next(8);
        delayMatch16_reg(9) <= delayMatch16_reg_next(9);
        delayMatch16_reg(10) <= delayMatch16_reg_next(10);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  stateControl_12 <= delayMatch16_reg(10);
  delayMatch16_reg_next(0) <= stateControl_11;
  delayMatch16_reg_next(1) <= delayMatch16_reg(0);
  delayMatch16_reg_next(2) <= delayMatch16_reg(1);
  delayMatch16_reg_next(3) <= delayMatch16_reg(2);
  delayMatch16_reg_next(4) <= delayMatch16_reg(3);
  delayMatch16_reg_next(5) <= delayMatch16_reg(4);
  delayMatch16_reg_next(6) <= delayMatch16_reg(5);
  delayMatch16_reg_next(7) <= delayMatch16_reg(6);
  delayMatch16_reg_next(8) <= delayMatch16_reg(7);
  delayMatch16_reg_next(9) <= delayMatch16_reg(8);
  delayMatch16_reg_next(10) <= delayMatch16_reg(9);

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= X"00000000";
        delayMatch15_reg(1) <= X"00000000";
        delayMatch15_reg(2) <= X"00000000";
        delayMatch15_reg(3) <= X"00000000";
        delayMatch15_reg(4) <= X"00000000";
        delayMatch15_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
        delayMatch15_reg(3) <= delayMatch15_reg_next(3);
        delayMatch15_reg(4) <= delayMatch15_reg_next(4);
        delayMatch15_reg(5) <= delayMatch15_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  pole_pairs_AXI_1 <= delayMatch15_reg(5);
  delayMatch15_reg_next(0) <= pole_pairs_AXI;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);
  delayMatch15_reg_next(3) <= delayMatch15_reg(2);
  delayMatch15_reg_next(4) <= delayMatch15_reg(3);
  delayMatch15_reg_next(5) <= delayMatch15_reg(4);

  omega_el_1 <= omega_el;

  
  Switch_on14_out1_1 <= Delay33_out1 WHEN stateControl_12 = '0' ELSE
      Switch_on14_out1;

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay33_out1 <= Switch_on14_out1_1;
      END IF;
    END IF;
  END PROCESS Delay33_process;


  
  Switch_on14_out1 <= Delay33_out1 WHEN switch_compare_1_13 = '0' ELSE
      omega_el_1;

  Data_Type_Conversion_out1_signed <= signed(Data_Type_Conversion_out1);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Data_Type_Conversion_out1_1 <= Data_Type_Conversion_out1_signed;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  id_k_1 <= std_logic_vector(Data_Type_Conversion_out1_1);

  Data_Type_Conversion8_out1_signed <= signed(Data_Type_Conversion8_out1);

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= to_signed(16#00000#, 18);
        reduced_reg_1(1) <= to_signed(16#00000#, 18);
        reduced_reg_1(2) <= to_signed(16#00000#, 18);
        reduced_reg_1(3) <= to_signed(16#00000#, 18);
        reduced_reg_1(4) <= to_signed(16#00000#, 18);
        reduced_reg_1(5) <= to_signed(16#00000#, 18);
        reduced_reg_1(6) <= to_signed(16#00000#, 18);
        reduced_reg_1(7) <= to_signed(16#00000#, 18);
        reduced_reg_1(8) <= to_signed(16#00000#, 18);
        reduced_reg_1(9) <= to_signed(16#00000#, 18);
        reduced_reg_1(10) <= to_signed(16#00000#, 18);
        reduced_reg_1(11) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
        reduced_reg_1(4) <= reduced_reg_next_1(4);
        reduced_reg_1(5) <= reduced_reg_next_1(5);
        reduced_reg_1(6) <= reduced_reg_next_1(6);
        reduced_reg_1(7) <= reduced_reg_next_1(7);
        reduced_reg_1(8) <= reduced_reg_next_1(8);
        reduced_reg_1(9) <= reduced_reg_next_1(9);
        reduced_reg_1(10) <= reduced_reg_next_1(10);
        reduced_reg_1(11) <= reduced_reg_next_1(11);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  Data_Type_Conversion8_out1_1 <= reduced_reg_1(11);
  reduced_reg_next_1(0) <= Data_Type_Conversion8_out1_signed;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);
  reduced_reg_next_1(4) <= reduced_reg_1(3);
  reduced_reg_next_1(5) <= reduced_reg_1(4);
  reduced_reg_next_1(6) <= reduced_reg_1(5);
  reduced_reg_next_1(7) <= reduced_reg_1(6);
  reduced_reg_next_1(8) <= reduced_reg_1(7);
  reduced_reg_next_1(9) <= reduced_reg_1(8);
  reduced_reg_next_1(10) <= reduced_reg_1(9);
  reduced_reg_next_1(11) <= reduced_reg_1(10);

  ix_k_1 <= std_logic_vector(Data_Type_Conversion8_out1_1);

  Data_Type_Conversion9_out1_signed <= signed(Data_Type_Conversion9_out1);

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2(0) <= to_signed(16#00000#, 18);
        reduced_reg_2(1) <= to_signed(16#00000#, 18);
        reduced_reg_2(2) <= to_signed(16#00000#, 18);
        reduced_reg_2(3) <= to_signed(16#00000#, 18);
        reduced_reg_2(4) <= to_signed(16#00000#, 18);
        reduced_reg_2(5) <= to_signed(16#00000#, 18);
        reduced_reg_2(6) <= to_signed(16#00000#, 18);
        reduced_reg_2(7) <= to_signed(16#00000#, 18);
        reduced_reg_2(8) <= to_signed(16#00000#, 18);
        reduced_reg_2(9) <= to_signed(16#00000#, 18);
        reduced_reg_2(10) <= to_signed(16#00000#, 18);
        reduced_reg_2(11) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= reduced_reg_next_2(0);
        reduced_reg_2(1) <= reduced_reg_next_2(1);
        reduced_reg_2(2) <= reduced_reg_next_2(2);
        reduced_reg_2(3) <= reduced_reg_next_2(3);
        reduced_reg_2(4) <= reduced_reg_next_2(4);
        reduced_reg_2(5) <= reduced_reg_next_2(5);
        reduced_reg_2(6) <= reduced_reg_next_2(6);
        reduced_reg_2(7) <= reduced_reg_next_2(7);
        reduced_reg_2(8) <= reduced_reg_next_2(8);
        reduced_reg_2(9) <= reduced_reg_next_2(9);
        reduced_reg_2(10) <= reduced_reg_next_2(10);
        reduced_reg_2(11) <= reduced_reg_next_2(11);
      END IF;
    END IF;
  END PROCESS reduced_4_process;

  Data_Type_Conversion9_out1_1 <= reduced_reg_2(11);
  reduced_reg_next_2(0) <= Data_Type_Conversion9_out1_signed;
  reduced_reg_next_2(1) <= reduced_reg_2(0);
  reduced_reg_next_2(2) <= reduced_reg_2(1);
  reduced_reg_next_2(3) <= reduced_reg_2(2);
  reduced_reg_next_2(4) <= reduced_reg_2(3);
  reduced_reg_next_2(5) <= reduced_reg_2(4);
  reduced_reg_next_2(6) <= reduced_reg_2(5);
  reduced_reg_next_2(7) <= reduced_reg_2(6);
  reduced_reg_next_2(8) <= reduced_reg_2(7);
  reduced_reg_next_2(9) <= reduced_reg_2(8);
  reduced_reg_next_2(10) <= reduced_reg_2(9);
  reduced_reg_next_2(11) <= reduced_reg_2(10);

  iy_k_1 <= std_logic_vector(Data_Type_Conversion9_out1_1);

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch21_reg(0) <= '0';
        delayMatch21_reg(1) <= '0';
        delayMatch21_reg(2) <= '0';
        delayMatch21_reg(3) <= '0';
        delayMatch21_reg(4) <= '0';
        delayMatch21_reg(5) <= '0';
        delayMatch21_reg(6) <= '0';
        delayMatch21_reg(7) <= '0';
        delayMatch21_reg(8) <= '0';
        delayMatch21_reg(9) <= '0';
        delayMatch21_reg(10) <= '0';
        delayMatch21_reg(11) <= '0';
        delayMatch21_reg(12) <= '0';
        delayMatch21_reg(13) <= '0';
        delayMatch21_reg(14) <= '0';
        delayMatch21_reg(15) <= '0';
        delayMatch21_reg(16) <= '0';
        delayMatch21_reg(17) <= '0';
        delayMatch21_reg(18) <= '0';
        delayMatch21_reg(19) <= '0';
        delayMatch21_reg(20) <= '0';
        delayMatch21_reg(21) <= '0';
        delayMatch21_reg(22) <= '0';
        delayMatch21_reg(23) <= '0';
        delayMatch21_reg(24) <= '0';
        delayMatch21_reg(25) <= '0';
        delayMatch21_reg(26) <= '0';
        delayMatch21_reg(27) <= '0';
        delayMatch21_reg(28) <= '0';
        delayMatch21_reg(29) <= '0';
        delayMatch21_reg(30) <= '0';
        delayMatch21_reg(31) <= '0';
        delayMatch21_reg(32) <= '0';
        delayMatch21_reg(33) <= '0';
        delayMatch21_reg(34) <= '0';
        delayMatch21_reg(35) <= '0';
        delayMatch21_reg(36) <= '0';
        delayMatch21_reg(37) <= '0';
        delayMatch21_reg(38) <= '0';
        delayMatch21_reg(39) <= '0';
        delayMatch21_reg(40) <= '0';
        delayMatch21_reg(41) <= '0';
        delayMatch21_reg(42) <= '0';
        delayMatch21_reg(43) <= '0';
        delayMatch21_reg(44) <= '0';
        delayMatch21_reg(45) <= '0';
        delayMatch21_reg(46) <= '0';
      ELSIF enb = '1' THEN
        delayMatch21_reg(0) <= delayMatch21_reg_next(0);
        delayMatch21_reg(1) <= delayMatch21_reg_next(1);
        delayMatch21_reg(2) <= delayMatch21_reg_next(2);
        delayMatch21_reg(3) <= delayMatch21_reg_next(3);
        delayMatch21_reg(4) <= delayMatch21_reg_next(4);
        delayMatch21_reg(5) <= delayMatch21_reg_next(5);
        delayMatch21_reg(6) <= delayMatch21_reg_next(6);
        delayMatch21_reg(7) <= delayMatch21_reg_next(7);
        delayMatch21_reg(8) <= delayMatch21_reg_next(8);
        delayMatch21_reg(9) <= delayMatch21_reg_next(9);
        delayMatch21_reg(10) <= delayMatch21_reg_next(10);
        delayMatch21_reg(11) <= delayMatch21_reg_next(11);
        delayMatch21_reg(12) <= delayMatch21_reg_next(12);
        delayMatch21_reg(13) <= delayMatch21_reg_next(13);
        delayMatch21_reg(14) <= delayMatch21_reg_next(14);
        delayMatch21_reg(15) <= delayMatch21_reg_next(15);
        delayMatch21_reg(16) <= delayMatch21_reg_next(16);
        delayMatch21_reg(17) <= delayMatch21_reg_next(17);
        delayMatch21_reg(18) <= delayMatch21_reg_next(18);
        delayMatch21_reg(19) <= delayMatch21_reg_next(19);
        delayMatch21_reg(20) <= delayMatch21_reg_next(20);
        delayMatch21_reg(21) <= delayMatch21_reg_next(21);
        delayMatch21_reg(22) <= delayMatch21_reg_next(22);
        delayMatch21_reg(23) <= delayMatch21_reg_next(23);
        delayMatch21_reg(24) <= delayMatch21_reg_next(24);
        delayMatch21_reg(25) <= delayMatch21_reg_next(25);
        delayMatch21_reg(26) <= delayMatch21_reg_next(26);
        delayMatch21_reg(27) <= delayMatch21_reg_next(27);
        delayMatch21_reg(28) <= delayMatch21_reg_next(28);
        delayMatch21_reg(29) <= delayMatch21_reg_next(29);
        delayMatch21_reg(30) <= delayMatch21_reg_next(30);
        delayMatch21_reg(31) <= delayMatch21_reg_next(31);
        delayMatch21_reg(32) <= delayMatch21_reg_next(32);
        delayMatch21_reg(33) <= delayMatch21_reg_next(33);
        delayMatch21_reg(34) <= delayMatch21_reg_next(34);
        delayMatch21_reg(35) <= delayMatch21_reg_next(35);
        delayMatch21_reg(36) <= delayMatch21_reg_next(36);
        delayMatch21_reg(37) <= delayMatch21_reg_next(37);
        delayMatch21_reg(38) <= delayMatch21_reg_next(38);
        delayMatch21_reg(39) <= delayMatch21_reg_next(39);
        delayMatch21_reg(40) <= delayMatch21_reg_next(40);
        delayMatch21_reg(41) <= delayMatch21_reg_next(41);
        delayMatch21_reg(42) <= delayMatch21_reg_next(42);
        delayMatch21_reg(43) <= delayMatch21_reg_next(43);
        delayMatch21_reg(44) <= delayMatch21_reg_next(44);
        delayMatch21_reg(45) <= delayMatch21_reg_next(45);
        delayMatch21_reg(46) <= delayMatch21_reg_next(46);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  Delay22_out1 <= delayMatch21_reg(46);
  delayMatch21_reg_next(0) <= End_Cycle_1;
  delayMatch21_reg_next(1) <= delayMatch21_reg(0);
  delayMatch21_reg_next(2) <= delayMatch21_reg(1);
  delayMatch21_reg_next(3) <= delayMatch21_reg(2);
  delayMatch21_reg_next(4) <= delayMatch21_reg(3);
  delayMatch21_reg_next(5) <= delayMatch21_reg(4);
  delayMatch21_reg_next(6) <= delayMatch21_reg(5);
  delayMatch21_reg_next(7) <= delayMatch21_reg(6);
  delayMatch21_reg_next(8) <= delayMatch21_reg(7);
  delayMatch21_reg_next(9) <= delayMatch21_reg(8);
  delayMatch21_reg_next(10) <= delayMatch21_reg(9);
  delayMatch21_reg_next(11) <= delayMatch21_reg(10);
  delayMatch21_reg_next(12) <= delayMatch21_reg(11);
  delayMatch21_reg_next(13) <= delayMatch21_reg(12);
  delayMatch21_reg_next(14) <= delayMatch21_reg(13);
  delayMatch21_reg_next(15) <= delayMatch21_reg(14);
  delayMatch21_reg_next(16) <= delayMatch21_reg(15);
  delayMatch21_reg_next(17) <= delayMatch21_reg(16);
  delayMatch21_reg_next(18) <= delayMatch21_reg(17);
  delayMatch21_reg_next(19) <= delayMatch21_reg(18);
  delayMatch21_reg_next(20) <= delayMatch21_reg(19);
  delayMatch21_reg_next(21) <= delayMatch21_reg(20);
  delayMatch21_reg_next(22) <= delayMatch21_reg(21);
  delayMatch21_reg_next(23) <= delayMatch21_reg(22);
  delayMatch21_reg_next(24) <= delayMatch21_reg(23);
  delayMatch21_reg_next(25) <= delayMatch21_reg(24);
  delayMatch21_reg_next(26) <= delayMatch21_reg(25);
  delayMatch21_reg_next(27) <= delayMatch21_reg(26);
  delayMatch21_reg_next(28) <= delayMatch21_reg(27);
  delayMatch21_reg_next(29) <= delayMatch21_reg(28);
  delayMatch21_reg_next(30) <= delayMatch21_reg(29);
  delayMatch21_reg_next(31) <= delayMatch21_reg(30);
  delayMatch21_reg_next(32) <= delayMatch21_reg(31);
  delayMatch21_reg_next(33) <= delayMatch21_reg(32);
  delayMatch21_reg_next(34) <= delayMatch21_reg(33);
  delayMatch21_reg_next(35) <= delayMatch21_reg(34);
  delayMatch21_reg_next(36) <= delayMatch21_reg(35);
  delayMatch21_reg_next(37) <= delayMatch21_reg(36);
  delayMatch21_reg_next(38) <= delayMatch21_reg(37);
  delayMatch21_reg_next(39) <= delayMatch21_reg(38);
  delayMatch21_reg_next(40) <= delayMatch21_reg(39);
  delayMatch21_reg_next(41) <= delayMatch21_reg(40);
  delayMatch21_reg_next(42) <= delayMatch21_reg(41);
  delayMatch21_reg_next(43) <= delayMatch21_reg(42);
  delayMatch21_reg_next(44) <= delayMatch21_reg(43);
  delayMatch21_reg_next(45) <= delayMatch21_reg(44);
  delayMatch21_reg_next(46) <= delayMatch21_reg(45);

  done <= Delay22_out1;

  id_k_1_AXI <= std_logic_vector(Data_Type_Conversion_out1_1);

  ix_k_1_AXI <= std_logic_vector(Data_Type_Conversion8_out1_1);

  iy_k_1_AXI <= std_logic_vector(Data_Type_Conversion9_out1_1);

  ce_out <= clk_enable;

  iq_k_1 <= Data_Type_Conversion7_out1;

  iq_k_1_AXI <= Data_Type_Conversion7_out1;

END rtl;

