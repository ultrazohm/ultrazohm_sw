-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pwmdutyfreqdetection\uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection.vhd
-- Created: 2022-05-25 10:12:21
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 4.34783e-10
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- AXI_period                    ce_out        1e-08
-- AXI_hightime                  ce_out        1e-08
-- AXI_lowtime                   ce_out        1e-08
-- AXI_dutycyc                   ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection
-- Source Path: uz_pwmdutyfreqdetection/uz_pwmdutyfreqdetection
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        PWMin                             :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        AXI_period                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_hightime                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_lowtime                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_dutycyc                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
        );
END uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection;


ARCHITECTURE rtl OF uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection IS

  -- Component Declarations
  COMPONENT uz_pwmdutyfreqdetection_src_Detect_Fall_Nonpositive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_23_0                      :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pwmdutyfreqdetection_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_23_0                      :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pwmdutyfreqdetection_src_Reciprocal
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_23_0                      :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pwmdutyfreqdetection_src_Detect_Fall_Nonpositive
    USE ENTITY work.uz_pwmdutyfreqdetection_src_Detect_Fall_Nonpositive(rtl);

  FOR ALL : uz_pwmdutyfreqdetection_src_Detect_Rise_Positive
    USE ENTITY work.uz_pwmdutyfreqdetection_src_Detect_Rise_Positive(rtl);

  FOR ALL : uz_pwmdutyfreqdetection_src_Reciprocal
    USE ENTITY work.uz_pwmdutyfreqdetection_src_Reciprocal(rtl);

  -- Signals
  SIGNAL enb_1_23_0                       : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Detect_Fall_Nonpositive_out1     : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch_out1_1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Switch1_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch1_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Sum1_out1                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay2_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Reciprocal_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Reciprocal_out1_unsigned         : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Product1_mul_temp                : unsigned(63 DOWNTO 0);  -- ufix64_En31
  SIGNAL Product1_out1                    : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Delay14_out1                     : unsigned(31 DOWNTO 0);  -- ufix32_En31

BEGIN
  u_Detect_Fall_Nonpositive : uz_pwmdutyfreqdetection_src_Detect_Fall_Nonpositive
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => clk_enable,
              U => Delay7_out1,
              Y => Detect_Fall_Nonpositive_out1
              );

  u_Detect_Rise_Positive : uz_pwmdutyfreqdetection_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => clk_enable,
              U => Delay7_out1,
              Y => Detect_Rise_Positive_out1
              );

  u_Reciprocal : uz_pwmdutyfreqdetection_src_Reciprocal
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => clk_enable,
              din => std_logic_vector(Sum1_out1),  -- uint32
              dout => Reciprocal_out1  -- ufix32_En31
              );

  enb_1_23_0 <= clk_enable;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb_1_23_0 = '1' THEN
        Delay7_out1 <= PWMin;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  switch_compare_1 <= '1' WHEN Detect_Fall_Nonpositive_out1 > '0' ELSE
      '0';

  Logical_Operator_out1 <= Detect_Rise_Positive_out1 OR Detect_Fall_Nonpositive_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2500000
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(1, 32);
      ELSIF enb_1_23_0 = '1' THEN
        IF Logical_Operator_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(1, 32);
        ELSIF HDL_Counter_out1 >= to_unsigned(2500000, 32) THEN 
          HDL_Counter_out1 <= to_unsigned(1, 32);
        ELSE 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_out1_1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Switch_out1_1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  
  Switch_out1 <= Switch_out1_1 WHEN switch_compare_1 = '0' ELSE
      HDL_Counter_out1;

  
  switch_compare_1_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch1_out1_1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Switch1_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  
  Switch1_out1 <= Switch1_out1_1 WHEN switch_compare_1_1 = '0' ELSE
      HDL_Counter_out1;

  Sum1_out1 <= Switch_out1 + Switch1_out1;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Delay2_out1 <= Sum1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  AXI_period <= std_logic_vector(Delay2_out1);

  AXI_hightime <= std_logic_vector(Switch_out1_1);

  AXI_lowtime <= std_logic_vector(Switch1_out1_1);

  Reciprocal_out1_unsigned <= unsigned(Reciprocal_out1);

  Product1_mul_temp <= Switch_out1 * Reciprocal_out1_unsigned;
  Product1_out1 <= Product1_mul_temp(31 DOWNTO 0);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Delay14_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  AXI_dutycyc <= std_logic_vector(Delay14_out1);

  ce_out <= clk_enable;

END rtl;

