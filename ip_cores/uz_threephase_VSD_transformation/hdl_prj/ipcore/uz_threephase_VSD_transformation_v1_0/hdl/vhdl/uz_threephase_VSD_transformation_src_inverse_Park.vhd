-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw_working\ip_cores\uz_threephase_VSD_transformation\hdl_pj\hdlsrc\uz_threephase_VSD_transformation\uz_threephase_VSD_transformation_src_inverse_Park.vhd
-- Created: 2022-10-31 09:22:46
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_threephase_VSD_transformation_src_inverse_Park
-- Source Path: uz_threephase_VSD_transformation/abc_to_dq/inverse_Park
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_threephase_VSD_transformation_src_abc_to_dq_pkg.ALL;

ENTITY uz_threephase_VSD_transformation_src_inverse_Park IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dq                                :   IN    vector_of_std_logic_vector27(0 TO 1);  -- sfix27_En18 [2]
        sin_theta_el                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        cos_theta_el                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        alpha_beta_0                      :   OUT   vector_of_std_logic_vector27(0 TO 2)  -- sfix27_En18 [3]
        );
END uz_threephase_VSD_transformation_src_inverse_Park;


ARCHITECTURE rtl OF uz_threephase_VSD_transformation_src_inverse_Park IS

  -- Signals
  SIGNAL dq_signed                        : vector_of_std_logic_vector27(0 TO 1);  -- ufix27 [2]
  SIGNAL Cosine                           : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Cosine_1                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL dq_0                             : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Demux_out1                       : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide_mul_temp                  : signed(44 DOWNTO 0);  -- sfix45_En34
  SIGNAL Divide_out1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide_out1_1                    : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Sine                             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Sine_1                           : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL dq_1                             : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Demux_out2                       : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide1_mul_temp                 : signed(44 DOWNTO 0);  -- sfix45_En34
  SIGNAL Divide1_out1                     : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Sine_2                           : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Sine_3                           : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Demux_out1_1                     : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide2_mul_temp                 : signed(44 DOWNTO 0);  -- sfix45_En34
  SIGNAL Divide2_out1                     : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide2_out1_1                   : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Cosine_2                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Cosine_3                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Demux_out2_1                     : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide3_mul_temp                 : signed(44 DOWNTO 0);  -- sfix45_En34
  SIGNAL Divide3_out1                     : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide1_out1_1                   : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Add_out1                         : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide3_out1_1                   : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Add1_out1                        : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Constant_out1                    : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Mux_out1                         : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]

BEGIN
  dq_signed <= dq;

  Cosine <= signed(cos_theta_el);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Cosine_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Cosine_1 <= Cosine;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  dq_0 <= signed(dq_signed(0));

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux_out1 <= dq_0;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Divide_mul_temp <= Cosine_1 * Demux_out1;
  Divide_out1 <= Divide_mul_temp(42 DOWNTO 16);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Divide_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Divide_out1_1 <= Divide_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Sine <= signed(sin_theta_el);

  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Sine_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Sine_1 <= Sine;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  dq_1 <= signed(dq_signed(1));

  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux_out2 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux_out2 <= dq_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Divide1_mul_temp <= Sine_1 * Demux_out2;
  Divide1_out1 <= Divide1_mul_temp(42 DOWNTO 16);

  Sine_2 <= signed(sin_theta_el);

  HwModeRegister4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Sine_3 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Sine_3 <= Sine_2;
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  HwModeRegister5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux_out1_1 <= dq_0;
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;


  Divide2_mul_temp <= Sine_3 * Demux_out1_1;
  Divide2_out1 <= Divide2_mul_temp(42 DOWNTO 16);

  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Divide2_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Divide2_out1_1 <= Divide2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Cosine_2 <= signed(cos_theta_el);

  HwModeRegister6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Cosine_3 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Cosine_3 <= Cosine_2;
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;


  HwModeRegister7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux_out2_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux_out2_1 <= dq_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister7_process;


  Divide3_mul_temp <= Cosine_3 * Demux_out2_1;
  Divide3_out1 <= Divide3_mul_temp(42 DOWNTO 16);

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Divide1_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Divide1_out1_1 <= Divide1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Add_out1 <= Divide_out1_1 - Divide1_out1_1;

  PipelineRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Divide3_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Divide3_out1_1 <= Divide3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Add1_out1 <= Divide2_out1_1 + Divide3_out1_1;

  Constant_out1 <= to_signed(16#0000000#, 27);

  Mux_out1(0) <= Add_out1;
  Mux_out1(1) <= Add1_out1;
  Mux_out1(2) <= Constant_out1;

  outputgen: FOR k IN 0 TO 2 GENERATE
    alpha_beta_0(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;

END rtl;

