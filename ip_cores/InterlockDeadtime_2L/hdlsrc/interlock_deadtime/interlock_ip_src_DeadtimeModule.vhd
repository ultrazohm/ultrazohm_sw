-- -------------------------------------------------------------
-- 
-- File Name: /home/ts/Dokumente/ultrazohm_testbench/ultrazohm_sw/ip_cores/InterlockDeadtime_2L/hdlsrc/interlock_deadtime/interlock_ip_src_DeadtimeModule.vhd
-- Created: 2020-12-14 18:30:50
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: interlock_ip_src_DeadtimeModule
-- Source Path: interlock_deadtime/interlock_deadtime/DeadtimeModule
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY interlock_ip_src_DeadtimeModule IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        In1                               :   IN    std_logic;
        DelayCycles                       :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
        gate_delay_out                    :   OUT   std_logic
        );
END interlock_ip_src_DeadtimeModule;


ARCHITECTURE rtl OF interlock_ip_src_DeadtimeModule IS

  -- Component Declarations
  COMPONENT interlock_ip_src_Detect_Fall_Nonpositive2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : interlock_ip_src_Detect_Fall_Nonpositive2
    USE ENTITY work.interlock_ip_src_Detect_Fall_Nonpositive2(rtl);

  -- Signals
  SIGNAL DelayCycles_unsigned             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Detect_Fall_Nonpositive2_out1    : std_logic;
  SIGNAL PipelineDelay1_out1              : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay2_iv                        : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Delay2_toDel                     : std_logic;
  SIGNAL Delay2_delOut                    : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator10_out1          : std_logic;

BEGIN
  -- Resets the counter at a falling edge
  u_Detect_Fall_Nonpositive2 : interlock_ip_src_Detect_Fall_Nonpositive2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              U => In1,
              Y => Detect_Fall_Nonpositive2_out1
              );

  DelayCycles_unsigned <= unsigned(DelayCycles);

  -- This delay is only used to improve timing (Pipeline) and is not related to the function of the module! 
  PipelineDelay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipelineDelay1_out1 <= '0';
      ELSIF enb = '1' THEN
        PipelineDelay1_out1 <= Detect_Fall_Nonpositive2_out1;
      END IF;
    END IF;
  END PROCESS PipelineDelay1_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' THEN
        IF PipelineDelay1_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#000#, 10);
        ELSIF In1 = '1' THEN 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#001#, 10);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Relational_Operator_relop1 <= '1' WHEN DelayCycles_unsigned = HDL_Counter_out1 ELSE
      '0';

  Delay2_iv <= '0';

  
  Delay2_toDel <= Switch_out1 WHEN PipelineDelay1_out1 = '0' ELSE
      Delay2_iv;

  Delay2_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_delOut <= '0';
      ELSIF enb = '1' THEN
        Delay2_delOut <= Delay2_toDel;
      END IF;
    END IF;
  END PROCESS Delay2_lowered_process;


  
  Delay2_out1 <= Delay2_delOut WHEN PipelineDelay1_out1 = '0' ELSE
      Delay2_iv;

  
  Switch_out1 <= Delay2_out1 WHEN Relational_Operator_relop1 = '0' ELSE
      In1;

  Logical_Operator10_out1 <= In1 AND Switch_out1;

  gate_delay_out <= Logical_Operator10_out1;

END rtl;

