// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_copyArray_float_4u_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_input_address0,
        p_input_ce0,
        p_input_q0,
        p_input_address1,
        p_input_ce1,
        p_input_q1,
        p_output_address0,
        p_output_ce0,
        p_output_we0,
        p_output_d0,
        p_output_address1,
        p_output_ce1,
        p_output_we1,
        p_output_d1,
        size
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] p_input_address0;
output   p_input_ce0;
input  [31:0] p_input_q0;
output  [5:0] p_input_address1;
output   p_input_ce1;
input  [31:0] p_input_q1;
output  [5:0] p_output_address0;
output   p_output_ce0;
output   p_output_we0;
output  [31:0] p_output_d0;
output  [5:0] p_output_address1;
output   p_output_ce1;
output   p_output_we1;
output  [31:0] p_output_d1;
input  [31:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] p_input_address0;
reg p_input_ce0;
reg[5:0] p_input_address1;
reg p_input_ce1;
reg[5:0] p_output_address0;
reg p_output_ce0;
reg p_output_we0;
reg[5:0] p_output_address1;
reg p_output_ce1;
reg p_output_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [29:0] i_reg_134;
reg   [29:0] trunc_ln_reg_214;
wire   [0:0] icmp_ln137_fu_155_p2;
reg   [0:0] icmp_ln137_reg_219;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [29:0] add_ln137_fu_160_p2;
reg   [29:0] add_ln137_reg_223;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] tmp_s_fu_170_p3;
reg   [5:0] tmp_s_reg_228;
wire   [63:0] zext_ln143_fu_178_p1;
reg   [63:0] zext_ln143_reg_234;
wire   [63:0] zext_ln143_1_fu_189_p1;
reg   [63:0] zext_ln143_1_reg_244;
wire   [63:0] zext_ln143_2_fu_199_p1;
reg   [63:0] zext_ln143_2_reg_254;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln143_3_fu_209_p1;
reg   [63:0] zext_ln143_3_reg_264;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [29:0] ap_phi_mux_i_phi_fu_138_p4;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire   [3:0] empty_fu_166_p1;
wire   [5:0] or_ln143_fu_183_p2;
wire   [5:0] or_ln143_1_fu_194_p2;
wire   [5:0] or_ln143_2_fu_204_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln137_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_134 <= add_ln137_reg_223;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_134 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln137_reg_223 <= add_ln137_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln137_reg_219 <= icmp_ln137_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln137_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_s_reg_228[5 : 2] <= tmp_s_fu_170_p3[5 : 2];
        zext_ln143_1_reg_244[5 : 2] <= zext_ln143_1_fu_189_p1[5 : 2];
        zext_ln143_reg_234[5 : 2] <= zext_ln143_fu_178_p1[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln_reg_214 <= {{size[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln137_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln143_2_reg_254[5 : 2] <= zext_ln143_2_fu_199_p1[5 : 2];
        zext_ln143_3_reg_264[5 : 2] <= zext_ln143_3_fu_209_p1[5 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln137_fu_155_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln137_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_138_p4 = add_ln137_reg_223;
    end else begin
        ap_phi_mux_i_phi_fu_138_p4 = i_reg_134;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_input_address0 = zext_ln143_3_fu_209_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_input_address0 = zext_ln143_1_fu_189_p1;
        end else begin
            p_input_address0 = 'bx;
        end
    end else begin
        p_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_input_address1 = zext_ln143_2_fu_199_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_input_address1 = zext_ln143_fu_178_p1;
        end else begin
            p_input_address1 = 'bx;
        end
    end else begin
        p_input_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_input_ce0 = 1'b1;
    end else begin
        p_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_input_ce1 = 1'b1;
    end else begin
        p_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_output_address0 = zext_ln143_3_reg_264;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_output_address0 = zext_ln143_1_reg_244;
    end else begin
        p_output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_output_address1 = zext_ln143_2_reg_254;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_output_address1 = zext_ln143_reg_234;
    end else begin
        p_output_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        p_output_ce0 = 1'b1;
    end else begin
        p_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        p_output_ce1 = 1'b1;
    end else begin
        p_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln137_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln137_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        p_output_we0 = 1'b1;
    end else begin
        p_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln137_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln137_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        p_output_we1 = 1'b1;
    end else begin
        p_output_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln137_fu_155_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln137_fu_155_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln137_fu_160_p2 = (ap_phi_mux_i_phi_fu_138_p4 + 30'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_fu_166_p1 = ap_phi_mux_i_phi_fu_138_p4[3:0];

assign icmp_ln137_fu_155_p2 = ((ap_phi_mux_i_phi_fu_138_p4 == trunc_ln_reg_214) ? 1'b1 : 1'b0);

assign or_ln143_1_fu_194_p2 = (tmp_s_reg_228 | 6'd2);

assign or_ln143_2_fu_204_p2 = (tmp_s_reg_228 | 6'd3);

assign or_ln143_fu_183_p2 = (tmp_s_fu_170_p3 | 6'd1);

assign p_output_d0 = p_input_q0;

assign p_output_d1 = p_input_q1;

assign tmp_s_fu_170_p3 = {{empty_fu_166_p1}, {2'd0}};

assign zext_ln143_1_fu_189_p1 = or_ln143_fu_183_p2;

assign zext_ln143_2_fu_199_p1 = or_ln143_1_fu_194_p2;

assign zext_ln143_3_fu_209_p1 = or_ln143_2_fu_204_p2;

assign zext_ln143_fu_178_p1 = tmp_s_fu_170_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_228[1:0] <= 2'b00;
    zext_ln143_reg_234[1:0] <= 2'b00;
    zext_ln143_reg_234[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln143_1_reg_244[1:0] <= 2'b01;
    zext_ln143_1_reg_244[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln143_2_reg_254[1:0] <= 2'b10;
    zext_ln143_2_reg_254[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln143_3_reg_264[1:0] <= 2'b11;
    zext_ln143_3_reg_264[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //MLP_copyArray_float_4u_1
