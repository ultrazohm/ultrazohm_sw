-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\Phase_voltages_per_switching_state_FCS_MPC_6Phase_PMSM\hdlsrc\Phase_voltages_per_switching_state_MPC_6Phase\Phase_voltages_per_switching_state_MPC_6Phase_src_HDL_DUT.vhd
-- Created: 2022-08-23 13:59:36
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- d_voltage_per_switching_state ce_out        1e-08
-- q_voltage_per_switching_state ce_out        1e-08
-- x_voltage_per_switching_state ce_out        1e-08
-- y_voltage_per_switching_state ce_out        1e-08
-- d_voltage_per_switching_state_AXIce_out        1e-08
-- q_voltage_per_switching_state_AXIce_out        1e-08
-- x_voltage_per_switching_state_AXIce_out        1e-08
-- y_voltage_per_switching_state_AXIce_out        1e-08
-- done                          ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Phase_voltages_per_switching_state_MPC_6Phase_src_HDL_DUT
-- Source Path: Phase_voltages_per_switching_state_MPC_6Phase/HDL_DUT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Phase_voltages_per_switching_state_MPC_6Phase_src_HDL_DUT_pkg.ALL;

ENTITY Phase_voltages_per_switching_state_MPC_6Phase_src_HDL_DUT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        theta_el                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        theta_el_offset_AXI               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        u_dc_link_voltage_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Index                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        use_AXI                           :   IN    std_logic;
        theta_el_AXI                      :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        Index_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        valid_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        d_voltage_per_switching_state     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        q_voltage_per_switching_state     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        x_voltage_per_switching_state     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        y_voltage_per_switching_state     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        d_voltage_per_switching_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        q_voltage_per_switching_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        x_voltage_per_switching_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        y_voltage_per_switching_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        done                              :   OUT   std_logic
        );
END Phase_voltages_per_switching_state_MPC_6Phase_src_HDL_DUT;


ARCHITECTURE rtl OF Phase_voltages_per_switching_state_MPC_6Phase_src_HDL_DUT IS

  -- Component Declarations
  COMPONENT Phase_voltages_per_switching_state_MPC_6Phase_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_sfix_24_En20_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_relop_single_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_relop_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Phase_voltages_per_switching_state_MPC_6Phase_src_MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          theta_el_with_offset            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          u_dc_link_voltage               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Index                           :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          d_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_single_to_sfix_24_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Phase_voltages_per_switching_state_MPC_6Phase_src_Detect_Rise_Positive1
    USE ENTITY work.Phase_voltages_per_switching_state_MPC_6Phase_src_Detect_Rise_Positive1(rtl);

  FOR ALL : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_sfix_24_En20_to_single
    USE ENTITY work.Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_sfix_24_En20_to_single(rtl);

  FOR ALL : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_sub_single
    USE ENTITY work.Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_sub_single(rtl);

  FOR ALL : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_relop_single_block
    USE ENTITY work.Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_relop_single_block(rtl);

  FOR ALL : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_relop_single
    USE ENTITY work.Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_relop_single(rtl);

  FOR ALL : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_add_single
    USE ENTITY work.Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_add_single(rtl);

  FOR ALL : Phase_voltages_per_switching_state_MPC_6Phase_src_MATLAB_Function
    USE ENTITY work.Phase_voltages_per_switching_state_MPC_6Phase_src_MATLAB_Function(rtl);

  FOR ALL : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_single_to_sfix_24_En11
    USE ENTITY work.Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_single_to_sfix_24_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 26);  -- ufix1 [27]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 26);  -- ufix1 [27]
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL End_Cycle_3                      : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(0 TO 27);  -- ufix1 [28]
  SIGNAL delayMatch7_reg_next             : std_logic_vector(0 TO 27);  -- ufix1 [28]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL theta_el_signed                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL theta_el_AXI_signed              : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_on2_out1                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay8_out1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL End_Cycle_4                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL End_Cycle_5                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch3_reg                  : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch3_reg_next             : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Delay9_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Compare_Limit_Low_out1           : std_logic;
  SIGNAL const_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Compare_Limit_High_out1          : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL delayMatch4_reg_next             : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL Compare_Limit_High_out1_1        : std_logic;
  SIGNAL delayMatch5_reg                  : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL delayMatch5_reg_next             : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL Add1_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 7);  -- ufix1 [8]
  SIGNAL Compare_Limit_Low_out1_1         : std_logic;
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_Limit_High_out1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL End_Cycle_6                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay13_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Delay10_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Index_signed                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Index_AXI_signed                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL Switch_on6_out1                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay2_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Switch_on3_out1                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay14_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL d_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL delayMatch9_reg                  : std_logic_vector(0 TO 86);  -- ufix1 [87]
  SIGNAL delayMatch9_reg_next             : std_logic_vector(0 TO 86);  -- ufix1 [87]
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_Detect_Rise_Positive1 : Phase_voltages_per_switching_state_MPC_6Phase_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay12_out1,
              Y => End_Cycle
              );

  u_Phase_voltages_per_switching_state_MPC_6Phase_HDL_DUT_nfp_convert_sfix_24_En20_to_single : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_sfix_24_En20_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay8_out1),  -- sfix24_En20
              nfp_out => End_Cycle_4  -- single
              );

  u_nfp_sub_comp : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => End_Cycle_5,  -- single
              nfp_in2 => Delay9_out1_1,  -- single
              nfp_out => Add1_out1  -- single
              );

  u_nfp_relop_comp : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_relop_single_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add1_out1,  -- single
              nfp_in2 => const,  -- single
              nfp_out1 => Compare_Limit_Low_out1
              );

  u_nfp_relop_comp_1 : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add1_out1,  -- single
              nfp_in2 => const_1,  -- single
              nfp_out1 => Compare_Limit_High_out1
              );

  u_nfp_sub_comp_1 : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add1_out1,  -- single
              nfp_in2 => Constant_out1,  -- single
              nfp_out => Add2_out1  -- single
              );

  u_nfp_add_comp : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add1_out1,  -- single
              nfp_in2 => Constant1_out1,  -- single
              nfp_out => Add3_out1  -- single
              );

  u_MATLAB_Function : Phase_voltages_per_switching_state_MPC_6Phase_src_MATLAB_Function
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              theta_el_with_offset => Switch_on13_out1,  -- single
              u_dc_link_voltage => Switch_on1_out1,  -- single
              Index => std_logic_vector(Switch_on3_out1),  -- int32
              d_voltage_per_switching_state => d_voltage_per_switching_state_1,  -- single
              q_voltage_per_switching_state => q_voltage_per_switching_state_1,  -- single
              x_voltage_per_switching_state => x_voltage_per_switching_state_1,  -- single
              y_voltage_per_switching_state => y_voltage_per_switching_state_1  -- single
              );

  u_Phase_voltages_per_switching_state_MPC_6Phase_HDL_DUT_nfp_convert_single_to_sfix_24_En11 : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_1,  -- single
              nfp_out => Data_Type_Conversion10_out1  -- sfix24_En11
              );

  u_Phase_voltages_per_switching_state_MPC_6Phase_HDL_DUT_nfp_convert_single_to_sfix_24_En11_1 : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_1,  -- single
              nfp_out => Data_Type_Conversion1_out1  -- sfix24_En11
              );

  u_Phase_voltages_per_switching_state_MPC_6Phase_HDL_DUT_nfp_convert_single_to_sfix_24_En11_2 : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_1,  -- single
              nfp_out => Data_Type_Conversion2_out1  -- sfix24_En11
              );

  u_Phase_voltages_per_switching_state_MPC_6Phase_HDL_DUT_nfp_convert_single_to_sfix_24_En11_3 : Phase_voltages_per_switching_state_MPC_6Phase_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_1,  -- single
              nfp_out => Data_Type_Conversion3_out1  -- sfix24_En11
              );

  enb <= clk_enable;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        End_Cycle_1 <= '0';
      ELSIF enb = '1' THEN
        End_Cycle_1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= '0';
        reduced_reg(1) <= '0';
        reduced_reg(2) <= '0';
        reduced_reg(3) <= '0';
        reduced_reg(4) <= '0';
        reduced_reg(5) <= '0';
        reduced_reg(6) <= '0';
        reduced_reg(7) <= '0';
        reduced_reg(8) <= '0';
        reduced_reg(9) <= '0';
        reduced_reg(10) <= '0';
        reduced_reg(11) <= '0';
        reduced_reg(12) <= '0';
        reduced_reg(13) <= '0';
        reduced_reg(14) <= '0';
        reduced_reg(15) <= '0';
        reduced_reg(16) <= '0';
        reduced_reg(17) <= '0';
        reduced_reg(18) <= '0';
        reduced_reg(19) <= '0';
        reduced_reg(20) <= '0';
        reduced_reg(21) <= '0';
        reduced_reg(22) <= '0';
        reduced_reg(23) <= '0';
        reduced_reg(24) <= '0';
        reduced_reg(25) <= '0';
        reduced_reg(26) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
        reduced_reg(6) <= reduced_reg_next(6);
        reduced_reg(7) <= reduced_reg_next(7);
        reduced_reg(8) <= reduced_reg_next(8);
        reduced_reg(9) <= reduced_reg_next(9);
        reduced_reg(10) <= reduced_reg_next(10);
        reduced_reg(11) <= reduced_reg_next(11);
        reduced_reg(12) <= reduced_reg_next(12);
        reduced_reg(13) <= reduced_reg_next(13);
        reduced_reg(14) <= reduced_reg_next(14);
        reduced_reg(15) <= reduced_reg_next(15);
        reduced_reg(16) <= reduced_reg_next(16);
        reduced_reg(17) <= reduced_reg_next(17);
        reduced_reg(18) <= reduced_reg_next(18);
        reduced_reg(19) <= reduced_reg_next(19);
        reduced_reg(20) <= reduced_reg_next(20);
        reduced_reg(21) <= reduced_reg_next(21);
        reduced_reg(22) <= reduced_reg_next(22);
        reduced_reg(23) <= reduced_reg_next(23);
        reduced_reg(24) <= reduced_reg_next(24);
        reduced_reg(25) <= reduced_reg_next(25);
        reduced_reg(26) <= reduced_reg_next(26);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  End_Cycle_2 <= reduced_reg(26);
  reduced_reg_next(0) <= End_Cycle_1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);
  reduced_reg_next(6) <= reduced_reg(5);
  reduced_reg_next(7) <= reduced_reg(6);
  reduced_reg_next(8) <= reduced_reg(7);
  reduced_reg_next(9) <= reduced_reg(8);
  reduced_reg_next(10) <= reduced_reg(9);
  reduced_reg_next(11) <= reduced_reg(10);
  reduced_reg_next(12) <= reduced_reg(11);
  reduced_reg_next(13) <= reduced_reg(12);
  reduced_reg_next(14) <= reduced_reg(13);
  reduced_reg_next(15) <= reduced_reg(14);
  reduced_reg_next(16) <= reduced_reg(15);
  reduced_reg_next(17) <= reduced_reg(16);
  reduced_reg_next(18) <= reduced_reg(17);
  reduced_reg_next(19) <= reduced_reg(18);
  reduced_reg_next(20) <= reduced_reg(19);
  reduced_reg_next(21) <= reduced_reg(20);
  reduced_reg_next(22) <= reduced_reg(21);
  reduced_reg_next(23) <= reduced_reg(22);
  reduced_reg_next(24) <= reduced_reg(23);
  reduced_reg_next(25) <= reduced_reg(24);
  reduced_reg_next(26) <= reduced_reg(25);

  End_Cycle_3 <= End_Cycle_2;

  
  switch_compare_1 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch7_reg(0) <= '0';
        delayMatch7_reg(1) <= '0';
        delayMatch7_reg(2) <= '0';
        delayMatch7_reg(3) <= '0';
        delayMatch7_reg(4) <= '0';
        delayMatch7_reg(5) <= '0';
        delayMatch7_reg(6) <= '0';
        delayMatch7_reg(7) <= '0';
        delayMatch7_reg(8) <= '0';
        delayMatch7_reg(9) <= '0';
        delayMatch7_reg(10) <= '0';
        delayMatch7_reg(11) <= '0';
        delayMatch7_reg(12) <= '0';
        delayMatch7_reg(13) <= '0';
        delayMatch7_reg(14) <= '0';
        delayMatch7_reg(15) <= '0';
        delayMatch7_reg(16) <= '0';
        delayMatch7_reg(17) <= '0';
        delayMatch7_reg(18) <= '0';
        delayMatch7_reg(19) <= '0';
        delayMatch7_reg(20) <= '0';
        delayMatch7_reg(21) <= '0';
        delayMatch7_reg(22) <= '0';
        delayMatch7_reg(23) <= '0';
        delayMatch7_reg(24) <= '0';
        delayMatch7_reg(25) <= '0';
        delayMatch7_reg(26) <= '0';
        delayMatch7_reg(27) <= '0';
      ELSIF enb = '1' THEN
        delayMatch7_reg(0) <= delayMatch7_reg_next(0);
        delayMatch7_reg(1) <= delayMatch7_reg_next(1);
        delayMatch7_reg(2) <= delayMatch7_reg_next(2);
        delayMatch7_reg(3) <= delayMatch7_reg_next(3);
        delayMatch7_reg(4) <= delayMatch7_reg_next(4);
        delayMatch7_reg(5) <= delayMatch7_reg_next(5);
        delayMatch7_reg(6) <= delayMatch7_reg_next(6);
        delayMatch7_reg(7) <= delayMatch7_reg_next(7);
        delayMatch7_reg(8) <= delayMatch7_reg_next(8);
        delayMatch7_reg(9) <= delayMatch7_reg_next(9);
        delayMatch7_reg(10) <= delayMatch7_reg_next(10);
        delayMatch7_reg(11) <= delayMatch7_reg_next(11);
        delayMatch7_reg(12) <= delayMatch7_reg_next(12);
        delayMatch7_reg(13) <= delayMatch7_reg_next(13);
        delayMatch7_reg(14) <= delayMatch7_reg_next(14);
        delayMatch7_reg(15) <= delayMatch7_reg_next(15);
        delayMatch7_reg(16) <= delayMatch7_reg_next(16);
        delayMatch7_reg(17) <= delayMatch7_reg_next(17);
        delayMatch7_reg(18) <= delayMatch7_reg_next(18);
        delayMatch7_reg(19) <= delayMatch7_reg_next(19);
        delayMatch7_reg(20) <= delayMatch7_reg_next(20);
        delayMatch7_reg(21) <= delayMatch7_reg_next(21);
        delayMatch7_reg(22) <= delayMatch7_reg_next(22);
        delayMatch7_reg(23) <= delayMatch7_reg_next(23);
        delayMatch7_reg(24) <= delayMatch7_reg_next(24);
        delayMatch7_reg(25) <= delayMatch7_reg_next(25);
        delayMatch7_reg(26) <= delayMatch7_reg_next(26);
        delayMatch7_reg(27) <= delayMatch7_reg_next(27);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  stateControl_2 <= delayMatch7_reg(27);
  delayMatch7_reg_next(0) <= stateControl_1;
  delayMatch7_reg_next(1) <= delayMatch7_reg(0);
  delayMatch7_reg_next(2) <= delayMatch7_reg(1);
  delayMatch7_reg_next(3) <= delayMatch7_reg(2);
  delayMatch7_reg_next(4) <= delayMatch7_reg(3);
  delayMatch7_reg_next(5) <= delayMatch7_reg(4);
  delayMatch7_reg_next(6) <= delayMatch7_reg(5);
  delayMatch7_reg_next(7) <= delayMatch7_reg(6);
  delayMatch7_reg_next(8) <= delayMatch7_reg(7);
  delayMatch7_reg_next(9) <= delayMatch7_reg(8);
  delayMatch7_reg_next(10) <= delayMatch7_reg(9);
  delayMatch7_reg_next(11) <= delayMatch7_reg(10);
  delayMatch7_reg_next(12) <= delayMatch7_reg(11);
  delayMatch7_reg_next(13) <= delayMatch7_reg(12);
  delayMatch7_reg_next(14) <= delayMatch7_reg(13);
  delayMatch7_reg_next(15) <= delayMatch7_reg(14);
  delayMatch7_reg_next(16) <= delayMatch7_reg(15);
  delayMatch7_reg_next(17) <= delayMatch7_reg(16);
  delayMatch7_reg_next(18) <= delayMatch7_reg(17);
  delayMatch7_reg_next(19) <= delayMatch7_reg(18);
  delayMatch7_reg_next(20) <= delayMatch7_reg(19);
  delayMatch7_reg_next(21) <= delayMatch7_reg(20);
  delayMatch7_reg_next(22) <= delayMatch7_reg(21);
  delayMatch7_reg_next(23) <= delayMatch7_reg(22);
  delayMatch7_reg_next(24) <= delayMatch7_reg(23);
  delayMatch7_reg_next(25) <= delayMatch7_reg(24);
  delayMatch7_reg_next(26) <= delayMatch7_reg(25);
  delayMatch7_reg_next(27) <= delayMatch7_reg(26);

  
  switch_compare_1_1 <= '1' WHEN use_AXI = '1' ELSE
      '0';

  theta_el_signed <= signed(theta_el);

  theta_el_AXI_signed <= signed(theta_el_AXI);

  
  Switch_on2_out1 <= theta_el_signed WHEN switch_compare_1_1 = '0' ELSE
      theta_el_AXI_signed;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  End_Cycle_5 <= End_Cycle_4;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1 <= theta_el_offset_AXI;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg(0) <= X"00000000";
        delayMatch3_reg(1) <= X"00000000";
        delayMatch3_reg(2) <= X"00000000";
        delayMatch3_reg(3) <= X"00000000";
        delayMatch3_reg(4) <= X"00000000";
        delayMatch3_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
        delayMatch3_reg(3) <= delayMatch3_reg_next(3);
        delayMatch3_reg(4) <= delayMatch3_reg_next(4);
        delayMatch3_reg(5) <= delayMatch3_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Delay9_out1_1 <= delayMatch3_reg(5);
  delayMatch3_reg_next(0) <= Delay9_out1;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);
  delayMatch3_reg_next(3) <= delayMatch3_reg(2);
  delayMatch3_reg_next(4) <= delayMatch3_reg(3);
  delayMatch3_reg_next(5) <= delayMatch3_reg(4);

  const <= X"00000000";

  const_1 <= X"40c90fdb";

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg(0) <= '0';
        delayMatch4_reg(1) <= '0';
        delayMatch4_reg(2) <= '0';
        delayMatch4_reg(3) <= '0';
        delayMatch4_reg(4) <= '0';
        delayMatch4_reg(5) <= '0';
        delayMatch4_reg(6) <= '0';
        delayMatch4_reg(7) <= '0';
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
        delayMatch4_reg(2) <= delayMatch4_reg_next(2);
        delayMatch4_reg(3) <= delayMatch4_reg_next(3);
        delayMatch4_reg(4) <= delayMatch4_reg_next(4);
        delayMatch4_reg(5) <= delayMatch4_reg_next(5);
        delayMatch4_reg(6) <= delayMatch4_reg_next(6);
        delayMatch4_reg(7) <= delayMatch4_reg_next(7);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Compare_Limit_High_out1_1 <= delayMatch4_reg(7);
  delayMatch4_reg_next(0) <= Compare_Limit_High_out1;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);
  delayMatch4_reg_next(2) <= delayMatch4_reg(1);
  delayMatch4_reg_next(3) <= delayMatch4_reg(2);
  delayMatch4_reg_next(4) <= delayMatch4_reg(3);
  delayMatch4_reg_next(5) <= delayMatch4_reg(4);
  delayMatch4_reg_next(6) <= delayMatch4_reg(5);
  delayMatch4_reg_next(7) <= delayMatch4_reg(6);

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch5_reg(0) <= X"00000000";
        delayMatch5_reg(1) <= X"00000000";
        delayMatch5_reg(2) <= X"00000000";
        delayMatch5_reg(3) <= X"00000000";
        delayMatch5_reg(4) <= X"00000000";
        delayMatch5_reg(5) <= X"00000000";
        delayMatch5_reg(6) <= X"00000000";
        delayMatch5_reg(7) <= X"00000000";
        delayMatch5_reg(8) <= X"00000000";
        delayMatch5_reg(9) <= X"00000000";
        delayMatch5_reg(10) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= delayMatch5_reg_next(0);
        delayMatch5_reg(1) <= delayMatch5_reg_next(1);
        delayMatch5_reg(2) <= delayMatch5_reg_next(2);
        delayMatch5_reg(3) <= delayMatch5_reg_next(3);
        delayMatch5_reg(4) <= delayMatch5_reg_next(4);
        delayMatch5_reg(5) <= delayMatch5_reg_next(5);
        delayMatch5_reg(6) <= delayMatch5_reg_next(6);
        delayMatch5_reg(7) <= delayMatch5_reg_next(7);
        delayMatch5_reg(8) <= delayMatch5_reg_next(8);
        delayMatch5_reg(9) <= delayMatch5_reg_next(9);
        delayMatch5_reg(10) <= delayMatch5_reg_next(10);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  Add1_out1_1 <= delayMatch5_reg(10);
  delayMatch5_reg_next(0) <= Add1_out1;
  delayMatch5_reg_next(1) <= delayMatch5_reg(0);
  delayMatch5_reg_next(2) <= delayMatch5_reg(1);
  delayMatch5_reg_next(3) <= delayMatch5_reg(2);
  delayMatch5_reg_next(4) <= delayMatch5_reg(3);
  delayMatch5_reg_next(5) <= delayMatch5_reg(4);
  delayMatch5_reg_next(6) <= delayMatch5_reg(5);
  delayMatch5_reg_next(7) <= delayMatch5_reg(6);
  delayMatch5_reg_next(8) <= delayMatch5_reg(7);
  delayMatch5_reg_next(9) <= delayMatch5_reg(8);
  delayMatch5_reg_next(10) <= delayMatch5_reg(9);

  Constant_out1 <= X"40c90fdb";

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= '0';
        delayMatch6_reg(1) <= '0';
        delayMatch6_reg(2) <= '0';
        delayMatch6_reg(3) <= '0';
        delayMatch6_reg(4) <= '0';
        delayMatch6_reg(5) <= '0';
        delayMatch6_reg(6) <= '0';
        delayMatch6_reg(7) <= '0';
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
        delayMatch6_reg(6) <= delayMatch6_reg_next(6);
        delayMatch6_reg(7) <= delayMatch6_reg_next(7);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  Compare_Limit_Low_out1_1 <= delayMatch6_reg(7);
  delayMatch6_reg_next(0) <= Compare_Limit_Low_out1;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);
  delayMatch6_reg_next(5) <= delayMatch6_reg(4);
  delayMatch6_reg_next(6) <= delayMatch6_reg(5);
  delayMatch6_reg_next(7) <= delayMatch6_reg(6);

  
  Switch_Limit_High_out1 <= Add1_out1_1 WHEN Compare_Limit_High_out1_1 = '0' ELSE
      Add2_out1;

  Constant1_out1 <= X"40c90fdb";

  
  End_Cycle_6 <= Switch_Limit_High_out1 WHEN Compare_Limit_Low_out1_1 = '0' ELSE
      Add3_out1;

  
  Switch_on13_out1_1 <= Delay13_out1 WHEN stateControl_2 = '0' ELSE
      Switch_on13_out1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch_on13_out1_1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch_on13_out1 <= Delay13_out1 WHEN switch_compare_1 = '0' ELSE
      End_Cycle_6;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1 <= u_dc_link_voltage_AXI;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay10_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  
  switch_compare_1_4 <= '1' WHEN use_AXI = '1' ELSE
      '0';

  Index_signed <= signed(Index);

  Index_AXI_signed <= signed(Index_AXI);

  
  Switch_on6_out1 <= Index_signed WHEN switch_compare_1_4 = '0' ELSE
      Index_AXI_signed;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on6_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch_on3_out1 <= Delay14_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay2_out1;

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch9_reg(0) <= '0';
        delayMatch9_reg(1) <= '0';
        delayMatch9_reg(2) <= '0';
        delayMatch9_reg(3) <= '0';
        delayMatch9_reg(4) <= '0';
        delayMatch9_reg(5) <= '0';
        delayMatch9_reg(6) <= '0';
        delayMatch9_reg(7) <= '0';
        delayMatch9_reg(8) <= '0';
        delayMatch9_reg(9) <= '0';
        delayMatch9_reg(10) <= '0';
        delayMatch9_reg(11) <= '0';
        delayMatch9_reg(12) <= '0';
        delayMatch9_reg(13) <= '0';
        delayMatch9_reg(14) <= '0';
        delayMatch9_reg(15) <= '0';
        delayMatch9_reg(16) <= '0';
        delayMatch9_reg(17) <= '0';
        delayMatch9_reg(18) <= '0';
        delayMatch9_reg(19) <= '0';
        delayMatch9_reg(20) <= '0';
        delayMatch9_reg(21) <= '0';
        delayMatch9_reg(22) <= '0';
        delayMatch9_reg(23) <= '0';
        delayMatch9_reg(24) <= '0';
        delayMatch9_reg(25) <= '0';
        delayMatch9_reg(26) <= '0';
        delayMatch9_reg(27) <= '0';
        delayMatch9_reg(28) <= '0';
        delayMatch9_reg(29) <= '0';
        delayMatch9_reg(30) <= '0';
        delayMatch9_reg(31) <= '0';
        delayMatch9_reg(32) <= '0';
        delayMatch9_reg(33) <= '0';
        delayMatch9_reg(34) <= '0';
        delayMatch9_reg(35) <= '0';
        delayMatch9_reg(36) <= '0';
        delayMatch9_reg(37) <= '0';
        delayMatch9_reg(38) <= '0';
        delayMatch9_reg(39) <= '0';
        delayMatch9_reg(40) <= '0';
        delayMatch9_reg(41) <= '0';
        delayMatch9_reg(42) <= '0';
        delayMatch9_reg(43) <= '0';
        delayMatch9_reg(44) <= '0';
        delayMatch9_reg(45) <= '0';
        delayMatch9_reg(46) <= '0';
        delayMatch9_reg(47) <= '0';
        delayMatch9_reg(48) <= '0';
        delayMatch9_reg(49) <= '0';
        delayMatch9_reg(50) <= '0';
        delayMatch9_reg(51) <= '0';
        delayMatch9_reg(52) <= '0';
        delayMatch9_reg(53) <= '0';
        delayMatch9_reg(54) <= '0';
        delayMatch9_reg(55) <= '0';
        delayMatch9_reg(56) <= '0';
        delayMatch9_reg(57) <= '0';
        delayMatch9_reg(58) <= '0';
        delayMatch9_reg(59) <= '0';
        delayMatch9_reg(60) <= '0';
        delayMatch9_reg(61) <= '0';
        delayMatch9_reg(62) <= '0';
        delayMatch9_reg(63) <= '0';
        delayMatch9_reg(64) <= '0';
        delayMatch9_reg(65) <= '0';
        delayMatch9_reg(66) <= '0';
        delayMatch9_reg(67) <= '0';
        delayMatch9_reg(68) <= '0';
        delayMatch9_reg(69) <= '0';
        delayMatch9_reg(70) <= '0';
        delayMatch9_reg(71) <= '0';
        delayMatch9_reg(72) <= '0';
        delayMatch9_reg(73) <= '0';
        delayMatch9_reg(74) <= '0';
        delayMatch9_reg(75) <= '0';
        delayMatch9_reg(76) <= '0';
        delayMatch9_reg(77) <= '0';
        delayMatch9_reg(78) <= '0';
        delayMatch9_reg(79) <= '0';
        delayMatch9_reg(80) <= '0';
        delayMatch9_reg(81) <= '0';
        delayMatch9_reg(82) <= '0';
        delayMatch9_reg(83) <= '0';
        delayMatch9_reg(84) <= '0';
        delayMatch9_reg(85) <= '0';
        delayMatch9_reg(86) <= '0';
      ELSIF enb = '1' THEN
        delayMatch9_reg(0) <= delayMatch9_reg_next(0);
        delayMatch9_reg(1) <= delayMatch9_reg_next(1);
        delayMatch9_reg(2) <= delayMatch9_reg_next(2);
        delayMatch9_reg(3) <= delayMatch9_reg_next(3);
        delayMatch9_reg(4) <= delayMatch9_reg_next(4);
        delayMatch9_reg(5) <= delayMatch9_reg_next(5);
        delayMatch9_reg(6) <= delayMatch9_reg_next(6);
        delayMatch9_reg(7) <= delayMatch9_reg_next(7);
        delayMatch9_reg(8) <= delayMatch9_reg_next(8);
        delayMatch9_reg(9) <= delayMatch9_reg_next(9);
        delayMatch9_reg(10) <= delayMatch9_reg_next(10);
        delayMatch9_reg(11) <= delayMatch9_reg_next(11);
        delayMatch9_reg(12) <= delayMatch9_reg_next(12);
        delayMatch9_reg(13) <= delayMatch9_reg_next(13);
        delayMatch9_reg(14) <= delayMatch9_reg_next(14);
        delayMatch9_reg(15) <= delayMatch9_reg_next(15);
        delayMatch9_reg(16) <= delayMatch9_reg_next(16);
        delayMatch9_reg(17) <= delayMatch9_reg_next(17);
        delayMatch9_reg(18) <= delayMatch9_reg_next(18);
        delayMatch9_reg(19) <= delayMatch9_reg_next(19);
        delayMatch9_reg(20) <= delayMatch9_reg_next(20);
        delayMatch9_reg(21) <= delayMatch9_reg_next(21);
        delayMatch9_reg(22) <= delayMatch9_reg_next(22);
        delayMatch9_reg(23) <= delayMatch9_reg_next(23);
        delayMatch9_reg(24) <= delayMatch9_reg_next(24);
        delayMatch9_reg(25) <= delayMatch9_reg_next(25);
        delayMatch9_reg(26) <= delayMatch9_reg_next(26);
        delayMatch9_reg(27) <= delayMatch9_reg_next(27);
        delayMatch9_reg(28) <= delayMatch9_reg_next(28);
        delayMatch9_reg(29) <= delayMatch9_reg_next(29);
        delayMatch9_reg(30) <= delayMatch9_reg_next(30);
        delayMatch9_reg(31) <= delayMatch9_reg_next(31);
        delayMatch9_reg(32) <= delayMatch9_reg_next(32);
        delayMatch9_reg(33) <= delayMatch9_reg_next(33);
        delayMatch9_reg(34) <= delayMatch9_reg_next(34);
        delayMatch9_reg(35) <= delayMatch9_reg_next(35);
        delayMatch9_reg(36) <= delayMatch9_reg_next(36);
        delayMatch9_reg(37) <= delayMatch9_reg_next(37);
        delayMatch9_reg(38) <= delayMatch9_reg_next(38);
        delayMatch9_reg(39) <= delayMatch9_reg_next(39);
        delayMatch9_reg(40) <= delayMatch9_reg_next(40);
        delayMatch9_reg(41) <= delayMatch9_reg_next(41);
        delayMatch9_reg(42) <= delayMatch9_reg_next(42);
        delayMatch9_reg(43) <= delayMatch9_reg_next(43);
        delayMatch9_reg(44) <= delayMatch9_reg_next(44);
        delayMatch9_reg(45) <= delayMatch9_reg_next(45);
        delayMatch9_reg(46) <= delayMatch9_reg_next(46);
        delayMatch9_reg(47) <= delayMatch9_reg_next(47);
        delayMatch9_reg(48) <= delayMatch9_reg_next(48);
        delayMatch9_reg(49) <= delayMatch9_reg_next(49);
        delayMatch9_reg(50) <= delayMatch9_reg_next(50);
        delayMatch9_reg(51) <= delayMatch9_reg_next(51);
        delayMatch9_reg(52) <= delayMatch9_reg_next(52);
        delayMatch9_reg(53) <= delayMatch9_reg_next(53);
        delayMatch9_reg(54) <= delayMatch9_reg_next(54);
        delayMatch9_reg(55) <= delayMatch9_reg_next(55);
        delayMatch9_reg(56) <= delayMatch9_reg_next(56);
        delayMatch9_reg(57) <= delayMatch9_reg_next(57);
        delayMatch9_reg(58) <= delayMatch9_reg_next(58);
        delayMatch9_reg(59) <= delayMatch9_reg_next(59);
        delayMatch9_reg(60) <= delayMatch9_reg_next(60);
        delayMatch9_reg(61) <= delayMatch9_reg_next(61);
        delayMatch9_reg(62) <= delayMatch9_reg_next(62);
        delayMatch9_reg(63) <= delayMatch9_reg_next(63);
        delayMatch9_reg(64) <= delayMatch9_reg_next(64);
        delayMatch9_reg(65) <= delayMatch9_reg_next(65);
        delayMatch9_reg(66) <= delayMatch9_reg_next(66);
        delayMatch9_reg(67) <= delayMatch9_reg_next(67);
        delayMatch9_reg(68) <= delayMatch9_reg_next(68);
        delayMatch9_reg(69) <= delayMatch9_reg_next(69);
        delayMatch9_reg(70) <= delayMatch9_reg_next(70);
        delayMatch9_reg(71) <= delayMatch9_reg_next(71);
        delayMatch9_reg(72) <= delayMatch9_reg_next(72);
        delayMatch9_reg(73) <= delayMatch9_reg_next(73);
        delayMatch9_reg(74) <= delayMatch9_reg_next(74);
        delayMatch9_reg(75) <= delayMatch9_reg_next(75);
        delayMatch9_reg(76) <= delayMatch9_reg_next(76);
        delayMatch9_reg(77) <= delayMatch9_reg_next(77);
        delayMatch9_reg(78) <= delayMatch9_reg_next(78);
        delayMatch9_reg(79) <= delayMatch9_reg_next(79);
        delayMatch9_reg(80) <= delayMatch9_reg_next(80);
        delayMatch9_reg(81) <= delayMatch9_reg_next(81);
        delayMatch9_reg(82) <= delayMatch9_reg_next(82);
        delayMatch9_reg(83) <= delayMatch9_reg_next(83);
        delayMatch9_reg(84) <= delayMatch9_reg_next(84);
        delayMatch9_reg(85) <= delayMatch9_reg_next(85);
        delayMatch9_reg(86) <= delayMatch9_reg_next(86);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  Delay3_out1 <= delayMatch9_reg(86);
  delayMatch9_reg_next(0) <= End_Cycle_1;
  delayMatch9_reg_next(1) <= delayMatch9_reg(0);
  delayMatch9_reg_next(2) <= delayMatch9_reg(1);
  delayMatch9_reg_next(3) <= delayMatch9_reg(2);
  delayMatch9_reg_next(4) <= delayMatch9_reg(3);
  delayMatch9_reg_next(5) <= delayMatch9_reg(4);
  delayMatch9_reg_next(6) <= delayMatch9_reg(5);
  delayMatch9_reg_next(7) <= delayMatch9_reg(6);
  delayMatch9_reg_next(8) <= delayMatch9_reg(7);
  delayMatch9_reg_next(9) <= delayMatch9_reg(8);
  delayMatch9_reg_next(10) <= delayMatch9_reg(9);
  delayMatch9_reg_next(11) <= delayMatch9_reg(10);
  delayMatch9_reg_next(12) <= delayMatch9_reg(11);
  delayMatch9_reg_next(13) <= delayMatch9_reg(12);
  delayMatch9_reg_next(14) <= delayMatch9_reg(13);
  delayMatch9_reg_next(15) <= delayMatch9_reg(14);
  delayMatch9_reg_next(16) <= delayMatch9_reg(15);
  delayMatch9_reg_next(17) <= delayMatch9_reg(16);
  delayMatch9_reg_next(18) <= delayMatch9_reg(17);
  delayMatch9_reg_next(19) <= delayMatch9_reg(18);
  delayMatch9_reg_next(20) <= delayMatch9_reg(19);
  delayMatch9_reg_next(21) <= delayMatch9_reg(20);
  delayMatch9_reg_next(22) <= delayMatch9_reg(21);
  delayMatch9_reg_next(23) <= delayMatch9_reg(22);
  delayMatch9_reg_next(24) <= delayMatch9_reg(23);
  delayMatch9_reg_next(25) <= delayMatch9_reg(24);
  delayMatch9_reg_next(26) <= delayMatch9_reg(25);
  delayMatch9_reg_next(27) <= delayMatch9_reg(26);
  delayMatch9_reg_next(28) <= delayMatch9_reg(27);
  delayMatch9_reg_next(29) <= delayMatch9_reg(28);
  delayMatch9_reg_next(30) <= delayMatch9_reg(29);
  delayMatch9_reg_next(31) <= delayMatch9_reg(30);
  delayMatch9_reg_next(32) <= delayMatch9_reg(31);
  delayMatch9_reg_next(33) <= delayMatch9_reg(32);
  delayMatch9_reg_next(34) <= delayMatch9_reg(33);
  delayMatch9_reg_next(35) <= delayMatch9_reg(34);
  delayMatch9_reg_next(36) <= delayMatch9_reg(35);
  delayMatch9_reg_next(37) <= delayMatch9_reg(36);
  delayMatch9_reg_next(38) <= delayMatch9_reg(37);
  delayMatch9_reg_next(39) <= delayMatch9_reg(38);
  delayMatch9_reg_next(40) <= delayMatch9_reg(39);
  delayMatch9_reg_next(41) <= delayMatch9_reg(40);
  delayMatch9_reg_next(42) <= delayMatch9_reg(41);
  delayMatch9_reg_next(43) <= delayMatch9_reg(42);
  delayMatch9_reg_next(44) <= delayMatch9_reg(43);
  delayMatch9_reg_next(45) <= delayMatch9_reg(44);
  delayMatch9_reg_next(46) <= delayMatch9_reg(45);
  delayMatch9_reg_next(47) <= delayMatch9_reg(46);
  delayMatch9_reg_next(48) <= delayMatch9_reg(47);
  delayMatch9_reg_next(49) <= delayMatch9_reg(48);
  delayMatch9_reg_next(50) <= delayMatch9_reg(49);
  delayMatch9_reg_next(51) <= delayMatch9_reg(50);
  delayMatch9_reg_next(52) <= delayMatch9_reg(51);
  delayMatch9_reg_next(53) <= delayMatch9_reg(52);
  delayMatch9_reg_next(54) <= delayMatch9_reg(53);
  delayMatch9_reg_next(55) <= delayMatch9_reg(54);
  delayMatch9_reg_next(56) <= delayMatch9_reg(55);
  delayMatch9_reg_next(57) <= delayMatch9_reg(56);
  delayMatch9_reg_next(58) <= delayMatch9_reg(57);
  delayMatch9_reg_next(59) <= delayMatch9_reg(58);
  delayMatch9_reg_next(60) <= delayMatch9_reg(59);
  delayMatch9_reg_next(61) <= delayMatch9_reg(60);
  delayMatch9_reg_next(62) <= delayMatch9_reg(61);
  delayMatch9_reg_next(63) <= delayMatch9_reg(62);
  delayMatch9_reg_next(64) <= delayMatch9_reg(63);
  delayMatch9_reg_next(65) <= delayMatch9_reg(64);
  delayMatch9_reg_next(66) <= delayMatch9_reg(65);
  delayMatch9_reg_next(67) <= delayMatch9_reg(66);
  delayMatch9_reg_next(68) <= delayMatch9_reg(67);
  delayMatch9_reg_next(69) <= delayMatch9_reg(68);
  delayMatch9_reg_next(70) <= delayMatch9_reg(69);
  delayMatch9_reg_next(71) <= delayMatch9_reg(70);
  delayMatch9_reg_next(72) <= delayMatch9_reg(71);
  delayMatch9_reg_next(73) <= delayMatch9_reg(72);
  delayMatch9_reg_next(74) <= delayMatch9_reg(73);
  delayMatch9_reg_next(75) <= delayMatch9_reg(74);
  delayMatch9_reg_next(76) <= delayMatch9_reg(75);
  delayMatch9_reg_next(77) <= delayMatch9_reg(76);
  delayMatch9_reg_next(78) <= delayMatch9_reg(77);
  delayMatch9_reg_next(79) <= delayMatch9_reg(78);
  delayMatch9_reg_next(80) <= delayMatch9_reg(79);
  delayMatch9_reg_next(81) <= delayMatch9_reg(80);
  delayMatch9_reg_next(82) <= delayMatch9_reg(81);
  delayMatch9_reg_next(83) <= delayMatch9_reg(82);
  delayMatch9_reg_next(84) <= delayMatch9_reg(83);
  delayMatch9_reg_next(85) <= delayMatch9_reg(84);
  delayMatch9_reg_next(86) <= delayMatch9_reg(85);

  done <= Delay3_out1;

  ce_out <= clk_enable;

  d_voltage_per_switching_state <= Data_Type_Conversion10_out1;

  q_voltage_per_switching_state <= Data_Type_Conversion1_out1;

  x_voltage_per_switching_state <= Data_Type_Conversion2_out1;

  y_voltage_per_switching_state <= Data_Type_Conversion3_out1;

  d_voltage_per_switching_state_AXI <= Data_Type_Conversion10_out1;

  q_voltage_per_switching_state_AXI <= Data_Type_Conversion1_out1;

  x_voltage_per_switching_state_AXI <= Data_Type_Conversion2_out1;

  y_voltage_per_switching_state_AXI <= Data_Type_Conversion3_out1;

END rtl;

