-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MultiLayerPerceptronDecoupled_gemv_float_3u_unsigned_int_s is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    l_strWeights5_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    l_strWeights5_empty_n : IN STD_LOGIC;
    l_strWeights5_read : OUT STD_LOGIC;
    l_strInput6_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    l_strInput6_empty_n : IN STD_LOGIC;
    l_strInput6_read : OUT STD_LOGIC;
    l_strBias9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    l_strBias9_empty_n : IN STD_LOGIC;
    l_strBias9_read : OUT STD_LOGIC;
    l_strMv8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_strMv8_full_n : IN STD_LOGIC;
    l_strMv8_write : OUT STD_LOGIC;
    p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_m_empty_n : IN STD_LOGIC;
    p_m_read : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_m_out_full_n : IN STD_LOGIC;
    p_m_out_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of MultiLayerPerceptronDecoupled_gemv_float_3u_unsigned_int_s is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_ap_start : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_ap_done : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_ap_continue : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_ap_idle : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_ap_ready : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_m_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_m_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_m_out_write : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_n_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_m_c_i_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_m_c_i_write : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_m_c9_i_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_m_c9_i_write : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_n_c_i_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_3u_unsigned_int_entry6992_U0_p_n_c_i_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_ap_start : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_start_out : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_start_write : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_p_M_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_p_x_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_p_y_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_3u_unsigned_int_float_U0_p_y_write : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_p_m_r_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_p_n_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_p_m_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_3u_unsigned_int_float_U0_p_m_out_write : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_ap_done : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_ap_ready : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_ap_idle : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_ap_continue : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_ap_start : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_ap_done : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_ap_continue : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_ap_idle : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_ap_ready : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_l_strBias9_read : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_l_y3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal scal_float_1u_unsigned_int_U0_l_y3_write : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_p_n_read : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_ap_start : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_ap_done : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_ap_continue : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_ap_idle : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_ap_ready : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_l_x2_read : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_l_y3_read : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_l_strMv8_din : STD_LOGIC_VECTOR (31 downto 0);
    signal axpy_float_1u_unsigned_int_U0_l_strMv8_write : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_p_n_read : STD_LOGIC;
    signal p_m_c_i_full_n : STD_LOGIC;
    signal p_m_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_m_c_i_empty_n : STD_LOGIC;
    signal p_m_c9_i_full_n : STD_LOGIC;
    signal p_m_c9_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_m_c9_i_empty_n : STD_LOGIC;
    signal p_n_c_i_full_n : STD_LOGIC;
    signal p_n_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c_i_empty_n : STD_LOGIC;
    signal l_x_full_n : STD_LOGIC;
    signal l_x_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal l_x_empty_n : STD_LOGIC;
    signal p_m_c10_i_full_n : STD_LOGIC;
    signal p_m_c10_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_m_c10_i_empty_n : STD_LOGIC;
    signal l_y_full_n : STD_LOGIC;
    signal l_y_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal l_y_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_gemv_float_3u_unsigned_int_float_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_gemv_float_3u_unsigned_int_float_U0_ap_ready : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_float_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_scal_float_1u_unsigned_int_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_scal_float_1u_unsigned_int_U0_ap_ready : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal gemv_float_3u_unsigned_int_entry6992_U0_start_full_n : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_entry6992_U0_start_write : STD_LOGIC;
    signal start_for_axpy_float_1u_unsigned_int_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_axpy_float_1u_unsigned_int_U0_full_n : STD_LOGIC;
    signal start_for_axpy_float_1u_unsigned_int_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_axpy_float_1u_unsigned_int_U0_empty_n : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_start_full_n : STD_LOGIC;
    signal scal_float_1u_unsigned_int_U0_start_write : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_start_full_n : STD_LOGIC;
    signal axpy_float_1u_unsigned_int_U0_start_write : STD_LOGIC;

    component MultiLayerPerceptronDecoupled_gemv_float_3u_unsigned_int_entry6992 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_empty_n : IN STD_LOGIC;
        p_m_read : OUT STD_LOGIC;
        p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_full_n : IN STD_LOGIC;
        p_m_out_write : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_m_c_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_c_i_full_n : IN STD_LOGIC;
        p_m_c_i_write : OUT STD_LOGIC;
        p_m_c9_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_c9_i_full_n : IN STD_LOGIC;
        p_m_c9_i_write : OUT STD_LOGIC;
        p_n_c_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_c_i_full_n : IN STD_LOGIC;
        p_n_c_i_write : OUT STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_gemv_float_3u_unsigned_int_float_s IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_M_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        p_M_empty_n : IN STD_LOGIC;
        p_M_read : OUT STD_LOGIC;
        p_x_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        p_x_empty_n : IN STD_LOGIC;
        p_x_read : OUT STD_LOGIC;
        p_y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_y_full_n : IN STD_LOGIC;
        p_y_write : OUT STD_LOGIC;
        p_m_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_r_empty_n : IN STD_LOGIC;
        p_m_r_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_full_n : IN STD_LOGIC;
        p_m_out_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_scal_float_1u_unsigned_int_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        l_strBias9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        l_strBias9_empty_n : IN STD_LOGIC;
        l_strBias9_read : OUT STD_LOGIC;
        l_y3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        l_y3_full_n : IN STD_LOGIC;
        l_y3_write : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_axpy_float_1u_unsigned_int_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        l_x2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        l_x2_empty_n : IN STD_LOGIC;
        l_x2_read : OUT STD_LOGIC;
        l_y3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        l_y3_empty_n : IN STD_LOGIC;
        l_y3_read : OUT STD_LOGIC;
        l_strMv8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        l_strMv8_full_n : IN STD_LOGIC;
        l_strMv8_write : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_start_for_axpy_float_1u_unsigned_int_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    gemv_float_3u_unsigned_int_entry6992_U0 : component MultiLayerPerceptronDecoupled_gemv_float_3u_unsigned_int_entry6992
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gemv_float_3u_unsigned_int_entry6992_U0_ap_start,
        ap_done => gemv_float_3u_unsigned_int_entry6992_U0_ap_done,
        ap_continue => gemv_float_3u_unsigned_int_entry6992_U0_ap_continue,
        ap_idle => gemv_float_3u_unsigned_int_entry6992_U0_ap_idle,
        ap_ready => gemv_float_3u_unsigned_int_entry6992_U0_ap_ready,
        p_m_dout => p_m_dout,
        p_m_empty_n => p_m_empty_n,
        p_m_read => gemv_float_3u_unsigned_int_entry6992_U0_p_m_read,
        p_m_out_din => gemv_float_3u_unsigned_int_entry6992_U0_p_m_out_din,
        p_m_out_full_n => p_m_out_full_n,
        p_m_out_write => gemv_float_3u_unsigned_int_entry6992_U0_p_m_out_write,
        p_n_dout => p_n_dout,
        p_n_empty_n => p_n_empty_n,
        p_n_read => gemv_float_3u_unsigned_int_entry6992_U0_p_n_read,
        p_m_c_i_din => gemv_float_3u_unsigned_int_entry6992_U0_p_m_c_i_din,
        p_m_c_i_full_n => p_m_c_i_full_n,
        p_m_c_i_write => gemv_float_3u_unsigned_int_entry6992_U0_p_m_c_i_write,
        p_m_c9_i_din => gemv_float_3u_unsigned_int_entry6992_U0_p_m_c9_i_din,
        p_m_c9_i_full_n => p_m_c9_i_full_n,
        p_m_c9_i_write => gemv_float_3u_unsigned_int_entry6992_U0_p_m_c9_i_write,
        p_n_c_i_din => gemv_float_3u_unsigned_int_entry6992_U0_p_n_c_i_din,
        p_n_c_i_full_n => p_n_c_i_full_n,
        p_n_c_i_write => gemv_float_3u_unsigned_int_entry6992_U0_p_n_c_i_write);

    gemv_float_3u_unsigned_int_float_U0 : component MultiLayerPerceptronDecoupled_gemv_float_3u_unsigned_int_float_s
    port map (
        ap_start => gemv_float_3u_unsigned_int_float_U0_ap_start,
        start_full_n => start_for_axpy_float_1u_unsigned_int_U0_full_n,
        start_out => gemv_float_3u_unsigned_int_float_U0_start_out,
        start_write => gemv_float_3u_unsigned_int_float_U0_start_write,
        p_M_dout => l_strWeights5_dout,
        p_M_empty_n => l_strWeights5_empty_n,
        p_M_read => gemv_float_3u_unsigned_int_float_U0_p_M_read,
        p_x_dout => l_strInput6_dout,
        p_x_empty_n => l_strInput6_empty_n,
        p_x_read => gemv_float_3u_unsigned_int_float_U0_p_x_read,
        p_y_din => gemv_float_3u_unsigned_int_float_U0_p_y_din,
        p_y_full_n => l_x_full_n,
        p_y_write => gemv_float_3u_unsigned_int_float_U0_p_y_write,
        p_m_r_dout => p_m_c_i_dout,
        p_m_r_empty_n => p_m_c_i_empty_n,
        p_m_r_read => gemv_float_3u_unsigned_int_float_U0_p_m_r_read,
        p_n_dout => p_n_c_i_dout,
        p_n_empty_n => p_n_c_i_empty_n,
        p_n_read => gemv_float_3u_unsigned_int_float_U0_p_n_read,
        p_m_out_din => gemv_float_3u_unsigned_int_float_U0_p_m_out_din,
        p_m_out_full_n => p_m_c10_i_full_n,
        p_m_out_write => gemv_float_3u_unsigned_int_float_U0_p_m_out_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => gemv_float_3u_unsigned_int_float_U0_ap_done,
        ap_ready => gemv_float_3u_unsigned_int_float_U0_ap_ready,
        ap_idle => gemv_float_3u_unsigned_int_float_U0_ap_idle,
        ap_continue => gemv_float_3u_unsigned_int_float_U0_ap_continue);

    scal_float_1u_unsigned_int_U0 : component MultiLayerPerceptronDecoupled_scal_float_1u_unsigned_int_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => scal_float_1u_unsigned_int_U0_ap_start,
        ap_done => scal_float_1u_unsigned_int_U0_ap_done,
        ap_continue => scal_float_1u_unsigned_int_U0_ap_continue,
        ap_idle => scal_float_1u_unsigned_int_U0_ap_idle,
        ap_ready => scal_float_1u_unsigned_int_U0_ap_ready,
        l_strBias9_dout => l_strBias9_dout,
        l_strBias9_empty_n => l_strBias9_empty_n,
        l_strBias9_read => scal_float_1u_unsigned_int_U0_l_strBias9_read,
        l_y3_din => scal_float_1u_unsigned_int_U0_l_y3_din,
        l_y3_full_n => l_y_full_n,
        l_y3_write => scal_float_1u_unsigned_int_U0_l_y3_write,
        p_n_dout => p_m_c9_i_dout,
        p_n_empty_n => p_m_c9_i_empty_n,
        p_n_read => scal_float_1u_unsigned_int_U0_p_n_read);

    axpy_float_1u_unsigned_int_U0 : component MultiLayerPerceptronDecoupled_axpy_float_1u_unsigned_int_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => axpy_float_1u_unsigned_int_U0_ap_start,
        ap_done => axpy_float_1u_unsigned_int_U0_ap_done,
        ap_continue => axpy_float_1u_unsigned_int_U0_ap_continue,
        ap_idle => axpy_float_1u_unsigned_int_U0_ap_idle,
        ap_ready => axpy_float_1u_unsigned_int_U0_ap_ready,
        l_x2_dout => l_x_dout,
        l_x2_empty_n => l_x_empty_n,
        l_x2_read => axpy_float_1u_unsigned_int_U0_l_x2_read,
        l_y3_dout => l_y_dout,
        l_y3_empty_n => l_y_empty_n,
        l_y3_read => axpy_float_1u_unsigned_int_U0_l_y3_read,
        l_strMv8_din => axpy_float_1u_unsigned_int_U0_l_strMv8_din,
        l_strMv8_full_n => l_strMv8_full_n,
        l_strMv8_write => axpy_float_1u_unsigned_int_U0_l_strMv8_write,
        p_n_dout => p_m_c10_i_dout,
        p_n_empty_n => p_m_c10_i_empty_n,
        p_n_read => axpy_float_1u_unsigned_int_U0_p_n_read);

    p_m_c_i_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemv_float_3u_unsigned_int_entry6992_U0_p_m_c_i_din,
        if_full_n => p_m_c_i_full_n,
        if_write => gemv_float_3u_unsigned_int_entry6992_U0_p_m_c_i_write,
        if_dout => p_m_c_i_dout,
        if_empty_n => p_m_c_i_empty_n,
        if_read => gemv_float_3u_unsigned_int_float_U0_p_m_r_read);

    p_m_c9_i_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemv_float_3u_unsigned_int_entry6992_U0_p_m_c9_i_din,
        if_full_n => p_m_c9_i_full_n,
        if_write => gemv_float_3u_unsigned_int_entry6992_U0_p_m_c9_i_write,
        if_dout => p_m_c9_i_dout,
        if_empty_n => p_m_c9_i_empty_n,
        if_read => scal_float_1u_unsigned_int_U0_p_n_read);

    p_n_c_i_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemv_float_3u_unsigned_int_entry6992_U0_p_n_c_i_din,
        if_full_n => p_n_c_i_full_n,
        if_write => gemv_float_3u_unsigned_int_entry6992_U0_p_n_c_i_write,
        if_dout => p_n_c_i_dout,
        if_empty_n => p_n_c_i_empty_n,
        if_read => gemv_float_3u_unsigned_int_float_U0_p_n_read);

    l_x_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemv_float_3u_unsigned_int_float_U0_p_y_din,
        if_full_n => l_x_full_n,
        if_write => gemv_float_3u_unsigned_int_float_U0_p_y_write,
        if_dout => l_x_dout,
        if_empty_n => l_x_empty_n,
        if_read => axpy_float_1u_unsigned_int_U0_l_x2_read);

    p_m_c10_i_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemv_float_3u_unsigned_int_float_U0_p_m_out_din,
        if_full_n => p_m_c10_i_full_n,
        if_write => gemv_float_3u_unsigned_int_float_U0_p_m_out_write,
        if_dout => p_m_c10_i_dout,
        if_empty_n => p_m_c10_i_empty_n,
        if_read => axpy_float_1u_unsigned_int_U0_p_n_read);

    l_y_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scal_float_1u_unsigned_int_U0_l_y3_din,
        if_full_n => l_y_full_n,
        if_write => scal_float_1u_unsigned_int_U0_l_y3_write,
        if_dout => l_y_dout,
        if_empty_n => l_y_empty_n,
        if_read => axpy_float_1u_unsigned_int_U0_l_y3_read);

    start_for_axpy_float_1u_unsigned_int_U0_U : component MultiLayerPerceptronDecoupled_start_for_axpy_float_1u_unsigned_int_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_axpy_float_1u_unsigned_int_U0_din,
        if_full_n => start_for_axpy_float_1u_unsigned_int_U0_full_n,
        if_write => gemv_float_3u_unsigned_int_float_U0_start_write,
        if_dout => start_for_axpy_float_1u_unsigned_int_U0_dout,
        if_empty_n => start_for_axpy_float_1u_unsigned_int_U0_empty_n,
        if_read => axpy_float_1u_unsigned_int_U0_ap_ready);





    ap_sync_reg_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready <= ap_sync_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_gemv_float_3u_unsigned_int_float_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_gemv_float_3u_unsigned_int_float_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_gemv_float_3u_unsigned_int_float_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_gemv_float_3u_unsigned_int_float_U0_ap_ready <= ap_sync_gemv_float_3u_unsigned_int_float_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_scal_float_1u_unsigned_int_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_scal_float_1u_unsigned_int_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_scal_float_1u_unsigned_int_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_scal_float_1u_unsigned_int_U0_ap_ready <= ap_sync_scal_float_1u_unsigned_int_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    gemv_float_3u_unsigned_int_entry6992_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gemv_float_3u_unsigned_int_entry6992_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                gemv_float_3u_unsigned_int_entry6992_U0_ap_ready_count <= std_logic_vector(unsigned(gemv_float_3u_unsigned_int_entry6992_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((gemv_float_3u_unsigned_int_entry6992_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                gemv_float_3u_unsigned_int_entry6992_U0_ap_ready_count <= std_logic_vector(unsigned(gemv_float_3u_unsigned_int_entry6992_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    gemv_float_3u_unsigned_int_float_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gemv_float_3u_unsigned_int_float_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                gemv_float_3u_unsigned_int_float_U0_ap_ready_count <= std_logic_vector(unsigned(gemv_float_3u_unsigned_int_float_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((gemv_float_3u_unsigned_int_float_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                gemv_float_3u_unsigned_int_float_U0_ap_ready_count <= std_logic_vector(unsigned(gemv_float_3u_unsigned_int_float_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    scal_float_1u_unsigned_int_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (scal_float_1u_unsigned_int_U0_ap_ready = ap_const_logic_0))) then 
                scal_float_1u_unsigned_int_U0_ap_ready_count <= std_logic_vector(unsigned(scal_float_1u_unsigned_int_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (scal_float_1u_unsigned_int_U0_ap_ready = ap_const_logic_1))) then 
                scal_float_1u_unsigned_int_U0_ap_ready_count <= std_logic_vector(unsigned(scal_float_1u_unsigned_int_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= ap_sync_done;
    ap_idle <= (scal_float_1u_unsigned_int_U0_ap_idle and gemv_float_3u_unsigned_int_float_U0_ap_idle and gemv_float_3u_unsigned_int_entry6992_U0_ap_idle and axpy_float_1u_unsigned_int_U0_ap_idle);
    ap_ready <= internal_ap_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (gemv_float_3u_unsigned_int_entry6992_U0_ap_done and axpy_float_1u_unsigned_int_U0_ap_done);
    ap_sync_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready <= (gemv_float_3u_unsigned_int_entry6992_U0_ap_ready or ap_sync_reg_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready);
    ap_sync_gemv_float_3u_unsigned_int_float_U0_ap_ready <= (gemv_float_3u_unsigned_int_float_U0_ap_ready or ap_sync_reg_gemv_float_3u_unsigned_int_float_U0_ap_ready);
    ap_sync_ready <= (ap_sync_scal_float_1u_unsigned_int_U0_ap_ready and ap_sync_gemv_float_3u_unsigned_int_float_U0_ap_ready and ap_sync_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready);
    ap_sync_scal_float_1u_unsigned_int_U0_ap_ready <= (scal_float_1u_unsigned_int_U0_ap_ready or ap_sync_reg_scal_float_1u_unsigned_int_U0_ap_ready);
    axpy_float_1u_unsigned_int_U0_ap_continue <= ap_sync_continue;
    axpy_float_1u_unsigned_int_U0_ap_start <= start_for_axpy_float_1u_unsigned_int_U0_empty_n;
    axpy_float_1u_unsigned_int_U0_start_full_n <= ap_const_logic_1;
    axpy_float_1u_unsigned_int_U0_start_write <= ap_const_logic_0;
    gemv_float_3u_unsigned_int_entry6992_U0_ap_continue <= ap_sync_continue;
    gemv_float_3u_unsigned_int_entry6992_U0_ap_start <= (real_start and (ap_sync_reg_gemv_float_3u_unsigned_int_entry6992_U0_ap_ready xor ap_const_logic_1));
    gemv_float_3u_unsigned_int_entry6992_U0_start_full_n <= ap_const_logic_1;
    gemv_float_3u_unsigned_int_entry6992_U0_start_write <= ap_const_logic_0;
    gemv_float_3u_unsigned_int_float_U0_ap_continue <= ap_const_logic_1;
    gemv_float_3u_unsigned_int_float_U0_ap_start <= (real_start and (ap_sync_reg_gemv_float_3u_unsigned_int_float_U0_ap_ready xor ap_const_logic_1));
    internal_ap_ready <= ap_sync_ready;
    l_strBias9_read <= scal_float_1u_unsigned_int_U0_l_strBias9_read;
    l_strInput6_read <= gemv_float_3u_unsigned_int_float_U0_p_x_read;
    l_strMv8_din <= axpy_float_1u_unsigned_int_U0_l_strMv8_din;
    l_strMv8_write <= axpy_float_1u_unsigned_int_U0_l_strMv8_write;
    l_strWeights5_read <= gemv_float_3u_unsigned_int_float_U0_p_M_read;
    p_m_out_din <= gemv_float_3u_unsigned_int_entry6992_U0_p_m_out_din;
    p_m_out_write <= gemv_float_3u_unsigned_int_entry6992_U0_p_m_out_write;
    p_m_read <= gemv_float_3u_unsigned_int_entry6992_U0_p_m_read;
    p_n_read <= gemv_float_3u_unsigned_int_entry6992_U0_p_n_read;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    scal_float_1u_unsigned_int_U0_ap_continue <= ap_const_logic_1;
    scal_float_1u_unsigned_int_U0_ap_start <= (real_start and (ap_sync_reg_scal_float_1u_unsigned_int_U0_ap_ready xor ap_const_logic_1));
    scal_float_1u_unsigned_int_U0_start_full_n <= ap_const_logic_1;
    scal_float_1u_unsigned_int_U0_start_write <= ap_const_logic_0;
    start_for_axpy_float_1u_unsigned_int_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
