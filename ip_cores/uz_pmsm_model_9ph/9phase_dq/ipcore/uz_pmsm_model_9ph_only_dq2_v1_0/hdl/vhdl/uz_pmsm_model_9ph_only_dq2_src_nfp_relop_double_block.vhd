-- -------------------------------------------------------------
-- 
-- File Name: 9phase_dq/hdlsrc/Copy_of_uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double_block.vhd
-- Created: 2022-06-09 09:46:00
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double_block
-- Source Path: Copy_of_uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph/dq_model_9ph/nfp_relop_double
-- Hierarchy Level: 1
-- 
-- {Latency Strategy = "Min"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        nfp_in1                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        nfp_in2                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        nfp_out1                          :   OUT   std_logic  -- ufix1
        );
END uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double_block;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double_block IS

  -- Signals
  SIGNAL Constant_out1                    : std_logic;  -- ufix1
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Add_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_add_cast                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL nfp_in1_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL AS                               : std_logic;  -- ufix1
  SIGNAL AE                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL AM                               : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay1_PS_1_out1                 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Compare_To_Zero2_out1            : std_logic;
  SIGNAL Logical_Operator1_out1_1         : std_logic;
  SIGNAL Delay_PS_1_out1                  : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL nfp_in2_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL BS                               : std_logic;  -- ufix1
  SIGNAL BE                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL BM                               : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay5_PS_1_out1                 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Compare_To_Zero3_out1            : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Delay4_PS_1_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Compare_To_Zero1_out1            : std_logic;
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL Delay2_PS_1_out1                 : std_logic;  -- ufix1
  SIGNAL Delay3_PS_1_out1                 : std_logic;  -- ufix1
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Relational_Operator3_relop1      : std_logic;
  SIGNAL Relational_Operator5_relop1      : std_logic;
  SIGNAL Relational_Operator_relop1_1     : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator1_out1_2         : std_logic;
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator4_out1_1         : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Logical_Operator_out1_2          : std_logic;
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL Logical_Operator2_out1_1         : std_logic;
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Logical_Operator3_out1_1         : std_logic;
  SIGNAL Logical_Operator5_out1_1         : std_logic;
  SIGNAL Logical_Operator1_out1_3         : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL Logical_Operator_out1_3          : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Logical_Operator_out1_4          : std_logic;
  SIGNAL Logical_Operator2_out1_2         : std_logic;
  SIGNAL Constant_out1_1                  : std_logic;
  SIGNAL Switch_out1_1                    : std_logic;

BEGIN
  Constant_out1 <= '1';

  Constant1_out1 <= to_unsigned(16#01#, 8);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Logical_Operator1_out1 <=  NOT Delay1_out1;

  Logical_Operator_out1 <= Constant_out1 AND Logical_Operator1_out1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1;
  Add_out1 <= Delay_out1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 > Constant1_out1 ELSE
      '0';

  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 64 bit word into FP sign, exponent, mantissa
  AS <= nfp_in1_unsigned(63);
  AE <= nfp_in1_unsigned(62 DOWNTO 52);
  AM <= nfp_in1_unsigned(51 DOWNTO 0);

  Delay1_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_PS_1_out1 <= to_unsigned(0, 52);
      ELSIF enb = '1' THEN
        Delay1_PS_1_out1 <= AM;
      END IF;
    END IF;
  END PROCESS Delay1_PS_1_process;


  
  Compare_To_Zero2_out1 <= '1' WHEN Delay1_PS_1_out1 = to_unsigned(0, 52) ELSE
      '0';

  Logical_Operator1_out1_1 <=  NOT Compare_To_Zero2_out1;

  Delay_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_PS_1_out1 <= to_unsigned(16#000#, 11);
      ELSIF enb = '1' THEN
        Delay_PS_1_out1 <= AE;
      END IF;
    END IF;
  END PROCESS Delay_PS_1_process;


  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 64 bit word into FP sign, exponent, mantissa
  BS <= nfp_in2_unsigned(63);
  BE <= nfp_in2_unsigned(62 DOWNTO 52);
  BM <= nfp_in2_unsigned(51 DOWNTO 0);

  Delay5_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_PS_1_out1 <= to_unsigned(0, 52);
      ELSIF enb = '1' THEN
        Delay5_PS_1_out1 <= BM;
      END IF;
    END IF;
  END PROCESS Delay5_PS_1_process;


  
  Compare_To_Zero3_out1 <= '1' WHEN Delay5_PS_1_out1 = to_unsigned(0, 52) ELSE
      '0';

  Logical_Operator4_out1 <=  NOT Compare_To_Zero3_out1;

  Delay4_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_PS_1_out1 <= to_unsigned(16#000#, 11);
      ELSIF enb = '1' THEN
        Delay4_PS_1_out1 <= BE;
      END IF;
    END IF;
  END PROCESS Delay4_PS_1_process;


  
  Compare_To_Zero_out1 <= '1' WHEN Delay_PS_1_out1 = to_unsigned(16#000#, 11) ELSE
      '0';

  
  Compare_To_Zero1_out1 <= '1' WHEN Delay4_PS_1_out1 = to_unsigned(16#000#, 11) ELSE
      '0';

  Logical_Operator_out1_1 <= Compare_To_Zero3_out1 AND (Compare_To_Zero2_out1 AND (Compare_To_Zero_out1 AND Compare_To_Zero1_out1));

  Delay2_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_PS_1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_PS_1_out1 <= AS;
      END IF;
    END IF;
  END PROCESS Delay2_PS_1_process;


  Delay3_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_PS_1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_PS_1_out1 <= BS;
      END IF;
    END IF;
  END PROCESS Delay3_PS_1_process;


  
  Relational_Operator1_relop1 <= '1' WHEN Delay2_PS_1_out1 = Delay3_PS_1_out1 ELSE
      '0';

  
  Relational_Operator3_relop1 <= '1' WHEN Delay_PS_1_out1 = Delay4_PS_1_out1 ELSE
      '0';

  
  Relational_Operator5_relop1 <= '1' WHEN Delay1_PS_1_out1 = Delay5_PS_1_out1 ELSE
      '0';

  
  Relational_Operator_relop1_1 <= '1' WHEN Delay2_PS_1_out1 < Delay3_PS_1_out1 ELSE
      '0';

  
  Compare_To_Constant_out1 <= '1' WHEN Delay3_PS_1_out1 = '1' ELSE
      '0';

  Logical_Operator1_out1_2 <= Compare_To_Constant_out1 AND Relational_Operator1_relop1;

  
  Relational_Operator2_relop1 <= '1' WHEN Delay_PS_1_out1 > Delay4_PS_1_out1 ELSE
      '0';

  
  Relational_Operator4_relop1 <= '1' WHEN Delay1_PS_1_out1 > Delay5_PS_1_out1 ELSE
      '0';

  Logical_Operator3_out1 <= Relational_Operator3_relop1 AND Relational_Operator4_relop1;

  Logical_Operator2_out1 <= Relational_Operator2_relop1 OR Logical_Operator3_out1;

  Logical_Operator4_out1_1 <= Relational_Operator1_relop1 AND Logical_Operator2_out1;

  Logical_Operator5_out1 <=  NOT Logical_Operator4_out1_1;

  Logical_Operator_out1_2 <=  NOT Relational_Operator_relop1;

  
  Compare_To_Constant_out1_1 <= '1' WHEN Delay_PS_1_out1 = to_unsigned(16#7FF#, 11) ELSE
      '0';

  Logical_Operator2_out1_1 <= Logical_Operator1_out1_1 AND Compare_To_Constant_out1_1;

  
  Compare_To_Constant1_out1 <= '1' WHEN Delay4_PS_1_out1 = to_unsigned(16#7FF#, 11) ELSE
      '0';

  Logical_Operator3_out1_1 <= Logical_Operator4_out1 AND Compare_To_Constant1_out1;

  Logical_Operator5_out1_1 <= Logical_Operator2_out1_1 OR Logical_Operator3_out1_1;

  Logical_Operator1_out1_3 <= Logical_Operator_out1_2 OR Logical_Operator5_out1_1;

  Logical_Operator6_out1 <= Relational_Operator5_relop1 AND (Relational_Operator1_relop1 AND Relational_Operator3_relop1);

  Logical_Operator_out1_3 <= Logical_Operator_out1_1 OR Logical_Operator6_out1;

  
  Switch_out1 <= Logical_Operator4_out1_1 WHEN Logical_Operator1_out1_2 = '0' ELSE
      Logical_Operator5_out1;

  Logical_Operator_out1_4 <= Relational_Operator_relop1_1 OR Switch_out1;

  Logical_Operator2_out1_2 <= Logical_Operator_out1_3 OR Logical_Operator_out1_4;

  Constant_out1_1 <= '0';

  
  Switch_out1_1 <= Logical_Operator2_out1_2 WHEN Logical_Operator1_out1_3 = '0' ELSE
      Constant_out1_1;

  nfp_out1 <= Switch_out1_1;

END rtl;

