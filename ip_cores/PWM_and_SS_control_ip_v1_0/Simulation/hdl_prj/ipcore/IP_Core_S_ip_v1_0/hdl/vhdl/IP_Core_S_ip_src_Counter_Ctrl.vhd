-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\IP_Core_SS_Switch_and_PWM\IP_Core_S_ip_src_Counter_Ctrl.vhd
-- Created: 2018-10-01 12:50:34
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IP_Core_S_ip_src_Counter_Ctrl
-- Source Path: IP_Core_SS_Switch_and_PWM/PWM_and_Switching_Signal_Control/GenPWM/Counter Ctrl
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IP_Core_S_ip_src_Counter_Ctrl IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        hdl_cnt                           :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20
        f_carrier_kHz                     :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        dir_ctrl                          :   OUT   std_logic;
        triangle_sig                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- ufix18_En10
        );
END IP_Core_S_ip_src_Counter_Ctrl;


ARCHITECTURE rtl OF IP_Core_S_ip_src_Counter_Ctrl IS

  -- Signals
  SIGNAL hdl_cnt_unsigned                 : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Constant_out1                    : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL f_carrier_kHz_unsigned           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Saturation1_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Gain8_mul_temp                   : unsigned(15 DOWNTO 0);  -- ufix16_E2
  SIGNAL Gain8_out1                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Divide_out1                      : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Gain7_mul_temp                   : unsigned(47 DOWNTO 0);  -- ufix48_En27
  SIGNAL Gain7_out1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL Constant11_out1                  : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Relational_Operator5_relop1      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant14_out1                  : std_logic;
  SIGNAL Constant12_out1                  : std_logic;
  SIGNAL Switch7_out1                     : std_logic;
  SIGNAL Switch6_out1                     : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Gain_mul_temp                    : unsigned(47 DOWNTO 0);  -- ufix48_En43
  SIGNAL Gain_out1                        : unsigned(19 DOWNTO 0);  -- ufix20_En19
  SIGNAL Gain6_mul_temp                   : unsigned(39 DOWNTO 0);  -- ufix40_En32
  SIGNAL Gain6_out1                       : unsigned(13 DOWNTO 0);  -- ufix14_En10
  SIGNAL Product_mul_temp                 : unsigned(33 DOWNTO 0);  -- ufix34_En10
  SIGNAL Product_out1                     : unsigned(17 DOWNTO 0);  -- ufix18_En10

BEGIN
  -- if (hdl_cnt >= step_cnt)
  -- 	dir_ctrl = true;
  -- else if (hdl_cnt <= 0)
  -- 	dir_ctrl = false;
  -- else
  -- 	dir_ctrl = dir_ctrl;
  -- 
  -- step_cnt = (f_pwm_clk / f_carrier) * 1/2
  -- 
  -- scaling triangle amplitude to 100
  -- 
  -- Limit f_carrier from 
  -- 10 kHz to 100 kHz

  hdl_cnt_unsigned <= unsigned(hdl_cnt);

  Constant_out1 <= to_unsigned(16#800000#, 24);

  f_carrier_kHz_unsigned <= unsigned(f_carrier_kHz);

  
  Saturation1_out1 <= to_unsigned(16#64#, 8) WHEN f_carrier_kHz_unsigned > to_unsigned(16#64#, 8) ELSE
      to_unsigned(16#0A#, 8) WHEN f_carrier_kHz_unsigned < to_unsigned(16#0A#, 8) ELSE
      f_carrier_kHz_unsigned;

  Gain8_mul_temp <= to_unsigned(16#FA#, 8) * Saturation1_out1;
  Gain8_out1 <= resize(Gain8_mul_temp & '0' & '0', 24);

  Divide_output : PROCESS (Constant_out1, Gain8_out1)
    VARIABLE div_temp : unsigned(24 DOWNTO 0);
    VARIABLE cast : unsigned(24 DOWNTO 0);
  BEGIN
    IF Gain8_out1 = to_unsigned(16#000000#, 24) THEN 
      Divide_out1 <= to_unsigned(16#FFFFFF#, 24);
    ELSE 
      cast := resize(Constant_out1, 25);
      div_temp := cast / Gain8_out1;
      IF div_temp(24) /= '0' THEN 
        Divide_out1 <= X"FFFFFF";
      ELSE 
        Divide_out1 <= div_temp(23 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Divide_output;


  Gain7_mul_temp <= to_unsigned(16#F42400#, 24) * Divide_out1;
  Gain7_out1 <= Gain7_mul_temp(46 DOWNTO 27);

  
  Relational_Operator4_relop1 <= '1' WHEN hdl_cnt_unsigned > Gain7_out1 ELSE
      '0';

  Constant11_out1 <= to_unsigned(16#00000#, 20);

  
  Relational_Operator5_relop1 <= '1' WHEN hdl_cnt_unsigned <= Constant11_out1 ELSE
      '0';

  Logical_Operator_out1 <= Relational_Operator4_relop1 OR Relational_Operator5_relop1;

  
  switch_compare_1 <= '1' WHEN Logical_Operator_out1 > '0' ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Relational_Operator4_relop1 > '0' ELSE
      '0';

  Constant14_out1 <= '1';

  Constant12_out1 <= '0';

  
  Switch7_out1 <= Constant14_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant12_out1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch6_out1 <= Delay6_out1 WHEN switch_compare_1 = '0' ELSE
      Switch7_out1;

  Gain_mul_temp <= to_unsigned(16#8637BD#, 24) * Gain8_out1;
  Gain_out1 <= Gain_mul_temp(43 DOWNTO 24);

  Gain6_mul_temp <= to_unsigned(16#C8000#, 20) * Gain_out1;
  Gain6_out1 <= Gain6_mul_temp(35 DOWNTO 22);

  Product_mul_temp <= hdl_cnt_unsigned * Gain6_out1;
  Product_out1 <= Product_mul_temp(17 DOWNTO 0);

  triangle_sig <= std_logic_vector(Product_out1);


  dir_ctrl <= Switch6_out1;

END rtl;

