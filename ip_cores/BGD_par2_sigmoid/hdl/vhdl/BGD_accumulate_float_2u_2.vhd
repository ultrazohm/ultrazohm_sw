-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_accumulate_float_2u_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_values_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    p_values_empty_n : IN STD_LOGIC;
    p_values_read : OUT STD_LOGIC;
    p_accumulator_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_accumulator_ce0 : OUT STD_LOGIC;
    p_accumulator_we0 : OUT STD_LOGIC;
    p_accumulator_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_accumulator_ce1 : OUT STD_LOGIC;
    p_accumulator_we1 : OUT STD_LOGIC;
    p_accumulator_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_weightGradientAvg_offset_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_weightGradientAvg_offset_empty_n : IN STD_LOGIC;
    p_weightGradientAvg_offset_read : OUT STD_LOGIC;
    mul_ln559_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln559_loc_empty_n : IN STD_LOGIC;
    mul_ln559_loc_read : OUT STD_LOGIC;
    p_initZero_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    p_initZero_empty_n : IN STD_LOGIC;
    p_initZero_read : OUT STD_LOGIC );
end;


architecture behav of BGD_accumulate_float_2u_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_values_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln409_reg_245 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_weightGradientAvg_offset_blk_n : STD_LOGIC;
    signal mul_ln559_loc_blk_n : STD_LOGIC;
    signal p_initZero_blk_n : STD_LOGIC;
    signal i_reg_119 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_weightGradientAvg_offset_read_reg_228 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_initZero_read_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_240 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln409_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln409_reg_245_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_reg_245_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_reg_245_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_reg_245_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_reg_245_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_reg_245_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_reg_245_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_reg_245_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_16_fu_149_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_16_reg_249 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_accumulator_addr_reg_254 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_accumulator_addr_reg_254_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_accumulator_addr_reg_254_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_accumulator_addr_reg_254_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln416_2_fu_183_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln416_2_reg_259 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln416_2_reg_259_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln416_2_reg_259_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln416_2_reg_259_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln674_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_Result_i_i_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_reg_269_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_reg_269_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_reg_269_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_reg_269_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln403_fu_206_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_i_i_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal p_accumulator_addr_3_reg_294 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_accumulator_addr_3_reg_294_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_accumulator_addr_3_reg_294_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_accumulator_addr_3_reg_294_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_accumulator_addr_3_reg_294_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln403_2_fu_217_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln403_2_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_10_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_1_i_i_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_123_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln416_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_3_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_130_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_155_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul4_i_i_fu_159_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln416_fu_167_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln416_fu_177_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_130_ce : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op40_load_state2 : BOOLEAN;
    signal ap_enable_operation_40 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage0 : BOOLEAN;
    signal ap_predicate_op46_load_state3 : BOOLEAN;
    signal ap_enable_operation_46 : BOOLEAN;
    signal ap_enable_state3_pp0_iter0_stage1 : BOOLEAN;
    signal ap_enable_operation_54 : BOOLEAN;
    signal ap_enable_state9_pp0_iter3_stage1 : BOOLEAN;
    signal ap_enable_operation_68 : BOOLEAN;
    signal ap_enable_state19_pp0_iter8_stage1 : BOOLEAN;
    signal ap_predicate_op57_load_state10 : BOOLEAN;
    signal ap_enable_operation_57 : BOOLEAN;
    signal ap_enable_state10_pp0_iter4_stage0 : BOOLEAN;
    signal ap_predicate_op58_load_state11 : BOOLEAN;
    signal ap_enable_operation_58 : BOOLEAN;
    signal ap_enable_state11_pp0_iter4_stage1 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component BGD_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U331 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_130_p0,
        din1 => grp_fu_130_p1,
        ce => grp_fu_130_ce,
        dout => grp_fu_130_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((not(((ap_start = ap_const_logic_0) or (p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_245 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_119 <= i_16_reg_249;
            elsif ((not(((ap_start = ap_const_logic_0) or (p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_119 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln409_reg_245_pp0_iter7_reg = ap_const_lv1_0))) then
                add3_1_i_i_reg_309 <= grp_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln409_reg_245_pp0_iter2_reg = ap_const_lv1_0))) then
                add3_i_i_reg_289 <= grp_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_fu_144_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln416_2_reg_259 <= add_ln416_2_fu_183_p2;
                p_accumulator_addr_reg_254 <= zext_ln416_fu_172_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln416_2_reg_259_pp0_iter1_reg <= add_ln416_2_reg_259;
                add_ln416_2_reg_259_pp0_iter2_reg <= add_ln416_2_reg_259_pp0_iter1_reg;
                add_ln416_2_reg_259_pp0_iter3_reg <= add_ln416_2_reg_259_pp0_iter2_reg;
                icmp_ln409_reg_245 <= icmp_ln409_fu_144_p2;
                icmp_ln409_reg_245_pp0_iter1_reg <= icmp_ln409_reg_245;
                icmp_ln409_reg_245_pp0_iter2_reg <= icmp_ln409_reg_245_pp0_iter1_reg;
                icmp_ln409_reg_245_pp0_iter3_reg <= icmp_ln409_reg_245_pp0_iter2_reg;
                icmp_ln409_reg_245_pp0_iter4_reg <= icmp_ln409_reg_245_pp0_iter3_reg;
                icmp_ln409_reg_245_pp0_iter5_reg <= icmp_ln409_reg_245_pp0_iter4_reg;
                icmp_ln409_reg_245_pp0_iter6_reg <= icmp_ln409_reg_245_pp0_iter5_reg;
                icmp_ln409_reg_245_pp0_iter7_reg <= icmp_ln409_reg_245_pp0_iter6_reg;
                icmp_ln409_reg_245_pp0_iter8_reg <= icmp_ln409_reg_245_pp0_iter7_reg;
                p_accumulator_addr_3_reg_294_pp0_iter5_reg <= p_accumulator_addr_3_reg_294;
                p_accumulator_addr_3_reg_294_pp0_iter6_reg <= p_accumulator_addr_3_reg_294_pp0_iter5_reg;
                p_accumulator_addr_3_reg_294_pp0_iter7_reg <= p_accumulator_addr_3_reg_294_pp0_iter6_reg;
                p_accumulator_addr_3_reg_294_pp0_iter8_reg <= p_accumulator_addr_3_reg_294_pp0_iter7_reg;
                p_accumulator_addr_reg_254_pp0_iter1_reg <= p_accumulator_addr_reg_254;
                p_accumulator_addr_reg_254_pp0_iter2_reg <= p_accumulator_addr_reg_254_pp0_iter1_reg;
                p_accumulator_addr_reg_254_pp0_iter3_reg <= p_accumulator_addr_reg_254_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_16_reg_249 <= i_16_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_245 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Result_i_i_reg_269 <= p_values_dout(63 downto 32);
                trunc_ln674_reg_264 <= trunc_ln674_fu_188_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Result_i_i_reg_269_pp0_iter1_reg <= p_Result_i_i_reg_269;
                p_Result_i_i_reg_269_pp0_iter2_reg <= p_Result_i_i_reg_269_pp0_iter1_reg;
                p_Result_i_i_reg_269_pp0_iter3_reg <= p_Result_i_i_reg_269_pp0_iter2_reg;
                p_Result_i_i_reg_269_pp0_iter4_reg <= p_Result_i_i_reg_269_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln409_reg_245_pp0_iter3_reg = ap_const_lv1_0))) then
                p_accumulator_addr_3_reg_294 <= zext_ln416_3_fu_213_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_initZero_read_reg_234 = ap_const_lv1_0) and (icmp_ln409_reg_245 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_accumulator_load_reg_274 <= p_accumulator_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_initZero_read_reg_234 <= p_initZero_dout;
                p_weightGradientAvg_offset_read_reg_228 <= p_weightGradientAvg_offset_dout;
                trunc_ln_reg_240 <= mul_ln559_loc_dout(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln409_reg_245_pp0_iter4_reg = ap_const_lv1_0))) then
                select_ln403_2_reg_299 <= select_ln403_2_fu_217_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln409_fu_144_p2, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln409_fu_144_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln409_fu_144_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln416_2_fu_183_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_228) + unsigned(or_ln416_fu_177_p2));
    add_ln416_fu_167_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_228) + unsigned(mul4_i_i_fu_159_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(3);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)) or ((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(p_values_empty_n, ap_enable_reg_pp0_iter0, icmp_ln409_reg_245)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln409_reg_245 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (p_values_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(p_values_empty_n, ap_enable_reg_pp0_iter0, icmp_ln409_reg_245)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln409_reg_245 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (p_values_empty_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(p_values_empty_n, icmp_ln409_reg_245)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln409_reg_245 = ap_const_lv1_0) and (p_values_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln409_fu_144_p2)
    begin
        if ((icmp_ln409_fu_144_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_40_assign_proc : process(ap_predicate_op40_load_state2)
    begin
                ap_enable_operation_40 <= (ap_predicate_op40_load_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_46_assign_proc : process(ap_predicate_op46_load_state3)
    begin
                ap_enable_operation_46 <= (ap_predicate_op46_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_54_assign_proc : process(icmp_ln409_reg_245_pp0_iter3_reg)
    begin
                ap_enable_operation_54 <= (icmp_ln409_reg_245_pp0_iter3_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_57_assign_proc : process(ap_predicate_op57_load_state10)
    begin
                ap_enable_operation_57 <= (ap_predicate_op57_load_state10 = ap_const_boolean_1);
    end process;


    ap_enable_operation_58_assign_proc : process(ap_predicate_op58_load_state11)
    begin
                ap_enable_operation_58 <= (ap_predicate_op58_load_state11 = ap_const_boolean_1);
    end process;


    ap_enable_operation_68_assign_proc : process(icmp_ln409_reg_245_pp0_iter8_reg)
    begin
                ap_enable_operation_68 <= (icmp_ln409_reg_245_pp0_iter8_reg = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state10_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state10_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state11_pp0_iter4_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state11_pp0_iter4_stage1 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state19_pp0_iter8_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter8)
    begin
                ap_enable_state19_pp0_iter8_stage1 <= ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state2_pp0_iter0_stage0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0)
    begin
                ap_enable_state2_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state3_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state3_pp0_iter0_stage1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state9_pp0_iter3_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state9_pp0_iter3_stage1 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_123_p4_assign_proc : process(icmp_ln409_reg_245, i_reg_119, ap_CS_fsm_pp0_stage0, i_16_reg_249, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln409_reg_245 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_123_p4 <= i_16_reg_249;
        else 
            ap_phi_mux_i_phi_fu_123_p4 <= i_reg_119;
        end if; 
    end process;


    ap_predicate_op40_load_state2_assign_proc : process(p_initZero_read_reg_234, icmp_ln409_fu_144_p2)
    begin
                ap_predicate_op40_load_state2 <= ((icmp_ln409_fu_144_p2 = ap_const_lv1_0) and (p_initZero_read_reg_234 = ap_const_lv1_0));
    end process;


    ap_predicate_op46_load_state3_assign_proc : process(icmp_ln409_reg_245, p_initZero_read_reg_234)
    begin
                ap_predicate_op46_load_state3 <= ((p_initZero_read_reg_234 = ap_const_lv1_0) and (icmp_ln409_reg_245 = ap_const_lv1_0));
    end process;


    ap_predicate_op57_load_state10_assign_proc : process(p_initZero_read_reg_234, icmp_ln409_reg_245_pp0_iter3_reg)
    begin
                ap_predicate_op57_load_state10 <= ((p_initZero_read_reg_234 = ap_const_lv1_0) and (icmp_ln409_reg_245_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op58_load_state11_assign_proc : process(p_initZero_read_reg_234, icmp_ln409_reg_245_pp0_iter4_reg)
    begin
                ap_predicate_op58_load_state11 <= ((p_initZero_read_reg_234 = ap_const_lv1_0) and (icmp_ln409_reg_245_pp0_iter4_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln101_10_fu_224_p1 <= p_Result_i_i_reg_269_pp0_iter4_reg;
    bitcast_ln101_fu_202_p1 <= trunc_ln674_reg_264;
    empty_fu_155_p1 <= ap_phi_mux_i_phi_fu_123_p4(15 - 1 downto 0);

    grp_fu_130_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_130_ce <= ap_const_logic_1;
        else 
            grp_fu_130_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_130_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, select_ln403_fu_206_p3, select_ln403_2_reg_299, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_130_p0 <= select_ln403_2_reg_299;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_130_p0 <= select_ln403_fu_206_p3;
        else 
            grp_fu_130_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_130_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, bitcast_ln101_fu_202_p1, bitcast_ln101_10_fu_224_p1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_130_p1 <= bitcast_ln101_10_fu_224_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_130_p1 <= bitcast_ln101_fu_202_p1;
        else 
            grp_fu_130_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_16_fu_149_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_123_p4) + unsigned(ap_const_lv31_1));
    icmp_ln409_fu_144_p2 <= "1" when (ap_phi_mux_i_phi_fu_123_p4 = trunc_ln_reg_240) else "0";
    mul4_i_i_fu_159_p3 <= (empty_fu_155_p1 & ap_const_lv1_0);

    mul_ln559_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln559_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln559_loc_blk_n <= mul_ln559_loc_empty_n;
        else 
            mul_ln559_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mul_ln559_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln559_loc_read <= ap_const_logic_1;
        else 
            mul_ln559_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln416_fu_177_p2 <= (mul4_i_i_fu_159_p3 or ap_const_lv16_1);

    p_accumulator_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, p_accumulator_addr_3_reg_294_pp0_iter8_reg, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, zext_ln416_3_fu_213_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_accumulator_address0 <= p_accumulator_addr_3_reg_294_pp0_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_accumulator_address0 <= zext_ln416_3_fu_213_p1(16 - 1 downto 0);
        else 
            p_accumulator_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_accumulator_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, p_accumulator_addr_reg_254_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln416_fu_172_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            p_accumulator_address1 <= p_accumulator_addr_reg_254_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_accumulator_address1 <= zext_ln416_fu_172_p1(16 - 1 downto 0);
        else 
            p_accumulator_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_accumulator_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_accumulator_ce0 <= ap_const_logic_1;
        else 
            p_accumulator_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_accumulator_ce1 <= ap_const_logic_1;
        else 
            p_accumulator_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_accumulator_d0 <= add3_1_i_i_reg_309;
    p_accumulator_d1 <= add3_i_i_reg_289;

    p_accumulator_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln409_reg_245_pp0_iter8_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln409_reg_245_pp0_iter8_reg = ap_const_lv1_0))) then 
            p_accumulator_we0 <= ap_const_logic_1;
        else 
            p_accumulator_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln409_reg_245_pp0_iter3_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln409_reg_245_pp0_iter3_reg = ap_const_lv1_0))) then 
            p_accumulator_we1 <= ap_const_logic_1;
        else 
            p_accumulator_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_initZero_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_initZero_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_initZero_blk_n <= p_initZero_empty_n;
        else 
            p_initZero_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_initZero_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_initZero_read <= ap_const_logic_1;
        else 
            p_initZero_read <= ap_const_logic_0;
        end if; 
    end process;


    p_values_blk_n_assign_proc : process(p_values_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln409_reg_245)
    begin
        if (((icmp_ln409_reg_245 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_values_blk_n <= p_values_empty_n;
        else 
            p_values_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_values_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln409_reg_245, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln409_reg_245 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_values_read <= ap_const_logic_1;
        else 
            p_values_read <= ap_const_logic_0;
        end if; 
    end process;


    p_weightGradientAvg_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_weightGradientAvg_offset_blk_n <= p_weightGradientAvg_offset_empty_n;
        else 
            p_weightGradientAvg_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_weightGradientAvg_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_weightGradientAvg_offset_read <= ap_const_logic_1;
        else 
            p_weightGradientAvg_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln403_2_fu_217_p3 <= 
        ap_const_lv32_0 when (p_initZero_read_reg_234(0) = '1') else 
        p_accumulator_q0;
    select_ln403_fu_206_p3 <= 
        ap_const_lv32_0 when (p_initZero_read_reg_234(0) = '1') else 
        p_accumulator_load_reg_274;
    trunc_ln674_fu_188_p1 <= p_values_dout(32 - 1 downto 0);
    zext_ln416_3_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln416_2_reg_259_pp0_iter3_reg),64));
    zext_ln416_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln416_fu_167_p2),64));
end behav;
