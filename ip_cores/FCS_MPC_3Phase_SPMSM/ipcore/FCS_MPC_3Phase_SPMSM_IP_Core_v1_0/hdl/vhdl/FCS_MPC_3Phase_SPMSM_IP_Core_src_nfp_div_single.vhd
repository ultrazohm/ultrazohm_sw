-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\FCS_MPC_3Phase_SPMSM\hdlsrc\FCS_MPC_3Phase_SPMSM_TEST1\FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_div_single.vhd
-- Created: 2022-06-27 11:28:55
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_div_single
-- Source Path: FCS_MPC_3Phase_SPMSM_TEST1/Microcontroller Software/Subsystem1/MATLAB Function/nfp_div_single
-- Hierarchy Level: 2
-- 
-- {Latency Strategy = "Zero", Denormal Handling = "off"}
-- {Radix = "2"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_div_single IS
  PORT( nfp_in1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_in2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_div_single;


ARCHITECTURE rtl OF FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_div_single IS

  -- Signals
  SIGNAL nfp_in1_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_in2_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL bSign                            : std_logic;  -- ufix1
  SIGNAL bExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL bMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_out1                         : std_logic;  -- ufix1
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL bExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1 : std_logic;  -- ufix1
  SIGNAL aExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL Constant_out1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_0_aMantissa_out1  : std_logic;  -- ufix1
  SIGNAL bExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL Constant_out1_1                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1_1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL bMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphabExponent_0_bMantissa_out1  : std_logic;  -- ufix1
  SIGNAL alphaExponent_0_cfType_Exp_out1  : std_logic;  -- ufix1
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1    : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alphaExponent_0_cfType_Exp_out1_1 : std_logic;  -- ufix1
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1_1  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL mant_a_norm_mant_b_norm_relop1   : std_logic;
  SIGNAL C_out1                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC_out1                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cast_1_out1                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_a_norm_cast_1_out1           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_mant_a_norm_mant_b_norm_out1  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_Exponent_0_out1_1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC1_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_a_norm_exp_b_norm_out1       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cast_cfType_ExponentBias_lik_out1 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_a_norm_exp_b_norm_cast_out1  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_tmp_2_cfType_ExponentBi_out1 : std_logic;  -- ufix1
  SIGNAL exp_tmp_1_out1                   : std_logic;  -- ufix1
  SIGNAL C3_out1                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL exp_tmp_0_out1                   : std_logic;  -- ufix1
  SIGNAL C1_out1                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL C_out1_2                         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL if_exp_tmp_0_out1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL if_exp_tmp_1_1_out1              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL C5_out1                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL if_exp_tmp_2_cfType_ExponentB_1_out1 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL shift_length_1_out1              : std_logic;  -- ufix1
  SIGNAL shift_length_1_out1_1            : std_logic;  -- ufix1
  SIGNAL C_out1_3                         : std_logic;  -- ufix1
  SIGNAL alpha0_out1_2                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat_out1                  : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_mant_a_norm_1_out1        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_mant_a_norm_mant_b_norm_1_out1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1                  : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Data_Type_Conversion1_out1       : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL alpha1_out1_2                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat1_out1_2               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Unary_Minus2_in0                 : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL Unary_Minus2_out1                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1                   : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Data_Type_Conversion_out1        : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1                  : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_1             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Bit_Concat_out1_1                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL if_tmp_0_1_out1                  : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_1                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_2             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL Bit_Concat_out1_2                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL if_tmp_0_1_out1_1                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_2                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_3             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;
  SIGNAL Bit_Concat_out1_3                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL if_tmp_0_1_out1_2                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_3                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_4             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;
  SIGNAL Bit_Concat_out1_4                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL if_tmp_0_1_out1_3                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_4                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_5             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_4          : std_logic;
  SIGNAL Bit_Concat_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL if_tmp_0_1_out1_4                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_5                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_6             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_5          : std_logic;
  SIGNAL Bit_Concat_out1_6                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL if_tmp_0_1_out1_5                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_6                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_7             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_6          : std_logic;
  SIGNAL Bit_Concat_out1_7                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL if_tmp_0_1_out1_6                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_7                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_8             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_7          : std_logic;
  SIGNAL Bit_Concat_out1_8                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL if_tmp_0_1_out1_7                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_8                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_9             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_8          : std_logic;
  SIGNAL Bit_Concat_out1_9                : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL if_tmp_0_1_out1_8                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_9                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_10            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_9          : std_logic;
  SIGNAL Bit_Concat_out1_10               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_tmp_0_1_out1_9                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_10               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_11            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_10         : std_logic;
  SIGNAL Bit_Concat_out1_11               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL if_tmp_0_1_out1_10               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_11               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_12            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_11         : std_logic;
  SIGNAL Bit_Concat_out1_12               : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL if_tmp_0_1_out1_11               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_12               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_13            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_12         : std_logic;
  SIGNAL Bit_Concat_out1_13               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL if_tmp_0_1_out1_12               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_13               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_14            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_14                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_13         : std_logic;
  SIGNAL Bit_Concat_out1_14               : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL if_tmp_0_1_out1_13               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_14               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_15            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_14         : std_logic;
  SIGNAL Bit_Concat_out1_15               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL if_tmp_0_1_out1_14               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_15               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_16            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_16                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_15         : std_logic;
  SIGNAL Bit_Concat_out1_16               : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL if_tmp_0_1_out1_15               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_16               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_17            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_17                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_16         : std_logic;
  SIGNAL Bit_Concat_out1_17               : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL if_tmp_0_1_out1_16               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_17               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_18            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_18                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_17         : std_logic;
  SIGNAL Bit_Concat_out1_18               : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL if_tmp_0_1_out1_17               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_18               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_19            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_19                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_18         : std_logic;
  SIGNAL Bit_Concat_out1_19               : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL if_tmp_0_1_out1_18               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_19               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_20            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_20                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_19         : std_logic;
  SIGNAL Bit_Concat_out1_20               : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL if_tmp_0_1_out1_19               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_20               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_21            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_21                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_20         : std_logic;
  SIGNAL Bit_Concat_out1_21               : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL if_tmp_0_1_out1_20               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_21               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_22            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_22                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_21         : std_logic;
  SIGNAL Bit_Concat_out1_22               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_tmp_0_1_out1_21               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_22               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_23            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_23                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_22         : std_logic;
  SIGNAL Bit_Concat_out1_23               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_tmp_0_1_out1_22               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_23               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_24            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_24                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_23         : std_logic;
  SIGNAL Bit_Concat_out1_24               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL C_out1_4                         : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_shift_length_1_out1           : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL bitsrl_Q_1_out1                  : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_shift_length_1_out1_1         : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice_out1                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice10_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice8_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_25                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Constant_out1_2                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_25               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_26                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_24         : std_logic;  -- ufix1
  SIGNAL Switch6_out1                     : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Switch7_out1                     : std_logic;  -- ufix1
  SIGNAL Switch3_out1                     : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_2                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_27                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_25         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_1                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_1         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_1                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1_1                   : std_logic;  -- ufix1
  SIGNAL Switch6_out1_2                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_2                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_28                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_26         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_3                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_2         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_2                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1_2                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_3                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_29                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_27         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_4                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_3         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_3                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1_3                   : std_logic;  -- ufix1
  SIGNAL Switch7_out1_4                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1_4                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_30                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_28         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_5                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_4         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_5                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1_5                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_31                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_29         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_6                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_5         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_6                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1_6                   : std_logic;  -- ufix1
  SIGNAL Switch4_out1                     : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_30         : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Slice_out1_32                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_31         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_7                   : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_1                  : std_logic;  -- ufix1
  SIGNAL BitSlice1_out1                   : std_logic;  -- ufix1
  SIGNAL if_tmp_0_1_out1_23               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_24               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_0_out1                         : std_logic;  -- ufix1
  SIGNAL Switch1_out1                     : std_logic;  -- ufix1
  SIGNAL Switch2_out1                     : std_logic;  -- ufix1
  SIGNAL sticky_bitsll_Q_Q_WordLen_out1   : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_3                    : std_logic;  -- ufix1
  SIGNAL BitSlice4_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Concat_out1_26               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha2_out1                      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Mant_tmp_2_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BitSlice2_out1                   : std_logic;  -- ufix1
  SIGNAL DTC1_out1_1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C2_out1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_exp_tmp_1_out1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C4_out1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_exp_tmp_2_cfType_ExponentB_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha1_out1_3                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_1_out1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C4_out1_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bExponent_0_bMantissa_out1    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C1_out1_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_5                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bExponent_0_bMantissa_out1_1  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_0_aMantissa_out1    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C1_out1_2                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_mant_b_0_out1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_exp_a_cfType_Exponent_Inf_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_cfType_Exponent_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_32         : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_6                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C5_out1_1                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bExponent_0_bMantissa_1_out1  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C3_out1_1                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C2_out1_1                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bExponent_0_bMantissa_1_out1_1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_0_aMantissa_1_out1  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C2_out1_2                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_mant_b_0_1_out1               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_7                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_exp_b_cfType_Exponent_Inf_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_exp_a_cfType_Exponent_Inf_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_cfType_Exponent_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in1_unsigned(31);
  aExponent <= nfp_in1_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in1_unsigned(22 DOWNTO 0);

  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 32 bit word into FP sign, exponent, mantissa
  bSign <= nfp_in2_unsigned(31);
  bExponent <= nfp_in2_unsigned(30 DOWNTO 23);
  bMantissa <= nfp_in2_unsigned(22 DOWNTO 0);

  tmp_out1 <= aSign XOR bSign;

  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN aExponent = to_unsigned(16#FF#, 8) ELSE
      '0';

  
  bExponent_cfType_Exponent_I_out1 <= '1' WHEN bExponent = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaaExponent_cfType_Exponent_out1 <= aExponent_cfType_Exponent_I_out1 OR bExponent_cfType_Exponent_I_out1;

  
  aExponent_0_out1 <= '1' WHEN aExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  Constant_out1 <= to_unsigned(16#000000#, 23);

  
  Switch_out1 <= aMantissa WHEN aExponent_0_out1 = '0' ELSE
      Constant_out1;

  
  aMantissa_0_out1 <= '1' WHEN Switch_out1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  alphaaExponent_0_aMantissa_out1 <= aExponent_0_out1 AND aMantissa_0_out1;

  
  bExponent_0_out1 <= '1' WHEN bExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  Constant_out1_1 <= to_unsigned(16#000000#, 23);

  
  Switch_out1_1 <= bMantissa WHEN bExponent_0_out1 = '0' ELSE
      Constant_out1_1;

  
  bMantissa_0_out1 <= '1' WHEN Switch_out1_1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  alphabExponent_0_bMantissa_out1 <= bExponent_0_out1 AND bMantissa_0_out1;

  alphaExponent_0_cfType_Exp_out1 <= aExponent_0_out1 OR aExponent_cfType_Exponent_I_out1;

  alpha1_out1 <= '1';

  alpha0_out1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1 <= alpha1_out1 WHEN alphaExponent_0_cfType_Exp_out1 = '0' ELSE
      alpha0_out1;

  Bit_Concat1_out1 <= if_Exponent_0_cfType_Exp_out1 & Switch_out1;

  alphaExponent_0_cfType_Exp_out1_1 <= bExponent_0_out1 OR bExponent_cfType_Exponent_I_out1;

  alpha1_out1_1 <= '1';

  alpha0_out1_1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1_1 <= alpha1_out1_1 WHEN alphaExponent_0_cfType_Exp_out1_1 = '0' ELSE
      alpha0_out1_1;

  Bit_Concat1_out1_1 <= if_Exponent_0_cfType_Exp_out1_1 & Switch_out1_1;

  
  mant_a_norm_mant_b_norm_relop1 <= '1' WHEN Bit_Concat1_out1 < Bit_Concat1_out1_1 ELSE
      '0';

  C_out1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= aExponent WHEN aExponent_0_out1 = '0' ELSE
      C_out1;

  DTC_out1 <= signed(resize(if_Exponent_0_out1, 10));

  cast_1_out1 <= to_signed(16#001#, 10);

  exp_a_norm_cast_1_out1 <= DTC_out1 - cast_1_out1;

  C_out1_1 <= to_unsigned(16#01#, 8);

  
  if_mant_a_norm_mant_b_norm_out1 <= DTC_out1 WHEN mant_a_norm_mant_b_norm_relop1 = '0' ELSE
      exp_a_norm_cast_1_out1;

  
  if_Exponent_0_out1_1 <= bExponent WHEN bExponent_0_out1 = '0' ELSE
      C_out1_1;

  DTC1_out1 <= signed(resize(if_Exponent_0_out1_1, 10));

  exp_a_norm_exp_b_norm_out1 <= if_mant_a_norm_mant_b_norm_out1 - DTC1_out1;

  cast_cfType_ExponentBias_lik_out1 <= to_signed(16#07F#, 10);

  exp_a_norm_exp_b_norm_cast_out1 <= exp_a_norm_exp_b_norm_out1 + cast_cfType_ExponentBias_lik_out1;

  
  exp_tmp_2_cfType_ExponentBi_out1 <= '1' WHEN exp_a_norm_exp_b_norm_cast_out1 >= to_signed(16#0FF#, 10) ELSE
      '0';

  
  exp_tmp_1_out1 <= '1' WHEN exp_a_norm_exp_b_norm_cast_out1 < to_signed(16#001#, 10) ELSE
      '0';

  C3_out1 <= to_unsigned(16#00#, 5);

  
  exp_tmp_0_out1 <= '1' WHEN exp_a_norm_exp_b_norm_cast_out1 = to_signed(16#000#, 10) ELSE
      '0';

  C1_out1 <= to_unsigned(16#19#, 5);

  C_out1_2 <= to_unsigned(16#01#, 5);

  
  if_exp_tmp_0_out1 <= C1_out1 WHEN exp_tmp_0_out1 = '0' ELSE
      C_out1_2;

  
  if_exp_tmp_1_1_out1 <= C3_out1 WHEN exp_tmp_1_out1 = '0' ELSE
      if_exp_tmp_0_out1;

  C5_out1 <= to_unsigned(16#19#, 5);

  
  if_exp_tmp_2_cfType_ExponentB_1_out1 <= if_exp_tmp_1_1_out1 WHEN exp_tmp_2_cfType_ExponentBi_out1 = '0' ELSE
      C5_out1;

  
  shift_length_1_out1 <= '1' WHEN if_exp_tmp_2_cfType_ExponentB_1_out1 = to_unsigned(16#01#, 5) ELSE
      '0';

  
  shift_length_1_out1_1 <= '1' WHEN if_exp_tmp_2_cfType_ExponentB_1_out1 > to_unsigned(16#01#, 5) ELSE
      '0';

  C_out1_3 <= '1';

  alpha0_out1_2 <= to_unsigned(16#0#, 4);

  Bit_Concat_out1 <= alpha0_out1_2 & Bit_Concat1_out1;

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat_out1);

  bitsll_mant_a_norm_1_out1 <= reinterpretcast_bitconcat_fi_0_out1 sll 1;

  
  if_mant_a_norm_mant_b_norm_1_out1 <= reinterpretcast_bitconcat_fi_0_out1 WHEN mant_a_norm_mant_b_norm_relop1 = '0' ELSE
      bitsll_mant_a_norm_1_out1;

  Bit_Slice1_out1 <= unsigned(if_mant_a_norm_mant_b_norm_1_out1(25 DOWNTO 0));

  Data_Type_Conversion1_out1 <= signed(Bit_Slice1_out1);

  alpha1_out1_2 <= to_unsigned(16#0#, 4);

  Bit_Concat1_out1_2 <= alpha1_out1_2 & Bit_Concat1_out1_1;

  reinterpretcast_bitconcat_fi_0_out1_1 <= signed(Bit_Concat1_out1_2);

  Unary_Minus2_in0 <=  - (resize(reinterpretcast_bitconcat_fi_0_out1_1, 29));
  Unary_Minus2_out1 <= Unary_Minus2_in0(27 DOWNTO 0);

  Bit_Slice_out1 <= unsigned(Unary_Minus2_out1(25 DOWNTO 0));

  Data_Type_Conversion_out1 <= signed(Bit_Slice_out1);

  R_mant_b_norm_out1 <= Data_Type_Conversion1_out1 + Data_Type_Conversion_out1;

  bitsll_R_1_out1 <= R_mant_b_norm_out1 sll 1;

  R_mant_b_norm_out1_1 <= bitsll_R_1_out1 + Data_Type_Conversion_out1;

  Bit_Slice_out1_1 <= R_mant_b_norm_out1_1(25);

  Logical_Operator_out1 <=  NOT Bit_Slice_out1_1;

  Bit_Concat_out1_1 <= unsigned'(C_out1_3 & Logical_Operator_out1);

  
  if_tmp_0_1_out1 <= R_mant_b_norm_out1_1 WHEN Bit_Slice_out1_1 = '0' ELSE
      bitsll_R_1_out1;

  bitsll_R_1_out1_1 <= if_tmp_0_1_out1 sll 1;

  R_mant_b_norm_out1_2 <= bitsll_R_1_out1_1 + Data_Type_Conversion_out1;

  Bit_Slice_out1_2 <= R_mant_b_norm_out1_2(25);

  Logical_Operator_out1_1 <=  NOT Bit_Slice_out1_2;

  Bit_Concat_out1_2 <= Bit_Concat_out1_1 & Logical_Operator_out1_1;

  
  if_tmp_0_1_out1_1 <= R_mant_b_norm_out1_2 WHEN Bit_Slice_out1_2 = '0' ELSE
      bitsll_R_1_out1_1;

  bitsll_R_1_out1_2 <= if_tmp_0_1_out1_1 sll 1;

  R_mant_b_norm_out1_3 <= bitsll_R_1_out1_2 + Data_Type_Conversion_out1;

  Bit_Slice_out1_3 <= R_mant_b_norm_out1_3(25);

  Logical_Operator_out1_2 <=  NOT Bit_Slice_out1_3;

  Bit_Concat_out1_3 <= Bit_Concat_out1_2 & Logical_Operator_out1_2;

  
  if_tmp_0_1_out1_2 <= R_mant_b_norm_out1_3 WHEN Bit_Slice_out1_3 = '0' ELSE
      bitsll_R_1_out1_2;

  bitsll_R_1_out1_3 <= if_tmp_0_1_out1_2 sll 1;

  R_mant_b_norm_out1_4 <= bitsll_R_1_out1_3 + Data_Type_Conversion_out1;

  Bit_Slice_out1_4 <= R_mant_b_norm_out1_4(25);

  Logical_Operator_out1_3 <=  NOT Bit_Slice_out1_4;

  Bit_Concat_out1_4 <= Bit_Concat_out1_3 & Logical_Operator_out1_3;

  
  if_tmp_0_1_out1_3 <= R_mant_b_norm_out1_4 WHEN Bit_Slice_out1_4 = '0' ELSE
      bitsll_R_1_out1_3;

  bitsll_R_1_out1_4 <= if_tmp_0_1_out1_3 sll 1;

  R_mant_b_norm_out1_5 <= bitsll_R_1_out1_4 + Data_Type_Conversion_out1;

  Bit_Slice_out1_5 <= R_mant_b_norm_out1_5(25);

  Logical_Operator_out1_4 <=  NOT Bit_Slice_out1_5;

  Bit_Concat_out1_5 <= Bit_Concat_out1_4 & Logical_Operator_out1_4;

  
  if_tmp_0_1_out1_4 <= R_mant_b_norm_out1_5 WHEN Bit_Slice_out1_5 = '0' ELSE
      bitsll_R_1_out1_4;

  bitsll_R_1_out1_5 <= if_tmp_0_1_out1_4 sll 1;

  R_mant_b_norm_out1_6 <= bitsll_R_1_out1_5 + Data_Type_Conversion_out1;

  Bit_Slice_out1_6 <= R_mant_b_norm_out1_6(25);

  Logical_Operator_out1_5 <=  NOT Bit_Slice_out1_6;

  Bit_Concat_out1_6 <= Bit_Concat_out1_5 & Logical_Operator_out1_5;

  
  if_tmp_0_1_out1_5 <= R_mant_b_norm_out1_6 WHEN Bit_Slice_out1_6 = '0' ELSE
      bitsll_R_1_out1_5;

  bitsll_R_1_out1_6 <= if_tmp_0_1_out1_5 sll 1;

  R_mant_b_norm_out1_7 <= bitsll_R_1_out1_6 + Data_Type_Conversion_out1;

  Bit_Slice_out1_7 <= R_mant_b_norm_out1_7(25);

  Logical_Operator_out1_6 <=  NOT Bit_Slice_out1_7;

  Bit_Concat_out1_7 <= Bit_Concat_out1_6 & Logical_Operator_out1_6;

  
  if_tmp_0_1_out1_6 <= R_mant_b_norm_out1_7 WHEN Bit_Slice_out1_7 = '0' ELSE
      bitsll_R_1_out1_6;

  bitsll_R_1_out1_7 <= if_tmp_0_1_out1_6 sll 1;

  R_mant_b_norm_out1_8 <= bitsll_R_1_out1_7 + Data_Type_Conversion_out1;

  Bit_Slice_out1_8 <= R_mant_b_norm_out1_8(25);

  Logical_Operator_out1_7 <=  NOT Bit_Slice_out1_8;

  Bit_Concat_out1_8 <= Bit_Concat_out1_7 & Logical_Operator_out1_7;

  
  if_tmp_0_1_out1_7 <= R_mant_b_norm_out1_8 WHEN Bit_Slice_out1_8 = '0' ELSE
      bitsll_R_1_out1_7;

  bitsll_R_1_out1_8 <= if_tmp_0_1_out1_7 sll 1;

  R_mant_b_norm_out1_9 <= bitsll_R_1_out1_8 + Data_Type_Conversion_out1;

  Bit_Slice_out1_9 <= R_mant_b_norm_out1_9(25);

  Logical_Operator_out1_8 <=  NOT Bit_Slice_out1_9;

  Bit_Concat_out1_9 <= Bit_Concat_out1_8 & Logical_Operator_out1_8;

  
  if_tmp_0_1_out1_8 <= R_mant_b_norm_out1_9 WHEN Bit_Slice_out1_9 = '0' ELSE
      bitsll_R_1_out1_8;

  bitsll_R_1_out1_9 <= if_tmp_0_1_out1_8 sll 1;

  R_mant_b_norm_out1_10 <= bitsll_R_1_out1_9 + Data_Type_Conversion_out1;

  Bit_Slice_out1_10 <= R_mant_b_norm_out1_10(25);

  Logical_Operator_out1_9 <=  NOT Bit_Slice_out1_10;

  Bit_Concat_out1_10 <= Bit_Concat_out1_9 & Logical_Operator_out1_9;

  
  if_tmp_0_1_out1_9 <= R_mant_b_norm_out1_10 WHEN Bit_Slice_out1_10 = '0' ELSE
      bitsll_R_1_out1_9;

  bitsll_R_1_out1_10 <= if_tmp_0_1_out1_9 sll 1;

  R_mant_b_norm_out1_11 <= bitsll_R_1_out1_10 + Data_Type_Conversion_out1;

  Bit_Slice_out1_11 <= R_mant_b_norm_out1_11(25);

  Logical_Operator_out1_10 <=  NOT Bit_Slice_out1_11;

  Bit_Concat_out1_11 <= Bit_Concat_out1_10 & Logical_Operator_out1_10;

  
  if_tmp_0_1_out1_10 <= R_mant_b_norm_out1_11 WHEN Bit_Slice_out1_11 = '0' ELSE
      bitsll_R_1_out1_10;

  bitsll_R_1_out1_11 <= if_tmp_0_1_out1_10 sll 1;

  R_mant_b_norm_out1_12 <= bitsll_R_1_out1_11 + Data_Type_Conversion_out1;

  Bit_Slice_out1_12 <= R_mant_b_norm_out1_12(25);

  Logical_Operator_out1_11 <=  NOT Bit_Slice_out1_12;

  Bit_Concat_out1_12 <= Bit_Concat_out1_11 & Logical_Operator_out1_11;

  
  if_tmp_0_1_out1_11 <= R_mant_b_norm_out1_12 WHEN Bit_Slice_out1_12 = '0' ELSE
      bitsll_R_1_out1_11;

  bitsll_R_1_out1_12 <= if_tmp_0_1_out1_11 sll 1;

  R_mant_b_norm_out1_13 <= bitsll_R_1_out1_12 + Data_Type_Conversion_out1;

  Bit_Slice_out1_13 <= R_mant_b_norm_out1_13(25);

  Logical_Operator_out1_12 <=  NOT Bit_Slice_out1_13;

  Bit_Concat_out1_13 <= Bit_Concat_out1_12 & Logical_Operator_out1_12;

  
  if_tmp_0_1_out1_12 <= R_mant_b_norm_out1_13 WHEN Bit_Slice_out1_13 = '0' ELSE
      bitsll_R_1_out1_12;

  bitsll_R_1_out1_13 <= if_tmp_0_1_out1_12 sll 1;

  R_mant_b_norm_out1_14 <= bitsll_R_1_out1_13 + Data_Type_Conversion_out1;

  Bit_Slice_out1_14 <= R_mant_b_norm_out1_14(25);

  Logical_Operator_out1_13 <=  NOT Bit_Slice_out1_14;

  Bit_Concat_out1_14 <= Bit_Concat_out1_13 & Logical_Operator_out1_13;

  
  if_tmp_0_1_out1_13 <= R_mant_b_norm_out1_14 WHEN Bit_Slice_out1_14 = '0' ELSE
      bitsll_R_1_out1_13;

  bitsll_R_1_out1_14 <= if_tmp_0_1_out1_13 sll 1;

  R_mant_b_norm_out1_15 <= bitsll_R_1_out1_14 + Data_Type_Conversion_out1;

  Bit_Slice_out1_15 <= R_mant_b_norm_out1_15(25);

  Logical_Operator_out1_14 <=  NOT Bit_Slice_out1_15;

  Bit_Concat_out1_15 <= Bit_Concat_out1_14 & Logical_Operator_out1_14;

  
  if_tmp_0_1_out1_14 <= R_mant_b_norm_out1_15 WHEN Bit_Slice_out1_15 = '0' ELSE
      bitsll_R_1_out1_14;

  bitsll_R_1_out1_15 <= if_tmp_0_1_out1_14 sll 1;

  R_mant_b_norm_out1_16 <= bitsll_R_1_out1_15 + Data_Type_Conversion_out1;

  Bit_Slice_out1_16 <= R_mant_b_norm_out1_16(25);

  Logical_Operator_out1_15 <=  NOT Bit_Slice_out1_16;

  Bit_Concat_out1_16 <= Bit_Concat_out1_15 & Logical_Operator_out1_15;

  
  if_tmp_0_1_out1_15 <= R_mant_b_norm_out1_16 WHEN Bit_Slice_out1_16 = '0' ELSE
      bitsll_R_1_out1_15;

  bitsll_R_1_out1_16 <= if_tmp_0_1_out1_15 sll 1;

  R_mant_b_norm_out1_17 <= bitsll_R_1_out1_16 + Data_Type_Conversion_out1;

  Bit_Slice_out1_17 <= R_mant_b_norm_out1_17(25);

  Logical_Operator_out1_16 <=  NOT Bit_Slice_out1_17;

  Bit_Concat_out1_17 <= Bit_Concat_out1_16 & Logical_Operator_out1_16;

  
  if_tmp_0_1_out1_16 <= R_mant_b_norm_out1_17 WHEN Bit_Slice_out1_17 = '0' ELSE
      bitsll_R_1_out1_16;

  bitsll_R_1_out1_17 <= if_tmp_0_1_out1_16 sll 1;

  R_mant_b_norm_out1_18 <= bitsll_R_1_out1_17 + Data_Type_Conversion_out1;

  Bit_Slice_out1_18 <= R_mant_b_norm_out1_18(25);

  Logical_Operator_out1_17 <=  NOT Bit_Slice_out1_18;

  Bit_Concat_out1_18 <= Bit_Concat_out1_17 & Logical_Operator_out1_17;

  
  if_tmp_0_1_out1_17 <= R_mant_b_norm_out1_18 WHEN Bit_Slice_out1_18 = '0' ELSE
      bitsll_R_1_out1_17;

  bitsll_R_1_out1_18 <= if_tmp_0_1_out1_17 sll 1;

  R_mant_b_norm_out1_19 <= bitsll_R_1_out1_18 + Data_Type_Conversion_out1;

  Bit_Slice_out1_19 <= R_mant_b_norm_out1_19(25);

  Logical_Operator_out1_18 <=  NOT Bit_Slice_out1_19;

  Bit_Concat_out1_19 <= Bit_Concat_out1_18 & Logical_Operator_out1_18;

  
  if_tmp_0_1_out1_18 <= R_mant_b_norm_out1_19 WHEN Bit_Slice_out1_19 = '0' ELSE
      bitsll_R_1_out1_18;

  bitsll_R_1_out1_19 <= if_tmp_0_1_out1_18 sll 1;

  R_mant_b_norm_out1_20 <= bitsll_R_1_out1_19 + Data_Type_Conversion_out1;

  Bit_Slice_out1_20 <= R_mant_b_norm_out1_20(25);

  Logical_Operator_out1_19 <=  NOT Bit_Slice_out1_20;

  Bit_Concat_out1_20 <= Bit_Concat_out1_19 & Logical_Operator_out1_19;

  
  if_tmp_0_1_out1_19 <= R_mant_b_norm_out1_20 WHEN Bit_Slice_out1_20 = '0' ELSE
      bitsll_R_1_out1_19;

  bitsll_R_1_out1_20 <= if_tmp_0_1_out1_19 sll 1;

  R_mant_b_norm_out1_21 <= bitsll_R_1_out1_20 + Data_Type_Conversion_out1;

  Bit_Slice_out1_21 <= R_mant_b_norm_out1_21(25);

  Logical_Operator_out1_20 <=  NOT Bit_Slice_out1_21;

  Bit_Concat_out1_21 <= Bit_Concat_out1_20 & Logical_Operator_out1_20;

  
  if_tmp_0_1_out1_20 <= R_mant_b_norm_out1_21 WHEN Bit_Slice_out1_21 = '0' ELSE
      bitsll_R_1_out1_20;

  bitsll_R_1_out1_21 <= if_tmp_0_1_out1_20 sll 1;

  R_mant_b_norm_out1_22 <= bitsll_R_1_out1_21 + Data_Type_Conversion_out1;

  Bit_Slice_out1_22 <= R_mant_b_norm_out1_22(25);

  Logical_Operator_out1_21 <=  NOT Bit_Slice_out1_22;

  Bit_Concat_out1_22 <= Bit_Concat_out1_21 & Logical_Operator_out1_21;

  
  if_tmp_0_1_out1_21 <= R_mant_b_norm_out1_22 WHEN Bit_Slice_out1_22 = '0' ELSE
      bitsll_R_1_out1_21;

  bitsll_R_1_out1_22 <= if_tmp_0_1_out1_21 sll 1;

  R_mant_b_norm_out1_23 <= bitsll_R_1_out1_22 + Data_Type_Conversion_out1;

  Bit_Slice_out1_23 <= R_mant_b_norm_out1_23(25);

  Logical_Operator_out1_22 <=  NOT Bit_Slice_out1_23;

  Bit_Concat_out1_23 <= Bit_Concat_out1_22 & Logical_Operator_out1_22;

  
  if_tmp_0_1_out1_22 <= R_mant_b_norm_out1_23 WHEN Bit_Slice_out1_23 = '0' ELSE
      bitsll_R_1_out1_22;

  bitsll_R_1_out1_23 <= if_tmp_0_1_out1_22 sll 1;

  R_mant_b_norm_out1_24 <= bitsll_R_1_out1_23 + Data_Type_Conversion_out1;

  Bit_Slice_out1_24 <= R_mant_b_norm_out1_24(25);

  Logical_Operator_out1_23 <=  NOT Bit_Slice_out1_24;

  Bit_Concat_out1_24 <= Bit_Concat_out1_23 & Logical_Operator_out1_23;

  C_out1_4 <= to_unsigned(16#0000000#, 25);

  
  if_shift_length_1_out1 <= Bit_Concat_out1_24 WHEN shift_length_1_out1_1 = '0' ELSE
      C_out1_4;

  bitsrl_Q_1_out1 <= Bit_Concat_out1_24 srl 1;

  
  if_shift_length_1_out1_1 <= if_shift_length_1_out1 WHEN shift_length_1_out1 = '0' ELSE
      bitsrl_Q_1_out1;

  BitSlice_out1 <= if_shift_length_1_out1_1(23 DOWNTO 0);

  Bit_Slice10_out1 <= if_exp_tmp_2_cfType_ExponentB_1_out1(4);

  Bit_Slice9_out1 <= if_exp_tmp_2_cfType_ExponentB_1_out1(3);

  Bit_Slice7_out1 <= if_exp_tmp_2_cfType_ExponentB_1_out1(2);

  Bit_Slice8_out1 <= if_exp_tmp_2_cfType_ExponentB_1_out1(1);

  Bit_Slice11_out1 <= if_exp_tmp_2_cfType_ExponentB_1_out1(0);

  Bit_Slice_out1_25 <= Bit_Concat_out1_24(2 DOWNTO 0);

  Constant_out1_2 <= '0';

  Bit_Concat_out1_25 <= Bit_Slice_out1_25 & Constant_out1_2;

  Bit_Slice_out1_26 <= Bit_Concat_out1_25(0);

  Bit_Slice1_out1_1 <= Bit_Concat_out1_25(1);

  Logical_Operator_out1_24 <= Bit_Slice1_out1_1 OR Bit_Slice_out1_26;

  
  Switch6_out1 <= Bit_Slice_out1_26 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_24;

  Bit_Slice2_out1 <= Bit_Concat_out1_25(2);

  Logical_Operator1_out1 <= Bit_Slice2_out1 OR Logical_Operator_out1_24;

  Bit_Slice3_out1 <= Bit_Concat_out1_25(3);

  Logical_Operator2_out1 <= Bit_Slice3_out1 OR Logical_Operator1_out1;

  
  Switch7_out1 <= Logical_Operator1_out1 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1;

  
  Switch3_out1 <= Switch6_out1 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1;

  Bit_Slice1_out1_2 <= Bit_Concat_out1_24(6 DOWNTO 3);

  Bit_Slice_out1_27 <= Bit_Slice1_out1_2(0);

  Logical_Operator3_out1 <= Bit_Slice_out1_27 OR Logical_Operator2_out1;

  Bit_Slice1_out1_3 <= Bit_Slice1_out1_2(1);

  Logical_Operator_out1_25 <= Bit_Slice1_out1_3 OR Logical_Operator3_out1;

  
  Switch6_out1_1 <= Logical_Operator3_out1 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_25;

  Bit_Slice2_out1_1 <= Bit_Slice1_out1_2(2);

  Logical_Operator1_out1_1 <= Bit_Slice2_out1_1 OR Logical_Operator_out1_25;

  Bit_Slice3_out1_1 <= Bit_Slice1_out1_2(3);

  Logical_Operator2_out1_1 <= Bit_Slice3_out1_1 OR Logical_Operator1_out1_1;

  
  Switch7_out1_1 <= Logical_Operator1_out1_1 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_1;

  
  Switch3_out1_1 <= Switch6_out1_1 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_1;

  
  Switch6_out1_2 <= Switch3_out1 WHEN Bit_Slice7_out1 = '0' ELSE
      Switch3_out1_1;

  Bit_Slice2_out1_2 <= Bit_Concat_out1_24(10 DOWNTO 7);

  Bit_Slice_out1_28 <= Bit_Slice2_out1_2(0);

  Logical_Operator3_out1_1 <= Bit_Slice_out1_28 OR Logical_Operator2_out1_1;

  Bit_Slice1_out1_4 <= Bit_Slice2_out1_2(1);

  Logical_Operator_out1_26 <= Bit_Slice1_out1_4 OR Logical_Operator3_out1_1;

  
  Switch6_out1_3 <= Logical_Operator3_out1_1 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_26;

  Bit_Slice2_out1_3 <= Bit_Slice2_out1_2(2);

  Logical_Operator1_out1_2 <= Bit_Slice2_out1_3 OR Logical_Operator_out1_26;

  Bit_Slice3_out1_2 <= Bit_Slice2_out1_2(3);

  Logical_Operator2_out1_2 <= Bit_Slice3_out1_2 OR Logical_Operator1_out1_2;

  
  Switch7_out1_2 <= Logical_Operator1_out1_2 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_2;

  
  Switch3_out1_2 <= Switch6_out1_3 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_2;

  Bit_Slice3_out1_3 <= Bit_Concat_out1_24(14 DOWNTO 11);

  Bit_Slice_out1_29 <= Bit_Slice3_out1_3(0);

  Logical_Operator3_out1_2 <= Bit_Slice_out1_29 OR Logical_Operator2_out1_2;

  Bit_Slice1_out1_5 <= Bit_Slice3_out1_3(1);

  Logical_Operator_out1_27 <= Bit_Slice1_out1_5 OR Logical_Operator3_out1_2;

  
  Switch6_out1_4 <= Logical_Operator3_out1_2 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_27;

  Bit_Slice2_out1_4 <= Bit_Slice3_out1_3(2);

  Logical_Operator1_out1_3 <= Bit_Slice2_out1_4 OR Logical_Operator_out1_27;

  Bit_Slice3_out1_4 <= Bit_Slice3_out1_3(3);

  Logical_Operator2_out1_3 <= Bit_Slice3_out1_4 OR Logical_Operator1_out1_3;

  
  Switch7_out1_3 <= Logical_Operator1_out1_3 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_3;

  
  Switch3_out1_3 <= Switch6_out1_4 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_3;

  
  Switch7_out1_4 <= Switch3_out1_2 WHEN Bit_Slice7_out1 = '0' ELSE
      Switch3_out1_3;

  
  Switch3_out1_4 <= Switch6_out1_2 WHEN Bit_Slice9_out1 = '0' ELSE
      Switch7_out1_4;

  Bit_Slice4_out1 <= Bit_Concat_out1_24(18 DOWNTO 15);

  Bit_Slice_out1_30 <= Bit_Slice4_out1(0);

  Logical_Operator3_out1_3 <= Bit_Slice_out1_30 OR Logical_Operator2_out1_3;

  Bit_Slice1_out1_6 <= Bit_Slice4_out1(1);

  Logical_Operator_out1_28 <= Bit_Slice1_out1_6 OR Logical_Operator3_out1_3;

  
  Switch6_out1_5 <= Logical_Operator3_out1_3 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_28;

  Bit_Slice2_out1_5 <= Bit_Slice4_out1(2);

  Logical_Operator1_out1_4 <= Bit_Slice2_out1_5 OR Logical_Operator_out1_28;

  Bit_Slice3_out1_5 <= Bit_Slice4_out1(3);

  Logical_Operator2_out1_4 <= Bit_Slice3_out1_5 OR Logical_Operator1_out1_4;

  
  Switch7_out1_5 <= Logical_Operator1_out1_4 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_4;

  
  Switch3_out1_5 <= Switch6_out1_5 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_5;

  Bit_Slice5_out1 <= Bit_Concat_out1_24(22 DOWNTO 19);

  Bit_Slice_out1_31 <= Bit_Slice5_out1(0);

  Logical_Operator3_out1_4 <= Bit_Slice_out1_31 OR Logical_Operator2_out1_4;

  Bit_Slice1_out1_7 <= Bit_Slice5_out1(1);

  Logical_Operator_out1_29 <= Bit_Slice1_out1_7 OR Logical_Operator3_out1_4;

  
  Switch6_out1_6 <= Logical_Operator3_out1_4 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_29;

  Bit_Slice2_out1_6 <= Bit_Slice5_out1(2);

  Logical_Operator1_out1_5 <= Bit_Slice2_out1_6 OR Logical_Operator_out1_29;

  Bit_Slice3_out1_6 <= Bit_Slice5_out1(3);

  Logical_Operator2_out1_5 <= Bit_Slice3_out1_6 OR Logical_Operator1_out1_5;

  
  Switch7_out1_6 <= Logical_Operator1_out1_5 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_5;

  
  Switch3_out1_6 <= Switch6_out1_6 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_6;

  
  Switch4_out1 <= Switch3_out1_5 WHEN Bit_Slice7_out1 = '0' ELSE
      Switch3_out1_6;

  Logical_Operator_out1_30 <= Bit_Slice7_out1 OR (Bit_Slice11_out1 OR Bit_Slice8_out1);

  Bit_Slice6_out1 <= Bit_Concat_out1_24(24 DOWNTO 23);

  Bit_Slice_out1_32 <= Bit_Slice6_out1(0);

  Logical_Operator3_out1_5 <= Bit_Slice_out1_32 OR Logical_Operator2_out1_5;

  Bit_Slice1_out1_8 <= Bit_Slice6_out1(1);

  Logical_Operator_out1_31 <= Bit_Slice1_out1_8 OR Logical_Operator3_out1_5;

  
  Switch7_out1_7 <= Logical_Operator3_out1_5 WHEN Logical_Operator_out1_30 = '0' ELSE
      Logical_Operator_out1_31;

  BitSlice_out1_1 <= BitSlice_out1(0);

  BitSlice1_out1 <= BitSlice_out1(1);

  
  if_tmp_0_1_out1_23 <= R_mant_b_norm_out1_24 WHEN Bit_Slice_out1_24 = '0' ELSE
      bitsll_R_1_out1_23;

  bitsll_R_1_out1_24 <= if_tmp_0_1_out1_23 sll 1;

  
  R_0_out1 <= '1' WHEN bitsll_R_1_out1_24 /= to_signed(16#0000000#, 26) ELSE
      '0';

  
  Switch1_out1 <= Switch4_out1 WHEN Bit_Slice9_out1 = '0' ELSE
      Switch7_out1_7;

  
  Switch2_out1 <= Switch3_out1_4 WHEN Bit_Slice10_out1 = '0' ELSE
      Switch1_out1;

  sticky_bitsll_Q_Q_WordLen_out1 <= R_0_out1 OR Switch2_out1;

  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1 OR sticky_bitsll_Q_Q_WordLen_out1;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_1 AND alphabitget_Mant_tmp_2_0_out1;

  alpha0_out1_3 <= '0';

  BitSlice4_out1 <= BitSlice_out1(23 DOWNTO 1);

  Bit_Concat_out1_26 <= alpha0_out1_3 & BitSlice4_out1;

  alpha2_out1 <= to_unsigned(16#000001#, 24);

  Mant_tmp_2_out1 <= Bit_Concat_out1_26 + alpha2_out1;

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_26 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_2_out1;

  BitSlice2_out1 <= if_bitget_Mant_tmp_1_0_out1(23);

  DTC1_out1_1 <= unsigned(exp_a_norm_exp_b_norm_cast_out1(7 DOWNTO 0));

  C2_out1 <= to_unsigned(16#00#, 8);

  
  if_exp_tmp_1_out1 <= DTC1_out1_1 WHEN exp_tmp_1_out1 = '0' ELSE
      C2_out1;

  C4_out1 <= to_unsigned(16#FF#, 8);

  
  if_exp_tmp_2_cfType_ExponentB_out1 <= if_exp_tmp_1_out1 WHEN exp_tmp_2_cfType_ExponentBi_out1 = '0' ELSE
      C4_out1;

  alpha1_out1_3 <= to_unsigned(16#01#, 8);

  Exp_1_out1 <= if_exp_tmp_2_cfType_ExponentB_out1 + alpha1_out1_3;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= if_exp_tmp_2_cfType_ExponentB_out1 WHEN BitSlice2_out1 = '0' ELSE
      Exp_1_out1;

  C4_out1_1 <= to_unsigned(16#FF#, 8);

  
  if_bExponent_0_bMantissa_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN alphabExponent_0_bMantissa_out1 = '0' ELSE
      C4_out1_1;

  C1_out1_1 <= to_unsigned(16#00#, 8);

  C_out1_5 <= to_unsigned(16#FF#, 8);

  
  if_bExponent_0_bMantissa_out1_1 <= C1_out1_1 WHEN alphabExponent_0_bMantissa_out1 = '0' ELSE
      C_out1_5;

  
  if_aExponent_0_aMantissa_out1 <= if_bExponent_0_bMantissa_out1 WHEN alphaaExponent_0_aMantissa_out1 = '0' ELSE
      if_bExponent_0_bMantissa_out1_1;

  C1_out1_2 <= to_unsigned(16#00#, 8);

  
  if_mant_b_0_out1 <= bExponent WHEN bMantissa_0_out1 = '0' ELSE
      C1_out1_2;

  
  if_exp_a_cfType_Exponent_Inf_out1 <= if_mant_b_0_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      aExponent;

  
  if_aExponent_cfType_Exponent_out1 <= if_aExponent_0_aMantissa_out1 WHEN alphaaExponent_cfType_Exponent_out1 = '0' ELSE
      if_exp_a_cfType_Exponent_Inf_out1;

  
  Compare_To_Zero_out1 <= '1' WHEN if_exp_tmp_2_cfType_ExponentB_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Logical_Operator_out1_32 <= BitSlice2_out1 OR Compare_To_Zero_out1;

  BitSlice3_out1 <= if_bitget_Mant_tmp_1_0_out1(22 DOWNTO 0);

  C_out1_6 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1 WHEN Logical_Operator_out1_32 = '0' ELSE
      C_out1_6;

  C5_out1_1 <= to_unsigned(16#000000#, 23);

  
  if_bExponent_0_bMantissa_1_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 WHEN alphabExponent_0_bMantissa_out1 = '0' ELSE
      C5_out1_1;

  C3_out1_1 <= to_unsigned(16#000000#, 23);

  C2_out1_1 <= to_unsigned(16#400000#, 23);

  
  if_bExponent_0_bMantissa_1_out1_1 <= C3_out1_1 WHEN alphabExponent_0_bMantissa_out1 = '0' ELSE
      C2_out1_1;

  
  if_aExponent_0_aMantissa_1_out1 <= if_bExponent_0_bMantissa_1_out1 WHEN alphaaExponent_0_aMantissa_out1 = '0' ELSE
      if_bExponent_0_bMantissa_1_out1_1;

  C2_out1_2 <= to_unsigned(16#000000#, 23);

  
  if_mant_b_0_1_out1 <= Switch_out1_1 WHEN bMantissa_0_out1 = '0' ELSE
      C2_out1_2;

  C_out1_7 <= to_unsigned(16#400000#, 23);

  
  if_exp_b_cfType_Exponent_Inf_out1 <= Switch_out1 WHEN bExponent_cfType_Exponent_I_out1 = '0' ELSE
      C_out1_7;

  
  if_exp_a_cfType_Exponent_Inf_1_out1 <= if_mant_b_0_1_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      if_exp_b_cfType_Exponent_Inf_out1;

  
  if_aExponent_cfType_Exponent_1_out1 <= if_aExponent_0_aMantissa_1_out1 WHEN alphaaExponent_cfType_Exponent_out1 = '0' ELSE
      if_exp_a_cfType_Exponent_Inf_1_out1;

  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= tmp_out1 & if_aExponent_cfType_Exponent_out1 & if_aExponent_cfType_Exponent_1_out1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

