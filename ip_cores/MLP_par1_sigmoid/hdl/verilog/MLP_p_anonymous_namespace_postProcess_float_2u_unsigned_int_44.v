// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_p_anonymous_namespace_postProcess_float_2u_unsigned_int_44 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_pad_dout,
        p_pad_empty_n,
        p_pad_read,
        p_sum_din,
        p_sum_full_n,
        p_sum_write,
        p_numElems_dout,
        p_numElems_empty_n,
        p_numElems_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state24 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_pad_dout;
input   p_pad_empty_n;
output   p_pad_read;
output  [31:0] p_sum_din;
input   p_sum_full_n;
output   p_sum_write;
input  [31:0] p_numElems_dout;
input   p_numElems_empty_n;
output   p_numElems_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_pad_read;
reg p_sum_write;
reg p_numElems_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_pad_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln69_reg_251;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    p_sum_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] icmp_ln79_reg_260;
reg   [0:0] icmp_ln79_reg_260_pp0_iter5_reg;
reg    p_numElems_blk_n;
reg   [61:0] indvar_flatten_reg_79;
reg   [29:0] i_reg_91;
reg   [31:0] l_finalSum_reg_102;
reg   [31:0] reg_117;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
wire    ap_block_state15_pp0_stage1_iter3;
wire    ap_block_state19_pp0_stage1_iter4;
reg    ap_block_state23_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_state13_pp0_stage3_iter2;
wire    ap_block_state17_pp0_stage3_iter3;
wire    ap_block_state21_pp0_stage3_iter4;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] reg_121;
reg    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_state12_pp0_stage2_iter2;
wire    ap_block_state16_pp0_stage2_iter3;
wire    ap_block_state20_pp0_stage2_iter4;
reg    ap_block_pp0_stage2_11001;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_state14_pp0_stage0_iter3;
wire    ap_block_state18_pp0_stage0_iter4;
wire    ap_block_state22_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [29:0] trunc_ln_fu_131_p4;
reg   [29:0] trunc_ln_reg_236;
reg    ap_block_state1;
wire   [30:0] sub7_i_fu_145_p2;
reg   [30:0] sub7_i_reg_241;
wire   [61:0] mul_ln61_fu_159_p2;
reg   [61:0] mul_ln61_reg_246;
wire   [0:0] icmp_ln69_fu_165_p2;
reg   [0:0] icmp_ln69_reg_251_pp0_iter1_reg;
reg   [0:0] icmp_ln69_reg_251_pp0_iter2_reg;
reg   [0:0] icmp_ln69_reg_251_pp0_iter3_reg;
reg   [0:0] icmp_ln69_reg_251_pp0_iter4_reg;
wire   [0:0] icmp_ln71_fu_170_p2;
reg   [0:0] icmp_ln71_reg_255;
reg   [0:0] icmp_ln71_reg_255_pp0_iter1_reg;
reg   [0:0] icmp_ln71_reg_255_pp0_iter2_reg;
reg   [0:0] icmp_ln71_reg_255_pp0_iter3_reg;
wire   [0:0] icmp_ln79_fu_187_p2;
reg   [0:0] icmp_ln79_reg_260_pp0_iter1_reg;
reg   [0:0] icmp_ln79_reg_260_pp0_iter2_reg;
reg   [0:0] icmp_ln79_reg_260_pp0_iter3_reg;
reg   [0:0] icmp_ln79_reg_260_pp0_iter4_reg;
wire   [29:0] i_13_fu_192_p2;
reg   [29:0] i_13_reg_264;
wire   [61:0] add_ln69_fu_198_p2;
reg   [61:0] add_ln69_reg_269;
wire   [31:0] tmp_fu_204_p1;
wire   [31:0] tmp_7_fu_209_p1;
wire   [31:0] tmp_8_fu_214_p1;
wire   [31:0] tmp_9_fu_219_p1;
wire   [31:0] grp_fu_113_p2;
reg   [31:0] add_i2_i_i_reg_294;
reg   [31:0] add_i_i_i_reg_299;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] add_i_i_reg_304;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] select_ln69_1_fu_224_p3;
reg   [31:0] l_finalSum_1_reg_314;
reg    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter4;
reg    ap_condition_pp0_exit_iter4_state18;
reg   [61:0] ap_phi_mux_indvar_flatten_phi_fu_83_p4;
reg   [29:0] ap_phi_mux_i_phi_fu_95_p4;
reg   [31:0] ap_phi_mux_l_finalSum_phi_fu_106_p4;
reg    ap_block_pp0_stage1_01001;
reg   [31:0] grp_fu_113_p0;
reg   [31:0] grp_fu_113_p1;
wire   [31:0] add_ln68_fu_125_p2;
wire   [30:0] zext_ln68_fu_141_p1;
wire   [29:0] mul_ln61_fu_159_p0;
wire   [31:0] mul_ln61_fu_159_p1;
wire   [29:0] select_ln69_fu_175_p3;
wire   [30:0] zext_ln71_fu_183_p1;
reg    grp_fu_113_ce;
wire    ap_CS_fsm_state24;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [61:0] mul_ln61_fu_159_p00;
wire   [61:0] mul_ln61_fu_159_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

MLP_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U205(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_113_p0),
    .din1(grp_fu_113_p1),
    .ce(grp_fu_113_ce),
    .dout(grp_fu_113_p2)
);

MLP_mul_30ns_32ns_62_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_30ns_32ns_62_1_1_U206(
    .din0(mul_ln61_fu_159_p0),
    .din1(mul_ln61_fu_159_p1),
    .dout(mul_ln61_fu_159_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_numElems_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter4_state18))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter4_state18) & (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
        end else if ((((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((~((p_numElems_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_91 <= i_13_reg_264;
    end else if ((~((p_numElems_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_91 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_79 <= add_ln69_reg_269;
    end else if ((~((p_numElems_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_79 <= 62'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_reg_251_pp0_iter4_reg == 1'd0))) begin
        l_finalSum_reg_102 <= grp_fu_113_p2;
    end else if ((~((p_numElems_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_finalSum_reg_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln69_reg_251_pp0_iter1_reg == 1'd0))) begin
        add_i2_i_i_reg_294 <= grp_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_251_pp0_iter2_reg == 1'd0))) begin
        add_i_i_i_reg_299 <= grp_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln69_reg_251_pp0_iter3_reg == 1'd0))) begin
        add_i_i_reg_304 <= grp_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln69_reg_269 <= add_ln69_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_fu_165_p2 == 1'd0))) begin
        i_13_reg_264 <= i_13_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln69_reg_251 <= icmp_ln69_fu_165_p2;
        icmp_ln69_reg_251_pp0_iter1_reg <= icmp_ln69_reg_251;
        icmp_ln69_reg_251_pp0_iter2_reg <= icmp_ln69_reg_251_pp0_iter1_reg;
        icmp_ln69_reg_251_pp0_iter3_reg <= icmp_ln69_reg_251_pp0_iter2_reg;
        icmp_ln69_reg_251_pp0_iter4_reg <= icmp_ln69_reg_251_pp0_iter3_reg;
        icmp_ln71_reg_255_pp0_iter1_reg <= icmp_ln71_reg_255;
        icmp_ln71_reg_255_pp0_iter2_reg <= icmp_ln71_reg_255_pp0_iter1_reg;
        icmp_ln71_reg_255_pp0_iter3_reg <= icmp_ln71_reg_255_pp0_iter2_reg;
        icmp_ln79_reg_260_pp0_iter1_reg <= icmp_ln79_reg_260;
        icmp_ln79_reg_260_pp0_iter2_reg <= icmp_ln79_reg_260_pp0_iter1_reg;
        icmp_ln79_reg_260_pp0_iter3_reg <= icmp_ln79_reg_260_pp0_iter2_reg;
        icmp_ln79_reg_260_pp0_iter4_reg <= icmp_ln79_reg_260_pp0_iter3_reg;
        icmp_ln79_reg_260_pp0_iter5_reg <= icmp_ln79_reg_260_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_fu_165_p2 == 1'd0))) begin
        icmp_ln71_reg_255 <= icmp_ln71_fu_170_p2;
        icmp_ln79_reg_260 <= icmp_ln79_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_reg_251_pp0_iter4_reg == 1'd0))) begin
        l_finalSum_1_reg_314 <= grp_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_numElems_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln61_reg_246 <= mul_ln61_fu_159_p2;
        sub7_i_reg_241 <= sub7_i_fu_145_p2;
        trunc_ln_reg_236 <= {{add_ln68_fu_125_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_117 <= p_pad_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_121 <= p_pad_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_condition_pp0_exit_iter4_state18 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter4_state18 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_251 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_95_p4 = i_13_reg_264;
    end else begin
        ap_phi_mux_i_phi_fu_95_p4 = i_reg_91;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_83_p4 = add_ln69_reg_269;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_83_p4 = indvar_flatten_reg_79;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_reg_251_pp0_iter4_reg == 1'd0))) begin
        ap_phi_mux_l_finalSum_phi_fu_106_p4 = grp_fu_113_p2;
    end else begin
        ap_phi_mux_l_finalSum_phi_fu_106_p4 = l_finalSum_reg_102;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_113_ce = 1'b1;
    end else begin
        grp_fu_113_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_113_p0 = select_ln69_1_fu_224_p3;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_113_p0 = add_i_i_i_reg_299;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_113_p0 = tmp_9_fu_219_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_113_p0 = tmp_7_fu_209_p1;
    end else begin
        grp_fu_113_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_113_p1 = add_i_i_reg_304;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_113_p1 = add_i2_i_i_reg_294;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_113_p1 = tmp_8_fu_214_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_113_p1 = tmp_fu_204_p1;
    end else begin
        grp_fu_113_p1 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_numElems_blk_n = p_numElems_empty_n;
    end else begin
        p_numElems_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_numElems_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_numElems_read = 1'b1;
    end else begin
        p_numElems_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_pad_blk_n = p_pad_empty_n;
    end else begin
        p_pad_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln69_reg_251 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_pad_read = 1'b1;
    end else begin
        p_pad_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln79_reg_260_pp0_iter5_reg == 1'd1))) begin
        p_sum_blk_n = p_sum_full_n;
    end else begin
        p_sum_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln79_reg_260_pp0_iter5_reg == 1'd1))) begin
        p_sum_write = 1'b1;
    end else begin
        p_sum_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_numElems_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter4_state18)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter4_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_fu_125_p2 = (p_numElems_dout + 32'd3);

assign add_ln69_fu_198_p2 = (indvar_flatten_reg_79 + 62'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_251 == 1'd0) & (p_pad_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_251 == 1'd0) & (p_pad_empty_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (p_sum_full_n == 1'b0) & (icmp_ln79_reg_260_pp0_iter5_reg == 1'd1)) | ((icmp_ln69_reg_251 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_pad_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (p_sum_full_n == 1'b0) & (icmp_ln79_reg_260_pp0_iter5_reg == 1'd1)) | ((icmp_ln69_reg_251 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_pad_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (p_sum_full_n == 1'b0) & (icmp_ln79_reg_260_pp0_iter5_reg == 1'd1)) | ((icmp_ln69_reg_251 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_pad_empty_n == 1'b0)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((icmp_ln69_reg_251 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_pad_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((icmp_ln69_reg_251 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_pad_empty_n == 1'b0));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln69_reg_251 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_pad_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln69_reg_251 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_pad_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((p_numElems_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp0_stage1_iter5 = ((p_sum_full_n == 1'b0) & (icmp_ln79_reg_260_pp0_iter5_reg == 1'd1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln69_reg_251 == 1'd0) & (p_pad_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((icmp_ln69_reg_251 == 1'd0) & (p_pad_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((icmp_ln69_reg_251 == 1'd0) & (p_pad_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((icmp_ln69_reg_251 == 1'd0) & (p_pad_empty_n == 1'b0));
end

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_13_fu_192_p2 = (select_ln69_fu_175_p3 + 30'd1);

assign icmp_ln69_fu_165_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_83_p4 == mul_ln61_reg_246) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_170_p2 = ((ap_phi_mux_i_phi_fu_95_p4 == trunc_ln_reg_236) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_187_p2 = ((zext_ln71_fu_183_p1 == sub7_i_reg_241) ? 1'b1 : 1'b0);

assign mul_ln61_fu_159_p0 = mul_ln61_fu_159_p00;

assign mul_ln61_fu_159_p00 = trunc_ln_fu_131_p4;

assign mul_ln61_fu_159_p1 = mul_ln61_fu_159_p10;

assign mul_ln61_fu_159_p10 = p_numElems_dout;

assign p_sum_din = l_finalSum_1_reg_314;

assign select_ln69_1_fu_224_p3 = ((icmp_ln71_reg_255_pp0_iter3_reg[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_l_finalSum_phi_fu_106_p4);

assign select_ln69_fu_175_p3 = ((icmp_ln71_fu_170_p2[0:0] === 1'b1) ? 30'd0 : ap_phi_mux_i_phi_fu_95_p4);

assign sub7_i_fu_145_p2 = ($signed(zext_ln68_fu_141_p1) + $signed(31'd2147483647));

assign tmp_7_fu_209_p1 = reg_121;

assign tmp_8_fu_214_p1 = reg_117;

assign tmp_9_fu_219_p1 = reg_121;

assign tmp_fu_204_p1 = reg_117;

assign trunc_ln_fu_131_p4 = {{add_ln68_fu_125_p2[31:2]}};

assign zext_ln68_fu_141_p1 = trunc_ln_fu_131_p4;

assign zext_ln71_fu_183_p1 = select_ln69_fu_175_p3;

endmodule //MLP_p_anonymous_namespace_postProcess_float_2u_unsigned_int_44
