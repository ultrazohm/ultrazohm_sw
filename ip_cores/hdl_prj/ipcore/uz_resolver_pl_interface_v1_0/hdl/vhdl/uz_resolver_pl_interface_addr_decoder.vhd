-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_resolver_pl_interface\uz_resolver_pl_interface_addr_decoder.vhd
-- Created: 2023-01-24 16:42:50
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_resolver_pl_interface_addr_decoder
-- Source Path: uz_resolver_pl_interface/uz_resolver_pl_interface_axi_lite/uz_resolver_pl_interface_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_resolver_pl_interface_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_position_mech_2pi_AXI        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_position_el_2pi_AXI          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_omega_mech_rad_s_AXI         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_cnt_AXI                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        read_n_mech_rpm_AXI               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_resolver_polepairs_AXI      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        write_cnt_reset_AXI               :   OUT   std_logic;  -- ufix1
        write_position_intmax_AXI         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        write_machine_polepairs_AXI       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        write_bitToRPS_Factor_AXI         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_theta_m_offset_rad_AXI      :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_resolver_pl_interface_addr_decoder;


ARCHITECTURE rtl OF uz_resolver_pl_interface_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_position_mech_2pi_AXI_unsigned : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_position_el_2pi_AXI_unsigned : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_omega_mech_rad_s_AXI_unsigned : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_cnt_AXI_signed              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL read_n_mech_rpm_AXI_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_n_mech_rpm_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_cnt_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL decode_sel_omega_mech_rad_s_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_position_el_2pi_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_position_mech_2pi_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_position_mech_2pi_AXI   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_position_mech_2pi_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_position_el_2pi_AXI     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_position_el_2pi_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_omega_mech_rad_s_AXI    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_omega_mech_rad_s_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_cnt_AXI                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_slice_cnt_AXI_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_cnt_AXI_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_n_mech_rpm_AXI          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_n_mech_rpm_AXI_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_resolver_polepairs_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_resolver_polepairs_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_resolver_polepairs_AXI   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_reg_resolver_polepairs_AXI_1_1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_cnt_reset_AXI_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_cnt_reset_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL data_in_cnt_reset_AXI            : std_logic;  -- ufix1
  SIGNAL data_reg_cnt_reset_AXI_1_1       : std_logic;  -- ufix1
  SIGNAL write_concats_cnt_reset_AXI_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_position_intmax_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_position_intmax_AXI_1_1  : std_logic;  -- ufix1
  SIGNAL data_in_position_intmax_AXI      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_reg_position_intmax_AXI_1_1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_machine_polepairs_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_machine_polepairs_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_machine_polepairs_AXI    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_reg_machine_polepairs_AXI_1_1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_bitToRPS_Factor_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_bitToRPS_Factor_AXI_1_1  : std_logic;  -- ufix1
  SIGNAL data_reg_bitToRPS_Factor_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_theta_m_offset_rad_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_theta_m_offset_rad_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_theta_m_offset_rad_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  read_position_mech_2pi_AXI_unsigned <= unsigned(read_position_mech_2pi_AXI);

  read_position_el_2pi_AXI_unsigned <= unsigned(read_position_el_2pi_AXI);

  read_omega_mech_rad_s_AXI_unsigned <= unsigned(read_omega_mech_rad_s_AXI);

  read_cnt_AXI_signed <= signed(read_cnt_AXI);

  read_n_mech_rpm_AXI_unsigned <= unsigned(read_n_mech_rpm_AXI);

  
  decode_sel_n_mech_rpm_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  
  decode_sel_cnt_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  
  decode_sel_omega_mech_rad_s_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  
  decode_sel_position_el_2pi_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  
  decode_sel_position_mech_2pi_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_position_mech_2pi_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_position_mech_2pi_AXI <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_position_mech_2pi_AXI <= read_position_mech_2pi_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS reg_position_mech_2pi_AXI_process;


  
  decode_rd_position_mech_2pi_AXI_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_position_mech_2pi_AXI_1_1 = '0' ELSE
      read_reg_position_mech_2pi_AXI;

  reg_position_el_2pi_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_position_el_2pi_AXI <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_position_el_2pi_AXI <= read_position_el_2pi_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS reg_position_el_2pi_AXI_process;


  
  decode_rd_position_el_2pi_AXI_1_1 <= decode_rd_position_mech_2pi_AXI_1_1 WHEN decode_sel_position_el_2pi_AXI_1_1 = '0' ELSE
      read_reg_position_el_2pi_AXI;

  reg_omega_mech_rad_s_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_omega_mech_rad_s_AXI <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_omega_mech_rad_s_AXI <= read_omega_mech_rad_s_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS reg_omega_mech_rad_s_AXI_process;


  
  decode_rd_omega_mech_rad_s_AXI_1_1 <= decode_rd_position_el_2pi_AXI_1_1 WHEN decode_sel_omega_mech_rad_s_AXI_1_1 = '0' ELSE
      read_reg_omega_mech_rad_s_AXI;

  reg_cnt_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_cnt_AXI <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        read_reg_cnt_AXI <= read_cnt_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_cnt_AXI_process;


  data_slice_cnt_AXI_1 <= unsigned(read_reg_cnt_AXI);

  
  decode_rd_cnt_AXI_1_1 <= decode_rd_omega_mech_rad_s_AXI_1_1 WHEN decode_sel_cnt_AXI_1_1 = '0' ELSE
      data_slice_cnt_AXI_1;

  reg_n_mech_rpm_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_n_mech_rpm_AXI <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_n_mech_rpm_AXI <= read_n_mech_rpm_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS reg_n_mech_rpm_AXI_process;


  
  decode_rd_n_mech_rpm_AXI_1_1 <= decode_rd_cnt_AXI_1_1 WHEN decode_sel_n_mech_rpm_AXI_1_1 = '0' ELSE
      read_reg_n_mech_rpm_AXI;

  data_read <= std_logic_vector(decode_rd_n_mech_rpm_AXI_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

  
  decode_sel_resolver_polepairs_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_resolver_polepairs_AXI_1_1 <= decode_sel_resolver_polepairs_AXI_1_1 AND wr_enb;

  data_in_resolver_polepairs_AXI <= signed(data_write_unsigned);

  reg_resolver_polepairs_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_resolver_polepairs_AXI_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_resolver_polepairs_AXI_1_1 = '1' THEN
        data_reg_resolver_polepairs_AXI_1_1 <= data_in_resolver_polepairs_AXI;
      END IF;
    END IF;
  END PROCESS reg_resolver_polepairs_AXI_1_1_process;


  write_resolver_polepairs_AXI <= std_logic_vector(data_reg_resolver_polepairs_AXI_1_1);

  
  decode_sel_cnt_reset_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_cnt_reset_AXI_1_1 <= decode_sel_cnt_reset_AXI_1_1 AND wr_enb;

  data_in_cnt_reset_AXI <= data_write_unsigned(0);

  reg_cnt_reset_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_cnt_reset_AXI_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_cnt_reset_AXI_1_1 = '1' THEN
        data_reg_cnt_reset_AXI_1_1 <= data_in_cnt_reset_AXI;
      END IF;
    END IF;
  END PROCESS reg_cnt_reset_AXI_1_1_process;


  write_concats_cnt_reset_AXI_1 <= data_reg_cnt_reset_AXI_1_1;

  write_cnt_reset_AXI <= write_concats_cnt_reset_AXI_1;

  
  decode_sel_position_intmax_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_position_intmax_AXI_1_1 <= decode_sel_position_intmax_AXI_1_1 AND wr_enb;

  data_in_position_intmax_AXI <= signed(data_write_unsigned);

  reg_position_intmax_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_position_intmax_AXI_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_position_intmax_AXI_1_1 = '1' THEN
        data_reg_position_intmax_AXI_1_1 <= data_in_position_intmax_AXI;
      END IF;
    END IF;
  END PROCESS reg_position_intmax_AXI_1_1_process;


  write_position_intmax_AXI <= std_logic_vector(data_reg_position_intmax_AXI_1_1);

  
  decode_sel_machine_polepairs_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_machine_polepairs_AXI_1_1 <= decode_sel_machine_polepairs_AXI_1_1 AND wr_enb;

  data_in_machine_polepairs_AXI <= signed(data_write_unsigned);

  reg_machine_polepairs_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_machine_polepairs_AXI_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_machine_polepairs_AXI_1_1 = '1' THEN
        data_reg_machine_polepairs_AXI_1_1 <= data_in_machine_polepairs_AXI;
      END IF;
    END IF;
  END PROCESS reg_machine_polepairs_AXI_1_1_process;


  write_machine_polepairs_AXI <= std_logic_vector(data_reg_machine_polepairs_AXI_1_1);

  
  decode_sel_bitToRPS_Factor_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_bitToRPS_Factor_AXI_1_1 <= decode_sel_bitToRPS_Factor_AXI_1_1 AND wr_enb;

  reg_bitToRPS_Factor_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_bitToRPS_Factor_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_bitToRPS_Factor_AXI_1_1 = '1' THEN
        data_reg_bitToRPS_Factor_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_bitToRPS_Factor_AXI_1_1_process;


  write_bitToRPS_Factor_AXI <= std_logic_vector(data_reg_bitToRPS_Factor_AXI_1_1);

  
  decode_sel_theta_m_offset_rad_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_theta_m_offset_rad_AXI_1_1 <= decode_sel_theta_m_offset_rad_AXI_1_1 AND wr_enb;

  reg_theta_m_offset_rad_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_theta_m_offset_rad_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_theta_m_offset_rad_AXI_1_1 = '1' THEN
        data_reg_theta_m_offset_rad_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_theta_m_offset_rad_AXI_1_1_process;


  write_theta_m_offset_rad_AXI <= std_logic_vector(data_reg_theta_m_offset_rad_AXI_1_1);

END rtl;

