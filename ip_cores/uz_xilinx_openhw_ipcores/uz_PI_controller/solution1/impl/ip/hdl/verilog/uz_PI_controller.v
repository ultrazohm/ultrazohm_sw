// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_PI_controller_uz_PI_controller,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1297,HLS_SYN_LUT=1455,HLS_VERSION=2022_2}" *)

module uz_PI_controller (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        actualValue,
        ap_return,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] actualValue;
output  [31:0] ap_return;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] referenceValue;
wire   [31:0] sampletime;
wire   [31:0] KI;
wire   [31:0] KP;
wire   [31:0] limit;
wire    reset;
wire   [31:0] axi_referenceValue;
reg    axi_referenceValue_ap_vld;
wire   [31:0] axi_actualValue;
reg    axi_actualValue_ap_vld;
wire   [31:0] error;
reg    error_ap_vld;
wire   [31:0] P_sum;
reg    P_sum_ap_vld;
reg   [31:0] I_sum;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] reg_202;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state13;
reg   [0:0] reset_read_reg_377;
reg   [31:0] limit_read_reg_381;
reg   [31:0] KP_read_reg_388;
reg   [31:0] KI_read_reg_393;
reg   [31:0] sampletime_read_reg_398;
reg   [31:0] referenceValue_read_reg_403;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] mul_reg_415;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_190_p2;
reg   [31:0] preIntegrator_reg_421;
reg   [31:0] mul2_reg_429;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln34_2_fu_241_p2;
reg   [0:0] icmp_ln34_2_reg_434;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln34_3_fu_247_p2;
reg   [0:0] icmp_ln34_3_reg_439;
wire   [31:0] bitcast_ln36_fu_259_p1;
reg   [31:0] bitcast_ln36_reg_445;
wire   [0:0] icmp_ln36_fu_274_p2;
reg   [0:0] icmp_ln36_reg_451;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_162_p4;
reg   [31:0] storemerge_reg_158;
wire    ap_CS_fsm_state15;
wire   [31:0] out_fu_355_p3;
reg   [31:0] ap_phi_mux_out_1_phi_fu_173_p4;
reg   [31:0] out_1_reg_169;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state9;
reg   [31:0] grp_fu_180_p0;
reg   [31:0] grp_fu_180_p1;
wire    ap_CS_fsm_state12;
reg   [31:0] grp_fu_186_p0;
reg   [31:0] grp_fu_186_p1;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_198_p1;
wire   [31:0] bitcast_ln34_1_fu_224_p1;
wire   [7:0] tmp_1_fu_227_p4;
wire   [22:0] trunc_ln34_1_fu_237_p1;
wire   [31:0] xor_ln36_fu_253_p2;
wire   [7:0] tmp_4_fu_264_p4;
wire   [31:0] bitcast_ln34_fu_280_p1;
wire   [7:0] tmp_fu_284_p4;
wire   [22:0] trunc_ln34_fu_294_p1;
wire   [0:0] icmp_ln34_1_fu_304_p2;
wire   [0:0] icmp_ln34_fu_298_p2;
wire   [0:0] or_ln34_fu_310_p2;
wire   [0:0] or_ln34_1_fu_316_p2;
wire   [0:0] and_ln34_fu_320_p2;
wire   [0:0] grp_fu_194_p2;
wire   [0:0] or_ln36_fu_332_p2;
wire   [0:0] and_ln36_fu_336_p2;
wire   [0:0] grp_fu_198_p2;
wire   [0:0] and_ln36_1_fu_342_p2;
wire   [0:0] and_ln34_1_fu_326_p2;
wire   [31:0] select_ln36_fu_348_p3;
reg   [1:0] grp_fu_180_opcode;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 I_sum = 32'd0;
end

uz_PI_controller_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .referenceValue(referenceValue),
    .sampletime(sampletime),
    .KI(KI),
    .KP(KP),
    .limit(limit),
    .reset(reset),
    .axi_referenceValue(axi_referenceValue),
    .axi_referenceValue_ap_vld(axi_referenceValue_ap_vld),
    .axi_actualValue(axi_actualValue),
    .axi_actualValue_ap_vld(axi_actualValue_ap_vld),
    .error(error),
    .error_ap_vld(error_ap_vld),
    .P_sum(P_sum),
    .P_sum_ap_vld(P_sum_ap_vld)
);

uz_PI_controller_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_180_p0),
    .din1(grp_fu_180_p1),
    .opcode(grp_fu_180_opcode),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

uz_PI_controller_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_186_p0),
    .din1(grp_fu_186_p1),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

uz_PI_controller_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_202),
    .din1(KI_read_reg_393),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

uz_PI_controller_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_202),
    .din1(limit_read_reg_381),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_194_p2)
);

uz_PI_controller_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_202),
    .din1(grp_fu_198_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_198_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((reset_read_reg_377 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_1_reg_169 <= 32'd0;
    end else if (((reset_read_reg_377 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        out_1_reg_169 <= out_fu_355_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((reset_read_reg_377 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        storemerge_reg_158 <= 32'd0;
    end else if (((reset_read_reg_377 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        storemerge_reg_158 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        I_sum <= ap_phi_mux_storemerge_phi_fu_162_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        KI_read_reg_393 <= KI;
        KP_read_reg_388 <= KP;
        limit_read_reg_381 <= limit;
        referenceValue_read_reg_403 <= referenceValue;
        reset_read_reg_377 <= reset;
        sampletime_read_reg_398 <= sampletime;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bitcast_ln36_reg_445 <= bitcast_ln36_fu_259_p1;
        icmp_ln34_2_reg_434 <= icmp_ln34_2_fu_241_p2;
        icmp_ln34_3_reg_439 <= icmp_ln34_3_fu_247_p2;
        icmp_ln36_reg_451 <= icmp_ln36_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul2_reg_429 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_reg_415 <= grp_fu_186_p2;
        preIntegrator_reg_421 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_202 <= grp_fu_180_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        P_sum_ap_vld = 1'b1;
    end else begin
        P_sum_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((reset_read_reg_377 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_phi_mux_out_1_phi_fu_173_p4 = out_fu_355_p3;
    end else begin
        ap_phi_mux_out_1_phi_fu_173_p4 = out_1_reg_169;
    end
end

always @ (*) begin
    if (((reset_read_reg_377 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_phi_mux_storemerge_phi_fu_162_p4 = grp_fu_180_p2;
    end else begin
        ap_phi_mux_storemerge_phi_fu_162_p4 = storemerge_reg_158;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        axi_actualValue_ap_vld = 1'b1;
    end else begin
        axi_actualValue_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        axi_referenceValue_ap_vld = 1'b1;
    end else begin
        axi_referenceValue_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        error_ap_vld = 1'b1;
    end else begin
        error_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((reset_read_reg_377 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_180_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_180_opcode = 2'd0;
    end else begin
        grp_fu_180_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_180_p0 = I_sum;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_180_p0 = referenceValue_read_reg_403;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_180_p1 = mul2_reg_429;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_180_p1 = mul_reg_415;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_180_p1 = actualValue;
    end else begin
        grp_fu_180_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_186_p0 = preIntegrator_reg_421;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_186_p0 = reg_202;
    end else begin
        grp_fu_186_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_186_p1 = sampletime_read_reg_398;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_186_p1 = KP_read_reg_388;
    end else begin
        grp_fu_186_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((reset_read_reg_377 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_sum = mul_reg_415;

assign and_ln34_1_fu_326_p2 = (grp_fu_194_p2 & and_ln34_fu_320_p2);

assign and_ln34_fu_320_p2 = (or_ln34_fu_310_p2 & or_ln34_1_fu_316_p2);

assign and_ln36_1_fu_342_p2 = (grp_fu_198_p2 & and_ln36_fu_336_p2);

assign and_ln36_fu_336_p2 = (or_ln36_fu_332_p2 & or_ln34_fu_310_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = ap_phi_mux_out_1_phi_fu_173_p4;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axi_actualValue = actualValue;

assign axi_referenceValue = referenceValue_read_reg_403;

assign bitcast_ln34_1_fu_224_p1 = limit_read_reg_381;

assign bitcast_ln34_fu_280_p1 = reg_202;

assign bitcast_ln36_fu_259_p1 = xor_ln36_fu_253_p2;

assign error = reg_202;

assign grp_fu_198_p1 = xor_ln36_fu_253_p2;

assign icmp_ln34_1_fu_304_p2 = ((trunc_ln34_fu_294_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_241_p2 = ((tmp_1_fu_227_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln34_3_fu_247_p2 = ((trunc_ln34_1_fu_237_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_298_p2 = ((tmp_fu_284_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_274_p2 = ((tmp_4_fu_264_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln34_1_fu_316_p2 = (icmp_ln34_3_reg_439 | icmp_ln34_2_reg_434);

assign or_ln34_fu_310_p2 = (icmp_ln34_fu_298_p2 | icmp_ln34_1_fu_304_p2);

assign or_ln36_fu_332_p2 = (icmp_ln36_reg_451 | icmp_ln34_3_reg_439);

assign out_fu_355_p3 = ((and_ln34_1_fu_326_p2[0:0] == 1'b1) ? limit_read_reg_381 : select_ln36_fu_348_p3);

assign select_ln36_fu_348_p3 = ((and_ln36_1_fu_342_p2[0:0] == 1'b1) ? bitcast_ln36_reg_445 : reg_202);

assign tmp_1_fu_227_p4 = {{bitcast_ln34_1_fu_224_p1[30:23]}};

assign tmp_4_fu_264_p4 = {{xor_ln36_fu_253_p2[30:23]}};

assign tmp_fu_284_p4 = {{bitcast_ln34_fu_280_p1[30:23]}};

assign trunc_ln34_1_fu_237_p1 = bitcast_ln34_1_fu_224_p1[22:0];

assign trunc_ln34_fu_294_p1 = bitcast_ln34_fu_280_p1[22:0];

assign xor_ln36_fu_253_p2 = (bitcast_ln34_1_fu_224_p1 ^ 32'd2147483648);

endmodule //uz_PI_controller
