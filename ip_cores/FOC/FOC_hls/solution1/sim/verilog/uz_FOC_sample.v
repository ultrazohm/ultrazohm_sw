// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_FOC_sample_uz_FOC_sample,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=143,HLS_SYN_TPT=none,HLS_SYN_MEM=29,HLS_SYN_DSP=0,HLS_SYN_FF=6885,HLS_SYN_LUT=14614,HLS_VERSION=2020_1}" *)

module uz_FOC_sample (
        ap_clk,
        ap_rst_n,
        m_axi_Dout_AWVALID,
        m_axi_Dout_AWREADY,
        m_axi_Dout_AWADDR,
        m_axi_Dout_AWID,
        m_axi_Dout_AWLEN,
        m_axi_Dout_AWSIZE,
        m_axi_Dout_AWBURST,
        m_axi_Dout_AWLOCK,
        m_axi_Dout_AWCACHE,
        m_axi_Dout_AWPROT,
        m_axi_Dout_AWQOS,
        m_axi_Dout_AWREGION,
        m_axi_Dout_AWUSER,
        m_axi_Dout_WVALID,
        m_axi_Dout_WREADY,
        m_axi_Dout_WDATA,
        m_axi_Dout_WSTRB,
        m_axi_Dout_WLAST,
        m_axi_Dout_WID,
        m_axi_Dout_WUSER,
        m_axi_Dout_ARVALID,
        m_axi_Dout_ARREADY,
        m_axi_Dout_ARADDR,
        m_axi_Dout_ARID,
        m_axi_Dout_ARLEN,
        m_axi_Dout_ARSIZE,
        m_axi_Dout_ARBURST,
        m_axi_Dout_ARLOCK,
        m_axi_Dout_ARCACHE,
        m_axi_Dout_ARPROT,
        m_axi_Dout_ARQOS,
        m_axi_Dout_ARREGION,
        m_axi_Dout_ARUSER,
        m_axi_Dout_RVALID,
        m_axi_Dout_RREADY,
        m_axi_Dout_RDATA,
        m_axi_Dout_RLAST,
        m_axi_Dout_RID,
        m_axi_Dout_RUSER,
        m_axi_Dout_RRESP,
        m_axi_Dout_BVALID,
        m_axi_Dout_BREADY,
        m_axi_Dout_BRESP,
        m_axi_Dout_BID,
        m_axi_Dout_BUSER,
        i_reference_Ampere,
        s_axi_Din_AWVALID,
        s_axi_Din_AWREADY,
        s_axi_Din_AWADDR,
        s_axi_Din_WVALID,
        s_axi_Din_WREADY,
        s_axi_Din_WDATA,
        s_axi_Din_WSTRB,
        s_axi_Din_ARVALID,
        s_axi_Din_ARREADY,
        s_axi_Din_ARADDR,
        s_axi_Din_RVALID,
        s_axi_Din_RREADY,
        s_axi_Din_RDATA,
        s_axi_Din_RRESP,
        s_axi_Din_BVALID,
        s_axi_Din_BREADY,
        s_axi_Din_BRESP,
        interrupt,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;
parameter    C_S_AXI_DIN_DATA_WIDTH = 32;
parameter    C_S_AXI_DIN_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_M_AXI_DOUT_ID_WIDTH = 1;
parameter    C_M_AXI_DOUT_ADDR_WIDTH = 64;
parameter    C_M_AXI_DOUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DOUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_USER_VALUE = 0;
parameter    C_M_AXI_DOUT_PROT_VALUE = 0;
parameter    C_M_AXI_DOUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_DIN_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DOUT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_Dout_AWVALID;
input   m_axi_Dout_AWREADY;
output  [C_M_AXI_DOUT_ADDR_WIDTH - 1:0] m_axi_Dout_AWADDR;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_AWID;
output  [7:0] m_axi_Dout_AWLEN;
output  [2:0] m_axi_Dout_AWSIZE;
output  [1:0] m_axi_Dout_AWBURST;
output  [1:0] m_axi_Dout_AWLOCK;
output  [3:0] m_axi_Dout_AWCACHE;
output  [2:0] m_axi_Dout_AWPROT;
output  [3:0] m_axi_Dout_AWQOS;
output  [3:0] m_axi_Dout_AWREGION;
output  [C_M_AXI_DOUT_AWUSER_WIDTH - 1:0] m_axi_Dout_AWUSER;
output   m_axi_Dout_WVALID;
input   m_axi_Dout_WREADY;
output  [C_M_AXI_DOUT_DATA_WIDTH - 1:0] m_axi_Dout_WDATA;
output  [C_M_AXI_DOUT_WSTRB_WIDTH - 1:0] m_axi_Dout_WSTRB;
output   m_axi_Dout_WLAST;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_WID;
output  [C_M_AXI_DOUT_WUSER_WIDTH - 1:0] m_axi_Dout_WUSER;
output   m_axi_Dout_ARVALID;
input   m_axi_Dout_ARREADY;
output  [C_M_AXI_DOUT_ADDR_WIDTH - 1:0] m_axi_Dout_ARADDR;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_ARID;
output  [7:0] m_axi_Dout_ARLEN;
output  [2:0] m_axi_Dout_ARSIZE;
output  [1:0] m_axi_Dout_ARBURST;
output  [1:0] m_axi_Dout_ARLOCK;
output  [3:0] m_axi_Dout_ARCACHE;
output  [2:0] m_axi_Dout_ARPROT;
output  [3:0] m_axi_Dout_ARQOS;
output  [3:0] m_axi_Dout_ARREGION;
output  [C_M_AXI_DOUT_ARUSER_WIDTH - 1:0] m_axi_Dout_ARUSER;
input   m_axi_Dout_RVALID;
output   m_axi_Dout_RREADY;
input  [C_M_AXI_DOUT_DATA_WIDTH - 1:0] m_axi_Dout_RDATA;
input   m_axi_Dout_RLAST;
input  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_RID;
input  [C_M_AXI_DOUT_RUSER_WIDTH - 1:0] m_axi_Dout_RUSER;
input  [1:0] m_axi_Dout_RRESP;
input   m_axi_Dout_BVALID;
output   m_axi_Dout_BREADY;
input  [1:0] m_axi_Dout_BRESP;
input  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_BID;
input  [C_M_AXI_DOUT_BUSER_WIDTH - 1:0] m_axi_Dout_BUSER;
input  [95:0] i_reference_Ampere;
input   s_axi_Din_AWVALID;
output   s_axi_Din_AWREADY;
input  [C_S_AXI_DIN_ADDR_WIDTH - 1:0] s_axi_Din_AWADDR;
input   s_axi_Din_WVALID;
output   s_axi_Din_WREADY;
input  [C_S_AXI_DIN_DATA_WIDTH - 1:0] s_axi_Din_WDATA;
input  [C_S_AXI_DIN_WSTRB_WIDTH - 1:0] s_axi_Din_WSTRB;
input   s_axi_Din_ARVALID;
output   s_axi_Din_ARREADY;
input  [C_S_AXI_DIN_ADDR_WIDTH - 1:0] s_axi_Din_ARADDR;
output   s_axi_Din_RVALID;
input   s_axi_Din_RREADY;
output  [C_S_AXI_DIN_DATA_WIDTH - 1:0] s_axi_Din_RDATA;
output  [1:0] s_axi_Din_RRESP;
output   s_axi_Din_BVALID;
input   s_axi_Din_BREADY;
output  [1:0] s_axi_Din_BRESP;
output   interrupt;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [1:0] self_address0;
reg    self_ce0;
reg   [27:0] self_we0;
wire   [223:0] self_q0;
wire   [95:0] i_actual_Ampere;
wire   [31:0] V_dc_volts;
wire   [31:0] omega_el_rad_per_sec;
wire   [63:0] u_output_Volts;
reg    Dout_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    Dout_blk_n_W;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
reg    Dout_blk_n_B;
wire    ap_CS_fsm_state34;
reg    Dout_AWVALID;
wire    Dout_AWREADY;
reg    Dout_WVALID;
wire    Dout_WREADY;
reg   [31:0] Dout_WDATA;
wire    Dout_ARREADY;
wire    Dout_RVALID;
wire   [31:0] Dout_RDATA;
wire    Dout_RLAST;
wire   [0:0] Dout_RID;
wire   [0:0] Dout_RUSER;
wire   [1:0] Dout_RRESP;
wire    Dout_BVALID;
reg    Dout_BREADY;
wire   [1:0] Dout_BRESP;
wire   [0:0] Dout_BID;
wire   [0:0] Dout_BUSER;
wire   [31:0] grp_fu_275_p2;
reg   [31:0] reg_283;
wire    ap_CS_fsm_state13;
reg   [0:0] icmp_ln46_reg_566;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_271_p2;
reg   [31:0] reg_288;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_294_p3;
wire    ap_CS_fsm_state21;
wire   [1:0] self_addr_reg_459;
reg   [31:0] omega_el_rad_per_sec_read_reg_464;
wire    ap_CS_fsm_state2;
reg   [31:0] V_dc_volts_read_reg_470;
wire   [31:0] empty_50_fu_307_p1;
reg   [31:0] empty_50_reg_475;
reg   [31:0] p_cast3_reg_480;
reg   [0:0] tmp_reg_486;
reg   [0:0] tmp_28_reg_491;
reg   [63:0] Dout_addr_reg_496;
wire   [31:0] empty_49_fu_357_p1;
reg   [31:0] empty_49_reg_504;
wire   [31:0] i_reference_Ampere_q_fu_371_p1;
reg   [31:0] i_reference_Ampere_q_reg_509;
wire   [31:0] i_actual_Ampere_q_fu_376_p1;
reg   [31:0] i_actual_Ampere_q_reg_514;
wire   [31:0] grp_uz_PI_Controller_sample_1_fu_256_ap_return;
reg   [31:0] u_output_Volts_3_reg_520;
wire    ap_CS_fsm_state4;
wire    grp_uz_PI_Controller_sample_1_fu_256_ap_ready;
wire    grp_uz_PI_Controller_sample_1_fu_256_ap_done;
wire   [31:0] i_reference_Ampere_d_fu_380_p1;
reg   [31:0] i_reference_Ampere_d_reg_525;
wire    ap_CS_fsm_state5;
wire   [31:0] i_actual_Ampere_d_fu_384_p1;
reg   [31:0] i_actual_Ampere_d_reg_530;
reg   [31:0] u_output_Volts_4_reg_536;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [31:0] trunc_ln6_reg_551;
wire   [31:0] trunc_ln20_fu_398_p1;
reg   [31:0] trunc_ln20_reg_556;
wire    ap_CS_fsm_state9;
reg   [31:0] trunc_ln20_2_reg_561;
wire   [0:0] icmp_ln46_fu_416_p2;
wire    ap_CS_fsm_state10;
wire   [31:0] xor_ln25_fu_422_p2;
reg   [31:0] xor_ln25_reg_571;
wire    ap_CS_fsm_state11;
wire   [31:0] config_1_fu_431_p1;
wire   [31:0] bitcast_ln25_fu_435_p1;
wire   [31:0] grp_fu_279_p2;
reg   [31:0] mul4_i_i_reg_591;
wire   [31:0] config_2_fu_439_p1;
wire    ap_CS_fsm_state14;
reg   [31:0] u_pre_limit_Volts_q_1_reg_601;
wire    ap_CS_fsm_state24;
reg   [31:0] newret_reg_606;
wire    ap_CS_fsm_state26;
wire    grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_ready;
wire    grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_done;
reg   [31:0] newret7_reg_611;
wire    grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_start;
wire    grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_idle;
wire   [1:0] grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_address0;
wire    grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_ce0;
wire   [27:0] grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_we0;
wire   [223:0] grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_d0;
wire   [31:0] grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_return_0;
wire   [31:0] grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_return_1;
wire    grp_uz_PI_Controller_sample_1_fu_256_ap_start;
wire    grp_uz_PI_Controller_sample_1_fu_256_ap_idle;
wire   [1:0] grp_uz_PI_Controller_sample_1_fu_256_self_address0;
wire    grp_uz_PI_Controller_sample_1_fu_256_self_ce0;
reg   [4:0] grp_uz_PI_Controller_sample_1_fu_256_self_2;
reg   [31:0] grp_uz_PI_Controller_sample_1_fu_256_referenceValue;
reg   [31:0] grp_uz_PI_Controller_sample_1_fu_256_actualValue;
reg    grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_start_reg;
wire    ap_CS_fsm_state25;
reg    grp_uz_PI_Controller_sample_1_fu_256_ap_start_reg;
wire  signed [63:0] sext_ln33_fu_347_p1;
wire   [31:0] A_0_cast_i_fu_451_p1;
wire   [31:0] A_1_cast_i_fu_455_p1;
reg   [31:0] grp_fu_271_p0;
reg   [31:0] grp_fu_271_p1;
reg   [31:0] grp_fu_275_p0;
reg   [31:0] grp_fu_275_p1;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_279_p1;
wire   [61:0] trunc_ln7_fu_337_p4;
wire   [31:0] p_cast_fu_361_p4;
wire   [31:0] decoupling_select_fu_412_p1;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
#0 grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_start_reg = 1'b0;
#0 grp_uz_PI_Controller_sample_1_fu_256_ap_start_reg = 1'b0;
end

uz_FOC_sample_Din_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DIN_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DIN_DATA_WIDTH ))
Din_s_axi_U(
    .AWVALID(s_axi_Din_AWVALID),
    .AWREADY(s_axi_Din_AWREADY),
    .AWADDR(s_axi_Din_AWADDR),
    .WVALID(s_axi_Din_WVALID),
    .WREADY(s_axi_Din_WREADY),
    .WDATA(s_axi_Din_WDATA),
    .WSTRB(s_axi_Din_WSTRB),
    .ARVALID(s_axi_Din_ARVALID),
    .ARREADY(s_axi_Din_ARREADY),
    .ARADDR(s_axi_Din_ARADDR),
    .RVALID(s_axi_Din_RVALID),
    .RREADY(s_axi_Din_RREADY),
    .RDATA(s_axi_Din_RDATA),
    .RRESP(s_axi_Din_RRESP),
    .BVALID(s_axi_Din_BVALID),
    .BREADY(s_axi_Din_BREADY),
    .BRESP(s_axi_Din_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .i_actual_Ampere(i_actual_Ampere),
    .V_dc_volts(V_dc_volts),
    .omega_el_rad_per_sec(omega_el_rad_per_sec),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .self_address0(self_address0),
    .self_ce0(self_ce0),
    .self_we0(self_we0),
    .self_d0(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_d0),
    .self_q0(self_q0)
);

uz_FOC_sample_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .u_output_Volts(u_output_Volts)
);

uz_FOC_sample_Dout_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DOUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DOUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DOUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DOUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DOUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DOUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DOUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DOUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DOUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DOUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DOUT_CACHE_VALUE ))
Dout_m_axi_U(
    .AWVALID(m_axi_Dout_AWVALID),
    .AWREADY(m_axi_Dout_AWREADY),
    .AWADDR(m_axi_Dout_AWADDR),
    .AWID(m_axi_Dout_AWID),
    .AWLEN(m_axi_Dout_AWLEN),
    .AWSIZE(m_axi_Dout_AWSIZE),
    .AWBURST(m_axi_Dout_AWBURST),
    .AWLOCK(m_axi_Dout_AWLOCK),
    .AWCACHE(m_axi_Dout_AWCACHE),
    .AWPROT(m_axi_Dout_AWPROT),
    .AWQOS(m_axi_Dout_AWQOS),
    .AWREGION(m_axi_Dout_AWREGION),
    .AWUSER(m_axi_Dout_AWUSER),
    .WVALID(m_axi_Dout_WVALID),
    .WREADY(m_axi_Dout_WREADY),
    .WDATA(m_axi_Dout_WDATA),
    .WSTRB(m_axi_Dout_WSTRB),
    .WLAST(m_axi_Dout_WLAST),
    .WID(m_axi_Dout_WID),
    .WUSER(m_axi_Dout_WUSER),
    .ARVALID(m_axi_Dout_ARVALID),
    .ARREADY(m_axi_Dout_ARREADY),
    .ARADDR(m_axi_Dout_ARADDR),
    .ARID(m_axi_Dout_ARID),
    .ARLEN(m_axi_Dout_ARLEN),
    .ARSIZE(m_axi_Dout_ARSIZE),
    .ARBURST(m_axi_Dout_ARBURST),
    .ARLOCK(m_axi_Dout_ARLOCK),
    .ARCACHE(m_axi_Dout_ARCACHE),
    .ARPROT(m_axi_Dout_ARPROT),
    .ARQOS(m_axi_Dout_ARQOS),
    .ARREGION(m_axi_Dout_ARREGION),
    .ARUSER(m_axi_Dout_ARUSER),
    .RVALID(m_axi_Dout_RVALID),
    .RREADY(m_axi_Dout_RREADY),
    .RDATA(m_axi_Dout_RDATA),
    .RLAST(m_axi_Dout_RLAST),
    .RID(m_axi_Dout_RID),
    .RUSER(m_axi_Dout_RUSER),
    .RRESP(m_axi_Dout_RRESP),
    .BVALID(m_axi_Dout_BVALID),
    .BREADY(m_axi_Dout_BREADY),
    .BRESP(m_axi_Dout_BRESP),
    .BID(m_axi_Dout_BID),
    .BUSER(m_axi_Dout_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(Dout_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(Dout_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(Dout_RDATA),
    .I_RID(Dout_RID),
    .I_RUSER(Dout_RUSER),
    .I_RRESP(Dout_RRESP),
    .I_RLAST(Dout_RLAST),
    .I_AWVALID(Dout_AWVALID),
    .I_AWREADY(Dout_AWREADY),
    .I_AWADDR(Dout_addr_reg_496),
    .I_AWID(1'd0),
    .I_AWLEN(32'd3),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(Dout_WVALID),
    .I_WREADY(Dout_WREADY),
    .I_WDATA(Dout_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(Dout_BVALID),
    .I_BREADY(Dout_BREADY),
    .I_BRESP(Dout_BRESP),
    .I_BID(Dout_BID),
    .I_BUSER(Dout_BUSER)
);

uz_FOC_sample_uz_FOC_SpaceVector_Limitation_1 grp_uz_FOC_SpaceVector_Limitation_1_fu_231(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_start),
    .ap_done(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_done),
    .ap_idle(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_idle),
    .ap_ready(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_ready),
    .self_address0(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_address0),
    .self_ce0(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_ce0),
    .self_we0(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_we0),
    .self_d0(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_d0),
    .u_input_Volts_0(reg_288),
    .u_input_Volts_1(u_pre_limit_Volts_q_1_reg_601),
    .V_dc_volts(V_dc_volts_read_reg_470),
    .omega_el_rad_per_sec(omega_el_rad_per_sec_read_reg_464),
    .i_actual_Ampere_1(i_actual_Ampere_q_reg_514),
    .ap_return_0(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_return_0),
    .ap_return_1(grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_return_1)
);

uz_FOC_sample_uz_PI_Controller_sample_1 grp_uz_PI_Controller_sample_1_fu_256(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_uz_PI_Controller_sample_1_fu_256_ap_start),
    .ap_done(grp_uz_PI_Controller_sample_1_fu_256_ap_done),
    .ap_idle(grp_uz_PI_Controller_sample_1_fu_256_ap_idle),
    .ap_ready(grp_uz_PI_Controller_sample_1_fu_256_ap_ready),
    .self_address0(grp_uz_PI_Controller_sample_1_fu_256_self_address0),
    .self_ce0(grp_uz_PI_Controller_sample_1_fu_256_self_ce0),
    .self_q0(self_q0),
    .self_2(grp_uz_PI_Controller_sample_1_fu_256_self_2),
    .I_rst(tmp_reg_486),
    .referenceValue(grp_uz_PI_Controller_sample_1_fu_256_referenceValue),
    .actualValue(grp_uz_PI_Controller_sample_1_fu_256_actualValue),
    .ext_clamping(tmp_28_reg_491),
    .ap_return(grp_uz_PI_Controller_sample_1_fu_256_ap_return)
);

uz_FOC_sample_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U68(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_271_p0),
    .din1(grp_fu_271_p1),
    .ce(1'b1),
    .dout(grp_fu_271_p2)
);

uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U69(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_275_p0),
    .din1(grp_fu_275_p1),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U70(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_actual_Ampere_d_reg_530),
    .din1(grp_fu_279_p1),
    .ce(1'b1),
    .dout(grp_fu_279_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_start_reg <= 1'b1;
        end else if ((grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_ready == 1'b1)) begin
            grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_uz_PI_Controller_sample_1_fu_256_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_uz_PI_Controller_sample_1_fu_256_ap_start_reg <= 1'b1;
        end else if ((grp_uz_PI_Controller_sample_1_fu_256_ap_ready == 1'b1)) begin
            grp_uz_PI_Controller_sample_1_fu_256_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Dout_addr_reg_496 <= sext_ln33_fu_347_p1;
        V_dc_volts_read_reg_470 <= V_dc_volts;
        empty_50_reg_475 <= empty_50_fu_307_p1;
        omega_el_rad_per_sec_read_reg_464 <= omega_el_rad_per_sec;
        p_cast3_reg_480 <= {{i_actual_Ampere[63:32]}};
        tmp_28_reg_491 <= self_q0[32'd40];
        tmp_reg_486 <= self_q0[32'd32];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_49_reg_504 <= empty_49_fu_357_p1;
        i_actual_Ampere_q_reg_514 <= i_actual_Ampere_q_fu_376_p1;
        i_reference_Ampere_q_reg_509 <= i_reference_Ampere_q_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_actual_Ampere_d_reg_530 <= i_actual_Ampere_d_fu_384_p1;
        i_reference_Ampere_d_reg_525 <= i_reference_Ampere_d_fu_380_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln46_reg_566 <= icmp_ln46_fu_416_p2;
        xor_ln25_reg_571 <= xor_ln25_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_566 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        mul4_i_i_reg_591 <= grp_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        newret7_reg_611 <= grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_return_1;
        newret_reg_606 <= grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln46_reg_566 == 1'd1) & (1'b1 == ap_CS_fsm_state20)) | ((icmp_ln46_reg_566 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((icmp_ln46_reg_566 == 1'd1) & (1'b1 == ap_CS_fsm_state13)))) begin
        reg_283 <= grp_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((icmp_ln46_reg_566 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        reg_288 <= grp_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln20_2_reg_561 <= {{self_q0[63:32]}};
        trunc_ln20_reg_556 <= trunc_ln20_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln6_reg_551 <= {{self_q0[223:192]}};
    end
end

always @ (posedge ap_clk) begin
    if (((grp_uz_PI_Controller_sample_1_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        u_output_Volts_3_reg_520 <= grp_uz_PI_Controller_sample_1_fu_256_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_uz_PI_Controller_sample_1_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        u_output_Volts_4_reg_536 <= grp_uz_PI_Controller_sample_1_fu_256_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        u_pre_limit_Volts_q_1_reg_601 <= grp_fu_271_p2;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state3))) begin
        Dout_AWVALID = 1'b1;
    end else begin
        Dout_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state34))) begin
        Dout_BREADY = 1'b1;
    end else begin
        Dout_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        Dout_WDATA = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        Dout_WDATA = A_1_cast_i_fu_455_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        Dout_WDATA = A_0_cast_i_fu_451_p1;
    end else begin
        Dout_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state27)))) begin
        Dout_WVALID = 1'b1;
    end else begin
        Dout_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Dout_blk_n_AW = m_axi_Dout_AWREADY;
    end else begin
        Dout_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        Dout_blk_n_B = m_axi_Dout_BVALID;
    end else begin
        Dout_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27))) begin
        Dout_blk_n_W = m_axi_Dout_WREADY;
    end else begin
        Dout_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_271_p0 = u_output_Volts_3_reg_520;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_271_p0 = u_output_Volts_4_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_271_p0 = mul4_i_i_reg_591;
    end else begin
        grp_fu_271_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_271_p1 = grp_fu_294_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_271_p1 = config_2_fu_439_p1;
    end else begin
        grp_fu_271_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_275_p0 = reg_288;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_275_p0 = reg_283;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_275_p0 = bitcast_ln25_fu_435_p1;
    end else begin
        grp_fu_275_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_275_p1 = omega_el_rad_per_sec_read_reg_464;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_275_p1 = config_1_fu_431_p1;
    end else begin
        grp_fu_275_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uz_PI_Controller_sample_1_fu_256_actualValue = i_actual_Ampere_d_reg_530;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uz_PI_Controller_sample_1_fu_256_actualValue = i_actual_Ampere_q_reg_514;
    end else begin
        grp_uz_PI_Controller_sample_1_fu_256_actualValue = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uz_PI_Controller_sample_1_fu_256_referenceValue = i_reference_Ampere_d_reg_525;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uz_PI_Controller_sample_1_fu_256_referenceValue = i_reference_Ampere_q_reg_509;
    end else begin
        grp_uz_PI_Controller_sample_1_fu_256_referenceValue = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uz_PI_Controller_sample_1_fu_256_self_2 = 5'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uz_PI_Controller_sample_1_fu_256_self_2 = 5'd28;
    end else begin
        grp_uz_PI_Controller_sample_1_fu_256_self_2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        self_address0 = self_addr_reg_459;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        self_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        self_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        self_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        self_address0 = grp_uz_PI_Controller_sample_1_fu_256_self_address0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        self_address0 = grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_address0;
    end else begin
        self_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        self_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        self_ce0 = grp_uz_PI_Controller_sample_1_fu_256_self_ce0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        self_ce0 = grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_ce0;
    end else begin
        self_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        self_we0 = grp_uz_FOC_SpaceVector_Limitation_1_fu_231_self_we0;
    end else begin
        self_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_uz_PI_Controller_sample_1_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_uz_PI_Controller_sample_1_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_cast_i_fu_451_p1 = newret_reg_606;

assign A_1_cast_i_fu_455_p1 = newret7_reg_611;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln25_fu_435_p1 = xor_ln25_reg_571;

assign config_1_fu_431_p1 = trunc_ln20_reg_556;

assign config_2_fu_439_p1 = trunc_ln20_2_reg_561;

assign decoupling_select_fu_412_p1 = self_q0[31:0];

assign empty_49_fu_357_p1 = i_reference_Ampere[31:0];

assign empty_50_fu_307_p1 = i_actual_Ampere[31:0];

assign grp_fu_279_p1 = trunc_ln6_reg_551;

assign grp_fu_294_p3 = ((icmp_ln46_reg_566[0:0] === 1'b1) ? reg_283 : 32'd0);

assign grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_start = grp_uz_FOC_SpaceVector_Limitation_1_fu_231_ap_start_reg;

assign grp_uz_PI_Controller_sample_1_fu_256_ap_start = grp_uz_PI_Controller_sample_1_fu_256_ap_start_reg;

assign i_actual_Ampere_d_fu_384_p1 = empty_50_reg_475;

assign i_actual_Ampere_q_fu_376_p1 = p_cast3_reg_480;

assign i_reference_Ampere_d_fu_380_p1 = empty_49_reg_504;

assign i_reference_Ampere_q_fu_371_p1 = p_cast_fu_361_p4;

assign icmp_ln46_fu_416_p2 = ((decoupling_select_fu_412_p1 == 32'd1) ? 1'b1 : 1'b0);

assign p_cast_fu_361_p4 = {{i_reference_Ampere[63:32]}};

assign self_addr_reg_459 = 64'd0;

assign sext_ln33_fu_347_p1 = $signed(trunc_ln7_fu_337_p4);

assign trunc_ln20_fu_398_p1 = self_q0[31:0];

assign trunc_ln7_fu_337_p4 = {{u_output_Volts[63:2]}};

assign xor_ln25_fu_422_p2 = (p_cast3_reg_480 ^ 32'd2147483648);

endmodule //uz_FOC_sample
