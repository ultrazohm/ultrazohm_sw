-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pmsm_model\uz_pmsm_model_src_nfp_div_single.vhd
-- Created: 2024-05-23 13:50:31
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_src_nfp_div_single
-- Source Path: uz_pmsm_model/uz_pmsm_model/nfp_div_single
-- Hierarchy Level: 1
-- Model version: 7.0
-- 
-- {Latency Strategy = "Min", Denormal Handling = "on"}
-- {Radix = "2"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_src_uz_pmsm_model_pkg.ALL;

ENTITY uz_pmsm_model_src_nfp_div_single IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        nfp_in1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_in2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_pmsm_model_src_nfp_div_single;


ARCHITECTURE rtl OF uz_pmsm_model_src_nfp_div_single IS

  -- Signals
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay4_out1                      : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay3_out1                      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Add_add_cast                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay1_out1                      : std_logic;  -- ufix1
  SIGNAL nfp_in1_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay15_out1                     : std_logic;  -- ufix1
  SIGNAL nfp_in2_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL bSign                            : std_logic;  -- ufix1
  SIGNAL bExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL bMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay18_out1                     : std_logic;  -- ufix1
  SIGNAL tmp_out1                         : std_logic;  -- ufix1
  SIGNAL Delay29_out1                     : std_logic;  -- ufix1
  SIGNAL Delay26_reg                      : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay26_out1                     : std_logic;  -- ufix1
  SIGNAL Delay54_out1                     : std_logic;  -- ufix1
  SIGNAL Constant1_out1                   : std_logic;  -- ufix1
  SIGNAL Switch1_out1                     : std_logic;  -- ufix1
  SIGNAL Delay3_out1_1                    : std_logic;  -- ufix1
  SIGNAL Delay16_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL Delay19_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL bExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1 : std_logic;  -- ufix1
  SIGNAL Delay38_out1                     : std_logic;  -- ufix1
  SIGNAL Delay21_reg                      : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay21_out1                     : std_logic;  -- ufix1
  SIGNAL Delay51_out1                     : std_logic;  -- ufix1
  SIGNAL aExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL Delay17_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_0_aMantissa_out1  : std_logic;  -- ufix1
  SIGNAL Delay32_out1                     : std_logic;  -- ufix1
  SIGNAL Delay23_reg                      : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay23_out1                     : std_logic;  -- ufix1
  SIGNAL Delay53_out1                     : std_logic;  -- ufix1
  SIGNAL bExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL Delay20_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL bMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphabExponent_0_bMantissa_out1  : std_logic;  -- ufix1
  SIGNAL Delay35_out1                     : std_logic;  -- ufix1
  SIGNAL Delay22_reg                      : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay22_out1                     : std_logic;  -- ufix1
  SIGNAL Delay52_out1                     : std_logic;  -- ufix1
  SIGNAL C_out1                           : std_logic;  -- ufix1
  SIGNAL alpha1_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alphaExponent_0_cfType_Exp_out1  : std_logic;  -- ufix1
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1    : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BitSlice_out1                    : std_logic;  -- ufix1
  SIGNAL Delay14_out1                     : std_logic;  -- ufix1
  SIGNAL Delay10_out1                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice6_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_2                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Slice7_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL Start_out1                       : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator4_out1_2         : std_logic;  -- ufix1
  SIGNAL Start_1_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch_out1                      : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_2_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_3_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator1_out1_2         : std_logic;  -- ufix1
  SIGNAL Switch2_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch1_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_4_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_5_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch5_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_6_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_7_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch7_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator6_out1_1         : std_logic;  -- ufix1
  SIGNAL Switch6_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch4_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_out1_1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_1_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch_out1_1                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_2_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_3_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch2_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch1_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_4_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_5_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch5_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_6_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_7_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch7_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch6_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator2_out1_2         : std_logic;  -- ufix1
  SIGNAL Switch4_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch33_out1                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_out1_2                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_1_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch_out1_2                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_2_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_3_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch2_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch1_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_4_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_5_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch5_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_6_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_7_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch7_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch6_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch4_out1_2                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL alpha24_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch2_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch34_out1                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Delay11_out1                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL bitsll_mant_a_ia_zerosig         : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL bitsll_mant_a_ia_selsig          : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL dynamic_shift_zerosig            : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL dynamic_shift_selsig             : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL bitsll_mant_a_ia_out1            : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_bitget_mant_a_mant_a_WordLen_1_out1 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat1_out1_1               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL alpha3_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alphaExponent_0_cfType_Exp_out1_1 : std_logic;  -- ufix1
  SIGNAL alpha1_out1_2                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1_1  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_2               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BitSlice1_out1                   : std_logic;  -- ufix1
  SIGNAL Delay5_out1                      : std_logic;  -- ufix1
  SIGNAL Delay12_out1                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice6_out1_4                : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_4          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_5                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_5                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_4                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_4                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_5          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_6                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_5                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Slice7_out1_5                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_5                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_6          : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_7                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_7                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Start_out1_3                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator4_out1_5         : std_logic;  -- ufix1
  SIGNAL Start_1_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch_out1_3                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_2_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_3_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator1_out1_5         : std_logic;  -- ufix1
  SIGNAL Switch2_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch1_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_4_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_5_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch5_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_6_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_7_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch7_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator6_out1_3         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch4_out1_3                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_out1_4                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_1_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch_out1_4                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_2_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_3_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch2_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch1_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_4_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_5_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch5_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_6_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_7_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch7_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch6_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Logical_Operator2_out1_5         : std_logic;  -- ufix1
  SIGNAL Switch4_out1_4                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch33_out1_1                  : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_out1_5                     : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_1_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch_out1_5                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_2_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_3_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch2_out1_6                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch1_out1_6                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_4_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_5_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch5_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_6_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Start_7_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch7_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch6_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch4_out1_5                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL alpha24_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch2_out1_7                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Switch34_out1_1                  : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Delay7_out1                      : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL bitsll_mant_b_ib_zerosig         : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL bitsll_mant_b_ib_selsig          : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL dynamic_shift_zerosig_1          : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL dynamic_shift_selsig_1           : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL bitsll_mant_b_ib_out1            : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_bitget_mant_b_mant_b_WordLen_1_out1 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat3_out1                 : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL mant_a_norm_mant_b_norm_relop1   : std_logic;
  SIGNAL bitsll_mant_a_norm_1_out1        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_mant_a_norm_mant_b_norm_1_out1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay3_out1_2                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_8                : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Data_Type_Conversion1_out1       : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Unary_Minus2_in0                 : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL Unary_Minus2_out1                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_out1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_6                 : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Data_Type_Conversion_out1        : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1                  : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_1             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_7          : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Delay_P7_out1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL if_tmp_0_1_out1                  : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_1                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P7_1_out1                  : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P7_2_out1                  : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_2             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_8          : std_logic;
  SIGNAL Bit_Concat_out1_1                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL if_tmp_0_1_out1_1                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_2                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_3             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_9          : std_logic;
  SIGNAL Bit_Concat_out1_2                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Delay_P9_out1                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL if_tmp_0_1_out1_2                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_3                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P9_1_out1                  : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P9_10_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_4             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_10         : std_logic;
  SIGNAL Bit_Concat_out1_3                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL if_tmp_0_1_out1_3                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_4                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_5             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_11         : std_logic;
  SIGNAL Bit_Concat_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay_P11_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL if_tmp_0_1_out1_4                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_5                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P11_1_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P11_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_6             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_12         : std_logic;
  SIGNAL Bit_Concat_out1_5                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL if_tmp_0_1_out1_5                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_6                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_7             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_13         : std_logic;
  SIGNAL Bit_Concat_out1_6                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_P13_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL if_tmp_0_1_out1_6                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_7                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P13_1_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P13_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_8             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_14                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_14         : std_logic;
  SIGNAL Bit_Concat_out1_7                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL if_tmp_0_1_out1_7                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_8                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_9             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_15         : std_logic;
  SIGNAL Bit_Concat_out1_8                : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Delay_P15_out1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL if_tmp_0_1_out1_8                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_9                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P15_1_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P15_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_10            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_16                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_16         : std_logic;
  SIGNAL Bit_Concat_out1_9                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_tmp_0_1_out1_9                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_10               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_11            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_17                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_17         : std_logic;
  SIGNAL Bit_Concat_out1_10               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Delay_P17_out1                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL if_tmp_0_1_out1_10               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_11               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P17_1_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P17_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_12            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_18                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_18         : std_logic;
  SIGNAL Bit_Concat_out1_11               : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL if_tmp_0_1_out1_11               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_12               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_13            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_19                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_19         : std_logic;
  SIGNAL Bit_Concat_out1_12               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Delay_P19_out1                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL if_tmp_0_1_out1_12               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_13               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P19_1_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P19_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_14            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_20                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_20         : std_logic;
  SIGNAL Bit_Concat_out1_13               : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL if_tmp_0_1_out1_13               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_14               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_15            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_21                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_21         : std_logic;
  SIGNAL Bit_Concat_out1_14               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay_P21_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL if_tmp_0_1_out1_14               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_15               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P21_1_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P21_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_16            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_22                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_22         : std_logic;
  SIGNAL Bit_Concat_out1_15               : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL if_tmp_0_1_out1_15               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_16               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_17            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_23                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_23         : std_logic;
  SIGNAL Bit_Concat_out1_16               : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Delay_P23_out1                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL if_tmp_0_1_out1_16               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_17               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P23_1_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P23_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_18            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_24                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_24         : std_logic;
  SIGNAL Bit_Concat_out1_17               : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL if_tmp_0_1_out1_17               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_18               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_19            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_25                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_25         : std_logic;
  SIGNAL Bit_Concat_out1_18               : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Delay_P25_out1                   : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL if_tmp_0_1_out1_18               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_19               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P25_1_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P25_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_20            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_26                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_26         : std_logic;
  SIGNAL Bit_Concat_out1_19               : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL if_tmp_0_1_out1_19               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_20               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_21            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_27                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_27         : std_logic;
  SIGNAL Bit_Concat_out1_20               : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL Delay_P27_1_out1                 : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL if_tmp_0_1_out1_20               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_21               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P27_out1                   : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P27_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_22            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_28                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_28         : std_logic;
  SIGNAL Bit_Concat_out1_21               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_tmp_0_1_out1_21               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_22               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_23            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_29                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_29         : std_logic;
  SIGNAL Bit_Concat_out1_22               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay_P29_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_tmp_0_1_out1_22               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_23               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P29_1_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay_P29_2_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_mant_b_norm_out1_24            : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_30                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_30         : std_logic;
  SIGNAL Bit_Concat_out1_23               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL alpha1_out1_3                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Delay12_out1_1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL alpha1_ia_out1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL DTC1_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay15_out1_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC2_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_bitget_mant_a_mant_a_WordLen_out1 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cast_1_like_exp_a_norm_out1      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_a_norm_cast_1_like_e_out1    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_mant_a_norm_mant_b_norm_out1  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay4_out1_1                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha1_out1_4                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Delay4_out1_2                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL alpha1_ib_out1                   : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL DTC4_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_2                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1_1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay9_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC5_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_bitget_mant_b_mant_b_WordLen_out1 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay1_out1_1                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_a_norm_exp_b_norm_out1       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cfType_ExponentBias_out1         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_a_norm_exp_b_norm_cast_out1  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay_out1                       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_tmp_2_cfType_ExponentBi_out1 : std_logic;  -- ufix1
  SIGNAL exp_tmp_1_out1                   : std_logic;  -- ufix1
  SIGNAL C2_out1                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL exp_tmp_cfType_MantissaLen_out1  : std_logic;  -- ufix1
  SIGNAL alpha1_out1_5                    : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL C_out1_3                         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL DTC1_out1_1                      : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL alpha1_int8_exp_tmp_out1         : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL DTC2_out1_1                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL if_exp_tmp_cfType_MantissaLe_out1 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL if_exp_tmp_1_1_out1              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL C4_out1                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL if_exp_tmp_2_cfType_ExponentB_1_out1 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay11_reg                      : vector_of_unsigned5(0 TO 10);  -- ufix5 [11]
  SIGNAL Delay11_out1_1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL bitsrl_Q_shift_length_out1       : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice_out1_1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay9_out1_1                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BitSlice1_out1_1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1_6                : std_logic;  -- ufix1
  SIGNAL Bit_Slice8_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_31                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Constant_out1                    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_24               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_32                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_31         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_6                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_6         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_6                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1                     : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_10               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_33                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_32         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_7                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_7         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_7                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1_1                   : std_logic;  -- ufix1
  SIGNAL Switch6_out1_8                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_10               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_34                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_12               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_33         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_9                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_8         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_8                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1_2                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_9                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_35                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_13               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_34         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_10                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_12               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_9         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_9                   : std_logic;  -- ufix1
  SIGNAL Switch3_out1_3                   : std_logic;  -- ufix1
  SIGNAL Switch7_out1_10                  : std_logic;  -- ufix1
  SIGNAL Switch3_out1_4                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_6                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_36                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_14               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_35         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_11                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_13               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_10        : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_10        : std_logic;  -- ufix1
  SIGNAL Switch7_out1_11                  : std_logic;  -- ufix1
  SIGNAL Switch3_out1_5                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_6                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice_out1_37                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_10        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_15               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_36         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_12                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_14               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_11        : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_12               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_11        : std_logic;  -- ufix1
  SIGNAL Switch7_out1_12                  : std_logic;  -- ufix1
  SIGNAL Switch3_out1_6                   : std_logic;  -- ufix1
  SIGNAL Switch4_out1_6                   : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_37         : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_8                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Slice_out1_38                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_11        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_16               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_38         : std_logic;  -- ufix1
  SIGNAL Switch7_out1_13                  : std_logic;  -- ufix1
  SIGNAL if_tmp_0_1_out1_23               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_R_1_out1_24               : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_0_out1                         : std_logic;  -- ufix1
  SIGNAL Switch1_out1_7                   : std_logic;  -- ufix1
  SIGNAL Switch2_out1_8                   : std_logic;  -- ufix1
  SIGNAL sticky_bitsll_Q_Q_WordLen_out1   : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_2                  : std_logic;  -- ufix1
  SIGNAL Delay10_out1_1                   : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_2                    : std_logic;  -- ufix1
  SIGNAL BitSlice4_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Concat_out1_25               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha2_out1                      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Mant_tmp_2_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BitSlice2_out1                   : std_logic;  -- ufix1
  SIGNAL DTC3_out1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C1_out1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_exp_tmp_1_out1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C3_out1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_exp_tmp_2_cfType_ExponentB_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay8_reg                       : vector_of_unsigned8(0 TO 11);  -- ufix8 [12]
  SIGNAL Delay8_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha1_out1_6                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_1_out1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C4_out1_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bExponent_0_bMantissa_out1    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C1_out1_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_4                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bExponent_0_bMantissa_out1_1  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_0_aMantissa_out1    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C1_out1_2                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_mant_b_0_out1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_exp_a_cfType_Exponent_Inf_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay25_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay39_reg                      : vector_of_unsigned8(0 TO 12);  -- ufix8 [13]
  SIGNAL Delay39_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay55_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_cfType_Exponent_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant3_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1_13                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay4_out1_3                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL BitSlice3_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_5                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C5_out1                          : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bExponent_0_bMantissa_1_out1  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C3_out1_1                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C2_out1_1                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bExponent_0_bMantissa_1_out1_1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_0_aMantissa_1_out1  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C2_out1_2                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_mant_b_0_1_out1               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_6                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_exp_b_cfType_Exponent_Inf_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_exp_a_cfType_Exponent_Inf_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay24_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay49_reg                      : vector_of_unsigned23(0 TO 12);  -- ufix23 [13]
  SIGNAL Delay49_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay56_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_cfType_Exponent_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant2_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch5_out1_6                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay5_out1_1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  Constant8_out1 <= '1';

  Constant7_out1 <= to_unsigned(16#0F#, 6);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '1';
      ELSIF enb = '1' THEN
        Delay4_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator_out1 <= Constant8_out1 AND Delay4_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1;
  Add_out1 <= Delay3_out1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 <= Constant7_out1 ELSE
      '0';

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '1';
      ELSIF enb = '1' THEN
        Delay1_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in1_unsigned(31);
  aExponent <= nfp_in1_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in1_unsigned(22 DOWNTO 0);

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay15_out1 <= aSign;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 32 bit word into FP sign, exponent, mantissa
  bSign <= nfp_in2_unsigned(31);
  bExponent <= nfp_in2_unsigned(30 DOWNTO 23);
  bMantissa <= nfp_in2_unsigned(22 DOWNTO 0);

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay18_out1 <= bSign;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  tmp_out1 <= Delay15_out1 XOR Delay18_out1;

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay29_out1 <= tmp_out1;
      END IF;
    END IF;
  END PROCESS Delay29_process;


  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay26_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay26_reg(0) <= Delay29_out1;
        Delay26_reg(12 DOWNTO 1) <= Delay26_reg(11 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay26_process;

  Delay26_out1 <= Delay26_reg(12);

  Delay54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay54_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay54_out1 <= Delay26_out1;
      END IF;
    END IF;
  END PROCESS Delay54_process;


  Constant1_out1 <= '0';

  
  Switch1_out1 <= Delay54_out1 WHEN Delay1_out1 = '0' ELSE
      Constant1_out1;

  Delay3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_1_process;


  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay16_out1 <= aExponent;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay16_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay19_out1 <= bExponent;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  bExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay19_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaaExponent_cfType_Exponent_out1 <= aExponent_cfType_Exponent_I_out1 OR bExponent_cfType_Exponent_I_out1;

  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay38_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay38_out1 <= alphaaExponent_cfType_Exponent_out1;
      END IF;
    END IF;
  END PROCESS Delay38_process;


  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay21_reg(0) <= Delay38_out1;
        Delay21_reg(12 DOWNTO 1) <= Delay21_reg(11 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay21_process;

  Delay21_out1 <= Delay21_reg(12);

  Delay51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay51_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay51_out1 <= Delay21_out1;
      END IF;
    END IF;
  END PROCESS Delay51_process;


  
  aExponent_0_out1 <= '1' WHEN Delay16_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay17_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  aMantissa_0_out1 <= '1' WHEN Delay17_out1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  alphaaExponent_0_aMantissa_out1 <= aExponent_0_out1 AND aMantissa_0_out1;

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay32_out1 <= alphaaExponent_0_aMantissa_out1;
      END IF;
    END IF;
  END PROCESS Delay32_process;


  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay23_reg(0) <= Delay32_out1;
        Delay23_reg(12 DOWNTO 1) <= Delay23_reg(11 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay23_process;

  Delay23_out1 <= Delay23_reg(12);

  Delay53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay53_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay53_out1 <= Delay23_out1;
      END IF;
    END IF;
  END PROCESS Delay53_process;


  
  bExponent_0_out1 <= '1' WHEN Delay19_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay20_out1 <= bMantissa;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  
  bMantissa_0_out1 <= '1' WHEN Delay20_out1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  alphabExponent_0_bMantissa_out1 <= bExponent_0_out1 AND bMantissa_0_out1;

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay35_out1 <= alphabExponent_0_bMantissa_out1;
      END IF;
    END IF;
  END PROCESS Delay35_process;


  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay22_reg(0) <= Delay35_out1;
        Delay22_reg(12 DOWNTO 1) <= Delay22_reg(11 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay22_process;

  Delay22_out1 <= Delay22_reg(12);

  Delay52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay52_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay52_out1 <= Delay22_out1;
      END IF;
    END IF;
  END PROCESS Delay52_process;


  C_out1 <= '1';

  alpha1_out1 <= to_unsigned(16#0#, 4);

  alphaExponent_0_cfType_Exp_out1 <= aExponent_0_out1 OR aExponent_cfType_Exponent_I_out1;

  alpha1_out1_1 <= '1';

  alpha0_out1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1 <= alpha1_out1_1 WHEN alphaExponent_0_cfType_Exp_out1 = '0' ELSE
      alpha0_out1;

  Bit_Concat1_out1 <= if_Exponent_0_cfType_Exp_out1 & Delay17_out1;

  BitSlice_out1 <= Bit_Concat1_out1(23);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay14_out1 <= BitSlice_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay10_out1 <= Bit_Concat1_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Bit_Slice6_out1 <= Bit_Concat1_out1(23);

  Bit_Slice2_out1 <= Bit_Concat1_out1(22 DOWNTO 15);

  Bit_Slice7_out1 <= Bit_Slice2_out1(7);

  Bit_Slice6_out1_1 <= Bit_Slice2_out1(6);

  Logical_Operator3_out1 <= Bit_Slice7_out1 OR Bit_Slice6_out1_1;

  Bit_Slice5_out1 <= Bit_Slice2_out1(5);

  Bit_Slice3_out1 <= Bit_Slice2_out1(4);

  Logical_Operator_out1_1 <= Bit_Slice5_out1 OR Bit_Slice3_out1;

  Logical_Operator1_out1 <= Logical_Operator3_out1 OR Logical_Operator_out1_1;

  Bit_Slice2_out1_1 <= Bit_Slice2_out1(3);

  Bit_Slice1_out1 <= Bit_Slice2_out1(2);

  Logical_Operator4_out1 <= Bit_Slice2_out1_1 OR Bit_Slice1_out1;

  Bit_Slice_out1 <= Bit_Slice2_out1(1);

  Bit_Slice4_out1 <= Bit_Slice2_out1(0);

  Logical_Operator2_out1 <= Bit_Slice_out1 OR Bit_Slice4_out1;

  Logical_Operator5_out1 <= Logical_Operator4_out1 OR Logical_Operator2_out1;

  Logical_Operator6_out1 <= Logical_Operator1_out1 OR Logical_Operator5_out1;

  Bit_Slice1_out1_1 <= Bit_Concat1_out1(14 DOWNTO 7);

  Bit_Slice7_out1_1 <= Bit_Slice1_out1_1(7);

  Bit_Slice6_out1_2 <= Bit_Slice1_out1_1(6);

  Logical_Operator3_out1_1 <= Bit_Slice7_out1_1 OR Bit_Slice6_out1_2;

  Bit_Slice5_out1_1 <= Bit_Slice1_out1_1(5);

  Bit_Slice3_out1_1 <= Bit_Slice1_out1_1(4);

  Logical_Operator_out1_2 <= Bit_Slice5_out1_1 OR Bit_Slice3_out1_1;

  Logical_Operator1_out1_1 <= Logical_Operator3_out1_1 OR Logical_Operator_out1_2;

  Bit_Slice2_out1_2 <= Bit_Slice1_out1_1(3);

  Bit_Slice1_out1_2 <= Bit_Slice1_out1_1(2);

  Logical_Operator4_out1_1 <= Bit_Slice2_out1_2 OR Bit_Slice1_out1_2;

  Bit_Slice_out1_1 <= Bit_Slice1_out1_1(1);

  Bit_Slice4_out1_1 <= Bit_Slice1_out1_1(0);

  Logical_Operator2_out1_1 <= Bit_Slice_out1_1 OR Bit_Slice4_out1_1;

  Logical_Operator5_out1_1 <= Logical_Operator4_out1_1 OR Logical_Operator2_out1_1;

  Bit_Slice4_out1_2 <= Bit_Concat1_out1(6 DOWNTO 0);

  Bit_Slice7_out1_2 <= Bit_Slice4_out1_2(6);

  Bit_Slice6_out1_3 <= Bit_Slice4_out1_2(5);

  Logical_Operator3_out1_2 <= Bit_Slice7_out1_2 OR Bit_Slice6_out1_3;

  Bit_Slice5_out1_2 <= Bit_Slice4_out1_2(4);

  Bit_Slice3_out1_2 <= Bit_Slice4_out1_2(3);

  Logical_Operator_out1_3 <= Bit_Slice5_out1_2 OR Bit_Slice3_out1_2;

  Bit_Slice2_out1_3 <= Bit_Slice4_out1_2(2);

  Bit_Slice1_out1_3 <= Bit_Slice4_out1_2(1);

  Bit_Slice_out1_2 <= Bit_Slice4_out1_2(0);

  -- handling denormalized signals
  Start_out1 <= to_signed(16#18#, 8);

  Logical_Operator4_out1_2 <= Bit_Slice2_out1_3 OR Bit_Slice1_out1_3;

  Start_1_out1 <= to_signed(16#17#, 8);

  
  Switch_out1 <= Start_out1 WHEN Bit_Slice_out1_2 = '0' ELSE
      Start_1_out1;

  Start_2_out1 <= to_signed(16#16#, 8);

  Start_3_out1 <= to_signed(16#15#, 8);

  Logical_Operator1_out1_2 <= Logical_Operator3_out1_2 OR Logical_Operator_out1_3;

  
  Switch2_out1 <= Start_2_out1 WHEN Bit_Slice2_out1_3 = '0' ELSE
      Start_3_out1;

  
  Switch1_out1_1 <= Switch_out1 WHEN Logical_Operator4_out1_2 = '0' ELSE
      Switch2_out1;

  Start_4_out1 <= to_signed(16#14#, 8);

  Start_5_out1 <= to_signed(16#13#, 8);

  
  Switch5_out1 <= Start_4_out1 WHEN Bit_Slice5_out1_2 = '0' ELSE
      Start_5_out1;

  Start_6_out1 <= to_signed(16#12#, 8);

  Start_7_out1 <= to_signed(16#11#, 8);

  
  Switch7_out1 <= Start_6_out1 WHEN Bit_Slice7_out1_2 = '0' ELSE
      Start_7_out1;

  Logical_Operator6_out1_1 <= Logical_Operator1_out1_1 OR Logical_Operator5_out1_1;

  
  Switch6_out1 <= Switch5_out1 WHEN Logical_Operator3_out1_2 = '0' ELSE
      Switch7_out1;

  
  Switch4_out1 <= Switch1_out1_1 WHEN Logical_Operator1_out1_2 = '0' ELSE
      Switch6_out1;

  Start_out1_1 <= to_signed(16#10#, 8);

  Start_1_out1_1 <= to_signed(16#0F#, 8);

  
  Switch_out1_1 <= Start_out1_1 WHEN Bit_Slice_out1_1 = '0' ELSE
      Start_1_out1_1;

  Start_2_out1_1 <= to_signed(16#0E#, 8);

  Start_3_out1_1 <= to_signed(16#0D#, 8);

  
  Switch2_out1_1 <= Start_2_out1_1 WHEN Bit_Slice2_out1_2 = '0' ELSE
      Start_3_out1_1;

  
  Switch1_out1_2 <= Switch_out1_1 WHEN Logical_Operator4_out1_1 = '0' ELSE
      Switch2_out1_1;

  Start_4_out1_1 <= to_signed(16#0C#, 8);

  Start_5_out1_1 <= to_signed(16#0B#, 8);

  
  Switch5_out1_1 <= Start_4_out1_1 WHEN Bit_Slice5_out1_1 = '0' ELSE
      Start_5_out1_1;

  Start_6_out1_1 <= to_signed(16#0A#, 8);

  Start_7_out1_1 <= to_signed(16#09#, 8);

  
  Switch7_out1_1 <= Start_6_out1_1 WHEN Bit_Slice7_out1_1 = '0' ELSE
      Start_7_out1_1;

  
  Switch6_out1_1 <= Switch5_out1_1 WHEN Logical_Operator3_out1_1 = '0' ELSE
      Switch7_out1_1;

  Logical_Operator2_out1_2 <= Bit_Slice6_out1 OR Logical_Operator6_out1;

  
  Switch4_out1_1 <= Switch1_out1_2 WHEN Logical_Operator1_out1_1 = '0' ELSE
      Switch6_out1_1;

  
  Switch33_out1 <= Switch4_out1 WHEN Logical_Operator6_out1_1 = '0' ELSE
      Switch4_out1_1;

  Start_out1_2 <= to_signed(16#08#, 8);

  Start_1_out1_2 <= to_signed(16#07#, 8);

  
  Switch_out1_2 <= Start_out1_2 WHEN Bit_Slice_out1 = '0' ELSE
      Start_1_out1_2;

  Start_2_out1_2 <= to_signed(16#06#, 8);

  Start_3_out1_2 <= to_signed(16#05#, 8);

  
  Switch2_out1_2 <= Start_2_out1_2 WHEN Bit_Slice2_out1_1 = '0' ELSE
      Start_3_out1_2;

  
  Switch1_out1_3 <= Switch_out1_2 WHEN Logical_Operator4_out1 = '0' ELSE
      Switch2_out1_2;

  Start_4_out1_2 <= to_signed(16#04#, 8);

  Start_5_out1_2 <= to_signed(16#03#, 8);

  
  Switch5_out1_2 <= Start_4_out1_2 WHEN Bit_Slice5_out1 = '0' ELSE
      Start_5_out1_2;

  Start_6_out1_2 <= to_signed(16#02#, 8);

  Start_7_out1_2 <= to_signed(16#01#, 8);

  
  Switch7_out1_2 <= Start_6_out1_2 WHEN Bit_Slice7_out1 = '0' ELSE
      Start_7_out1_2;

  
  Switch6_out1_2 <= Switch5_out1_2 WHEN Logical_Operator3_out1 = '0' ELSE
      Switch7_out1_2;

  
  Switch4_out1_2 <= Switch1_out1_3 WHEN Logical_Operator1_out1 = '0' ELSE
      Switch6_out1_2;

  alpha24_out1 <= to_signed(16#00#, 8);

  
  Switch2_out1_3 <= Switch4_out1_2 WHEN Bit_Slice6_out1 = '0' ELSE
      alpha24_out1;

  
  Switch34_out1 <= Switch33_out1 WHEN Logical_Operator2_out1_2 = '0' ELSE
      Switch2_out1_3;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1 <= Switch34_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  bitsll_mant_a_ia_zerosig <= to_signed(16#00#, 8);

  
  bitsll_mant_a_ia_selsig <= Delay11_out1 WHEN Delay11_out1 >= bitsll_mant_a_ia_zerosig ELSE
      bitsll_mant_a_ia_zerosig;

  dynamic_shift_zerosig <= to_signed(16#00#, 8);

  
  dynamic_shift_selsig <= bitsll_mant_a_ia_selsig WHEN bitsll_mant_a_ia_selsig >= dynamic_shift_zerosig ELSE
      dynamic_shift_zerosig;

  bitsll_mant_a_ia_out1 <= Delay10_out1 sll to_integer(dynamic_shift_selsig);

  
  if_bitget_mant_a_mant_a_WordLen_1_out1 <= bitsll_mant_a_ia_out1 WHEN Delay14_out1 = '0' ELSE
      Delay10_out1;

  Bit_Concat1_out1_1 <= alpha1_out1 & if_bitget_mant_a_mant_a_WordLen_1_out1;

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat1_out1_1);

  alpha3_out1 <= to_unsigned(16#0#, 4);

  alphaExponent_0_cfType_Exp_out1_1 <= bExponent_0_out1 OR bExponent_cfType_Exponent_I_out1;

  alpha1_out1_2 <= '1';

  alpha0_out1_1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1_1 <= alpha1_out1_2 WHEN alphaExponent_0_cfType_Exp_out1_1 = '0' ELSE
      alpha0_out1_1;

  Bit_Concat1_out1_2 <= if_Exponent_0_cfType_Exp_out1_1 & Delay20_out1;

  BitSlice1_out1 <= Bit_Concat1_out1_2(23);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= BitSlice1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay12_out1 <= Bit_Concat1_out1_2;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Bit_Slice6_out1_4 <= Bit_Concat1_out1_2(23);

  Bit_Slice2_out1_4 <= Bit_Concat1_out1_2(22 DOWNTO 15);

  Bit_Slice7_out1_3 <= Bit_Slice2_out1_4(7);

  Bit_Slice6_out1_5 <= Bit_Slice2_out1_4(6);

  Logical_Operator3_out1_3 <= Bit_Slice7_out1_3 OR Bit_Slice6_out1_5;

  Bit_Slice5_out1_3 <= Bit_Slice2_out1_4(5);

  Bit_Slice3_out1_3 <= Bit_Slice2_out1_4(4);

  Logical_Operator_out1_4 <= Bit_Slice5_out1_3 OR Bit_Slice3_out1_3;

  Logical_Operator1_out1_3 <= Logical_Operator3_out1_3 OR Logical_Operator_out1_4;

  Bit_Slice2_out1_5 <= Bit_Slice2_out1_4(3);

  Bit_Slice1_out1_4 <= Bit_Slice2_out1_4(2);

  Logical_Operator4_out1_3 <= Bit_Slice2_out1_5 OR Bit_Slice1_out1_4;

  Bit_Slice_out1_3 <= Bit_Slice2_out1_4(1);

  Bit_Slice4_out1_3 <= Bit_Slice2_out1_4(0);

  Logical_Operator2_out1_3 <= Bit_Slice_out1_3 OR Bit_Slice4_out1_3;

  Logical_Operator5_out1_2 <= Logical_Operator4_out1_3 OR Logical_Operator2_out1_3;

  Logical_Operator6_out1_2 <= Logical_Operator1_out1_3 OR Logical_Operator5_out1_2;

  Bit_Slice1_out1_5 <= Bit_Concat1_out1_2(14 DOWNTO 7);

  Bit_Slice7_out1_4 <= Bit_Slice1_out1_5(7);

  Bit_Slice6_out1_6 <= Bit_Slice1_out1_5(6);

  Logical_Operator3_out1_4 <= Bit_Slice7_out1_4 OR Bit_Slice6_out1_6;

  Bit_Slice5_out1_4 <= Bit_Slice1_out1_5(5);

  Bit_Slice3_out1_4 <= Bit_Slice1_out1_5(4);

  Logical_Operator_out1_5 <= Bit_Slice5_out1_4 OR Bit_Slice3_out1_4;

  Logical_Operator1_out1_4 <= Logical_Operator3_out1_4 OR Logical_Operator_out1_5;

  Bit_Slice2_out1_6 <= Bit_Slice1_out1_5(3);

  Bit_Slice1_out1_6 <= Bit_Slice1_out1_5(2);

  Logical_Operator4_out1_4 <= Bit_Slice2_out1_6 OR Bit_Slice1_out1_6;

  Bit_Slice_out1_4 <= Bit_Slice1_out1_5(1);

  Bit_Slice4_out1_4 <= Bit_Slice1_out1_5(0);

  Logical_Operator2_out1_4 <= Bit_Slice_out1_4 OR Bit_Slice4_out1_4;

  Logical_Operator5_out1_3 <= Logical_Operator4_out1_4 OR Logical_Operator2_out1_4;

  Bit_Slice4_out1_5 <= Bit_Concat1_out1_2(6 DOWNTO 0);

  Bit_Slice7_out1_5 <= Bit_Slice4_out1_5(6);

  Bit_Slice6_out1_7 <= Bit_Slice4_out1_5(5);

  Logical_Operator3_out1_5 <= Bit_Slice7_out1_5 OR Bit_Slice6_out1_7;

  Bit_Slice5_out1_5 <= Bit_Slice4_out1_5(4);

  Bit_Slice3_out1_5 <= Bit_Slice4_out1_5(3);

  Logical_Operator_out1_6 <= Bit_Slice5_out1_5 OR Bit_Slice3_out1_5;

  Bit_Slice2_out1_7 <= Bit_Slice4_out1_5(2);

  Bit_Slice1_out1_7 <= Bit_Slice4_out1_5(1);

  Bit_Slice_out1_5 <= Bit_Slice4_out1_5(0);

  Start_out1_3 <= to_signed(16#18#, 8);

  Logical_Operator4_out1_5 <= Bit_Slice2_out1_7 OR Bit_Slice1_out1_7;

  Start_1_out1_3 <= to_signed(16#17#, 8);

  
  Switch_out1_3 <= Start_out1_3 WHEN Bit_Slice_out1_5 = '0' ELSE
      Start_1_out1_3;

  Start_2_out1_3 <= to_signed(16#16#, 8);

  Start_3_out1_3 <= to_signed(16#15#, 8);

  Logical_Operator1_out1_5 <= Logical_Operator3_out1_5 OR Logical_Operator_out1_6;

  
  Switch2_out1_4 <= Start_2_out1_3 WHEN Bit_Slice2_out1_7 = '0' ELSE
      Start_3_out1_3;

  
  Switch1_out1_4 <= Switch_out1_3 WHEN Logical_Operator4_out1_5 = '0' ELSE
      Switch2_out1_4;

  Start_4_out1_3 <= to_signed(16#14#, 8);

  Start_5_out1_3 <= to_signed(16#13#, 8);

  
  Switch5_out1_3 <= Start_4_out1_3 WHEN Bit_Slice5_out1_5 = '0' ELSE
      Start_5_out1_3;

  Start_6_out1_3 <= to_signed(16#12#, 8);

  Start_7_out1_3 <= to_signed(16#11#, 8);

  
  Switch7_out1_3 <= Start_6_out1_3 WHEN Bit_Slice7_out1_5 = '0' ELSE
      Start_7_out1_3;

  Logical_Operator6_out1_3 <= Logical_Operator1_out1_4 OR Logical_Operator5_out1_3;

  
  Switch6_out1_3 <= Switch5_out1_3 WHEN Logical_Operator3_out1_5 = '0' ELSE
      Switch7_out1_3;

  
  Switch4_out1_3 <= Switch1_out1_4 WHEN Logical_Operator1_out1_5 = '0' ELSE
      Switch6_out1_3;

  Start_out1_4 <= to_signed(16#10#, 8);

  Start_1_out1_4 <= to_signed(16#0F#, 8);

  
  Switch_out1_4 <= Start_out1_4 WHEN Bit_Slice_out1_4 = '0' ELSE
      Start_1_out1_4;

  Start_2_out1_4 <= to_signed(16#0E#, 8);

  Start_3_out1_4 <= to_signed(16#0D#, 8);

  
  Switch2_out1_5 <= Start_2_out1_4 WHEN Bit_Slice2_out1_6 = '0' ELSE
      Start_3_out1_4;

  
  Switch1_out1_5 <= Switch_out1_4 WHEN Logical_Operator4_out1_4 = '0' ELSE
      Switch2_out1_5;

  Start_4_out1_4 <= to_signed(16#0C#, 8);

  Start_5_out1_4 <= to_signed(16#0B#, 8);

  
  Switch5_out1_4 <= Start_4_out1_4 WHEN Bit_Slice5_out1_4 = '0' ELSE
      Start_5_out1_4;

  Start_6_out1_4 <= to_signed(16#0A#, 8);

  Start_7_out1_4 <= to_signed(16#09#, 8);

  
  Switch7_out1_4 <= Start_6_out1_4 WHEN Bit_Slice7_out1_4 = '0' ELSE
      Start_7_out1_4;

  
  Switch6_out1_4 <= Switch5_out1_4 WHEN Logical_Operator3_out1_4 = '0' ELSE
      Switch7_out1_4;

  Logical_Operator2_out1_5 <= Bit_Slice6_out1_4 OR Logical_Operator6_out1_2;

  
  Switch4_out1_4 <= Switch1_out1_5 WHEN Logical_Operator1_out1_4 = '0' ELSE
      Switch6_out1_4;

  
  Switch33_out1_1 <= Switch4_out1_3 WHEN Logical_Operator6_out1_3 = '0' ELSE
      Switch4_out1_4;

  Start_out1_5 <= to_signed(16#08#, 8);

  Start_1_out1_5 <= to_signed(16#07#, 8);

  
  Switch_out1_5 <= Start_out1_5 WHEN Bit_Slice_out1_3 = '0' ELSE
      Start_1_out1_5;

  Start_2_out1_5 <= to_signed(16#06#, 8);

  Start_3_out1_5 <= to_signed(16#05#, 8);

  
  Switch2_out1_6 <= Start_2_out1_5 WHEN Bit_Slice2_out1_5 = '0' ELSE
      Start_3_out1_5;

  
  Switch1_out1_6 <= Switch_out1_5 WHEN Logical_Operator4_out1_3 = '0' ELSE
      Switch2_out1_6;

  Start_4_out1_5 <= to_signed(16#04#, 8);

  Start_5_out1_5 <= to_signed(16#03#, 8);

  
  Switch5_out1_5 <= Start_4_out1_5 WHEN Bit_Slice5_out1_3 = '0' ELSE
      Start_5_out1_5;

  Start_6_out1_5 <= to_signed(16#02#, 8);

  Start_7_out1_5 <= to_signed(16#01#, 8);

  
  Switch7_out1_5 <= Start_6_out1_5 WHEN Bit_Slice7_out1_3 = '0' ELSE
      Start_7_out1_5;

  
  Switch6_out1_5 <= Switch5_out1_5 WHEN Logical_Operator3_out1_3 = '0' ELSE
      Switch7_out1_5;

  
  Switch4_out1_5 <= Switch1_out1_6 WHEN Logical_Operator1_out1_3 = '0' ELSE
      Switch6_out1_5;

  alpha24_out1_1 <= to_signed(16#00#, 8);

  
  Switch2_out1_7 <= Switch4_out1_5 WHEN Bit_Slice6_out1_4 = '0' ELSE
      alpha24_out1_1;

  
  Switch34_out1_1 <= Switch33_out1_1 WHEN Logical_Operator2_out1_5 = '0' ELSE
      Switch2_out1_7;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch34_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  bitsll_mant_b_ib_zerosig <= to_signed(16#00#, 8);

  
  bitsll_mant_b_ib_selsig <= Delay7_out1 WHEN Delay7_out1 >= bitsll_mant_b_ib_zerosig ELSE
      bitsll_mant_b_ib_zerosig;

  dynamic_shift_zerosig_1 <= to_signed(16#00#, 8);

  
  dynamic_shift_selsig_1 <= bitsll_mant_b_ib_selsig WHEN bitsll_mant_b_ib_selsig >= dynamic_shift_zerosig_1 ELSE
      dynamic_shift_zerosig_1;

  bitsll_mant_b_ib_out1 <= Delay12_out1 sll to_integer(dynamic_shift_selsig_1);

  
  if_bitget_mant_b_mant_b_WordLen_1_out1 <= bitsll_mant_b_ib_out1 WHEN Delay5_out1 = '0' ELSE
      Delay12_out1;

  Bit_Concat3_out1 <= alpha3_out1 & if_bitget_mant_b_mant_b_WordLen_1_out1;

  reinterpretcast_bitconcat_fi_0_out1_1 <= signed(Bit_Concat3_out1);

  
  mant_a_norm_mant_b_norm_relop1 <= '1' WHEN reinterpretcast_bitconcat_fi_0_out1 < reinterpretcast_bitconcat_fi_0_out1_1 ELSE
      '0';

  bitsll_mant_a_norm_1_out1 <= reinterpretcast_bitconcat_fi_0_out1 sll 1;

  
  if_mant_a_norm_mant_b_norm_1_out1 <= reinterpretcast_bitconcat_fi_0_out1 WHEN mant_a_norm_mant_b_norm_relop1 = '0' ELSE
      bitsll_mant_a_norm_1_out1;

  Delay3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= if_mant_a_norm_mant_b_norm_1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_2_process;


  Bit_Slice1_out1_8 <= unsigned(Delay3_out1_2(25 DOWNTO 0));

  Data_Type_Conversion1_out1 <= signed(Bit_Slice1_out1_8);

  Unary_Minus2_in0 <=  - (resize(reinterpretcast_bitconcat_fi_0_out1_1, 29));
  Unary_Minus2_out1 <= Unary_Minus2_in0(27 DOWNTO 0);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Unary_Minus2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Bit_Slice_out1_6 <= unsigned(Delay2_out1(25 DOWNTO 0));

  Data_Type_Conversion_out1 <= signed(Bit_Slice_out1_6);

  R_mant_b_norm_out1 <= Data_Type_Conversion1_out1 + Data_Type_Conversion_out1;

  bitsll_R_1_out1 <= R_mant_b_norm_out1 sll 1;

  R_mant_b_norm_out1_1 <= bitsll_R_1_out1 + Data_Type_Conversion_out1;

  Bit_Slice_out1_7 <= R_mant_b_norm_out1_1(25);

  Logical_Operator_out1_7 <=  NOT Bit_Slice_out1_7;

  Bit_Concat_out1 <= unsigned'(C_out1 & Logical_Operator_out1_7);

  Delay_P7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P7_out1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Delay_P7_out1 <= Bit_Concat_out1;
      END IF;
    END IF;
  END PROCESS Delay_P7_process;


  
  if_tmp_0_1_out1 <= R_mant_b_norm_out1_1 WHEN Bit_Slice_out1_7 = '0' ELSE
      bitsll_R_1_out1;

  bitsll_R_1_out1_1 <= if_tmp_0_1_out1 sll 1;

  Delay_P7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P7_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P7_1_out1 <= bitsll_R_1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_P7_1_process;


  Delay_P7_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P7_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P7_2_out1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Delay_P7_2_process;


  R_mant_b_norm_out1_2 <= Delay_P7_1_out1 + Delay_P7_2_out1;

  Bit_Slice_out1_8 <= R_mant_b_norm_out1_2(25);

  Logical_Operator_out1_8 <=  NOT Bit_Slice_out1_8;

  Bit_Concat_out1_1 <= Delay_P7_out1 & Logical_Operator_out1_8;

  
  if_tmp_0_1_out1_1 <= R_mant_b_norm_out1_2 WHEN Bit_Slice_out1_8 = '0' ELSE
      Delay_P7_1_out1;

  bitsll_R_1_out1_2 <= if_tmp_0_1_out1_1 sll 1;

  R_mant_b_norm_out1_3 <= bitsll_R_1_out1_2 + Delay_P7_2_out1;

  Bit_Slice_out1_9 <= R_mant_b_norm_out1_3(25);

  Logical_Operator_out1_9 <=  NOT Bit_Slice_out1_9;

  Bit_Concat_out1_2 <= Bit_Concat_out1_1 & Logical_Operator_out1_9;

  Delay_P9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P9_out1 <= to_unsigned(16#0#, 4);
      ELSIF enb = '1' THEN
        Delay_P9_out1 <= Bit_Concat_out1_2;
      END IF;
    END IF;
  END PROCESS Delay_P9_process;


  
  if_tmp_0_1_out1_2 <= R_mant_b_norm_out1_3 WHEN Bit_Slice_out1_9 = '0' ELSE
      bitsll_R_1_out1_2;

  bitsll_R_1_out1_3 <= if_tmp_0_1_out1_2 sll 1;

  Delay_P9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P9_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P9_1_out1 <= bitsll_R_1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay_P9_1_process;


  Delay_P9_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P9_10_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P9_10_out1 <= Delay_P7_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P9_10_process;


  R_mant_b_norm_out1_4 <= Delay_P9_1_out1 + Delay_P9_10_out1;

  Bit_Slice_out1_10 <= R_mant_b_norm_out1_4(25);

  Logical_Operator_out1_10 <=  NOT Bit_Slice_out1_10;

  Bit_Concat_out1_3 <= Delay_P9_out1 & Logical_Operator_out1_10;

  
  if_tmp_0_1_out1_3 <= R_mant_b_norm_out1_4 WHEN Bit_Slice_out1_10 = '0' ELSE
      Delay_P9_1_out1;

  bitsll_R_1_out1_4 <= if_tmp_0_1_out1_3 sll 1;

  R_mant_b_norm_out1_5 <= bitsll_R_1_out1_4 + Delay_P9_10_out1;

  Bit_Slice_out1_11 <= R_mant_b_norm_out1_5(25);

  Logical_Operator_out1_11 <=  NOT Bit_Slice_out1_11;

  Bit_Concat_out1_4 <= Bit_Concat_out1_3 & Logical_Operator_out1_11;

  Delay_P11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P11_out1 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay_P11_out1 <= Bit_Concat_out1_4;
      END IF;
    END IF;
  END PROCESS Delay_P11_process;


  
  if_tmp_0_1_out1_4 <= R_mant_b_norm_out1_5 WHEN Bit_Slice_out1_11 = '0' ELSE
      bitsll_R_1_out1_4;

  bitsll_R_1_out1_5 <= if_tmp_0_1_out1_4 sll 1;

  Delay_P11_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P11_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P11_1_out1 <= bitsll_R_1_out1_5;
      END IF;
    END IF;
  END PROCESS Delay_P11_1_process;


  Delay_P11_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P11_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P11_2_out1 <= Delay_P9_10_out1;
      END IF;
    END IF;
  END PROCESS Delay_P11_2_process;


  R_mant_b_norm_out1_6 <= Delay_P11_1_out1 + Delay_P11_2_out1;

  Bit_Slice_out1_12 <= R_mant_b_norm_out1_6(25);

  Logical_Operator_out1_12 <=  NOT Bit_Slice_out1_12;

  Bit_Concat_out1_5 <= Delay_P11_out1 & Logical_Operator_out1_12;

  
  if_tmp_0_1_out1_5 <= R_mant_b_norm_out1_6 WHEN Bit_Slice_out1_12 = '0' ELSE
      Delay_P11_1_out1;

  bitsll_R_1_out1_6 <= if_tmp_0_1_out1_5 sll 1;

  R_mant_b_norm_out1_7 <= bitsll_R_1_out1_6 + Delay_P11_2_out1;

  Bit_Slice_out1_13 <= R_mant_b_norm_out1_7(25);

  Logical_Operator_out1_13 <=  NOT Bit_Slice_out1_13;

  Bit_Concat_out1_6 <= Bit_Concat_out1_5 & Logical_Operator_out1_13;

  Delay_P13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P13_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay_P13_out1 <= Bit_Concat_out1_6;
      END IF;
    END IF;
  END PROCESS Delay_P13_process;


  
  if_tmp_0_1_out1_6 <= R_mant_b_norm_out1_7 WHEN Bit_Slice_out1_13 = '0' ELSE
      bitsll_R_1_out1_6;

  bitsll_R_1_out1_7 <= if_tmp_0_1_out1_6 sll 1;

  Delay_P13_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P13_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P13_1_out1 <= bitsll_R_1_out1_7;
      END IF;
    END IF;
  END PROCESS Delay_P13_1_process;


  Delay_P13_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P13_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P13_2_out1 <= Delay_P11_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P13_2_process;


  R_mant_b_norm_out1_8 <= Delay_P13_1_out1 + Delay_P13_2_out1;

  Bit_Slice_out1_14 <= R_mant_b_norm_out1_8(25);

  Logical_Operator_out1_14 <=  NOT Bit_Slice_out1_14;

  Bit_Concat_out1_7 <= Delay_P13_out1 & Logical_Operator_out1_14;

  
  if_tmp_0_1_out1_7 <= R_mant_b_norm_out1_8 WHEN Bit_Slice_out1_14 = '0' ELSE
      Delay_P13_1_out1;

  bitsll_R_1_out1_8 <= if_tmp_0_1_out1_7 sll 1;

  R_mant_b_norm_out1_9 <= bitsll_R_1_out1_8 + Delay_P13_2_out1;

  Bit_Slice_out1_15 <= R_mant_b_norm_out1_9(25);

  Logical_Operator_out1_15 <=  NOT Bit_Slice_out1_15;

  Bit_Concat_out1_8 <= Bit_Concat_out1_7 & Logical_Operator_out1_15;

  Delay_P15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P15_out1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay_P15_out1 <= Bit_Concat_out1_8;
      END IF;
    END IF;
  END PROCESS Delay_P15_process;


  
  if_tmp_0_1_out1_8 <= R_mant_b_norm_out1_9 WHEN Bit_Slice_out1_15 = '0' ELSE
      bitsll_R_1_out1_8;

  bitsll_R_1_out1_9 <= if_tmp_0_1_out1_8 sll 1;

  Delay_P15_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P15_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P15_1_out1 <= bitsll_R_1_out1_9;
      END IF;
    END IF;
  END PROCESS Delay_P15_1_process;


  Delay_P15_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P15_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P15_2_out1 <= Delay_P13_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P15_2_process;


  R_mant_b_norm_out1_10 <= Delay_P15_1_out1 + Delay_P15_2_out1;

  Bit_Slice_out1_16 <= R_mant_b_norm_out1_10(25);

  Logical_Operator_out1_16 <=  NOT Bit_Slice_out1_16;

  Bit_Concat_out1_9 <= Delay_P15_out1 & Logical_Operator_out1_16;

  
  if_tmp_0_1_out1_9 <= R_mant_b_norm_out1_10 WHEN Bit_Slice_out1_16 = '0' ELSE
      Delay_P15_1_out1;

  bitsll_R_1_out1_10 <= if_tmp_0_1_out1_9 sll 1;

  R_mant_b_norm_out1_11 <= bitsll_R_1_out1_10 + Delay_P15_2_out1;

  Bit_Slice_out1_17 <= R_mant_b_norm_out1_11(25);

  Logical_Operator_out1_17 <=  NOT Bit_Slice_out1_17;

  Bit_Concat_out1_10 <= Bit_Concat_out1_9 & Logical_Operator_out1_17;

  Delay_P17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P17_out1 <= to_unsigned(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay_P17_out1 <= Bit_Concat_out1_10;
      END IF;
    END IF;
  END PROCESS Delay_P17_process;


  
  if_tmp_0_1_out1_10 <= R_mant_b_norm_out1_11 WHEN Bit_Slice_out1_17 = '0' ELSE
      bitsll_R_1_out1_10;

  bitsll_R_1_out1_11 <= if_tmp_0_1_out1_10 sll 1;

  Delay_P17_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P17_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P17_1_out1 <= bitsll_R_1_out1_11;
      END IF;
    END IF;
  END PROCESS Delay_P17_1_process;


  Delay_P17_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P17_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P17_2_out1 <= Delay_P15_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P17_2_process;


  R_mant_b_norm_out1_12 <= Delay_P17_1_out1 + Delay_P17_2_out1;

  Bit_Slice_out1_18 <= R_mant_b_norm_out1_12(25);

  Logical_Operator_out1_18 <=  NOT Bit_Slice_out1_18;

  Bit_Concat_out1_11 <= Delay_P17_out1 & Logical_Operator_out1_18;

  
  if_tmp_0_1_out1_11 <= R_mant_b_norm_out1_12 WHEN Bit_Slice_out1_18 = '0' ELSE
      Delay_P17_1_out1;

  bitsll_R_1_out1_12 <= if_tmp_0_1_out1_11 sll 1;

  R_mant_b_norm_out1_13 <= bitsll_R_1_out1_12 + Delay_P17_2_out1;

  Bit_Slice_out1_19 <= R_mant_b_norm_out1_13(25);

  Logical_Operator_out1_19 <=  NOT Bit_Slice_out1_19;

  Bit_Concat_out1_12 <= Bit_Concat_out1_11 & Logical_Operator_out1_19;

  Delay_P19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P19_out1 <= to_unsigned(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay_P19_out1 <= Bit_Concat_out1_12;
      END IF;
    END IF;
  END PROCESS Delay_P19_process;


  
  if_tmp_0_1_out1_12 <= R_mant_b_norm_out1_13 WHEN Bit_Slice_out1_19 = '0' ELSE
      bitsll_R_1_out1_12;

  bitsll_R_1_out1_13 <= if_tmp_0_1_out1_12 sll 1;

  Delay_P19_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P19_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P19_1_out1 <= bitsll_R_1_out1_13;
      END IF;
    END IF;
  END PROCESS Delay_P19_1_process;


  Delay_P19_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P19_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P19_2_out1 <= Delay_P17_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P19_2_process;


  R_mant_b_norm_out1_14 <= Delay_P19_1_out1 + Delay_P19_2_out1;

  Bit_Slice_out1_20 <= R_mant_b_norm_out1_14(25);

  Logical_Operator_out1_20 <=  NOT Bit_Slice_out1_20;

  Bit_Concat_out1_13 <= Delay_P19_out1 & Logical_Operator_out1_20;

  
  if_tmp_0_1_out1_13 <= R_mant_b_norm_out1_14 WHEN Bit_Slice_out1_20 = '0' ELSE
      Delay_P19_1_out1;

  bitsll_R_1_out1_14 <= if_tmp_0_1_out1_13 sll 1;

  R_mant_b_norm_out1_15 <= bitsll_R_1_out1_14 + Delay_P19_2_out1;

  Bit_Slice_out1_21 <= R_mant_b_norm_out1_15(25);

  Logical_Operator_out1_21 <=  NOT Bit_Slice_out1_21;

  Bit_Concat_out1_14 <= Bit_Concat_out1_13 & Logical_Operator_out1_21;

  Delay_P21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P21_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay_P21_out1 <= Bit_Concat_out1_14;
      END IF;
    END IF;
  END PROCESS Delay_P21_process;


  
  if_tmp_0_1_out1_14 <= R_mant_b_norm_out1_15 WHEN Bit_Slice_out1_21 = '0' ELSE
      bitsll_R_1_out1_14;

  bitsll_R_1_out1_15 <= if_tmp_0_1_out1_14 sll 1;

  Delay_P21_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P21_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P21_1_out1 <= bitsll_R_1_out1_15;
      END IF;
    END IF;
  END PROCESS Delay_P21_1_process;


  Delay_P21_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P21_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P21_2_out1 <= Delay_P19_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P21_2_process;


  R_mant_b_norm_out1_16 <= Delay_P21_1_out1 + Delay_P21_2_out1;

  Bit_Slice_out1_22 <= R_mant_b_norm_out1_16(25);

  Logical_Operator_out1_22 <=  NOT Bit_Slice_out1_22;

  Bit_Concat_out1_15 <= Delay_P21_out1 & Logical_Operator_out1_22;

  
  if_tmp_0_1_out1_15 <= R_mant_b_norm_out1_16 WHEN Bit_Slice_out1_22 = '0' ELSE
      Delay_P21_1_out1;

  bitsll_R_1_out1_16 <= if_tmp_0_1_out1_15 sll 1;

  R_mant_b_norm_out1_17 <= bitsll_R_1_out1_16 + Delay_P21_2_out1;

  Bit_Slice_out1_23 <= R_mant_b_norm_out1_17(25);

  Logical_Operator_out1_23 <=  NOT Bit_Slice_out1_23;

  Bit_Concat_out1_16 <= Bit_Concat_out1_15 & Logical_Operator_out1_23;

  Delay_P23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P23_out1 <= to_unsigned(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay_P23_out1 <= Bit_Concat_out1_16;
      END IF;
    END IF;
  END PROCESS Delay_P23_process;


  
  if_tmp_0_1_out1_16 <= R_mant_b_norm_out1_17 WHEN Bit_Slice_out1_23 = '0' ELSE
      bitsll_R_1_out1_16;

  bitsll_R_1_out1_17 <= if_tmp_0_1_out1_16 sll 1;

  Delay_P23_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P23_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P23_1_out1 <= bitsll_R_1_out1_17;
      END IF;
    END IF;
  END PROCESS Delay_P23_1_process;


  Delay_P23_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P23_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P23_2_out1 <= Delay_P21_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P23_2_process;


  R_mant_b_norm_out1_18 <= Delay_P23_1_out1 + Delay_P23_2_out1;

  Bit_Slice_out1_24 <= R_mant_b_norm_out1_18(25);

  Logical_Operator_out1_24 <=  NOT Bit_Slice_out1_24;

  Bit_Concat_out1_17 <= Delay_P23_out1 & Logical_Operator_out1_24;

  
  if_tmp_0_1_out1_17 <= R_mant_b_norm_out1_18 WHEN Bit_Slice_out1_24 = '0' ELSE
      Delay_P23_1_out1;

  bitsll_R_1_out1_18 <= if_tmp_0_1_out1_17 sll 1;

  R_mant_b_norm_out1_19 <= bitsll_R_1_out1_18 + Delay_P23_2_out1;

  Bit_Slice_out1_25 <= R_mant_b_norm_out1_19(25);

  Logical_Operator_out1_25 <=  NOT Bit_Slice_out1_25;

  Bit_Concat_out1_18 <= Bit_Concat_out1_17 & Logical_Operator_out1_25;

  Delay_P25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P25_out1 <= to_unsigned(16#00000#, 20);
      ELSIF enb = '1' THEN
        Delay_P25_out1 <= Bit_Concat_out1_18;
      END IF;
    END IF;
  END PROCESS Delay_P25_process;


  
  if_tmp_0_1_out1_18 <= R_mant_b_norm_out1_19 WHEN Bit_Slice_out1_25 = '0' ELSE
      bitsll_R_1_out1_18;

  bitsll_R_1_out1_19 <= if_tmp_0_1_out1_18 sll 1;

  Delay_P25_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P25_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P25_1_out1 <= bitsll_R_1_out1_19;
      END IF;
    END IF;
  END PROCESS Delay_P25_1_process;


  Delay_P25_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P25_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P25_2_out1 <= Delay_P23_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P25_2_process;


  R_mant_b_norm_out1_20 <= Delay_P25_1_out1 + Delay_P25_2_out1;

  Bit_Slice_out1_26 <= R_mant_b_norm_out1_20(25);

  Logical_Operator_out1_26 <=  NOT Bit_Slice_out1_26;

  Bit_Concat_out1_19 <= Delay_P25_out1 & Logical_Operator_out1_26;

  
  if_tmp_0_1_out1_19 <= R_mant_b_norm_out1_20 WHEN Bit_Slice_out1_26 = '0' ELSE
      Delay_P25_1_out1;

  bitsll_R_1_out1_20 <= if_tmp_0_1_out1_19 sll 1;

  R_mant_b_norm_out1_21 <= bitsll_R_1_out1_20 + Delay_P25_2_out1;

  Bit_Slice_out1_27 <= R_mant_b_norm_out1_21(25);

  Logical_Operator_out1_27 <=  NOT Bit_Slice_out1_27;

  Bit_Concat_out1_20 <= Bit_Concat_out1_19 & Logical_Operator_out1_27;

  Delay_P27_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P27_1_out1 <= to_unsigned(16#000000#, 22);
      ELSIF enb = '1' THEN
        Delay_P27_1_out1 <= Bit_Concat_out1_20;
      END IF;
    END IF;
  END PROCESS Delay_P27_1_process;


  
  if_tmp_0_1_out1_20 <= R_mant_b_norm_out1_21 WHEN Bit_Slice_out1_27 = '0' ELSE
      bitsll_R_1_out1_20;

  bitsll_R_1_out1_21 <= if_tmp_0_1_out1_20 sll 1;

  Delay_P27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P27_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P27_out1 <= bitsll_R_1_out1_21;
      END IF;
    END IF;
  END PROCESS Delay_P27_process;


  Delay_P27_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P27_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P27_2_out1 <= Delay_P25_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P27_2_process;


  R_mant_b_norm_out1_22 <= Delay_P27_out1 + Delay_P27_2_out1;

  Bit_Slice_out1_28 <= R_mant_b_norm_out1_22(25);

  Logical_Operator_out1_28 <=  NOT Bit_Slice_out1_28;

  Bit_Concat_out1_21 <= Delay_P27_1_out1 & Logical_Operator_out1_28;

  
  if_tmp_0_1_out1_21 <= R_mant_b_norm_out1_22 WHEN Bit_Slice_out1_28 = '0' ELSE
      Delay_P27_out1;

  bitsll_R_1_out1_22 <= if_tmp_0_1_out1_21 sll 1;

  R_mant_b_norm_out1_23 <= bitsll_R_1_out1_22 + Delay_P27_2_out1;

  Bit_Slice_out1_29 <= R_mant_b_norm_out1_23(25);

  Logical_Operator_out1_29 <=  NOT Bit_Slice_out1_29;

  Bit_Concat_out1_22 <= Bit_Concat_out1_21 & Logical_Operator_out1_29;

  Delay_P29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P29_out1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay_P29_out1 <= Bit_Concat_out1_22;
      END IF;
    END IF;
  END PROCESS Delay_P29_process;


  
  if_tmp_0_1_out1_22 <= R_mant_b_norm_out1_23 WHEN Bit_Slice_out1_29 = '0' ELSE
      bitsll_R_1_out1_22;

  bitsll_R_1_out1_23 <= if_tmp_0_1_out1_22 sll 1;

  Delay_P29_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P29_1_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P29_1_out1 <= bitsll_R_1_out1_23;
      END IF;
    END IF;
  END PROCESS Delay_P29_1_process;


  Delay_P29_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_P29_2_out1 <= to_signed(16#0000000#, 26);
      ELSIF enb = '1' THEN
        Delay_P29_2_out1 <= Delay_P27_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_P29_2_process;


  R_mant_b_norm_out1_24 <= Delay_P29_1_out1 + Delay_P29_2_out1;

  Bit_Slice_out1_30 <= R_mant_b_norm_out1_24(25);

  Logical_Operator_out1_30 <=  NOT Bit_Slice_out1_30;

  Bit_Concat_out1_23 <= Delay_P29_out1 & Logical_Operator_out1_30;

  alpha1_out1_3 <= to_signed(16#01#, 8);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_1 <= to_signed(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay12_out1_1 <= Switch34_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  alpha1_ia_out1 <= alpha1_out1_3 - Delay12_out1_1;

  DTC1_out1 <= resize(alpha1_ia_out1, 10);

  C_out1_1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= Delay16_out1 WHEN aExponent_0_out1 = '0' ELSE
      C_out1_1;

  Delay15_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay15_out1_1 <= if_Exponent_0_out1;
      END IF;
    END IF;
  END PROCESS Delay15_1_process;


  DTC2_out1 <= signed(resize(Delay15_out1_1, 10));

  
  if_bitget_mant_a_mant_a_WordLen_out1 <= DTC1_out1 WHEN Delay14_out1 = '0' ELSE
      DTC2_out1;

  cast_1_like_exp_a_norm_out1 <= to_signed(16#001#, 10);

  exp_a_norm_cast_1_like_e_out1 <= if_bitget_mant_a_mant_a_WordLen_out1 - cast_1_like_exp_a_norm_out1;

  
  if_mant_a_norm_mant_b_norm_out1 <= if_bitget_mant_a_mant_a_WordLen_out1 WHEN mant_a_norm_mant_b_norm_relop1 = '0' ELSE
      exp_a_norm_cast_1_like_e_out1;

  Delay4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay4_out1_1 <= if_mant_a_norm_mant_b_norm_out1;
      END IF;
    END IF;
  END PROCESS Delay4_1_process;


  alpha1_out1_4 <= to_signed(16#01#, 8);

  Delay4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_2 <= to_signed(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay4_out1_2 <= Switch34_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_2_process;


  alpha1_ib_out1 <= alpha1_out1_4 - Delay4_out1_2;

  DTC4_out1 <= resize(alpha1_ib_out1, 10);

  C_out1_2 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1_1 <= Delay19_out1 WHEN bExponent_0_out1 = '0' ELSE
      C_out1_2;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay9_out1 <= if_Exponent_0_out1_1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  DTC5_out1 <= signed(resize(Delay9_out1, 10));

  
  if_bitget_mant_b_mant_b_WordLen_out1 <= DTC4_out1 WHEN Delay5_out1 = '0' ELSE
      DTC5_out1;

  Delay1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay1_out1_1 <= if_bitget_mant_b_mant_b_WordLen_out1;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  exp_a_norm_exp_b_norm_out1 <= Delay4_out1_1 - Delay1_out1_1;

  cfType_ExponentBias_out1 <= to_signed(16#07F#, 10);

  exp_a_norm_exp_b_norm_cast_out1 <= exp_a_norm_exp_b_norm_out1 + cfType_ExponentBias_out1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay_out1 <= exp_a_norm_exp_b_norm_cast_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  exp_tmp_2_cfType_ExponentBi_out1 <= '1' WHEN Delay_out1 >= to_signed(16#0FF#, 10) ELSE
      '0';

  
  exp_tmp_1_out1 <= '1' WHEN Delay_out1 < to_signed(16#001#, 10) ELSE
      '0';

  C2_out1 <= to_unsigned(16#00#, 5);

  
  exp_tmp_cfType_MantissaLen_out1 <= '1' WHEN Delay_out1 > to_signed(-16#018#, 10) ELSE
      '0';

  alpha1_out1_5 <= to_signed(16#01#, 8);

  C_out1_3 <= to_unsigned(16#19#, 5);

  DTC1_out1_1 <= Delay_out1(7 DOWNTO 0);

  alpha1_int8_exp_tmp_out1 <= alpha1_out1_5 - DTC1_out1_1;

  DTC2_out1_1 <= unsigned(alpha1_int8_exp_tmp_out1(4 DOWNTO 0));

  
  if_exp_tmp_cfType_MantissaLe_out1 <= C_out1_3 WHEN exp_tmp_cfType_MantissaLen_out1 = '0' ELSE
      DTC2_out1_1;

  
  if_exp_tmp_1_1_out1 <= C2_out1 WHEN exp_tmp_1_out1 = '0' ELSE
      if_exp_tmp_cfType_MantissaLe_out1;

  C4_out1 <= to_unsigned(16#19#, 5);

  
  if_exp_tmp_2_cfType_ExponentB_1_out1 <= if_exp_tmp_1_1_out1 WHEN exp_tmp_2_cfType_ExponentBi_out1 = '0' ELSE
      C4_out1;

  Delay11_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_reg <= (OTHERS => to_unsigned(16#00#, 5));
      ELSIF enb = '1' THEN
        Delay11_reg(0) <= if_exp_tmp_2_cfType_ExponentB_1_out1;
        Delay11_reg(1 TO 10) <= Delay11_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS Delay11_1_process;

  Delay11_out1_1 <= Delay11_reg(10);

  bitsrl_Q_shift_length_out1 <= SHIFT_RIGHT(Bit_Concat_out1_23, to_integer(Delay11_out1_1));

  BitSlice_out1_1 <= bitsrl_Q_shift_length_out1(23 DOWNTO 0);

  Delay9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay9_out1_1 <= BitSlice_out1_1;
      END IF;
    END IF;
  END PROCESS Delay9_1_process;


  BitSlice1_out1_1 <= Delay9_out1_1(1);

  Bit_Slice10_out1 <= Delay11_out1_1(4);

  Bit_Slice9_out1 <= Delay11_out1_1(3);

  Bit_Slice7_out1_6 <= Delay11_out1_1(2);

  Bit_Slice8_out1 <= Delay11_out1_1(1);

  Bit_Slice11_out1 <= Delay11_out1_1(0);

  Bit_Slice_out1_31 <= Bit_Concat_out1_23(2 DOWNTO 0);

  Constant_out1 <= '0';

  Bit_Concat_out1_24 <= Bit_Slice_out1_31 & Constant_out1;

  Bit_Slice_out1_32 <= Bit_Concat_out1_24(0);

  Bit_Slice1_out1_9 <= Bit_Concat_out1_24(1);

  Logical_Operator_out1_31 <= Bit_Slice1_out1_9 OR Bit_Slice_out1_32;

  
  Switch6_out1_6 <= Bit_Slice_out1_32 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_31;

  Bit_Slice2_out1_8 <= Bit_Concat_out1_24(2);

  Logical_Operator1_out1_6 <= Bit_Slice2_out1_8 OR Logical_Operator_out1_31;

  Bit_Slice3_out1_6 <= Bit_Concat_out1_24(3);

  Logical_Operator2_out1_6 <= Bit_Slice3_out1_6 OR Logical_Operator1_out1_6;

  
  Switch7_out1_6 <= Logical_Operator1_out1_6 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_6;

  
  Switch3_out1 <= Switch6_out1_6 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_6;

  Bit_Slice1_out1_10 <= Bit_Concat_out1_23(6 DOWNTO 3);

  Bit_Slice_out1_33 <= Bit_Slice1_out1_10(0);

  Logical_Operator3_out1_6 <= Bit_Slice_out1_33 OR Logical_Operator2_out1_6;

  Bit_Slice1_out1_11 <= Bit_Slice1_out1_10(1);

  Logical_Operator_out1_32 <= Bit_Slice1_out1_11 OR Logical_Operator3_out1_6;

  
  Switch6_out1_7 <= Logical_Operator3_out1_6 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_32;

  Bit_Slice2_out1_9 <= Bit_Slice1_out1_10(2);

  Logical_Operator1_out1_7 <= Bit_Slice2_out1_9 OR Logical_Operator_out1_32;

  Bit_Slice3_out1_7 <= Bit_Slice1_out1_10(3);

  Logical_Operator2_out1_7 <= Bit_Slice3_out1_7 OR Logical_Operator1_out1_7;

  
  Switch7_out1_7 <= Logical_Operator1_out1_7 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_7;

  
  Switch3_out1_1 <= Switch6_out1_7 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_7;

  
  Switch6_out1_8 <= Switch3_out1 WHEN Bit_Slice7_out1_6 = '0' ELSE
      Switch3_out1_1;

  Bit_Slice2_out1_10 <= Bit_Concat_out1_23(10 DOWNTO 7);

  Bit_Slice_out1_34 <= Bit_Slice2_out1_10(0);

  Logical_Operator3_out1_7 <= Bit_Slice_out1_34 OR Logical_Operator2_out1_7;

  Bit_Slice1_out1_12 <= Bit_Slice2_out1_10(1);

  Logical_Operator_out1_33 <= Bit_Slice1_out1_12 OR Logical_Operator3_out1_7;

  
  Switch6_out1_9 <= Logical_Operator3_out1_7 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_33;

  Bit_Slice2_out1_11 <= Bit_Slice2_out1_10(2);

  Logical_Operator1_out1_8 <= Bit_Slice2_out1_11 OR Logical_Operator_out1_33;

  Bit_Slice3_out1_8 <= Bit_Slice2_out1_10(3);

  Logical_Operator2_out1_8 <= Bit_Slice3_out1_8 OR Logical_Operator1_out1_8;

  
  Switch7_out1_8 <= Logical_Operator1_out1_8 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_8;

  
  Switch3_out1_2 <= Switch6_out1_9 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_8;

  Bit_Slice3_out1_9 <= Bit_Concat_out1_23(14 DOWNTO 11);

  Bit_Slice_out1_35 <= Bit_Slice3_out1_9(0);

  Logical_Operator3_out1_8 <= Bit_Slice_out1_35 OR Logical_Operator2_out1_8;

  Bit_Slice1_out1_13 <= Bit_Slice3_out1_9(1);

  Logical_Operator_out1_34 <= Bit_Slice1_out1_13 OR Logical_Operator3_out1_8;

  
  Switch6_out1_10 <= Logical_Operator3_out1_8 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_34;

  Bit_Slice2_out1_12 <= Bit_Slice3_out1_9(2);

  Logical_Operator1_out1_9 <= Bit_Slice2_out1_12 OR Logical_Operator_out1_34;

  Bit_Slice3_out1_10 <= Bit_Slice3_out1_9(3);

  Logical_Operator2_out1_9 <= Bit_Slice3_out1_10 OR Logical_Operator1_out1_9;

  
  Switch7_out1_9 <= Logical_Operator1_out1_9 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_9;

  
  Switch3_out1_3 <= Switch6_out1_10 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_9;

  
  Switch7_out1_10 <= Switch3_out1_2 WHEN Bit_Slice7_out1_6 = '0' ELSE
      Switch3_out1_3;

  
  Switch3_out1_4 <= Switch6_out1_8 WHEN Bit_Slice9_out1 = '0' ELSE
      Switch7_out1_10;

  Bit_Slice4_out1_6 <= Bit_Concat_out1_23(18 DOWNTO 15);

  Bit_Slice_out1_36 <= Bit_Slice4_out1_6(0);

  Logical_Operator3_out1_9 <= Bit_Slice_out1_36 OR Logical_Operator2_out1_9;

  Bit_Slice1_out1_14 <= Bit_Slice4_out1_6(1);

  Logical_Operator_out1_35 <= Bit_Slice1_out1_14 OR Logical_Operator3_out1_9;

  
  Switch6_out1_11 <= Logical_Operator3_out1_9 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_35;

  Bit_Slice2_out1_13 <= Bit_Slice4_out1_6(2);

  Logical_Operator1_out1_10 <= Bit_Slice2_out1_13 OR Logical_Operator_out1_35;

  Bit_Slice3_out1_11 <= Bit_Slice4_out1_6(3);

  Logical_Operator2_out1_10 <= Bit_Slice3_out1_11 OR Logical_Operator1_out1_10;

  
  Switch7_out1_11 <= Logical_Operator1_out1_10 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_10;

  
  Switch3_out1_5 <= Switch6_out1_11 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_11;

  Bit_Slice5_out1_6 <= Bit_Concat_out1_23(22 DOWNTO 19);

  Bit_Slice_out1_37 <= Bit_Slice5_out1_6(0);

  Logical_Operator3_out1_10 <= Bit_Slice_out1_37 OR Logical_Operator2_out1_10;

  Bit_Slice1_out1_15 <= Bit_Slice5_out1_6(1);

  Logical_Operator_out1_36 <= Bit_Slice1_out1_15 OR Logical_Operator3_out1_10;

  
  Switch6_out1_12 <= Logical_Operator3_out1_10 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator_out1_36;

  Bit_Slice2_out1_14 <= Bit_Slice5_out1_6(2);

  Logical_Operator1_out1_11 <= Bit_Slice2_out1_14 OR Logical_Operator_out1_36;

  Bit_Slice3_out1_12 <= Bit_Slice5_out1_6(3);

  Logical_Operator2_out1_11 <= Bit_Slice3_out1_12 OR Logical_Operator1_out1_11;

  
  Switch7_out1_12 <= Logical_Operator1_out1_11 WHEN Bit_Slice11_out1 = '0' ELSE
      Logical_Operator2_out1_11;

  
  Switch3_out1_6 <= Switch6_out1_12 WHEN Bit_Slice8_out1 = '0' ELSE
      Switch7_out1_12;

  
  Switch4_out1_6 <= Switch3_out1_5 WHEN Bit_Slice7_out1_6 = '0' ELSE
      Switch3_out1_6;

  Logical_Operator_out1_37 <= Bit_Slice7_out1_6 OR (Bit_Slice11_out1 OR Bit_Slice8_out1);

  Bit_Slice6_out1_8 <= Bit_Concat_out1_23(24 DOWNTO 23);

  Bit_Slice_out1_38 <= Bit_Slice6_out1_8(0);

  Logical_Operator3_out1_11 <= Bit_Slice_out1_38 OR Logical_Operator2_out1_11;

  Bit_Slice1_out1_16 <= Bit_Slice6_out1_8(1);

  Logical_Operator_out1_38 <= Bit_Slice1_out1_16 OR Logical_Operator3_out1_11;

  
  Switch7_out1_13 <= Logical_Operator3_out1_11 WHEN Logical_Operator_out1_37 = '0' ELSE
      Logical_Operator_out1_38;

  
  if_tmp_0_1_out1_23 <= R_mant_b_norm_out1_24 WHEN Bit_Slice_out1_30 = '0' ELSE
      Delay_P29_1_out1;

  bitsll_R_1_out1_24 <= if_tmp_0_1_out1_23 sll 1;

  
  R_0_out1 <= '1' WHEN bitsll_R_1_out1_24 /= to_signed(16#0000000#, 26) ELSE
      '0';

  
  Switch1_out1_7 <= Switch4_out1_6 WHEN Bit_Slice9_out1 = '0' ELSE
      Switch7_out1_13;

  
  Switch2_out1_8 <= Switch3_out1_4 WHEN Bit_Slice10_out1 = '0' ELSE
      Switch1_out1_7;

  sticky_bitsll_Q_Q_WordLen_out1 <= R_0_out1 OR Switch2_out1_8;

  BitSlice_out1_2 <= Delay9_out1_1(0);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_out1_1 <= sticky_bitsll_Q_Q_WordLen_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1_1 OR Delay10_out1_1;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_2 AND alphabitget_Mant_tmp_2_0_out1;

  alpha0_out1_2 <= '0';

  BitSlice4_out1 <= Delay9_out1_1(23 DOWNTO 1);

  Bit_Concat_out1_25 <= alpha0_out1_2 & BitSlice4_out1;

  alpha2_out1 <= to_unsigned(16#000001#, 24);

  Mant_tmp_2_out1 <= Bit_Concat_out1_25 + alpha2_out1;

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_25 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_2_out1;

  BitSlice2_out1 <= if_bitget_Mant_tmp_1_0_out1(23);

  DTC3_out1 <= unsigned(Delay_out1(7 DOWNTO 0));

  C1_out1 <= to_unsigned(16#00#, 8);

  
  if_exp_tmp_1_out1 <= DTC3_out1 WHEN exp_tmp_1_out1 = '0' ELSE
      C1_out1;

  C3_out1 <= to_unsigned(16#FF#, 8);

  
  if_exp_tmp_2_cfType_ExponentB_out1 <= if_exp_tmp_1_out1 WHEN exp_tmp_2_cfType_ExponentBi_out1 = '0' ELSE
      C3_out1;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_reg <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Delay8_reg(0) <= if_exp_tmp_2_cfType_ExponentB_out1;
        Delay8_reg(1 TO 11) <= Delay8_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(11);

  alpha1_out1_6 <= to_unsigned(16#01#, 8);

  Exp_1_out1 <= Delay8_out1 + alpha1_out1_6;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= Delay8_out1 WHEN BitSlice2_out1 = '0' ELSE
      Exp_1_out1;

  C4_out1_1 <= to_unsigned(16#FF#, 8);

  
  if_bExponent_0_bMantissa_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN Delay52_out1 = '0' ELSE
      C4_out1_1;

  C1_out1_1 <= to_unsigned(16#00#, 8);

  C_out1_4 <= to_unsigned(16#FF#, 8);

  
  if_bExponent_0_bMantissa_out1_1 <= C1_out1_1 WHEN Delay52_out1 = '0' ELSE
      C_out1_4;

  
  if_aExponent_0_aMantissa_out1 <= if_bExponent_0_bMantissa_out1 WHEN Delay53_out1 = '0' ELSE
      if_bExponent_0_bMantissa_out1_1;

  C1_out1_2 <= to_unsigned(16#00#, 8);

  
  if_mant_b_0_out1 <= Delay19_out1 WHEN bMantissa_0_out1 = '0' ELSE
      C1_out1_2;

  
  if_exp_a_cfType_Exponent_Inf_out1 <= if_mant_b_0_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      Delay16_out1;

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay25_out1 <= if_exp_a_cfType_Exponent_Inf_out1;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  Delay39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay39_reg <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Delay39_reg(0) <= Delay25_out1;
        Delay39_reg(1 TO 12) <= Delay39_reg(0 TO 11);
      END IF;
    END IF;
  END PROCESS Delay39_process;

  Delay39_out1 <= Delay39_reg(12);

  Delay55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay55_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay55_out1 <= Delay39_out1;
      END IF;
    END IF;
  END PROCESS Delay55_process;


  
  if_aExponent_cfType_Exponent_out1 <= if_aExponent_0_aMantissa_out1 WHEN Delay51_out1 = '0' ELSE
      Delay55_out1;

  Constant3_out1 <= to_unsigned(16#00#, 8);

  
  Switch6_out1_13 <= if_aExponent_cfType_Exponent_out1 WHEN Delay1_out1 = '0' ELSE
      Constant3_out1;

  Delay4_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_3 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay4_out1_3 <= Switch6_out1_13;
      END IF;
    END IF;
  END PROCESS Delay4_3_process;


  BitSlice3_out1 <= if_bitget_Mant_tmp_1_0_out1(22 DOWNTO 0);

  C_out1_5 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1 WHEN BitSlice2_out1 = '0' ELSE
      C_out1_5;

  C5_out1 <= to_unsigned(16#000000#, 23);

  
  if_bExponent_0_bMantissa_1_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 WHEN Delay52_out1 = '0' ELSE
      C5_out1;

  C3_out1_1 <= to_unsigned(16#000000#, 23);

  C2_out1_1 <= to_unsigned(16#400000#, 23);

  
  if_bExponent_0_bMantissa_1_out1_1 <= C3_out1_1 WHEN Delay52_out1 = '0' ELSE
      C2_out1_1;

  
  if_aExponent_0_aMantissa_1_out1 <= if_bExponent_0_bMantissa_1_out1 WHEN Delay53_out1 = '0' ELSE
      if_bExponent_0_bMantissa_1_out1_1;

  C2_out1_2 <= to_unsigned(16#000000#, 23);

  
  if_mant_b_0_1_out1 <= Delay20_out1 WHEN bMantissa_0_out1 = '0' ELSE
      C2_out1_2;

  C_out1_6 <= to_unsigned(16#400000#, 23);

  
  if_exp_b_cfType_Exponent_Inf_out1 <= Delay17_out1 WHEN bExponent_cfType_Exponent_I_out1 = '0' ELSE
      C_out1_6;

  
  if_exp_a_cfType_Exponent_Inf_1_out1 <= if_mant_b_0_1_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      if_exp_b_cfType_Exponent_Inf_out1;

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay24_out1 <= if_exp_a_cfType_Exponent_Inf_1_out1;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  Delay49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay49_reg <= (OTHERS => to_unsigned(16#000000#, 23));
      ELSIF enb = '1' THEN
        Delay49_reg(0) <= Delay24_out1;
        Delay49_reg(1 TO 12) <= Delay49_reg(0 TO 11);
      END IF;
    END IF;
  END PROCESS Delay49_process;

  Delay49_out1 <= Delay49_reg(12);

  Delay56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay56_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay56_out1 <= Delay49_out1;
      END IF;
    END IF;
  END PROCESS Delay56_process;


  
  if_aExponent_cfType_Exponent_1_out1 <= if_aExponent_0_aMantissa_1_out1 WHEN Delay51_out1 = '0' ELSE
      Delay56_out1;

  Constant2_out1 <= to_unsigned(16#000000#, 23);

  
  Switch5_out1_6 <= if_aExponent_cfType_Exponent_1_out1 WHEN Delay1_out1 = '0' ELSE
      Constant2_out1;

  Delay5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay5_out1_1 <= Switch5_out1_6;
      END IF;
    END IF;
  END PROCESS Delay5_1_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= Delay3_out1_1 & Delay4_out1_3 & Delay5_out1_1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

