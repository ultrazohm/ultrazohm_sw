# This is a sample build configuration for Python.
# Check our guides at https://confluence.atlassian.com/x/x4UWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
kind: pipeline
name: default


platform:
  os: linux
  arch: amd64

steps:
# pipeline step just opens the vivado project
 - name: Vivado open project
   image: vivado:2020.1
   commands:
   - /bin/bash /opt/Xilinx/Vivado/2020.1/settings64.sh
   - /bin/bash /opt/Xilinx/Vivado/2020.1/bin/vivado -mode batch -nolog -nojournal -source tcl_scripts/ci_vivado_open_project.tcl

# Open vivado project and check the syntax
 - name: Vivado check syntax
   image: vivado:2020.1
   commands:
   - /bin/bash /opt/Xilinx/Vivado/2020.1/settings64.sh
   - /bin/bash /opt/Xilinx/Vivado/2020.1/bin/vivado -mode batch -nolog -nojournal -source tcl_scripts/ci_vivado_check_syntax.tcl

# Open vivado project, open the board design and validate the board design (F6 in Vivado GUI)
 - name: Vivado validate board design
   image: vivado:2020.1
   commands:
   - /bin/bash /opt/Xilinx/Vivado/2020.1/settings64.sh
   - /bin/bash /opt/Xilinx/Vivado/2020.1/bin/vivado -mode batch -nolog -nojournal -source tcl_scripts/ci_vivado_validate_bd_design.tcl

# Runs report_environment from vivado to check if the license is valid for debug reasons (only on main and develop branch)
 - name: Vivado check license
   image: vivado:2020.1
   commands:
   - ip link show
   - /bin/bash /opt/Xilinx/Vivado/2020.1/settings64.sh
   - /bin/bash /opt/Xilinx/Vivado/2020.1/bin/vivado -mode batch -nolog -nojournal -source tcl_scripts/ci_vivado_check_license.tcl
   when:
     branch:
     - main
     - develop

# Generates the bitstream, only on main or develop branch since the step takes ~1.5h, exports the xsa
 - name: Vivado generate bitstream
   image: vivado:2020.1
   commands:
   - ip link show
   - /bin/bash /opt/Xilinx/Vivado/2020.1/settings64.sh
   - /bin/bash /opt/Xilinx/Vivado/2020.1/bin/vivado -mode batch -source tcl_scripts/ci_vivado_generate_bitstream.tcl
   - /bin/bash /opt/Xilinx/Vivado/2020.1/bin/vivado -mode batch -source tcl_scripts/vivado_export_xsa.tcl
   when:
     branch:
     - main
     - develop

# Open vitis and generate the workspace with the existing xsa or with the new generated xsa if it is main/develop
 - name: Vitis generate Workspace
   image: vivado:2020.1
   commands:
   - /bin/bash /opt/Xilinx/Vitis/2020.1/settings64.sh
   - /bin/bash /opt/Xilinx/Vitis/2020.1/bin/xsct tcl_scripts/ci_vitis_generate_workspace.tcl

# clean & build of the vitis project
 - name: Vitis build project after generate workspace
   image: vivado:2020.1
   commands:
   - /bin/bash /opt/Xilinx/Vitis/2020.1/settings64.sh
   - /bin/bash /opt/Xilinx/Vitis/2020.1/bin/xsct tcl_scripts/ci_vitis_build_project.tcl

# Update the platform just to test the update script (does not update the platform since it did not change)
 - name: Vitis update platform
   image: vivado:2020.1
   commands:
   - /bin/bash /opt/Xilinx/Vitis/2020.1/settings64.sh
   - /bin/bash /opt/Xilinx/Vitis/2020.1/bin/xsct tcl_scripts/ci_vitis_update_platform.tcl

# clean & build of the vitis project
 - name: Vitis build project after update platform
   image: vivado:2020.1
   commands:
   - /bin/bash /opt/Xilinx/Vitis/2020.1/settings64.sh
   - /bin/bash /opt/Xilinx/Vitis/2020.1/bin/xsct tcl_scripts/ci_vitis_build_project.tcl