-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_computeGradient_float_16u_34 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_currentErrorInput_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_currentErrorInput_empty_n : IN STD_LOGIC;
    p_currentErrorInput_read : OUT STD_LOGIC;
    p_outputPrevLayer_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    p_outputPrevLayer_empty_n : IN STD_LOGIC;
    p_outputPrevLayer_read : OUT STD_LOGIC;
    p_weightGradient_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    p_weightGradient_full_n : IN STD_LOGIC;
    p_weightGradient_write : OUT STD_LOGIC;
    p_biasGradient_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_biasGradient_full_n : IN STD_LOGIC;
    p_biasGradient_write : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k_empty_n : IN STD_LOGIC;
    p_k_read : OUT STD_LOGIC;
    p_currentErrorOutput_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_currentErrorOutput_ce0 : OUT STD_LOGIC;
    p_currentErrorOutput_we0 : OUT STD_LOGIC;
    p_currentErrorOutput_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_full_n : IN STD_LOGIC;
    p_n_out_write : OUT STD_LOGIC );
end;


architecture behav of BGD_computeGradient_float_16u_34 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_currentErrorInput_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln353_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_outputPrevLayer_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln358_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_weightGradient_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln358_reg_696_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_biasGradient_blk_n : STD_LOGIC;
    signal p_n_blk_n : STD_LOGIC;
    signal p_k_blk_n : STD_LOGIC;
    signal p_n_out_blk_n : STD_LOGIC;
    signal k_reg_205 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_n_read_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal div_cast_i_reg_662 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal add_ln353_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln353_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln358_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln358_reg_696_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln358_reg_696_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_316_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal n_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln353_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_216_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_228_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_252_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_272_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_276_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_fu_331_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_43_i_fu_346_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_44_i_fu_361_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_45_i_fu_376_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_46_i_fu_391_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_47_i_fu_406_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_48_i_fu_421_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_49_i_fu_436_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_50_i_fu_451_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_51_i_fu_466_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_52_i_fu_481_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_53_i_fu_496_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_54_i_fu_511_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_55_i_fu_526_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_56_i_fu_541_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_150_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_149_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_148_fu_608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_147_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_146_fu_600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_145_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_144_fu_592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_143_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_142_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_141_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_140_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_139_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_138_fu_568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_137_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_136_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_216_ce : STD_LOGIC;
    signal grp_fu_220_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_228_ce : STD_LOGIC;
    signal grp_fu_232_ce : STD_LOGIC;
    signal grp_fu_236_ce : STD_LOGIC;
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_244_ce : STD_LOGIC;
    signal grp_fu_248_ce : STD_LOGIC;
    signal grp_fu_252_ce : STD_LOGIC;
    signal grp_fu_256_ce : STD_LOGIC;
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_264_ce : STD_LOGIC;
    signal grp_fu_268_ce : STD_LOGIC;
    signal grp_fu_272_ce : STD_LOGIC;
    signal grp_fu_276_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component BGD_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fmul_32ns_32ns_32_4_max_dsp_1_U38 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_216_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_216_ce,
        dout => grp_fu_216_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U39 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_220_ce,
        dout => grp_fu_220_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U40 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_224_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U41 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_228_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U42 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_232_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_232_ce,
        dout => grp_fu_232_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U43 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_236_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_236_ce,
        dout => grp_fu_236_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U44 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_240_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_240_ce,
        dout => grp_fu_240_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U45 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_244_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_244_ce,
        dout => grp_fu_244_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U46 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_248_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_248_ce,
        dout => grp_fu_248_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U47 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_252_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_252_ce,
        dout => grp_fu_252_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U48 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_256_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_256_ce,
        dout => grp_fu_256_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U49 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_260_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U50 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_264_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_264_ce,
        dout => grp_fu_264_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U51 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_268_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_268_ce,
        dout => grp_fu_268_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U52 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_272_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_272_ce,
        dout => grp_fu_272_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U53 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_276_p0,
        din1 => tmp_reg_676,
        ce => grp_fu_276_ce,
        dout => grp_fu_276_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln358_fu_311_p2 = ap_const_lv1_0))) then 
                k_reg_205 <= k_1_fu_316_p2;
            elsif ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_205 <= ap_const_lv28_0;
            end if; 
        end if;
    end process;

    n_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_reg_194 <= add_ln353_reg_671;
            elsif ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln353_reg_671 <= add_ln353_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                div_cast_i_reg_662 <= p_k_dout(31 downto 4);
                p_n_read_reg_657 <= p_n_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln358_reg_696 <= icmp_ln358_fu_311_p2;
                icmp_ln358_reg_696_pp0_iter1_reg <= icmp_ln358_reg_696;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln358_reg_696_pp0_iter2_reg <= icmp_ln358_reg_696_pp0_iter1_reg;
                icmp_ln358_reg_696_pp0_iter3_reg <= icmp_ln358_reg_696_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_676 <= tmp_fu_306_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_currentErrorInput_empty_n, p_biasGradient_full_n, p_n_empty_n, p_k_empty_n, p_n_out_full_n, ap_CS_fsm_state2, icmp_ln353_fu_290_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln358_fu_311_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln358_fu_311_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln358_fu_311_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln353_fu_295_p2 <= std_logic_vector(unsigned(n_reg_194) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_outputPrevLayer_empty_n, p_weightGradient_full_n, ap_enable_reg_pp0_iter1, icmp_ln358_reg_696, ap_enable_reg_pp0_iter4, icmp_ln358_reg_696_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln358_reg_696_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (p_weightGradient_full_n = ap_const_logic_0)) or ((icmp_ln358_reg_696 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_outputPrevLayer_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_outputPrevLayer_empty_n, p_weightGradient_full_n, ap_enable_reg_pp0_iter1, icmp_ln358_reg_696, ap_enable_reg_pp0_iter4, icmp_ln358_reg_696_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln358_reg_696_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (p_weightGradient_full_n = ap_const_logic_0)) or ((icmp_ln358_reg_696 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_outputPrevLayer_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_outputPrevLayer_empty_n, p_weightGradient_full_n, ap_enable_reg_pp0_iter1, icmp_ln358_reg_696, ap_enable_reg_pp0_iter4, icmp_ln358_reg_696_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln358_reg_696_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (p_weightGradient_full_n = ap_const_logic_0)) or ((icmp_ln358_reg_696 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_outputPrevLayer_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_n_empty_n, p_k_empty_n, p_n_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, icmp_ln353_fu_290_p2)
    begin
                ap_block_state2 <= (((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_outputPrevLayer_empty_n, icmp_ln358_reg_696)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln358_reg_696 = ap_const_lv1_0) and (p_outputPrevLayer_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter4_assign_proc : process(p_weightGradient_full_n, icmp_ln358_reg_696_pp0_iter3_reg)
    begin
                ap_block_state7_pp0_stage0_iter4 <= ((icmp_ln358_reg_696_pp0_iter3_reg = ap_const_lv1_0) and (p_weightGradient_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln358_fu_311_p2)
    begin
        if ((icmp_ln358_fu_311_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln353_fu_290_p2)
    begin
        if ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln353_fu_290_p2)
    begin
        if ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_216_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_216_ce <= ap_const_logic_1;
        else 
            grp_fu_216_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_216_p0 <= trunc_ln674_fu_322_p1;

    grp_fu_220_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_220_ce <= ap_const_logic_1;
        else 
            grp_fu_220_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_220_p0 <= p_Result_i_fu_331_p4;

    grp_fu_224_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_224_p0 <= p_Result_43_i_fu_346_p4;

    grp_fu_228_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_228_ce <= ap_const_logic_1;
        else 
            grp_fu_228_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_228_p0 <= p_Result_44_i_fu_361_p4;

    grp_fu_232_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_232_ce <= ap_const_logic_1;
        else 
            grp_fu_232_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_232_p0 <= p_Result_45_i_fu_376_p4;

    grp_fu_236_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_236_ce <= ap_const_logic_1;
        else 
            grp_fu_236_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_236_p0 <= p_Result_46_i_fu_391_p4;

    grp_fu_240_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_240_ce <= ap_const_logic_1;
        else 
            grp_fu_240_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_240_p0 <= p_Result_47_i_fu_406_p4;

    grp_fu_244_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_244_ce <= ap_const_logic_1;
        else 
            grp_fu_244_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_244_p0 <= p_Result_48_i_fu_421_p4;

    grp_fu_248_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_248_ce <= ap_const_logic_1;
        else 
            grp_fu_248_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_248_p0 <= p_Result_49_i_fu_436_p4;

    grp_fu_252_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_252_ce <= ap_const_logic_1;
        else 
            grp_fu_252_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_252_p0 <= p_Result_50_i_fu_451_p4;

    grp_fu_256_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_256_ce <= ap_const_logic_1;
        else 
            grp_fu_256_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_256_p0 <= p_Result_51_i_fu_466_p4;

    grp_fu_260_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_260_ce <= ap_const_logic_1;
        else 
            grp_fu_260_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_260_p0 <= p_Result_52_i_fu_481_p4;

    grp_fu_264_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_264_ce <= ap_const_logic_1;
        else 
            grp_fu_264_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_264_p0 <= p_Result_53_i_fu_496_p4;

    grp_fu_268_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_268_ce <= ap_const_logic_1;
        else 
            grp_fu_268_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_268_p0 <= p_Result_54_i_fu_511_p4;

    grp_fu_272_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_272_ce <= ap_const_logic_1;
        else 
            grp_fu_272_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_272_p0 <= p_Result_55_i_fu_526_p4;

    grp_fu_276_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_276_ce <= ap_const_logic_1;
        else 
            grp_fu_276_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_276_p0 <= p_Result_56_i_fu_541_p4;
    icmp_ln353_fu_290_p2 <= "1" when (n_reg_194 = p_n_read_reg_657) else "0";
    icmp_ln358_fu_311_p2 <= "1" when (k_reg_205 = div_cast_i_reg_662) else "0";
    k_1_fu_316_p2 <= std_logic_vector(unsigned(k_reg_205) + unsigned(ap_const_lv28_1));
    l_v_136_fu_560_p1 <= grp_fu_220_p2;
    l_v_137_fu_564_p1 <= grp_fu_224_p2;
    l_v_138_fu_568_p1 <= grp_fu_228_p2;
    l_v_139_fu_572_p1 <= grp_fu_232_p2;
    l_v_140_fu_576_p1 <= grp_fu_236_p2;
    l_v_141_fu_580_p1 <= grp_fu_240_p2;
    l_v_142_fu_584_p1 <= grp_fu_244_p2;
    l_v_143_fu_588_p1 <= grp_fu_248_p2;
    l_v_144_fu_592_p1 <= grp_fu_252_p2;
    l_v_145_fu_596_p1 <= grp_fu_256_p2;
    l_v_146_fu_600_p1 <= grp_fu_260_p2;
    l_v_147_fu_604_p1 <= grp_fu_264_p2;
    l_v_148_fu_608_p1 <= grp_fu_268_p2;
    l_v_149_fu_612_p1 <= grp_fu_272_p2;
    l_v_150_fu_616_p1 <= grp_fu_276_p2;
    l_v_fu_556_p1 <= grp_fu_216_p2;
    p_Result_43_i_fu_346_p4 <= p_outputPrevLayer_dout(95 downto 64);
    p_Result_44_i_fu_361_p4 <= p_outputPrevLayer_dout(127 downto 96);
    p_Result_45_i_fu_376_p4 <= p_outputPrevLayer_dout(159 downto 128);
    p_Result_46_i_fu_391_p4 <= p_outputPrevLayer_dout(191 downto 160);
    p_Result_47_i_fu_406_p4 <= p_outputPrevLayer_dout(223 downto 192);
    p_Result_48_i_fu_421_p4 <= p_outputPrevLayer_dout(255 downto 224);
    p_Result_49_i_fu_436_p4 <= p_outputPrevLayer_dout(287 downto 256);
    p_Result_50_i_fu_451_p4 <= p_outputPrevLayer_dout(319 downto 288);
    p_Result_51_i_fu_466_p4 <= p_outputPrevLayer_dout(351 downto 320);
    p_Result_52_i_fu_481_p4 <= p_outputPrevLayer_dout(383 downto 352);
    p_Result_53_i_fu_496_p4 <= p_outputPrevLayer_dout(415 downto 384);
    p_Result_54_i_fu_511_p4 <= p_outputPrevLayer_dout(447 downto 416);
    p_Result_55_i_fu_526_p4 <= p_outputPrevLayer_dout(479 downto 448);
    p_Result_56_i_fu_541_p4 <= p_outputPrevLayer_dout(511 downto 480);
    p_Result_i_fu_331_p4 <= p_outputPrevLayer_dout(63 downto 32);

    p_biasGradient_blk_n_assign_proc : process(p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln353_fu_290_p2)
    begin
        if (((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_biasGradient_blk_n <= p_biasGradient_full_n;
        else 
            p_biasGradient_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_biasGradient_din <= p_currentErrorInput_dout;

    p_biasGradient_write_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln353_fu_290_p2)
    begin
        if ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_biasGradient_write <= ap_const_logic_1;
        else 
            p_biasGradient_write <= ap_const_logic_0;
        end if; 
    end process;


    p_currentErrorInput_blk_n_assign_proc : process(p_currentErrorInput_empty_n, ap_CS_fsm_state2, icmp_ln353_fu_290_p2)
    begin
        if (((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_currentErrorInput_blk_n <= p_currentErrorInput_empty_n;
        else 
            p_currentErrorInput_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_currentErrorInput_read_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln353_fu_290_p2)
    begin
        if ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_currentErrorInput_read <= ap_const_logic_1;
        else 
            p_currentErrorInput_read <= ap_const_logic_0;
        end if; 
    end process;

    p_currentErrorOutput_address0 <= zext_ln353_fu_301_p1(4 - 1 downto 0);

    p_currentErrorOutput_ce0_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln353_fu_290_p2)
    begin
        if ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_currentErrorOutput_ce0 <= ap_const_logic_1;
        else 
            p_currentErrorOutput_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_currentErrorOutput_d0 <= p_currentErrorInput_dout;

    p_currentErrorOutput_we0_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln353_fu_290_p2)
    begin
        if ((not((((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln353_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_currentErrorOutput_we0 <= ap_const_logic_1;
        else 
            p_currentErrorOutput_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_k_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_k_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_blk_n <= p_k_empty_n;
        else 
            p_k_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_k_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_read <= ap_const_logic_1;
        else 
            p_k_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_blk_n <= p_n_out_full_n;
        else 
            p_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_n_out_din <= p_n_dout;

    p_n_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_write <= ap_const_logic_1;
        else 
            p_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_outputPrevLayer_blk_n_assign_proc : process(p_outputPrevLayer_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln358_reg_696)
    begin
        if (((icmp_ln358_reg_696 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_outputPrevLayer_blk_n <= p_outputPrevLayer_empty_n;
        else 
            p_outputPrevLayer_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_outputPrevLayer_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln358_reg_696, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln358_reg_696 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_outputPrevLayer_read <= ap_const_logic_1;
        else 
            p_outputPrevLayer_read <= ap_const_logic_0;
        end if; 
    end process;


    p_weightGradient_blk_n_assign_proc : process(p_weightGradient_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln358_reg_696_pp0_iter3_reg)
    begin
        if (((icmp_ln358_reg_696_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_weightGradient_blk_n <= p_weightGradient_full_n;
        else 
            p_weightGradient_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_weightGradient_din <= (((((((((((((((l_v_150_fu_616_p1 & l_v_149_fu_612_p1) & l_v_148_fu_608_p1) & l_v_147_fu_604_p1) & l_v_146_fu_600_p1) & l_v_145_fu_596_p1) & l_v_144_fu_592_p1) & l_v_143_fu_588_p1) & l_v_142_fu_584_p1) & l_v_141_fu_580_p1) & l_v_140_fu_576_p1) & l_v_139_fu_572_p1) & l_v_138_fu_568_p1) & l_v_137_fu_564_p1) & l_v_136_fu_560_p1) & l_v_fu_556_p1);

    p_weightGradient_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln358_reg_696_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln358_reg_696_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_weightGradient_write <= ap_const_logic_1;
        else 
            p_weightGradient_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_306_p1 <= p_currentErrorInput_dout;
    trunc_ln674_fu_322_p1 <= p_outputPrevLayer_dout(32 - 1 downto 0);
    zext_ln353_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_194),64));
end behav;
