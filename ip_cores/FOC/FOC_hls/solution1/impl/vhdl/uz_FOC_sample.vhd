-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_FOC_sample is
generic (
    C_M_AXI_DOUT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DOUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DOUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_DIN_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_DIN_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DOUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DOUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DOUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_Dout_AWVALID : OUT STD_LOGIC;
    m_axi_Dout_AWREADY : IN STD_LOGIC;
    m_axi_Dout_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ADDR_WIDTH-1 downto 0);
    m_axi_Dout_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Dout_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_AWUSER_WIDTH-1 downto 0);
    m_axi_Dout_WVALID : OUT STD_LOGIC;
    m_axi_Dout_WREADY : IN STD_LOGIC;
    m_axi_Dout_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_DATA_WIDTH-1 downto 0);
    m_axi_Dout_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_DATA_WIDTH/8-1 downto 0);
    m_axi_Dout_WLAST : OUT STD_LOGIC;
    m_axi_Dout_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_WUSER_WIDTH-1 downto 0);
    m_axi_Dout_ARVALID : OUT STD_LOGIC;
    m_axi_Dout_ARREADY : IN STD_LOGIC;
    m_axi_Dout_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ADDR_WIDTH-1 downto 0);
    m_axi_Dout_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Dout_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ARUSER_WIDTH-1 downto 0);
    m_axi_Dout_RVALID : IN STD_LOGIC;
    m_axi_Dout_RREADY : OUT STD_LOGIC;
    m_axi_Dout_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_DATA_WIDTH-1 downto 0);
    m_axi_Dout_RLAST : IN STD_LOGIC;
    m_axi_Dout_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_RUSER_WIDTH-1 downto 0);
    m_axi_Dout_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_BVALID : IN STD_LOGIC;
    m_axi_Dout_BREADY : OUT STD_LOGIC;
    m_axi_Dout_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_BUSER_WIDTH-1 downto 0);
    s_axi_Din_AWVALID : IN STD_LOGIC;
    s_axi_Din_AWREADY : OUT STD_LOGIC;
    s_axi_Din_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_ADDR_WIDTH-1 downto 0);
    s_axi_Din_WVALID : IN STD_LOGIC;
    s_axi_Din_WREADY : OUT STD_LOGIC;
    s_axi_Din_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_DATA_WIDTH-1 downto 0);
    s_axi_Din_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_DATA_WIDTH/8-1 downto 0);
    s_axi_Din_ARVALID : IN STD_LOGIC;
    s_axi_Din_ARREADY : OUT STD_LOGIC;
    s_axi_Din_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_ADDR_WIDTH-1 downto 0);
    s_axi_Din_RVALID : OUT STD_LOGIC;
    s_axi_Din_RREADY : IN STD_LOGIC;
    s_axi_Din_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DIN_DATA_WIDTH-1 downto 0);
    s_axi_Din_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_Din_BVALID : OUT STD_LOGIC;
    s_axi_Din_BREADY : IN STD_LOGIC;
    s_axi_Din_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of uz_FOC_sample is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_FOC_sample_uz_FOC_sample,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.454600,HLS_SYN_LAT=142,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=14286,HLS_SYN_LUT=19257,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal self_i : STD_LOGIC_VECTOR (287 downto 0);
    signal self_o : STD_LOGIC_VECTOR (287 downto 0);
    signal self_o_ap_vld : STD_LOGIC;
    signal Controller_id : STD_LOGIC_VECTOR (159 downto 0);
    signal Controller_iq : STD_LOGIC_VECTOR (159 downto 0);
    signal i_reference_Ampere : STD_LOGIC_VECTOR (95 downto 0);
    signal i_actual_Ampere : STD_LOGIC_VECTOR (95 downto 0);
    signal V_dc_volts : STD_LOGIC_VECTOR (31 downto 0);
    signal omega_el_rad_per_sec : STD_LOGIC_VECTOR (31 downto 0);
    signal output_volts_d : STD_LOGIC_VECTOR (63 downto 0);
    signal output_volts_q : STD_LOGIC_VECTOR (63 downto 0);
    signal I_sum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Dout_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Dout_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal Dout_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal Dout_AWVALID : STD_LOGIC;
    signal Dout_AWREADY : STD_LOGIC;
    signal Dout_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Dout_WVALID : STD_LOGIC;
    signal Dout_WREADY : STD_LOGIC;
    signal Dout_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Dout_ARREADY : STD_LOGIC;
    signal Dout_RVALID : STD_LOGIC;
    signal Dout_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Dout_RLAST : STD_LOGIC;
    signal Dout_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal Dout_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Dout_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Dout_BVALID : STD_LOGIC;
    signal Dout_BREADY : STD_LOGIC;
    signal Dout_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Dout_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal Dout_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln53_reg_1792 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_35_reg_1685 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal omega_el_rad_per_sec_read_reg_1646 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_dc_volts_read_reg_1654 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_1660 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_reg_1665 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_49_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_49_reg_1670 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_fu_432_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal self_read_reg_1680 : STD_LOGIC_VECTOR (287 downto 0);
    signal tmp_36_reg_1691 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_1697 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_reg_1702 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_reg_1707 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln46_1_reg_1712 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_2_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_2_reg_1717 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_3_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_3_reg_1722 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_4_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_4_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_5_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_5_reg_1732 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_reg_1737 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln43_1_reg_1742 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_1_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_1_reg_1747 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln46_2_reg_1752 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln46_3_reg_1757 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_8_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_8_reg_1762 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_9_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_9_reg_1767 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_10_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_10_reg_1772 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_11_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_11_reg_1777 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln51_1_reg_1782 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_2_reg_1787 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_reg_1798 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_1_reg_1803 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln25_fu_714_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln25_reg_1808 : STD_LOGIC_VECTOR (31 downto 0);
    signal Dout_addr_reg_1813 : STD_LOGIC_VECTOR (63 downto 0);
    signal Dout_addr_1_reg_1819 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reference_Ampere_q_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_actual_Ampere_d_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_actual_Ampere_q_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_actual_Ampere_q_reg_1841 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_1_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln25_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal error_1_reg_1863 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_2_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln43_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bitcast_ln44_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln43_1_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sum_1_reg_1894 : STD_LOGIC_VECTOR (31 downto 0);
    signal decouple_voltage_fu_809_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal decouple_voltage_reg_1899 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln35_1_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_1_reg_1909 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln51_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln35_3_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_3_reg_1920 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln51_1_fu_897_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1931 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_1936 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_1941 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1946 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_1951 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_1956 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul7_i1_reg_1961 : STD_LOGIC_VECTOR (31 downto 0);
    signal decouple_voltage_4_fu_901_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal decouple_voltage_4_reg_1966 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_fu_908_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_reg_1971 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal and_ln23_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_reg_1979 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_2_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_2_reg_1985 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_reg_1991 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal bitcast_ln46_1_fu_973_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_1_reg_1997 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal select_ln25_fu_977_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_10_fu_996_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_10_reg_2008 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_4_reg_2013 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_7_reg_2018 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_8_fu_1016_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_8_reg_2023 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal or_ln35_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_reg_2032 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal sign_fu_1095_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sign_1_fu_1137_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_2049 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_1182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_2054 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_reg_2059 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_2064 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_3_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_3_reg_2069 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln47_fu_1247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_reg_2074 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal old_I_sum_1_fu_1255_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal old_I_sum_1_reg_2079 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal bitcast_ln46_2_fu_1263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_2_reg_2084 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal and_ln23_5_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_5_reg_2092 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_7_fu_1317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_7_reg_2098 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_1_fu_1323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_1_reg_2104 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal bitcast_ln46_3_fu_1328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_3_reg_2110 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal select_ln25_1_fu_1332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_13_fu_1351_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_13_reg_2121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_20_reg_2126 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_22_reg_2131 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_11_fu_1371_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_11_reg_2136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal or_ln35_2_fu_1408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_2_reg_2145 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal sign_2_fu_1450_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sign_3_fu_1492_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_2162 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_4_fu_1537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_4_reg_2167 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_5_fu_1543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_5_reg_2172 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_6_fu_1549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_6_reg_2177 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_7_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_7_reg_2182 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln47_2_fu_1602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_2_reg_2187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_reg_2192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_ready : STD_LOGIC;
    signal grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_done : STD_LOGIC;
    signal self_ret9_reg_2197 : STD_LOGIC_VECTOR (287 downto 0);
    signal tmp_1_reg_2203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_ready : STD_LOGIC;
    signal grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_done : STD_LOGIC;
    signal self_ret_reg_2208 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_start : STD_LOGIC;
    signal grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_idle : STD_LOGIC;
    signal grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_return_1 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_start : STD_LOGIC;
    signal grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_idle : STD_LOGIC;
    signal grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_return_1 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_start_reg : STD_LOGIC := '0';
    signal grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln38_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln39_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln38_fu_1617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_fu_1642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln56_fu_1629_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_356_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_492_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_1_fu_502_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_fu_524_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_3_fu_534_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_19_fu_600_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_5_fu_610_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_21_fu_632_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_7_fu_642_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal decoupling_select_fu_674_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_720_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln8_fu_740_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln35_1_fu_821_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_825_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_1_fu_835_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_3_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_2_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_3_fu_861_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_865_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_3_fu_875_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_7_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_6_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln23_fu_912_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_916_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_926_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_1_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_1_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_2_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_fu_989_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln23_1_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_3_fu_1006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_4_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_fu_1024_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1027_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_fu_1037_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_1_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_1_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_1064_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_2_fu_1104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_3_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_2_fu_1108_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_fu_1146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_1_fu_1164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1150_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_fu_1160_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_fu_1168_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_1_fu_1178_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln31_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_1_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_1_fu_1224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_2_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_9_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal clamping_active_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln23_1_fu_1267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1271_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_2_fu_1281_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_7_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_6_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_3_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_4_fu_1303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_5_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_1_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_6_fu_1344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln23_6_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_8_fu_1361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_9_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_2_fu_1379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_1382_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_2_fu_1392_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_5_fu_1402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_4_fu_1396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_4_fu_1414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_5_fu_1445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_4_fu_1419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_6_fu_1459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_7_fu_1487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_6_fu_1463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_2_fu_1501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_3_fu_1519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_1505_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_2_fu_1515_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_32_fu_1523_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_3_fu_1533_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln31_4_fu_1561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_2_fu_1571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_3_fu_1575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_5_fu_1579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_6_fu_1585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_1_fu_1565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_12_fu_1591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal clamping_active_1_fu_1597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_317_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_317_ce : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_321_ce : STD_LOGIC;
    signal grp_fu_325_ce : STD_LOGIC;
    signal grp_fu_329_ce : STD_LOGIC;
    signal grp_fu_341_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_346_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_356_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);

    component uz_FOC_sample_uz_FOC_SpaceVector_Limitation_q_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (287 downto 0);
        u_input_Volts_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        u_input_Volts_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        V_dc_volts : IN STD_LOGIC_VECTOR (31 downto 0);
        omega_el_rad_per_sec : IN STD_LOGIC_VECTOR (31 downto 0);
        i_actual_Ampere_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (287 downto 0) );
    end component;


    component uz_FOC_sample_uz_FOC_SpaceVector_Limitation_d_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (287 downto 0);
        u_input_Volts_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        u_input_Volts_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        V_dc_volts : IN STD_LOGIC_VECTOR (31 downto 0);
        omega_el_rad_per_sec : IN STD_LOGIC_VECTOR (31 downto 0);
        i_actual_Ampere_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (287 downto 0) );
    end component;


    component uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_FOC_sample_Din_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        Controller_id : OUT STD_LOGIC_VECTOR (159 downto 0);
        Controller_iq : OUT STD_LOGIC_VECTOR (159 downto 0);
        self_o : IN STD_LOGIC_VECTOR (287 downto 0);
        self_o_ap_vld : IN STD_LOGIC;
        self_i : OUT STD_LOGIC_VECTOR (287 downto 0);
        i_actual_Ampere : OUT STD_LOGIC_VECTOR (95 downto 0);
        V_dc_volts : OUT STD_LOGIC_VECTOR (31 downto 0);
        omega_el_rad_per_sec : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        i_reference_Ampere : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component uz_FOC_sample_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_volts_d : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_volts_q : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component uz_FOC_sample_Dout_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Din_s_axi_U : component uz_FOC_sample_Din_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_DIN_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_DIN_DATA_WIDTH)
    port map (
        AWVALID => s_axi_Din_AWVALID,
        AWREADY => s_axi_Din_AWREADY,
        AWADDR => s_axi_Din_AWADDR,
        WVALID => s_axi_Din_WVALID,
        WREADY => s_axi_Din_WREADY,
        WDATA => s_axi_Din_WDATA,
        WSTRB => s_axi_Din_WSTRB,
        ARVALID => s_axi_Din_ARVALID,
        ARREADY => s_axi_Din_ARREADY,
        ARADDR => s_axi_Din_ARADDR,
        RVALID => s_axi_Din_RVALID,
        RREADY => s_axi_Din_RREADY,
        RDATA => s_axi_Din_RDATA,
        RRESP => s_axi_Din_RRESP,
        BVALID => s_axi_Din_BVALID,
        BREADY => s_axi_Din_BREADY,
        BRESP => s_axi_Din_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        Controller_id => Controller_id,
        Controller_iq => Controller_iq,
        self_o => self_o,
        self_o_ap_vld => self_o_ap_vld,
        self_i => self_i,
        i_actual_Ampere => i_actual_Ampere,
        V_dc_volts => V_dc_volts,
        omega_el_rad_per_sec => omega_el_rad_per_sec,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        i_reference_Ampere => i_reference_Ampere);

    control_s_axi_U : component uz_FOC_sample_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_volts_d => output_volts_d,
        output_volts_q => output_volts_q);

    Dout_m_axi_U : component uz_FOC_sample_Dout_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DOUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DOUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DOUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DOUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DOUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DOUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DOUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DOUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DOUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DOUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DOUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_Dout_AWVALID,
        AWREADY => m_axi_Dout_AWREADY,
        AWADDR => m_axi_Dout_AWADDR,
        AWID => m_axi_Dout_AWID,
        AWLEN => m_axi_Dout_AWLEN,
        AWSIZE => m_axi_Dout_AWSIZE,
        AWBURST => m_axi_Dout_AWBURST,
        AWLOCK => m_axi_Dout_AWLOCK,
        AWCACHE => m_axi_Dout_AWCACHE,
        AWPROT => m_axi_Dout_AWPROT,
        AWQOS => m_axi_Dout_AWQOS,
        AWREGION => m_axi_Dout_AWREGION,
        AWUSER => m_axi_Dout_AWUSER,
        WVALID => m_axi_Dout_WVALID,
        WREADY => m_axi_Dout_WREADY,
        WDATA => m_axi_Dout_WDATA,
        WSTRB => m_axi_Dout_WSTRB,
        WLAST => m_axi_Dout_WLAST,
        WID => m_axi_Dout_WID,
        WUSER => m_axi_Dout_WUSER,
        ARVALID => m_axi_Dout_ARVALID,
        ARREADY => m_axi_Dout_ARREADY,
        ARADDR => m_axi_Dout_ARADDR,
        ARID => m_axi_Dout_ARID,
        ARLEN => m_axi_Dout_ARLEN,
        ARSIZE => m_axi_Dout_ARSIZE,
        ARBURST => m_axi_Dout_ARBURST,
        ARLOCK => m_axi_Dout_ARLOCK,
        ARCACHE => m_axi_Dout_ARCACHE,
        ARPROT => m_axi_Dout_ARPROT,
        ARQOS => m_axi_Dout_ARQOS,
        ARREGION => m_axi_Dout_ARREGION,
        ARUSER => m_axi_Dout_ARUSER,
        RVALID => m_axi_Dout_RVALID,
        RREADY => m_axi_Dout_RREADY,
        RDATA => m_axi_Dout_RDATA,
        RLAST => m_axi_Dout_RLAST,
        RID => m_axi_Dout_RID,
        RUSER => m_axi_Dout_RUSER,
        RRESP => m_axi_Dout_RRESP,
        BVALID => m_axi_Dout_BVALID,
        BREADY => m_axi_Dout_BREADY,
        BRESP => m_axi_Dout_BRESP,
        BID => m_axi_Dout_BID,
        BUSER => m_axi_Dout_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => Dout_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => Dout_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => Dout_RDATA,
        I_RID => Dout_RID,
        I_RUSER => Dout_RUSER,
        I_RRESP => Dout_RRESP,
        I_RLAST => Dout_RLAST,
        I_AWVALID => Dout_AWVALID,
        I_AWREADY => Dout_AWREADY,
        I_AWADDR => Dout_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => Dout_WVALID,
        I_WREADY => Dout_WREADY,
        I_WDATA => Dout_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => Dout_BVALID,
        I_BREADY => Dout_BREADY,
        I_BRESP => Dout_BRESP,
        I_BID => Dout_BID,
        I_BUSER => Dout_BUSER);

    grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269 : component uz_FOC_sample_uz_FOC_SpaceVector_Limitation_q_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_start,
        ap_done => grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_done,
        ap_idle => grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_idle,
        ap_ready => grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_ready,
        p_read => self_ret9_reg_2197,
        u_input_Volts_0 => reg_405,
        u_input_Volts_1 => reg_385,
        V_dc_volts => V_dc_volts_read_reg_1654,
        omega_el_rad_per_sec => omega_el_rad_per_sec_read_reg_1646,
        i_actual_Ampere_1 => i_actual_Ampere_q_reg_1841,
        ap_return_0 => grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_return_0,
        ap_return_1 => grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_return_1);

    grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293 : component uz_FOC_sample_uz_FOC_SpaceVector_Limitation_d_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_start,
        ap_done => grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_done,
        ap_idle => grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_idle,
        ap_ready => grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_ready,
        p_read => self_read_reg_1680,
        u_input_Volts_0 => reg_405,
        u_input_Volts_1 => reg_385,
        V_dc_volts => V_dc_volts_read_reg_1654,
        omega_el_rad_per_sec => omega_el_rad_per_sec_read_reg_1646,
        i_actual_Ampere_1 => i_actual_Ampere_q_reg_1841,
        ap_return_0 => grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_return_0,
        ap_return_1 => grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_return_1);

    faddfsub_32ns_32ns_32_4_full_dsp_1_U64 : component uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_317_p0,
        din1 => grp_fu_317_p1,
        opcode => grp_fu_317_opcode,
        ce => grp_fu_317_ce,
        dout => grp_fu_317_p2);

    fsub_32ns_32ns_32_4_full_dsp_1_U65 : component uz_FOC_sample_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_321_p0,
        din1 => grp_fu_321_p1,
        ce => grp_fu_321_ce,
        dout => grp_fu_321_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U66 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        ce => grp_fu_325_ce,
        dout => grp_fu_325_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U67 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_329_p0,
        din1 => grp_fu_329_p1,
        ce => grp_fu_329_ce,
        dout => grp_fu_329_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U68 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_333_p0,
        din1 => grp_fu_333_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U69 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => error_1_reg_1863,
        din1 => grp_fu_337_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_337_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U70 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_341_p0,
        din1 => grp_fu_341_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_341_opcode,
        dout => grp_fu_341_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U71 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_346_opcode,
        dout => grp_fu_346_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U72 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_351_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_351_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U73 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_356_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => grp_fu_356_opcode,
        dout => grp_fu_356_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U74 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_397,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_8,
        dout => grp_fu_361_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U75 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_397,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_366_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_ready = ap_const_logic_1)) then 
                    grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                    grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_ready = ap_const_logic_1)) then 
                    grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                Dout_addr_1_reg_1819 <= sext_ln39_fu_750_p1;
                Dout_addr_reg_1813 <= sext_ln38_fu_730_p1;
                V_dc_volts_read_reg_1654 <= V_dc_volts;
                empty_49_reg_1670 <= empty_49_fu_428_p1;
                empty_reg_1660 <= empty_fu_414_p1;
                icmp_ln23_10_reg_1772 <= icmp_ln23_10_fu_652_p2;
                icmp_ln23_11_reg_1777 <= icmp_ln23_11_fu_658_p2;
                icmp_ln23_2_reg_1717 <= icmp_ln23_2_fu_512_p2;
                icmp_ln23_3_reg_1722 <= icmp_ln23_3_fu_518_p2;
                icmp_ln23_4_reg_1727 <= icmp_ln23_4_fu_544_p2;
                icmp_ln23_5_reg_1732 <= icmp_ln23_5_fu_550_p2;
                icmp_ln23_8_reg_1762 <= icmp_ln23_8_fu_620_p2;
                icmp_ln23_9_reg_1767 <= icmp_ln23_9_fu_626_p2;
                icmp_ln53_reg_1792 <= icmp_ln53_fu_688_p2;
                omega_el_rad_per_sec_read_reg_1646 <= omega_el_rad_per_sec;
                p_cast1_reg_1675 <= i_actual_Ampere(63 downto 32);
                p_cast_reg_1665 <= i_reference_Ampere(63 downto 32);
                self_read_reg_1680 <= self_i;
                tmp_35_reg_1685 <= self_i(32 downto 32);
                tmp_36_reg_1691 <= self_i(40 downto 40);
                trunc_ln20_1_reg_1803 <= self_i(159 downto 128);
                trunc_ln20_2_reg_1787 <= self_i(191 downto 160);
                trunc_ln2_reg_1707 <= Controller_iq(127 downto 96);
                trunc_ln43_1_reg_1742 <= Controller_id(63 downto 32);
                trunc_ln44_1_reg_1747 <= trunc_ln44_1_fu_576_p1;
                trunc_ln44_reg_1702 <= trunc_ln44_fu_468_p1;
                trunc_ln46_1_reg_1712 <= Controller_iq(159 downto 128);
                trunc_ln46_2_reg_1752 <= Controller_id(127 downto 96);
                trunc_ln46_3_reg_1757 <= Controller_id(159 downto 128);
                trunc_ln51_1_reg_1782 <= Controller_id(95 downto 64);
                trunc_ln5_reg_1737 <= Controller_iq(95 downto 64);
                trunc_ln6_reg_1798 <= self_i(127 downto 96);
                trunc_ln_reg_1697 <= Controller_iq(63 downto 32);
                xor_ln25_reg_1808 <= xor_ln25_fu_714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                I_sum <= select_ln56_fu_1629_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                P_sum_1_reg_1894 <= grp_fu_337_p2;
                decouple_voltage_reg_1899 <= decouple_voltage_fu_809_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                and_ln23_2_reg_1985 <= and_ln23_2_fu_962_p2;
                and_ln23_reg_1979 <= and_ln23_fu_952_p2;
                bitcast_ln46_reg_1971 <= bitcast_ln46_fu_908_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                and_ln23_5_reg_2092 <= and_ln23_5_fu_1307_p2;
                and_ln23_7_reg_2098 <= and_ln23_7_fu_1317_p2;
                bitcast_ln46_2_reg_2084 <= bitcast_ln46_2_fu_1263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                and_ln25_1_reg_2104 <= and_ln25_1_fu_1323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                and_ln25_reg_1991 <= and_ln25_fu_968_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                bitcast_ln46_1_reg_1997 <= bitcast_ln46_1_fu_973_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                bitcast_ln46_3_reg_2110 <= bitcast_ln46_3_fu_1328_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                decouple_voltage_4_reg_1966 <= decouple_voltage_4_fu_901_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                error_1_reg_1863 <= grp_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                fcmp_ln35_reg_1936 <= grp_fu_346_p2;
                fcmp_ln35_reg_1941 <= grp_fu_351_p2;
                fcmp_ln35_reg_1951 <= grp_fu_361_p2;
                fcmp_ln35_reg_1956 <= grp_fu_366_p2;
                tmp_11_reg_1931 <= grp_fu_341_p2;
                tmp_28_reg_1946 <= grp_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_actual_Ampere_q_reg_1841 <= i_actual_Ampere_q_fu_773_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                icmp_ln31_1_reg_2059 <= icmp_ln31_1_fu_1188_p2;
                icmp_ln31_2_reg_2064 <= icmp_ln31_2_fu_1194_p2;
                icmp_ln31_3_reg_2069 <= icmp_ln31_3_fu_1200_p2;
                icmp_ln31_reg_2054 <= icmp_ln31_fu_1182_p2;
                tmp_13_reg_2049 <= grp_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                icmp_ln31_4_reg_2167 <= icmp_ln31_4_fu_1537_p2;
                icmp_ln31_5_reg_2172 <= icmp_ln31_5_fu_1543_p2;
                icmp_ln31_6_reg_2177 <= icmp_ln31_6_fu_1549_p2;
                icmp_ln31_7_reg_2182 <= icmp_ln31_7_fu_1555_p2;
                tmp_30_reg_2162 <= grp_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                mul7_i1_reg_1961 <= grp_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                old_I_sum_1_reg_2079 <= old_I_sum_1_fu_1255_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                or_ln35_1_reg_1909 <= or_ln35_1_fu_851_p2;
                or_ln35_3_reg_1920 <= or_ln35_3_fu_891_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                or_ln35_2_reg_2145 <= or_ln35_2_fu_1408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                or_ln35_reg_2032 <= or_ln35_fu_1053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                output_10_reg_2008 <= output_10_fu_996_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                output_11_reg_2136 <= output_11_fu_1371_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                output_13_reg_2121 <= output_13_fu_1351_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                output_8_reg_2023 <= output_8_fu_1016_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln53_reg_1792 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln53_reg_1792 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_371 <= grp_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln53_reg_1792 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_379 <= grp_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln53_reg_1792 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_385 <= grp_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln53_reg_1792 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then
                reg_397 <= grp_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then
                reg_405 <= grp_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                select_ln47_2_reg_2187 <= select_ln47_2_fu_1602_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                select_ln47_reg_2074 <= select_ln47_fu_1247_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                self_ret9_reg_2197 <= grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_return_1;
                tmp_reg_2192 <= grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                self_ret_reg_2208 <= grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_return_1;
                tmp_1_reg_2203 <= grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                tmp_20_reg_2126 <= grp_fu_341_p2;
                tmp_22_reg_2131 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_4_reg_2013 <= grp_fu_341_p2;
                tmp_7_reg_2018 <= grp_fu_346_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state3, ap_CS_fsm_state42, ap_CS_fsm_state47, Dout_AWREADY, Dout_WREADY, Dout_BVALID, ap_CS_fsm_state39, grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_done, ap_CS_fsm_state41, grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Dout_AWADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Dout_AWREADY, Dout_addr_reg_1813, Dout_addr_1_reg_1819)
    begin
        if ((ap_const_logic_1 = Dout_AWREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                Dout_AWADDR <= Dout_addr_1_reg_1819;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                Dout_AWADDR <= Dout_addr_reg_1813;
            else 
                Dout_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            Dout_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Dout_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Dout_AWREADY)
    begin
        if ((((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            Dout_AWVALID <= ap_const_logic_1;
        else 
            Dout_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    Dout_BREADY_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state47, Dout_BVALID)
    begin
        if ((((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            Dout_BREADY <= ap_const_logic_1;
        else 
            Dout_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    Dout_WDATA_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state42, bitcast_ln38_fu_1617_p1, bitcast_ln39_fu_1642_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            Dout_WDATA <= bitcast_ln39_fu_1642_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            Dout_WDATA <= bitcast_ln38_fu_1617_p1;
        else 
            Dout_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Dout_WVALID_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state42, Dout_WREADY)
    begin
        if ((((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            Dout_WVALID <= ap_const_logic_1;
        else 
            Dout_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    Dout_blk_n_AW_assign_proc : process(m_axi_Dout_AWREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Dout_blk_n_AW <= m_axi_Dout_AWREADY;
        else 
            Dout_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    Dout_blk_n_B_assign_proc : process(m_axi_Dout_BVALID, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            Dout_blk_n_B <= m_axi_Dout_BVALID;
        else 
            Dout_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    Dout_blk_n_W_assign_proc : process(m_axi_Dout_WREADY, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            Dout_blk_n_W <= m_axi_Dout_WREADY;
        else 
            Dout_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    and_ln23_1_fu_1002_p2 <= (tmp_4_reg_2013 and and_ln23_reg_1979);
    and_ln23_2_fu_962_p2 <= (or_ln23_fu_942_p2 and or_ln23_2_fu_958_p2);
    and_ln23_3_fu_1006_p2 <= (tmp_7_reg_2018 and and_ln23_2_reg_1985);
    and_ln23_4_fu_1010_p2 <= (and_ln23_3_fu_1006_p2 and and_ln23_1_fu_1002_p2);
    and_ln23_5_fu_1307_p2 <= (or_ln23_4_fu_1303_p2 and or_ln23_3_fu_1297_p2);
    and_ln23_6_fu_1357_p2 <= (tmp_20_reg_2126 and and_ln23_5_reg_2092);
    and_ln23_7_fu_1317_p2 <= (or_ln23_5_fu_1313_p2 and or_ln23_3_fu_1297_p2);
    and_ln23_8_fu_1361_p2 <= (tmp_22_reg_2131 and and_ln23_7_reg_2098);
    and_ln23_9_fu_1365_p2 <= (and_ln23_8_fu_1361_p2 and and_ln23_6_fu_1357_p2);
    and_ln23_fu_952_p2 <= (or_ln23_fu_942_p2 and or_ln23_1_fu_948_p2);
    and_ln25_1_fu_1323_p2 <= (grp_fu_341_p2 and and_ln23_7_reg_2098);
    and_ln25_fu_968_p2 <= (grp_fu_341_p2 and and_ln23_2_reg_1985);
    and_ln31_1_fu_1224_p2 <= (or_ln31_fu_1216_p2 and or_ln31_1_fu_1220_p2);
    and_ln31_2_fu_1230_p2 <= (grp_fu_341_p2 and and_ln31_1_fu_1224_p2);
    and_ln31_4_fu_1561_p2 <= (tmp_30_reg_2162 and or_ln35_2_reg_2145);
    and_ln31_5_fu_1579_p2 <= (or_ln31_3_fu_1575_p2 and or_ln31_2_fu_1571_p2);
    and_ln31_6_fu_1585_p2 <= (grp_fu_341_p2 and and_ln31_5_fu_1579_p2);
    and_ln31_fu_1206_p2 <= (tmp_13_reg_2049 and or_ln35_reg_2032);
    and_ln35_1_fu_1090_p2 <= (or_ln35_reg_2032 and and_ln35_fu_1084_p2);
    and_ln35_2_fu_1104_p2 <= (tmp_11_reg_1931 and or_ln35_1_reg_1909);
    and_ln35_3_fu_1132_p2 <= (or_ln35_1_reg_1909 and and_ln35_fu_1126_p2);
    and_ln35_4_fu_1414_p2 <= (or_ln35_2_reg_2145 and grp_fu_341_p2);
    and_ln35_5_fu_1445_p2 <= (or_ln35_2_reg_2145 and and_ln35_fu_1439_p2);
    and_ln35_6_fu_1459_p2 <= (tmp_28_reg_1946 and or_ln35_3_reg_1920);
    and_ln35_7_fu_1487_p2 <= (or_ln35_3_reg_1920 and and_ln35_fu_1481_p2);
    and_ln35_fu_1059_p2 <= (or_ln35_reg_2032 and grp_fu_341_p2);
    and_ln35_fu_1084_p2 <= (xor_ln35_fu_1078_p2 and xor_ln35_fu_1072_p2);
    and_ln35_fu_1126_p2 <= (xor_ln35_fu_1121_p2 and xor_ln35_fu_1116_p2);
    and_ln35_fu_1439_p2 <= (xor_ln35_fu_1433_p2 and xor_ln35_fu_1427_p2);
    and_ln35_fu_1481_p2 <= (xor_ln35_fu_1476_p2 and xor_ln35_fu_1471_p2);
    and_ln49_1_fu_1339_p2 <= (grp_fu_341_p2 and and_ln23_5_reg_2092);
    and_ln49_fu_984_p2 <= (grp_fu_341_p2 and and_ln23_reg_1979);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state47, Dout_BVALID)
    begin
        if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state47, Dout_BVALID)
    begin
        if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln23_1_fu_1267_p1 <= reg_405;
    bitcast_ln23_fu_912_p1 <= reg_385;
    bitcast_ln25_fu_785_p1 <= xor_ln25_reg_1808;
    bitcast_ln31_1_fu_1164_p1 <= sign_1_fu_1137_p3;
    bitcast_ln31_2_fu_1501_p1 <= sign_2_fu_1450_p3;
    bitcast_ln31_3_fu_1519_p1 <= sign_3_fu_1492_p3;
    bitcast_ln31_fu_1146_p1 <= sign_fu_1095_p3;
    bitcast_ln35_1_fu_821_p1 <= reg_371;
    bitcast_ln35_2_fu_1379_p1 <= output_11_reg_2136;
    bitcast_ln35_3_fu_861_p1 <= reg_397;
    bitcast_ln35_fu_1024_p1 <= output_8_reg_2023;
    bitcast_ln38_fu_1617_p1 <= tmp_reg_2192;
    bitcast_ln39_fu_1642_p1 <= tmp_1_reg_2203;
    bitcast_ln43_1_fu_801_p1 <= trunc_ln43_1_reg_1742;
    bitcast_ln43_fu_793_p1 <= trunc_ln_reg_1697;
    bitcast_ln44_fu_797_p1 <= trunc_ln44_reg_1702;
    bitcast_ln46_1_fu_973_p1 <= trunc_ln46_1_reg_1712;
    bitcast_ln46_2_fu_1263_p1 <= trunc_ln46_2_reg_1752;
    bitcast_ln46_3_fu_1328_p1 <= trunc_ln46_3_reg_1757;
    bitcast_ln46_fu_908_p1 <= trunc_ln2_reg_1707;
    bitcast_ln51_1_fu_897_p1 <= trunc_ln51_1_reg_1782;
    bitcast_ln51_fu_857_p1 <= trunc_ln5_reg_1737;
    clamping_active_1_fu_1597_p2 <= (tmp_36_reg_1691 or output_12_fu_1591_p2);
    clamping_active_fu_1242_p2 <= (tmp_36_reg_1691 or output_9_fu_1236_p2);
    config_1_fu_781_p1 <= trunc_ln20_1_reg_1803;
    config_2_fu_789_p1 <= trunc_ln20_2_reg_1787;
    config_fu_777_p1 <= trunc_ln6_reg_1798;
    decouple_voltage_4_fu_901_p3 <= 
        reg_397 when (icmp_ln53_reg_1792(0) = '1') else 
        ap_const_lv32_0;
    decouple_voltage_fu_809_p3 <= 
        reg_371 when (icmp_ln53_reg_1792(0) = '1') else 
        ap_const_lv32_0;
    decoupling_select_fu_674_p1 <= self_i(32 - 1 downto 0);
    empty_49_fu_428_p1 <= i_actual_Ampere(32 - 1 downto 0);
    empty_fu_414_p1 <= i_reference_Ampere(32 - 1 downto 0);

    grp_fu_317_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state3, ap_CS_fsm_state42, ap_CS_fsm_state47, Dout_AWREADY, Dout_WREADY, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state39, grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_done, ap_CS_fsm_state41, grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_done, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state45) or ((ap_const_logic_0 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_0 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_done = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_done = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_logic_0 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_0 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_317_ce <= ap_const_logic_0;
        else 
            grp_fu_317_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_317_opcode_assign_proc : process(ap_CS_fsm_state2, icmp_ln53_reg_1792, tmp_35_reg_1685, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state39, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            grp_fu_317_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((icmp_ln53_reg_1792 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            grp_fu_317_opcode <= ap_const_lv2_0;
        else 
            grp_fu_317_opcode <= "XX";
        end if; 
    end process;


    grp_fu_317_p0_assign_proc : process(I_sum, ap_CS_fsm_state2, reg_379, reg_385, ap_CS_fsm_state5, reg_405, i_reference_Ampere_q_fu_764_p1, ap_CS_fsm_state9, ap_CS_fsm_state15, output_10_reg_2008, ap_CS_fsm_state17, old_I_sum_1_fu_1255_p3, old_I_sum_1_reg_2079, ap_CS_fsm_state26, ap_CS_fsm_state32, output_13_reg_2121, ap_CS_fsm_state34, ap_CS_fsm_state39, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_317_p0 <= old_I_sum_1_reg_2079;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_317_p0 <= output_13_reg_2121;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_317_p0 <= reg_405;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_317_p0 <= old_I_sum_1_fu_1255_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_317_p0 <= output_10_reg_2008;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_317_p0 <= reg_385;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_317_p0 <= I_sum;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_317_p0 <= reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_317_p0 <= i_reference_Ampere_q_fu_764_p1;
        else 
            grp_fu_317_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_317_p1_assign_proc : process(ap_CS_fsm_state2, reg_379, ap_CS_fsm_state5, i_actual_Ampere_q_fu_773_p1, config_2_fu_789_p1, P_sum_1_reg_1894, decouple_voltage_reg_1899, ap_CS_fsm_state9, decouple_voltage_4_reg_1966, ap_CS_fsm_state15, select_ln25_fu_977_p3, ap_CS_fsm_state17, select_ln47_reg_2074, ap_CS_fsm_state26, ap_CS_fsm_state32, select_ln25_1_fu_1332_p3, ap_CS_fsm_state34, select_ln47_2_reg_2187, ap_CS_fsm_state39, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_317_p1 <= select_ln47_2_reg_2187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_317_p1 <= decouple_voltage_reg_1899;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_317_p1 <= select_ln25_1_fu_1332_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_317_p1 <= P_sum_1_reg_1894;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_317_p1 <= select_ln47_reg_2074;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_317_p1 <= decouple_voltage_4_reg_1966;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_317_p1 <= select_ln25_fu_977_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_317_p1 <= reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_317_p1 <= config_2_fu_789_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_317_p1 <= i_actual_Ampere_q_fu_773_p1;
        else 
            grp_fu_317_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_321_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Dout_AWREADY, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_321_ce <= ap_const_logic_1;
        else 
            grp_fu_321_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_321_p0 <= empty_reg_1660;
    grp_fu_321_p1 <= empty_49_reg_1670;

    grp_fu_325_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Dout_AWREADY, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_325_ce <= ap_const_logic_1;
        else 
            grp_fu_325_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_325_p0_assign_proc : process(ap_CS_fsm_state2, reg_371, reg_385, ap_CS_fsm_state5, bitcast_ln25_fu_785_p1, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_325_p0 <= reg_385;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_325_p0 <= reg_371;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_325_p0 <= bitcast_ln25_fu_785_p1;
        else 
            grp_fu_325_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_325_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, omega_el_rad_per_sec_read_reg_1646, config_1_fu_781_p1, bitcast_ln43_fu_793_p1, ap_CS_fsm_state6, ap_CS_fsm_state9, bitcast_ln51_fu_857_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_325_p1 <= bitcast_ln51_fu_857_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_325_p1 <= bitcast_ln43_fu_793_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_325_p1 <= omega_el_rad_per_sec_read_reg_1646;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_325_p1 <= config_1_fu_781_p1;
        else 
            grp_fu_325_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_329_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Dout_AWREADY, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_329_ce <= ap_const_logic_1;
        else 
            grp_fu_329_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_329_p0_assign_proc : process(ap_CS_fsm_state2, reg_385, reg_397, i_actual_Ampere_d_fu_768_p1, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_329_p0 <= reg_397;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_329_p0 <= reg_385;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_329_p0 <= i_actual_Ampere_d_fu_768_p1;
        else 
            grp_fu_329_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_329_p1_assign_proc : process(ap_CS_fsm_state2, config_fu_777_p1, ap_CS_fsm_state6, bitcast_ln44_fu_797_p1, ap_CS_fsm_state9, bitcast_ln51_1_fu_897_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_329_p1 <= bitcast_ln51_1_fu_897_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_329_p1 <= bitcast_ln44_fu_797_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_329_p1 <= config_fu_777_p1;
        else 
            grp_fu_329_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_333_p0_assign_proc : process(reg_385, error_1_reg_1863, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_333_p0 <= reg_385;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_333_p0 <= error_1_reg_1863;
        else 
            grp_fu_333_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_333_p1_assign_proc : process(omega_el_rad_per_sec_read_reg_1646, ap_CS_fsm_state6, bitcast_ln43_1_fu_801_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_333_p1 <= omega_el_rad_per_sec_read_reg_1646;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_333_p1 <= bitcast_ln43_1_fu_801_p1;
        else 
            grp_fu_333_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_337_p1 <= trunc_ln44_1_reg_1747;

    grp_fu_341_opcode_assign_proc : process(tmp_35_reg_1685, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state9, ap_CS_fsm_state13, and_ln25_reg_1991, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state30, and_ln25_1_reg_2104, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state36)
    begin
        if ((((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            grp_fu_341_opcode <= ap_const_lv5_1;
        elsif ((((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_341_opcode <= ap_const_lv5_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_341_opcode <= ap_const_lv5_2;
        elsif ((((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_0 = and_ln25_1_reg_2104) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_const_lv1_0 = and_ln25_reg_1991) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            grp_fu_341_opcode <= ap_const_lv5_4;
        else 
            grp_fu_341_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_341_p0_assign_proc : process(reg_371, reg_385, ap_CS_fsm_state20, reg_405, ap_CS_fsm_state37, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, output_8_reg_2023, ap_CS_fsm_state19, sign_fu_1095_p3, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, output_11_reg_2136, ap_CS_fsm_state36, sign_2_fu_1450_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_341_p0 <= sign_2_fu_1450_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_341_p0 <= output_11_reg_2136;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_341_p0 <= reg_405;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_341_p0 <= sign_fu_1095_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_341_p0 <= output_8_reg_2023;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_341_p0 <= reg_385;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_341_p0 <= reg_371;
        else 
            grp_fu_341_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_341_p1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state9, bitcast_ln46_fu_908_p1, ap_CS_fsm_state13, bitcast_ln46_1_fu_973_p1, bitcast_ln46_1_reg_1997, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, sign_1_fu_1137_p3, bitcast_ln46_2_fu_1263_p1, ap_CS_fsm_state30, bitcast_ln46_3_fu_1328_p1, bitcast_ln46_3_reg_2110, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state36, sign_3_fu_1492_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_341_p1 <= sign_3_fu_1492_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_341_p1 <= bitcast_ln46_3_reg_2110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_341_p1 <= bitcast_ln46_3_fu_1328_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_341_p1 <= bitcast_ln46_2_fu_1263_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_341_p1 <= sign_1_fu_1137_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_341_p1 <= bitcast_ln46_1_reg_1997;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_341_p1 <= bitcast_ln46_1_fu_973_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_341_p1 <= bitcast_ln46_fu_908_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_341_p1 <= ap_const_lv32_0;
        else 
            grp_fu_341_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_346_opcode_assign_proc : process(tmp_35_reg_1685, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state33, ap_CS_fsm_state36)
    begin
        if ((((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_346_opcode <= ap_const_lv5_5;
        elsif ((((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_346_opcode <= ap_const_lv5_8;
        else 
            grp_fu_346_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_346_p0_assign_proc : process(reg_371, reg_385, reg_405, ap_CS_fsm_state9, ap_CS_fsm_state16, output_8_reg_2023, ap_CS_fsm_state19, ap_CS_fsm_state33, output_11_reg_2136, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_346_p0 <= output_11_reg_2136;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_346_p0 <= reg_405;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_346_p0 <= output_8_reg_2023;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_346_p0 <= reg_385;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_346_p0 <= reg_371;
        else 
            grp_fu_346_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_346_p1_assign_proc : process(ap_CS_fsm_state9, bitcast_ln46_reg_1971, ap_CS_fsm_state16, ap_CS_fsm_state19, bitcast_ln46_2_reg_2084, ap_CS_fsm_state33, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_346_p1 <= bitcast_ln46_2_reg_2084;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_346_p1 <= bitcast_ln46_reg_1971;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_346_p1 <= ap_const_lv32_0;
        else 
            grp_fu_346_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_351_p0_assign_proc : process(reg_371, ap_CS_fsm_state9, output_8_reg_2023, ap_CS_fsm_state19, output_11_reg_2136, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_351_p0 <= output_11_reg_2136;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_351_p0 <= output_8_reg_2023;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_351_p0 <= reg_371;
        else 
            grp_fu_351_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_356_opcode_assign_proc : process(tmp_35_reg_1685, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state36)
    begin
        if ((((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            grp_fu_356_opcode <= ap_const_lv5_1;
        elsif (((tmp_35_reg_1685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_356_opcode <= ap_const_lv5_4;
        else 
            grp_fu_356_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_356_p0_assign_proc : process(reg_397, ap_CS_fsm_state9, output_8_reg_2023, ap_CS_fsm_state19, output_11_reg_2136, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_356_p0 <= output_11_reg_2136;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_356_p0 <= output_8_reg_2023;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_356_p0 <= reg_397;
        else 
            grp_fu_356_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_start <= grp_uz_FOC_SpaceVector_Limitation_d_1_fu_293_ap_start_reg;
    grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_start <= grp_uz_FOC_SpaceVector_Limitation_q_1_fu_269_ap_start_reg;
    i_actual_Ampere_d_fu_768_p1 <= empty_49_reg_1670;
    i_actual_Ampere_q_fu_773_p1 <= p_cast1_reg_1675;
    i_reference_Ampere_q_fu_764_p1 <= p_cast_reg_1665;
    icmp_ln23_10_fu_652_p2 <= "0" when (tmp_21_fu_632_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_11_fu_658_p2 <= "1" when (trunc_ln23_7_fu_642_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_1_fu_936_p2 <= "1" when (trunc_ln23_fu_926_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_2_fu_512_p2 <= "0" when (tmp_3_fu_492_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_3_fu_518_p2 <= "1" when (trunc_ln23_1_fu_502_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_4_fu_544_p2 <= "0" when (tmp_6_fu_524_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_5_fu_550_p2 <= "1" when (trunc_ln23_3_fu_534_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_6_fu_1285_p2 <= "0" when (tmp_18_fu_1271_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_7_fu_1291_p2 <= "1" when (trunc_ln23_2_fu_1281_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_8_fu_620_p2 <= "0" when (tmp_19_fu_600_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_9_fu_626_p2 <= "1" when (trunc_ln23_5_fu_610_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_fu_930_p2 <= "0" when (tmp_2_fu_916_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_1_fu_1188_p2 <= "1" when (trunc_ln31_fu_1160_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_2_fu_1194_p2 <= "0" when (tmp_15_fu_1168_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_3_fu_1200_p2 <= "1" when (trunc_ln31_1_fu_1178_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_4_fu_1537_p2 <= "0" when (tmp_31_fu_1505_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_5_fu_1543_p2 <= "1" when (trunc_ln31_2_fu_1515_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_6_fu_1549_p2 <= "0" when (tmp_32_fu_1523_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_7_fu_1555_p2 <= "1" when (trunc_ln31_3_fu_1533_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_fu_1182_p2 <= "0" when (tmp_14_fu_1150_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_1_fu_1047_p2 <= "1" when (trunc_ln35_fu_1037_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_2_fu_839_p2 <= "0" when (tmp_10_fu_825_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_3_fu_845_p2 <= "1" when (trunc_ln35_1_fu_835_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_4_fu_1396_p2 <= "0" when (tmp_24_fu_1382_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_5_fu_1402_p2 <= "1" when (trunc_ln35_2_fu_1392_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_6_fu_879_p2 <= "0" when (tmp_27_fu_865_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_7_fu_885_p2 <= "1" when (trunc_ln35_3_fu_875_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_fu_1041_p2 <= "0" when (tmp_5_fu_1027_p4 = ap_const_lv8_FF) else "1";
    icmp_ln53_fu_688_p2 <= "1" when (decoupling_select_fu_674_p1 = ap_const_lv32_1) else "0";
    old_I_sum_1_fu_1255_p3 <= 
        ap_const_lv32_0 when (tmp_35_reg_1685(0) = '1') else 
        reg_405;
    or_ln23_1_fu_948_p2 <= (icmp_ln23_3_reg_1722 or icmp_ln23_2_reg_1717);
    or_ln23_2_fu_958_p2 <= (icmp_ln23_5_reg_1732 or icmp_ln23_4_reg_1727);
    or_ln23_3_fu_1297_p2 <= (icmp_ln23_7_fu_1291_p2 or icmp_ln23_6_fu_1285_p2);
    or_ln23_4_fu_1303_p2 <= (icmp_ln23_9_reg_1767 or icmp_ln23_8_reg_1762);
    or_ln23_5_fu_1313_p2 <= (icmp_ln23_11_reg_1777 or icmp_ln23_10_reg_1772);
    or_ln23_fu_942_p2 <= (icmp_ln23_fu_930_p2 or icmp_ln23_1_fu_936_p2);
    or_ln31_1_fu_1220_p2 <= (icmp_ln31_3_reg_2069 or icmp_ln31_2_reg_2064);
    or_ln31_2_fu_1571_p2 <= (icmp_ln31_5_reg_2172 or icmp_ln31_4_reg_2167);
    or_ln31_3_fu_1575_p2 <= (icmp_ln31_7_reg_2182 or icmp_ln31_6_reg_2177);
    or_ln31_fu_1216_p2 <= (icmp_ln31_reg_2054 or icmp_ln31_1_reg_2059);
    or_ln35_1_fu_851_p2 <= (icmp_ln35_3_fu_845_p2 or icmp_ln35_2_fu_839_p2);
    or_ln35_2_fu_1408_p2 <= (icmp_ln35_5_fu_1402_p2 or icmp_ln35_4_fu_1396_p2);
    or_ln35_3_fu_891_p2 <= (icmp_ln35_7_fu_885_p2 or icmp_ln35_6_fu_879_p2);
    or_ln35_fu_1053_p2 <= (icmp_ln35_fu_1041_p2 or icmp_ln35_1_fu_1047_p2);
    output_10_fu_996_p3 <= 
        bitcast_ln46_reg_1971 when (and_ln25_reg_1991(0) = '1') else 
        output_fu_989_p3;
    output_11_fu_1371_p3 <= 
        ap_const_lv32_0 when (and_ln23_9_fu_1365_p2(0) = '1') else 
        grp_fu_317_p2;
    output_12_fu_1591_p2 <= (xor_ln31_1_fu_1565_p2 and and_ln31_6_fu_1585_p2);
    output_13_fu_1351_p3 <= 
        bitcast_ln46_2_reg_2084 when (and_ln25_1_reg_2104(0) = '1') else 
        output_6_fu_1344_p3;
    output_6_fu_1344_p3 <= 
        bitcast_ln46_3_reg_2110 when (and_ln49_1_fu_1339_p2(0) = '1') else 
        reg_405;
    output_8_fu_1016_p3 <= 
        ap_const_lv32_0 when (and_ln23_4_fu_1010_p2(0) = '1') else 
        grp_fu_317_p2;
    output_9_fu_1236_p2 <= (xor_ln31_fu_1210_p2 and and_ln31_2_fu_1230_p2);
    output_fu_989_p3 <= 
        bitcast_ln46_1_reg_1997 when (and_ln49_fu_984_p2(0) = '1') else 
        reg_385;
    p_cast1_fu_432_p4 <= i_actual_Ampere(63 downto 32);
    select_ln25_1_fu_1332_p3 <= 
        bitcast_ln46_2_reg_2084 when (and_ln25_1_reg_2104(0) = '1') else 
        bitcast_ln46_3_fu_1328_p1;
    select_ln25_fu_977_p3 <= 
        bitcast_ln46_reg_1971 when (and_ln25_reg_1991(0) = '1') else 
        bitcast_ln46_1_fu_973_p1;
    select_ln35_2_fu_1108_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_2_fu_1104_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_4_fu_1419_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_4_fu_1414_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_6_fu_1463_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_6_fu_1459_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_fu_1064_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_fu_1059_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln47_2_fu_1602_p3 <= 
        ap_const_lv32_0 when (clamping_active_1_fu_1597_p2(0) = '1') else 
        mul7_i1_reg_1961;
    select_ln47_fu_1247_p3 <= 
        ap_const_lv32_0 when (clamping_active_fu_1242_p2(0) = '1') else 
        reg_371;
    select_ln56_fu_1629_p3 <= 
        ap_const_lv32_0 when (tmp_35_reg_1685(0) = '1') else 
        grp_fu_317_p2;

    self_o_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state42, self_ret9_reg_2197, self_ret_reg_2208)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            self_o <= self_ret_reg_2208;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            self_o <= self_ret9_reg_2197;
        else 
            self_o <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    self_o_ap_vld_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state42, Dout_WREADY)
    begin
        if ((((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            self_o_ap_vld <= ap_const_logic_1;
        else 
            self_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln38_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_720_p4),64));

        sext_ln39_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_740_p4),64));

    sign_1_fu_1137_p3 <= 
        select_ln35_2_fu_1108_p3 when (and_ln35_3_fu_1132_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_2_fu_1450_p3 <= 
        select_ln35_4_fu_1419_p3 when (and_ln35_5_fu_1445_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_3_fu_1492_p3 <= 
        select_ln35_6_fu_1463_p3 when (and_ln35_7_fu_1487_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_fu_1095_p3 <= 
        select_ln35_fu_1064_p3 when (and_ln35_1_fu_1090_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_10_fu_825_p4 <= bitcast_ln35_1_fu_821_p1(30 downto 23);
    tmp_14_fu_1150_p4 <= bitcast_ln31_fu_1146_p1(30 downto 23);
    tmp_15_fu_1168_p4 <= bitcast_ln31_1_fu_1164_p1(30 downto 23);
    tmp_18_fu_1271_p4 <= bitcast_ln23_1_fu_1267_p1(30 downto 23);
    tmp_19_fu_600_p4 <= Controller_id(158 downto 151);
    tmp_21_fu_632_p4 <= Controller_id(126 downto 119);
    tmp_24_fu_1382_p4 <= bitcast_ln35_2_fu_1379_p1(30 downto 23);
    tmp_27_fu_865_p4 <= bitcast_ln35_3_fu_861_p1(30 downto 23);
    tmp_2_fu_916_p4 <= bitcast_ln23_fu_912_p1(30 downto 23);
    tmp_31_fu_1505_p4 <= bitcast_ln31_2_fu_1501_p1(30 downto 23);
    tmp_32_fu_1523_p4 <= bitcast_ln31_3_fu_1519_p1(30 downto 23);
    tmp_3_fu_492_p4 <= Controller_iq(158 downto 151);
    tmp_5_fu_1027_p4 <= bitcast_ln35_fu_1024_p1(30 downto 23);
    tmp_6_fu_524_p4 <= Controller_iq(126 downto 119);
    trunc_ln23_1_fu_502_p4 <= Controller_iq(150 downto 128);
    trunc_ln23_2_fu_1281_p1 <= bitcast_ln23_1_fu_1267_p1(23 - 1 downto 0);
    trunc_ln23_3_fu_534_p4 <= Controller_iq(118 downto 96);
    trunc_ln23_5_fu_610_p4 <= Controller_id(150 downto 128);
    trunc_ln23_7_fu_642_p4 <= Controller_id(118 downto 96);
    trunc_ln23_fu_926_p1 <= bitcast_ln23_fu_912_p1(23 - 1 downto 0);
    trunc_ln31_1_fu_1178_p1 <= bitcast_ln31_1_fu_1164_p1(23 - 1 downto 0);
    trunc_ln31_2_fu_1515_p1 <= bitcast_ln31_2_fu_1501_p1(23 - 1 downto 0);
    trunc_ln31_3_fu_1533_p1 <= bitcast_ln31_3_fu_1519_p1(23 - 1 downto 0);
    trunc_ln31_fu_1160_p1 <= bitcast_ln31_fu_1146_p1(23 - 1 downto 0);
    trunc_ln35_1_fu_835_p1 <= bitcast_ln35_1_fu_821_p1(23 - 1 downto 0);
    trunc_ln35_2_fu_1392_p1 <= bitcast_ln35_2_fu_1379_p1(23 - 1 downto 0);
    trunc_ln35_3_fu_875_p1 <= bitcast_ln35_3_fu_861_p1(23 - 1 downto 0);
    trunc_ln35_fu_1037_p1 <= bitcast_ln35_fu_1024_p1(23 - 1 downto 0);
    trunc_ln44_1_fu_576_p1 <= Controller_id(32 - 1 downto 0);
    trunc_ln44_fu_468_p1 <= Controller_iq(32 - 1 downto 0);
    trunc_ln7_fu_720_p4 <= output_volts_d(63 downto 2);
    trunc_ln8_fu_740_p4 <= output_volts_q(63 downto 2);
    xor_ln25_fu_714_p2 <= (p_cast1_fu_432_p4 xor ap_const_lv32_80000000);
    xor_ln31_1_fu_1565_p2 <= (ap_const_lv1_1 xor and_ln31_4_fu_1561_p2);
    xor_ln31_fu_1210_p2 <= (ap_const_lv1_1 xor and_ln31_fu_1206_p2);
    xor_ln35_fu_1072_p2 <= (grp_fu_346_p2 xor ap_const_lv1_1);
    xor_ln35_fu_1078_p2 <= (grp_fu_351_p2 xor ap_const_lv1_1);
    xor_ln35_fu_1116_p2 <= (fcmp_ln35_reg_1936 xor ap_const_lv1_1);
    xor_ln35_fu_1121_p2 <= (fcmp_ln35_reg_1941 xor ap_const_lv1_1);
    xor_ln35_fu_1427_p2 <= (grp_fu_346_p2 xor ap_const_lv1_1);
    xor_ln35_fu_1433_p2 <= (grp_fu_351_p2 xor ap_const_lv1_1);
    xor_ln35_fu_1471_p2 <= (fcmp_ln35_reg_1951 xor ap_const_lv1_1);
    xor_ln35_fu_1476_p2 <= (fcmp_ln35_reg_1956 xor ap_const_lv1_1);
end behav;
