-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pu_conversion\uz_pu_con_ip_src_uz_pu_conversion.vhd
-- Created: 2022-02-25 15:06:35
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.125e-10
-- Target subsystem base rate: 3.125e-10
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- out_rsvd                      ce_out        1e-08
-- out1                          ce_out        1e-08
-- out2                          ce_out        1e-08
-- out3                          ce_out        1e-08
-- out4                          ce_out        1e-08
-- out5                          ce_out        1e-08
-- out6                          ce_out        1e-08
-- out7                          ce_out        1e-08
-- out8                          ce_out        1e-08
-- out9                          ce_out        1e-08
-- out10                         ce_out        1e-08
-- out11                         ce_out        1e-08
-- out12                         ce_out        1e-08
-- out13                         ce_out        1e-08
-- out14                         ce_out        1e-08
-- out15                         ce_out        1e-08
-- out16                         ce_out        1e-08
-- out17                         ce_out        1e-08
-- out18                         ce_out        1e-08
-- out19                         ce_out        1e-08
-- out20                         ce_out        1e-08
-- out21                         ce_out        1e-08
-- out22                         ce_out        1e-08
-- out23                         ce_out        1e-08
-- out24                         ce_out        1e-08
-- out25                         ce_out        1e-08
-- out26                         ce_out        1e-08
-- out27                         ce_out        1e-08
-- out28                         ce_out        1e-08
-- out29                         ce_out        1e-08
-- out30                         ce_out        1e-08
-- out31                         ce_out        1e-08
-- out_valid                     ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pu_con_ip_src_uz_pu_conversion
-- Source Path: uz_pu_conversion/uz_pu_conversion
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pu_con_ip_src_uz_pu_conversion_pkg.ALL;

ENTITY uz_pu_con_ip_src_uz_pu_conversion IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        in_rsvd                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in1                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in2                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in3                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in4                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in5                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in6                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in7                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in8                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in9                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in10                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in11                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in12                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in13                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in14                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in15                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in16                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in17                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in18                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in19                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in20                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in21                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in22                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in23                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in24                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in25                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in26                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in27                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in28                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in29                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in30                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in31                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        AXI_pu_conv_in                    :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in1                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in2                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in3                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in4                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in5                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in6                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in7                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in8                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in9                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in10                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in11                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in12                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in13                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in14                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in15                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in16                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in17                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in18                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in19                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in20                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in21                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in22                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in23                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in24                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in25                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in26                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in27                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in28                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in29                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in30                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in31                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        adc_trigger                       :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        out_rsvd                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out1                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out2                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out3                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out4                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out5                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out6                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out7                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out8                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out9                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out10                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out11                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out12                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out13                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out14                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out15                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out16                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out17                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out18                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out19                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out20                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out21                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out22                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out23                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out24                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out25                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out26                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out27                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out28                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out29                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out30                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out31                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out_valid                         :   OUT   std_logic
        );
END uz_pu_con_ip_src_uz_pu_conversion;


ARCHITECTURE rtl OF uz_pu_con_ip_src_uz_pu_conversion IS

  -- Component Declarations
  COMPONENT uz_pu_con_ip_src_uz_pu_conversion_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_32_0                      :   OUT   std_logic;
          enb_1_32_1                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pu_con_ip_src_uz_pu_conversion_tc
    USE ENTITY work.uz_pu_con_ip_src_uz_pu_conversion_tc(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL enb_1_32_0                       : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_32_1                       : std_logic;
  SIGNAL Product0_deserializer_contl_cnt  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Product0_deserializer_contl_validOutput : std_logic;
  SIGNAL Product0_deserializer_innerRegEn : std_logic;
  SIGNAL Product0_deserializer_innerRegCtrolEn : std_logic;
  SIGNAL Product0_deserializer_outBypassEn : std_logic;
  SIGNAL Product0_deserializer_tapDelayEn : std_logic;
  SIGNAL Product0_deserializer_tapDelayEn_1 : std_logic;
  SIGNAL counterSig                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL in_signed                        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay_out1                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL in1_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch1_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay1_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL in2_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch2_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay2_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL in3_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch3_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay3_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL in4_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch4_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay4_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL in5_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch5_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay5_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL in6_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch6_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay6_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL in7_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch7_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay7_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL in8_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch8_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay8_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL in9_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch9_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay9_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL in10_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch10_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay10_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL in11_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch11_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay11_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL in12_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch12_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay12_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL in13_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch13_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay13_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL in14_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch14_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay14_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL in15_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch15_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay15_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL in16_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch16_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay16_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL in17_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch17_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay17_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL in18_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch18_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay18_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL in19_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch19_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay19_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL in20_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch20_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay20_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL in21_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch21_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay21_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL in22_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch22_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay22_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL in23_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch23_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay23_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_24              : std_logic;
  SIGNAL in24_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch24_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay24_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_25              : std_logic;
  SIGNAL in25_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch25_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay25_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_26              : std_logic;
  SIGNAL in26_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch26_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay26_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_27              : std_logic;
  SIGNAL in27_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch27_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay27_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_28              : std_logic;
  SIGNAL in28_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch28_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay28_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_29              : std_logic;
  SIGNAL in29_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch29_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay29_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_30              : std_logic;
  SIGNAL in30_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch30_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay30_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL switch_compare_1_31              : std_logic;
  SIGNAL in31_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch31_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay31_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL c0_serial_0                      : vector_of_signed27(0 TO 31);  -- sfix27_En15 [32]
  SIGNAL rcc_out                          : vector_of_signed27(0 TO 31);  -- sfix27_En15 [32]
  SIGNAL ratechange_splitcomp_out0        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out1        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out2        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out3        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out4        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out5        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out6        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out7        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out8        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out9        : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out10       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out11       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out12       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out13       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out14       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out15       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out16       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out17       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out18       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out19       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out20       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out21       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out22       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out23       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out24       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out25       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out26       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out27       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out28       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out29       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out30       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL ratechange_splitcomp_out31       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch_out1_1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL c0_serial_1                      : vector_of_std_logic_vector18(0 TO 31);  -- ufix18 [32]
  SIGNAL c0_serial_1_1                    : vector_of_unsigned18(0 TO 31);  -- ufix18_En18 [32]
  SIGNAL rcc_out_1                        : vector_of_unsigned18(0 TO 31);  -- ufix18_En18 [32]
  SIGNAL ratechange_splitcomp_out0_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out1_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out2_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out3_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out4_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out5_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out6_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out7_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out8_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out9_1      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out10_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out11_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out12_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out13_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out14_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out15_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out16_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out17_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out18_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out19_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out20_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out21_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out22_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out23_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out24_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out25_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out26_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out27_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out28_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out29_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out30_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL ratechange_splitcomp_out31_1     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL AXI_pu_conv_in_1                 : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL Product_cast                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product_mul_temp                 : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product_out1                     : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product0_deserializer_tapout     : vector_of_signed45(0 TO 30);  -- sfix45_En33 [31]
  SIGNAL Product0_deserializer_muxOut     : vector_of_signed45(0 TO 31);  -- sfix45_En33 [32]
  SIGNAL c0_serialOut_0                   : vector_of_signed45(0 TO 31);  -- sfix45_En33 [32]
  SIGNAL Product_out1_1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product_out1_2                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product1_out1                    : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product1_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product2_out1                    : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product2_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product3_out1                    : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product3_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product4_out1                    : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product4_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product5_out1                    : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product5_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product6_out1                    : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product6_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product7_out1                    : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product7_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product8_out1                    : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product8_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product9_out1                    : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product9_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product10_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product10_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product11_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product11_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product12_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product12_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product13_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product13_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product14_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product14_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product15_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product15_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product16_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product16_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product17_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product17_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product24_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product24_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product25_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product25_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product26_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product26_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product27_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product27_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product28_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product28_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product29_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product29_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product30_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product30_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product31_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product31_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product18_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product18_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product19_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product19_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product20_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product20_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product21_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product21_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product22_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product22_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product23_out1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product23_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL adc_trigger_1                    : std_logic;

BEGIN
  u_uz_pu_conversion_tc : uz_pu_con_ip_src_uz_pu_conversion_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_32_0 => enb_1_32_0,
              enb_1_32_1 => enb_1_32_1
              );

  Product0_deserializer_contl_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product0_deserializer_contl_cnt <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        IF Product0_deserializer_contl_cnt = to_unsigned(16#1F#, 6) THEN 
          Product0_deserializer_contl_cnt <= to_unsigned(16#00#, 6);
        ELSE 
          Product0_deserializer_contl_cnt <= Product0_deserializer_contl_cnt + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS Product0_deserializer_contl_process;

  Product0_deserializer_tapDelayEn <= hdlcoder_to_stdlogic(Product0_deserializer_contl_cnt < to_unsigned(16#1F#, 6));
  
  Product0_deserializer_contl_validOutput <= '1' WHEN Product0_deserializer_contl_cnt = to_unsigned(16#1F#, 6) ELSE
      '0';
  
  Product0_deserializer_innerRegEn <= '1' WHEN Product0_deserializer_contl_validOutput = '1' ELSE
      '0';
  
  Product0_deserializer_innerRegCtrolEn <= '1' WHEN Product0_deserializer_contl_validOutput = '1' ELSE
      '0';
  Product0_deserializer_outBypassEn <= '1';

  Product0_deserializer_tapDelayEn_1 <= enb AND Product0_deserializer_tapDelayEn;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 31
  ctr_0_31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        counterSig <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        counterSig <= counterSig + to_unsigned(16#01#, 5);
      END IF;
    END IF;
  END PROCESS ctr_0_31_process;


  
  switch_compare_1 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in_signed <= signed(in_rsvd);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Switch_out1 <= Delay_out1 WHEN switch_compare_1 = '0' ELSE
      in_signed;

  
  switch_compare_1_1 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in1_signed <= signed(in1);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay1_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch1_out1 <= Delay1_out1 WHEN switch_compare_1_1 = '0' ELSE
      in1_signed;

  
  switch_compare_1_2 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in2_signed <= signed(in2);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay2_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch2_out1 <= Delay2_out1 WHEN switch_compare_1_2 = '0' ELSE
      in2_signed;

  
  switch_compare_1_3 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in3_signed <= signed(in3);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay3_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch3_out1 <= Delay3_out1 WHEN switch_compare_1_3 = '0' ELSE
      in3_signed;

  
  switch_compare_1_4 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in4_signed <= signed(in4);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay4_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch4_out1 <= Delay4_out1 WHEN switch_compare_1_4 = '0' ELSE
      in4_signed;

  
  switch_compare_1_5 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in5_signed <= signed(in5);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay5_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch5_out1 <= Delay5_out1 WHEN switch_compare_1_5 = '0' ELSE
      in5_signed;

  
  switch_compare_1_6 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in6_signed <= signed(in6);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay6_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch6_out1 <= Delay6_out1 WHEN switch_compare_1_6 = '0' ELSE
      in6_signed;

  
  switch_compare_1_7 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in7_signed <= signed(in7);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay7_out1 <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch7_out1 <= Delay7_out1 WHEN switch_compare_1_7 = '0' ELSE
      in7_signed;

  
  switch_compare_1_8 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in8_signed <= signed(in8);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay8_out1 <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch8_out1 <= Delay8_out1 WHEN switch_compare_1_8 = '0' ELSE
      in8_signed;

  
  switch_compare_1_9 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in9_signed <= signed(in9);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay9_out1 <= Switch9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch9_out1 <= Delay9_out1 WHEN switch_compare_1_9 = '0' ELSE
      in9_signed;

  
  switch_compare_1_10 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in10_signed <= signed(in10);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay10_out1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch10_out1 <= Delay10_out1 WHEN switch_compare_1_10 = '0' ELSE
      in10_signed;

  
  switch_compare_1_11 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in11_signed <= signed(in11);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay11_out1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  Switch11_out1 <= Delay11_out1 WHEN switch_compare_1_11 = '0' ELSE
      in11_signed;

  
  switch_compare_1_12 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in12_signed <= signed(in12);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay12_out1 <= Switch12_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  Switch12_out1 <= Delay12_out1 WHEN switch_compare_1_12 = '0' ELSE
      in12_signed;

  
  switch_compare_1_13 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in13_signed <= signed(in13);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay13_out1 <= Switch13_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch13_out1 <= Delay13_out1 WHEN switch_compare_1_13 = '0' ELSE
      in13_signed;

  
  switch_compare_1_14 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in14_signed <= signed(in14);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay14_out1 <= Switch14_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch14_out1 <= Delay14_out1 WHEN switch_compare_1_14 = '0' ELSE
      in14_signed;

  
  switch_compare_1_15 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in15_signed <= signed(in15);

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay15_out1 <= Switch15_out1;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  
  Switch15_out1 <= Delay15_out1 WHEN switch_compare_1_15 = '0' ELSE
      in15_signed;

  
  switch_compare_1_16 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in16_signed <= signed(in16);

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay16_out1 <= Switch16_out1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Switch16_out1 <= Delay16_out1 WHEN switch_compare_1_16 = '0' ELSE
      in16_signed;

  
  switch_compare_1_17 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in17_signed <= signed(in17);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay17_out1 <= Switch17_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  Switch17_out1 <= Delay17_out1 WHEN switch_compare_1_17 = '0' ELSE
      in17_signed;

  
  switch_compare_1_18 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in18_signed <= signed(in18);

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay18_out1 <= Switch18_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Switch18_out1 <= Delay18_out1 WHEN switch_compare_1_18 = '0' ELSE
      in18_signed;

  
  switch_compare_1_19 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in19_signed <= signed(in19);

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay19_out1 <= Switch19_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  Switch19_out1 <= Delay19_out1 WHEN switch_compare_1_19 = '0' ELSE
      in19_signed;

  
  switch_compare_1_20 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in20_signed <= signed(in20);

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay20_out1 <= Switch20_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  
  Switch20_out1 <= Delay20_out1 WHEN switch_compare_1_20 = '0' ELSE
      in20_signed;

  
  switch_compare_1_21 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in21_signed <= signed(in21);

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay21_out1 <= Switch21_out1;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  
  Switch21_out1 <= Delay21_out1 WHEN switch_compare_1_21 = '0' ELSE
      in21_signed;

  
  switch_compare_1_22 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in22_signed <= signed(in22);

  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay22_out1 <= Switch22_out1;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  
  Switch22_out1 <= Delay22_out1 WHEN switch_compare_1_22 = '0' ELSE
      in22_signed;

  
  switch_compare_1_23 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in23_signed <= signed(in23);

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay23_out1 <= Switch23_out1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  
  Switch23_out1 <= Delay23_out1 WHEN switch_compare_1_23 = '0' ELSE
      in23_signed;

  
  switch_compare_1_24 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in24_signed <= signed(in24);

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay24_out1 <= Switch24_out1;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  
  Switch24_out1 <= Delay24_out1 WHEN switch_compare_1_24 = '0' ELSE
      in24_signed;

  
  switch_compare_1_25 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in25_signed <= signed(in25);

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay25_out1 <= Switch25_out1;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  
  Switch25_out1 <= Delay25_out1 WHEN switch_compare_1_25 = '0' ELSE
      in25_signed;

  
  switch_compare_1_26 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in26_signed <= signed(in26);

  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay26_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay26_out1 <= Switch26_out1;
      END IF;
    END IF;
  END PROCESS Delay26_process;


  
  Switch26_out1 <= Delay26_out1 WHEN switch_compare_1_26 = '0' ELSE
      in26_signed;

  
  switch_compare_1_27 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in27_signed <= signed(in27);

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay27_out1 <= Switch27_out1;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  
  Switch27_out1 <= Delay27_out1 WHEN switch_compare_1_27 = '0' ELSE
      in27_signed;

  
  switch_compare_1_28 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in28_signed <= signed(in28);

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay28_out1 <= Switch28_out1;
      END IF;
    END IF;
  END PROCESS Delay28_process;


  
  Switch28_out1 <= Delay28_out1 WHEN switch_compare_1_28 = '0' ELSE
      in28_signed;

  
  switch_compare_1_29 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in29_signed <= signed(in29);

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay29_out1 <= Switch29_out1;
      END IF;
    END IF;
  END PROCESS Delay29_process;


  
  Switch29_out1 <= Delay29_out1 WHEN switch_compare_1_29 = '0' ELSE
      in29_signed;

  
  switch_compare_1_30 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in30_signed <= signed(in30);

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay30_out1 <= Switch30_out1;
      END IF;
    END IF;
  END PROCESS Delay30_process;


  
  Switch30_out1 <= Delay30_out1 WHEN switch_compare_1_30 = '0' ELSE
      in30_signed;

  
  switch_compare_1_31 <= '1' WHEN adc_trigger > '0' ELSE
      '0';

  in31_signed <= signed(in31);

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb_1_32_0 = '1' THEN
        Delay31_out1 <= Switch31_out1;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  
  Switch31_out1 <= Delay31_out1 WHEN switch_compare_1_31 = '0' ELSE
      in31_signed;

  c0_serial_0(0) <= Switch_out1;
  c0_serial_0(1) <= Switch1_out1;
  c0_serial_0(2) <= Switch2_out1;
  c0_serial_0(3) <= Switch3_out1;
  c0_serial_0(4) <= Switch4_out1;
  c0_serial_0(5) <= Switch5_out1;
  c0_serial_0(6) <= Switch6_out1;
  c0_serial_0(7) <= Switch7_out1;
  c0_serial_0(8) <= Switch8_out1;
  c0_serial_0(9) <= Switch9_out1;
  c0_serial_0(10) <= Switch10_out1;
  c0_serial_0(11) <= Switch11_out1;
  c0_serial_0(12) <= Switch12_out1;
  c0_serial_0(13) <= Switch13_out1;
  c0_serial_0(14) <= Switch14_out1;
  c0_serial_0(15) <= Switch15_out1;
  c0_serial_0(16) <= Switch16_out1;
  c0_serial_0(17) <= Switch17_out1;
  c0_serial_0(18) <= Switch18_out1;
  c0_serial_0(19) <= Switch19_out1;
  c0_serial_0(20) <= Switch20_out1;
  c0_serial_0(21) <= Switch21_out1;
  c0_serial_0(22) <= Switch22_out1;
  c0_serial_0(23) <= Switch23_out1;
  c0_serial_0(24) <= Switch24_out1;
  c0_serial_0(25) <= Switch25_out1;
  c0_serial_0(26) <= Switch26_out1;
  c0_serial_0(27) <= Switch27_out1;
  c0_serial_0(28) <= Switch28_out1;
  c0_serial_0(29) <= Switch29_out1;
  c0_serial_0(30) <= Switch30_out1;
  c0_serial_0(31) <= Switch31_out1;

  rcc_out <= c0_serial_0;

  ratechange_splitcomp_out0 <= rcc_out(0);

  ratechange_splitcomp_out1 <= rcc_out(1);

  ratechange_splitcomp_out2 <= rcc_out(2);

  ratechange_splitcomp_out3 <= rcc_out(3);

  ratechange_splitcomp_out4 <= rcc_out(4);

  ratechange_splitcomp_out5 <= rcc_out(5);

  ratechange_splitcomp_out6 <= rcc_out(6);

  ratechange_splitcomp_out7 <= rcc_out(7);

  ratechange_splitcomp_out8 <= rcc_out(8);

  ratechange_splitcomp_out9 <= rcc_out(9);

  ratechange_splitcomp_out10 <= rcc_out(10);

  ratechange_splitcomp_out11 <= rcc_out(11);

  ratechange_splitcomp_out12 <= rcc_out(12);

  ratechange_splitcomp_out13 <= rcc_out(13);

  ratechange_splitcomp_out14 <= rcc_out(14);

  ratechange_splitcomp_out15 <= rcc_out(15);

  ratechange_splitcomp_out16 <= rcc_out(16);

  ratechange_splitcomp_out17 <= rcc_out(17);

  ratechange_splitcomp_out18 <= rcc_out(18);

  ratechange_splitcomp_out19 <= rcc_out(19);

  ratechange_splitcomp_out20 <= rcc_out(20);

  ratechange_splitcomp_out21 <= rcc_out(21);

  ratechange_splitcomp_out22 <= rcc_out(22);

  ratechange_splitcomp_out23 <= rcc_out(23);

  ratechange_splitcomp_out24 <= rcc_out(24);

  ratechange_splitcomp_out25 <= rcc_out(25);

  ratechange_splitcomp_out26 <= rcc_out(26);

  ratechange_splitcomp_out27 <= rcc_out(27);

  ratechange_splitcomp_out28 <= rcc_out(28);

  ratechange_splitcomp_out29 <= rcc_out(29);

  ratechange_splitcomp_out30 <= rcc_out(30);

  ratechange_splitcomp_out31 <= rcc_out(31);

  
  Switch_out1_1 <= ratechange_splitcomp_out0 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17 WHEN counterSig = to_unsigned(16#11#, 5) ELSE
      ratechange_splitcomp_out18 WHEN counterSig = to_unsigned(16#12#, 5) ELSE
      ratechange_splitcomp_out19 WHEN counterSig = to_unsigned(16#13#, 5) ELSE
      ratechange_splitcomp_out20 WHEN counterSig = to_unsigned(16#14#, 5) ELSE
      ratechange_splitcomp_out21 WHEN counterSig = to_unsigned(16#15#, 5) ELSE
      ratechange_splitcomp_out22 WHEN counterSig = to_unsigned(16#16#, 5) ELSE
      ratechange_splitcomp_out23 WHEN counterSig = to_unsigned(16#17#, 5) ELSE
      ratechange_splitcomp_out24 WHEN counterSig = to_unsigned(16#18#, 5) ELSE
      ratechange_splitcomp_out25 WHEN counterSig = to_unsigned(16#19#, 5) ELSE
      ratechange_splitcomp_out26 WHEN counterSig = to_unsigned(16#1A#, 5) ELSE
      ratechange_splitcomp_out27 WHEN counterSig = to_unsigned(16#1B#, 5) ELSE
      ratechange_splitcomp_out28 WHEN counterSig = to_unsigned(16#1C#, 5) ELSE
      ratechange_splitcomp_out29 WHEN counterSig = to_unsigned(16#1D#, 5) ELSE
      ratechange_splitcomp_out30 WHEN counterSig = to_unsigned(16#1E#, 5) ELSE
      ratechange_splitcomp_out31;

  c0_serial_1(0) <= AXI_pu_conv_in;
  c0_serial_1(1) <= AXI_pu_conv_in1;
  c0_serial_1(2) <= AXI_pu_conv_in2;
  c0_serial_1(3) <= AXI_pu_conv_in3;
  c0_serial_1(4) <= AXI_pu_conv_in4;
  c0_serial_1(5) <= AXI_pu_conv_in5;
  c0_serial_1(6) <= AXI_pu_conv_in6;
  c0_serial_1(7) <= AXI_pu_conv_in7;
  c0_serial_1(8) <= AXI_pu_conv_in8;
  c0_serial_1(9) <= AXI_pu_conv_in9;
  c0_serial_1(10) <= AXI_pu_conv_in10;
  c0_serial_1(11) <= AXI_pu_conv_in11;
  c0_serial_1(12) <= AXI_pu_conv_in12;
  c0_serial_1(13) <= AXI_pu_conv_in13;
  c0_serial_1(14) <= AXI_pu_conv_in14;
  c0_serial_1(15) <= AXI_pu_conv_in15;
  c0_serial_1(16) <= AXI_pu_conv_in16;
  c0_serial_1(17) <= AXI_pu_conv_in17;
  c0_serial_1(18) <= AXI_pu_conv_in18;
  c0_serial_1(19) <= AXI_pu_conv_in19;
  c0_serial_1(20) <= AXI_pu_conv_in20;
  c0_serial_1(21) <= AXI_pu_conv_in21;
  c0_serial_1(22) <= AXI_pu_conv_in22;
  c0_serial_1(23) <= AXI_pu_conv_in23;
  c0_serial_1(24) <= AXI_pu_conv_in24;
  c0_serial_1(25) <= AXI_pu_conv_in25;
  c0_serial_1(26) <= AXI_pu_conv_in26;
  c0_serial_1(27) <= AXI_pu_conv_in27;
  c0_serial_1(28) <= AXI_pu_conv_in28;
  c0_serial_1(29) <= AXI_pu_conv_in29;
  c0_serial_1(30) <= AXI_pu_conv_in30;
  c0_serial_1(31) <= AXI_pu_conv_in31;

  outputgen: FOR k IN 0 TO 31 GENERATE
    c0_serial_1_1(k) <= unsigned(c0_serial_1(k));
  END GENERATE;

  rcc_out_1 <= c0_serial_1_1;

  ratechange_splitcomp_out0_1 <= rcc_out_1(0);

  ratechange_splitcomp_out1_1 <= rcc_out_1(1);

  ratechange_splitcomp_out2_1 <= rcc_out_1(2);

  ratechange_splitcomp_out3_1 <= rcc_out_1(3);

  ratechange_splitcomp_out4_1 <= rcc_out_1(4);

  ratechange_splitcomp_out5_1 <= rcc_out_1(5);

  ratechange_splitcomp_out6_1 <= rcc_out_1(6);

  ratechange_splitcomp_out7_1 <= rcc_out_1(7);

  ratechange_splitcomp_out8_1 <= rcc_out_1(8);

  ratechange_splitcomp_out9_1 <= rcc_out_1(9);

  ratechange_splitcomp_out10_1 <= rcc_out_1(10);

  ratechange_splitcomp_out11_1 <= rcc_out_1(11);

  ratechange_splitcomp_out12_1 <= rcc_out_1(12);

  ratechange_splitcomp_out13_1 <= rcc_out_1(13);

  ratechange_splitcomp_out14_1 <= rcc_out_1(14);

  ratechange_splitcomp_out15_1 <= rcc_out_1(15);

  ratechange_splitcomp_out16_1 <= rcc_out_1(16);

  ratechange_splitcomp_out17_1 <= rcc_out_1(17);

  ratechange_splitcomp_out18_1 <= rcc_out_1(18);

  ratechange_splitcomp_out19_1 <= rcc_out_1(19);

  ratechange_splitcomp_out20_1 <= rcc_out_1(20);

  ratechange_splitcomp_out21_1 <= rcc_out_1(21);

  ratechange_splitcomp_out22_1 <= rcc_out_1(22);

  ratechange_splitcomp_out23_1 <= rcc_out_1(23);

  ratechange_splitcomp_out24_1 <= rcc_out_1(24);

  ratechange_splitcomp_out25_1 <= rcc_out_1(25);

  ratechange_splitcomp_out26_1 <= rcc_out_1(26);

  ratechange_splitcomp_out27_1 <= rcc_out_1(27);

  ratechange_splitcomp_out28_1 <= rcc_out_1(28);

  ratechange_splitcomp_out29_1 <= rcc_out_1(29);

  ratechange_splitcomp_out30_1 <= rcc_out_1(30);

  ratechange_splitcomp_out31_1 <= rcc_out_1(31);

  
  AXI_pu_conv_in_1 <= ratechange_splitcomp_out0_1 WHEN counterSig = to_unsigned(16#00#, 5) ELSE
      ratechange_splitcomp_out1_1 WHEN counterSig = to_unsigned(16#01#, 5) ELSE
      ratechange_splitcomp_out2_1 WHEN counterSig = to_unsigned(16#02#, 5) ELSE
      ratechange_splitcomp_out3_1 WHEN counterSig = to_unsigned(16#03#, 5) ELSE
      ratechange_splitcomp_out4_1 WHEN counterSig = to_unsigned(16#04#, 5) ELSE
      ratechange_splitcomp_out5_1 WHEN counterSig = to_unsigned(16#05#, 5) ELSE
      ratechange_splitcomp_out6_1 WHEN counterSig = to_unsigned(16#06#, 5) ELSE
      ratechange_splitcomp_out7_1 WHEN counterSig = to_unsigned(16#07#, 5) ELSE
      ratechange_splitcomp_out8_1 WHEN counterSig = to_unsigned(16#08#, 5) ELSE
      ratechange_splitcomp_out9_1 WHEN counterSig = to_unsigned(16#09#, 5) ELSE
      ratechange_splitcomp_out10_1 WHEN counterSig = to_unsigned(16#0A#, 5) ELSE
      ratechange_splitcomp_out11_1 WHEN counterSig = to_unsigned(16#0B#, 5) ELSE
      ratechange_splitcomp_out12_1 WHEN counterSig = to_unsigned(16#0C#, 5) ELSE
      ratechange_splitcomp_out13_1 WHEN counterSig = to_unsigned(16#0D#, 5) ELSE
      ratechange_splitcomp_out14_1 WHEN counterSig = to_unsigned(16#0E#, 5) ELSE
      ratechange_splitcomp_out15_1 WHEN counterSig = to_unsigned(16#0F#, 5) ELSE
      ratechange_splitcomp_out16_1 WHEN counterSig = to_unsigned(16#10#, 5) ELSE
      ratechange_splitcomp_out17_1 WHEN counterSig = to_unsigned(16#11#, 5) ELSE
      ratechange_splitcomp_out18_1 WHEN counterSig = to_unsigned(16#12#, 5) ELSE
      ratechange_splitcomp_out19_1 WHEN counterSig = to_unsigned(16#13#, 5) ELSE
      ratechange_splitcomp_out20_1 WHEN counterSig = to_unsigned(16#14#, 5) ELSE
      ratechange_splitcomp_out21_1 WHEN counterSig = to_unsigned(16#15#, 5) ELSE
      ratechange_splitcomp_out22_1 WHEN counterSig = to_unsigned(16#16#, 5) ELSE
      ratechange_splitcomp_out23_1 WHEN counterSig = to_unsigned(16#17#, 5) ELSE
      ratechange_splitcomp_out24_1 WHEN counterSig = to_unsigned(16#18#, 5) ELSE
      ratechange_splitcomp_out25_1 WHEN counterSig = to_unsigned(16#19#, 5) ELSE
      ratechange_splitcomp_out26_1 WHEN counterSig = to_unsigned(16#1A#, 5) ELSE
      ratechange_splitcomp_out27_1 WHEN counterSig = to_unsigned(16#1B#, 5) ELSE
      ratechange_splitcomp_out28_1 WHEN counterSig = to_unsigned(16#1C#, 5) ELSE
      ratechange_splitcomp_out29_1 WHEN counterSig = to_unsigned(16#1D#, 5) ELSE
      ratechange_splitcomp_out30_1 WHEN counterSig = to_unsigned(16#1E#, 5) ELSE
      ratechange_splitcomp_out31_1;

  Product_cast <= signed(resize(AXI_pu_conv_in_1, 19));
  Product_mul_temp <= Switch_out1_1 * Product_cast;
  Product_out1 <= Product_mul_temp(44 DOWNTO 0);

  Product0_deserializer_tapDelayComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product0_deserializer_tapout <= (OTHERS => to_signed(0, 45));
      ELSIF enb = '1' AND Product0_deserializer_tapDelayEn_1 = '1' THEN
        Product0_deserializer_tapout(30) <= Product_out1;
        Product0_deserializer_tapout(0 TO 29) <= Product0_deserializer_tapout(1 TO 30);
      END IF;
    END IF;
  END PROCESS Product0_deserializer_tapDelayComp_process;


  Product0_deserializer_muxOut(0) <= Product0_deserializer_tapout(0);
  Product0_deserializer_muxOut(1) <= Product0_deserializer_tapout(1);
  Product0_deserializer_muxOut(2) <= Product0_deserializer_tapout(2);
  Product0_deserializer_muxOut(3) <= Product0_deserializer_tapout(3);
  Product0_deserializer_muxOut(4) <= Product0_deserializer_tapout(4);
  Product0_deserializer_muxOut(5) <= Product0_deserializer_tapout(5);
  Product0_deserializer_muxOut(6) <= Product0_deserializer_tapout(6);
  Product0_deserializer_muxOut(7) <= Product0_deserializer_tapout(7);
  Product0_deserializer_muxOut(8) <= Product0_deserializer_tapout(8);
  Product0_deserializer_muxOut(9) <= Product0_deserializer_tapout(9);
  Product0_deserializer_muxOut(10) <= Product0_deserializer_tapout(10);
  Product0_deserializer_muxOut(11) <= Product0_deserializer_tapout(11);
  Product0_deserializer_muxOut(12) <= Product0_deserializer_tapout(12);
  Product0_deserializer_muxOut(13) <= Product0_deserializer_tapout(13);
  Product0_deserializer_muxOut(14) <= Product0_deserializer_tapout(14);
  Product0_deserializer_muxOut(15) <= Product0_deserializer_tapout(15);
  Product0_deserializer_muxOut(16) <= Product0_deserializer_tapout(16);
  Product0_deserializer_muxOut(17) <= Product0_deserializer_tapout(17);
  Product0_deserializer_muxOut(18) <= Product0_deserializer_tapout(18);
  Product0_deserializer_muxOut(19) <= Product0_deserializer_tapout(19);
  Product0_deserializer_muxOut(20) <= Product0_deserializer_tapout(20);
  Product0_deserializer_muxOut(21) <= Product0_deserializer_tapout(21);
  Product0_deserializer_muxOut(22) <= Product0_deserializer_tapout(22);
  Product0_deserializer_muxOut(23) <= Product0_deserializer_tapout(23);
  Product0_deserializer_muxOut(24) <= Product0_deserializer_tapout(24);
  Product0_deserializer_muxOut(25) <= Product0_deserializer_tapout(25);
  Product0_deserializer_muxOut(26) <= Product0_deserializer_tapout(26);
  Product0_deserializer_muxOut(27) <= Product0_deserializer_tapout(27);
  Product0_deserializer_muxOut(28) <= Product0_deserializer_tapout(28);
  Product0_deserializer_muxOut(29) <= Product0_deserializer_tapout(29);
  Product0_deserializer_muxOut(30) <= Product0_deserializer_tapout(30);
  Product0_deserializer_muxOut(31) <= Product_out1;

  Product0_deserializer_regComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        c0_serialOut_0 <= (OTHERS => to_signed(0, 45));
      ELSIF enb = '1' AND Product0_deserializer_innerRegEn = '1' THEN
        c0_serialOut_0 <= Product0_deserializer_muxOut;
      END IF;
    END IF;
  END PROCESS Product0_deserializer_regComp_process;


  Product_out1_1 <= c0_serialOut_0(0);

  Product_out1_2 <= Product_out1_1(35 DOWNTO 18);

  out_rsvd <= std_logic_vector(Product_out1_2);

  Product1_out1 <= c0_serialOut_0(1);

  Product1_out1_1 <= Product1_out1(35 DOWNTO 18);

  out1 <= std_logic_vector(Product1_out1_1);

  Product2_out1 <= c0_serialOut_0(2);

  Product2_out1_1 <= Product2_out1(35 DOWNTO 18);

  out2 <= std_logic_vector(Product2_out1_1);

  Product3_out1 <= c0_serialOut_0(3);

  Product3_out1_1 <= Product3_out1(35 DOWNTO 18);

  out3 <= std_logic_vector(Product3_out1_1);

  Product4_out1 <= c0_serialOut_0(4);

  Product4_out1_1 <= Product4_out1(35 DOWNTO 18);

  out4 <= std_logic_vector(Product4_out1_1);

  Product5_out1 <= c0_serialOut_0(5);

  Product5_out1_1 <= Product5_out1(35 DOWNTO 18);

  out5 <= std_logic_vector(Product5_out1_1);

  Product6_out1 <= c0_serialOut_0(6);

  Product6_out1_1 <= Product6_out1(35 DOWNTO 18);

  out6 <= std_logic_vector(Product6_out1_1);

  Product7_out1 <= c0_serialOut_0(7);

  Product7_out1_1 <= Product7_out1(35 DOWNTO 18);

  out7 <= std_logic_vector(Product7_out1_1);

  Product8_out1 <= c0_serialOut_0(8);

  Product8_out1_1 <= Product8_out1(35 DOWNTO 18);

  out8 <= std_logic_vector(Product8_out1_1);

  Product9_out1 <= c0_serialOut_0(9);

  Product9_out1_1 <= Product9_out1(35 DOWNTO 18);

  out9 <= std_logic_vector(Product9_out1_1);

  Product10_out1 <= c0_serialOut_0(10);

  Product10_out1_1 <= Product10_out1(35 DOWNTO 18);

  out10 <= std_logic_vector(Product10_out1_1);

  Product11_out1 <= c0_serialOut_0(11);

  Product11_out1_1 <= Product11_out1(35 DOWNTO 18);

  out11 <= std_logic_vector(Product11_out1_1);

  Product12_out1 <= c0_serialOut_0(12);

  Product12_out1_1 <= Product12_out1(35 DOWNTO 18);

  out12 <= std_logic_vector(Product12_out1_1);

  Product13_out1 <= c0_serialOut_0(13);

  Product13_out1_1 <= Product13_out1(35 DOWNTO 18);

  out13 <= std_logic_vector(Product13_out1_1);

  Product14_out1 <= c0_serialOut_0(14);

  Product14_out1_1 <= Product14_out1(35 DOWNTO 18);

  out14 <= std_logic_vector(Product14_out1_1);

  Product15_out1 <= c0_serialOut_0(15);

  Product15_out1_1 <= Product15_out1(35 DOWNTO 18);

  out15 <= std_logic_vector(Product15_out1_1);

  Product16_out1 <= c0_serialOut_0(16);

  Product16_out1_1 <= Product16_out1(35 DOWNTO 18);

  out16 <= std_logic_vector(Product16_out1_1);

  Product17_out1 <= c0_serialOut_0(17);

  Product17_out1_1 <= Product17_out1(35 DOWNTO 18);

  out17 <= std_logic_vector(Product17_out1_1);

  Product24_out1 <= c0_serialOut_0(18);

  Product24_out1_1 <= Product24_out1(35 DOWNTO 18);

  out18 <= std_logic_vector(Product24_out1_1);

  Product25_out1 <= c0_serialOut_0(19);

  Product25_out1_1 <= Product25_out1(35 DOWNTO 18);

  out19 <= std_logic_vector(Product25_out1_1);

  Product26_out1 <= c0_serialOut_0(20);

  Product26_out1_1 <= Product26_out1(35 DOWNTO 18);

  out20 <= std_logic_vector(Product26_out1_1);

  Product27_out1 <= c0_serialOut_0(21);

  Product27_out1_1 <= Product27_out1(35 DOWNTO 18);

  out21 <= std_logic_vector(Product27_out1_1);

  Product28_out1 <= c0_serialOut_0(22);

  Product28_out1_1 <= Product28_out1(35 DOWNTO 18);

  out22 <= std_logic_vector(Product28_out1_1);

  Product29_out1 <= c0_serialOut_0(23);

  Product29_out1_1 <= Product29_out1(35 DOWNTO 18);

  out23 <= std_logic_vector(Product29_out1_1);

  Product30_out1 <= c0_serialOut_0(24);

  Product30_out1_1 <= Product30_out1(35 DOWNTO 18);

  out24 <= std_logic_vector(Product30_out1_1);

  Product31_out1 <= c0_serialOut_0(25);

  Product31_out1_1 <= Product31_out1(35 DOWNTO 18);

  out25 <= std_logic_vector(Product31_out1_1);

  Product18_out1 <= c0_serialOut_0(26);

  Product18_out1_1 <= Product18_out1(35 DOWNTO 18);

  out26 <= std_logic_vector(Product18_out1_1);

  Product19_out1 <= c0_serialOut_0(27);

  Product19_out1_1 <= Product19_out1(35 DOWNTO 18);

  out27 <= std_logic_vector(Product19_out1_1);

  Product20_out1 <= c0_serialOut_0(28);

  Product20_out1_1 <= Product20_out1(35 DOWNTO 18);

  out28 <= std_logic_vector(Product20_out1_1);

  Product21_out1 <= c0_serialOut_0(29);

  Product21_out1_1 <= Product21_out1(35 DOWNTO 18);

  out29 <= std_logic_vector(Product21_out1_1);

  Product22_out1 <= c0_serialOut_0(30);

  Product22_out1_1 <= Product22_out1(35 DOWNTO 18);

  out30 <= std_logic_vector(Product22_out1_1);

  Product23_out1 <= c0_serialOut_0(31);

  Product23_out1_1 <= Product23_out1(35 DOWNTO 18);

  out31 <= std_logic_vector(Product23_out1_1);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        adc_trigger_1 <= '0';
      ELSIF enb_1_32_0 = '1' THEN
        adc_trigger_1 <= adc_trigger;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  ce_out <= enb_1_32_1;

  out_valid <= adc_trigger_1;

END rtl;

