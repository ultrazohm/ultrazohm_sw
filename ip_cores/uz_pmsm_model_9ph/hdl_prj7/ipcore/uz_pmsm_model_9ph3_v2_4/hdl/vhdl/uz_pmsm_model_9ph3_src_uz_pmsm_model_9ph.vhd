-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj7/hdlsrc/uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph.vhd
-- Created: 2022-06-04 17:38:56
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 5e-10
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 200x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- outputs_0                     ce_out        2e-06
-- outputs_1                     ce_out        2e-06
-- outputs_2                     ce_out        2e-06
-- i_abc_ps_0                    ce_out        2e-06
-- i_abc_ps_1                    ce_out        2e-06
-- i_abc_ps_2                    ce_out        2e-06
-- i_abc_ps_3                    ce_out        2e-06
-- i_abc_ps_4                    ce_out        2e-06
-- i_abc_ps_5                    ce_out        2e-06
-- i_abc_ps_6                    ce_out        2e-06
-- i_abc_ps_7                    ce_out        2e-06
-- i_abc_ps_8                    ce_out        2e-06
-- i_abc1_pl_0                   ce_out        2e-06
-- i_abc1_pl_1                   ce_out        2e-06
-- i_abc1_pl_2                   ce_out        2e-06
-- i_abc2_pl_0                   ce_out        2e-06
-- i_abc2_pl_1                   ce_out        2e-06
-- i_abc2_pl_2                   ce_out        2e-06
-- i_abc3_pl_0                   ce_out        2e-06
-- i_abc3_pl_1                   ce_out        2e-06
-- i_abc3_pl_2                   ce_out        2e-06
-- out_theta_el                  ce_out        2e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph
-- Source Path: uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Model_Parameter_reset_integrators :   IN    std_logic;
        Model_Parameter_simulate_mechanical :   IN    std_logic;
        Model_Parameter_switch_pspl       :   IN    std_logic;
        Model_Parameter_control_dq_abc    :   IN    std_logic;
        physical_parameters_1_J           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_mu            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_M_R0          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_d         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_q         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_R_1           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_polepair      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_psi_pm        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z3          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_0                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        u_abc1_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        in_theta_el                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        pwm_trig                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        outputs_0                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_1                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_2                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_0                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_2                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_3                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_4                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_5                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_6                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_7                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_8                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc1_pl_0                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc1_pl_1                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc1_pl_2                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc2_pl_0                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc2_pl_1                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc2_pl_2                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc3_pl_0                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc3_pl_1                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc3_pl_2                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        out_theta_el                      :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
        );
END uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph;


ARCHITECTURE rtl OF uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb_1_20_0                      :   OUT   std_logic;
          enb_1_4000_0                    :   OUT   std_logic;
          enb_1_4000_1                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          In1                             :   IN    vector_of_std_logic_vector25(0 TO 2);  -- sfix25_En12 [3]
          Out1                            :   OUT   vector_of_std_logic_vector25(0 TO 2)  -- sfix25_En12 [3]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          In1                             :   IN    vector_of_std_logic_vector25(0 TO 2);  -- sfix25_En12 [3]
          Out1                            :   OUT   vector_of_std_logic_vector25(0 TO 2)  -- sfix25_En12 [3]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          In1                             :   IN    vector_of_std_logic_vector25(0 TO 2);  -- sfix25_En12 [3]
          Out1                            :   OUT   vector_of_std_logic_vector25(0 TO 2)  -- sfix25_En12 [3]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_nfp_sincos_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out2                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_Transformation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          in_rsvd                         :   IN    vector_of_std_logic_vector25(0 TO 8);  -- sfix25_En12 [9]
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          out_rsvd                        :   OUT   vector_of_std_logic_vector32(0 TO 8)  -- single [9]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_dq_model_9ph
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          enb_1_4000_1                    :   IN    std_logic;
          load_torque                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          alphareset_integrators          :   IN    std_logic;
          alphasimulate_mechanical        :   IN    std_logic;
          omega_mech                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          voltage_input_dq                :   IN    vector_of_std_logic_vector32(0 TO 8);  -- single [9]
          physical_parameters_1_J         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_1_L_d       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_1_L_q       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_R_1         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_polepair    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_psi_pm      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_L_z1        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_L_z2        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_L_x1        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_L_y1        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_L_x2        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_L_y2        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          physical_parameters_L_z3        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          theta_el                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          currents_dq_output              :   OUT   vector_of_std_logic_vector32(0 TO 8);  -- single [9]
          M_Mi                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          omega_out                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_Transformation1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          in_rsvd                         :   IN    vector_of_std_logic_vector32(0 TO 8);  -- single [9]
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          enb_counter                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          out_rsvd                        :   OUT   vector_of_std_logic_vector25(0 TO 8)  -- sfix25_En12 [9]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_nfp_convert_single_to_sfix_25_En12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph_tc
    USE ENTITY work.uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph_tc(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage
    USE ENTITY work.uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage1
    USE ENTITY work.uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage1(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage2
    USE ENTITY work.uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage2(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_nfp_sincos_single
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_sincos_single(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_Transformation
    USE ENTITY work.uz_pmsm_model_9ph3_src_Transformation(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_dq_model_9ph
    USE ENTITY work.uz_pmsm_model_9ph3_src_dq_model_9ph(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_Transformation1
    USE ENTITY work.uz_pmsm_model_9ph3_src_Transformation1(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_nfp_convert_single_to_sfix_25_En12
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_convert_single_to_sfix_25_En12(rtl);

  -- Signals
  SIGNAL enb_1_4000_0                     : std_logic;
  SIGNAL enb_1_20_0                       : std_logic;
  SIGNAL enb_1_4000_1                     : std_logic;
  SIGNAL input                            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL input_2                          : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL u_abc1_pl_0_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc1_pl_1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc1_pl_2_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_out_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_1_reg                      : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay_out_2                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_out_3                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_1_reg_1                    : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay_1_reg_2                    : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay_1_reg_next                 : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay_1_reg_next_1               : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay_1_reg_next_2               : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay_out1                       : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay_out1_1                     : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay_out1_2                     : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Line_Line_to_Phase_voltage_out1_signed : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL u_abc2_pl_0_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc2_pl_1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc2_pl_2_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_out_1                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_1_reg                     : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay2_out_2                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_out_3                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_1_reg_1                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay2_1_reg_2                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay2_1_reg_next                : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay2_1_reg_next_1              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay2_1_reg_next_2              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay2_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay2_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay2_out1_2                    : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Line_Line_to_Phase_voltage1_out1_signed : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL u_abc3_pl_0_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc3_pl_1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc3_pl_2_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_out_1                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_1_reg                     : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay3_out_2                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_out_3                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_1_reg_1                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay3_1_reg_2                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay3_1_reg_next                : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay3_1_reg_next_1              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay3_1_reg_next_2              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay3_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay3_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay3_out1_2                    : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Line_Line_to_Phase_voltage2_out1_signed : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Mux4_out1                        : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL in_theta_el_signed               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay1_reg                       : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay1_reg_next                  : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay1_out1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay1_out1_1                    : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Data_Type_Conversion37_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sine_Cosine_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sine_Cosine_out2                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Transformation_out1              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL dq_model_9ph_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dq_model_9ph_out2                : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL torque                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_mech                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL torque_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL torque_2                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_mech_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_mech_2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux1_out1                        : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL t4_bypass_reg                    : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL t4_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Mux1_out1_1                      : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL Unit_Delay_out1_1                : std_logic;
  SIGNAL Unit_Delay_out1_2                : std_logic;
  SIGNAL ctr_199_sig                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Transformation1_out1_signed      : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL Data_Type_Conversion5_out1       : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Switch_out1                      : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Switch_out1_1                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Delay9_bypass_reg                : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Delay9_bypass_reg_next           : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Switch_out1_2                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Delay9_out1                      : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Delay9_out1_1                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Switch_out1_4                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t6_bypass_reg                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t6_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Switch_out1_5                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Demux1_out1                      : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Demux1_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out1_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out1_3                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay4_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay4_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2                      : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Demux1_out2_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2_3                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay5_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay5_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3                      : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Demux1_out3_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3_3                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay6_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay6_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Data_Type_Conversion1_out1_signed : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Data_Type_Conversion1_out1_1     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Data_Type_Conversion1_out1_2     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch7_reg                  : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch7_reg_next             : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Data_Type_Conversion1_out1_3     : signed(24 DOWNTO 0);  -- sfix25_En12

BEGIN
  -- Outputs

  u_uz_pmsm_model_9ph_tc : uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb_1_20_0 => enb_1_20_0,
              enb_1_4000_0 => enb_1_4000_0,
              enb_1_4000_1 => enb_1_4000_1
              );

  u_Line_Line_to_Phase_voltage : uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              In1 => Delay_out1_2,  -- sfix25_En12 [3]
              Out1 => Line_Line_to_Phase_voltage_out1_signed  -- sfix25_En12 [3]
              );

  u_Line_Line_to_Phase_voltage1 : uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              In1 => Delay2_out1_2,  -- sfix25_En12 [3]
              Out1 => Line_Line_to_Phase_voltage1_out1_signed  -- sfix25_En12 [3]
              );

  u_Line_Line_to_Phase_voltage2 : uz_pmsm_model_9ph3_src_Line_Line_to_Phase_voltage2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              In1 => Delay3_out1_2,  -- sfix25_En12 [3]
              Out1 => Line_Line_to_Phase_voltage2_out1_signed  -- sfix25_En12 [3]
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Delay1_out1_1,  -- sfix25_En12
              nfp_out => Data_Type_Conversion37_out1  -- single
              );

  u_nfp_sincos_comp : uz_pmsm_model_9ph3_src_nfp_sincos_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Data_Type_Conversion37_out1,  -- single
              nfp_out1 => Sine_Cosine_out1,  -- single
              nfp_out2 => Sine_Cosine_out2  -- single
              );

  u_Transformation : uz_pmsm_model_9ph3_src_Transformation
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              in_rsvd => Mux4_out1,  -- sfix25_En12 [9]
              sin_theta_el => Sine_Cosine_out1,  -- single
              cos_theta_el => Sine_Cosine_out2,  -- single
              out_rsvd => Transformation_out1  -- single [9]
              );

  u_dq_model_9ph : uz_pmsm_model_9ph3_src_dq_model_9ph
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              enb_1_4000_1 => enb_1_4000_1,
              load_torque => input_2(0),  -- single
              alphareset_integrators => Model_Parameter_reset_integrators,
              alphasimulate_mechanical => Model_Parameter_simulate_mechanical,
              omega_mech => input_2(1),  -- single
              voltage_input_dq => Transformation_out1,  -- single [9]
              physical_parameters_1_J => physical_parameters_1_J,  -- single
              physical_parameters_1_L_d => physical_parameters_1_L_d,  -- single
              physical_parameters_1_L_q => physical_parameters_1_L_q,  -- single
              physical_parameters_R_1 => physical_parameters_R_1,  -- single
              physical_parameters_polepair => physical_parameters_polepair,  -- single
              physical_parameters_psi_pm => physical_parameters_psi_pm,  -- single
              physical_parameters_L_z1 => physical_parameters_L_z1,  -- single
              physical_parameters_L_z2 => physical_parameters_L_z2,  -- single
              physical_parameters_L_x1 => physical_parameters_L_x1,  -- single
              physical_parameters_L_y1 => physical_parameters_L_y1,  -- single
              physical_parameters_L_x2 => physical_parameters_L_x2,  -- single
              physical_parameters_L_y2 => physical_parameters_L_y2,  -- single
              physical_parameters_L_z3 => physical_parameters_L_z3,  -- single
              theta_el => dq_model_9ph_out1,  -- single
              currents_dq_output => dq_model_9ph_out2,  -- single [9]
              M_Mi => torque,  -- single
              omega_out => omega_mech  -- single
              );

  u_Transformation1 : uz_pmsm_model_9ph3_src_Transformation1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              in_rsvd => dq_model_9ph_out2,  -- single [9]
              sin_theta_el => Sine_Cosine_out1,  -- single
              cos_theta_el => Sine_Cosine_out2,  -- single
              enb_counter => std_logic_vector(ctr_199_sig),  -- ufix8
              out_rsvd => Transformation1_out1_signed  -- sfix25_En12 [9]
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_1 : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Transformation1_out1_signed(0),  -- sfix25_En12
              nfp_out => Data_Type_Conversion5_out1(0)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_2 : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Transformation1_out1_signed(1),  -- sfix25_En12
              nfp_out => Data_Type_Conversion5_out1(1)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_3 : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Transformation1_out1_signed(2),  -- sfix25_En12
              nfp_out => Data_Type_Conversion5_out1(2)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_4 : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Transformation1_out1_signed(3),  -- sfix25_En12
              nfp_out => Data_Type_Conversion5_out1(3)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_5 : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Transformation1_out1_signed(4),  -- sfix25_En12
              nfp_out => Data_Type_Conversion5_out1(4)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_6 : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Transformation1_out1_signed(5),  -- sfix25_En12
              nfp_out => Data_Type_Conversion5_out1(5)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_7 : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Transformation1_out1_signed(6),  -- sfix25_En12
              nfp_out => Data_Type_Conversion5_out1(6)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_8 : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Transformation1_out1_signed(7),  -- sfix25_En12
              nfp_out => Data_Type_Conversion5_out1(7)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_9 : uz_pmsm_model_9ph3_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Transformation1_out1_signed(8),  -- sfix25_En12
              nfp_out => Data_Type_Conversion5_out1(8)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12 : uz_pmsm_model_9ph3_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => dq_model_9ph_out1,  -- single
              nfp_out => Data_Type_Conversion1_out1  -- sfix25_En12
              );

  input(0) <= input_0;
  input(1) <= input_1;

  input_2 <= input;

  u_abc1_pl_0_1 <= signed(u_abc1_pl_0);

  Delay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_1_reg(0) <= to_signed(16#0000000#, 25);
        Delay_1_reg(1) <= to_signed(16#0000000#, 25);
        Delay_1_reg_1(0) <= to_signed(16#0000000#, 25);
        Delay_1_reg_1(1) <= to_signed(16#0000000#, 25);
        Delay_1_reg_2(0) <= to_signed(16#0000000#, 25);
        Delay_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay_1_reg(0) <= Delay_1_reg_next(0);
        Delay_1_reg(1) <= Delay_1_reg_next(1);
        Delay_1_reg_1(0) <= Delay_1_reg_next_1(0);
        Delay_1_reg_1(1) <= Delay_1_reg_next_1(1);
        Delay_1_reg_2(0) <= Delay_1_reg_next_2(0);
        Delay_1_reg_2(1) <= Delay_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay_1_process;

  Delay_1_reg_next(0) <= u_abc1_pl_0_1;
  Delay_1_reg_next(1) <= Delay_1_reg(0);
  Delay_out_1 <= Delay_1_reg(1);
  Delay_1_reg_next_1(0) <= u_abc1_pl_1_1;
  Delay_1_reg_next_1(1) <= Delay_1_reg_1(0);
  Delay_out_2 <= Delay_1_reg_1(1);
  Delay_1_reg_next_2(0) <= u_abc1_pl_2_1;
  Delay_1_reg_next_2(1) <= Delay_1_reg_2(0);
  Delay_out_3 <= Delay_1_reg_2(1);

  u_abc1_pl_1_1 <= signed(u_abc1_pl_1);

  u_abc1_pl_2_1 <= signed(u_abc1_pl_2);

  Delay_out1(0) <= Delay_out_1;
  Delay_out1(1) <= Delay_out_2;
  Delay_out1(2) <= Delay_out_3;

  Delay_out1_1 <= Delay_out1;

  outputgen5: FOR k IN 0 TO 2 GENERATE
    Delay_out1_2(k) <= std_logic_vector(Delay_out1_1(k));
  END GENERATE;

  u_abc2_pl_0_1 <= signed(u_abc2_pl_0);

  Delay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_1_reg(0) <= to_signed(16#0000000#, 25);
        Delay2_1_reg(1) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_1(0) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_1(1) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_2(0) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay2_1_reg(0) <= Delay2_1_reg_next(0);
        Delay2_1_reg(1) <= Delay2_1_reg_next(1);
        Delay2_1_reg_1(0) <= Delay2_1_reg_next_1(0);
        Delay2_1_reg_1(1) <= Delay2_1_reg_next_1(1);
        Delay2_1_reg_2(0) <= Delay2_1_reg_next_2(0);
        Delay2_1_reg_2(1) <= Delay2_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay2_1_process;

  Delay2_1_reg_next(0) <= u_abc2_pl_0_1;
  Delay2_1_reg_next(1) <= Delay2_1_reg(0);
  Delay2_out_1 <= Delay2_1_reg(1);
  Delay2_1_reg_next_1(0) <= u_abc2_pl_1_1;
  Delay2_1_reg_next_1(1) <= Delay2_1_reg_1(0);
  Delay2_out_2 <= Delay2_1_reg_1(1);
  Delay2_1_reg_next_2(0) <= u_abc2_pl_2_1;
  Delay2_1_reg_next_2(1) <= Delay2_1_reg_2(0);
  Delay2_out_3 <= Delay2_1_reg_2(1);

  u_abc2_pl_1_1 <= signed(u_abc2_pl_1);

  u_abc2_pl_2_1 <= signed(u_abc2_pl_2);

  Delay2_out1(0) <= Delay2_out_1;
  Delay2_out1(1) <= Delay2_out_2;
  Delay2_out1(2) <= Delay2_out_3;

  Delay2_out1_1 <= Delay2_out1;

  outputgen4: FOR k IN 0 TO 2 GENERATE
    Delay2_out1_2(k) <= std_logic_vector(Delay2_out1_1(k));
  END GENERATE;

  u_abc3_pl_0_1 <= signed(u_abc3_pl_0);

  Delay3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_1_reg(0) <= to_signed(16#0000000#, 25);
        Delay3_1_reg(1) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_1(0) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_1(1) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_2(0) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay3_1_reg(0) <= Delay3_1_reg_next(0);
        Delay3_1_reg(1) <= Delay3_1_reg_next(1);
        Delay3_1_reg_1(0) <= Delay3_1_reg_next_1(0);
        Delay3_1_reg_1(1) <= Delay3_1_reg_next_1(1);
        Delay3_1_reg_2(0) <= Delay3_1_reg_next_2(0);
        Delay3_1_reg_2(1) <= Delay3_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay3_1_process;

  Delay3_1_reg_next(0) <= u_abc3_pl_0_1;
  Delay3_1_reg_next(1) <= Delay3_1_reg(0);
  Delay3_out_1 <= Delay3_1_reg(1);
  Delay3_1_reg_next_1(0) <= u_abc3_pl_1_1;
  Delay3_1_reg_next_1(1) <= Delay3_1_reg_1(0);
  Delay3_out_2 <= Delay3_1_reg_1(1);
  Delay3_1_reg_next_2(0) <= u_abc3_pl_2_1;
  Delay3_1_reg_next_2(1) <= Delay3_1_reg_2(0);
  Delay3_out_3 <= Delay3_1_reg_2(1);

  u_abc3_pl_1_1 <= signed(u_abc3_pl_1);

  u_abc3_pl_2_1 <= signed(u_abc3_pl_2);

  Delay3_out1(0) <= Delay3_out_1;
  Delay3_out1(1) <= Delay3_out_2;
  Delay3_out1(2) <= Delay3_out_3;

  Delay3_out1_1 <= Delay3_out1;

  outputgen3: FOR k IN 0 TO 2 GENERATE
    Delay3_out1_2(k) <= std_logic_vector(Delay3_out1_1(k));
  END GENERATE;

  Mux4_out1(0) <= Line_Line_to_Phase_voltage_out1_signed(0);
  Mux4_out1(1) <= Line_Line_to_Phase_voltage_out1_signed(1);
  Mux4_out1(2) <= Line_Line_to_Phase_voltage_out1_signed(2);
  Mux4_out1(3) <= Line_Line_to_Phase_voltage1_out1_signed(0);
  Mux4_out1(4) <= Line_Line_to_Phase_voltage1_out1_signed(1);
  Mux4_out1(5) <= Line_Line_to_Phase_voltage1_out1_signed(2);
  Mux4_out1(6) <= Line_Line_to_Phase_voltage2_out1_signed(0);
  Mux4_out1(7) <= Line_Line_to_Phase_voltage2_out1_signed(1);
  Mux4_out1(8) <= Line_Line_to_Phase_voltage2_out1_signed(2);

  in_theta_el_signed <= signed(in_theta_el);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg(0) <= to_signed(16#0000000#, 25);
        Delay1_reg(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay1_reg(0) <= Delay1_reg_next(0);
        Delay1_reg(1) <= Delay1_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);
  Delay1_reg_next(0) <= in_theta_el_signed;
  Delay1_reg_next(1) <= Delay1_reg(0);

  Delay1_out1_1 <= std_logic_vector(Delay1_out1);

  torque_1 <= torque;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        torque_2 <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        torque_2 <= torque_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  omega_mech_1 <= omega_mech;

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        omega_mech_2 <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        omega_mech_2 <= omega_mech_1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  Mux1_out1(0) <= torque_2;
  Mux1_out1(1) <= omega_mech_2;
  Mux1_out1(2) <= dq_model_9ph_out1;

  t4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t4_bypass_reg(0) <= X"00000000";
        t4_bypass_reg(1) <= X"00000000";
        t4_bypass_reg(2) <= X"00000000";
      ELSIF enb_1_4000_1 = '1' THEN
        t4_bypass_reg(0) <= t4_bypass_reg_next(0);
        t4_bypass_reg(1) <= t4_bypass_reg_next(1);
        t4_bypass_reg(2) <= t4_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t4_bypass_process;

  
  Mux1_out1_1(0) <= Mux1_out1(0) WHEN enb_1_4000_1 = '1' ELSE
      t4_bypass_reg(0);
  
  Mux1_out1_1(1) <= Mux1_out1(1) WHEN enb_1_4000_1 = '1' ELSE
      t4_bypass_reg(1);
  
  Mux1_out1_1(2) <= Mux1_out1(2) WHEN enb_1_4000_1 = '1' ELSE
      t4_bypass_reg(2);
  t4_bypass_reg_next(0) <= Mux1_out1(0);
  t4_bypass_reg_next(1) <= Mux1_out1(1);
  t4_bypass_reg_next(2) <= Mux1_out1(2);

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1 <= '0';
      ELSIF enb_1_4000_0 = '1' THEN
        Unit_Delay_out1 <= pwm_trig;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Unit_Delay_out1_1 <= Unit_Delay_out1;

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1_2 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Unit_Delay_out1_2 <= Unit_Delay_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 199
  ctr_199_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ctr_199_sig <= to_unsigned(16#00#, 8);
      ELSIF enb_1_20_0 = '1' THEN
        IF ctr_199_sig >= to_unsigned(16#C7#, 8) THEN 
          ctr_199_sig <= to_unsigned(16#00#, 8);
        ELSE 
          ctr_199_sig <= ctr_199_sig + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS ctr_199_process;



  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_out1_1(0) <= X"00000000";
        Switch_out1_1(1) <= X"00000000";
        Switch_out1_1(2) <= X"00000000";
        Switch_out1_1(3) <= X"00000000";
        Switch_out1_1(4) <= X"00000000";
        Switch_out1_1(5) <= X"00000000";
        Switch_out1_1(6) <= X"00000000";
        Switch_out1_1(7) <= X"00000000";
        Switch_out1_1(8) <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        Switch_out1_1(0) <= Switch_out1(0);
        Switch_out1_1(1) <= Switch_out1(1);
        Switch_out1_1(2) <= Switch_out1(2);
        Switch_out1_1(3) <= Switch_out1(3);
        Switch_out1_1(4) <= Switch_out1(4);
        Switch_out1_1(5) <= Switch_out1(5);
        Switch_out1_1(6) <= Switch_out1(6);
        Switch_out1_1(7) <= Switch_out1(7);
        Switch_out1_1(8) <= Switch_out1(8);
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_bypass_reg(0) <= X"00000000";
        Delay9_bypass_reg(1) <= X"00000000";
        Delay9_bypass_reg(2) <= X"00000000";
        Delay9_bypass_reg(3) <= X"00000000";
        Delay9_bypass_reg(4) <= X"00000000";
        Delay9_bypass_reg(5) <= X"00000000";
        Delay9_bypass_reg(6) <= X"00000000";
        Delay9_bypass_reg(7) <= X"00000000";
        Delay9_bypass_reg(8) <= X"00000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay9_bypass_reg(0) <= Delay9_bypass_reg_next(0);
        Delay9_bypass_reg(1) <= Delay9_bypass_reg_next(1);
        Delay9_bypass_reg(2) <= Delay9_bypass_reg_next(2);
        Delay9_bypass_reg(3) <= Delay9_bypass_reg_next(3);
        Delay9_bypass_reg(4) <= Delay9_bypass_reg_next(4);
        Delay9_bypass_reg(5) <= Delay9_bypass_reg_next(5);
        Delay9_bypass_reg(6) <= Delay9_bypass_reg_next(6);
        Delay9_bypass_reg(7) <= Delay9_bypass_reg_next(7);
        Delay9_bypass_reg(8) <= Delay9_bypass_reg_next(8);
      END IF;
    END IF;
  END PROCESS Delay9_bypass_process;

  
  Switch_out1_2(0) <= Switch_out1_1(0) WHEN enb_1_4000_1 = '1' ELSE
      Delay9_bypass_reg(0);
  
  Switch_out1_2(1) <= Switch_out1_1(1) WHEN enb_1_4000_1 = '1' ELSE
      Delay9_bypass_reg(1);
  
  Switch_out1_2(2) <= Switch_out1_1(2) WHEN enb_1_4000_1 = '1' ELSE
      Delay9_bypass_reg(2);
  
  Switch_out1_2(3) <= Switch_out1_1(3) WHEN enb_1_4000_1 = '1' ELSE
      Delay9_bypass_reg(3);
  
  Switch_out1_2(4) <= Switch_out1_1(4) WHEN enb_1_4000_1 = '1' ELSE
      Delay9_bypass_reg(4);
  
  Switch_out1_2(5) <= Switch_out1_1(5) WHEN enb_1_4000_1 = '1' ELSE
      Delay9_bypass_reg(5);
  
  Switch_out1_2(6) <= Switch_out1_1(6) WHEN enb_1_4000_1 = '1' ELSE
      Delay9_bypass_reg(6);
  
  Switch_out1_2(7) <= Switch_out1_1(7) WHEN enb_1_4000_1 = '1' ELSE
      Delay9_bypass_reg(7);
  
  Switch_out1_2(8) <= Switch_out1_1(8) WHEN enb_1_4000_1 = '1' ELSE
      Delay9_bypass_reg(8);
  Delay9_bypass_reg_next(0) <= Switch_out1_1(0);
  Delay9_bypass_reg_next(1) <= Switch_out1_1(1);
  Delay9_bypass_reg_next(2) <= Switch_out1_1(2);
  Delay9_bypass_reg_next(3) <= Switch_out1_1(3);
  Delay9_bypass_reg_next(4) <= Switch_out1_1(4);
  Delay9_bypass_reg_next(5) <= Switch_out1_1(5);
  Delay9_bypass_reg_next(6) <= Switch_out1_1(6);
  Delay9_bypass_reg_next(7) <= Switch_out1_1(7);
  Delay9_bypass_reg_next(8) <= Switch_out1_1(8);

  Delay9_out1 <= Switch_out1_2;

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_1(0) <= X"00000000";
        Delay9_out1_1(1) <= X"00000000";
        Delay9_out1_1(2) <= X"00000000";
        Delay9_out1_1(3) <= X"00000000";
        Delay9_out1_1(4) <= X"00000000";
        Delay9_out1_1(5) <= X"00000000";
        Delay9_out1_1(6) <= X"00000000";
        Delay9_out1_1(7) <= X"00000000";
        Delay9_out1_1(8) <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay9_out1_1(0) <= Delay9_out1(0);
        Delay9_out1_1(1) <= Delay9_out1(1);
        Delay9_out1_1(2) <= Delay9_out1(2);
        Delay9_out1_1(3) <= Delay9_out1(3);
        Delay9_out1_1(4) <= Delay9_out1(4);
        Delay9_out1_1(5) <= Delay9_out1(5);
        Delay9_out1_1(6) <= Delay9_out1(6);
        Delay9_out1_1(7) <= Delay9_out1(7);
        Delay9_out1_1(8) <= Delay9_out1(8);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  
  Switch_out1(0) <= Delay9_out1_1(0) WHEN Unit_Delay_out1_2 = '0' ELSE
      Data_Type_Conversion5_out1(0);
  
  Switch_out1(1) <= Delay9_out1_1(1) WHEN Unit_Delay_out1_2 = '0' ELSE
      Data_Type_Conversion5_out1(1);
  
  Switch_out1(2) <= Delay9_out1_1(2) WHEN Unit_Delay_out1_2 = '0' ELSE
      Data_Type_Conversion5_out1(2);
  
  Switch_out1(3) <= Delay9_out1_1(3) WHEN Unit_Delay_out1_2 = '0' ELSE
      Data_Type_Conversion5_out1(3);
  
  Switch_out1(4) <= Delay9_out1_1(4) WHEN Unit_Delay_out1_2 = '0' ELSE
      Data_Type_Conversion5_out1(4);
  
  Switch_out1(5) <= Delay9_out1_1(5) WHEN Unit_Delay_out1_2 = '0' ELSE
      Data_Type_Conversion5_out1(5);
  
  Switch_out1(6) <= Delay9_out1_1(6) WHEN Unit_Delay_out1_2 = '0' ELSE
      Data_Type_Conversion5_out1(6);
  
  Switch_out1(7) <= Delay9_out1_1(7) WHEN Unit_Delay_out1_2 = '0' ELSE
      Data_Type_Conversion5_out1(7);
  
  Switch_out1(8) <= Delay9_out1_1(8) WHEN Unit_Delay_out1_2 = '0' ELSE
      Data_Type_Conversion5_out1(8);

  Switch_out1_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_out1_4(0) <= X"00000000";
        Switch_out1_4(1) <= X"00000000";
        Switch_out1_4(2) <= X"00000000";
        Switch_out1_4(3) <= X"00000000";
        Switch_out1_4(4) <= X"00000000";
        Switch_out1_4(5) <= X"00000000";
        Switch_out1_4(6) <= X"00000000";
        Switch_out1_4(7) <= X"00000000";
        Switch_out1_4(8) <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        Switch_out1_4(0) <= Switch_out1(0);
        Switch_out1_4(1) <= Switch_out1(1);
        Switch_out1_4(2) <= Switch_out1(2);
        Switch_out1_4(3) <= Switch_out1(3);
        Switch_out1_4(4) <= Switch_out1(4);
        Switch_out1_4(5) <= Switch_out1(5);
        Switch_out1_4(6) <= Switch_out1(6);
        Switch_out1_4(7) <= Switch_out1(7);
        Switch_out1_4(8) <= Switch_out1(8);
      END IF;
    END IF;
  END PROCESS Switch_out1_3_process;


  t6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t6_bypass_reg(0) <= X"00000000";
        t6_bypass_reg(1) <= X"00000000";
        t6_bypass_reg(2) <= X"00000000";
        t6_bypass_reg(3) <= X"00000000";
        t6_bypass_reg(4) <= X"00000000";
        t6_bypass_reg(5) <= X"00000000";
        t6_bypass_reg(6) <= X"00000000";
        t6_bypass_reg(7) <= X"00000000";
        t6_bypass_reg(8) <= X"00000000";
      ELSIF enb_1_4000_1 = '1' THEN
        t6_bypass_reg(0) <= t6_bypass_reg_next(0);
        t6_bypass_reg(1) <= t6_bypass_reg_next(1);
        t6_bypass_reg(2) <= t6_bypass_reg_next(2);
        t6_bypass_reg(3) <= t6_bypass_reg_next(3);
        t6_bypass_reg(4) <= t6_bypass_reg_next(4);
        t6_bypass_reg(5) <= t6_bypass_reg_next(5);
        t6_bypass_reg(6) <= t6_bypass_reg_next(6);
        t6_bypass_reg(7) <= t6_bypass_reg_next(7);
        t6_bypass_reg(8) <= t6_bypass_reg_next(8);
      END IF;
    END IF;
  END PROCESS t6_bypass_process;

  
  Switch_out1_5(0) <= Switch_out1_4(0) WHEN enb_1_4000_1 = '1' ELSE
      t6_bypass_reg(0);
  
  Switch_out1_5(1) <= Switch_out1_4(1) WHEN enb_1_4000_1 = '1' ELSE
      t6_bypass_reg(1);
  
  Switch_out1_5(2) <= Switch_out1_4(2) WHEN enb_1_4000_1 = '1' ELSE
      t6_bypass_reg(2);
  
  Switch_out1_5(3) <= Switch_out1_4(3) WHEN enb_1_4000_1 = '1' ELSE
      t6_bypass_reg(3);
  
  Switch_out1_5(4) <= Switch_out1_4(4) WHEN enb_1_4000_1 = '1' ELSE
      t6_bypass_reg(4);
  
  Switch_out1_5(5) <= Switch_out1_4(5) WHEN enb_1_4000_1 = '1' ELSE
      t6_bypass_reg(5);
  
  Switch_out1_5(6) <= Switch_out1_4(6) WHEN enb_1_4000_1 = '1' ELSE
      t6_bypass_reg(6);
  
  Switch_out1_5(7) <= Switch_out1_4(7) WHEN enb_1_4000_1 = '1' ELSE
      t6_bypass_reg(7);
  
  Switch_out1_5(8) <= Switch_out1_4(8) WHEN enb_1_4000_1 = '1' ELSE
      t6_bypass_reg(8);
  t6_bypass_reg_next(0) <= Switch_out1_4(0);
  t6_bypass_reg_next(1) <= Switch_out1_4(1);
  t6_bypass_reg_next(2) <= Switch_out1_4(2);
  t6_bypass_reg_next(3) <= Switch_out1_4(3);
  t6_bypass_reg_next(4) <= Switch_out1_4(4);
  t6_bypass_reg_next(5) <= Switch_out1_4(5);
  t6_bypass_reg_next(6) <= Switch_out1_4(6);
  t6_bypass_reg_next(7) <= Switch_out1_4(7);
  t6_bypass_reg_next(8) <= Switch_out1_4(8);

  Demux1_out1(0) <= Transformation1_out1_signed(0);
  Demux1_out1(1) <= Transformation1_out1_signed(1);
  Demux1_out1(2) <= Transformation1_out1_signed(2);

  outputgen2: FOR k IN 0 TO 2 GENERATE
    Demux1_out1_1(k) <= signed(Demux1_out1(k));
  END GENERATE;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out1_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out1_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out1_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_20_0 = '1' THEN
        Demux1_out1_2(0) <= Demux1_out1_1(0);
        Demux1_out1_2(1) <= Demux1_out1_1(1);
        Demux1_out1_2(2) <= Demux1_out1_1(2);
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay41_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out1_3(0) <= to_signed(16#0000000#, 25);
        Demux1_out1_3(1) <= to_signed(16#0000000#, 25);
        Demux1_out1_3(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_1 = '1' THEN
        Demux1_out1_3(0) <= Demux1_out1_2(0);
        Demux1_out1_3(1) <= Demux1_out1_2(1);
        Demux1_out1_3(2) <= Demux1_out1_2(2);
      END IF;
    END IF;
  END PROCESS Delay41_output_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1(0) <= to_signed(16#0000000#, 25);
        Delay4_out1(1) <= to_signed(16#0000000#, 25);
        Delay4_out1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay4_out1(0) <= Demux1_out1_3(0);
        Delay4_out1(1) <= Demux1_out1_3(1);
        Delay4_out1(2) <= Demux1_out1_3(2);
      END IF;
    END IF;
  END PROCESS Delay4_process;


  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_1(0) <= to_signed(16#0000000#, 25);
        Delay4_out1_1(1) <= to_signed(16#0000000#, 25);
        Delay4_out1_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay4_out1_1(0) <= Delay4_out1(0);
        Delay4_out1_1(1) <= Delay4_out1(1);
        Delay4_out1_1(2) <= Delay4_out1(2);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  i_abc1_pl_0 <= std_logic_vector(Delay4_out1_1(0));

  i_abc1_pl_1 <= std_logic_vector(Delay4_out1_1(1));

  i_abc1_pl_2 <= std_logic_vector(Delay4_out1_1(2));

  Demux1_out2(0) <= Transformation1_out1_signed(3);
  Demux1_out2(1) <= Transformation1_out1_signed(4);
  Demux1_out2(2) <= Transformation1_out1_signed(5);

  outputgen1: FOR k IN 0 TO 2 GENERATE
    Demux1_out2_1(k) <= signed(Demux1_out2(k));
  END GENERATE;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out2_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out2_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out2_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_20_0 = '1' THEN
        Demux1_out2_2(0) <= Demux1_out2_1(0);
        Demux1_out2_2(1) <= Demux1_out2_1(1);
        Demux1_out2_2(2) <= Demux1_out2_1(2);
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay51_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out2_3(0) <= to_signed(16#0000000#, 25);
        Demux1_out2_3(1) <= to_signed(16#0000000#, 25);
        Demux1_out2_3(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_1 = '1' THEN
        Demux1_out2_3(0) <= Demux1_out2_2(0);
        Demux1_out2_3(1) <= Demux1_out2_2(1);
        Demux1_out2_3(2) <= Demux1_out2_2(2);
      END IF;
    END IF;
  END PROCESS Delay51_output_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1(0) <= to_signed(16#0000000#, 25);
        Delay5_out1(1) <= to_signed(16#0000000#, 25);
        Delay5_out1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay5_out1(0) <= Demux1_out2_3(0);
        Delay5_out1(1) <= Demux1_out2_3(1);
        Delay5_out1(2) <= Demux1_out2_3(2);
      END IF;
    END IF;
  END PROCESS Delay5_process;


  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_1(0) <= to_signed(16#0000000#, 25);
        Delay5_out1_1(1) <= to_signed(16#0000000#, 25);
        Delay5_out1_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay5_out1_1(0) <= Delay5_out1(0);
        Delay5_out1_1(1) <= Delay5_out1(1);
        Delay5_out1_1(2) <= Delay5_out1(2);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  i_abc2_pl_0 <= std_logic_vector(Delay5_out1_1(0));

  i_abc2_pl_1 <= std_logic_vector(Delay5_out1_1(1));

  i_abc2_pl_2 <= std_logic_vector(Delay5_out1_1(2));

  Demux1_out3(0) <= Transformation1_out1_signed(6);
  Demux1_out3(1) <= Transformation1_out1_signed(7);
  Demux1_out3(2) <= Transformation1_out1_signed(8);

  outputgen: FOR k IN 0 TO 2 GENERATE
    Demux1_out3_1(k) <= signed(Demux1_out3(k));
  END GENERATE;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out3_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out3_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out3_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_20_0 = '1' THEN
        Demux1_out3_2(0) <= Demux1_out3_1(0);
        Demux1_out3_2(1) <= Demux1_out3_1(1);
        Demux1_out3_2(2) <= Demux1_out3_1(2);
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay61_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out3_3(0) <= to_signed(16#0000000#, 25);
        Demux1_out3_3(1) <= to_signed(16#0000000#, 25);
        Demux1_out3_3(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_1 = '1' THEN
        Demux1_out3_3(0) <= Demux1_out3_2(0);
        Demux1_out3_3(1) <= Demux1_out3_2(1);
        Demux1_out3_3(2) <= Demux1_out3_2(2);
      END IF;
    END IF;
  END PROCESS Delay61_output_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1(0) <= to_signed(16#0000000#, 25);
        Delay6_out1(1) <= to_signed(16#0000000#, 25);
        Delay6_out1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay6_out1(0) <= Demux1_out3_3(0);
        Delay6_out1(1) <= Demux1_out3_3(1);
        Delay6_out1(2) <= Demux1_out3_3(2);
      END IF;
    END IF;
  END PROCESS Delay6_process;


  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_1(0) <= to_signed(16#0000000#, 25);
        Delay6_out1_1(1) <= to_signed(16#0000000#, 25);
        Delay6_out1_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        Delay6_out1_1(0) <= Delay6_out1(0);
        Delay6_out1_1(1) <= Delay6_out1(1);
        Delay6_out1_1(2) <= Delay6_out1(2);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  i_abc3_pl_0 <= std_logic_vector(Delay6_out1_1(0));

  i_abc3_pl_1 <= std_logic_vector(Delay6_out1_1(1));

  i_abc3_pl_2 <= std_logic_vector(Delay6_out1_1(2));

  Data_Type_Conversion1_out1_signed <= signed(Data_Type_Conversion1_out1);

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion1_out1_1 <= to_signed(16#0000000#, 25);
      ELSIF enb_1_20_0 = '1' THEN
        Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay7_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion1_out1_2 <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_1 = '1' THEN
        Data_Type_Conversion1_out1_2 <= Data_Type_Conversion1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_output_process;


  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch7_reg(0) <= to_signed(16#0000000#, 25);
        delayMatch7_reg(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_4000_0 = '1' THEN
        delayMatch7_reg(0) <= delayMatch7_reg_next(0);
        delayMatch7_reg(1) <= delayMatch7_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Data_Type_Conversion1_out1_3 <= delayMatch7_reg(1);
  delayMatch7_reg_next(0) <= Data_Type_Conversion1_out1_2;
  delayMatch7_reg_next(1) <= delayMatch7_reg(0);

  out_theta_el <= std_logic_vector(Data_Type_Conversion1_out1_3);

  ce_out <= enb_1_4000_1;

  outputs_0 <= Mux1_out1_1(0);

  outputs_1 <= Mux1_out1_1(1);

  outputs_2 <= Mux1_out1_1(2);

  i_abc_ps_0 <= Switch_out1_5(0);

  i_abc_ps_1 <= Switch_out1_5(1);

  i_abc_ps_2 <= Switch_out1_5(2);

  i_abc_ps_3 <= Switch_out1_5(3);

  i_abc_ps_4 <= Switch_out1_5(4);

  i_abc_ps_5 <= Switch_out1_5(5);

  i_abc_ps_6 <= Switch_out1_5(6);

  i_abc_ps_7 <= Switch_out1_5(7);

  i_abc_ps_8 <= Switch_out1_5(8);



END rtl;

