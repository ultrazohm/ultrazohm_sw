-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph.vhd
-- Created: 2022-05-18 19:36:59
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 200x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- outputs_0                     ce_out        2e-06
-- outputs_1                     ce_out        2e-06
-- outputs_2                     ce_out        2e-06
-- outputs_3                     ce_out        2e-06
-- outputs_4                     ce_out        2e-06
-- i_dq_ps_0                     ce_out        2e-06
-- i_dq_ps_1                     ce_out        2e-06
-- i_dq_ps_2                     ce_out        2e-06
-- i_dq_ps_3                     ce_out        2e-06
-- i_dq_ps_4                     ce_out        2e-06
-- i_dq_ps_5                     ce_out        2e-06
-- i_dq_ps_6                     ce_out        2e-06
-- i_dq_ps_7                     ce_out        2e-06
-- i_dq_ps_8                     ce_out        2e-06
-- i_abc1_pl_0                   ce_out        2e-06
-- i_abc1_pl_1                   ce_out        2e-06
-- i_abc1_pl_2                   ce_out        2e-06
-- i_abc2_pl_0                   ce_out        2e-06
-- i_abc2_pl_1                   ce_out        2e-06
-- i_abc2_pl_2                   ce_out        2e-06
-- i_abc3_pl_0                   ce_out        2e-06
-- i_abc3_pl_1                   ce_out        2e-06
-- i_abc3_pl_2                   ce_out        2e-06
-- out_theta_el                  ce_out        2e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Model_Parameter_reset_integrators :   IN    std_logic;
        Model_Parameter_simulate_mechanical :   IN    std_logic;
        Model_Parameter_switch_pspl       :   IN    std_logic;
        Model_Parameter_control_dq_abc    :   IN    std_logic;
        physical_parameters_1_J           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_mu            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_M_R0          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_d         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_q         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_R_1           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_polepair      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_psi_pm        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z3          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_0                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_3                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        u_abc1_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        in_theta_el                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        ce_out                            :   OUT   std_logic;
        outputs_0                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_1                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_2                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_3                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_4                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_0                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_1                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_2                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_3                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_4                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_5                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_6                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_7                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_8                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc1_pl_0                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc1_pl_1                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc1_pl_2                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc2_pl_0                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc2_pl_1                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc2_pl_2                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc3_pl_0                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc3_pl_1                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc3_pl_2                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        out_theta_el                      :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
        );
END uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_200_0                     :   OUT   std_logic;
          enb_1_200_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
          Out1                            :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
          Out1                            :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
          Out1                            :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_sincos_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out2                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Transformation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    vector_of_std_logic_vector25(0 TO 8);  -- sfix25_En12 [9]
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          out_rsvd                        :   OUT   vector_of_std_logic_vector32(0 TO 8)  -- single [9]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_sub_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Theta_el
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_200_1                     :   IN    std_logic;
          enb                             :   IN    std_logic;
          w_mech                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          polepairs                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          reset_1                         :   IN    std_logic;
          theta_el                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Transformation1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    vector_of_std_logic_vector32(0 TO 8);  -- single [9]
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          enb_counter                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          out_rsvd                        :   OUT   vector_of_std_logic_vector43(0 TO 8)  -- sfix43_En28 [9]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_tc
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_tc(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage1
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage1(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage2
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage2(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_sincos_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_sincos_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Transformation
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Transformation(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_double2single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_sub_double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_sub_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_add_double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_add_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_add_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_add_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_sub_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Theta_el
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Theta_el(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Transformation1
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Transformation1(rtl);

  -- Signals
  SIGNAL enb_1_200_0                      : std_logic;
  SIGNAL enb_1_200_1                      : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Model_Parameter_reset_integrators_1 : std_logic;
  SIGNAL reset_integrators                : std_logic;
  SIGNAL reset_integrators_1              : std_logic;
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL switch_pspl                      : std_logic;
  SIGNAL switch_pspl_1                    : std_logic;
  SIGNAL u_abc1_pl_0_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc1_pl_1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc1_pl_2_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_out_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_1_reg                      : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay_out_2                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_out_3                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_1_reg_1                    : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay_1_reg_2                    : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay_1_reg_next                 : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay_1_reg_next_1               : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay_1_reg_next_2               : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay_out1                       : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay_out1_1                     : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Cast_To_Double_out1              : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Line_Line_to_Phase_voltage_out1  : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL u_abc2_pl_0_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc2_pl_1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc2_pl_2_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_out_1                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_1_reg                     : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay2_out_2                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_out_3                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_1_reg_1                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay2_1_reg_2                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay2_1_reg_next                : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay2_1_reg_next_1              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay2_1_reg_next_2              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay2_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay2_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Cast_To_Double1_out1             : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Line_Line_to_Phase_voltage1_out1 : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL u_abc3_pl_0_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc3_pl_1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc3_pl_2_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_out_1                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_1_reg                     : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay3_out_2                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_out_3                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_1_reg_1                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay3_1_reg_2                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay3_1_reg_next                : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay3_1_reg_next_1              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay3_1_reg_next_2              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay3_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay3_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Cast_To_Double2_out1             : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Line_Line_to_Phase_voltage2_out1 : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Data_Type_Conversion9_out1       : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL in_theta_el_signed               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay1_reg                       : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay1_reg_next                  : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay1_out1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay1_out1_1                    : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Data_Type_Conversion37_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sin_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sin1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Transformation_out1              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL input                            : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL input_4                          : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux2_out1                        : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Mux2_out1_1                      : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Switch_out1                      : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Data_Type_Conversion21_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_L_d                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion11_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch33_reg                 : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL delayMatch33_reg_next            : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL From10_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_pm                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL physical_parameters_R_1_1        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion33_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL simulate_mechanical              : std_logic;
  SIGNAL delayMatch25_reg                 : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL delayMatch25_reg_next            : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL simulate_mechanical_1            : std_logic;
  SIGNAL input_1_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch26_reg                 : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL delayMatch26_reg_next            : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL omega_mech                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_2              : std_logic;
  SIGNAL reset_integrators_3              : std_logic;
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_J                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From15_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL load_torque                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL physical_parameters_polepair_1   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL polepair                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_4              : std_logic;
  SIGNAL kconst_3                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion22_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_L_q                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL polepair_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch38_reg                 : vector_of_std_logic_vector32(0 TO 35);  -- ufix32 [36]
  SIGNAL delayMatch38_reg_next            : vector_of_std_logic_vector32(0 TO 35);  -- ufix32 [36]
  SIGNAL From_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion13_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch36_reg                 : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch36_reg_next            : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL pmsm_out4                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I_d                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion32_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL i_d_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I_q                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion31_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL i_q_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_3                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_4                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_5                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_q                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reduced_reg                      : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL reduced_reg_next                 : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL psi_q_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product7_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_el                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_el_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_d                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_op_stage1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_6                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_7                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay8_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_3                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product11_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_3                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_4                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered1_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_5                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion33_out1_1    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reduced_reg_1                    : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL reduced_reg_next_1               : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL psi_d_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product8_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_op_stage1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_6                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_7                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered2_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_8                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_2                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion23_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch35_reg                 : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL delayMatch35_reg_next            : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL pmsm_out3                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch37_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch37_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Product3_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_out1_3                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_4                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_5                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From5_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch54_reg                 : std_logic_vector(0 TO 159);  -- ufix1 [160]
  SIGNAL delayMatch54_reg_next            : std_logic_vector(0 TO 159);  -- ufix1 [160]
  SIGNAL reset_integrators_5              : std_logic;
  SIGNAL theta_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL input_2_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion24_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL input_3_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion25_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux1_out1                        : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL t_bypass_reg                     : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL t_bypass_reg_next                : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Mux1_out1_1                      : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL reset_integrators_6              : std_logic;
  SIGNAL kconst_4                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL R_1                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From4_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch39_reg                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch39_reg_next            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL From11_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_8                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_9                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion24_out1_1    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_9                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_10                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered3_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_11                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_3                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion14_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_7              : std_logic;
  SIGNAL kconst_5                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL From8_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch41_reg                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch41_reg_next            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL From12_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_10                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_11                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide3_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide2_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion25_out1_1    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_12                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_13                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered4_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_14                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_4                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion15_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_8              : std_logic;
  SIGNAL kconst_6                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL From14_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch43_reg                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch43_reg_next            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL From13_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_12                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_13                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide5_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide4_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion26_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_15                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_16                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered5_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_17                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_5                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion16_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_9              : std_logic;
  SIGNAL kconst_7                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL From18_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch45_reg                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch45_reg_next            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL From16_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_14                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_15                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide7_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide6_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion27_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_18                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_19                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered6_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_20                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_6                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_3                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion17_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_10             : std_logic;
  SIGNAL kconst_8                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL From22_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch47_reg                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch47_reg_next            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL From17_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_16                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_17                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide9_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide8_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add4_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion28_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_21                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_22                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered7_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_23                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_7                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_4                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion18_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_11             : std_logic;
  SIGNAL kconst_9                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL From26_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch49_reg                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch49_reg_next            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL From20_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_18                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_19                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide11_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide10_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add5_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion29_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_24                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_25                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered8_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_26                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_8                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_5                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion19_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_12             : std_logic;
  SIGNAL kconst_10                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL From30_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch51_reg                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch51_reg_next            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL From21_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_20                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_21                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide13_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide12_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add6_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion30_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_27                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_28                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered9_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_29                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_9                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_6                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion20_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_out1                         : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Mux_out1_2                       : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t7_bypass_reg                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t7_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Mux_out1_3                       : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL ctr_199_sig                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Transformation1_out1             : vector_of_std_logic_vector43(0 TO 8);  -- ufix43 [9]
  SIGNAL Transformation1_out1_signed      : vector_of_signed43(0 TO 8);  -- sfix43_En28 [9]
  SIGNAL Data_Type_Conversion34_out1      : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Demux1_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out1_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay4_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay4_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay5_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay5_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay6_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay6_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Data_Type_Conversion1_out1_2     : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Data_Type_Conversion1_out1_signed : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Data_Type_Conversion1_out1_3     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Data_Type_Conversion1_out1_4     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch58_reg                 : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch58_reg_next            : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Data_Type_Conversion1_out1_5     : signed(24 DOWNTO 0);  -- sfix25_En12

BEGIN
  -- PMSM electric and magentic
  -- 
  -- Mechanical
  -- 
  -- Outputs
  -- 
  -- Inputs
  -- 
  -- o1 equation
  -- 
  -- DQ equations
  -- 
  -- o2 equation
  -- 
  -- x1 equation
  -- 
  -- y1 equation
  -- 
  -- x2 equation
  -- 
  -- y2 equation
  -- 
  -- zero equation
  -- 
  -- load torque negative!!!

  u_uz_pmsm_model_9ph_tc : uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_200_0 => enb_1_200_0,
              enb_1_200_1 => enb_1_200_1
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Delay_out1_1(0)),  -- sfix25_En12
              nfp_out => Cast_To_Double_out1(0)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_1 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Delay_out1_1(1)),  -- sfix25_En12
              nfp_out => Cast_To_Double_out1(1)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_2 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Delay_out1_1(2)),  -- sfix25_En12
              nfp_out => Cast_To_Double_out1(2)  -- single
              );

  u_Line_Line_to_Phase_voltage : uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1 => Cast_To_Double_out1,  -- single [3]
              Out1 => Line_Line_to_Phase_voltage_out1  -- single [3]
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Line_Line_to_Phase_voltage_out1(0),  -- single
              nfp_out => Data_Type_Conversion9_out1(0)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_1 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Line_Line_to_Phase_voltage_out1(1),  -- single
              nfp_out => Data_Type_Conversion9_out1(1)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_2 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Line_Line_to_Phase_voltage_out1(2),  -- single
              nfp_out => Data_Type_Conversion9_out1(2)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_3 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Delay2_out1_1(0)),  -- sfix25_En12
              nfp_out => Cast_To_Double1_out1(0)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_4 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Delay2_out1_1(1)),  -- sfix25_En12
              nfp_out => Cast_To_Double1_out1(1)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_5 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Delay2_out1_1(2)),  -- sfix25_En12
              nfp_out => Cast_To_Double1_out1(2)  -- single
              );

  u_Line_Line_to_Phase_voltage1 : uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1 => Cast_To_Double1_out1,  -- single [3]
              Out1 => Line_Line_to_Phase_voltage1_out1  -- single [3]
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_3 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Line_Line_to_Phase_voltage1_out1(0),  -- single
              nfp_out => Data_Type_Conversion9_out1(3)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_4 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Line_Line_to_Phase_voltage1_out1(1),  -- single
              nfp_out => Data_Type_Conversion9_out1(4)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_5 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Line_Line_to_Phase_voltage1_out1(2),  -- single
              nfp_out => Data_Type_Conversion9_out1(5)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_6 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Delay3_out1_1(0)),  -- sfix25_En12
              nfp_out => Cast_To_Double2_out1(0)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_7 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Delay3_out1_1(1)),  -- sfix25_En12
              nfp_out => Cast_To_Double2_out1(1)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_8 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Delay3_out1_1(2)),  -- sfix25_En12
              nfp_out => Cast_To_Double2_out1(2)  -- single
              );

  u_Line_Line_to_Phase_voltage2 : uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1 => Cast_To_Double2_out1,  -- single [3]
              Out1 => Line_Line_to_Phase_voltage2_out1  -- single [3]
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_6 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Line_Line_to_Phase_voltage2_out1(0),  -- single
              nfp_out => Data_Type_Conversion9_out1(6)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_7 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Line_Line_to_Phase_voltage2_out1(1),  -- single
              nfp_out => Data_Type_Conversion9_out1(7)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_8 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Line_Line_to_Phase_voltage2_out1(2),  -- single
              nfp_out => Data_Type_Conversion9_out1(8)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_9 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Delay1_out1_1,  -- sfix25_En12
              nfp_out => Data_Type_Conversion37_out1  -- single
              );

  u_nfp_sincos_comp : uz_pmsm_model_9ph_opti_src_nfp_sincos_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion37_out1,  -- single
              nfp_out1 => Sin_out1,  -- single
              nfp_out2 => Sin1_out1  -- single
              );

  u_Transformation : uz_pmsm_model_9ph_opti_src_Transformation
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in_rsvd => Data_Type_Conversion9_out1,  -- sfix25_En12 [9]
              sin_theta_el => Sin_out1,  -- single
              cos_theta_el => Sin1_out1,  -- single
              out_rsvd => Transformation_out1  -- single [9]
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch_out1(0),  -- single
              nfp_out => Data_Type_Conversion21_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_1 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => alpha1_L_d,  -- single
              nfp_out => Data_Type_Conversion11_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_2 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_pm,  -- single
              nfp_out => Data_Type_Conversion5_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_3 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => physical_parameters_R_1_1,  -- single
              nfp_out => Data_Type_Conversion33_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_4 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => polepair,  -- single
              nfp_out => Data_Type_Conversion3_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_5 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch_out1(1),  -- single
              nfp_out => Data_Type_Conversion22_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_6 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => alpha1_L_q,  -- single
              nfp_out => Data_Type_Conversion1_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Delay1_out1_2,  -- double
              nfp_out => Data_Type_Conversion13_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_1 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => I_d,  -- double
              nfp_out => Data_Type_Conversion32_out1  -- single
              );

  u_nfp_mul_comp : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => i_d_1,  -- single
              nfp_in2 => pmsm_out4,  -- single
              nfp_out => Product2_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_2 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => I_q_1,  -- double
              nfp_out => Data_Type_Conversion31_out1  -- single
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_q_1,  -- double
              nfp_in2 => Data_Type_Conversion1_out1,  -- double
              nfp_out => I_q  -- double
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_q,  -- double
              nfp_in2 => Data_Type_Conversion33_out1,  -- double
              nfp_out => Product7_out1  -- double
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el_1,  -- double
              nfp_in2 => psi_d,  -- double
              nfp_out => Product1_out1  -- double
              );

  u_nfp_sub_comp : uz_pmsm_model_9ph_opti_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion22_out1,  -- double
              nfp_in2 => Product1_out1,  -- double
              nfp_out => Sum1_op_stage1  -- double
              );

  u_nfp_sub_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum1_op_stage1,  -- double
              nfp_in2 => Product7_out1,  -- double
              nfp_out => Sum1_out1  -- double
              );

  u_nfp_mul_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_3,  -- double
              nfp_in2 => Sum1_out1,  -- double
              nfp_out => Gain_out1  -- double
              );

  u_nfp_add_comp : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1,  -- double
              nfp_in2 => Delay1_out1_5,  -- double
              nfp_out => Sum3_out1  -- double
              );

  u_nfp_add_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_3,  -- single
              nfp_in2 => load_torque,  -- single
              nfp_out => Sum1_out1_1  -- single
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From15_out1,  -- single
              nfp_in2 => Sum1_out1_1,  -- single
              nfp_out => Product11_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_7 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product11_out1,  -- single
              nfp_out => Data_Type_Conversion1_out1_1  -- double
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_2,  -- double
              nfp_in2 => Data_Type_Conversion1_out1_1,  -- double
              nfp_out => Gain_out1_1  -- double
              );

  u_nfp_add_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_1,  -- double
              nfp_in2 => Delay1_out1_7,  -- double
              nfp_out => Sum3_out1_1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_3 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Delay1_out1_6,  -- double
              nfp_out => Data_Type_Conversion8_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_8 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch1_out1,  -- single
              nfp_out => Data_Type_Conversion33_out1_1  -- double
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion33_out1_1,  -- double
              nfp_in2 => Data_Type_Conversion3_out1,  -- double
              nfp_out => omega_el  -- double
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el,  -- double
              nfp_in2 => psi_q,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_sub_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_d_1,  -- double
              nfp_in2 => Data_Type_Conversion5_out1,  -- double
              nfp_out => Sum2_out1  -- double
              );

  u_nfp_mul_comp_9 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From10_out1,  -- double
              nfp_in2 => Sum2_out1,  -- double
              nfp_out => I_d  -- double
              );

  u_nfp_mul_comp_10 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_d_2,  -- double
              nfp_in2 => Data_Type_Conversion33_out1,  -- double
              nfp_out => Product8_out1  -- double
              );

  u_nfp_sub_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion21_out1,  -- double
              nfp_in2 => Product8_out1,  -- double
              nfp_out => Sum_op_stage1  -- double
              );

  u_nfp_add_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_op_stage1,  -- double
              nfp_in2 => Product_out1,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_nfp_mul_comp_11 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_1,  -- double
              nfp_in2 => Sum_out1,  -- double
              nfp_out => Gain_out1_2  -- double
              );

  u_nfp_add_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_2,  -- double
              nfp_in2 => Delay1_out1_4,  -- double
              nfp_out => Sum3_out1_2  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_4 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Delay1_out1_3,  -- double
              nfp_out => Data_Type_Conversion23_out1  -- single
              );

  u_nfp_mul_comp_12 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => pmsm_out3,  -- single
              nfp_in2 => i_q_2,  -- single
              nfp_out => Product3_out1  -- single
              );

  u_nfp_sub_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product3_out1_1,  -- single
              nfp_in2 => Product2_out1,  -- single
              nfp_out => Sum3_out1_3  -- single
              );

  u_nfp_mul_comp_13 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst,  -- single
              nfp_in2 => Sum3_out1_3,  -- single
              nfp_out => M_Mi_4  -- single
              );

  u_nfp_mul_comp_14 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_5,  -- single
              nfp_in2 => From_out1,  -- single
              nfp_out => M_Mi  -- single
              );

  u_Theta_el : uz_pmsm_model_9ph_opti_src_Theta_el
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_200_1 => enb_1_200_1,
              enb => enb,
              w_mech => Switch1_out1,  -- single
              polepairs => From5_out1,  -- single
              reset_1 => reset_integrators_5,
              theta_el => theta_el  -- single
              );

  u_nfp_mul_comp_15 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From4_out1,  -- single
              nfp_in2 => Divide1_out1,  -- single
              nfp_out => Divide_out1  -- single
              );

  u_nfp_sub_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(2),  -- single
              nfp_in2 => Divide_out1,  -- single
              nfp_out => Add_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_9 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add_out1,  -- single
              nfp_out => Data_Type_Conversion24_out1_1  -- double
              );

  u_nfp_mul_comp_16 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_4,  -- double
              nfp_in2 => Data_Type_Conversion24_out1_1,  -- double
              nfp_out => Gain_out1_3  -- double
              );

  u_nfp_add_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_3,  -- double
              nfp_in2 => Delay1_out1_9,  -- double
              nfp_out => Sum3_out1_4  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_5 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi,  -- double
              nfp_out => Data_Type_Conversion14_out1  -- single
              );

  u_nfp_mul_comp_17 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion14_out1,  -- single
              nfp_in2 => From11_out1,  -- single
              nfp_out => Divide1_out1  -- single
              );

  u_nfp_mul_comp_18 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From8_out1,  -- single
              nfp_in2 => Divide3_out1,  -- single
              nfp_out => Divide2_out1  -- single
              );

  u_nfp_sub_comp_6 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(3),  -- single
              nfp_in2 => Divide2_out1,  -- single
              nfp_out => Add1_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_10 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add1_out1,  -- single
              nfp_out => Data_Type_Conversion25_out1_1  -- double
              );

  u_nfp_mul_comp_19 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_5,  -- double
              nfp_in2 => Data_Type_Conversion25_out1_1,  -- double
              nfp_out => Gain_out1_4  -- double
              );

  u_nfp_add_comp_6 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_4,  -- double
              nfp_in2 => Delay1_out1_11,  -- double
              nfp_out => Sum3_out1_5  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_6 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_1,  -- double
              nfp_out => Data_Type_Conversion15_out1  -- single
              );

  u_nfp_mul_comp_20 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion15_out1,  -- single
              nfp_in2 => From12_out1,  -- single
              nfp_out => Divide3_out1  -- single
              );

  u_nfp_mul_comp_21 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From14_out1,  -- single
              nfp_in2 => Divide5_out1,  -- single
              nfp_out => Divide4_out1  -- single
              );

  u_nfp_sub_comp_7 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(4),  -- single
              nfp_in2 => Divide4_out1,  -- single
              nfp_out => Add2_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_11 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add2_out1,  -- single
              nfp_out => Data_Type_Conversion26_out1  -- double
              );

  u_nfp_mul_comp_22 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_6,  -- double
              nfp_in2 => Data_Type_Conversion26_out1,  -- double
              nfp_out => Gain_out1_5  -- double
              );

  u_nfp_add_comp_7 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_5,  -- double
              nfp_in2 => Delay1_out1_13,  -- double
              nfp_out => Sum3_out1_6  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_7 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_2,  -- double
              nfp_out => Data_Type_Conversion16_out1  -- single
              );

  u_nfp_mul_comp_23 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion16_out1,  -- single
              nfp_in2 => From13_out1,  -- single
              nfp_out => Divide5_out1  -- single
              );

  u_nfp_mul_comp_24 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From18_out1,  -- single
              nfp_in2 => Divide7_out1,  -- single
              nfp_out => Divide6_out1  -- single
              );

  u_nfp_sub_comp_8 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(5),  -- single
              nfp_in2 => Divide6_out1,  -- single
              nfp_out => Add3_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_12 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add3_out1,  -- single
              nfp_out => Data_Type_Conversion27_out1  -- double
              );

  u_nfp_mul_comp_25 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_7,  -- double
              nfp_in2 => Data_Type_Conversion27_out1,  -- double
              nfp_out => Gain_out1_6  -- double
              );

  u_nfp_add_comp_8 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_6,  -- double
              nfp_in2 => Delay1_out1_15,  -- double
              nfp_out => Sum3_out1_7  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_8 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_3,  -- double
              nfp_out => Data_Type_Conversion17_out1  -- single
              );

  u_nfp_mul_comp_26 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion17_out1,  -- single
              nfp_in2 => From16_out1,  -- single
              nfp_out => Divide7_out1  -- single
              );

  u_nfp_mul_comp_27 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From22_out1,  -- single
              nfp_in2 => Divide9_out1,  -- single
              nfp_out => Divide8_out1  -- single
              );

  u_nfp_sub_comp_9 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(6),  -- single
              nfp_in2 => Divide8_out1,  -- single
              nfp_out => Add4_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_13 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add4_out1,  -- single
              nfp_out => Data_Type_Conversion28_out1  -- double
              );

  u_nfp_mul_comp_28 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_8,  -- double
              nfp_in2 => Data_Type_Conversion28_out1,  -- double
              nfp_out => Gain_out1_7  -- double
              );

  u_nfp_add_comp_9 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_7,  -- double
              nfp_in2 => Delay1_out1_17,  -- double
              nfp_out => Sum3_out1_8  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_9 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_4,  -- double
              nfp_out => Data_Type_Conversion18_out1  -- single
              );

  u_nfp_mul_comp_29 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion18_out1,  -- single
              nfp_in2 => From17_out1,  -- single
              nfp_out => Divide9_out1  -- single
              );

  u_nfp_mul_comp_30 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From26_out1,  -- single
              nfp_in2 => Divide11_out1,  -- single
              nfp_out => Divide10_out1  -- single
              );

  u_nfp_sub_comp_10 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(7),  -- single
              nfp_in2 => Divide10_out1,  -- single
              nfp_out => Add5_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_14 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add5_out1,  -- single
              nfp_out => Data_Type_Conversion29_out1  -- double
              );

  u_nfp_mul_comp_31 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_9,  -- double
              nfp_in2 => Data_Type_Conversion29_out1,  -- double
              nfp_out => Gain_out1_8  -- double
              );

  u_nfp_add_comp_10 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_8,  -- double
              nfp_in2 => Delay1_out1_19,  -- double
              nfp_out => Sum3_out1_9  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_10 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_5,  -- double
              nfp_out => Data_Type_Conversion19_out1  -- single
              );

  u_nfp_mul_comp_32 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion19_out1,  -- single
              nfp_in2 => From20_out1,  -- single
              nfp_out => Divide11_out1  -- single
              );

  u_nfp_mul_comp_33 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From30_out1,  -- single
              nfp_in2 => Divide13_out1,  -- single
              nfp_out => Divide12_out1  -- single
              );

  u_nfp_sub_comp_11 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(8),  -- single
              nfp_in2 => Divide12_out1,  -- single
              nfp_out => Add6_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_15 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add6_out1,  -- single
              nfp_out => Data_Type_Conversion30_out1  -- double
              );

  u_nfp_mul_comp_34 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_10,  -- double
              nfp_in2 => Data_Type_Conversion30_out1,  -- double
              nfp_out => Gain_out1_9  -- double
              );

  u_nfp_add_comp_11 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_9,  -- double
              nfp_in2 => Delay1_out1_21,  -- double
              nfp_out => Sum3_out1_10  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_11 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_6,  -- double
              nfp_out => Data_Type_Conversion20_out1  -- single
              );

  u_nfp_mul_comp_35 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion20_out1,  -- single
              nfp_in2 => From21_out1,  -- single
              nfp_out => Divide13_out1  -- single
              );

  u_Transformation1 : uz_pmsm_model_9ph_opti_src_Transformation1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in_rsvd => Mux_out1,  -- single [9]
              sin_theta_el => Sin_out1,  -- single
              cos_theta_el => Sin1_out1,  -- single
              enb_counter => std_logic_vector(ctr_199_sig),  -- ufix8
              out_rsvd => Transformation1_out1  -- sfix43_En28 [9]
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_9 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => theta_el,  -- single
              nfp_out => Data_Type_Conversion1_out1_2  -- sfix25_En12
              );

  kconst <= X"40900000";

  Model_Parameter_reset_integrators_1 <= Model_Parameter_reset_integrators;

  reset_integrators <= Model_Parameter_reset_integrators_1;

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_1 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_1 <= reset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  kconst_1 <= X"3ec0c6f7a0b5ed8d";

  switch_pspl <= Model_Parameter_switch_pspl;

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        switch_pspl_1 <= '0';
      ELSIF enb = '1' THEN
        switch_pspl_1 <= switch_pspl;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  u_abc1_pl_0_1 <= signed(u_abc1_pl_0);

  Delay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_1_reg(0) <= to_signed(16#0000000#, 25);
        Delay_1_reg(1) <= to_signed(16#0000000#, 25);
        Delay_1_reg_1(0) <= to_signed(16#0000000#, 25);
        Delay_1_reg_1(1) <= to_signed(16#0000000#, 25);
        Delay_1_reg_2(0) <= to_signed(16#0000000#, 25);
        Delay_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay_1_reg(0) <= Delay_1_reg_next(0);
        Delay_1_reg(1) <= Delay_1_reg_next(1);
        Delay_1_reg_1(0) <= Delay_1_reg_next_1(0);
        Delay_1_reg_1(1) <= Delay_1_reg_next_1(1);
        Delay_1_reg_2(0) <= Delay_1_reg_next_2(0);
        Delay_1_reg_2(1) <= Delay_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay_1_process;

  Delay_1_reg_next(0) <= u_abc1_pl_0_1;
  Delay_1_reg_next(1) <= Delay_1_reg(0);
  Delay_out_1 <= Delay_1_reg(1);
  Delay_1_reg_next_1(0) <= u_abc1_pl_1_1;
  Delay_1_reg_next_1(1) <= Delay_1_reg_1(0);
  Delay_out_2 <= Delay_1_reg_1(1);
  Delay_1_reg_next_2(0) <= u_abc1_pl_2_1;
  Delay_1_reg_next_2(1) <= Delay_1_reg_2(0);
  Delay_out_3 <= Delay_1_reg_2(1);

  u_abc1_pl_1_1 <= signed(u_abc1_pl_1);

  u_abc1_pl_2_1 <= signed(u_abc1_pl_2);

  Delay_out1(0) <= Delay_out_1;
  Delay_out1(1) <= Delay_out_2;
  Delay_out1(2) <= Delay_out_3;

  Delay_out1_1 <= Delay_out1;


  u_abc2_pl_0_1 <= signed(u_abc2_pl_0);

  Delay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_1_reg(0) <= to_signed(16#0000000#, 25);
        Delay2_1_reg(1) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_1(0) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_1(1) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_2(0) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay2_1_reg(0) <= Delay2_1_reg_next(0);
        Delay2_1_reg(1) <= Delay2_1_reg_next(1);
        Delay2_1_reg_1(0) <= Delay2_1_reg_next_1(0);
        Delay2_1_reg_1(1) <= Delay2_1_reg_next_1(1);
        Delay2_1_reg_2(0) <= Delay2_1_reg_next_2(0);
        Delay2_1_reg_2(1) <= Delay2_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay2_1_process;

  Delay2_1_reg_next(0) <= u_abc2_pl_0_1;
  Delay2_1_reg_next(1) <= Delay2_1_reg(0);
  Delay2_out_1 <= Delay2_1_reg(1);
  Delay2_1_reg_next_1(0) <= u_abc2_pl_1_1;
  Delay2_1_reg_next_1(1) <= Delay2_1_reg_1(0);
  Delay2_out_2 <= Delay2_1_reg_1(1);
  Delay2_1_reg_next_2(0) <= u_abc2_pl_2_1;
  Delay2_1_reg_next_2(1) <= Delay2_1_reg_2(0);
  Delay2_out_3 <= Delay2_1_reg_2(1);

  u_abc2_pl_1_1 <= signed(u_abc2_pl_1);

  u_abc2_pl_2_1 <= signed(u_abc2_pl_2);

  Delay2_out1(0) <= Delay2_out_1;
  Delay2_out1(1) <= Delay2_out_2;
  Delay2_out1(2) <= Delay2_out_3;

  Delay2_out1_1 <= Delay2_out1;


  u_abc3_pl_0_1 <= signed(u_abc3_pl_0);

  Delay3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_1_reg(0) <= to_signed(16#0000000#, 25);
        Delay3_1_reg(1) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_1(0) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_1(1) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_2(0) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay3_1_reg(0) <= Delay3_1_reg_next(0);
        Delay3_1_reg(1) <= Delay3_1_reg_next(1);
        Delay3_1_reg_1(0) <= Delay3_1_reg_next_1(0);
        Delay3_1_reg_1(1) <= Delay3_1_reg_next_1(1);
        Delay3_1_reg_2(0) <= Delay3_1_reg_next_2(0);
        Delay3_1_reg_2(1) <= Delay3_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay3_1_process;

  Delay3_1_reg_next(0) <= u_abc3_pl_0_1;
  Delay3_1_reg_next(1) <= Delay3_1_reg(0);
  Delay3_out_1 <= Delay3_1_reg(1);
  Delay3_1_reg_next_1(0) <= u_abc3_pl_1_1;
  Delay3_1_reg_next_1(1) <= Delay3_1_reg_1(0);
  Delay3_out_2 <= Delay3_1_reg_1(1);
  Delay3_1_reg_next_2(0) <= u_abc3_pl_2_1;
  Delay3_1_reg_next_2(1) <= Delay3_1_reg_2(0);
  Delay3_out_3 <= Delay3_1_reg_2(1);

  u_abc3_pl_1_1 <= signed(u_abc3_pl_1);

  u_abc3_pl_2_1 <= signed(u_abc3_pl_2);

  Delay3_out1(0) <= Delay3_out_1;
  Delay3_out1(1) <= Delay3_out_2;
  Delay3_out1(2) <= Delay3_out_3;

  Delay3_out1_1 <= Delay3_out1;



  in_theta_el_signed <= signed(in_theta_el);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg(0) <= to_signed(16#0000000#, 25);
        Delay1_reg(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay1_reg(0) <= Delay1_reg_next(0);
        Delay1_reg(1) <= Delay1_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);
  Delay1_reg_next(0) <= in_theta_el_signed;
  Delay1_reg_next(1) <= Delay1_reg(0);

  Delay1_out1_1 <= std_logic_vector(Delay1_out1);

  input(0) <= input_0;
  input(1) <= input_1;
  input(2) <= input_2;
  input(3) <= input_3;

  input_4 <= input;

  Constant_out1 <= X"00000000";

  Mux2_out1(0) <= input_4(2);
  Mux2_out1(1) <= input_4(3);
  Mux2_out1(2) <= Constant_out1;
  Mux2_out1(3) <= Constant_out1;
  Mux2_out1(4) <= Constant_out1;
  Mux2_out1(5) <= Constant_out1;
  Mux2_out1(6) <= Constant_out1;
  Mux2_out1(7) <= Constant_out1;
  Mux2_out1(8) <= Constant_out1;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux2_out1_1(0) <= X"00000000";
        Mux2_out1_1(1) <= X"00000000";
        Mux2_out1_1(2) <= X"00000000";
        Mux2_out1_1(3) <= X"00000000";
        Mux2_out1_1(4) <= X"00000000";
        Mux2_out1_1(5) <= X"00000000";
        Mux2_out1_1(6) <= X"00000000";
        Mux2_out1_1(7) <= X"00000000";
        Mux2_out1_1(8) <= X"00000000";
      ELSIF enb = '1' THEN
        Mux2_out1_1(0) <= Mux2_out1(0);
        Mux2_out1_1(1) <= Mux2_out1(1);
        Mux2_out1_1(2) <= Mux2_out1(2);
        Mux2_out1_1(3) <= Mux2_out1(3);
        Mux2_out1_1(4) <= Mux2_out1(4);
        Mux2_out1_1(5) <= Mux2_out1(5);
        Mux2_out1_1(6) <= Mux2_out1(6);
        Mux2_out1_1(7) <= Mux2_out1(7);
        Mux2_out1_1(8) <= Mux2_out1(8);
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  Switch_out1(0) <= Transformation_out1(0) WHEN switch_pspl_1 = '0' ELSE
      Mux2_out1_1(0);
  
  Switch_out1(1) <= Transformation_out1(1) WHEN switch_pspl_1 = '0' ELSE
      Mux2_out1_1(1);
  
  Switch_out1(2) <= Transformation_out1(2) WHEN switch_pspl_1 = '0' ELSE
      Mux2_out1_1(2);
  
  Switch_out1(3) <= Transformation_out1(3) WHEN switch_pspl_1 = '0' ELSE
      Mux2_out1_1(3);
  
  Switch_out1(4) <= Transformation_out1(4) WHEN switch_pspl_1 = '0' ELSE
      Mux2_out1_1(4);
  
  Switch_out1(5) <= Transformation_out1(5) WHEN switch_pspl_1 = '0' ELSE
      Mux2_out1_1(5);
  
  Switch_out1(6) <= Transformation_out1(6) WHEN switch_pspl_1 = '0' ELSE
      Mux2_out1_1(6);
  
  Switch_out1(7) <= Transformation_out1(7) WHEN switch_pspl_1 = '0' ELSE
      Mux2_out1_1(7);
  
  Switch_out1(8) <= Transformation_out1(8) WHEN switch_pspl_1 = '0' ELSE
      Mux2_out1_1(8);

  alpha1_L_d <= physical_parameters_1_L_d;

  delayMatch33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch33_reg(0) <= X"0000000000000000";
        delayMatch33_reg(1) <= X"0000000000000000";
        delayMatch33_reg(2) <= X"0000000000000000";
        delayMatch33_reg(3) <= X"0000000000000000";
        delayMatch33_reg(4) <= X"0000000000000000";
        delayMatch33_reg(5) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        delayMatch33_reg(0) <= delayMatch33_reg_next(0);
        delayMatch33_reg(1) <= delayMatch33_reg_next(1);
        delayMatch33_reg(2) <= delayMatch33_reg_next(2);
        delayMatch33_reg(3) <= delayMatch33_reg_next(3);
        delayMatch33_reg(4) <= delayMatch33_reg_next(4);
        delayMatch33_reg(5) <= delayMatch33_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch33_process;

  From10_out1 <= delayMatch33_reg(5);
  delayMatch33_reg_next(0) <= Data_Type_Conversion11_out1;
  delayMatch33_reg_next(1) <= delayMatch33_reg(0);
  delayMatch33_reg_next(2) <= delayMatch33_reg(1);
  delayMatch33_reg_next(3) <= delayMatch33_reg(2);
  delayMatch33_reg_next(4) <= delayMatch33_reg(3);
  delayMatch33_reg_next(5) <= delayMatch33_reg(4);

  psi_pm <= physical_parameters_psi_pm;

  physical_parameters_R_1_1 <= physical_parameters_R_1;

  simulate_mechanical <= Model_Parameter_simulate_mechanical;

  delayMatch25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch25_reg(0) <= '0';
        delayMatch25_reg(1) <= '0';
        delayMatch25_reg(2) <= '0';
      ELSIF enb = '1' THEN
        delayMatch25_reg(0) <= delayMatch25_reg_next(0);
        delayMatch25_reg(1) <= delayMatch25_reg_next(1);
        delayMatch25_reg(2) <= delayMatch25_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch25_process;

  simulate_mechanical_1 <= delayMatch25_reg(2);
  delayMatch25_reg_next(0) <= simulate_mechanical;
  delayMatch25_reg_next(1) <= delayMatch25_reg(0);
  delayMatch25_reg_next(2) <= delayMatch25_reg(1);

  input_1_1 <= input_4(1);

  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_reg(0) <= X"00000000";
        delayMatch26_reg(1) <= X"00000000";
        delayMatch26_reg(2) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch26_reg(0) <= delayMatch26_reg_next(0);
        delayMatch26_reg(1) <= delayMatch26_reg_next(1);
        delayMatch26_reg(2) <= delayMatch26_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch26_process;

  omega_mech <= delayMatch26_reg(2);
  delayMatch26_reg_next(0) <= input_1_1;
  delayMatch26_reg_next(1) <= delayMatch26_reg(0);
  delayMatch26_reg_next(2) <= delayMatch26_reg(1);

  reset_integrators_2 <= Model_Parameter_reset_integrators_1;

  delayMatch31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_3 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_3 <= reset_integrators_2;
      END IF;
    END IF;
  END PROCESS delayMatch31_process;


  kconst_2 <= X"3ec0c6f7a0b5ed8d";

  alpha1_J <= physical_parameters_1_J;

  delayMatch29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From15_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        From15_out1 <= alpha1_J;
      END IF;
    END IF;
  END PROCESS delayMatch29_process;


  load_torque <= input_4(0);

  Delay1_iv <= X"0000000000000000";

  physical_parameters_polepair_1 <= physical_parameters_polepair;

  polepair <= physical_parameters_polepair_1;

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_4 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_4 <= reset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  kconst_3 <= X"3ec0c6f7a0b5ed8d";

  alpha1_L_q <= physical_parameters_1_L_q;

  Delay1_iv_1 <= X"0000000000000000";

  Delay1_iv_2 <= X"0000000000000000";

  polepair_1 <= physical_parameters_polepair_1;

  delayMatch38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch38_reg(0) <= X"00000000";
        delayMatch38_reg(1) <= X"00000000";
        delayMatch38_reg(2) <= X"00000000";
        delayMatch38_reg(3) <= X"00000000";
        delayMatch38_reg(4) <= X"00000000";
        delayMatch38_reg(5) <= X"00000000";
        delayMatch38_reg(6) <= X"00000000";
        delayMatch38_reg(7) <= X"00000000";
        delayMatch38_reg(8) <= X"00000000";
        delayMatch38_reg(9) <= X"00000000";
        delayMatch38_reg(10) <= X"00000000";
        delayMatch38_reg(11) <= X"00000000";
        delayMatch38_reg(12) <= X"00000000";
        delayMatch38_reg(13) <= X"00000000";
        delayMatch38_reg(14) <= X"00000000";
        delayMatch38_reg(15) <= X"00000000";
        delayMatch38_reg(16) <= X"00000000";
        delayMatch38_reg(17) <= X"00000000";
        delayMatch38_reg(18) <= X"00000000";
        delayMatch38_reg(19) <= X"00000000";
        delayMatch38_reg(20) <= X"00000000";
        delayMatch38_reg(21) <= X"00000000";
        delayMatch38_reg(22) <= X"00000000";
        delayMatch38_reg(23) <= X"00000000";
        delayMatch38_reg(24) <= X"00000000";
        delayMatch38_reg(25) <= X"00000000";
        delayMatch38_reg(26) <= X"00000000";
        delayMatch38_reg(27) <= X"00000000";
        delayMatch38_reg(28) <= X"00000000";
        delayMatch38_reg(29) <= X"00000000";
        delayMatch38_reg(30) <= X"00000000";
        delayMatch38_reg(31) <= X"00000000";
        delayMatch38_reg(32) <= X"00000000";
        delayMatch38_reg(33) <= X"00000000";
        delayMatch38_reg(34) <= X"00000000";
        delayMatch38_reg(35) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch38_reg(0) <= delayMatch38_reg_next(0);
        delayMatch38_reg(1) <= delayMatch38_reg_next(1);
        delayMatch38_reg(2) <= delayMatch38_reg_next(2);
        delayMatch38_reg(3) <= delayMatch38_reg_next(3);
        delayMatch38_reg(4) <= delayMatch38_reg_next(4);
        delayMatch38_reg(5) <= delayMatch38_reg_next(5);
        delayMatch38_reg(6) <= delayMatch38_reg_next(6);
        delayMatch38_reg(7) <= delayMatch38_reg_next(7);
        delayMatch38_reg(8) <= delayMatch38_reg_next(8);
        delayMatch38_reg(9) <= delayMatch38_reg_next(9);
        delayMatch38_reg(10) <= delayMatch38_reg_next(10);
        delayMatch38_reg(11) <= delayMatch38_reg_next(11);
        delayMatch38_reg(12) <= delayMatch38_reg_next(12);
        delayMatch38_reg(13) <= delayMatch38_reg_next(13);
        delayMatch38_reg(14) <= delayMatch38_reg_next(14);
        delayMatch38_reg(15) <= delayMatch38_reg_next(15);
        delayMatch38_reg(16) <= delayMatch38_reg_next(16);
        delayMatch38_reg(17) <= delayMatch38_reg_next(17);
        delayMatch38_reg(18) <= delayMatch38_reg_next(18);
        delayMatch38_reg(19) <= delayMatch38_reg_next(19);
        delayMatch38_reg(20) <= delayMatch38_reg_next(20);
        delayMatch38_reg(21) <= delayMatch38_reg_next(21);
        delayMatch38_reg(22) <= delayMatch38_reg_next(22);
        delayMatch38_reg(23) <= delayMatch38_reg_next(23);
        delayMatch38_reg(24) <= delayMatch38_reg_next(24);
        delayMatch38_reg(25) <= delayMatch38_reg_next(25);
        delayMatch38_reg(26) <= delayMatch38_reg_next(26);
        delayMatch38_reg(27) <= delayMatch38_reg_next(27);
        delayMatch38_reg(28) <= delayMatch38_reg_next(28);
        delayMatch38_reg(29) <= delayMatch38_reg_next(29);
        delayMatch38_reg(30) <= delayMatch38_reg_next(30);
        delayMatch38_reg(31) <= delayMatch38_reg_next(31);
        delayMatch38_reg(32) <= delayMatch38_reg_next(32);
        delayMatch38_reg(33) <= delayMatch38_reg_next(33);
        delayMatch38_reg(34) <= delayMatch38_reg_next(34);
        delayMatch38_reg(35) <= delayMatch38_reg_next(35);
      END IF;
    END IF;
  END PROCESS delayMatch38_process;

  From_out1 <= delayMatch38_reg(35);
  delayMatch38_reg_next(0) <= polepair_1;
  delayMatch38_reg_next(1) <= delayMatch38_reg(0);
  delayMatch38_reg_next(2) <= delayMatch38_reg(1);
  delayMatch38_reg_next(3) <= delayMatch38_reg(2);
  delayMatch38_reg_next(4) <= delayMatch38_reg(3);
  delayMatch38_reg_next(5) <= delayMatch38_reg(4);
  delayMatch38_reg_next(6) <= delayMatch38_reg(5);
  delayMatch38_reg_next(7) <= delayMatch38_reg(6);
  delayMatch38_reg_next(8) <= delayMatch38_reg(7);
  delayMatch38_reg_next(9) <= delayMatch38_reg(8);
  delayMatch38_reg_next(10) <= delayMatch38_reg(9);
  delayMatch38_reg_next(11) <= delayMatch38_reg(10);
  delayMatch38_reg_next(12) <= delayMatch38_reg(11);
  delayMatch38_reg_next(13) <= delayMatch38_reg(12);
  delayMatch38_reg_next(14) <= delayMatch38_reg(13);
  delayMatch38_reg_next(15) <= delayMatch38_reg(14);
  delayMatch38_reg_next(16) <= delayMatch38_reg(15);
  delayMatch38_reg_next(17) <= delayMatch38_reg(16);
  delayMatch38_reg_next(18) <= delayMatch38_reg(17);
  delayMatch38_reg_next(19) <= delayMatch38_reg(18);
  delayMatch38_reg_next(20) <= delayMatch38_reg(19);
  delayMatch38_reg_next(21) <= delayMatch38_reg(20);
  delayMatch38_reg_next(22) <= delayMatch38_reg(21);
  delayMatch38_reg_next(23) <= delayMatch38_reg(22);
  delayMatch38_reg_next(24) <= delayMatch38_reg(23);
  delayMatch38_reg_next(25) <= delayMatch38_reg(24);
  delayMatch38_reg_next(26) <= delayMatch38_reg(25);
  delayMatch38_reg_next(27) <= delayMatch38_reg(26);
  delayMatch38_reg_next(28) <= delayMatch38_reg(27);
  delayMatch38_reg_next(29) <= delayMatch38_reg(28);
  delayMatch38_reg_next(30) <= delayMatch38_reg(29);
  delayMatch38_reg_next(31) <= delayMatch38_reg(30);
  delayMatch38_reg_next(32) <= delayMatch38_reg(31);
  delayMatch38_reg_next(33) <= delayMatch38_reg(32);
  delayMatch38_reg_next(34) <= delayMatch38_reg(33);
  delayMatch38_reg_next(35) <= delayMatch38_reg(34);

  delayMatch36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch36_reg(0) <= X"00000000";
        delayMatch36_reg(1) <= X"00000000";
        delayMatch36_reg(2) <= X"00000000";
        delayMatch36_reg(3) <= X"00000000";
        delayMatch36_reg(4) <= X"00000000";
        delayMatch36_reg(5) <= X"00000000";
        delayMatch36_reg(6) <= X"00000000";
        delayMatch36_reg(7) <= X"00000000";
        delayMatch36_reg(8) <= X"00000000";
        delayMatch36_reg(9) <= X"00000000";
        delayMatch36_reg(10) <= X"00000000";
        delayMatch36_reg(11) <= X"00000000";
        delayMatch36_reg(12) <= X"00000000";
        delayMatch36_reg(13) <= X"00000000";
        delayMatch36_reg(14) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch36_reg(0) <= delayMatch36_reg_next(0);
        delayMatch36_reg(1) <= delayMatch36_reg_next(1);
        delayMatch36_reg(2) <= delayMatch36_reg_next(2);
        delayMatch36_reg(3) <= delayMatch36_reg_next(3);
        delayMatch36_reg(4) <= delayMatch36_reg_next(4);
        delayMatch36_reg(5) <= delayMatch36_reg_next(5);
        delayMatch36_reg(6) <= delayMatch36_reg_next(6);
        delayMatch36_reg(7) <= delayMatch36_reg_next(7);
        delayMatch36_reg(8) <= delayMatch36_reg_next(8);
        delayMatch36_reg(9) <= delayMatch36_reg_next(9);
        delayMatch36_reg(10) <= delayMatch36_reg_next(10);
        delayMatch36_reg(11) <= delayMatch36_reg_next(11);
        delayMatch36_reg(12) <= delayMatch36_reg_next(12);
        delayMatch36_reg(13) <= delayMatch36_reg_next(13);
        delayMatch36_reg(14) <= delayMatch36_reg_next(14);
      END IF;
    END IF;
  END PROCESS delayMatch36_process;

  pmsm_out4 <= delayMatch36_reg(14);
  delayMatch36_reg_next(0) <= Data_Type_Conversion13_out1;
  delayMatch36_reg_next(1) <= delayMatch36_reg(0);
  delayMatch36_reg_next(2) <= delayMatch36_reg(1);
  delayMatch36_reg_next(3) <= delayMatch36_reg(2);
  delayMatch36_reg_next(4) <= delayMatch36_reg(3);
  delayMatch36_reg_next(5) <= delayMatch36_reg(4);
  delayMatch36_reg_next(6) <= delayMatch36_reg(5);
  delayMatch36_reg_next(7) <= delayMatch36_reg(6);
  delayMatch36_reg_next(8) <= delayMatch36_reg(7);
  delayMatch36_reg_next(9) <= delayMatch36_reg(8);
  delayMatch36_reg_next(10) <= delayMatch36_reg(9);
  delayMatch36_reg_next(11) <= delayMatch36_reg(10);
  delayMatch36_reg_next(12) <= delayMatch36_reg(11);
  delayMatch36_reg_next(13) <= delayMatch36_reg(12);
  delayMatch36_reg_next(14) <= delayMatch36_reg(13);

  i_d_1 <= Data_Type_Conversion32_out1;

  I_q_1 <= I_q;

  i_q_2 <= Data_Type_Conversion31_out1;

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_4 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_4 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_5 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_5 <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= X"0000000000000000";
        reduced_reg(1) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
      END IF;
    END IF;
  END PROCESS reduced_process;

  psi_q_1 <= reduced_reg(1);
  reduced_reg_next(0) <= psi_q;
  reduced_reg_next(1) <= reduced_reg(0);

  omega_el_1 <= omega_el;

  
  Delay1_toDel <= Sum3_out1 WHEN reset_integrators_4 = '0' ELSE
      Delay1_iv_1;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_1 <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_2 <= Delay1_toDel_1 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut <= Delay1_toDel_2;

  
  Delay1_out1_2 <= Delay1_delOut WHEN reset_integrators = '0' ELSE
      Delay1_iv_1;

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_q <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_q <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_7 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_7 <= Delay1_out1_6;
      END IF;
    END IF;
  END PROCESS delayMatch30_process;


  M_Mi_1 <= M_Mi;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        M_Mi_2 <= X"00000000";
      ELSIF enb = '1' THEN
        M_Mi_2 <= M_Mi_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_bypass_reg <= X"00000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay8_bypass_reg <= M_Mi_2;
      END IF;
    END IF;
  END PROCESS Delay8_bypass_process;

  
  M_Mi_3 <= M_Mi_2 WHEN enb_1_200_1 = '1' ELSE
      Delay8_bypass_reg;

  
  Delay1_toDel_3 <= Sum3_out1_1 WHEN reset_integrators_3 = '0' ELSE
      Delay1_iv;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_4 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_4 <= Delay1_toDel_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay1_lowered1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered1_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered1_bypass_reg <= Delay1_toDel_4;
      END IF;
    END IF;
  END PROCESS Delay1_lowered1_bypass_process;

  
  Delay1_toDel_5 <= Delay1_toDel_4 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered1_bypass_reg;

  Delay1_delOut_1 <= Delay1_toDel_5;

  
  Delay1_out1_6 <= Delay1_delOut_1 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv;

  
  Switch1_out1 <= omega_mech WHEN simulate_mechanical_1 = '0' ELSE
      Data_Type_Conversion8_out1;

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_d <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_d <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= X"0000000000000000";
        reduced_reg_1(1) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  psi_d_1 <= reduced_reg_1(1);
  reduced_reg_next_1(0) <= psi_d;
  reduced_reg_next_1(1) <= reduced_reg_1(0);

  I_d_2 <= I_d;

  
  Delay1_toDel_6 <= Sum3_out1_2 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv_2;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_7 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_7 <= Delay1_toDel_6;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay1_lowered2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered2_bypass_reg <= Delay1_toDel_7;
      END IF;
    END IF;
  END PROCESS Delay1_lowered2_bypass_process;

  
  Delay1_toDel_8 <= Delay1_toDel_7 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered2_bypass_reg;

  Delay1_delOut_2 <= Delay1_toDel_8;

  
  Delay1_out1_3 <= Delay1_delOut_2 WHEN reset_integrators = '0' ELSE
      Delay1_iv_2;

  delayMatch35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch35_reg(0) <= X"00000000";
        delayMatch35_reg(1) <= X"00000000";
        delayMatch35_reg(2) <= X"00000000";
        delayMatch35_reg(3) <= X"00000000";
        delayMatch35_reg(4) <= X"00000000";
        delayMatch35_reg(5) <= X"00000000";
        delayMatch35_reg(6) <= X"00000000";
        delayMatch35_reg(7) <= X"00000000";
        delayMatch35_reg(8) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch35_reg(0) <= delayMatch35_reg_next(0);
        delayMatch35_reg(1) <= delayMatch35_reg_next(1);
        delayMatch35_reg(2) <= delayMatch35_reg_next(2);
        delayMatch35_reg(3) <= delayMatch35_reg_next(3);
        delayMatch35_reg(4) <= delayMatch35_reg_next(4);
        delayMatch35_reg(5) <= delayMatch35_reg_next(5);
        delayMatch35_reg(6) <= delayMatch35_reg_next(6);
        delayMatch35_reg(7) <= delayMatch35_reg_next(7);
        delayMatch35_reg(8) <= delayMatch35_reg_next(8);
      END IF;
    END IF;
  END PROCESS delayMatch35_process;

  pmsm_out3 <= delayMatch35_reg(8);
  delayMatch35_reg_next(0) <= Data_Type_Conversion23_out1;
  delayMatch35_reg_next(1) <= delayMatch35_reg(0);
  delayMatch35_reg_next(2) <= delayMatch35_reg(1);
  delayMatch35_reg_next(3) <= delayMatch35_reg(2);
  delayMatch35_reg_next(4) <= delayMatch35_reg(3);
  delayMatch35_reg_next(5) <= delayMatch35_reg(4);
  delayMatch35_reg_next(6) <= delayMatch35_reg(5);
  delayMatch35_reg_next(7) <= delayMatch35_reg(6);
  delayMatch35_reg_next(8) <= delayMatch35_reg(7);

  delayMatch37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch37_reg(0) <= X"00000000";
        delayMatch37_reg(1) <= X"00000000";
        delayMatch37_reg(2) <= X"00000000";
        delayMatch37_reg(3) <= X"00000000";
        delayMatch37_reg(4) <= X"00000000";
        delayMatch37_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch37_reg(0) <= delayMatch37_reg_next(0);
        delayMatch37_reg(1) <= delayMatch37_reg_next(1);
        delayMatch37_reg(2) <= delayMatch37_reg_next(2);
        delayMatch37_reg(3) <= delayMatch37_reg_next(3);
        delayMatch37_reg(4) <= delayMatch37_reg_next(4);
        delayMatch37_reg(5) <= delayMatch37_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch37_process;

  Product3_out1_1 <= delayMatch37_reg(5);
  delayMatch37_reg_next(0) <= Product3_out1;
  delayMatch37_reg_next(1) <= delayMatch37_reg(0);
  delayMatch37_reg_next(2) <= delayMatch37_reg(1);
  delayMatch37_reg_next(3) <= delayMatch37_reg(2);
  delayMatch37_reg_next(4) <= delayMatch37_reg(3);
  delayMatch37_reg_next(5) <= delayMatch37_reg(4);

  M_Mi_5 <= M_Mi_4;

  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From5_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        From5_out1 <= polepair_1;
      END IF;
    END IF;
  END PROCESS delayMatch20_process;


  delayMatch54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch54_reg(0) <= '0';
        delayMatch54_reg(1) <= '0';
        delayMatch54_reg(2) <= '0';
        delayMatch54_reg(3) <= '0';
        delayMatch54_reg(4) <= '0';
        delayMatch54_reg(5) <= '0';
        delayMatch54_reg(6) <= '0';
        delayMatch54_reg(7) <= '0';
        delayMatch54_reg(8) <= '0';
        delayMatch54_reg(9) <= '0';
        delayMatch54_reg(10) <= '0';
        delayMatch54_reg(11) <= '0';
        delayMatch54_reg(12) <= '0';
        delayMatch54_reg(13) <= '0';
        delayMatch54_reg(14) <= '0';
        delayMatch54_reg(15) <= '0';
        delayMatch54_reg(16) <= '0';
        delayMatch54_reg(17) <= '0';
        delayMatch54_reg(18) <= '0';
        delayMatch54_reg(19) <= '0';
        delayMatch54_reg(20) <= '0';
        delayMatch54_reg(21) <= '0';
        delayMatch54_reg(22) <= '0';
        delayMatch54_reg(23) <= '0';
        delayMatch54_reg(24) <= '0';
        delayMatch54_reg(25) <= '0';
        delayMatch54_reg(26) <= '0';
        delayMatch54_reg(27) <= '0';
        delayMatch54_reg(28) <= '0';
        delayMatch54_reg(29) <= '0';
        delayMatch54_reg(30) <= '0';
        delayMatch54_reg(31) <= '0';
        delayMatch54_reg(32) <= '0';
        delayMatch54_reg(33) <= '0';
        delayMatch54_reg(34) <= '0';
        delayMatch54_reg(35) <= '0';
        delayMatch54_reg(36) <= '0';
        delayMatch54_reg(37) <= '0';
        delayMatch54_reg(38) <= '0';
        delayMatch54_reg(39) <= '0';
        delayMatch54_reg(40) <= '0';
        delayMatch54_reg(41) <= '0';
        delayMatch54_reg(42) <= '0';
        delayMatch54_reg(43) <= '0';
        delayMatch54_reg(44) <= '0';
        delayMatch54_reg(45) <= '0';
        delayMatch54_reg(46) <= '0';
        delayMatch54_reg(47) <= '0';
        delayMatch54_reg(48) <= '0';
        delayMatch54_reg(49) <= '0';
        delayMatch54_reg(50) <= '0';
        delayMatch54_reg(51) <= '0';
        delayMatch54_reg(52) <= '0';
        delayMatch54_reg(53) <= '0';
        delayMatch54_reg(54) <= '0';
        delayMatch54_reg(55) <= '0';
        delayMatch54_reg(56) <= '0';
        delayMatch54_reg(57) <= '0';
        delayMatch54_reg(58) <= '0';
        delayMatch54_reg(59) <= '0';
        delayMatch54_reg(60) <= '0';
        delayMatch54_reg(61) <= '0';
        delayMatch54_reg(62) <= '0';
        delayMatch54_reg(63) <= '0';
        delayMatch54_reg(64) <= '0';
        delayMatch54_reg(65) <= '0';
        delayMatch54_reg(66) <= '0';
        delayMatch54_reg(67) <= '0';
        delayMatch54_reg(68) <= '0';
        delayMatch54_reg(69) <= '0';
        delayMatch54_reg(70) <= '0';
        delayMatch54_reg(71) <= '0';
        delayMatch54_reg(72) <= '0';
        delayMatch54_reg(73) <= '0';
        delayMatch54_reg(74) <= '0';
        delayMatch54_reg(75) <= '0';
        delayMatch54_reg(76) <= '0';
        delayMatch54_reg(77) <= '0';
        delayMatch54_reg(78) <= '0';
        delayMatch54_reg(79) <= '0';
        delayMatch54_reg(80) <= '0';
        delayMatch54_reg(81) <= '0';
        delayMatch54_reg(82) <= '0';
        delayMatch54_reg(83) <= '0';
        delayMatch54_reg(84) <= '0';
        delayMatch54_reg(85) <= '0';
        delayMatch54_reg(86) <= '0';
        delayMatch54_reg(87) <= '0';
        delayMatch54_reg(88) <= '0';
        delayMatch54_reg(89) <= '0';
        delayMatch54_reg(90) <= '0';
        delayMatch54_reg(91) <= '0';
        delayMatch54_reg(92) <= '0';
        delayMatch54_reg(93) <= '0';
        delayMatch54_reg(94) <= '0';
        delayMatch54_reg(95) <= '0';
        delayMatch54_reg(96) <= '0';
        delayMatch54_reg(97) <= '0';
        delayMatch54_reg(98) <= '0';
        delayMatch54_reg(99) <= '0';
        delayMatch54_reg(100) <= '0';
        delayMatch54_reg(101) <= '0';
        delayMatch54_reg(102) <= '0';
        delayMatch54_reg(103) <= '0';
        delayMatch54_reg(104) <= '0';
        delayMatch54_reg(105) <= '0';
        delayMatch54_reg(106) <= '0';
        delayMatch54_reg(107) <= '0';
        delayMatch54_reg(108) <= '0';
        delayMatch54_reg(109) <= '0';
        delayMatch54_reg(110) <= '0';
        delayMatch54_reg(111) <= '0';
        delayMatch54_reg(112) <= '0';
        delayMatch54_reg(113) <= '0';
        delayMatch54_reg(114) <= '0';
        delayMatch54_reg(115) <= '0';
        delayMatch54_reg(116) <= '0';
        delayMatch54_reg(117) <= '0';
        delayMatch54_reg(118) <= '0';
        delayMatch54_reg(119) <= '0';
        delayMatch54_reg(120) <= '0';
        delayMatch54_reg(121) <= '0';
        delayMatch54_reg(122) <= '0';
        delayMatch54_reg(123) <= '0';
        delayMatch54_reg(124) <= '0';
        delayMatch54_reg(125) <= '0';
        delayMatch54_reg(126) <= '0';
        delayMatch54_reg(127) <= '0';
        delayMatch54_reg(128) <= '0';
        delayMatch54_reg(129) <= '0';
        delayMatch54_reg(130) <= '0';
        delayMatch54_reg(131) <= '0';
        delayMatch54_reg(132) <= '0';
        delayMatch54_reg(133) <= '0';
        delayMatch54_reg(134) <= '0';
        delayMatch54_reg(135) <= '0';
        delayMatch54_reg(136) <= '0';
        delayMatch54_reg(137) <= '0';
        delayMatch54_reg(138) <= '0';
        delayMatch54_reg(139) <= '0';
        delayMatch54_reg(140) <= '0';
        delayMatch54_reg(141) <= '0';
        delayMatch54_reg(142) <= '0';
        delayMatch54_reg(143) <= '0';
        delayMatch54_reg(144) <= '0';
        delayMatch54_reg(145) <= '0';
        delayMatch54_reg(146) <= '0';
        delayMatch54_reg(147) <= '0';
        delayMatch54_reg(148) <= '0';
        delayMatch54_reg(149) <= '0';
        delayMatch54_reg(150) <= '0';
        delayMatch54_reg(151) <= '0';
        delayMatch54_reg(152) <= '0';
        delayMatch54_reg(153) <= '0';
        delayMatch54_reg(154) <= '0';
        delayMatch54_reg(155) <= '0';
        delayMatch54_reg(156) <= '0';
        delayMatch54_reg(157) <= '0';
        delayMatch54_reg(158) <= '0';
        delayMatch54_reg(159) <= '0';
      ELSIF enb = '1' THEN
        delayMatch54_reg(0) <= delayMatch54_reg_next(0);
        delayMatch54_reg(1) <= delayMatch54_reg_next(1);
        delayMatch54_reg(2) <= delayMatch54_reg_next(2);
        delayMatch54_reg(3) <= delayMatch54_reg_next(3);
        delayMatch54_reg(4) <= delayMatch54_reg_next(4);
        delayMatch54_reg(5) <= delayMatch54_reg_next(5);
        delayMatch54_reg(6) <= delayMatch54_reg_next(6);
        delayMatch54_reg(7) <= delayMatch54_reg_next(7);
        delayMatch54_reg(8) <= delayMatch54_reg_next(8);
        delayMatch54_reg(9) <= delayMatch54_reg_next(9);
        delayMatch54_reg(10) <= delayMatch54_reg_next(10);
        delayMatch54_reg(11) <= delayMatch54_reg_next(11);
        delayMatch54_reg(12) <= delayMatch54_reg_next(12);
        delayMatch54_reg(13) <= delayMatch54_reg_next(13);
        delayMatch54_reg(14) <= delayMatch54_reg_next(14);
        delayMatch54_reg(15) <= delayMatch54_reg_next(15);
        delayMatch54_reg(16) <= delayMatch54_reg_next(16);
        delayMatch54_reg(17) <= delayMatch54_reg_next(17);
        delayMatch54_reg(18) <= delayMatch54_reg_next(18);
        delayMatch54_reg(19) <= delayMatch54_reg_next(19);
        delayMatch54_reg(20) <= delayMatch54_reg_next(20);
        delayMatch54_reg(21) <= delayMatch54_reg_next(21);
        delayMatch54_reg(22) <= delayMatch54_reg_next(22);
        delayMatch54_reg(23) <= delayMatch54_reg_next(23);
        delayMatch54_reg(24) <= delayMatch54_reg_next(24);
        delayMatch54_reg(25) <= delayMatch54_reg_next(25);
        delayMatch54_reg(26) <= delayMatch54_reg_next(26);
        delayMatch54_reg(27) <= delayMatch54_reg_next(27);
        delayMatch54_reg(28) <= delayMatch54_reg_next(28);
        delayMatch54_reg(29) <= delayMatch54_reg_next(29);
        delayMatch54_reg(30) <= delayMatch54_reg_next(30);
        delayMatch54_reg(31) <= delayMatch54_reg_next(31);
        delayMatch54_reg(32) <= delayMatch54_reg_next(32);
        delayMatch54_reg(33) <= delayMatch54_reg_next(33);
        delayMatch54_reg(34) <= delayMatch54_reg_next(34);
        delayMatch54_reg(35) <= delayMatch54_reg_next(35);
        delayMatch54_reg(36) <= delayMatch54_reg_next(36);
        delayMatch54_reg(37) <= delayMatch54_reg_next(37);
        delayMatch54_reg(38) <= delayMatch54_reg_next(38);
        delayMatch54_reg(39) <= delayMatch54_reg_next(39);
        delayMatch54_reg(40) <= delayMatch54_reg_next(40);
        delayMatch54_reg(41) <= delayMatch54_reg_next(41);
        delayMatch54_reg(42) <= delayMatch54_reg_next(42);
        delayMatch54_reg(43) <= delayMatch54_reg_next(43);
        delayMatch54_reg(44) <= delayMatch54_reg_next(44);
        delayMatch54_reg(45) <= delayMatch54_reg_next(45);
        delayMatch54_reg(46) <= delayMatch54_reg_next(46);
        delayMatch54_reg(47) <= delayMatch54_reg_next(47);
        delayMatch54_reg(48) <= delayMatch54_reg_next(48);
        delayMatch54_reg(49) <= delayMatch54_reg_next(49);
        delayMatch54_reg(50) <= delayMatch54_reg_next(50);
        delayMatch54_reg(51) <= delayMatch54_reg_next(51);
        delayMatch54_reg(52) <= delayMatch54_reg_next(52);
        delayMatch54_reg(53) <= delayMatch54_reg_next(53);
        delayMatch54_reg(54) <= delayMatch54_reg_next(54);
        delayMatch54_reg(55) <= delayMatch54_reg_next(55);
        delayMatch54_reg(56) <= delayMatch54_reg_next(56);
        delayMatch54_reg(57) <= delayMatch54_reg_next(57);
        delayMatch54_reg(58) <= delayMatch54_reg_next(58);
        delayMatch54_reg(59) <= delayMatch54_reg_next(59);
        delayMatch54_reg(60) <= delayMatch54_reg_next(60);
        delayMatch54_reg(61) <= delayMatch54_reg_next(61);
        delayMatch54_reg(62) <= delayMatch54_reg_next(62);
        delayMatch54_reg(63) <= delayMatch54_reg_next(63);
        delayMatch54_reg(64) <= delayMatch54_reg_next(64);
        delayMatch54_reg(65) <= delayMatch54_reg_next(65);
        delayMatch54_reg(66) <= delayMatch54_reg_next(66);
        delayMatch54_reg(67) <= delayMatch54_reg_next(67);
        delayMatch54_reg(68) <= delayMatch54_reg_next(68);
        delayMatch54_reg(69) <= delayMatch54_reg_next(69);
        delayMatch54_reg(70) <= delayMatch54_reg_next(70);
        delayMatch54_reg(71) <= delayMatch54_reg_next(71);
        delayMatch54_reg(72) <= delayMatch54_reg_next(72);
        delayMatch54_reg(73) <= delayMatch54_reg_next(73);
        delayMatch54_reg(74) <= delayMatch54_reg_next(74);
        delayMatch54_reg(75) <= delayMatch54_reg_next(75);
        delayMatch54_reg(76) <= delayMatch54_reg_next(76);
        delayMatch54_reg(77) <= delayMatch54_reg_next(77);
        delayMatch54_reg(78) <= delayMatch54_reg_next(78);
        delayMatch54_reg(79) <= delayMatch54_reg_next(79);
        delayMatch54_reg(80) <= delayMatch54_reg_next(80);
        delayMatch54_reg(81) <= delayMatch54_reg_next(81);
        delayMatch54_reg(82) <= delayMatch54_reg_next(82);
        delayMatch54_reg(83) <= delayMatch54_reg_next(83);
        delayMatch54_reg(84) <= delayMatch54_reg_next(84);
        delayMatch54_reg(85) <= delayMatch54_reg_next(85);
        delayMatch54_reg(86) <= delayMatch54_reg_next(86);
        delayMatch54_reg(87) <= delayMatch54_reg_next(87);
        delayMatch54_reg(88) <= delayMatch54_reg_next(88);
        delayMatch54_reg(89) <= delayMatch54_reg_next(89);
        delayMatch54_reg(90) <= delayMatch54_reg_next(90);
        delayMatch54_reg(91) <= delayMatch54_reg_next(91);
        delayMatch54_reg(92) <= delayMatch54_reg_next(92);
        delayMatch54_reg(93) <= delayMatch54_reg_next(93);
        delayMatch54_reg(94) <= delayMatch54_reg_next(94);
        delayMatch54_reg(95) <= delayMatch54_reg_next(95);
        delayMatch54_reg(96) <= delayMatch54_reg_next(96);
        delayMatch54_reg(97) <= delayMatch54_reg_next(97);
        delayMatch54_reg(98) <= delayMatch54_reg_next(98);
        delayMatch54_reg(99) <= delayMatch54_reg_next(99);
        delayMatch54_reg(100) <= delayMatch54_reg_next(100);
        delayMatch54_reg(101) <= delayMatch54_reg_next(101);
        delayMatch54_reg(102) <= delayMatch54_reg_next(102);
        delayMatch54_reg(103) <= delayMatch54_reg_next(103);
        delayMatch54_reg(104) <= delayMatch54_reg_next(104);
        delayMatch54_reg(105) <= delayMatch54_reg_next(105);
        delayMatch54_reg(106) <= delayMatch54_reg_next(106);
        delayMatch54_reg(107) <= delayMatch54_reg_next(107);
        delayMatch54_reg(108) <= delayMatch54_reg_next(108);
        delayMatch54_reg(109) <= delayMatch54_reg_next(109);
        delayMatch54_reg(110) <= delayMatch54_reg_next(110);
        delayMatch54_reg(111) <= delayMatch54_reg_next(111);
        delayMatch54_reg(112) <= delayMatch54_reg_next(112);
        delayMatch54_reg(113) <= delayMatch54_reg_next(113);
        delayMatch54_reg(114) <= delayMatch54_reg_next(114);
        delayMatch54_reg(115) <= delayMatch54_reg_next(115);
        delayMatch54_reg(116) <= delayMatch54_reg_next(116);
        delayMatch54_reg(117) <= delayMatch54_reg_next(117);
        delayMatch54_reg(118) <= delayMatch54_reg_next(118);
        delayMatch54_reg(119) <= delayMatch54_reg_next(119);
        delayMatch54_reg(120) <= delayMatch54_reg_next(120);
        delayMatch54_reg(121) <= delayMatch54_reg_next(121);
        delayMatch54_reg(122) <= delayMatch54_reg_next(122);
        delayMatch54_reg(123) <= delayMatch54_reg_next(123);
        delayMatch54_reg(124) <= delayMatch54_reg_next(124);
        delayMatch54_reg(125) <= delayMatch54_reg_next(125);
        delayMatch54_reg(126) <= delayMatch54_reg_next(126);
        delayMatch54_reg(127) <= delayMatch54_reg_next(127);
        delayMatch54_reg(128) <= delayMatch54_reg_next(128);
        delayMatch54_reg(129) <= delayMatch54_reg_next(129);
        delayMatch54_reg(130) <= delayMatch54_reg_next(130);
        delayMatch54_reg(131) <= delayMatch54_reg_next(131);
        delayMatch54_reg(132) <= delayMatch54_reg_next(132);
        delayMatch54_reg(133) <= delayMatch54_reg_next(133);
        delayMatch54_reg(134) <= delayMatch54_reg_next(134);
        delayMatch54_reg(135) <= delayMatch54_reg_next(135);
        delayMatch54_reg(136) <= delayMatch54_reg_next(136);
        delayMatch54_reg(137) <= delayMatch54_reg_next(137);
        delayMatch54_reg(138) <= delayMatch54_reg_next(138);
        delayMatch54_reg(139) <= delayMatch54_reg_next(139);
        delayMatch54_reg(140) <= delayMatch54_reg_next(140);
        delayMatch54_reg(141) <= delayMatch54_reg_next(141);
        delayMatch54_reg(142) <= delayMatch54_reg_next(142);
        delayMatch54_reg(143) <= delayMatch54_reg_next(143);
        delayMatch54_reg(144) <= delayMatch54_reg_next(144);
        delayMatch54_reg(145) <= delayMatch54_reg_next(145);
        delayMatch54_reg(146) <= delayMatch54_reg_next(146);
        delayMatch54_reg(147) <= delayMatch54_reg_next(147);
        delayMatch54_reg(148) <= delayMatch54_reg_next(148);
        delayMatch54_reg(149) <= delayMatch54_reg_next(149);
        delayMatch54_reg(150) <= delayMatch54_reg_next(150);
        delayMatch54_reg(151) <= delayMatch54_reg_next(151);
        delayMatch54_reg(152) <= delayMatch54_reg_next(152);
        delayMatch54_reg(153) <= delayMatch54_reg_next(153);
        delayMatch54_reg(154) <= delayMatch54_reg_next(154);
        delayMatch54_reg(155) <= delayMatch54_reg_next(155);
        delayMatch54_reg(156) <= delayMatch54_reg_next(156);
        delayMatch54_reg(157) <= delayMatch54_reg_next(157);
        delayMatch54_reg(158) <= delayMatch54_reg_next(158);
        delayMatch54_reg(159) <= delayMatch54_reg_next(159);
      END IF;
    END IF;
  END PROCESS delayMatch54_process;

  reset_integrators_5 <= delayMatch54_reg(159);
  delayMatch54_reg_next(0) <= reset_integrators_2;
  delayMatch54_reg_next(1) <= delayMatch54_reg(0);
  delayMatch54_reg_next(2) <= delayMatch54_reg(1);
  delayMatch54_reg_next(3) <= delayMatch54_reg(2);
  delayMatch54_reg_next(4) <= delayMatch54_reg(3);
  delayMatch54_reg_next(5) <= delayMatch54_reg(4);
  delayMatch54_reg_next(6) <= delayMatch54_reg(5);
  delayMatch54_reg_next(7) <= delayMatch54_reg(6);
  delayMatch54_reg_next(8) <= delayMatch54_reg(7);
  delayMatch54_reg_next(9) <= delayMatch54_reg(8);
  delayMatch54_reg_next(10) <= delayMatch54_reg(9);
  delayMatch54_reg_next(11) <= delayMatch54_reg(10);
  delayMatch54_reg_next(12) <= delayMatch54_reg(11);
  delayMatch54_reg_next(13) <= delayMatch54_reg(12);
  delayMatch54_reg_next(14) <= delayMatch54_reg(13);
  delayMatch54_reg_next(15) <= delayMatch54_reg(14);
  delayMatch54_reg_next(16) <= delayMatch54_reg(15);
  delayMatch54_reg_next(17) <= delayMatch54_reg(16);
  delayMatch54_reg_next(18) <= delayMatch54_reg(17);
  delayMatch54_reg_next(19) <= delayMatch54_reg(18);
  delayMatch54_reg_next(20) <= delayMatch54_reg(19);
  delayMatch54_reg_next(21) <= delayMatch54_reg(20);
  delayMatch54_reg_next(22) <= delayMatch54_reg(21);
  delayMatch54_reg_next(23) <= delayMatch54_reg(22);
  delayMatch54_reg_next(24) <= delayMatch54_reg(23);
  delayMatch54_reg_next(25) <= delayMatch54_reg(24);
  delayMatch54_reg_next(26) <= delayMatch54_reg(25);
  delayMatch54_reg_next(27) <= delayMatch54_reg(26);
  delayMatch54_reg_next(28) <= delayMatch54_reg(27);
  delayMatch54_reg_next(29) <= delayMatch54_reg(28);
  delayMatch54_reg_next(30) <= delayMatch54_reg(29);
  delayMatch54_reg_next(31) <= delayMatch54_reg(30);
  delayMatch54_reg_next(32) <= delayMatch54_reg(31);
  delayMatch54_reg_next(33) <= delayMatch54_reg(32);
  delayMatch54_reg_next(34) <= delayMatch54_reg(33);
  delayMatch54_reg_next(35) <= delayMatch54_reg(34);
  delayMatch54_reg_next(36) <= delayMatch54_reg(35);
  delayMatch54_reg_next(37) <= delayMatch54_reg(36);
  delayMatch54_reg_next(38) <= delayMatch54_reg(37);
  delayMatch54_reg_next(39) <= delayMatch54_reg(38);
  delayMatch54_reg_next(40) <= delayMatch54_reg(39);
  delayMatch54_reg_next(41) <= delayMatch54_reg(40);
  delayMatch54_reg_next(42) <= delayMatch54_reg(41);
  delayMatch54_reg_next(43) <= delayMatch54_reg(42);
  delayMatch54_reg_next(44) <= delayMatch54_reg(43);
  delayMatch54_reg_next(45) <= delayMatch54_reg(44);
  delayMatch54_reg_next(46) <= delayMatch54_reg(45);
  delayMatch54_reg_next(47) <= delayMatch54_reg(46);
  delayMatch54_reg_next(48) <= delayMatch54_reg(47);
  delayMatch54_reg_next(49) <= delayMatch54_reg(48);
  delayMatch54_reg_next(50) <= delayMatch54_reg(49);
  delayMatch54_reg_next(51) <= delayMatch54_reg(50);
  delayMatch54_reg_next(52) <= delayMatch54_reg(51);
  delayMatch54_reg_next(53) <= delayMatch54_reg(52);
  delayMatch54_reg_next(54) <= delayMatch54_reg(53);
  delayMatch54_reg_next(55) <= delayMatch54_reg(54);
  delayMatch54_reg_next(56) <= delayMatch54_reg(55);
  delayMatch54_reg_next(57) <= delayMatch54_reg(56);
  delayMatch54_reg_next(58) <= delayMatch54_reg(57);
  delayMatch54_reg_next(59) <= delayMatch54_reg(58);
  delayMatch54_reg_next(60) <= delayMatch54_reg(59);
  delayMatch54_reg_next(61) <= delayMatch54_reg(60);
  delayMatch54_reg_next(62) <= delayMatch54_reg(61);
  delayMatch54_reg_next(63) <= delayMatch54_reg(62);
  delayMatch54_reg_next(64) <= delayMatch54_reg(63);
  delayMatch54_reg_next(65) <= delayMatch54_reg(64);
  delayMatch54_reg_next(66) <= delayMatch54_reg(65);
  delayMatch54_reg_next(67) <= delayMatch54_reg(66);
  delayMatch54_reg_next(68) <= delayMatch54_reg(67);
  delayMatch54_reg_next(69) <= delayMatch54_reg(68);
  delayMatch54_reg_next(70) <= delayMatch54_reg(69);
  delayMatch54_reg_next(71) <= delayMatch54_reg(70);
  delayMatch54_reg_next(72) <= delayMatch54_reg(71);
  delayMatch54_reg_next(73) <= delayMatch54_reg(72);
  delayMatch54_reg_next(74) <= delayMatch54_reg(73);
  delayMatch54_reg_next(75) <= delayMatch54_reg(74);
  delayMatch54_reg_next(76) <= delayMatch54_reg(75);
  delayMatch54_reg_next(77) <= delayMatch54_reg(76);
  delayMatch54_reg_next(78) <= delayMatch54_reg(77);
  delayMatch54_reg_next(79) <= delayMatch54_reg(78);
  delayMatch54_reg_next(80) <= delayMatch54_reg(79);
  delayMatch54_reg_next(81) <= delayMatch54_reg(80);
  delayMatch54_reg_next(82) <= delayMatch54_reg(81);
  delayMatch54_reg_next(83) <= delayMatch54_reg(82);
  delayMatch54_reg_next(84) <= delayMatch54_reg(83);
  delayMatch54_reg_next(85) <= delayMatch54_reg(84);
  delayMatch54_reg_next(86) <= delayMatch54_reg(85);
  delayMatch54_reg_next(87) <= delayMatch54_reg(86);
  delayMatch54_reg_next(88) <= delayMatch54_reg(87);
  delayMatch54_reg_next(89) <= delayMatch54_reg(88);
  delayMatch54_reg_next(90) <= delayMatch54_reg(89);
  delayMatch54_reg_next(91) <= delayMatch54_reg(90);
  delayMatch54_reg_next(92) <= delayMatch54_reg(91);
  delayMatch54_reg_next(93) <= delayMatch54_reg(92);
  delayMatch54_reg_next(94) <= delayMatch54_reg(93);
  delayMatch54_reg_next(95) <= delayMatch54_reg(94);
  delayMatch54_reg_next(96) <= delayMatch54_reg(95);
  delayMatch54_reg_next(97) <= delayMatch54_reg(96);
  delayMatch54_reg_next(98) <= delayMatch54_reg(97);
  delayMatch54_reg_next(99) <= delayMatch54_reg(98);
  delayMatch54_reg_next(100) <= delayMatch54_reg(99);
  delayMatch54_reg_next(101) <= delayMatch54_reg(100);
  delayMatch54_reg_next(102) <= delayMatch54_reg(101);
  delayMatch54_reg_next(103) <= delayMatch54_reg(102);
  delayMatch54_reg_next(104) <= delayMatch54_reg(103);
  delayMatch54_reg_next(105) <= delayMatch54_reg(104);
  delayMatch54_reg_next(106) <= delayMatch54_reg(105);
  delayMatch54_reg_next(107) <= delayMatch54_reg(106);
  delayMatch54_reg_next(108) <= delayMatch54_reg(107);
  delayMatch54_reg_next(109) <= delayMatch54_reg(108);
  delayMatch54_reg_next(110) <= delayMatch54_reg(109);
  delayMatch54_reg_next(111) <= delayMatch54_reg(110);
  delayMatch54_reg_next(112) <= delayMatch54_reg(111);
  delayMatch54_reg_next(113) <= delayMatch54_reg(112);
  delayMatch54_reg_next(114) <= delayMatch54_reg(113);
  delayMatch54_reg_next(115) <= delayMatch54_reg(114);
  delayMatch54_reg_next(116) <= delayMatch54_reg(115);
  delayMatch54_reg_next(117) <= delayMatch54_reg(116);
  delayMatch54_reg_next(118) <= delayMatch54_reg(117);
  delayMatch54_reg_next(119) <= delayMatch54_reg(118);
  delayMatch54_reg_next(120) <= delayMatch54_reg(119);
  delayMatch54_reg_next(121) <= delayMatch54_reg(120);
  delayMatch54_reg_next(122) <= delayMatch54_reg(121);
  delayMatch54_reg_next(123) <= delayMatch54_reg(122);
  delayMatch54_reg_next(124) <= delayMatch54_reg(123);
  delayMatch54_reg_next(125) <= delayMatch54_reg(124);
  delayMatch54_reg_next(126) <= delayMatch54_reg(125);
  delayMatch54_reg_next(127) <= delayMatch54_reg(126);
  delayMatch54_reg_next(128) <= delayMatch54_reg(127);
  delayMatch54_reg_next(129) <= delayMatch54_reg(128);
  delayMatch54_reg_next(130) <= delayMatch54_reg(129);
  delayMatch54_reg_next(131) <= delayMatch54_reg(130);
  delayMatch54_reg_next(132) <= delayMatch54_reg(131);
  delayMatch54_reg_next(133) <= delayMatch54_reg(132);
  delayMatch54_reg_next(134) <= delayMatch54_reg(133);
  delayMatch54_reg_next(135) <= delayMatch54_reg(134);
  delayMatch54_reg_next(136) <= delayMatch54_reg(135);
  delayMatch54_reg_next(137) <= delayMatch54_reg(136);
  delayMatch54_reg_next(138) <= delayMatch54_reg(137);
  delayMatch54_reg_next(139) <= delayMatch54_reg(138);
  delayMatch54_reg_next(140) <= delayMatch54_reg(139);
  delayMatch54_reg_next(141) <= delayMatch54_reg(140);
  delayMatch54_reg_next(142) <= delayMatch54_reg(141);
  delayMatch54_reg_next(143) <= delayMatch54_reg(142);
  delayMatch54_reg_next(144) <= delayMatch54_reg(143);
  delayMatch54_reg_next(145) <= delayMatch54_reg(144);
  delayMatch54_reg_next(146) <= delayMatch54_reg(145);
  delayMatch54_reg_next(147) <= delayMatch54_reg(146);
  delayMatch54_reg_next(148) <= delayMatch54_reg(147);
  delayMatch54_reg_next(149) <= delayMatch54_reg(148);
  delayMatch54_reg_next(150) <= delayMatch54_reg(149);
  delayMatch54_reg_next(151) <= delayMatch54_reg(150);
  delayMatch54_reg_next(152) <= delayMatch54_reg(151);
  delayMatch54_reg_next(153) <= delayMatch54_reg(152);
  delayMatch54_reg_next(154) <= delayMatch54_reg(153);
  delayMatch54_reg_next(155) <= delayMatch54_reg(154);
  delayMatch54_reg_next(156) <= delayMatch54_reg(155);
  delayMatch54_reg_next(157) <= delayMatch54_reg(156);
  delayMatch54_reg_next(158) <= delayMatch54_reg(157);
  delayMatch54_reg_next(159) <= delayMatch54_reg(158);

  input_2_1 <= input_4(2);

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion24_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion24_out1 <= input_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch22_process;


  input_3_1 <= input_4(3);

  delayMatch23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion25_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion25_out1 <= input_3_1;
      END IF;
    END IF;
  END PROCESS delayMatch23_process;


  Mux1_out1(0) <= M_Mi;
  Mux1_out1(1) <= Switch1_out1;
  Mux1_out1(2) <= theta_el;
  Mux1_out1(3) <= Data_Type_Conversion24_out1;
  Mux1_out1(4) <= Data_Type_Conversion25_out1;

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t_bypass_reg(0) <= X"00000000";
        t_bypass_reg(1) <= X"00000000";
        t_bypass_reg(2) <= X"00000000";
        t_bypass_reg(3) <= X"00000000";
        t_bypass_reg(4) <= X"00000000";
      ELSIF enb_1_200_1 = '1' THEN
        t_bypass_reg(0) <= t_bypass_reg_next(0);
        t_bypass_reg(1) <= t_bypass_reg_next(1);
        t_bypass_reg(2) <= t_bypass_reg_next(2);
        t_bypass_reg(3) <= t_bypass_reg_next(3);
        t_bypass_reg(4) <= t_bypass_reg_next(4);
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Mux1_out1_1(0) <= Mux1_out1(0) WHEN enb_1_200_1 = '1' ELSE
      t_bypass_reg(0);
  
  Mux1_out1_1(1) <= Mux1_out1(1) WHEN enb_1_200_1 = '1' ELSE
      t_bypass_reg(1);
  
  Mux1_out1_1(2) <= Mux1_out1(2) WHEN enb_1_200_1 = '1' ELSE
      t_bypass_reg(2);
  
  Mux1_out1_1(3) <= Mux1_out1(3) WHEN enb_1_200_1 = '1' ELSE
      t_bypass_reg(3);
  
  Mux1_out1_1(4) <= Mux1_out1(4) WHEN enb_1_200_1 = '1' ELSE
      t_bypass_reg(4);
  t_bypass_reg_next(0) <= Mux1_out1(0);
  t_bypass_reg_next(1) <= Mux1_out1(1);
  t_bypass_reg_next(2) <= Mux1_out1(2);
  t_bypass_reg_next(3) <= Mux1_out1(3);
  t_bypass_reg_next(4) <= Mux1_out1(4);

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_6 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_6 <= reset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  kconst_4 <= X"3ec0c6f7a0b5ed8d";

  R_1 <= physical_parameters_R_1_1;

  delayMatch40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From4_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        From4_out1 <= R_1;
      END IF;
    END IF;
  END PROCESS delayMatch40_process;


  Delay1_iv_3 <= X"0000000000000000";

  L_z1 <= physical_parameters_L_z1;

  delayMatch39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch39_reg(0) <= X"00000000";
        delayMatch39_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch39_reg(0) <= delayMatch39_reg_next(0);
        delayMatch39_reg(1) <= delayMatch39_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch39_process;

  From11_out1 <= delayMatch39_reg(1);
  delayMatch39_reg_next(0) <= L_z1;
  delayMatch39_reg_next(1) <= delayMatch39_reg(0);

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_9 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_9 <= Delay1_out1_8;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  
  Delay1_toDel_9 <= Sum3_out1_4 WHEN reset_integrators_6 = '0' ELSE
      Delay1_iv_3;

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_10 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_10 <= Delay1_toDel_9;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay1_lowered3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered3_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered3_bypass_reg <= Delay1_toDel_10;
      END IF;
    END IF;
  END PROCESS Delay1_lowered3_bypass_process;

  
  Delay1_toDel_11 <= Delay1_toDel_10 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered3_bypass_reg;

  Delay1_delOut_3 <= Delay1_toDel_11;

  
  Delay1_out1_8 <= Delay1_delOut_3 WHEN reset_integrators = '0' ELSE
      Delay1_iv_3;

  psi <= Delay1_out1_8;

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_7 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_7 <= reset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  kconst_5 <= X"3ec0c6f7a0b5ed8d";

  delayMatch42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        From8_out1 <= R_1;
      END IF;
    END IF;
  END PROCESS delayMatch42_process;


  Delay1_iv_4 <= X"0000000000000000";

  L_z2 <= physical_parameters_L_z2;

  delayMatch41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch41_reg(0) <= X"00000000";
        delayMatch41_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch41_reg(0) <= delayMatch41_reg_next(0);
        delayMatch41_reg(1) <= delayMatch41_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch41_process;

  From12_out1 <= delayMatch41_reg(1);
  delayMatch41_reg_next(0) <= L_z2;
  delayMatch41_reg_next(1) <= delayMatch41_reg(0);

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_11 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_11 <= Delay1_out1_10;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  
  Delay1_toDel_12 <= Sum3_out1_5 WHEN reset_integrators_7 = '0' ELSE
      Delay1_iv_4;

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_13 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_13 <= Delay1_toDel_12;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  Delay1_lowered4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered4_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered4_bypass_reg <= Delay1_toDel_13;
      END IF;
    END IF;
  END PROCESS Delay1_lowered4_bypass_process;

  
  Delay1_toDel_14 <= Delay1_toDel_13 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered4_bypass_reg;

  Delay1_delOut_4 <= Delay1_toDel_14;

  
  Delay1_out1_10 <= Delay1_delOut_4 WHEN reset_integrators = '0' ELSE
      Delay1_iv_4;

  psi_1 <= Delay1_out1_10;

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_8 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_8 <= reset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  kconst_6 <= X"3ec0c6f7a0b5ed8d";

  delayMatch44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From14_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        From14_out1 <= R_1;
      END IF;
    END IF;
  END PROCESS delayMatch44_process;


  Delay1_iv_5 <= X"0000000000000000";

  L_x1 <= physical_parameters_L_x1;

  delayMatch43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch43_reg(0) <= X"00000000";
        delayMatch43_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch43_reg(0) <= delayMatch43_reg_next(0);
        delayMatch43_reg(1) <= delayMatch43_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch43_process;

  From13_out1 <= delayMatch43_reg(1);
  delayMatch43_reg_next(0) <= L_x1;
  delayMatch43_reg_next(1) <= delayMatch43_reg(0);

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_13 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_13 <= Delay1_out1_12;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  
  Delay1_toDel_15 <= Sum3_out1_6 WHEN reset_integrators_8 = '0' ELSE
      Delay1_iv_5;

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_16 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_16 <= Delay1_toDel_15;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  Delay1_lowered5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered5_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered5_bypass_reg <= Delay1_toDel_16;
      END IF;
    END IF;
  END PROCESS Delay1_lowered5_bypass_process;

  
  Delay1_toDel_17 <= Delay1_toDel_16 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered5_bypass_reg;

  Delay1_delOut_5 <= Delay1_toDel_17;

  
  Delay1_out1_12 <= Delay1_delOut_5 WHEN reset_integrators = '0' ELSE
      Delay1_iv_5;

  psi_2 <= Delay1_out1_12;

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_9 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_9 <= reset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch13_process;


  kconst_7 <= X"3ec0c6f7a0b5ed8d";

  delayMatch46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From18_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        From18_out1 <= R_1;
      END IF;
    END IF;
  END PROCESS delayMatch46_process;


  Delay1_iv_6 <= X"0000000000000000";

  L_y1 <= physical_parameters_L_y1;

  delayMatch45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch45_reg(0) <= X"00000000";
        delayMatch45_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch45_reg(0) <= delayMatch45_reg_next(0);
        delayMatch45_reg(1) <= delayMatch45_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch45_process;

  From16_out1 <= delayMatch45_reg(1);
  delayMatch45_reg_next(0) <= L_y1;
  delayMatch45_reg_next(1) <= delayMatch45_reg(0);

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_15 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_15 <= Delay1_out1_14;
      END IF;
    END IF;
  END PROCESS delayMatch12_process;


  
  Delay1_toDel_18 <= Sum3_out1_7 WHEN reset_integrators_9 = '0' ELSE
      Delay1_iv_6;

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_19 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_19 <= Delay1_toDel_18;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Delay1_lowered6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered6_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered6_bypass_reg <= Delay1_toDel_19;
      END IF;
    END IF;
  END PROCESS Delay1_lowered6_bypass_process;

  
  Delay1_toDel_20 <= Delay1_toDel_19 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered6_bypass_reg;

  Delay1_delOut_6 <= Delay1_toDel_20;

  
  Delay1_out1_14 <= Delay1_delOut_6 WHEN reset_integrators = '0' ELSE
      Delay1_iv_6;

  psi_3 <= Delay1_out1_14;

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_10 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_10 <= reset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch15_process;


  kconst_8 <= X"3ec0c6f7a0b5ed8d";

  delayMatch48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From22_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        From22_out1 <= R_1;
      END IF;
    END IF;
  END PROCESS delayMatch48_process;


  Delay1_iv_7 <= X"0000000000000000";

  L_x2 <= physical_parameters_L_x2;

  delayMatch47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch47_reg(0) <= X"00000000";
        delayMatch47_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch47_reg(0) <= delayMatch47_reg_next(0);
        delayMatch47_reg(1) <= delayMatch47_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch47_process;

  From17_out1 <= delayMatch47_reg(1);
  delayMatch47_reg_next(0) <= L_x2;
  delayMatch47_reg_next(1) <= delayMatch47_reg(0);

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_17 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_17 <= Delay1_out1_16;
      END IF;
    END IF;
  END PROCESS delayMatch14_process;


  
  Delay1_toDel_21 <= Sum3_out1_8 WHEN reset_integrators_10 = '0' ELSE
      Delay1_iv_7;

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_22 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_22 <= Delay1_toDel_21;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Delay1_lowered7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered7_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered7_bypass_reg <= Delay1_toDel_22;
      END IF;
    END IF;
  END PROCESS Delay1_lowered7_bypass_process;

  
  Delay1_toDel_23 <= Delay1_toDel_22 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered7_bypass_reg;

  Delay1_delOut_7 <= Delay1_toDel_23;

  
  Delay1_out1_16 <= Delay1_delOut_7 WHEN reset_integrators = '0' ELSE
      Delay1_iv_7;

  psi_4 <= Delay1_out1_16;

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_11 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_11 <= reset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch17_process;


  kconst_9 <= X"3ec0c6f7a0b5ed8d";

  delayMatch50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From26_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        From26_out1 <= R_1;
      END IF;
    END IF;
  END PROCESS delayMatch50_process;


  Delay1_iv_8 <= X"0000000000000000";

  L_y2 <= physical_parameters_L_y2;

  delayMatch49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch49_reg(0) <= X"00000000";
        delayMatch49_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch49_reg(0) <= delayMatch49_reg_next(0);
        delayMatch49_reg(1) <= delayMatch49_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch49_process;

  From20_out1 <= delayMatch49_reg(1);
  delayMatch49_reg_next(0) <= L_y2;
  delayMatch49_reg_next(1) <= delayMatch49_reg(0);

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_19 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_19 <= Delay1_out1_18;
      END IF;
    END IF;
  END PROCESS delayMatch16_process;


  
  Delay1_toDel_24 <= Sum3_out1_9 WHEN reset_integrators_11 = '0' ELSE
      Delay1_iv_8;

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_25 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_25 <= Delay1_toDel_24;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Delay1_lowered8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered8_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered8_bypass_reg <= Delay1_toDel_25;
      END IF;
    END IF;
  END PROCESS Delay1_lowered8_bypass_process;

  
  Delay1_toDel_26 <= Delay1_toDel_25 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered8_bypass_reg;

  Delay1_delOut_8 <= Delay1_toDel_26;

  
  Delay1_out1_18 <= Delay1_delOut_8 WHEN reset_integrators = '0' ELSE
      Delay1_iv_8;

  psi_5 <= Delay1_out1_18;

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_12 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_12 <= reset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch19_process;


  kconst_10 <= X"3ec0c6f7a0b5ed8d";

  delayMatch52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From30_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        From30_out1 <= R_1;
      END IF;
    END IF;
  END PROCESS delayMatch52_process;


  Delay1_iv_9 <= X"0000000000000000";

  L_z3 <= physical_parameters_L_z3;

  delayMatch51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch51_reg(0) <= X"00000000";
        delayMatch51_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch51_reg(0) <= delayMatch51_reg_next(0);
        delayMatch51_reg(1) <= delayMatch51_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch51_process;

  From21_out1 <= delayMatch51_reg(1);
  delayMatch51_reg_next(0) <= L_z3;
  delayMatch51_reg_next(1) <= delayMatch51_reg(0);

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_21 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_21 <= Delay1_out1_20;
      END IF;
    END IF;
  END PROCESS delayMatch18_process;


  
  Delay1_toDel_27 <= Sum3_out1_10 WHEN reset_integrators_12 = '0' ELSE
      Delay1_iv_9;

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_28 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_28 <= Delay1_toDel_27;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Delay1_lowered9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered9_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered9_bypass_reg <= Delay1_toDel_28;
      END IF;
    END IF;
  END PROCESS Delay1_lowered9_bypass_process;

  
  Delay1_toDel_29 <= Delay1_toDel_28 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered9_bypass_reg;

  Delay1_delOut_9 <= Delay1_toDel_29;

  
  Delay1_out1_20 <= Delay1_delOut_9 WHEN reset_integrators = '0' ELSE
      Delay1_iv_9;

  psi_6 <= Delay1_out1_20;

  Mux_out1(0) <= Data_Type_Conversion32_out1;
  Mux_out1(1) <= Data_Type_Conversion31_out1;
  Mux_out1(2) <= Divide1_out1;
  Mux_out1(3) <= Divide3_out1;
  Mux_out1(4) <= Divide5_out1;
  Mux_out1(5) <= Divide7_out1;
  Mux_out1(6) <= Divide9_out1;
  Mux_out1(7) <= Divide11_out1;
  Mux_out1(8) <= Divide13_out1;

  Mux_out1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux_out1_2(0) <= X"00000000";
        Mux_out1_2(1) <= X"00000000";
        Mux_out1_2(2) <= X"00000000";
        Mux_out1_2(3) <= X"00000000";
        Mux_out1_2(4) <= X"00000000";
        Mux_out1_2(5) <= X"00000000";
        Mux_out1_2(6) <= X"00000000";
        Mux_out1_2(7) <= X"00000000";
        Mux_out1_2(8) <= X"00000000";
      ELSIF enb = '1' THEN
        Mux_out1_2(0) <= Mux_out1(0);
        Mux_out1_2(1) <= Mux_out1(1);
        Mux_out1_2(2) <= Mux_out1(2);
        Mux_out1_2(3) <= Mux_out1(3);
        Mux_out1_2(4) <= Mux_out1(4);
        Mux_out1_2(5) <= Mux_out1(5);
        Mux_out1_2(6) <= Mux_out1(6);
        Mux_out1_2(7) <= Mux_out1(7);
        Mux_out1_2(8) <= Mux_out1(8);
      END IF;
    END IF;
  END PROCESS Mux_out1_1_process;


  t7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t7_bypass_reg(0) <= X"00000000";
        t7_bypass_reg(1) <= X"00000000";
        t7_bypass_reg(2) <= X"00000000";
        t7_bypass_reg(3) <= X"00000000";
        t7_bypass_reg(4) <= X"00000000";
        t7_bypass_reg(5) <= X"00000000";
        t7_bypass_reg(6) <= X"00000000";
        t7_bypass_reg(7) <= X"00000000";
        t7_bypass_reg(8) <= X"00000000";
      ELSIF enb_1_200_1 = '1' THEN
        t7_bypass_reg(0) <= t7_bypass_reg_next(0);
        t7_bypass_reg(1) <= t7_bypass_reg_next(1);
        t7_bypass_reg(2) <= t7_bypass_reg_next(2);
        t7_bypass_reg(3) <= t7_bypass_reg_next(3);
        t7_bypass_reg(4) <= t7_bypass_reg_next(4);
        t7_bypass_reg(5) <= t7_bypass_reg_next(5);
        t7_bypass_reg(6) <= t7_bypass_reg_next(6);
        t7_bypass_reg(7) <= t7_bypass_reg_next(7);
        t7_bypass_reg(8) <= t7_bypass_reg_next(8);
      END IF;
    END IF;
  END PROCESS t7_bypass_process;

  
  Mux_out1_3(0) <= Mux_out1_2(0) WHEN enb_1_200_1 = '1' ELSE
      t7_bypass_reg(0);
  
  Mux_out1_3(1) <= Mux_out1_2(1) WHEN enb_1_200_1 = '1' ELSE
      t7_bypass_reg(1);
  
  Mux_out1_3(2) <= Mux_out1_2(2) WHEN enb_1_200_1 = '1' ELSE
      t7_bypass_reg(2);
  
  Mux_out1_3(3) <= Mux_out1_2(3) WHEN enb_1_200_1 = '1' ELSE
      t7_bypass_reg(3);
  
  Mux_out1_3(4) <= Mux_out1_2(4) WHEN enb_1_200_1 = '1' ELSE
      t7_bypass_reg(4);
  
  Mux_out1_3(5) <= Mux_out1_2(5) WHEN enb_1_200_1 = '1' ELSE
      t7_bypass_reg(5);
  
  Mux_out1_3(6) <= Mux_out1_2(6) WHEN enb_1_200_1 = '1' ELSE
      t7_bypass_reg(6);
  
  Mux_out1_3(7) <= Mux_out1_2(7) WHEN enb_1_200_1 = '1' ELSE
      t7_bypass_reg(7);
  
  Mux_out1_3(8) <= Mux_out1_2(8) WHEN enb_1_200_1 = '1' ELSE
      t7_bypass_reg(8);
  t7_bypass_reg_next(0) <= Mux_out1_2(0);
  t7_bypass_reg_next(1) <= Mux_out1_2(1);
  t7_bypass_reg_next(2) <= Mux_out1_2(2);
  t7_bypass_reg_next(3) <= Mux_out1_2(3);
  t7_bypass_reg_next(4) <= Mux_out1_2(4);
  t7_bypass_reg_next(5) <= Mux_out1_2(5);
  t7_bypass_reg_next(6) <= Mux_out1_2(6);
  t7_bypass_reg_next(7) <= Mux_out1_2(7);
  t7_bypass_reg_next(8) <= Mux_out1_2(8);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 199
  ctr_199_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ctr_199_sig <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        IF ctr_199_sig >= to_unsigned(16#C7#, 8) THEN 
          ctr_199_sig <= to_unsigned(16#00#, 8);
        ELSE 
          ctr_199_sig <= ctr_199_sig + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS ctr_199_process;


  outputgen: FOR k IN 0 TO 8 GENERATE
    Transformation1_out1_signed(k) <= signed(Transformation1_out1(k));
  END GENERATE;

  Data_Type_Conversion34_out1(0) <= Transformation1_out1_signed(0)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(0)(15));
  Data_Type_Conversion34_out1(1) <= Transformation1_out1_signed(1)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(1)(15));
  Data_Type_Conversion34_out1(2) <= Transformation1_out1_signed(2)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(2)(15));
  Data_Type_Conversion34_out1(3) <= Transformation1_out1_signed(3)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(3)(15));
  Data_Type_Conversion34_out1(4) <= Transformation1_out1_signed(4)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(4)(15));
  Data_Type_Conversion34_out1(5) <= Transformation1_out1_signed(5)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(5)(15));
  Data_Type_Conversion34_out1(6) <= Transformation1_out1_signed(6)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(6)(15));
  Data_Type_Conversion34_out1(7) <= Transformation1_out1_signed(7)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(7)(15));
  Data_Type_Conversion34_out1(8) <= Transformation1_out1_signed(8)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(8)(15));

  Demux1_out1(0) <= Data_Type_Conversion34_out1(0);
  Demux1_out1(1) <= Data_Type_Conversion34_out1(1);
  Demux1_out1(2) <= Data_Type_Conversion34_out1(2);

  crp_out_delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out1_1(0) <= to_signed(16#0000000#, 25);
        Demux1_out1_1(1) <= to_signed(16#0000000#, 25);
        Demux1_out1_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Demux1_out1_1(0) <= Demux1_out1(0);
        Demux1_out1_1(1) <= Demux1_out1(1);
        Demux1_out1_1(2) <= Demux1_out1(2);
      END IF;
    END IF;
  END PROCESS crp_out_delay12_process;


  Delay41_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out1_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out1_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out1_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_1 = '1' THEN
        Demux1_out1_2(0) <= Demux1_out1_1(0);
        Demux1_out1_2(1) <= Demux1_out1_1(1);
        Demux1_out1_2(2) <= Demux1_out1_1(2);
      END IF;
    END IF;
  END PROCESS Delay41_output_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1(0) <= to_signed(16#0000000#, 25);
        Delay4_out1(1) <= to_signed(16#0000000#, 25);
        Delay4_out1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay4_out1(0) <= Demux1_out1_2(0);
        Delay4_out1(1) <= Demux1_out1_2(1);
        Delay4_out1(2) <= Demux1_out1_2(2);
      END IF;
    END IF;
  END PROCESS Delay4_process;


  delayMatch55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_1(0) <= to_signed(16#0000000#, 25);
        Delay4_out1_1(1) <= to_signed(16#0000000#, 25);
        Delay4_out1_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay4_out1_1(0) <= Delay4_out1(0);
        Delay4_out1_1(1) <= Delay4_out1(1);
        Delay4_out1_1(2) <= Delay4_out1(2);
      END IF;
    END IF;
  END PROCESS delayMatch55_process;


  i_abc1_pl_0 <= std_logic_vector(Delay4_out1_1(0));

  i_abc1_pl_1 <= std_logic_vector(Delay4_out1_1(1));

  i_abc1_pl_2 <= std_logic_vector(Delay4_out1_1(2));

  Demux1_out2(0) <= Data_Type_Conversion34_out1(3);
  Demux1_out2(1) <= Data_Type_Conversion34_out1(4);
  Demux1_out2(2) <= Data_Type_Conversion34_out1(5);

  crp_out_delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out2_1(0) <= to_signed(16#0000000#, 25);
        Demux1_out2_1(1) <= to_signed(16#0000000#, 25);
        Demux1_out2_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Demux1_out2_1(0) <= Demux1_out2(0);
        Demux1_out2_1(1) <= Demux1_out2(1);
        Demux1_out2_1(2) <= Demux1_out2(2);
      END IF;
    END IF;
  END PROCESS crp_out_delay13_process;


  Delay51_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out2_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out2_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out2_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_1 = '1' THEN
        Demux1_out2_2(0) <= Demux1_out2_1(0);
        Demux1_out2_2(1) <= Demux1_out2_1(1);
        Demux1_out2_2(2) <= Demux1_out2_1(2);
      END IF;
    END IF;
  END PROCESS Delay51_output_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1(0) <= to_signed(16#0000000#, 25);
        Delay5_out1(1) <= to_signed(16#0000000#, 25);
        Delay5_out1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay5_out1(0) <= Demux1_out2_2(0);
        Delay5_out1(1) <= Demux1_out2_2(1);
        Delay5_out1(2) <= Demux1_out2_2(2);
      END IF;
    END IF;
  END PROCESS Delay5_process;


  delayMatch56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_1(0) <= to_signed(16#0000000#, 25);
        Delay5_out1_1(1) <= to_signed(16#0000000#, 25);
        Delay5_out1_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay5_out1_1(0) <= Delay5_out1(0);
        Delay5_out1_1(1) <= Delay5_out1(1);
        Delay5_out1_1(2) <= Delay5_out1(2);
      END IF;
    END IF;
  END PROCESS delayMatch56_process;


  i_abc2_pl_0 <= std_logic_vector(Delay5_out1_1(0));

  i_abc2_pl_1 <= std_logic_vector(Delay5_out1_1(1));

  i_abc2_pl_2 <= std_logic_vector(Delay5_out1_1(2));

  Demux1_out3(0) <= Data_Type_Conversion34_out1(6);
  Demux1_out3(1) <= Data_Type_Conversion34_out1(7);
  Demux1_out3(2) <= Data_Type_Conversion34_out1(8);

  crp_out_delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out3_1(0) <= to_signed(16#0000000#, 25);
        Demux1_out3_1(1) <= to_signed(16#0000000#, 25);
        Demux1_out3_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Demux1_out3_1(0) <= Demux1_out3(0);
        Demux1_out3_1(1) <= Demux1_out3(1);
        Demux1_out3_1(2) <= Demux1_out3(2);
      END IF;
    END IF;
  END PROCESS crp_out_delay14_process;


  Delay61_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out3_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out3_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out3_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_1 = '1' THEN
        Demux1_out3_2(0) <= Demux1_out3_1(0);
        Demux1_out3_2(1) <= Demux1_out3_1(1);
        Demux1_out3_2(2) <= Demux1_out3_1(2);
      END IF;
    END IF;
  END PROCESS Delay61_output_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1(0) <= to_signed(16#0000000#, 25);
        Delay6_out1(1) <= to_signed(16#0000000#, 25);
        Delay6_out1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay6_out1(0) <= Demux1_out3_2(0);
        Delay6_out1(1) <= Demux1_out3_2(1);
        Delay6_out1(2) <= Demux1_out3_2(2);
      END IF;
    END IF;
  END PROCESS Delay6_process;


  delayMatch57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_1(0) <= to_signed(16#0000000#, 25);
        Delay6_out1_1(1) <= to_signed(16#0000000#, 25);
        Delay6_out1_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        Delay6_out1_1(0) <= Delay6_out1(0);
        Delay6_out1_1(1) <= Delay6_out1(1);
        Delay6_out1_1(2) <= Delay6_out1(2);
      END IF;
    END IF;
  END PROCESS delayMatch57_process;


  i_abc3_pl_0 <= std_logic_vector(Delay6_out1_1(0));

  i_abc3_pl_1 <= std_logic_vector(Delay6_out1_1(1));

  i_abc3_pl_2 <= std_logic_vector(Delay6_out1_1(2));

  Data_Type_Conversion1_out1_signed <= signed(Data_Type_Conversion1_out1_2);

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion1_out1_3 <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Data_Type_Conversion1_out1_3 <= Data_Type_Conversion1_out1_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay7_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion1_out1_4 <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_1 = '1' THEN
        Data_Type_Conversion1_out1_4 <= Data_Type_Conversion1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay7_output_process;


  delayMatch58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch58_reg(0) <= to_signed(16#0000000#, 25);
        delayMatch58_reg(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_200_0 = '1' THEN
        delayMatch58_reg(0) <= delayMatch58_reg_next(0);
        delayMatch58_reg(1) <= delayMatch58_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch58_process;

  Data_Type_Conversion1_out1_5 <= delayMatch58_reg(1);
  delayMatch58_reg_next(0) <= Data_Type_Conversion1_out1_4;
  delayMatch58_reg_next(1) <= delayMatch58_reg(0);

  out_theta_el <= std_logic_vector(Data_Type_Conversion1_out1_5);

  ce_out <= enb_1_200_1;

  outputs_0 <= Mux1_out1_1(0);

  outputs_1 <= Mux1_out1_1(1);

  outputs_2 <= Mux1_out1_1(2);

  outputs_3 <= Mux1_out1_1(3);

  outputs_4 <= Mux1_out1_1(4);

  i_dq_ps_0 <= Mux_out1_3(0);

  i_dq_ps_1 <= Mux_out1_3(1);

  i_dq_ps_2 <= Mux_out1_3(2);

  i_dq_ps_3 <= Mux_out1_3(3);

  i_dq_ps_4 <= Mux_out1_3(4);

  i_dq_ps_5 <= Mux_out1_3(5);

  i_dq_ps_6 <= Mux_out1_3(6);

  i_dq_ps_7 <= Mux_out1_3(7);

  i_dq_ps_8 <= Mux_out1_3(8);

END rtl;

