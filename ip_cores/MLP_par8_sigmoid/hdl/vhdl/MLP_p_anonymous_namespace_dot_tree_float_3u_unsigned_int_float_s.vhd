-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_p_anonymous_namespace_dot_tree_float_3u_unsigned_int_float_s is
port (
    p_x_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    p_x_empty_n : IN STD_LOGIC;
    p_x_read : OUT STD_LOGIC;
    p_y_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    p_y_empty_n : IN STD_LOGIC;
    p_y_read : OUT STD_LOGIC;
    p_res_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_res_full_n : IN STD_LOGIC;
    p_res_write : OUT STD_LOGIC;
    p_n : IN STD_LOGIC_VECTOR (31 downto 0);
    p_iter : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_n_ap_vld : IN STD_LOGIC;
    p_iter_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of MLP_p_anonymous_namespace_dot_tree_float_3u_unsigned_int_float_s is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

attribute shreg_extract : string;
    signal mul_float_8u_unsigned_int_float_U0_ap_start : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_ap_done : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_ap_continue : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_ap_idle : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_ap_ready : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_start_out : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_start_write : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_p_x_read : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_p_y_read : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_p_res_din : STD_LOGIC_VECTOR (255 downto 0);
    signal mul_float_8u_unsigned_int_float_U0_p_res_write : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_p_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_float_8u_unsigned_int_float_U0_p_n_out_write : STD_LOGIC;
    signal mul_float_8u_unsigned_int_float_U0_p_mulIters_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_float_8u_unsigned_int_float_U0_p_mulIters_out_write : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_p_x_read : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_p_sum_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_float_3u_unsigned_int_float_U0_p_sum_write : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_p_n_read : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_p_mulIters_read : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_ap_start : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_ap_done : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_ap_ready : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_ap_idle : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal l_mulStr_full_n : STD_LOGIC;
    signal l_mulStr_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal l_mulStr_empty_n : STD_LOGIC;
    signal p_n_c_full_n : STD_LOGIC;
    signal p_n_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c_empty_n : STD_LOGIC;
    signal p_iter_c_full_n : STD_LOGIC;
    signal p_iter_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_iter_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_sum_float_3u_unsigned_int_float_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sum_float_3u_unsigned_int_float_U0_full_n : STD_LOGIC;
    signal start_for_sum_float_3u_unsigned_int_float_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sum_float_3u_unsigned_int_float_U0_empty_n : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_start_full_n : STD_LOGIC;
    signal sum_float_3u_unsigned_int_float_U0_start_write : STD_LOGIC;

    component MLP_mul_float_8u_unsigned_int_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_x_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        p_x_empty_n : IN STD_LOGIC;
        p_x_read : OUT STD_LOGIC;
        p_y_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        p_y_empty_n : IN STD_LOGIC;
        p_y_read : OUT STD_LOGIC;
        p_res_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        p_res_full_n : IN STD_LOGIC;
        p_res_write : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_mulIters : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out_full_n : IN STD_LOGIC;
        p_n_out_write : OUT STD_LOGIC;
        p_mulIters_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_mulIters_out_full_n : IN STD_LOGIC;
        p_mulIters_out_write : OUT STD_LOGIC );
    end component;


    component MLP_sum_float_3u_unsigned_int_float_s IS
    port (
        p_x_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        p_x_empty_n : IN STD_LOGIC;
        p_x_read : OUT STD_LOGIC;
        p_sum_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_sum_full_n : IN STD_LOGIC;
        p_sum_write : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_mulIters_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_mulIters_empty_n : IN STD_LOGIC;
        p_mulIters_read : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MLP_fifo_w256_d2_S_x2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MLP_fifo_w32_d2_S_x7 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MLP_start_for_sum_float_3u_unsigned_int_float_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    mul_float_8u_unsigned_int_float_U0 : component MLP_mul_float_8u_unsigned_int_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => mul_float_8u_unsigned_int_float_U0_ap_start,
        start_full_n => start_for_sum_float_3u_unsigned_int_float_U0_full_n,
        ap_done => mul_float_8u_unsigned_int_float_U0_ap_done,
        ap_continue => mul_float_8u_unsigned_int_float_U0_ap_continue,
        ap_idle => mul_float_8u_unsigned_int_float_U0_ap_idle,
        ap_ready => mul_float_8u_unsigned_int_float_U0_ap_ready,
        start_out => mul_float_8u_unsigned_int_float_U0_start_out,
        start_write => mul_float_8u_unsigned_int_float_U0_start_write,
        p_x_dout => p_x_dout,
        p_x_empty_n => p_x_empty_n,
        p_x_read => mul_float_8u_unsigned_int_float_U0_p_x_read,
        p_y_dout => p_y_dout,
        p_y_empty_n => p_y_empty_n,
        p_y_read => mul_float_8u_unsigned_int_float_U0_p_y_read,
        p_res_din => mul_float_8u_unsigned_int_float_U0_p_res_din,
        p_res_full_n => l_mulStr_full_n,
        p_res_write => mul_float_8u_unsigned_int_float_U0_p_res_write,
        p_n => p_n,
        p_mulIters => p_iter,
        p_n_out_din => mul_float_8u_unsigned_int_float_U0_p_n_out_din,
        p_n_out_full_n => p_n_c_full_n,
        p_n_out_write => mul_float_8u_unsigned_int_float_U0_p_n_out_write,
        p_mulIters_out_din => mul_float_8u_unsigned_int_float_U0_p_mulIters_out_din,
        p_mulIters_out_full_n => p_iter_c_full_n,
        p_mulIters_out_write => mul_float_8u_unsigned_int_float_U0_p_mulIters_out_write);

    sum_float_3u_unsigned_int_float_U0 : component MLP_sum_float_3u_unsigned_int_float_s
    port map (
        p_x_dout => l_mulStr_dout,
        p_x_empty_n => l_mulStr_empty_n,
        p_x_read => sum_float_3u_unsigned_int_float_U0_p_x_read,
        p_sum_din => sum_float_3u_unsigned_int_float_U0_p_sum_din,
        p_sum_full_n => p_res_full_n,
        p_sum_write => sum_float_3u_unsigned_int_float_U0_p_sum_write,
        p_n_dout => p_n_c_dout,
        p_n_empty_n => p_n_c_empty_n,
        p_n_read => sum_float_3u_unsigned_int_float_U0_p_n_read,
        p_mulIters_dout => p_iter_c_dout,
        p_mulIters_empty_n => p_iter_c_empty_n,
        p_mulIters_read => sum_float_3u_unsigned_int_float_U0_p_mulIters_read,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sum_float_3u_unsigned_int_float_U0_ap_start,
        ap_done => sum_float_3u_unsigned_int_float_U0_ap_done,
        ap_ready => sum_float_3u_unsigned_int_float_U0_ap_ready,
        ap_idle => sum_float_3u_unsigned_int_float_U0_ap_idle,
        ap_continue => sum_float_3u_unsigned_int_float_U0_ap_continue);

    l_mulStr_U : component MLP_fifo_w256_d2_S_x2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mul_float_8u_unsigned_int_float_U0_p_res_din,
        if_full_n => l_mulStr_full_n,
        if_write => mul_float_8u_unsigned_int_float_U0_p_res_write,
        if_dout => l_mulStr_dout,
        if_empty_n => l_mulStr_empty_n,
        if_read => sum_float_3u_unsigned_int_float_U0_p_x_read);

    p_n_c_U : component MLP_fifo_w32_d2_S_x7
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mul_float_8u_unsigned_int_float_U0_p_n_out_din,
        if_full_n => p_n_c_full_n,
        if_write => mul_float_8u_unsigned_int_float_U0_p_n_out_write,
        if_dout => p_n_c_dout,
        if_empty_n => p_n_c_empty_n,
        if_read => sum_float_3u_unsigned_int_float_U0_p_n_read);

    p_iter_c_U : component MLP_fifo_w32_d2_S_x7
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mul_float_8u_unsigned_int_float_U0_p_mulIters_out_din,
        if_full_n => p_iter_c_full_n,
        if_write => mul_float_8u_unsigned_int_float_U0_p_mulIters_out_write,
        if_dout => p_iter_c_dout,
        if_empty_n => p_iter_c_empty_n,
        if_read => sum_float_3u_unsigned_int_float_U0_p_mulIters_read);

    start_for_sum_float_3u_unsigned_int_float_U0_U : component MLP_start_for_sum_float_3u_unsigned_int_float_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_sum_float_3u_unsigned_int_float_U0_din,
        if_full_n => start_for_sum_float_3u_unsigned_int_float_U0_full_n,
        if_write => mul_float_8u_unsigned_int_float_U0_start_write,
        if_dout => start_for_sum_float_3u_unsigned_int_float_U0_dout,
        if_empty_n => start_for_sum_float_3u_unsigned_int_float_U0_empty_n,
        if_read => sum_float_3u_unsigned_int_float_U0_ap_ready);




    ap_done <= sum_float_3u_unsigned_int_float_U0_ap_done;
    ap_idle <= (sum_float_3u_unsigned_int_float_U0_ap_idle and mul_float_8u_unsigned_int_float_U0_ap_idle);
    ap_ready <= mul_float_8u_unsigned_int_float_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= sum_float_3u_unsigned_int_float_U0_ap_done;
    ap_sync_ready <= mul_float_8u_unsigned_int_float_U0_ap_ready;
    mul_float_8u_unsigned_int_float_U0_ap_continue <= ap_const_logic_1;
    mul_float_8u_unsigned_int_float_U0_ap_start <= ap_start;
    p_res_din <= sum_float_3u_unsigned_int_float_U0_p_sum_din;
    p_res_write <= sum_float_3u_unsigned_int_float_U0_p_sum_write;
    p_x_read <= mul_float_8u_unsigned_int_float_U0_p_x_read;
    p_y_read <= mul_float_8u_unsigned_int_float_U0_p_y_read;
    start_for_sum_float_3u_unsigned_int_float_U0_din <= (0=>ap_const_logic_1, others=>'-');
    sum_float_3u_unsigned_int_float_U0_ap_continue <= ap_continue;
    sum_float_3u_unsigned_int_float_U0_ap_start <= start_for_sum_float_3u_unsigned_int_float_U0_empty_n;
    sum_float_3u_unsigned_int_float_U0_start_full_n <= ap_const_logic_1;
    sum_float_3u_unsigned_int_float_U0_start_write <= ap_const_logic_0;
end behav;
