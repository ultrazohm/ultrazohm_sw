-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\IP_Core_SS_Switch_and_PWM\IP_Core_S_ip_src_GenPWM.vhd
-- Created: 2018-10-01 12:50:34
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IP_Core_S_ip_src_GenPWM
-- Source Path: IP_Core_SS_Switch_and_PWM/PWM_and_Switching_Signal_Control/GenPWM
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IP_Core_S_ip_src_GenPWM IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        PWM_en_AXI                        :   IN    std_logic;
        f_carrier_kHz_AXI                 :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        min_pulse_width_AXI               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        U1_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U2_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        U3_norm                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        S1                                :   OUT   std_logic;  -- ufix1
        S2                                :   OUT   std_logic;  -- ufix1
        S3                                :   OUT   std_logic;  -- ufix1
        S4                                :   OUT   std_logic;  -- ufix1
        S5                                :   OUT   std_logic;  -- ufix1
        S6                                :   OUT   std_logic;  -- ufix1
        PWM_en_rd_AXI                     :   OUT   std_logic;
        f_carrier_kHz_rd_AXI              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        min_pulse_width_rd_AXI            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        enb_out                           :   OUT   std_logic
        );
END IP_Core_S_ip_src_GenPWM;


ARCHITECTURE rtl OF IP_Core_S_ip_src_GenPWM IS

  -- Component Declarations
  COMPONENT IP_Core_S_ip_src_Counter_Ctrl
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          hdl_cnt                         :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20
          f_carrier_kHz                   :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          dir_ctrl                        :   OUT   std_logic;
          triangle_sig                    :   OUT   std_logic_vector(17 DOWNTO 0)  -- ufix18_En10
          );
  END COMPONENT;

  COMPONENT IP_Core_S_ip_src_LimitPulseWidth
    PORT( ref_sig                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          min_pulse_width                 :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- ufix18_En10
          );
  END COMPONENT;

  COMPONENT IP_Core_S_ip_src_LimitPulseWidth1
    PORT( ref_sig                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          min_pulse_width                 :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- ufix18_En10
          );
  END COMPONENT;

  COMPONENT IP_Core_S_ip_src_LimitPulseWidth2
    PORT( ref_sig                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          min_pulse_width                 :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ref_sig_limit                   :   OUT   std_logic_vector(17 DOWNTO 0)  -- ufix18_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IP_Core_S_ip_src_Counter_Ctrl
    USE ENTITY work.IP_Core_S_ip_src_Counter_Ctrl(rtl);

  FOR ALL : IP_Core_S_ip_src_LimitPulseWidth
    USE ENTITY work.IP_Core_S_ip_src_LimitPulseWidth(rtl);

  FOR ALL : IP_Core_S_ip_src_LimitPulseWidth1
    USE ENTITY work.IP_Core_S_ip_src_LimitPulseWidth1(rtl);

  FOR ALL : IP_Core_S_ip_src_LimitPulseWidth2
    USE ENTITY work.IP_Core_S_ip_src_LimitPulseWidth2(rtl);

  -- Signals
  SIGNAL PWM_en_AXI_1                     : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant10_out1                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant3_out1                   : std_logic;  -- ufix1
  SIGNAL f_carrier_kHz_AXI_unsigned       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL f_carrier_kHz_AXI_1              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Counter_Ctrl_out1                : std_logic;
  SIGNAL HDL_Counter2_count               : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL HDL_Counter2_count_next          : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL HDL_Counter2_count_step          : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL HDL_Counter2_out1                : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Counter_Ctrl_out2                : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Counter_Ctrl_out2_unsigned       : unsigned(17 DOWNTO 0);  -- ufix18_En10
  SIGNAL U1_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U1_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay_out1                       : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Gain3_mul_temp                   : signed(27 DOWNTO 0);  -- sfix28_En18
  SIGNAL Gain3_out1                       : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL min_pulse_width_AXI_unsigned     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL min_pulse_width_AXI_1            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL LimitPulseWidth_out1             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth_out1_unsigned    : unsigned(17 DOWNTO 0);  -- ufix18_En10
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Sum_add_cast                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_add_cast_1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum_out1                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant1_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant2_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Multiport_Switch_out1            : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch3_out1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant6_out1                   : std_logic;  -- ufix1
  SIGNAL U2_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U2_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch1_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay1_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Gain1_mul_temp                   : signed(27 DOWNTO 0);  -- sfix28_En18
  SIGNAL Gain1_out1                       : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL LimitPulseWidth1_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth1_out1_unsigned   : unsigned(17 DOWNTO 0);  -- ufix18_En10
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Sum1_add_cast                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum1_add_cast_1                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum1_out1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant4_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant5_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Multiport_Switch1_out1           : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch4_out1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Constant9_out1                   : std_logic;  -- ufix1
  SIGNAL U3_norm_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL U3_norm_1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch2_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Delay2_out1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Gain2_mul_temp                   : signed(27 DOWNTO 0);  -- sfix28_En18
  SIGNAL Gain2_out1                       : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL LimitPulseWidth2_out1            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL LimitPulseWidth2_out1_unsigned   : unsigned(17 DOWNTO 0);  -- ufix18_En10
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Sum2_add_cast                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum2_add_cast_1                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Sum2_out1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant7_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant8_out1                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Multiport_Switch2_out1           : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Switch5_out1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Constant11_out1                  : std_logic;
  SIGNAL Switch6_out1                     : std_logic;

BEGIN
  u_Counter_Ctrl : IP_Core_S_ip_src_Counter_Ctrl
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              hdl_cnt => std_logic_vector(HDL_Counter2_out1),  -- ufix20
              f_carrier_kHz => std_logic_vector(f_carrier_kHz_AXI_1),  -- uint8
              dir_ctrl => Counter_Ctrl_out1,
              triangle_sig => Counter_Ctrl_out2  -- ufix18_En10
              );

  u_LimitPulseWidth : IP_Core_S_ip_src_LimitPulseWidth
    PORT MAP( ref_sig => std_logic_vector(Gain3_out1),  -- sfix18_En10
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- uint8
              ref_sig_limit => LimitPulseWidth_out1  -- ufix18_En10
              );

  u_LimitPulseWidth1 : IP_Core_S_ip_src_LimitPulseWidth1
    PORT MAP( ref_sig => std_logic_vector(Gain1_out1),  -- sfix18_En10
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- uint8
              ref_sig_limit => LimitPulseWidth1_out1  -- ufix18_En10
              );

  u_LimitPulseWidth2 : IP_Core_S_ip_src_LimitPulseWidth2
    PORT MAP( ref_sig => std_logic_vector(Gain2_out1),  -- sfix18_En10
              min_pulse_width => std_logic_vector(min_pulse_width_AXI_1),  -- uint8
              ref_sig_limit => LimitPulseWidth2_out1  -- ufix18_En10
              );

  in_0_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        PWM_en_AXI_1 <= '0';
      ELSIF enb = '1' THEN
        PWM_en_AXI_1 <= PWM_en_AXI;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  
  switch_compare_1 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  Constant10_out1(0) <= '0';
  Constant10_out1(1) <= '0';

  Constant3_out1 <= '1';

  f_carrier_kHz_AXI_unsigned <= unsigned(f_carrier_kHz_AXI);

  in_1_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        f_carrier_kHz_AXI_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        f_carrier_kHz_AXI_1 <= f_carrier_kHz_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter2_count <= to_unsigned(16#00000#, 20);
      ELSIF enb = '1' AND PWM_en_AXI_1 = '1' THEN
        HDL_Counter2_count <= HDL_Counter2_count_next;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;

  HDL_Counter2_out1 <= HDL_Counter2_count;
  
  HDL_Counter2_count_step <= to_unsigned(16#00001#, 20) WHEN Counter_Ctrl_out1 = '1' ELSE
      to_unsigned(16#FFFFF#, 20);
  HDL_Counter2_count_next <= HDL_Counter2_count + HDL_Counter2_count_step;

  Counter_Ctrl_out2_unsigned <= unsigned(Counter_Ctrl_out2);

  U1_norm_signed <= signed(U1_norm);

  in_3_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U1_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U1_norm_1 <= U1_norm_signed;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Switch_out1 <= U1_norm_1 WHEN Counter_Ctrl_out2_unsigned = to_unsigned(16#00000#, 18) ELSE
      Delay_out1;

  Gain3_mul_temp <= to_signed(16#1900#, 14) * Switch_out1;
  Gain3_out1 <= Gain3_mul_temp(25 DOWNTO 8);

  min_pulse_width_AXI_unsigned <= unsigned(min_pulse_width_AXI);

  in_2_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        min_pulse_width_AXI_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        min_pulse_width_AXI_1 <= min_pulse_width_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  LimitPulseWidth_out1_unsigned <= unsigned(LimitPulseWidth_out1);

  
  Relational_Operator_relop1 <= '1' WHEN Counter_Ctrl_out2_unsigned >= LimitPulseWidth_out1_unsigned ELSE
      '0';

  Sum_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Constant3_out1;
  Sum_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Relational_Operator_relop1;
  Sum_out1 <= Sum_add_cast + Sum_add_cast_1;

  Constant1_out1(0) <= '1';
  Constant1_out1(1) <= '0';

  Constant2_out1(0) <= '0';
  Constant2_out1(1) <= '1';

  
  Multiport_Switch_out1 <= Constant1_out1 WHEN Sum_out1 = to_unsigned(16#001#, 9) ELSE
      Constant2_out1;

  
  Switch3_out1 <= Constant10_out1 WHEN switch_compare_1 = '0' ELSE
      Multiport_Switch_out1;

  
  switch_compare_1_1 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  Constant6_out1 <= '1';

  U2_norm_signed <= signed(U2_norm);

  in_4_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U2_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U2_norm_1 <= U2_norm_signed;
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch1_out1 <= U2_norm_1 WHEN Counter_Ctrl_out2_unsigned = to_unsigned(16#00000#, 18) ELSE
      Delay1_out1;

  Gain1_mul_temp <= to_signed(16#1900#, 14) * Switch1_out1;
  Gain1_out1 <= Gain1_mul_temp(25 DOWNTO 8);

  LimitPulseWidth1_out1_unsigned <= unsigned(LimitPulseWidth1_out1);

  
  Relational_Operator1_relop1 <= '1' WHEN Counter_Ctrl_out2_unsigned >= LimitPulseWidth1_out1_unsigned ELSE
      '0';

  Sum1_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Constant6_out1;
  Sum1_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Relational_Operator1_relop1;
  Sum1_out1 <= Sum1_add_cast + Sum1_add_cast_1;

  Constant4_out1(0) <= '1';
  Constant4_out1(1) <= '0';

  Constant5_out1(0) <= '0';
  Constant5_out1(1) <= '1';

  
  Multiport_Switch1_out1 <= Constant4_out1 WHEN Sum1_out1 = to_unsigned(16#001#, 9) ELSE
      Constant5_out1;

  
  Switch4_out1 <= Constant10_out1 WHEN switch_compare_1_1 = '0' ELSE
      Multiport_Switch1_out1;

  
  switch_compare_1_2 <= '1' WHEN PWM_en_AXI_1 > '0' ELSE
      '0';

  Constant9_out1 <= '1';

  U3_norm_signed <= signed(U3_norm);

  in_5_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        U3_norm_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        U3_norm_1 <= U3_norm_signed;
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch2_out1 <= U3_norm_1 WHEN Counter_Ctrl_out2_unsigned = to_unsigned(16#00000#, 18) ELSE
      Delay2_out1;

  Gain2_mul_temp <= to_signed(16#1900#, 14) * Switch2_out1;
  Gain2_out1 <= Gain2_mul_temp(25 DOWNTO 8);

  LimitPulseWidth2_out1_unsigned <= unsigned(LimitPulseWidth2_out1);

  
  Relational_Operator2_relop1 <= '1' WHEN Counter_Ctrl_out2_unsigned >= LimitPulseWidth2_out1_unsigned ELSE
      '0';

  Sum2_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Constant9_out1;
  Sum2_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Relational_Operator2_relop1;
  Sum2_out1 <= Sum2_add_cast + Sum2_add_cast_1;

  Constant7_out1(0) <= '1';
  Constant7_out1(1) <= '0';

  Constant8_out1(0) <= '0';
  Constant8_out1(1) <= '1';

  
  Multiport_Switch2_out1 <= Constant7_out1 WHEN Sum2_out1 = to_unsigned(16#001#, 9) ELSE
      Constant8_out1;

  
  Switch5_out1 <= Constant10_out1 WHEN switch_compare_1_2 = '0' ELSE
      Multiport_Switch2_out1;

  f_carrier_kHz_rd_AXI <= std_logic_vector(f_carrier_kHz_AXI_1);

  min_pulse_width_rd_AXI <= std_logic_vector(min_pulse_width_AXI_1);

  Constant_out1 <= '1';

  Constant11_out1 <= '0';

  
  Switch6_out1 <= Constant_out1 WHEN Counter_Ctrl_out2_unsigned = to_unsigned(16#00000#, 18) ELSE
      Constant11_out1;







  S1 <= Switch3_out1(0);

  S2 <= Switch3_out1(1);

  S3 <= Switch4_out1(0);

  S4 <= Switch4_out1(1);

  S5 <= Switch5_out1(0);

  S6 <= Switch5_out1(1);

  PWM_en_rd_AXI <= PWM_en_AXI_1;

  enb_out <= Switch6_out1;

END rtl;

