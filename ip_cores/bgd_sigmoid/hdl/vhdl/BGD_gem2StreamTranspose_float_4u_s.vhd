-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_gem2StreamTranspose_float_4u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_out_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    p_out_full_n : IN STD_LOGIC;
    p_out_write : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k_empty_n : IN STD_LOGIC;
    p_k_read : OUT STD_LOGIC;
    p_in_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_in_ce0 : OUT STD_LOGIC;
    p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_in_ce1 : OUT STD_LOGIC;
    p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_offset_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    p_in_offset_empty_n : IN STD_LOGIC;
    p_in_offset_read : OUT STD_LOGIC;
    p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_full_n : IN STD_LOGIC;
    p_n_out_write : OUT STD_LOGIC;
    p_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_k_out_full_n : IN STD_LOGIC;
    p_k_out_write : OUT STD_LOGIC );
end;


architecture behav of BGD_gem2StreamTranspose_float_4u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv62_1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal p_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln172_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_434_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_n_blk_n : STD_LOGIC;
    signal p_k_blk_n : STD_LOGIC;
    signal p_in_offset_blk_n : STD_LOGIC;
    signal p_n_out_blk_n : STD_LOGIC;
    signal p_k_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_160 : STD_LOGIC_VECTOR (61 downto 0);
    signal k_reg_172 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_offset_read_reg_404 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal empty_fu_194_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_reg_412 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_fu_198_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_reg_419 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln180_fu_208_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln180_reg_424 : STD_LOGIC_VECTOR (11 downto 0);
    signal bound_fu_220_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound_reg_429 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln172_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln172_reg_434_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_438 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln172_fu_236_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln172_reg_443 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_83_fu_244_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_248_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_reg_453 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln172_fu_262_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln172_reg_464 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln174_fu_278_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln174_reg_479 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln172_1_fu_289_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln172_1_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal trunc_ln172_fu_296_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln172_reg_489 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_in_load_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_load_10_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten_phi_fu_164_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_k_phi_fu_176_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_mux_i_phi_fu_187_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln180_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_1_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_2_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_3_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal bound_fu_220_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_220_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln172_1_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_376_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln180_1_fu_300_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln180_fu_307_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln180_1_fu_312_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_382_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln180_3_fu_322_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln180_3_fu_322_p2 : signal is "no";
    signal grp_fu_390_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln180_5_fu_331_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln180_5_fu_331_p2 : signal is "no";
    signal grp_fu_397_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln180_7_fu_340_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln180_7_fu_340_p2 : signal is "no";
    signal l_v_27_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_26_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_25_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_382_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_382_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_390_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_397_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_376_ce : STD_LOGIC;
    signal grp_fu_382_ce : STD_LOGIC;
    signal grp_fu_390_ce : STD_LOGIC;
    signal grp_fu_397_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_220_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound_fu_220_p10 : STD_LOGIC_VECTOR (61 downto 0);

    component BGD_mul_32ns_30ns_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component BGD_mul_mul_12s_12s_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component BGD_mac_muladd_14s_14s_14ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    mul_32ns_30ns_62_1_1_U141 : component BGD_mul_32ns_30ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 30,
        dout_WIDTH => 62)
    port map (
        din0 => bound_fu_220_p0,
        din1 => bound_fu_220_p1,
        dout => bound_fu_220_p2);

    mul_mul_12s_12s_12_4_1_U142 : component BGD_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_83_fu_244_p1,
        din1 => trunc_ln180_reg_424,
        ce => grp_fu_376_ce,
        dout => grp_fu_376_p2);

    mac_muladd_14s_14s_14ns_14_4_1_U143 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_412,
        din1 => grp_fu_382_p1,
        din2 => grp_fu_382_p2,
        ce => grp_fu_382_ce,
        dout => grp_fu_382_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U144 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_412,
        din1 => grp_fu_390_p1,
        din2 => trunc_ln172_reg_489,
        ce => grp_fu_390_ce,
        dout => grp_fu_390_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U145 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_412,
        din1 => grp_fu_397_p1,
        din2 => trunc_ln172_reg_489,
        ce => grp_fu_397_ce,
        dout => grp_fu_397_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
                        ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln172_reg_434_pp0_iter1_reg = ap_const_lv1_0))) then 
                i_reg_183 <= select_ln172_1_reg_484;
            elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_183 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_434 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_160 <= add_ln172_reg_464;
            elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_160 <= ap_const_lv62_0;
            end if; 
        end if;
    end process;

    k_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_434 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                k_reg_172 <= add_ln174_reg_479;
            elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_172 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln172_reg_464 <= add_ln172_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_434 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln174_reg_479 <= add_ln174_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_429 <= bound_fu_220_p2;
                empty_reg_412 <= empty_fu_194_p1;
                p_in_offset_read_reg_404 <= p_in_offset_dout;
                trunc_ln180_reg_424 <= trunc_ln180_fu_208_p1;
                trunc_ln_reg_419 <= p_n_dout(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln172_reg_434 <= icmp_ln172_fu_226_p2;
                icmp_ln172_reg_434_pp0_iter1_reg <= icmp_ln172_reg_434;
                icmp_ln172_reg_434_pp0_iter2_reg <= icmp_ln172_reg_434_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln172_fu_226_p2 = ap_const_lv1_0))) then
                icmp_ln174_reg_438 <= icmp_ln174_fu_231_p2;
                select_ln172_reg_443 <= select_ln172_fu_236_p3;
                    shl_ln_reg_453(13 downto 2) <= shl_ln_fu_248_p3(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln172_reg_434_pp0_iter1_reg = ap_const_lv1_0))) then
                p_in_load_10_reg_512 <= p_in_q0;
                p_in_load_reg_507 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_434 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                select_ln172_1_reg_484 <= select_ln172_1_fu_289_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_434 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln172_reg_489 <= trunc_ln172_fu_296_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_453(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_condition_pp0_exit_iter1_state4, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln172_1_fu_283_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_phi_fu_187_p4));
    add_ln172_fu_262_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_160) + unsigned(ap_const_lv62_1));
    add_ln174_fu_278_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(select_ln172_reg_443));
    add_ln180_1_fu_312_p2 <= std_logic_vector(unsigned(add_ln180_fu_307_p2) + unsigned(p_in_offset_read_reg_404));
    add_ln180_3_fu_322_p2 <= std_logic_vector(signed(grp_fu_382_p3) + signed(p_in_offset_read_reg_404));
    add_ln180_5_fu_331_p2 <= std_logic_vector(signed(grp_fu_390_p3) + signed(p_in_offset_read_reg_404));
    add_ln180_7_fu_340_p2 <= std_logic_vector(signed(grp_fu_397_p3) + signed(p_in_offset_read_reg_404));
    add_ln180_fu_307_p2 <= std_logic_vector(unsigned(trunc_ln172_reg_489) + unsigned(shl_ln180_1_fu_300_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter2, icmp_ln172_reg_434_pp0_iter2_reg)
    begin
                ap_block_pp0_stage1_01001 <= ((icmp_ln172_reg_434_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter2, icmp_ln172_reg_434_pp0_iter2_reg)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln172_reg_434_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter2, icmp_ln172_reg_434_pp0_iter2_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln172_reg_434_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
                ap_block_state1 <= ((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage1_iter2_assign_proc : process(p_out_full_n, icmp_ln172_reg_434_pp0_iter2_reg)
    begin
                ap_block_state7_pp0_stage1_iter2 <= ((icmp_ln172_reg_434_pp0_iter2_reg = ap_const_lv1_0) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln172_reg_434, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln172_reg_434 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_187_p4_assign_proc : process(ap_enable_reg_pp0_iter2, i_reg_183, ap_CS_fsm_pp0_stage0, icmp_ln172_reg_434_pp0_iter1_reg, select_ln172_1_reg_484, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln172_reg_434_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_i_phi_fu_187_p4 <= select_ln172_1_reg_484;
        else 
            ap_phi_mux_i_phi_fu_187_p4 <= i_reg_183;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_164_p4_assign_proc : process(icmp_ln172_reg_434, indvar_flatten_reg_160, ap_CS_fsm_pp0_stage0, add_ln172_reg_464, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln172_reg_434 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_164_p4 <= add_ln172_reg_464;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_164_p4 <= indvar_flatten_reg_160;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_176_p4_assign_proc : process(icmp_ln172_reg_434, k_reg_172, ap_CS_fsm_pp0_stage0, add_ln174_reg_479, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln172_reg_434 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_k_phi_fu_176_p4 <= add_ln174_reg_479;
        else 
            ap_phi_mux_k_phi_fu_176_p4 <= k_reg_172;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_220_p0 <= bound_fu_220_p00(32 - 1 downto 0);
    bound_fu_220_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_k_dout),62));
    bound_fu_220_p1 <= bound_fu_220_p10(30 - 1 downto 0);
    bound_fu_220_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_198_p4),62));
    empty_83_fu_244_p1 <= select_ln172_fu_236_p3(12 - 1 downto 0);
    empty_fu_194_p1 <= p_k_dout(14 - 1 downto 0);

    grp_fu_376_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_376_ce <= ap_const_logic_1;
        else 
            grp_fu_376_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_382_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_382_ce <= ap_const_logic_1;
        else 
            grp_fu_382_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_382_p1 <= (shl_ln_fu_248_p3 or ap_const_lv14_1);
    grp_fu_382_p2 <= select_ln172_1_fu_289_p3(14 - 1 downto 0);

    grp_fu_390_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_390_ce <= ap_const_logic_1;
        else 
            grp_fu_390_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_390_p1 <= (shl_ln_reg_453 or ap_const_lv14_2);

    grp_fu_397_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_397_ce <= ap_const_logic_1;
        else 
            grp_fu_397_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_397_p1 <= (shl_ln_reg_453 or ap_const_lv14_3);
    icmp_ln172_fu_226_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_164_p4 = bound_reg_429) else "0";
    icmp_ln174_fu_231_p2 <= "1" when (ap_phi_mux_k_phi_fu_176_p4 = trunc_ln_reg_419) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    l_v_25_fu_352_p1 <= p_in_load_10_reg_512;
    l_v_26_fu_355_p1 <= p_in_q1;
    l_v_27_fu_359_p1 <= p_in_q0;
    l_v_fu_349_p1 <= p_in_load_reg_507;

    p_in_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln180_1_fu_326_p1, zext_ln180_3_fu_344_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_in_address0 <= zext_ln180_3_fu_344_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_in_address0 <= zext_ln180_1_fu_326_p1(14 - 1 downto 0);
        else 
            p_in_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    p_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln180_fu_317_p1, zext_ln180_2_fu_335_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_in_address1 <= zext_ln180_2_fu_335_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_in_address1 <= zext_ln180_fu_317_p1(14 - 1 downto 0);
        else 
            p_in_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    p_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_in_ce0 <= ap_const_logic_1;
        else 
            p_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_in_ce1 <= ap_const_logic_1;
        else 
            p_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_offset_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_blk_n <= p_in_offset_empty_n;
        else 
            p_in_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_in_offset_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_read <= ap_const_logic_1;
        else 
            p_in_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    p_k_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_blk_n <= p_k_empty_n;
        else 
            p_k_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_k_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out_blk_n <= p_k_out_full_n;
        else 
            p_k_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_k_out_din <= p_k_dout;

    p_k_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out_write <= ap_const_logic_1;
        else 
            p_k_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_k_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_read <= ap_const_logic_1;
        else 
            p_k_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_blk_n <= p_n_out_full_n;
        else 
            p_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_n_out_din <= p_n_dout;

    p_n_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_write <= ap_const_logic_1;
        else 
            p_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_n_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_out_blk_n_assign_proc : process(p_out_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, icmp_ln172_reg_434_pp0_iter2_reg)
    begin
        if (((icmp_ln172_reg_434_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_out_blk_n <= p_out_full_n;
        else 
            p_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_din <= (((l_v_27_fu_359_p1 & l_v_26_fu_355_p1) & l_v_25_fu_352_p1) & l_v_fu_349_p1);

    p_out_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, icmp_ln172_reg_434_pp0_iter2_reg, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln172_reg_434_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_out_write <= ap_const_logic_1;
        else 
            p_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln172_1_fu_289_p3 <= 
        add_ln172_1_fu_283_p2 when (icmp_ln174_reg_438(0) = '1') else 
        ap_phi_mux_i_phi_fu_187_p4;
    select_ln172_fu_236_p3 <= 
        ap_const_lv30_0 when (icmp_ln174_fu_231_p2(0) = '1') else 
        ap_phi_mux_k_phi_fu_176_p4;
    shl_ln180_1_fu_300_p3 <= (grp_fu_376_p2 & ap_const_lv2_0);
    shl_ln_fu_248_p3 <= (empty_83_fu_244_p1 & ap_const_lv2_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln172_fu_296_p1 <= select_ln172_1_fu_289_p3(14 - 1 downto 0);
    trunc_ln180_fu_208_p1 <= p_k_dout(12 - 1 downto 0);
    trunc_ln_fu_198_p4 <= p_n_dout(31 downto 2);
    zext_ln180_1_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_3_fu_322_p2),64));
    zext_ln180_2_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_5_fu_331_p2),64));
    zext_ln180_3_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_7_fu_340_p2),64));
    zext_ln180_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_1_fu_312_p2),64));
end behav;
