-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pmsm_model\uz_pmsm_model_src_uz_pmsm_model.vhd
-- Created: 2024-05-23 13:50:31
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 200x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- outputs_0                     ce_out        2e-06
-- outputs_1                     ce_out        2e-06
-- outputs_2                     ce_out        2e-06
-- outputs_3                     ce_out        2e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_src_uz_pmsm_model
-- Source Path: uz_pmsm_model/uz_pmsm_model
-- Hierarchy Level: 0
-- Model version: 7.0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_src_uz_pmsm_model_pkg.ALL;

ENTITY uz_pmsm_model_src_uz_pmsm_model IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        reset_integrators                 :   IN    std_logic;
        simulate_mechanical               :   IN    std_logic;
        simulate_nonlinear                :   IN    std_logic;
        reciprocal_J                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        mu                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        M_n0                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        L_d                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        L_q                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        R1                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        polepairs                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psi_pm                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_0               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_1               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_2               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_3               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_4               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_5               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_6               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_7               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_8               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_9               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_10              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_11              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_12              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_13              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_14              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_15              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_16              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_17              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_18              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_19              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_20              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_21              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        fitting_parameter_22              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_0                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_2                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_3                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        outputs_0                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_1                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_2                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_3                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END uz_pmsm_model_src_uz_pmsm_model;


ARCHITECTURE rtl OF uz_pmsm_model_src_uz_pmsm_model IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_src_uz_pmsm_model_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_200_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_cosh_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_abs_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_recip_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_tanh_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_signum_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_log_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_div_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_src_uz_pmsm_model_tc
    USE ENTITY work.uz_pmsm_model_src_uz_pmsm_model_tc(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_sub_single
    USE ENTITY work.uz_pmsm_model_src_nfp_sub_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_mul_single
    USE ENTITY work.uz_pmsm_model_src_nfp_mul_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_cosh_single
    USE ENTITY work.uz_pmsm_model_src_nfp_cosh_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_abs_single
    USE ENTITY work.uz_pmsm_model_src_nfp_abs_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_recip_single
    USE ENTITY work.uz_pmsm_model_src_nfp_recip_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_tanh_single
    USE ENTITY work.uz_pmsm_model_src_nfp_tanh_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_add_single
    USE ENTITY work.uz_pmsm_model_src_nfp_add_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_signum_single
    USE ENTITY work.uz_pmsm_model_src_nfp_signum_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_log_single
    USE ENTITY work.uz_pmsm_model_src_nfp_log_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_uminus_single
    USE ENTITY work.uz_pmsm_model_src_nfp_uminus_single(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_div_single
    USE ENTITY work.uz_pmsm_model_src_nfp_div_single(rtl);

  -- Signals
  SIGNAL enb_1_200_1                      : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL reset_integrators_1              : std_logic;
  SIGNAL reset_integrators_2              : std_logic;
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL inputs                           : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL inputs_4                         : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL inputs_0_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL u_d                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL R1_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL simulate_nonlinear_1             : std_logic;
  SIGNAL simulate_nonlinear_2             : std_logic;
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter                : vector_of_std_logic_vector32(0 TO 22);  -- ufix32 [23]
  SIGNAL fitting_parameter_23             : vector_of_std_logic_vector32(0 TO 22);  -- ufix32 [23]
  SIGNAL ad3                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_1_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad2                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_0_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad1                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad6                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_4_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad5                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_3_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad4                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL inputs_1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL u_q                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From2_out1_13                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL alpha1_Fid2_Giq2                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL simulate_nonlinear_3             : std_logic;
  SIGNAL L_d_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psi_pm_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psi_pm_2                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq2                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_19_1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq1_aq2                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_22_1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq3_aq6                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq5                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_18_1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq4_aq5                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_12_1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Reciprodical_F1G1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL simulate_mechanical_1            : std_logic;
  SIGNAL omega_mech                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_2                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reciprocal_J_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reciprocal_J_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_3                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL simulate_nonlinear_4             : std_logic;
  SIGNAL L_q_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_21_1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad1_ad2                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_1_2            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad2_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad3_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_20_1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad4_ad5                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_4_2            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad5_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad6_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_13_1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL alpha1_Fid2_Giq2_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL polepairs_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL polepairs_2                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_n0_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_n0_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL load_torque                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch8_out1_timer               : std_logic;
  SIGNAL delayMatch50_reg                 : std_logic_vector(96 DOWNTO 0);  -- ufix1 [97]
  SIGNAL Switch8_out1_timer_1             : std_logic;
  SIGNAL Switch8_out1_default             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL L_q_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq2_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1_2                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From1_out1_17                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq1_aq2_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From1_out1_8                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq3                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq5_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From1_out1_16                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq4_aq5_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From1_out1_11                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq6                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From1_out1_13                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL alpha1_Fid2_Giq2_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq3_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq2_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_6_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq1                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq5_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fitting_parameter_9_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq4                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL aq6_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From2_out1_12                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL alpha1_Fid1_Giq1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL L_d_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad3_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From4_out1_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad2_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1_3                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From4_out1_15                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad1_ad2_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad6_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From4_out1_4                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad5_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From4_out1_14                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ad4_ad5_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From4_out1_12                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL F1G1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1_4                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_2                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_cross_s1_integrated         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_cross_s1_integrated_1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh1_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product15_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_control_abs              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Reciprocal1_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_s1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psidself_abgeleitet              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_s1_abgeleitet         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product10_out_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh4_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product14_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_control_abs               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Reciprocal_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psidself_abgeleitet_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_s1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Ldd                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch2_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_control_abs_1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide_recip_out                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product13_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch6_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL diq_dt                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL diq_dt_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay1_bypass_reg           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay1_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay1_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay1_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product6_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh1_out1_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_s1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_s1_integrated         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_s1_integrated_1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1_2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh1_out1_2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product15_out1_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_control_abs_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Reciprocal1_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_s1_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum4_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1_2                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product20_out_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_cross                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh3_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product14_out1_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_control_abs_2             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Reciprocal_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psidself_abgeleitet_2            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Lqq                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Lqq_modell                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch8_control_abs              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch8_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch8_out1_zp                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product9_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_3                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_4                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sign1_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sign1_out1_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Abs_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product12_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum5_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_s1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_s1_2                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh2_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_control_abs_2            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1_3                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Log1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product9_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_s1_2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_s1_3                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh4_out1_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_control_abs_3             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1_3                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Log2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_cross_s1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_cross_s1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product20_out_1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_cross_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_self                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_self_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_approx                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psi_q                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_5                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL i_d                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1_3                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL i_q                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL i_q_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch5_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1_2                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_bypass_reg                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1_3                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product11_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_toDel                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_toDel_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_lowered1_bypass_reg       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_delOut                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_delOut_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1_4                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product5_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL error_id                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_control_abs_3            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1_4                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Log1_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product12_out1_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product8_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product7_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh2_out1_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_control_abs_4             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1_5                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Log_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product6_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_op_stage1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_s1_3                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_s1_4                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product10_out_1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psidself                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psidself_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psi_d_approx                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psi_d                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product5_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1_3                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psi_d_omega_ell                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psiq_cross_s1_2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_cross_s1_5                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product20_out_1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product20_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Lqd                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL did_dt                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL did_dt_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay_bypass_reg            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product11_out1_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch4_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum4_op_stage1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum4_op_stage2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum4_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL u_d_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum5_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_toDel_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_toDel_3                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_lowered2_bypass_reg       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_delOut_2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_delOut_3                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product5_out1_2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1_4                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1_4                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh1_out1_3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psid_s1_4                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1_4                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1_3                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Tanh_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product20_out_1_3                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product20_out1_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Ldq                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product12_out1_2                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch3_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_3                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_op_stage1_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_op_stage2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_out1_2                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL u_d_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum5_out1_2                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_toDel_4                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_toDel_5                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_delOut_4                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_delOut_5                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_mech_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_mech_2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_out1                         : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL t_bypass_reg                     : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Mux_out1_1                       : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]

BEGIN
  u_uz_pmsm_model_tc : uz_pmsm_model_src_uz_pmsm_model_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_200_1 => enb_1_200_1
              );

  u_nfp_sub_comp : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1,  -- single
              nfp_in2 => ad6_2,  -- single
              nfp_out => Sum1_out1  -- single
              );

  u_nfp_mul_comp : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum1_out1,  -- single
              nfp_in2 => ad5_2,  -- single
              nfp_out => Product2_out1  -- single
              );

  u_nfp_cosh_comp : uz_pmsm_model_src_nfp_cosh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product2_out1,  -- single
              nfp_out => Tanh1_out1  -- single
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Tanh1_out1,  -- single
              nfp_in2 => Tanh1_out1,  -- single
              nfp_out => Product15_out1  -- single
              );

  u_nfp_abs_comp : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Product15_out1,  -- single
              nfp_out => Switch1_control_abs  -- single
              );

  u_nfp_recip_comp : uz_pmsm_model_src_nfp_recip_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch1_out1,  -- single
              nfp_out => Reciprocal1_out1  -- single
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Reciprocal1_out1,  -- single
              nfp_in2 => ad4_ad5_1,  -- single
              nfp_out => psid_s1  -- single
              );

  u_nfp_sub_comp_1 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psidself_abgeleitet,  -- single
              nfp_in2 => psid_s1,  -- single
              nfp_out => psid_cross_s1_abgeleitet  -- single
              );

  -- mul #1
  u_nfp_mul_comp_3 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psid_cross_s1_abgeleitet,  -- single
              nfp_in2 => psiq_cross_s1_integrated_1,  -- single
              nfp_out => Product10_out_1  -- single
              );

  -- mul #2
  u_nfp_mul_comp_4 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product10_out_1,  -- single
              nfp_in2 => F1G1,  -- single
              nfp_out => psid_cross  -- single
              );

  u_nfp_sub_comp_2 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1,  -- single
              nfp_in2 => ad3_2,  -- single
              nfp_out => Sum_out1  -- single
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_out1,  -- single
              nfp_in2 => ad2_2,  -- single
              nfp_out => Product_out1  -- single
              );

  u_nfp_cosh_comp_1 : uz_pmsm_model_src_nfp_cosh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product_out1,  -- single
              nfp_out => Tanh4_out1  -- single
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Tanh4_out1,  -- single
              nfp_in2 => Tanh4_out1,  -- single
              nfp_out => Product14_out1  -- single
              );

  u_nfp_abs_comp_1 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Product14_out1,  -- single
              nfp_out => Switch_control_abs  -- single
              );

  u_nfp_recip_comp_1 : uz_pmsm_model_src_nfp_recip_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch_out1,  -- single
              nfp_out => Reciprocal_out1  -- single
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Reciprocal_out1,  -- single
              nfp_in2 => ad1_ad2_1,  -- single
              nfp_out => psidself_abgeleitet  -- single
              );

  u_nfp_sub_comp_3 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psidself_abgeleitet_1,  -- single
              nfp_in2 => psid_cross,  -- single
              nfp_out => psid_cross_s1  -- single
              );

  u_nfp_abs_comp_2 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Switch2_out1,  -- single
              nfp_out => Switch_control_abs_1  -- single
              );

  u_nfp_recip_comp_2 : uz_pmsm_model_src_nfp_recip_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch_out1_1,  -- single
              nfp_out => Divide_recip_out  -- single
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product13_out1,  -- single
              nfp_in2 => Switch6_out1,  -- single
              nfp_out => Product3_out1  -- single
              );

  u_nfp_mul_comp_9 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => aq6_1,  -- single
              nfp_out => Product6_out1  -- single
              );

  u_nfp_mul_comp_10 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => aq5_2,  -- single
              nfp_out => Product2_out1_1  -- single
              );

  u_nfp_tanh_comp : uz_pmsm_model_src_nfp_tanh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product2_out1_1,  -- single
              nfp_out => Tanh1_out1_1  -- single
              );

  u_nfp_mul_comp_11 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Tanh1_out1_1,  -- single
              nfp_in2 => aq4,  -- single
              nfp_out => psiq_s1  -- single
              );

  u_nfp_add_comp : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psiq_s1,  -- single
              nfp_in2 => Product6_out1,  -- single
              nfp_out => Sum1_out1_1  -- single
              );

  u_nfp_mul_comp_12 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => aq2_2,  -- single
              nfp_out => Product_out1_1  -- single
              );

  u_nfp_tanh_comp_1 : uz_pmsm_model_src_nfp_tanh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product_out1_1,  -- single
              nfp_out => Tanh_out1  -- single
              );

  u_nfp_mul_comp_13 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Tanh_out1,  -- single
              nfp_in2 => aq1,  -- single
              nfp_out => Product1_out1  -- single
              );

  u_nfp_mul_comp_14 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => aq5_1,  -- single
              nfp_out => Product2_out1_2  -- single
              );

  u_nfp_cosh_comp_2 : uz_pmsm_model_src_nfp_cosh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product2_out1_2,  -- single
              nfp_out => Tanh1_out1_2  -- single
              );

  u_nfp_mul_comp_15 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Tanh1_out1_2,  -- single
              nfp_in2 => Tanh1_out1_2,  -- single
              nfp_out => Product15_out1_1  -- single
              );

  u_nfp_abs_comp_3 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Product15_out1_1,  -- single
              nfp_out => Switch1_control_abs_1  -- single
              );

  u_nfp_recip_comp_3 : uz_pmsm_model_src_nfp_recip_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch1_out1_1,  -- single
              nfp_out => Reciprocal1_out1_1  -- single
              );

  u_nfp_mul_comp_16 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Reciprocal1_out1_1,  -- single
              nfp_in2 => aq4_aq5_1,  -- single
              nfp_out => psid_s1_1  -- single
              );

  u_nfp_add_comp_1 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psid_s1_1,  -- single
              nfp_in2 => aq6,  -- single
              nfp_out => Sum4_out1  -- single
              );

  u_nfp_sub_comp_4 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum1_out1_2,  -- single
              nfp_in2 => Sum4_out1,  -- single
              nfp_out => Sum2_out1  -- single
              );

  -- mul #1
  u_nfp_mul_comp_17 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum2_out1,  -- single
              nfp_in2 => psid_cross_s1_integrated_1,  -- single
              nfp_out => Product20_out_1  -- single
              );

  -- mul #2
  u_nfp_mul_comp_18 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product20_out_1,  -- single
              nfp_in2 => alpha1_Fid2_Giq2_2,  -- single
              nfp_out => psiq_cross  -- single
              );

  u_nfp_mul_comp_19 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => aq2_1,  -- single
              nfp_out => Product_out1_2  -- single
              );

  u_nfp_cosh_comp_3 : uz_pmsm_model_src_nfp_cosh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product_out1_2,  -- single
              nfp_out => Tanh3_out1  -- single
              );

  u_nfp_mul_comp_20 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Tanh3_out1,  -- single
              nfp_in2 => Tanh3_out1,  -- single
              nfp_out => Product14_out1_1  -- single
              );

  u_nfp_abs_comp_4 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Product14_out1_1,  -- single
              nfp_out => Switch_control_abs_2  -- single
              );

  u_nfp_recip_comp_4 : uz_pmsm_model_src_nfp_recip_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch_out1_2,  -- single
              nfp_out => Reciprocal_out1_1  -- single
              );

  u_nfp_mul_comp_21 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Reciprocal_out1_1,  -- single
              nfp_in2 => aq1_aq2_1,  -- single
              nfp_out => psidself_abgeleitet_2  -- single
              );

  u_nfp_add_comp_2 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psidself_abgeleitet_2,  -- single
              nfp_in2 => aq3,  -- single
              nfp_out => Sum1_out1_2  -- single
              );

  u_nfp_sub_comp_5 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum1_out1_2,  -- single
              nfp_in2 => psiq_cross,  -- single
              nfp_out => Lqq  -- single
              );

  u_nfp_abs_comp_5 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Switch1_out1_2,  -- single
              nfp_out => Switch8_control_abs  -- single
              );

  u_nfp_mul_comp_22 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => R1_1,  -- single
              nfp_out => Product9_out1  -- single
              );

  u_nfp_signum_comp : uz_pmsm_model_src_nfp_signum_single
    PORT MAP( nfp_in => Delay1_out1_3,  -- single
              nfp_out => Sign1_out1  -- single
              );

  u_nfp_abs_comp_6 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Delay1_out1_3,  -- single
              nfp_out => Abs_out1  -- single
              );

  u_nfp_mul_comp_23 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => mu,  -- single
              nfp_in2 => Abs_out1,  -- single
              nfp_out => Product12_out1  -- single
              );

  u_nfp_add_comp_3 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product12_out1,  -- single
              nfp_in2 => M_n0_2,  -- single
              nfp_out => Sum5_out1  -- single
              );

  u_nfp_mul_comp_24 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum5_out1,  -- single
              nfp_in2 => Sign1_out1_1,  -- single
              nfp_out => Product4_out1  -- single
              );

  u_nfp_sub_comp_6 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1,  -- single
              nfp_in2 => ad6_1,  -- single
              nfp_out => psid_cross_s1_1  -- single
              );

  u_nfp_mul_comp_25 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => ad5_1,  -- single
              nfp_in2 => psid_cross_s1_1,  -- single
              nfp_out => psid_s1_2  -- single
              );

  u_nfp_cosh_comp_4 : uz_pmsm_model_src_nfp_cosh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psid_s1_2,  -- single
              nfp_out => Tanh2_out1  -- single
              );

  u_nfp_abs_comp_7 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Tanh2_out1,  -- single
              nfp_out => Switch1_control_abs_2  -- single
              );

  u_nfp_log_comp : uz_pmsm_model_src_nfp_log_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch1_out1_3,  -- single
              nfp_out => Log1_out1  -- single
              );

  u_nfp_mul_comp_26 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => ad4_ad5,  -- single
              nfp_in2 => Log1_out1,  -- single
              nfp_out => Product9_out1_1  -- single
              );

  u_nfp_sub_comp_7 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1,  -- single
              nfp_in2 => ad3_1,  -- single
              nfp_out => psid_cross_s1_2  -- single
              );

  u_nfp_mul_comp_27 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => ad2_1,  -- single
              nfp_in2 => psid_cross_s1_2,  -- single
              nfp_out => psid_s1_3  -- single
              );

  u_nfp_cosh_comp_5 : uz_pmsm_model_src_nfp_cosh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psid_s1_3,  -- single
              nfp_out => Tanh4_out1_1  -- single
              );

  u_nfp_abs_comp_8 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Tanh4_out1_1,  -- single
              nfp_out => Switch_control_abs_3  -- single
              );

  u_nfp_log_comp_1 : uz_pmsm_model_src_nfp_log_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch_out1_3,  -- single
              nfp_out => Log2_out1  -- single
              );

  u_nfp_mul_comp_28 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => ad1_ad2,  -- single
              nfp_in2 => Log2_out1,  -- single
              nfp_out => Product4_out1_1  -- single
              );

  u_nfp_sub_comp_8 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product4_out1_1,  -- single
              nfp_in2 => Product9_out1_1,  -- single
              nfp_out => psid_cross_s1_integrated  -- single
              );

  -- mul #1
  u_nfp_mul_comp_29 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psiq_cross_s1_1,  -- single
              nfp_in2 => psid_cross_s1_integrated,  -- single
              nfp_out => Product20_out_1_1  -- single
              );

  -- mul #2
  u_nfp_mul_comp_30 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product20_out_1_1,  -- single
              nfp_in2 => alpha1_Fid2_Giq2_1,  -- single
              nfp_out => psiq_cross_1  -- single
              );

  u_nfp_sub_comp_9 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psiq_self_1,  -- single
              nfp_in2 => psiq_cross_1,  -- single
              nfp_out => psiq_approx  -- single
              );

  u_nfp_mul_comp_31 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => L_q_1,  -- single
              nfp_out => Product1_out1_1  -- single
              );

  u_nfp_mul_comp_32 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => i_d,  -- single
              nfp_in2 => Switch6_out1,  -- single
              nfp_out => Product2_out1_3  -- single
              );

  u_nfp_mul_comp_33 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch5_out1,  -- single
              nfp_in2 => i_q_1,  -- single
              nfp_out => Product3_out1_1  -- single
              );

  u_nfp_sub_comp_10 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product3_out1_1,  -- single
              nfp_in2 => Product2_out1_3,  -- single
              nfp_out => Sum3_out1  -- single
              );

  u_nfp_mul_comp_34 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_3,  -- single
              nfp_in2 => Sum3_out1,  -- single
              nfp_out => M_Mi  -- single
              );

  u_nfp_mul_comp_35 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi,  -- single
              nfp_in2 => polepairs_2,  -- single
              nfp_out => M_Mi_1  -- single
              );

  u_nfp_sub_comp_11 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_1,  -- single
              nfp_in2 => Product4_out1,  -- single
              nfp_out => Sum_out1_1  -- single
              );

  u_nfp_sub_comp_12 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay_out1,  -- single
              nfp_in2 => load_torque,  -- single
              nfp_out => Sum1_out1_3  -- single
              );

  u_nfp_mul_comp_36 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => reciprocal_J_2,  -- single
              nfp_in2 => Sum1_out1_3,  -- single
              nfp_out => Product11_out1  -- single
              );

  u_nfp_mul_comp_37 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_2,  -- single
              nfp_in2 => Product11_out1,  -- single
              nfp_out => Gain_out1  -- single
              );

  u_nfp_add_comp_4 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1,  -- single
              nfp_in2 => Delay1_out1_4,  -- single
              nfp_out => Sum3_out1_1  -- single
              );

  u_nfp_mul_comp_38 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1_4,  -- single
              nfp_in2 => polepairs_1,  -- single
              nfp_out => Product13_out1  -- single
              );

  u_nfp_mul_comp_39 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => aq5,  -- single
              nfp_out => Product5_out1  -- single
              );

  u_nfp_cosh_comp_6 : uz_pmsm_model_src_nfp_cosh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product5_out1,  -- single
              nfp_out => error_id  -- single
              );

  u_nfp_abs_comp_9 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => error_id,  -- single
              nfp_out => Switch1_control_abs_3  -- single
              );

  u_nfp_log_comp_2 : uz_pmsm_model_src_nfp_log_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch1_out1_4,  -- single
              nfp_out => Log1_out1_1  -- single
              );

  u_nfp_mul_comp_40 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Log1_out1_1,  -- single
              nfp_in2 => aq4_aq5,  -- single
              nfp_out => Product12_out1_1  -- single
              );

  u_nfp_mul_comp_41 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => Delay1_out1_1,  -- single
              nfp_out => Product8_out1  -- single
              );

  u_nfp_mul_comp_42 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product8_out1,  -- single
              nfp_in2 => aq3_aq6,  -- single
              nfp_out => Product7_out1  -- single
              );

  u_nfp_mul_comp_43 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => aq2,  -- single
              nfp_out => Product4_out1_2  -- single
              );

  u_nfp_cosh_comp_7 : uz_pmsm_model_src_nfp_cosh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product4_out1_2,  -- single
              nfp_out => Tanh2_out1_1  -- single
              );

  u_nfp_abs_comp_10 : uz_pmsm_model_src_nfp_abs_single
    PORT MAP( nfp_in => Tanh2_out1_1,  -- single
              nfp_out => Switch_control_abs_4  -- single
              );

  u_nfp_log_comp_3 : uz_pmsm_model_src_nfp_log_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch_out1_5,  -- single
              nfp_out => Log_out1  -- single
              );

  u_nfp_mul_comp_44 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Log_out1,  -- single
              nfp_in2 => aq1_aq2,  -- single
              nfp_out => Product6_out1_1  -- single
              );

  u_nfp_add_comp_5 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product6_out1_1,  -- single
              nfp_in2 => Product7_out1,  -- single
              nfp_out => Sum3_op_stage1  -- single
              );

  u_nfp_sub_comp_13 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum3_op_stage1,  -- single
              nfp_in2 => Product12_out1_1,  -- single
              nfp_out => psiq_cross_s1_integrated  -- single
              );

  -- mul #1
  u_nfp_mul_comp_45 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psid_cross_s1_4,  -- single
              nfp_in2 => psiq_cross_s1_integrated,  -- single
              nfp_out => Product10_out_1_1  -- single
              );

  -- mul #2
  u_nfp_mul_comp_46 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product10_out_1_1,  -- single
              nfp_in2 => Reciprodical_F1G1,  -- single
              nfp_out => psid_cross_1  -- single
              );

  u_nfp_sub_comp_14 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psidself_1,  -- single
              nfp_in2 => psid_cross_1,  -- single
              nfp_out => psi_d_approx  -- single
              );

  u_nfp_mul_comp_47 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1,  -- single
              nfp_in2 => L_d_1,  -- single
              nfp_out => Product5_out1_1  -- single
              );

  u_nfp_add_comp_6 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product5_out1_1,  -- single
              nfp_in2 => psi_pm_2,  -- single
              nfp_out => Sum_out1_3  -- single
              );

  u_nfp_mul_comp_48 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch5_out1,  -- single
              nfp_in2 => Product13_out1,  -- single
              nfp_out => psi_d_omega_ell  -- single
              );

  -- mul #1
  u_nfp_mul_comp_49 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psid_cross_s1_5,  -- single
              nfp_in2 => psiq_cross_s1_2,  -- single
              nfp_out => Product20_out_1_2  -- single
              );

  -- mul #2
  u_nfp_mul_comp_50 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product20_out_1_2,  -- single
              nfp_in2 => alpha1_Fid2_Giq2,  -- single
              nfp_out => Product20_out1  -- single
              );

  u_nfp_uminus_comp : uz_pmsm_model_src_nfp_uminus_single
    PORT MAP( nfp_in => Product20_out1,  -- single
              nfp_out => Lqd  -- single
              );

  u_nfp_mul_comp_51 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Unit_Delay_out1_2,  -- single
              nfp_in2 => Lqd,  -- single
              nfp_out => Product11_out1_1  -- single
              );

  u_nfp_sub_comp_15 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => u_q,  -- single
              nfp_in2 => Switch4_out1,  -- single
              nfp_out => Sum4_op_stage1  -- single
              );

  u_nfp_sub_comp_16 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum4_op_stage1,  -- single
              nfp_in2 => psi_d_omega_ell,  -- single
              nfp_out => Sum4_op_stage2  -- single
              );

  u_nfp_sub_comp_17 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum4_op_stage2,  -- single
              nfp_in2 => Product9_out1,  -- single
              nfp_out => Sum4_out1_1  -- single
              );

  u_nfp_div_comp : uz_pmsm_model_src_nfp_div_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum4_out1_1,  -- single
              nfp_in2 => Switch8_out1_zp,  -- single
              nfp_out => diq_dt  -- single
              );

  u_nfp_mul_comp_52 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_1,  -- single
              nfp_in2 => diq_dt,  -- single
              nfp_out => u_d_1  -- single
              );

  u_nfp_add_comp_7 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => u_d_1,  -- single
              nfp_in2 => Delay1_out1_2,  -- single
              nfp_out => Sum5_out1_1  -- single
              );

  u_nfp_mul_comp_53 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- single
              nfp_in2 => aq3_1,  -- single
              nfp_out => Product5_out1_2  -- single
              );

  u_nfp_add_comp_8 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product5_out1_2,  -- single
              nfp_in2 => Product1_out1,  -- single
              nfp_out => psiq_self  -- single
              );

  u_nfp_sub_comp_18 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psiq_self,  -- single
              nfp_in2 => Sum1_out1_1,  -- single
              nfp_out => psiq_cross_s1  -- single
              );

  u_nfp_sub_comp_19 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1,  -- single
              nfp_in2 => ad6,  -- single
              nfp_out => Sum1_out1_4  -- single
              );

  u_nfp_mul_comp_54 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum1_out1_4,  -- single
              nfp_in2 => ad5,  -- single
              nfp_out => Product2_out1_4  -- single
              );

  u_nfp_tanh_comp_2 : uz_pmsm_model_src_nfp_tanh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product2_out1_4,  -- single
              nfp_out => Tanh1_out1_3  -- single
              );

  u_nfp_mul_comp_55 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Tanh1_out1_3,  -- single
              nfp_in2 => ad4,  -- single
              nfp_out => psid_s1_4  -- single
              );

  u_nfp_sub_comp_20 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1,  -- single
              nfp_in2 => ad3,  -- single
              nfp_out => Sum_out1_4  -- single
              );

  u_nfp_mul_comp_56 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_out1_4,  -- single
              nfp_in2 => ad2,  -- single
              nfp_out => Product_out1_3  -- single
              );

  u_nfp_tanh_comp_3 : uz_pmsm_model_src_nfp_tanh_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product_out1_3,  -- single
              nfp_out => Tanh_out1_1  -- single
              );

  u_nfp_mul_comp_57 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Tanh_out1_1,  -- single
              nfp_in2 => ad1,  -- single
              nfp_out => psidself  -- single
              );

  u_nfp_sub_comp_21 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psidself,  -- single
              nfp_in2 => psid_s1_4,  -- single
              nfp_out => psid_cross_s1_3  -- single
              );

  -- mul #1
  u_nfp_mul_comp_58 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psid_cross_s1_3,  -- single
              nfp_in2 => psiq_cross_s1,  -- single
              nfp_out => Product20_out_1_3  -- single
              );

  -- mul #2
  u_nfp_mul_comp_59 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product20_out_1_3,  -- single
              nfp_in2 => alpha1_Fid1_Giq1,  -- single
              nfp_out => Product20_out1_1  -- single
              );

  u_nfp_uminus_comp_1 : uz_pmsm_model_src_nfp_uminus_single
    PORT MAP( nfp_in => Product20_out1_1,  -- single
              nfp_out => Ldq  -- single
              );

  u_nfp_mul_comp_60 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Ldq,  -- single
              nfp_in2 => Unit_Delay1_out1_2,  -- single
              nfp_out => Product12_out1_2  -- single
              );

  u_nfp_mul_comp_61 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => R1_1,  -- single
              nfp_in2 => Delay1_out1,  -- single
              nfp_out => Product4_out1_3  -- single
              );

  u_nfp_sub_comp_22 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => u_d,  -- single
              nfp_in2 => Product4_out1_3,  -- single
              nfp_out => Sum3_op_stage1_1  -- single
              );

  u_nfp_sub_comp_23 : uz_pmsm_model_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum3_op_stage1_1,  -- single
              nfp_in2 => Switch3_out1,  -- single
              nfp_out => Sum3_op_stage2  -- single
              );

  u_nfp_add_comp_9 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum3_op_stage2,  -- single
              nfp_in2 => Product3_out1,  -- single
              nfp_out => Sum3_out1_2  -- single
              );

  u_nfp_mul_comp_62 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum3_out1_2,  -- single
              nfp_in2 => Divide_recip_out,  -- single
              nfp_out => did_dt  -- single
              );

  u_nfp_mul_comp_63 : uz_pmsm_model_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst,  -- single
              nfp_in2 => did_dt,  -- single
              nfp_out => u_d_2  -- single
              );

  u_nfp_add_comp_10 : uz_pmsm_model_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => u_d_2,  -- single
              nfp_in2 => Delay1_out1_5,  -- single
              nfp_out => Sum5_out1_2  -- single
              );

  reset_integrators_1 <= reset_integrators;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_2 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_2 <= reset_integrators_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  kconst <= X"360637bd";

  inputs(0) <= inputs_0;
  inputs(1) <= inputs_1;
  inputs(2) <= inputs_2;
  inputs(3) <= inputs_3;

  inputs_4 <= inputs;

  inputs_0_1 <= inputs_4(0);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        u_d <= X"00000000";
      ELSIF enb = '1' THEN
        u_d <= inputs_0_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  R1_1 <= R1;

  simulate_nonlinear_1 <= simulate_nonlinear;

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        simulate_nonlinear_2 <= '0';
      ELSIF enb = '1' THEN
        simulate_nonlinear_2 <= simulate_nonlinear_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Constant_out1 <= X"00000000";

  fitting_parameter(0) <= fitting_parameter_0;
  fitting_parameter(1) <= fitting_parameter_1;
  fitting_parameter(2) <= fitting_parameter_2;
  fitting_parameter(3) <= fitting_parameter_3;
  fitting_parameter(4) <= fitting_parameter_4;
  fitting_parameter(5) <= fitting_parameter_5;
  fitting_parameter(6) <= fitting_parameter_6;
  fitting_parameter(7) <= fitting_parameter_7;
  fitting_parameter(8) <= fitting_parameter_8;
  fitting_parameter(9) <= fitting_parameter_9;
  fitting_parameter(10) <= fitting_parameter_10;
  fitting_parameter(11) <= fitting_parameter_11;
  fitting_parameter(12) <= fitting_parameter_12;
  fitting_parameter(13) <= fitting_parameter_13;
  fitting_parameter(14) <= fitting_parameter_14;
  fitting_parameter(15) <= fitting_parameter_15;
  fitting_parameter(16) <= fitting_parameter_16;
  fitting_parameter(17) <= fitting_parameter_17;
  fitting_parameter(18) <= fitting_parameter_18;
  fitting_parameter(19) <= fitting_parameter_19;
  fitting_parameter(20) <= fitting_parameter_20;
  fitting_parameter(21) <= fitting_parameter_21;
  fitting_parameter(22) <= fitting_parameter_22;

  fitting_parameter_23 <= fitting_parameter;

  ad3 <= fitting_parameter_23(2);

  fitting_parameter_1_1 <= fitting_parameter_23(1);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad2 <= X"00000000";
      ELSIF enb = '1' THEN
        ad2 <= fitting_parameter_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  fitting_parameter_0_1 <= fitting_parameter_23(0);

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad1 <= X"00000000";
      ELSIF enb = '1' THEN
        ad1 <= fitting_parameter_0_1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  ad6 <= fitting_parameter_23(5);

  fitting_parameter_4_1 <= fitting_parameter_23(4);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad5 <= X"00000000";
      ELSIF enb = '1' THEN
        ad5 <= fitting_parameter_4_1;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  fitting_parameter_3_1 <= fitting_parameter_23(3);

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad4 <= X"00000000";
      ELSIF enb = '1' THEN
        ad4 <= fitting_parameter_3_1;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  kconst_1 <= X"360637bd";

  inputs_1_1 <= inputs_4(1);

  delayMatch42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        u_q <= X"00000000";
      ELSIF enb = '1' THEN
        u_q <= inputs_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch42_process;


  From2_out1_13 <= fitting_parameter_23(13);

  delayMatch39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha1_Fid2_Giq2 <= X"00000000";
      ELSIF enb = '1' THEN
        alpha1_Fid2_Giq2 <= From2_out1_13;
      END IF;
    END IF;
  END PROCESS delayMatch39_process;


  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        simulate_nonlinear_3 <= '0';
      ELSIF enb = '1' THEN
        simulate_nonlinear_3 <= simulate_nonlinear_1;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  L_d_1 <= L_d;

  psi_pm_1 <= psi_pm;

  delayMatch29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_pm_2 <= X"00000000";
      ELSIF enb = '1' THEN
        psi_pm_2 <= psi_pm_1;
      END IF;
    END IF;
  END PROCESS delayMatch29_process;


  aq2 <= fitting_parameter_23(7);

  Constant2_out1 <= X"34000000";

  fitting_parameter_19_1 <= fitting_parameter_23(19);

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        aq1_aq2 <= X"00000000";
      ELSIF enb = '1' THEN
        aq1_aq2 <= fitting_parameter_19_1;
      END IF;
    END IF;
  END PROCESS delayMatch19_process;


  fitting_parameter_22_1 <= fitting_parameter_23(22);

  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        aq3_aq6 <= X"00000000";
      ELSIF enb = '1' THEN
        aq3_aq6 <= fitting_parameter_22_1;
      END IF;
    END IF;
  END PROCESS delayMatch20_process;


  aq5 <= fitting_parameter_23(10);

  fitting_parameter_18_1 <= fitting_parameter_23(18);

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        aq4_aq5 <= X"00000000";
      ELSIF enb = '1' THEN
        aq4_aq5 <= fitting_parameter_18_1;
      END IF;
    END IF;
  END PROCESS delayMatch21_process;


  fitting_parameter_12_1 <= fitting_parameter_23(12);

  delayMatch28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Reciprodical_F1G1 <= X"00000000";
      ELSIF enb = '1' THEN
        Reciprodical_F1G1 <= fitting_parameter_12_1;
      END IF;
    END IF;
  END PROCESS delayMatch28_process;


  simulate_mechanical_1 <= simulate_mechanical;

  omega_mech <= inputs_4(2);

  kconst_2 <= X"360637bd";

  reciprocal_J_1 <= reciprocal_J;

  delayMatch53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reciprocal_J_2 <= X"00000000";
      ELSIF enb = '1' THEN
        reciprocal_J_2 <= reciprocal_J_1;
      END IF;
    END IF;
  END PROCESS delayMatch53_process;


  kconst_3 <= X"3fc00000";

  simulate_nonlinear_4 <= simulate_nonlinear_3;

  L_q_1 <= L_q;

  fitting_parameter_21_1 <= fitting_parameter_23(21);

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad1_ad2 <= X"00000000";
      ELSIF enb = '1' THEN
        ad1_ad2 <= fitting_parameter_21_1;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  fitting_parameter_1_2 <= fitting_parameter_23(1);

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad2_1 <= X"00000000";
      ELSIF enb = '1' THEN
        ad2_1 <= fitting_parameter_1_2;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  ad3_1 <= fitting_parameter_23(2);

  Constant2_out1_1 <= X"34000000";

  fitting_parameter_20_1 <= fitting_parameter_23(20);

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad4_ad5 <= X"00000000";
      ELSIF enb = '1' THEN
        ad4_ad5 <= fitting_parameter_20_1;
      END IF;
    END IF;
  END PROCESS delayMatch12_process;


  fitting_parameter_4_2 <= fitting_parameter_23(4);

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad5_1 <= X"00000000";
      ELSIF enb = '1' THEN
        ad5_1 <= fitting_parameter_4_2;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  ad6_1 <= fitting_parameter_23(5);

  fitting_parameter_13_1 <= fitting_parameter_23(13);

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha1_Fid2_Giq2_1 <= X"00000000";
      ELSIF enb = '1' THEN
        alpha1_Fid2_Giq2_1 <= fitting_parameter_13_1;
      END IF;
    END IF;
  END PROCESS delayMatch13_process;


  polepairs_1 <= polepairs;

  delayMatch33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        polepairs_2 <= X"00000000";
      ELSIF enb = '1' THEN
        polepairs_2 <= polepairs_1;
      END IF;
    END IF;
  END PROCESS delayMatch33_process;


  M_n0_1 <= M_n0;

  delayMatch37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        M_n0_2 <= X"00000000";
      ELSIF enb = '1' THEN
        M_n0_2 <= M_n0_1;
      END IF;
    END IF;
  END PROCESS delayMatch37_process;


  load_torque <= inputs_4(3);

  Delay1_iv <= X"00000000";

  Switch8_out1_timer <= '1';

  delayMatch50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch50_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch50_reg(0) <= Switch8_out1_timer;
        delayMatch50_reg(96 DOWNTO 1) <= delayMatch50_reg(95 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch50_process;

  Switch8_out1_timer_1 <= delayMatch50_reg(96);

  Switch8_out1_default <= X"3f800000";

  delayMatch49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        L_q_2 <= X"00000000";
      ELSIF enb = '1' THEN
        L_q_2 <= L_q_1;
      END IF;
    END IF;
  END PROCESS delayMatch49_process;


  aq2_1 <= fitting_parameter_23(7);

  Constant2_out1_2 <= X"34000000";

  From1_out1_17 <= fitting_parameter_23(17);

  delayMatch43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        aq1_aq2_1 <= X"00000000";
      ELSIF enb = '1' THEN
        aq1_aq2_1 <= From1_out1_17;
      END IF;
    END IF;
  END PROCESS delayMatch43_process;


  From1_out1_8 <= fitting_parameter_23(8);

  delayMatch44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        aq3 <= X"00000000";
      ELSIF enb = '1' THEN
        aq3 <= From1_out1_8;
      END IF;
    END IF;
  END PROCESS delayMatch44_process;


  aq5_1 <= fitting_parameter_23(10);

  From1_out1_16 <= fitting_parameter_23(16);

  delayMatch45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        aq4_aq5_1 <= X"00000000";
      ELSIF enb = '1' THEN
        aq4_aq5_1 <= From1_out1_16;
      END IF;
    END IF;
  END PROCESS delayMatch45_process;


  From1_out1_11 <= fitting_parameter_23(11);

  delayMatch46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        aq6 <= X"00000000";
      ELSIF enb = '1' THEN
        aq6 <= From1_out1_11;
      END IF;
    END IF;
  END PROCESS delayMatch46_process;


  From1_out1_13 <= fitting_parameter_23(13);

  delayMatch47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha1_Fid2_Giq2_2 <= X"00000000";
      ELSIF enb = '1' THEN
        alpha1_Fid2_Giq2_2 <= From1_out1_13;
      END IF;
    END IF;
  END PROCESS delayMatch47_process;


  Constant1_out1 <= X"34000000";

  Delay1_iv_1 <= X"00000000";

  aq3_1 <= fitting_parameter_23(8);

  aq2_2 <= fitting_parameter_23(7);

  fitting_parameter_6_1 <= fitting_parameter_23(6);

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        aq1 <= X"00000000";
      ELSIF enb = '1' THEN
        aq1 <= fitting_parameter_6_1;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  aq5_2 <= fitting_parameter_23(10);

  fitting_parameter_9_1 <= fitting_parameter_23(9);

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        aq4 <= X"00000000";
      ELSIF enb = '1' THEN
        aq4 <= fitting_parameter_9_1;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  aq6_1 <= fitting_parameter_23(11);

  From2_out1_12 <= fitting_parameter_23(12);

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha1_Fid1_Giq1 <= X"00000000";
      ELSIF enb = '1' THEN
        alpha1_Fid1_Giq1 <= From2_out1_12;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  delayMatch24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        L_d_2 <= X"00000000";
      ELSIF enb = '1' THEN
        L_d_2 <= L_d_1;
      END IF;
    END IF;
  END PROCESS delayMatch24_process;


  ad3_2 <= fitting_parameter_23(2);

  From4_out1_1 <= fitting_parameter_23(1);

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad2_2 <= X"00000000";
      ELSIF enb = '1' THEN
        ad2_2 <= From4_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch15_process;


  Constant2_out1_3 <= X"34000000";

  From4_out1_15 <= fitting_parameter_23(15);

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad1_ad2_1 <= X"00000000";
      ELSIF enb = '1' THEN
        ad1_ad2_1 <= From4_out1_15;
      END IF;
    END IF;
  END PROCESS delayMatch16_process;


  ad6_2 <= fitting_parameter_23(5);

  From4_out1_4 <= fitting_parameter_23(4);

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad5_2 <= X"00000000";
      ELSIF enb = '1' THEN
        ad5_2 <= From4_out1_4;
      END IF;
    END IF;
  END PROCESS delayMatch17_process;


  From4_out1_14 <= fitting_parameter_23(14);

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ad4_ad5_1 <= X"00000000";
      ELSIF enb = '1' THEN
        ad4_ad5_1 <= From4_out1_14;
      END IF;
    END IF;
  END PROCESS delayMatch18_process;


  From4_out1_12 <= fitting_parameter_23(12);

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        F1G1 <= X"00000000";
      ELSIF enb = '1' THEN
        F1G1 <= From4_out1_12;
      END IF;
    END IF;
  END PROCESS delayMatch22_process;


  Constant2_out1_4 <= X"34000000";

  Delay1_iv_2 <= X"00000000";

  psiq_cross_s1_integrated_1 <= psiq_cross_s1_integrated;

  
  Switch1_out1 <= Constant2_out1_3 WHEN Switch1_control_abs = X"00000000" ELSE
      Product15_out1;

  
  Switch_out1 <= Constant2_out1_3 WHEN Switch_control_abs = X"00000000" ELSE
      Product14_out1;

  psidself_abgeleitet_1 <= psidself_abgeleitet;

  Ldd <= psid_cross_s1;

  
  Switch2_out1 <= L_d_2 WHEN simulate_nonlinear_2 = '0' ELSE
      Ldd;

  
  Switch_out1_1 <= Constant2_out1_4 WHEN Switch_control_abs_1 = X"00000000" ELSE
      Switch2_out1;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        diq_dt_1 <= X"00000000";
      ELSIF enb = '1' THEN
        diq_dt_1 <= diq_dt;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Unit_Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay1_bypass_reg <= X"00000000";
      ELSIF enb_1_200_1 = '1' THEN
        Unit_Delay1_bypass_reg <= diq_dt_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_bypass_process;

  
  Unit_Delay1_out1 <= diq_dt_1 WHEN enb_1_200_1 = '1' ELSE
      Unit_Delay1_bypass_reg;

  Unit_Delay1_out1_1 <= Unit_Delay1_out1;

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay1_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Unit_Delay1_out1_2 <= Unit_Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  delayMatch51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch51_process;


  psid_cross_s1_integrated_1 <= psid_cross_s1_integrated;

  
  Switch1_out1_1 <= Constant2_out1_2 WHEN Switch1_control_abs_1 = X"00000000" ELSE
      Product15_out1_1;

  
  Switch_out1_2 <= Constant2_out1_2 WHEN Switch_control_abs_2 = X"00000000" ELSE
      Product14_out1_1;

  Lqq_modell <= Lqq;

  
  Switch1_out1_2 <= L_q_2 WHEN simulate_nonlinear_2 = '0' ELSE
      Lqq_modell;

  
  Switch8_out1 <= Constant1_out1 WHEN Switch8_control_abs = X"00000000" ELSE
      Switch1_out1_2;

  
  Switch8_out1_zp <= Switch8_out1_default WHEN Switch8_out1_timer_1 = '0' ELSE
      Switch8_out1;

  delayMatch54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_4 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1_4 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS delayMatch54_process;


  delayMatch38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Sign1_out1_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Sign1_out1_1 <= Sign1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch38_process;


  
  Switch1_out1_3 <= Constant2_out1_1 WHEN Switch1_control_abs_2 = X"00000000" ELSE
      Tanh2_out1;

  
  Switch_out1_3 <= Constant2_out1_1 WHEN Switch_control_abs_3 = X"00000000" ELSE
      Tanh4_out1_1;

  psiq_cross_s1_1 <= psiq_cross_s1;

  psiq_self_1 <= psiq_self;

  psi_q <= psiq_approx;

  
  Switch6_out1 <= Product1_out1_1 WHEN simulate_nonlinear_4 = '0' ELSE
      psi_q;

  i_d <= Delay1_out1_5;

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_q <= X"00000000";
      ELSIF enb = '1' THEN
        i_q <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  i_q_1 <= i_q;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Sum_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Sum_out1_2 <= Sum_out1_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_bypass_reg <= X"00000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay_bypass_reg <= Sum_out1_2;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1 <= Sum_out1_2 WHEN enb_1_200_1 = '1' ELSE
      Delay_bypass_reg;

  
  Delay1_toDel <= Sum3_out1_1 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv;

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_1 <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay1_lowered1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered1_bypass_reg <= X"00000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered1_bypass_reg <= Delay1_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay1_lowered1_bypass_process;

  
  Delay1_delOut <= Delay1_toDel_1 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered1_bypass_reg;

  Delay1_delOut_1 <= Delay1_delOut;

  
  Delay1_out1_3 <= Delay1_delOut_1 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv;

  
  Switch_out1_4 <= omega_mech WHEN simulate_mechanical_1 = '0' ELSE
      Delay1_out1_3;

  
  Switch1_out1_4 <= Constant2_out1 WHEN Switch1_control_abs_3 = X"00000000" ELSE
      error_id;

  
  Switch_out1_5 <= Constant2_out1 WHEN Switch_control_abs_4 = X"00000000" ELSE
      Tanh2_out1_1;

  psid_cross_s1_4 <= psid_cross_s1_3;

  psidself_1 <= psidself;

  psi_d <= psi_d_approx;

  
  Switch5_out1 <= Sum_out1_3 WHEN simulate_nonlinear_3 = '0' ELSE
      psi_d;

  psiq_cross_s1_2 <= psiq_cross_s1;

  psid_cross_s1_5 <= psid_cross_s1_3;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        did_dt_1 <= X"00000000";
      ELSIF enb = '1' THEN
        did_dt_1 <= did_dt;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Unit_Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_bypass_reg <= X"00000000";
      ELSIF enb_1_200_1 = '1' THEN
        Unit_Delay_bypass_reg <= did_dt_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_bypass_process;

  
  Unit_Delay_out1 <= did_dt_1 WHEN enb_1_200_1 = '1' ELSE
      Unit_Delay_bypass_reg;

  Unit_Delay_out1_1 <= Unit_Delay_out1;

  delayMatch40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1_2 <= X"00000000";
      ELSIF enb = '1' THEN
        Unit_Delay_out1_2 <= Unit_Delay_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch40_process;


  
  Switch4_out1 <= Constant_out1 WHEN simulate_nonlinear_2 = '0' ELSE
      Product11_out1_1;

  
  Delay1_toDel_2 <= Sum5_out1_1 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_1;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_3 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_3 <= Delay1_toDel_2;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay1_lowered2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered2_bypass_reg <= X"00000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered2_bypass_reg <= Delay1_toDel_3;
      END IF;
    END IF;
  END PROCESS Delay1_lowered2_bypass_process;

  
  Delay1_delOut_2 <= Delay1_toDel_3 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered2_bypass_reg;

  Delay1_delOut_3 <= Delay1_delOut_2;

  
  Delay1_out1_1 <= Delay1_delOut_3 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv_1;

  
  Switch3_out1 <= Constant_out1 WHEN simulate_nonlinear_2 = '0' ELSE
      Product12_out1_2;

  
  Delay1_toDel_4 <= Sum5_out1_2 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_2;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_5 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_5 <= Delay1_toDel_4;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"00000000";
      ELSIF enb_1_200_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel_5;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_delOut_4 <= Delay1_toDel_5 WHEN enb_1_200_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut_5 <= Delay1_delOut_4;

  
  Delay1_out1 <= Delay1_delOut_5 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv_2;

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_5 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1_5 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS reduced_4_process;


  M_Mi_2 <= M_Mi_1;

  
  omega_mech_1 <= omega_mech WHEN simulate_mechanical_1 = '0' ELSE
      Delay1_out1_3;

  delayMatch36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        omega_mech_2 <= X"00000000";
      ELSIF enb = '1' THEN
        omega_mech_2 <= omega_mech_1;
      END IF;
    END IF;
  END PROCESS delayMatch36_process;


  Mux_out1(0) <= Delay1_out1_5;
  Mux_out1(1) <= i_q;
  Mux_out1(2) <= M_Mi_2;
  Mux_out1(3) <= omega_mech_2;

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t_bypass_reg <= (OTHERS => X"00000000");
      ELSIF enb_1_200_1 = '1' THEN
        t_bypass_reg <= Mux_out1;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Mux_out1_1 <= Mux_out1 WHEN enb_1_200_1 = '1' ELSE
      t_bypass_reg;

  outputs_0 <= Mux_out1_1(0);

  outputs_1 <= Mux_out1_1(1);

  outputs_2 <= Mux_out1_1(2);

  outputs_3 <= Mux_out1_1(3);

  ce_out <= enb_1_200_1;

END rtl;

