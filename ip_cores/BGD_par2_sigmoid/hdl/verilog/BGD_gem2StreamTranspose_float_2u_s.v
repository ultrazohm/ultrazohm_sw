// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_gem2StreamTranspose_float_2u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_k_dout,
        p_k_empty_n,
        p_k_read,
        p_in_address0,
        p_in_ce0,
        p_in_q0,
        p_in_address1,
        p_in_ce1,
        p_in_q1,
        p_in_offset_dout,
        p_in_offset_empty_n,
        p_in_offset_read,
        p_n_out_din,
        p_n_out_full_n,
        p_n_out_write,
        p_k_out_din,
        p_k_out_full_n,
        p_k_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [63:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
input  [31:0] p_k_dout;
input   p_k_empty_n;
output   p_k_read;
output  [15:0] p_in_address0;
output   p_in_ce0;
input  [31:0] p_in_q0;
output  [15:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;
input  [15:0] p_in_offset_dout;
input   p_in_offset_empty_n;
output   p_in_offset_read;
output  [31:0] p_n_out_din;
input   p_n_out_full_n;
output   p_n_out_write;
output  [31:0] p_k_out_din;
input   p_k_out_full_n;
output   p_k_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_out_write;
reg p_n_read;
reg p_k_read;
reg p_in_ce0;
reg p_in_ce1;
reg p_in_offset_read;
reg p_n_out_write;
reg p_k_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_out_blk_n;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln172_reg_358;
reg   [0:0] icmp_ln172_reg_358_pp0_iter3_reg;
reg    p_n_blk_n;
reg    p_k_blk_n;
reg    p_in_offset_blk_n;
reg    p_n_out_blk_n;
reg    p_k_out_blk_n;
reg   [62:0] indvar_flatten_reg_140;
reg   [30:0] k_reg_151;
reg   [31:0] i_reg_162;
reg   [15:0] p_in_offset_read_reg_332;
reg    ap_block_state1;
wire  signed [14:0] empty_fu_173_p1;
reg  signed [14:0] empty_reg_338;
wire   [30:0] trunc_ln_fu_177_p4;
reg   [30:0] trunc_ln_reg_343;
wire  signed [15:0] trunc_ln180_fu_187_p1;
reg  signed [15:0] trunc_ln180_reg_348;
wire   [62:0] bound_fu_199_p2;
reg   [62:0] bound_reg_353;
wire   [0:0] icmp_ln172_fu_205_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln172_reg_358_pp0_iter1_reg;
reg   [0:0] icmp_ln172_reg_358_pp0_iter2_reg;
wire   [62:0] add_ln172_fu_210_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln174_fu_216_p2;
reg   [0:0] icmp_ln174_reg_367;
reg   [0:0] icmp_ln174_reg_367_pp0_iter1_reg;
wire  signed [14:0] trunc_ln174_fu_229_p1;
wire   [30:0] k_1_fu_247_p2;
wire   [31:0] select_ln172_1_fu_259_p3;
reg   [31:0] select_ln172_1_reg_387;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] trunc_ln172_fu_266_p1;
reg   [15:0] trunc_ln172_reg_392;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [31:0] ap_phi_mux_i_phi_fu_166_p4;
wire   [63:0] zext_ln180_fu_287_p1;
wire   [63:0] zext_ln180_1_fu_296_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_199_p0;
wire   [30:0] bound_fu_199_p1;
wire   [30:0] select_ln172_fu_221_p3;
wire   [15:0] mul_i_fu_233_p3;
wire   [31:0] add_ln172_1_fu_253_p2;
wire  signed [14:0] grp_fu_318_p2;
wire   [15:0] shl_ln_fu_270_p3;
wire   [15:0] add_ln180_fu_277_p2;
wire   [15:0] add_ln180_1_fu_282_p2;
wire  signed [15:0] grp_fu_324_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln180_3_fu_292_p2;
wire   [31:0] l_v_9_fu_305_p1;
wire   [31:0] l_v_fu_301_p1;
wire  signed [15:0] grp_fu_324_p1;
wire   [15:0] grp_fu_324_p2;
reg    grp_fu_318_ce;
reg    grp_fu_324_ce;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [62:0] bound_fu_199_p00;
wire   [62:0] bound_fu_199_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

BGD_mul_32ns_31ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 63 ))
mul_32ns_31ns_63_1_1_U138(
    .din0(bound_fu_199_p0),
    .din1(bound_fu_199_p1),
    .dout(bound_fu_199_p2)
);

BGD_mul_mul_15s_15s_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
mul_mul_15s_15s_15_4_1_U139(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_338),
    .din1(trunc_ln174_fu_229_p1),
    .ce(grp_fu_318_ce),
    .dout(grp_fu_318_p2)
);

BGD_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U140(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln180_reg_348),
    .din1(grp_fu_324_p1),
    .din2(grp_fu_324_p2),
    .ce(grp_fu_324_ce),
    .dout(grp_fu_324_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter2_state4)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln172_reg_358_pp0_iter2_reg == 1'd0))) begin
        i_reg_162 <= select_ln172_1_reg_387;
    end else if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_162 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln172_fu_205_p2 == 1'd0))) begin
        indvar_flatten_reg_140 <= add_ln172_fu_210_p2;
    end else if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_140 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln172_fu_205_p2 == 1'd0))) begin
        k_reg_151 <= k_1_fu_247_p2;
    end else if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_151 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_353 <= bound_fu_199_p2;
        empty_reg_338 <= empty_fu_173_p1;
        p_in_offset_read_reg_332 <= p_in_offset_dout;
        trunc_ln180_reg_348 <= trunc_ln180_fu_187_p1;
        trunc_ln_reg_343 <= {{p_n_dout[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln172_reg_358 <= icmp_ln172_fu_205_p2;
        icmp_ln172_reg_358_pp0_iter1_reg <= icmp_ln172_reg_358;
        icmp_ln174_reg_367_pp0_iter1_reg <= icmp_ln174_reg_367;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln172_reg_358_pp0_iter2_reg <= icmp_ln172_reg_358_pp0_iter1_reg;
        icmp_ln172_reg_358_pp0_iter3_reg <= icmp_ln172_reg_358_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln172_fu_205_p2 == 1'd0))) begin
        icmp_ln174_reg_367 <= icmp_ln174_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln172_reg_358_pp0_iter1_reg == 1'd0))) begin
        select_ln172_1_reg_387 <= select_ln172_1_fu_259_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln172_reg_358_pp0_iter1_reg == 1'd0))) begin
        trunc_ln172_reg_392 <= trunc_ln172_fu_266_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln172_fu_205_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln172_reg_358_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_i_phi_fu_166_p4 = select_ln172_1_reg_387;
    end else begin
        ap_phi_mux_i_phi_fu_166_p4 = i_reg_162;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_318_ce = 1'b1;
    end else begin
        grp_fu_318_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_324_ce = 1'b1;
    end else begin
        grp_fu_324_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_in_ce0 = 1'b1;
    end else begin
        p_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_blk_n = p_in_offset_empty_n;
    end else begin
        p_in_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read = 1'b1;
    end else begin
        p_in_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_blk_n = p_k_empty_n;
    end else begin
        p_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_blk_n = p_k_out_full_n;
    end else begin
        p_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_write = 1'b1;
    end else begin
        p_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_read = 1'b1;
    end else begin
        p_k_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_blk_n = p_n_out_full_n;
    end else begin
        p_n_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_write = 1'b1;
    end else begin
        p_n_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_358_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_358_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln172_1_fu_253_p2 = (32'd1 + ap_phi_mux_i_phi_fu_166_p4);

assign add_ln172_fu_210_p2 = (indvar_flatten_reg_140 + 63'd1);

assign add_ln180_1_fu_282_p2 = (add_ln180_fu_277_p2 + p_in_offset_read_reg_332);

assign add_ln180_3_fu_292_p2 = ($signed(grp_fu_324_p3) + $signed(p_in_offset_read_reg_332));

assign add_ln180_fu_277_p2 = (shl_ln_fu_270_p3 + trunc_ln172_reg_392);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln172_reg_358_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln172_reg_358_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln172_reg_358_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln172_reg_358_pp0_iter3_reg == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_199_p0 = bound_fu_199_p00;

assign bound_fu_199_p00 = p_k_dout;

assign bound_fu_199_p1 = bound_fu_199_p10;

assign bound_fu_199_p10 = trunc_ln_fu_177_p4;

assign empty_fu_173_p1 = p_k_dout[14:0];

assign grp_fu_324_p1 = (mul_i_fu_233_p3 | 16'd1);

assign grp_fu_324_p2 = select_ln172_1_fu_259_p3[15:0];

assign icmp_ln172_fu_205_p2 = ((indvar_flatten_reg_140 == bound_reg_353) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_216_p2 = ((k_reg_151 == trunc_ln_reg_343) ? 1'b1 : 1'b0);

assign k_1_fu_247_p2 = (31'd1 + select_ln172_fu_221_p3);

assign l_v_9_fu_305_p1 = p_in_q0;

assign l_v_fu_301_p1 = p_in_q1;

assign mul_i_fu_233_p3 = {{trunc_ln174_fu_229_p1}, {1'd0}};

assign p_in_address0 = zext_ln180_1_fu_296_p1;

assign p_in_address1 = zext_ln180_fu_287_p1;

assign p_k_out_din = p_k_dout;

assign p_n_out_din = p_n_dout;

assign p_out_din = {{l_v_9_fu_305_p1}, {l_v_fu_301_p1}};

assign select_ln172_1_fu_259_p3 = ((icmp_ln174_reg_367_pp0_iter1_reg[0:0] === 1'b1) ? add_ln172_1_fu_253_p2 : ap_phi_mux_i_phi_fu_166_p4);

assign select_ln172_fu_221_p3 = ((icmp_ln174_fu_216_p2[0:0] === 1'b1) ? 31'd0 : k_reg_151);

assign shl_ln_fu_270_p3 = {{grp_fu_318_p2}, {1'd0}};

assign start_out = real_start;

assign trunc_ln172_fu_266_p1 = select_ln172_1_fu_259_p3[15:0];

assign trunc_ln174_fu_229_p1 = select_ln172_fu_221_p3[14:0];

assign trunc_ln180_fu_187_p1 = p_k_dout[15:0];

assign trunc_ln_fu_177_p4 = {{p_n_dout[31:1]}};

assign zext_ln180_1_fu_296_p1 = add_ln180_3_fu_292_p2;

assign zext_ln180_fu_287_p1 = add_ln180_1_fu_282_p2;

endmodule //BGD_gem2StreamTranspose_float_2u_s
