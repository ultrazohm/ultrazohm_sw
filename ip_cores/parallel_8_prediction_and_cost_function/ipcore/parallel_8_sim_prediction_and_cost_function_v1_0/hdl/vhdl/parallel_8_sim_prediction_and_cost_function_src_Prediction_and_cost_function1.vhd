-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_prediction_and_cost_function\hdlsrc\parallel_8_prediction_and_cost_function\parallel_8_sim_prediction_and_cost_function_src_Prediction_and_cost_function1.vhd
-- Created: 2022-12-08 12:10:28
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- done_Prediction_and_cost_functionce_out        1e-08
-- Index                         ce_out        1e-08
-- J_0                           ce_out        1e-08
-- J_1                           ce_out        1e-08
-- J_2                           ce_out        1e-08
-- J_3                           ce_out        1e-08
-- J_4                           ce_out        1e-08
-- J_5                           ce_out        1e-08
-- J_6                           ce_out        1e-08
-- J_7                           ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_sim_prediction_and_cost_function_src_Prediction_and_cost_function1
-- Source Path: parallel_8_prediction_and_cost_function/Prediction_and_cost_function1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_8_sim_prediction_and_cost_function_src_Prediction_and_cost_function1_pkg.ALL;

ENTITY parallel_8_sim_prediction_and_cost_function_src_Prediction_and_cost_function1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Lq_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ld_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Rs_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_m_measured                  :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        pole_pairs_AXI                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psiPM_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iq_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ix_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iy_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        done_phase_voltages               :   IN    std_logic;
        done_vsd_and_park                 :   IN    std_logic;
        current_valid_in                  :   IN    std_logic;
        dqxy_phase_voltage_per_switching_state_0 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_1 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_2 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_3 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_4 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_5 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_6 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_7 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_8 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_9 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_10 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_11 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_12 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_13 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_14 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_15 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_16 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_17 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_18 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_19 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_20 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_21 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_22 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_23 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_24 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_25 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_26 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_27 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_28 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_29 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_30 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_31 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        ce_out                            :   OUT   std_logic;
        done_Prediction_and_cost_function :   OUT   std_logic;
        Index                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        J_0                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En9
        J_1                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En9
        J_2                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En9
        J_3                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En9
        J_4                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En9
        J_5                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En9
        J_6                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En9
        J_7                               :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En9
        );
END parallel_8_sim_prediction_and_cost_function_src_Prediction_and_cost_function1;


ARCHITECTURE rtl OF parallel_8_sim_prediction_and_cost_function_src_Prediction_and_cost_function1 IS

  -- Component Declarations
  COMPONENT parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_prediction_and_cost_function_src_Compare_To_Constant
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_prediction_and_cost_function_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_prediction_and_cost_function_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          d_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Ld15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lq15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lx15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Ly15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Rs15                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          omega_el15                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Lq15                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Ld15                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          psiPM15                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_ref15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_ref15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_ref15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_ref15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          J                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J1                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J2                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J3                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J4                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J5                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J6                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J7                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En9
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive
    USE ENTITY work.parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive1
    USE ENTITY work.parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive1(rtl);

  FOR ALL : parallel_8_sim_prediction_and_cost_function_src_Compare_To_Constant
    USE ENTITY work.parallel_8_sim_prediction_and_cost_function_src_Compare_To_Constant(rtl);

  FOR ALL : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    USE ENTITY work.parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single(rtl);

  FOR ALL : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_18_En11_to_single
    USE ENTITY work.parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_18_En11_to_single(rtl);

  FOR ALL : parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive2
    USE ENTITY work.parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive2(rtl);

  FOR ALL : parallel_8_sim_prediction_and_cost_function_src_nfp_mul_single
    USE ENTITY work.parallel_8_sim_prediction_and_cost_function_src_nfp_mul_single(rtl);

  FOR ALL : parallel_8_sim_prediction_and_cost_function_src_Subsystem
    USE ENTITY work.parallel_8_sim_prediction_and_cost_function_src_Subsystem(rtl);

  FOR ALL : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    USE ENTITY work.parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay21_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay21_reg_next                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay21_out1                     : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL Delay22_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay22_reg_next                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay22_out1                     : std_logic;
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL count_step                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_reset                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL HDL_Counter_out1                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL count                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_2                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay59_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay59_reg_next                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay59_out1                     : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 65);  -- ufix1 [66]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 65);  -- ufix1 [66]
  SIGNAL Delay59_out1_1                   : std_logic;
  SIGNAL Delay60_reg                      : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay60_reg_next                 : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay60_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch1_reg                  : vector_of_signed32(0 TO 65);  -- sfix32 [66]
  SIGNAL delayMatch1_reg_next             : vector_of_signed32(0 TO 65);  -- sfix32 [66]
  SIGNAL Delay60_out1_1                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_0_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_2_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_3_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_4_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_5_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_6_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_7_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_8_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_9_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_10_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_11_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_12_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_13_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_14_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_15_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_16_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_17_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_18_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_19_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_20_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_21_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_22_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_23_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_24_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_25_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_26_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_27_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_28_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_29_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_30_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL dqxy_phase_voltage_per_switching_state_31_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_1_reg                    : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_out_2                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_3                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_4                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_5                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_6                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_7                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_8                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_9                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_10                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_11                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_12                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_13                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_14                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_15                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_16                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_17                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_18                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_19                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_20                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_21                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_22                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_23                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_24                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_25                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_26                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_27                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_28                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_29                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_30                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_31                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out_32                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_1_reg_1                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_2                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_3                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_4                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_5                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_6                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_7                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_8                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_9                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_10                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_11                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_12                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_13                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_14                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_15                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_16                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_17                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_18                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_19                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_20                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_21                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_22                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_23                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_24                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_25                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_26                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_27                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_28                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_29                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_30                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_31                 : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay51_1_reg_next               : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_1             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_2             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_3             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_4             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_5             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_6             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_7             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_8             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_9             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_10            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_11            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_12            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_13            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_14            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_15            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_16            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_17            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_18            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_19            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_20            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_21            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_22            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_23            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_24            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_25            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_26            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_27            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_28            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_29            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_30            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay51_1_reg_next_31            : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Switch_on90_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay135_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion77_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Switch_on89_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay134_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion76_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Switch_on88_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay133_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion75_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Switch_on87_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay132_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion74_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Switch_on86_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay131_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion73_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Switch_on85_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay130_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion72_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL Switch_on84_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay129_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion71_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL Switch_on83_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay128_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion70_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL Switch_on82_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay127_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion69_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL Switch_on81_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay126_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion68_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL Switch_on80_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay125_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion67_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL Switch_on79_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay124_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion66_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL Switch_on78_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay123_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion65_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL Switch_on77_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay122_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion64_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL Switch_on76_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay121_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion63_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL Switch_on75_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay120_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion62_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL Switch_on74_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay119_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion61_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL Switch_on73_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay118_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion60_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL Switch_on72_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay117_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion59_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL Switch_on71_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay116_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion58_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL Switch_on70_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay115_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion57_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL Switch_on69_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay114_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion56_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL Switch_on68_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay113_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion55_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL Switch_on67_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay112_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion53_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_24              : std_logic;
  SIGNAL Switch_on66_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay111_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion45_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_25              : std_logic;
  SIGNAL Switch_on65_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay110_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion44_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_26              : std_logic;
  SIGNAL Switch_on64_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay109_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion43_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_27              : std_logic;
  SIGNAL Switch_on63_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay108_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion42_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_28              : std_logic;
  SIGNAL Switch_on62_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay107_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_29              : std_logic;
  SIGNAL Switch_on61_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay106_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_30              : std_logic;
  SIGNAL Switch_on60_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay105_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_31              : std_logic;
  SIGNAL Switch_on59_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay104_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_32              : std_logic;
  SIGNAL Delay45_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay45_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay45_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on21_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay20_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_33              : std_logic;
  SIGNAL Delay44_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay44_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay44_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on20_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay19_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_34              : std_logic;
  SIGNAL Delay43_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay43_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay43_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on19_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay18_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_35              : std_logic;
  SIGNAL Delay42_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay42_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay42_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on18_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay17_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_36              : std_logic;
  SIGNAL id_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay37_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay37_reg_next                 : vector_of_signed18(0 TO 1);  -- sfix18_En11 [2]
  SIGNAL Delay37_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on17_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay16_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion41_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_37              : std_logic;
  SIGNAL iq_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay36_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay36_reg_next                 : vector_of_signed18(0 TO 1);  -- sfix18_En11 [2]
  SIGNAL Delay36_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on16_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay15_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion40_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_38              : std_logic;
  SIGNAL ix_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay35_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay35_reg_next                 : vector_of_signed18(0 TO 1);  -- sfix18_En11 [2]
  SIGNAL Delay35_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on15_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay14_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion39_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_39              : std_logic;
  SIGNAL iy_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay34_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay34_reg_next                 : vector_of_signed18(0 TO 1);  -- sfix18_En11 [2]
  SIGNAL Delay34_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on13_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay13_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion18_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_40              : std_logic;
  SIGNAL Delay32_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay32_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay32_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on12_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_reg_next                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL switch_compare_1_41              : std_logic;
  SIGNAL omega_m_measured_signed          : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay31_reg                      : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay31_reg_next                 : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay31_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on11_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay11_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_42              : std_logic;
  SIGNAL Delay30_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay30_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay30_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_43              : std_logic;
  SIGNAL Delay29_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay29_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay29_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on10_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_44              : std_logic;
  SIGNAL Delay28_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay28_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay28_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on9_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_45              : std_logic;
  SIGNAL Delay27_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay27_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay27_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on8_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay8_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_46              : std_logic;
  SIGNAL Delay26_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay26_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay26_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_47              : std_logic;
  SIGNAL Delay25_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay25_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay25_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_48              : std_logic;
  SIGNAL Delay24_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay24_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay24_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_49              : std_logic;
  SIGNAL Delay23_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay23_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay23_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on14_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay33_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc                               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc_3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc_4                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc_5                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc_6                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc_7                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc_8                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL fc_9                             : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL fc_10                            : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL fc_11                            : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL fc_12                            : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL fc_13                            : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL fc_14                            : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL fc_15                            : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL fc_16                            : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL Delay57_out_1                    : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL Delay57_1_reg                    : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay57_out_2                    : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL Delay57_out_3                    : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL Delay57_out_4                    : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL Delay57_out_5                    : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL Delay57_out_6                    : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL Delay57_out_7                    : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL Delay57_out_8                    : signed(19 DOWNTO 0);  -- sfix20_En9
  SIGNAL Delay57_1_reg_1                  : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay57_1_reg_2                  : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay57_1_reg_3                  : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay57_1_reg_4                  : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay57_1_reg_5                  : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay57_1_reg_6                  : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay57_1_reg_7                  : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Delay57_1_reg_next               : vector_of_signed20(0 TO 1);  -- sfix20_En9 [2]
  SIGNAL Delay57_1_reg_next_1             : vector_of_signed20(0 TO 1);  -- sfix20_En9 [2]
  SIGNAL Delay57_1_reg_next_2             : vector_of_signed20(0 TO 1);  -- sfix20_En9 [2]
  SIGNAL Delay57_1_reg_next_3             : vector_of_signed20(0 TO 1);  -- sfix20_En9 [2]
  SIGNAL Delay57_1_reg_next_4             : vector_of_signed20(0 TO 1);  -- sfix20_En9 [2]
  SIGNAL Delay57_1_reg_next_5             : vector_of_signed20(0 TO 1);  -- sfix20_En9 [2]
  SIGNAL Delay57_1_reg_next_6             : vector_of_signed20(0 TO 1);  -- sfix20_En9 [2]
  SIGNAL Delay57_1_reg_next_7             : vector_of_signed20(0 TO 1);  -- sfix20_En9 [2]
  SIGNAL fc_17                            : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL fc_18                            : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL fc_19                            : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL fc_20                            : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL fc_21                            : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL fc_22                            : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL fc_23                            : std_logic_vector(19 DOWNTO 0);  -- ufix20

BEGIN
  u_Detect_Rise_Positive : parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay21_out1,
              Y => End_Cycle
              );

  u_Detect_Rise_Positive1 : parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay22_out1,
              Y => End_Cycle_1
              );

  u_Compare_To_Constant : parallel_8_sim_prediction_and_cost_function_src_Compare_To_Constant
    PORT MAP( u => std_logic_vector(HDL_Counter_out1),  -- int32
              y => Compare_To_Constant_out1
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on90_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion77_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_1 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on89_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion76_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_2 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on88_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion75_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_3 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on87_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion74_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_4 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on86_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion73_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_5 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on85_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion72_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_6 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on84_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion71_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_7 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on83_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion70_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_8 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on82_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion69_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_9 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on81_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion68_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_10 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on80_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion67_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_11 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on79_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion66_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_12 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on78_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion65_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_13 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on77_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion64_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_14 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on76_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion63_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_15 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on75_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion62_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_16 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on74_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion61_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_17 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on73_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion60_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_18 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on72_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion59_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_19 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on71_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion58_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_20 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on70_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion57_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_21 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on69_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion56_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_22 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on68_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion55_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_23 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on67_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion53_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_24 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on66_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion45_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_25 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on65_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion44_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_26 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on64_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion43_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_27 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on63_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion42_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_28 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on62_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion10_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_29 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on61_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion9_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_30 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on60_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion8_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_31 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on59_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion7_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_18_En11_to_single : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on17_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion41_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_18_En11_to_single_1 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on16_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion40_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_18_En11_to_single_2 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on15_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion39_out1  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_18_En11_to_single_3 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on13_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion18_out1  -- single
              );

  u_Detect_Rise_Positive2 : parallel_8_sim_prediction_and_cost_function_src_Detect_Rise_Positive2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay_out1,
              Y => End_Cycle_2
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_sfix_24_En11_to_single_32 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on11_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion4_out1  -- single
              );

  u_nfp_mul_comp : parallel_8_sim_prediction_and_cost_function_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion4_out1,  -- single
              nfp_in2 => Switch_on4_out1,  -- single
              nfp_out => omega_el  -- single
              );

  u_Subsystem : parallel_8_sim_prediction_and_cost_function_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              d_phase_voltage_per_switching_state => Data_Type_Conversion77_out1,  -- single
              q_phase_voltage_per_switching_state => Data_Type_Conversion76_out1,  -- single
              x_phase_voltage_per_switching_state => Data_Type_Conversion75_out1,  -- single
              y_phase_voltage_per_switching_state => Data_Type_Conversion74_out1,  -- single
              d_phase_voltage_per_switching_state1 => Data_Type_Conversion73_out1,  -- single
              q_phase_voltage_per_switching_state1 => Data_Type_Conversion72_out1,  -- single
              x_phase_voltage_per_switching_state1 => Data_Type_Conversion71_out1,  -- single
              y_phase_voltage_per_switching_state1 => Data_Type_Conversion70_out1,  -- single
              d_phase_voltage_per_switching_state2 => Data_Type_Conversion69_out1,  -- single
              q_phase_voltage_per_switching_state2 => Data_Type_Conversion68_out1,  -- single
              x_phase_voltage_per_switching_state2 => Data_Type_Conversion67_out1,  -- single
              y_phase_voltage_per_switching_state2 => Data_Type_Conversion66_out1,  -- single
              d_phase_voltage_per_switching_state3 => Data_Type_Conversion65_out1,  -- single
              q_phase_voltage_per_switching_state3 => Data_Type_Conversion64_out1,  -- single
              x_phase_voltage_per_switching_state3 => Data_Type_Conversion63_out1,  -- single
              y_phase_voltage_per_switching_state3 => Data_Type_Conversion62_out1,  -- single
              d_phase_voltage_per_switching_state4 => Data_Type_Conversion61_out1,  -- single
              q_phase_voltage_per_switching_state4 => Data_Type_Conversion60_out1,  -- single
              x_phase_voltage_per_switching_state4 => Data_Type_Conversion59_out1,  -- single
              y_phase_voltage_per_switching_state4 => Data_Type_Conversion58_out1,  -- single
              d_phase_voltage_per_switching_state5 => Data_Type_Conversion57_out1,  -- single
              q_phase_voltage_per_switching_state5 => Data_Type_Conversion56_out1,  -- single
              x_phase_voltage_per_switching_state5 => Data_Type_Conversion55_out1,  -- single
              y_phase_voltage_per_switching_state5 => Data_Type_Conversion53_out1,  -- single
              d_phase_voltage_per_switching_state6 => Data_Type_Conversion45_out1,  -- single
              q_phase_voltage_per_switching_state6 => Data_Type_Conversion44_out1,  -- single
              x_phase_voltage_per_switching_state6 => Data_Type_Conversion43_out1,  -- single
              y_phase_voltage_per_switching_state6 => Data_Type_Conversion42_out1,  -- single
              d_phase_voltage_per_switching_state7 => Data_Type_Conversion10_out1,  -- single
              q_phase_voltage_per_switching_state7 => Data_Type_Conversion9_out1,  -- single
              x_phase_voltage_per_switching_state7 => Data_Type_Conversion8_out1,  -- single
              y_phase_voltage_per_switching_state7 => Data_Type_Conversion7_out1,  -- single
              SampleTime_div_Ld15 => Switch_on21_out1,  -- single
              SampleTime_div_Lq15 => Switch_on20_out1,  -- single
              SampleTime_div_Lx15 => Switch_on19_out1,  -- single
              SampleTime_div_Ly15 => Switch_on18_out1,  -- single
              id_k_16 => Data_Type_Conversion41_out1,  -- single
              iq_k_16 => Data_Type_Conversion40_out1,  -- single
              ix_k_16 => Data_Type_Conversion39_out1,  -- single
              iy_k_16 => Data_Type_Conversion18_out1,  -- single
              Rs15 => Switch_on12_out1,  -- single
              omega_el15 => omega_el_1,  -- single
              Lq15 => Switch_on10_out1,  -- single
              Ld15 => Switch_on9_out1,  -- single
              psiPM15 => Switch_on8_out1,  -- single
              id_ref15 => Switch_on3_out1,  -- single
              iq_ref15 => Switch_on2_out1,  -- single
              ix_ref15 => Switch_on1_out1,  -- single
              iy_ref15 => Switch_on14_out1,  -- single
              J => fc,  -- single
              J1 => fc_1,  -- single
              J2 => fc_2,  -- single
              J3 => fc_3,  -- single
              J4 => fc_4,  -- single
              J5 => fc_5,  -- single
              J6 => fc_6,  -- single
              J7 => fc_7  -- single
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_single_to_sfix_20_En9 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => fc,  -- single
              nfp_out => fc_8  -- sfix20_En9
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_single_to_sfix_20_En9_1 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => fc_1,  -- single
              nfp_out => fc_17  -- sfix20_En9
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_single_to_sfix_20_En9_2 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => fc_2,  -- single
              nfp_out => fc_18  -- sfix20_En9
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_single_to_sfix_20_En9_3 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => fc_3,  -- single
              nfp_out => fc_19  -- sfix20_En9
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_single_to_sfix_20_En9_4 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => fc_4,  -- single
              nfp_out => fc_20  -- sfix20_En9
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_single_to_sfix_20_En9_5 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => fc_5,  -- single
              nfp_out => fc_21  -- sfix20_En9
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_single_to_sfix_20_En9_6 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => fc_6,  -- single
              nfp_out => fc_22  -- sfix20_En9
              );

  u_parallel_8_prediction_and_cost_function_Prediction_and_cost_function1_nfp_convert_single_to_sfix_20_En9_7 : parallel_8_sim_prediction_and_cost_function_src_nfp_convert_single_to_sfix_20_En9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => fc_7,  -- single
              nfp_out => fc_23  -- sfix20_En9
              );

  enb <= clk_enable;

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_reg(0) <= '0';
        Delay21_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay21_reg(0) <= Delay21_reg_next(0);
        Delay21_reg(1) <= Delay21_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay21_process;

  Delay21_out1 <= Delay21_reg(1);
  Delay21_reg_next(0) <= done_phase_voltages;
  Delay21_reg_next(1) <= Delay21_reg(0);

  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_reg(0) <= '0';
        Delay22_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay22_reg(0) <= Delay22_reg_next(0);
        Delay22_reg(1) <= Delay22_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay22_process;

  Delay22_out1 <= Delay22_reg(1);
  Delay22_reg_next(0) <= done_vsd_and_park;
  Delay22_reg_next(1) <= Delay22_reg(0);

  -- Free running, Signed Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_signed(1, 32);

  count_reset <= to_signed(0, 32);

  count <= HDL_Counter_out1 + count_step;

  
  count_1 <= HDL_Counter_out1 WHEN End_Cycle = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN End_Cycle_1 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Logical_Operator_out1 <= End_Cycle AND Compare_To_Constant_out1;

  Delay59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay59_reg(0) <= '0';
        Delay59_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay59_reg(0) <= Delay59_reg_next(0);
        Delay59_reg(1) <= Delay59_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay59_process;

  Delay59_out1 <= Delay59_reg(1);
  Delay59_reg_next(0) <= Logical_Operator_out1;
  Delay59_reg_next(1) <= Delay59_reg(0);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg(0) <= '0';
        delayMatch_reg(1) <= '0';
        delayMatch_reg(2) <= '0';
        delayMatch_reg(3) <= '0';
        delayMatch_reg(4) <= '0';
        delayMatch_reg(5) <= '0';
        delayMatch_reg(6) <= '0';
        delayMatch_reg(7) <= '0';
        delayMatch_reg(8) <= '0';
        delayMatch_reg(9) <= '0';
        delayMatch_reg(10) <= '0';
        delayMatch_reg(11) <= '0';
        delayMatch_reg(12) <= '0';
        delayMatch_reg(13) <= '0';
        delayMatch_reg(14) <= '0';
        delayMatch_reg(15) <= '0';
        delayMatch_reg(16) <= '0';
        delayMatch_reg(17) <= '0';
        delayMatch_reg(18) <= '0';
        delayMatch_reg(19) <= '0';
        delayMatch_reg(20) <= '0';
        delayMatch_reg(21) <= '0';
        delayMatch_reg(22) <= '0';
        delayMatch_reg(23) <= '0';
        delayMatch_reg(24) <= '0';
        delayMatch_reg(25) <= '0';
        delayMatch_reg(26) <= '0';
        delayMatch_reg(27) <= '0';
        delayMatch_reg(28) <= '0';
        delayMatch_reg(29) <= '0';
        delayMatch_reg(30) <= '0';
        delayMatch_reg(31) <= '0';
        delayMatch_reg(32) <= '0';
        delayMatch_reg(33) <= '0';
        delayMatch_reg(34) <= '0';
        delayMatch_reg(35) <= '0';
        delayMatch_reg(36) <= '0';
        delayMatch_reg(37) <= '0';
        delayMatch_reg(38) <= '0';
        delayMatch_reg(39) <= '0';
        delayMatch_reg(40) <= '0';
        delayMatch_reg(41) <= '0';
        delayMatch_reg(42) <= '0';
        delayMatch_reg(43) <= '0';
        delayMatch_reg(44) <= '0';
        delayMatch_reg(45) <= '0';
        delayMatch_reg(46) <= '0';
        delayMatch_reg(47) <= '0';
        delayMatch_reg(48) <= '0';
        delayMatch_reg(49) <= '0';
        delayMatch_reg(50) <= '0';
        delayMatch_reg(51) <= '0';
        delayMatch_reg(52) <= '0';
        delayMatch_reg(53) <= '0';
        delayMatch_reg(54) <= '0';
        delayMatch_reg(55) <= '0';
        delayMatch_reg(56) <= '0';
        delayMatch_reg(57) <= '0';
        delayMatch_reg(58) <= '0';
        delayMatch_reg(59) <= '0';
        delayMatch_reg(60) <= '0';
        delayMatch_reg(61) <= '0';
        delayMatch_reg(62) <= '0';
        delayMatch_reg(63) <= '0';
        delayMatch_reg(64) <= '0';
        delayMatch_reg(65) <= '0';
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
        delayMatch_reg(6) <= delayMatch_reg_next(6);
        delayMatch_reg(7) <= delayMatch_reg_next(7);
        delayMatch_reg(8) <= delayMatch_reg_next(8);
        delayMatch_reg(9) <= delayMatch_reg_next(9);
        delayMatch_reg(10) <= delayMatch_reg_next(10);
        delayMatch_reg(11) <= delayMatch_reg_next(11);
        delayMatch_reg(12) <= delayMatch_reg_next(12);
        delayMatch_reg(13) <= delayMatch_reg_next(13);
        delayMatch_reg(14) <= delayMatch_reg_next(14);
        delayMatch_reg(15) <= delayMatch_reg_next(15);
        delayMatch_reg(16) <= delayMatch_reg_next(16);
        delayMatch_reg(17) <= delayMatch_reg_next(17);
        delayMatch_reg(18) <= delayMatch_reg_next(18);
        delayMatch_reg(19) <= delayMatch_reg_next(19);
        delayMatch_reg(20) <= delayMatch_reg_next(20);
        delayMatch_reg(21) <= delayMatch_reg_next(21);
        delayMatch_reg(22) <= delayMatch_reg_next(22);
        delayMatch_reg(23) <= delayMatch_reg_next(23);
        delayMatch_reg(24) <= delayMatch_reg_next(24);
        delayMatch_reg(25) <= delayMatch_reg_next(25);
        delayMatch_reg(26) <= delayMatch_reg_next(26);
        delayMatch_reg(27) <= delayMatch_reg_next(27);
        delayMatch_reg(28) <= delayMatch_reg_next(28);
        delayMatch_reg(29) <= delayMatch_reg_next(29);
        delayMatch_reg(30) <= delayMatch_reg_next(30);
        delayMatch_reg(31) <= delayMatch_reg_next(31);
        delayMatch_reg(32) <= delayMatch_reg_next(32);
        delayMatch_reg(33) <= delayMatch_reg_next(33);
        delayMatch_reg(34) <= delayMatch_reg_next(34);
        delayMatch_reg(35) <= delayMatch_reg_next(35);
        delayMatch_reg(36) <= delayMatch_reg_next(36);
        delayMatch_reg(37) <= delayMatch_reg_next(37);
        delayMatch_reg(38) <= delayMatch_reg_next(38);
        delayMatch_reg(39) <= delayMatch_reg_next(39);
        delayMatch_reg(40) <= delayMatch_reg_next(40);
        delayMatch_reg(41) <= delayMatch_reg_next(41);
        delayMatch_reg(42) <= delayMatch_reg_next(42);
        delayMatch_reg(43) <= delayMatch_reg_next(43);
        delayMatch_reg(44) <= delayMatch_reg_next(44);
        delayMatch_reg(45) <= delayMatch_reg_next(45);
        delayMatch_reg(46) <= delayMatch_reg_next(46);
        delayMatch_reg(47) <= delayMatch_reg_next(47);
        delayMatch_reg(48) <= delayMatch_reg_next(48);
        delayMatch_reg(49) <= delayMatch_reg_next(49);
        delayMatch_reg(50) <= delayMatch_reg_next(50);
        delayMatch_reg(51) <= delayMatch_reg_next(51);
        delayMatch_reg(52) <= delayMatch_reg_next(52);
        delayMatch_reg(53) <= delayMatch_reg_next(53);
        delayMatch_reg(54) <= delayMatch_reg_next(54);
        delayMatch_reg(55) <= delayMatch_reg_next(55);
        delayMatch_reg(56) <= delayMatch_reg_next(56);
        delayMatch_reg(57) <= delayMatch_reg_next(57);
        delayMatch_reg(58) <= delayMatch_reg_next(58);
        delayMatch_reg(59) <= delayMatch_reg_next(59);
        delayMatch_reg(60) <= delayMatch_reg_next(60);
        delayMatch_reg(61) <= delayMatch_reg_next(61);
        delayMatch_reg(62) <= delayMatch_reg_next(62);
        delayMatch_reg(63) <= delayMatch_reg_next(63);
        delayMatch_reg(64) <= delayMatch_reg_next(64);
        delayMatch_reg(65) <= delayMatch_reg_next(65);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Delay59_out1_1 <= delayMatch_reg(65);
  delayMatch_reg_next(0) <= Delay59_out1;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);
  delayMatch_reg_next(6) <= delayMatch_reg(5);
  delayMatch_reg_next(7) <= delayMatch_reg(6);
  delayMatch_reg_next(8) <= delayMatch_reg(7);
  delayMatch_reg_next(9) <= delayMatch_reg(8);
  delayMatch_reg_next(10) <= delayMatch_reg(9);
  delayMatch_reg_next(11) <= delayMatch_reg(10);
  delayMatch_reg_next(12) <= delayMatch_reg(11);
  delayMatch_reg_next(13) <= delayMatch_reg(12);
  delayMatch_reg_next(14) <= delayMatch_reg(13);
  delayMatch_reg_next(15) <= delayMatch_reg(14);
  delayMatch_reg_next(16) <= delayMatch_reg(15);
  delayMatch_reg_next(17) <= delayMatch_reg(16);
  delayMatch_reg_next(18) <= delayMatch_reg(17);
  delayMatch_reg_next(19) <= delayMatch_reg(18);
  delayMatch_reg_next(20) <= delayMatch_reg(19);
  delayMatch_reg_next(21) <= delayMatch_reg(20);
  delayMatch_reg_next(22) <= delayMatch_reg(21);
  delayMatch_reg_next(23) <= delayMatch_reg(22);
  delayMatch_reg_next(24) <= delayMatch_reg(23);
  delayMatch_reg_next(25) <= delayMatch_reg(24);
  delayMatch_reg_next(26) <= delayMatch_reg(25);
  delayMatch_reg_next(27) <= delayMatch_reg(26);
  delayMatch_reg_next(28) <= delayMatch_reg(27);
  delayMatch_reg_next(29) <= delayMatch_reg(28);
  delayMatch_reg_next(30) <= delayMatch_reg(29);
  delayMatch_reg_next(31) <= delayMatch_reg(30);
  delayMatch_reg_next(32) <= delayMatch_reg(31);
  delayMatch_reg_next(33) <= delayMatch_reg(32);
  delayMatch_reg_next(34) <= delayMatch_reg(33);
  delayMatch_reg_next(35) <= delayMatch_reg(34);
  delayMatch_reg_next(36) <= delayMatch_reg(35);
  delayMatch_reg_next(37) <= delayMatch_reg(36);
  delayMatch_reg_next(38) <= delayMatch_reg(37);
  delayMatch_reg_next(39) <= delayMatch_reg(38);
  delayMatch_reg_next(40) <= delayMatch_reg(39);
  delayMatch_reg_next(41) <= delayMatch_reg(40);
  delayMatch_reg_next(42) <= delayMatch_reg(41);
  delayMatch_reg_next(43) <= delayMatch_reg(42);
  delayMatch_reg_next(44) <= delayMatch_reg(43);
  delayMatch_reg_next(45) <= delayMatch_reg(44);
  delayMatch_reg_next(46) <= delayMatch_reg(45);
  delayMatch_reg_next(47) <= delayMatch_reg(46);
  delayMatch_reg_next(48) <= delayMatch_reg(47);
  delayMatch_reg_next(49) <= delayMatch_reg(48);
  delayMatch_reg_next(50) <= delayMatch_reg(49);
  delayMatch_reg_next(51) <= delayMatch_reg(50);
  delayMatch_reg_next(52) <= delayMatch_reg(51);
  delayMatch_reg_next(53) <= delayMatch_reg(52);
  delayMatch_reg_next(54) <= delayMatch_reg(53);
  delayMatch_reg_next(55) <= delayMatch_reg(54);
  delayMatch_reg_next(56) <= delayMatch_reg(55);
  delayMatch_reg_next(57) <= delayMatch_reg(56);
  delayMatch_reg_next(58) <= delayMatch_reg(57);
  delayMatch_reg_next(59) <= delayMatch_reg(58);
  delayMatch_reg_next(60) <= delayMatch_reg(59);
  delayMatch_reg_next(61) <= delayMatch_reg(60);
  delayMatch_reg_next(62) <= delayMatch_reg(61);
  delayMatch_reg_next(63) <= delayMatch_reg(62);
  delayMatch_reg_next(64) <= delayMatch_reg(63);
  delayMatch_reg_next(65) <= delayMatch_reg(64);

  done_Prediction_and_cost_function <= Delay59_out1_1;

  Delay60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay60_reg(0) <= to_signed(0, 32);
        Delay60_reg(1) <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay60_reg(0) <= Delay60_reg_next(0);
        Delay60_reg(1) <= Delay60_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay60_process;

  Delay60_out1 <= Delay60_reg(1);
  Delay60_reg_next(0) <= HDL_Counter_out1;
  Delay60_reg_next(1) <= Delay60_reg(0);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg(0) <= to_signed(0, 32);
        delayMatch1_reg(1) <= to_signed(0, 32);
        delayMatch1_reg(2) <= to_signed(0, 32);
        delayMatch1_reg(3) <= to_signed(0, 32);
        delayMatch1_reg(4) <= to_signed(0, 32);
        delayMatch1_reg(5) <= to_signed(0, 32);
        delayMatch1_reg(6) <= to_signed(0, 32);
        delayMatch1_reg(7) <= to_signed(0, 32);
        delayMatch1_reg(8) <= to_signed(0, 32);
        delayMatch1_reg(9) <= to_signed(0, 32);
        delayMatch1_reg(10) <= to_signed(0, 32);
        delayMatch1_reg(11) <= to_signed(0, 32);
        delayMatch1_reg(12) <= to_signed(0, 32);
        delayMatch1_reg(13) <= to_signed(0, 32);
        delayMatch1_reg(14) <= to_signed(0, 32);
        delayMatch1_reg(15) <= to_signed(0, 32);
        delayMatch1_reg(16) <= to_signed(0, 32);
        delayMatch1_reg(17) <= to_signed(0, 32);
        delayMatch1_reg(18) <= to_signed(0, 32);
        delayMatch1_reg(19) <= to_signed(0, 32);
        delayMatch1_reg(20) <= to_signed(0, 32);
        delayMatch1_reg(21) <= to_signed(0, 32);
        delayMatch1_reg(22) <= to_signed(0, 32);
        delayMatch1_reg(23) <= to_signed(0, 32);
        delayMatch1_reg(24) <= to_signed(0, 32);
        delayMatch1_reg(25) <= to_signed(0, 32);
        delayMatch1_reg(26) <= to_signed(0, 32);
        delayMatch1_reg(27) <= to_signed(0, 32);
        delayMatch1_reg(28) <= to_signed(0, 32);
        delayMatch1_reg(29) <= to_signed(0, 32);
        delayMatch1_reg(30) <= to_signed(0, 32);
        delayMatch1_reg(31) <= to_signed(0, 32);
        delayMatch1_reg(32) <= to_signed(0, 32);
        delayMatch1_reg(33) <= to_signed(0, 32);
        delayMatch1_reg(34) <= to_signed(0, 32);
        delayMatch1_reg(35) <= to_signed(0, 32);
        delayMatch1_reg(36) <= to_signed(0, 32);
        delayMatch1_reg(37) <= to_signed(0, 32);
        delayMatch1_reg(38) <= to_signed(0, 32);
        delayMatch1_reg(39) <= to_signed(0, 32);
        delayMatch1_reg(40) <= to_signed(0, 32);
        delayMatch1_reg(41) <= to_signed(0, 32);
        delayMatch1_reg(42) <= to_signed(0, 32);
        delayMatch1_reg(43) <= to_signed(0, 32);
        delayMatch1_reg(44) <= to_signed(0, 32);
        delayMatch1_reg(45) <= to_signed(0, 32);
        delayMatch1_reg(46) <= to_signed(0, 32);
        delayMatch1_reg(47) <= to_signed(0, 32);
        delayMatch1_reg(48) <= to_signed(0, 32);
        delayMatch1_reg(49) <= to_signed(0, 32);
        delayMatch1_reg(50) <= to_signed(0, 32);
        delayMatch1_reg(51) <= to_signed(0, 32);
        delayMatch1_reg(52) <= to_signed(0, 32);
        delayMatch1_reg(53) <= to_signed(0, 32);
        delayMatch1_reg(54) <= to_signed(0, 32);
        delayMatch1_reg(55) <= to_signed(0, 32);
        delayMatch1_reg(56) <= to_signed(0, 32);
        delayMatch1_reg(57) <= to_signed(0, 32);
        delayMatch1_reg(58) <= to_signed(0, 32);
        delayMatch1_reg(59) <= to_signed(0, 32);
        delayMatch1_reg(60) <= to_signed(0, 32);
        delayMatch1_reg(61) <= to_signed(0, 32);
        delayMatch1_reg(62) <= to_signed(0, 32);
        delayMatch1_reg(63) <= to_signed(0, 32);
        delayMatch1_reg(64) <= to_signed(0, 32);
        delayMatch1_reg(65) <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
        delayMatch1_reg(5) <= delayMatch1_reg_next(5);
        delayMatch1_reg(6) <= delayMatch1_reg_next(6);
        delayMatch1_reg(7) <= delayMatch1_reg_next(7);
        delayMatch1_reg(8) <= delayMatch1_reg_next(8);
        delayMatch1_reg(9) <= delayMatch1_reg_next(9);
        delayMatch1_reg(10) <= delayMatch1_reg_next(10);
        delayMatch1_reg(11) <= delayMatch1_reg_next(11);
        delayMatch1_reg(12) <= delayMatch1_reg_next(12);
        delayMatch1_reg(13) <= delayMatch1_reg_next(13);
        delayMatch1_reg(14) <= delayMatch1_reg_next(14);
        delayMatch1_reg(15) <= delayMatch1_reg_next(15);
        delayMatch1_reg(16) <= delayMatch1_reg_next(16);
        delayMatch1_reg(17) <= delayMatch1_reg_next(17);
        delayMatch1_reg(18) <= delayMatch1_reg_next(18);
        delayMatch1_reg(19) <= delayMatch1_reg_next(19);
        delayMatch1_reg(20) <= delayMatch1_reg_next(20);
        delayMatch1_reg(21) <= delayMatch1_reg_next(21);
        delayMatch1_reg(22) <= delayMatch1_reg_next(22);
        delayMatch1_reg(23) <= delayMatch1_reg_next(23);
        delayMatch1_reg(24) <= delayMatch1_reg_next(24);
        delayMatch1_reg(25) <= delayMatch1_reg_next(25);
        delayMatch1_reg(26) <= delayMatch1_reg_next(26);
        delayMatch1_reg(27) <= delayMatch1_reg_next(27);
        delayMatch1_reg(28) <= delayMatch1_reg_next(28);
        delayMatch1_reg(29) <= delayMatch1_reg_next(29);
        delayMatch1_reg(30) <= delayMatch1_reg_next(30);
        delayMatch1_reg(31) <= delayMatch1_reg_next(31);
        delayMatch1_reg(32) <= delayMatch1_reg_next(32);
        delayMatch1_reg(33) <= delayMatch1_reg_next(33);
        delayMatch1_reg(34) <= delayMatch1_reg_next(34);
        delayMatch1_reg(35) <= delayMatch1_reg_next(35);
        delayMatch1_reg(36) <= delayMatch1_reg_next(36);
        delayMatch1_reg(37) <= delayMatch1_reg_next(37);
        delayMatch1_reg(38) <= delayMatch1_reg_next(38);
        delayMatch1_reg(39) <= delayMatch1_reg_next(39);
        delayMatch1_reg(40) <= delayMatch1_reg_next(40);
        delayMatch1_reg(41) <= delayMatch1_reg_next(41);
        delayMatch1_reg(42) <= delayMatch1_reg_next(42);
        delayMatch1_reg(43) <= delayMatch1_reg_next(43);
        delayMatch1_reg(44) <= delayMatch1_reg_next(44);
        delayMatch1_reg(45) <= delayMatch1_reg_next(45);
        delayMatch1_reg(46) <= delayMatch1_reg_next(46);
        delayMatch1_reg(47) <= delayMatch1_reg_next(47);
        delayMatch1_reg(48) <= delayMatch1_reg_next(48);
        delayMatch1_reg(49) <= delayMatch1_reg_next(49);
        delayMatch1_reg(50) <= delayMatch1_reg_next(50);
        delayMatch1_reg(51) <= delayMatch1_reg_next(51);
        delayMatch1_reg(52) <= delayMatch1_reg_next(52);
        delayMatch1_reg(53) <= delayMatch1_reg_next(53);
        delayMatch1_reg(54) <= delayMatch1_reg_next(54);
        delayMatch1_reg(55) <= delayMatch1_reg_next(55);
        delayMatch1_reg(56) <= delayMatch1_reg_next(56);
        delayMatch1_reg(57) <= delayMatch1_reg_next(57);
        delayMatch1_reg(58) <= delayMatch1_reg_next(58);
        delayMatch1_reg(59) <= delayMatch1_reg_next(59);
        delayMatch1_reg(60) <= delayMatch1_reg_next(60);
        delayMatch1_reg(61) <= delayMatch1_reg_next(61);
        delayMatch1_reg(62) <= delayMatch1_reg_next(62);
        delayMatch1_reg(63) <= delayMatch1_reg_next(63);
        delayMatch1_reg(64) <= delayMatch1_reg_next(64);
        delayMatch1_reg(65) <= delayMatch1_reg_next(65);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Delay60_out1_1 <= delayMatch1_reg(65);
  delayMatch1_reg_next(0) <= Delay60_out1;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);
  delayMatch1_reg_next(6) <= delayMatch1_reg(5);
  delayMatch1_reg_next(7) <= delayMatch1_reg(6);
  delayMatch1_reg_next(8) <= delayMatch1_reg(7);
  delayMatch1_reg_next(9) <= delayMatch1_reg(8);
  delayMatch1_reg_next(10) <= delayMatch1_reg(9);
  delayMatch1_reg_next(11) <= delayMatch1_reg(10);
  delayMatch1_reg_next(12) <= delayMatch1_reg(11);
  delayMatch1_reg_next(13) <= delayMatch1_reg(12);
  delayMatch1_reg_next(14) <= delayMatch1_reg(13);
  delayMatch1_reg_next(15) <= delayMatch1_reg(14);
  delayMatch1_reg_next(16) <= delayMatch1_reg(15);
  delayMatch1_reg_next(17) <= delayMatch1_reg(16);
  delayMatch1_reg_next(18) <= delayMatch1_reg(17);
  delayMatch1_reg_next(19) <= delayMatch1_reg(18);
  delayMatch1_reg_next(20) <= delayMatch1_reg(19);
  delayMatch1_reg_next(21) <= delayMatch1_reg(20);
  delayMatch1_reg_next(22) <= delayMatch1_reg(21);
  delayMatch1_reg_next(23) <= delayMatch1_reg(22);
  delayMatch1_reg_next(24) <= delayMatch1_reg(23);
  delayMatch1_reg_next(25) <= delayMatch1_reg(24);
  delayMatch1_reg_next(26) <= delayMatch1_reg(25);
  delayMatch1_reg_next(27) <= delayMatch1_reg(26);
  delayMatch1_reg_next(28) <= delayMatch1_reg(27);
  delayMatch1_reg_next(29) <= delayMatch1_reg(28);
  delayMatch1_reg_next(30) <= delayMatch1_reg(29);
  delayMatch1_reg_next(31) <= delayMatch1_reg(30);
  delayMatch1_reg_next(32) <= delayMatch1_reg(31);
  delayMatch1_reg_next(33) <= delayMatch1_reg(32);
  delayMatch1_reg_next(34) <= delayMatch1_reg(33);
  delayMatch1_reg_next(35) <= delayMatch1_reg(34);
  delayMatch1_reg_next(36) <= delayMatch1_reg(35);
  delayMatch1_reg_next(37) <= delayMatch1_reg(36);
  delayMatch1_reg_next(38) <= delayMatch1_reg(37);
  delayMatch1_reg_next(39) <= delayMatch1_reg(38);
  delayMatch1_reg_next(40) <= delayMatch1_reg(39);
  delayMatch1_reg_next(41) <= delayMatch1_reg(40);
  delayMatch1_reg_next(42) <= delayMatch1_reg(41);
  delayMatch1_reg_next(43) <= delayMatch1_reg(42);
  delayMatch1_reg_next(44) <= delayMatch1_reg(43);
  delayMatch1_reg_next(45) <= delayMatch1_reg(44);
  delayMatch1_reg_next(46) <= delayMatch1_reg(45);
  delayMatch1_reg_next(47) <= delayMatch1_reg(46);
  delayMatch1_reg_next(48) <= delayMatch1_reg(47);
  delayMatch1_reg_next(49) <= delayMatch1_reg(48);
  delayMatch1_reg_next(50) <= delayMatch1_reg(49);
  delayMatch1_reg_next(51) <= delayMatch1_reg(50);
  delayMatch1_reg_next(52) <= delayMatch1_reg(51);
  delayMatch1_reg_next(53) <= delayMatch1_reg(52);
  delayMatch1_reg_next(54) <= delayMatch1_reg(53);
  delayMatch1_reg_next(55) <= delayMatch1_reg(54);
  delayMatch1_reg_next(56) <= delayMatch1_reg(55);
  delayMatch1_reg_next(57) <= delayMatch1_reg(56);
  delayMatch1_reg_next(58) <= delayMatch1_reg(57);
  delayMatch1_reg_next(59) <= delayMatch1_reg(58);
  delayMatch1_reg_next(60) <= delayMatch1_reg(59);
  delayMatch1_reg_next(61) <= delayMatch1_reg(60);
  delayMatch1_reg_next(62) <= delayMatch1_reg(61);
  delayMatch1_reg_next(63) <= delayMatch1_reg(62);
  delayMatch1_reg_next(64) <= delayMatch1_reg(63);
  delayMatch1_reg_next(65) <= delayMatch1_reg(64);

  Index <= std_logic_vector(Delay60_out1_1);

  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_0_1 <= signed(dqxy_phase_voltage_per_switching_state_0);

  Delay51_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay51_1_reg(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_1(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_1(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_2(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_2(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_3(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_3(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_4(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_4(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_5(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_5(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_6(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_6(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_7(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_7(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_8(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_8(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_9(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_9(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_10(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_10(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_11(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_11(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_12(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_12(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_13(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_13(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_14(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_14(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_15(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_15(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_16(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_16(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_17(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_17(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_18(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_18(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_19(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_19(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_20(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_20(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_21(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_21(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_22(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_22(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_23(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_23(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_24(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_24(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_25(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_25(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_26(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_26(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_27(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_27(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_28(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_28(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_29(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_29(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_30(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_30(1) <= to_signed(16#000000#, 24);
        Delay51_1_reg_31(0) <= to_signed(16#000000#, 24);
        Delay51_1_reg_31(1) <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay51_1_reg(0) <= Delay51_1_reg_next(0);
        Delay51_1_reg(1) <= Delay51_1_reg_next(1);
        Delay51_1_reg_1(0) <= Delay51_1_reg_next_1(0);
        Delay51_1_reg_1(1) <= Delay51_1_reg_next_1(1);
        Delay51_1_reg_2(0) <= Delay51_1_reg_next_2(0);
        Delay51_1_reg_2(1) <= Delay51_1_reg_next_2(1);
        Delay51_1_reg_3(0) <= Delay51_1_reg_next_3(0);
        Delay51_1_reg_3(1) <= Delay51_1_reg_next_3(1);
        Delay51_1_reg_4(0) <= Delay51_1_reg_next_4(0);
        Delay51_1_reg_4(1) <= Delay51_1_reg_next_4(1);
        Delay51_1_reg_5(0) <= Delay51_1_reg_next_5(0);
        Delay51_1_reg_5(1) <= Delay51_1_reg_next_5(1);
        Delay51_1_reg_6(0) <= Delay51_1_reg_next_6(0);
        Delay51_1_reg_6(1) <= Delay51_1_reg_next_6(1);
        Delay51_1_reg_7(0) <= Delay51_1_reg_next_7(0);
        Delay51_1_reg_7(1) <= Delay51_1_reg_next_7(1);
        Delay51_1_reg_8(0) <= Delay51_1_reg_next_8(0);
        Delay51_1_reg_8(1) <= Delay51_1_reg_next_8(1);
        Delay51_1_reg_9(0) <= Delay51_1_reg_next_9(0);
        Delay51_1_reg_9(1) <= Delay51_1_reg_next_9(1);
        Delay51_1_reg_10(0) <= Delay51_1_reg_next_10(0);
        Delay51_1_reg_10(1) <= Delay51_1_reg_next_10(1);
        Delay51_1_reg_11(0) <= Delay51_1_reg_next_11(0);
        Delay51_1_reg_11(1) <= Delay51_1_reg_next_11(1);
        Delay51_1_reg_12(0) <= Delay51_1_reg_next_12(0);
        Delay51_1_reg_12(1) <= Delay51_1_reg_next_12(1);
        Delay51_1_reg_13(0) <= Delay51_1_reg_next_13(0);
        Delay51_1_reg_13(1) <= Delay51_1_reg_next_13(1);
        Delay51_1_reg_14(0) <= Delay51_1_reg_next_14(0);
        Delay51_1_reg_14(1) <= Delay51_1_reg_next_14(1);
        Delay51_1_reg_15(0) <= Delay51_1_reg_next_15(0);
        Delay51_1_reg_15(1) <= Delay51_1_reg_next_15(1);
        Delay51_1_reg_16(0) <= Delay51_1_reg_next_16(0);
        Delay51_1_reg_16(1) <= Delay51_1_reg_next_16(1);
        Delay51_1_reg_17(0) <= Delay51_1_reg_next_17(0);
        Delay51_1_reg_17(1) <= Delay51_1_reg_next_17(1);
        Delay51_1_reg_18(0) <= Delay51_1_reg_next_18(0);
        Delay51_1_reg_18(1) <= Delay51_1_reg_next_18(1);
        Delay51_1_reg_19(0) <= Delay51_1_reg_next_19(0);
        Delay51_1_reg_19(1) <= Delay51_1_reg_next_19(1);
        Delay51_1_reg_20(0) <= Delay51_1_reg_next_20(0);
        Delay51_1_reg_20(1) <= Delay51_1_reg_next_20(1);
        Delay51_1_reg_21(0) <= Delay51_1_reg_next_21(0);
        Delay51_1_reg_21(1) <= Delay51_1_reg_next_21(1);
        Delay51_1_reg_22(0) <= Delay51_1_reg_next_22(0);
        Delay51_1_reg_22(1) <= Delay51_1_reg_next_22(1);
        Delay51_1_reg_23(0) <= Delay51_1_reg_next_23(0);
        Delay51_1_reg_23(1) <= Delay51_1_reg_next_23(1);
        Delay51_1_reg_24(0) <= Delay51_1_reg_next_24(0);
        Delay51_1_reg_24(1) <= Delay51_1_reg_next_24(1);
        Delay51_1_reg_25(0) <= Delay51_1_reg_next_25(0);
        Delay51_1_reg_25(1) <= Delay51_1_reg_next_25(1);
        Delay51_1_reg_26(0) <= Delay51_1_reg_next_26(0);
        Delay51_1_reg_26(1) <= Delay51_1_reg_next_26(1);
        Delay51_1_reg_27(0) <= Delay51_1_reg_next_27(0);
        Delay51_1_reg_27(1) <= Delay51_1_reg_next_27(1);
        Delay51_1_reg_28(0) <= Delay51_1_reg_next_28(0);
        Delay51_1_reg_28(1) <= Delay51_1_reg_next_28(1);
        Delay51_1_reg_29(0) <= Delay51_1_reg_next_29(0);
        Delay51_1_reg_29(1) <= Delay51_1_reg_next_29(1);
        Delay51_1_reg_30(0) <= Delay51_1_reg_next_30(0);
        Delay51_1_reg_30(1) <= Delay51_1_reg_next_30(1);
        Delay51_1_reg_31(0) <= Delay51_1_reg_next_31(0);
        Delay51_1_reg_31(1) <= Delay51_1_reg_next_31(1);
      END IF;
    END IF;
  END PROCESS Delay51_1_process;

  Delay51_1_reg_next(0) <= dqxy_phase_voltage_per_switching_state_0_1;
  Delay51_1_reg_next(1) <= Delay51_1_reg(0);
  Delay51_out_1 <= Delay51_1_reg(1);
  Delay51_1_reg_next_1(0) <= dqxy_phase_voltage_per_switching_state_1_1;
  Delay51_1_reg_next_1(1) <= Delay51_1_reg_1(0);
  Delay51_out_2 <= Delay51_1_reg_1(1);
  Delay51_1_reg_next_2(0) <= dqxy_phase_voltage_per_switching_state_2_1;
  Delay51_1_reg_next_2(1) <= Delay51_1_reg_2(0);
  Delay51_out_3 <= Delay51_1_reg_2(1);
  Delay51_1_reg_next_3(0) <= dqxy_phase_voltage_per_switching_state_3_1;
  Delay51_1_reg_next_3(1) <= Delay51_1_reg_3(0);
  Delay51_out_4 <= Delay51_1_reg_3(1);
  Delay51_1_reg_next_4(0) <= dqxy_phase_voltage_per_switching_state_4_1;
  Delay51_1_reg_next_4(1) <= Delay51_1_reg_4(0);
  Delay51_out_5 <= Delay51_1_reg_4(1);
  Delay51_1_reg_next_5(0) <= dqxy_phase_voltage_per_switching_state_5_1;
  Delay51_1_reg_next_5(1) <= Delay51_1_reg_5(0);
  Delay51_out_6 <= Delay51_1_reg_5(1);
  Delay51_1_reg_next_6(0) <= dqxy_phase_voltage_per_switching_state_6_1;
  Delay51_1_reg_next_6(1) <= Delay51_1_reg_6(0);
  Delay51_out_7 <= Delay51_1_reg_6(1);
  Delay51_1_reg_next_7(0) <= dqxy_phase_voltage_per_switching_state_7_1;
  Delay51_1_reg_next_7(1) <= Delay51_1_reg_7(0);
  Delay51_out_8 <= Delay51_1_reg_7(1);
  Delay51_1_reg_next_8(0) <= dqxy_phase_voltage_per_switching_state_8_1;
  Delay51_1_reg_next_8(1) <= Delay51_1_reg_8(0);
  Delay51_out_9 <= Delay51_1_reg_8(1);
  Delay51_1_reg_next_9(0) <= dqxy_phase_voltage_per_switching_state_9_1;
  Delay51_1_reg_next_9(1) <= Delay51_1_reg_9(0);
  Delay51_out_10 <= Delay51_1_reg_9(1);
  Delay51_1_reg_next_10(0) <= dqxy_phase_voltage_per_switching_state_10_1;
  Delay51_1_reg_next_10(1) <= Delay51_1_reg_10(0);
  Delay51_out_11 <= Delay51_1_reg_10(1);
  Delay51_1_reg_next_11(0) <= dqxy_phase_voltage_per_switching_state_11_1;
  Delay51_1_reg_next_11(1) <= Delay51_1_reg_11(0);
  Delay51_out_12 <= Delay51_1_reg_11(1);
  Delay51_1_reg_next_12(0) <= dqxy_phase_voltage_per_switching_state_12_1;
  Delay51_1_reg_next_12(1) <= Delay51_1_reg_12(0);
  Delay51_out_13 <= Delay51_1_reg_12(1);
  Delay51_1_reg_next_13(0) <= dqxy_phase_voltage_per_switching_state_13_1;
  Delay51_1_reg_next_13(1) <= Delay51_1_reg_13(0);
  Delay51_out_14 <= Delay51_1_reg_13(1);
  Delay51_1_reg_next_14(0) <= dqxy_phase_voltage_per_switching_state_14_1;
  Delay51_1_reg_next_14(1) <= Delay51_1_reg_14(0);
  Delay51_out_15 <= Delay51_1_reg_14(1);
  Delay51_1_reg_next_15(0) <= dqxy_phase_voltage_per_switching_state_15_1;
  Delay51_1_reg_next_15(1) <= Delay51_1_reg_15(0);
  Delay51_out_16 <= Delay51_1_reg_15(1);
  Delay51_1_reg_next_16(0) <= dqxy_phase_voltage_per_switching_state_16_1;
  Delay51_1_reg_next_16(1) <= Delay51_1_reg_16(0);
  Delay51_out_17 <= Delay51_1_reg_16(1);
  Delay51_1_reg_next_17(0) <= dqxy_phase_voltage_per_switching_state_17_1;
  Delay51_1_reg_next_17(1) <= Delay51_1_reg_17(0);
  Delay51_out_18 <= Delay51_1_reg_17(1);
  Delay51_1_reg_next_18(0) <= dqxy_phase_voltage_per_switching_state_18_1;
  Delay51_1_reg_next_18(1) <= Delay51_1_reg_18(0);
  Delay51_out_19 <= Delay51_1_reg_18(1);
  Delay51_1_reg_next_19(0) <= dqxy_phase_voltage_per_switching_state_19_1;
  Delay51_1_reg_next_19(1) <= Delay51_1_reg_19(0);
  Delay51_out_20 <= Delay51_1_reg_19(1);
  Delay51_1_reg_next_20(0) <= dqxy_phase_voltage_per_switching_state_20_1;
  Delay51_1_reg_next_20(1) <= Delay51_1_reg_20(0);
  Delay51_out_21 <= Delay51_1_reg_20(1);
  Delay51_1_reg_next_21(0) <= dqxy_phase_voltage_per_switching_state_21_1;
  Delay51_1_reg_next_21(1) <= Delay51_1_reg_21(0);
  Delay51_out_22 <= Delay51_1_reg_21(1);
  Delay51_1_reg_next_22(0) <= dqxy_phase_voltage_per_switching_state_22_1;
  Delay51_1_reg_next_22(1) <= Delay51_1_reg_22(0);
  Delay51_out_23 <= Delay51_1_reg_22(1);
  Delay51_1_reg_next_23(0) <= dqxy_phase_voltage_per_switching_state_23_1;
  Delay51_1_reg_next_23(1) <= Delay51_1_reg_23(0);
  Delay51_out_24 <= Delay51_1_reg_23(1);
  Delay51_1_reg_next_24(0) <= dqxy_phase_voltage_per_switching_state_24_1;
  Delay51_1_reg_next_24(1) <= Delay51_1_reg_24(0);
  Delay51_out_25 <= Delay51_1_reg_24(1);
  Delay51_1_reg_next_25(0) <= dqxy_phase_voltage_per_switching_state_25_1;
  Delay51_1_reg_next_25(1) <= Delay51_1_reg_25(0);
  Delay51_out_26 <= Delay51_1_reg_25(1);
  Delay51_1_reg_next_26(0) <= dqxy_phase_voltage_per_switching_state_26_1;
  Delay51_1_reg_next_26(1) <= Delay51_1_reg_26(0);
  Delay51_out_27 <= Delay51_1_reg_26(1);
  Delay51_1_reg_next_27(0) <= dqxy_phase_voltage_per_switching_state_27_1;
  Delay51_1_reg_next_27(1) <= Delay51_1_reg_27(0);
  Delay51_out_28 <= Delay51_1_reg_27(1);
  Delay51_1_reg_next_28(0) <= dqxy_phase_voltage_per_switching_state_28_1;
  Delay51_1_reg_next_28(1) <= Delay51_1_reg_28(0);
  Delay51_out_29 <= Delay51_1_reg_28(1);
  Delay51_1_reg_next_29(0) <= dqxy_phase_voltage_per_switching_state_29_1;
  Delay51_1_reg_next_29(1) <= Delay51_1_reg_29(0);
  Delay51_out_30 <= Delay51_1_reg_29(1);
  Delay51_1_reg_next_30(0) <= dqxy_phase_voltage_per_switching_state_30_1;
  Delay51_1_reg_next_30(1) <= Delay51_1_reg_30(0);
  Delay51_out_31 <= Delay51_1_reg_30(1);
  Delay51_1_reg_next_31(0) <= dqxy_phase_voltage_per_switching_state_31_1;
  Delay51_1_reg_next_31(1) <= Delay51_1_reg_31(0);
  Delay51_out_32 <= Delay51_1_reg_31(1);

  Delay135_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay135_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay135_out1 <= Switch_on90_out1;
      END IF;
    END IF;
  END PROCESS Delay135_process;


  
  Switch_on90_out1 <= Delay135_out1 WHEN switch_compare_1 = '0' ELSE
      Delay51_out_1;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_1_1 <= signed(dqxy_phase_voltage_per_switching_state_1);

  Delay134_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay134_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay134_out1 <= Switch_on89_out1;
      END IF;
    END IF;
  END PROCESS Delay134_process;


  
  Switch_on89_out1 <= Delay134_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay51_out_2;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_2_1 <= signed(dqxy_phase_voltage_per_switching_state_2);

  Delay133_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay133_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay133_out1 <= Switch_on88_out1;
      END IF;
    END IF;
  END PROCESS Delay133_process;


  
  Switch_on88_out1 <= Delay133_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay51_out_3;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_3_1 <= signed(dqxy_phase_voltage_per_switching_state_3);

  Delay132_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay132_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay132_out1 <= Switch_on87_out1;
      END IF;
    END IF;
  END PROCESS Delay132_process;


  
  Switch_on87_out1 <= Delay132_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay51_out_4;

  
  switch_compare_1_4 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_4_1 <= signed(dqxy_phase_voltage_per_switching_state_4);

  Delay131_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay131_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay131_out1 <= Switch_on86_out1;
      END IF;
    END IF;
  END PROCESS Delay131_process;


  
  Switch_on86_out1 <= Delay131_out1 WHEN switch_compare_1_4 = '0' ELSE
      Delay51_out_5;

  
  switch_compare_1_5 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_5_1 <= signed(dqxy_phase_voltage_per_switching_state_5);

  Delay130_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay130_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay130_out1 <= Switch_on85_out1;
      END IF;
    END IF;
  END PROCESS Delay130_process;


  
  Switch_on85_out1 <= Delay130_out1 WHEN switch_compare_1_5 = '0' ELSE
      Delay51_out_6;

  
  switch_compare_1_6 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_6_1 <= signed(dqxy_phase_voltage_per_switching_state_6);

  Delay129_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay129_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay129_out1 <= Switch_on84_out1;
      END IF;
    END IF;
  END PROCESS Delay129_process;


  
  Switch_on84_out1 <= Delay129_out1 WHEN switch_compare_1_6 = '0' ELSE
      Delay51_out_7;

  
  switch_compare_1_7 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_7_1 <= signed(dqxy_phase_voltage_per_switching_state_7);

  Delay128_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay128_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay128_out1 <= Switch_on83_out1;
      END IF;
    END IF;
  END PROCESS Delay128_process;


  
  Switch_on83_out1 <= Delay128_out1 WHEN switch_compare_1_7 = '0' ELSE
      Delay51_out_8;

  
  switch_compare_1_8 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_8_1 <= signed(dqxy_phase_voltage_per_switching_state_8);

  Delay127_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay127_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay127_out1 <= Switch_on82_out1;
      END IF;
    END IF;
  END PROCESS Delay127_process;


  
  Switch_on82_out1 <= Delay127_out1 WHEN switch_compare_1_8 = '0' ELSE
      Delay51_out_9;

  
  switch_compare_1_9 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_9_1 <= signed(dqxy_phase_voltage_per_switching_state_9);

  Delay126_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay126_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay126_out1 <= Switch_on81_out1;
      END IF;
    END IF;
  END PROCESS Delay126_process;


  
  Switch_on81_out1 <= Delay126_out1 WHEN switch_compare_1_9 = '0' ELSE
      Delay51_out_10;

  
  switch_compare_1_10 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_10_1 <= signed(dqxy_phase_voltage_per_switching_state_10);

  Delay125_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay125_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay125_out1 <= Switch_on80_out1;
      END IF;
    END IF;
  END PROCESS Delay125_process;


  
  Switch_on80_out1 <= Delay125_out1 WHEN switch_compare_1_10 = '0' ELSE
      Delay51_out_11;

  
  switch_compare_1_11 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_11_1 <= signed(dqxy_phase_voltage_per_switching_state_11);

  Delay124_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay124_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay124_out1 <= Switch_on79_out1;
      END IF;
    END IF;
  END PROCESS Delay124_process;


  
  Switch_on79_out1 <= Delay124_out1 WHEN switch_compare_1_11 = '0' ELSE
      Delay51_out_12;

  
  switch_compare_1_12 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_12_1 <= signed(dqxy_phase_voltage_per_switching_state_12);

  Delay123_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay123_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay123_out1 <= Switch_on78_out1;
      END IF;
    END IF;
  END PROCESS Delay123_process;


  
  Switch_on78_out1 <= Delay123_out1 WHEN switch_compare_1_12 = '0' ELSE
      Delay51_out_13;

  
  switch_compare_1_13 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_13_1 <= signed(dqxy_phase_voltage_per_switching_state_13);

  Delay122_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay122_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay122_out1 <= Switch_on77_out1;
      END IF;
    END IF;
  END PROCESS Delay122_process;


  
  Switch_on77_out1 <= Delay122_out1 WHEN switch_compare_1_13 = '0' ELSE
      Delay51_out_14;

  
  switch_compare_1_14 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_14_1 <= signed(dqxy_phase_voltage_per_switching_state_14);

  Delay121_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay121_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay121_out1 <= Switch_on76_out1;
      END IF;
    END IF;
  END PROCESS Delay121_process;


  
  Switch_on76_out1 <= Delay121_out1 WHEN switch_compare_1_14 = '0' ELSE
      Delay51_out_15;

  
  switch_compare_1_15 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_15_1 <= signed(dqxy_phase_voltage_per_switching_state_15);

  Delay120_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay120_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay120_out1 <= Switch_on75_out1;
      END IF;
    END IF;
  END PROCESS Delay120_process;


  
  Switch_on75_out1 <= Delay120_out1 WHEN switch_compare_1_15 = '0' ELSE
      Delay51_out_16;

  
  switch_compare_1_16 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_16_1 <= signed(dqxy_phase_voltage_per_switching_state_16);

  Delay119_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay119_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay119_out1 <= Switch_on74_out1;
      END IF;
    END IF;
  END PROCESS Delay119_process;


  
  Switch_on74_out1 <= Delay119_out1 WHEN switch_compare_1_16 = '0' ELSE
      Delay51_out_17;

  
  switch_compare_1_17 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_17_1 <= signed(dqxy_phase_voltage_per_switching_state_17);

  Delay118_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay118_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay118_out1 <= Switch_on73_out1;
      END IF;
    END IF;
  END PROCESS Delay118_process;


  
  Switch_on73_out1 <= Delay118_out1 WHEN switch_compare_1_17 = '0' ELSE
      Delay51_out_18;

  
  switch_compare_1_18 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_18_1 <= signed(dqxy_phase_voltage_per_switching_state_18);

  Delay117_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay117_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay117_out1 <= Switch_on72_out1;
      END IF;
    END IF;
  END PROCESS Delay117_process;


  
  Switch_on72_out1 <= Delay117_out1 WHEN switch_compare_1_18 = '0' ELSE
      Delay51_out_19;

  
  switch_compare_1_19 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_19_1 <= signed(dqxy_phase_voltage_per_switching_state_19);

  Delay116_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay116_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay116_out1 <= Switch_on71_out1;
      END IF;
    END IF;
  END PROCESS Delay116_process;


  
  Switch_on71_out1 <= Delay116_out1 WHEN switch_compare_1_19 = '0' ELSE
      Delay51_out_20;

  
  switch_compare_1_20 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_20_1 <= signed(dqxy_phase_voltage_per_switching_state_20);

  Delay115_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay115_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay115_out1 <= Switch_on70_out1;
      END IF;
    END IF;
  END PROCESS Delay115_process;


  
  Switch_on70_out1 <= Delay115_out1 WHEN switch_compare_1_20 = '0' ELSE
      Delay51_out_21;

  
  switch_compare_1_21 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_21_1 <= signed(dqxy_phase_voltage_per_switching_state_21);

  Delay114_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay114_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay114_out1 <= Switch_on69_out1;
      END IF;
    END IF;
  END PROCESS Delay114_process;


  
  Switch_on69_out1 <= Delay114_out1 WHEN switch_compare_1_21 = '0' ELSE
      Delay51_out_22;

  
  switch_compare_1_22 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_22_1 <= signed(dqxy_phase_voltage_per_switching_state_22);

  Delay113_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay113_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay113_out1 <= Switch_on68_out1;
      END IF;
    END IF;
  END PROCESS Delay113_process;


  
  Switch_on68_out1 <= Delay113_out1 WHEN switch_compare_1_22 = '0' ELSE
      Delay51_out_23;

  
  switch_compare_1_23 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_23_1 <= signed(dqxy_phase_voltage_per_switching_state_23);

  Delay112_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay112_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay112_out1 <= Switch_on67_out1;
      END IF;
    END IF;
  END PROCESS Delay112_process;


  
  Switch_on67_out1 <= Delay112_out1 WHEN switch_compare_1_23 = '0' ELSE
      Delay51_out_24;

  
  switch_compare_1_24 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_24_1 <= signed(dqxy_phase_voltage_per_switching_state_24);

  Delay111_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay111_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay111_out1 <= Switch_on66_out1;
      END IF;
    END IF;
  END PROCESS Delay111_process;


  
  Switch_on66_out1 <= Delay111_out1 WHEN switch_compare_1_24 = '0' ELSE
      Delay51_out_25;

  
  switch_compare_1_25 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_25_1 <= signed(dqxy_phase_voltage_per_switching_state_25);

  Delay110_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay110_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay110_out1 <= Switch_on65_out1;
      END IF;
    END IF;
  END PROCESS Delay110_process;


  
  Switch_on65_out1 <= Delay110_out1 WHEN switch_compare_1_25 = '0' ELSE
      Delay51_out_26;

  
  switch_compare_1_26 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_26_1 <= signed(dqxy_phase_voltage_per_switching_state_26);

  Delay109_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay109_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay109_out1 <= Switch_on64_out1;
      END IF;
    END IF;
  END PROCESS Delay109_process;


  
  Switch_on64_out1 <= Delay109_out1 WHEN switch_compare_1_26 = '0' ELSE
      Delay51_out_27;

  
  switch_compare_1_27 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_27_1 <= signed(dqxy_phase_voltage_per_switching_state_27);

  Delay108_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay108_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay108_out1 <= Switch_on63_out1;
      END IF;
    END IF;
  END PROCESS Delay108_process;


  
  Switch_on63_out1 <= Delay108_out1 WHEN switch_compare_1_27 = '0' ELSE
      Delay51_out_28;

  
  switch_compare_1_28 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_28_1 <= signed(dqxy_phase_voltage_per_switching_state_28);

  Delay107_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay107_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay107_out1 <= Switch_on62_out1;
      END IF;
    END IF;
  END PROCESS Delay107_process;


  
  Switch_on62_out1 <= Delay107_out1 WHEN switch_compare_1_28 = '0' ELSE
      Delay51_out_29;

  
  switch_compare_1_29 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_29_1 <= signed(dqxy_phase_voltage_per_switching_state_29);

  Delay106_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay106_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay106_out1 <= Switch_on61_out1;
      END IF;
    END IF;
  END PROCESS Delay106_process;


  
  Switch_on61_out1 <= Delay106_out1 WHEN switch_compare_1_29 = '0' ELSE
      Delay51_out_30;

  
  switch_compare_1_30 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_30_1 <= signed(dqxy_phase_voltage_per_switching_state_30);

  Delay105_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay105_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay105_out1 <= Switch_on60_out1;
      END IF;
    END IF;
  END PROCESS Delay105_process;


  
  Switch_on60_out1 <= Delay105_out1 WHEN switch_compare_1_30 = '0' ELSE
      Delay51_out_31;

  
  switch_compare_1_31 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_31_1 <= signed(dqxy_phase_voltage_per_switching_state_31);

  Delay104_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay104_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay104_out1 <= Switch_on59_out1;
      END IF;
    END IF;
  END PROCESS Delay104_process;


  
  Switch_on59_out1 <= Delay104_out1 WHEN switch_compare_1_31 = '0' ELSE
      Delay51_out_32;

  
  switch_compare_1_32 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay45_reg(0) <= X"00000000";
        Delay45_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay45_reg(0) <= Delay45_reg_next(0);
        Delay45_reg(1) <= Delay45_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay45_process;

  Delay45_out1 <= Delay45_reg(1);
  Delay45_reg_next(0) <= SampleTime_div_Ld_AXI;
  Delay45_reg_next(1) <= Delay45_reg(0);

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay20_out1 <= Switch_on21_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  
  Switch_on21_out1 <= Delay20_out1 WHEN switch_compare_1_32 = '0' ELSE
      Delay45_out1;

  
  switch_compare_1_33 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay44_reg(0) <= X"00000000";
        Delay44_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay44_reg(0) <= Delay44_reg_next(0);
        Delay44_reg(1) <= Delay44_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay44_process;

  Delay44_out1 <= Delay44_reg(1);
  Delay44_reg_next(0) <= SampleTime_div_Lq_AXI;
  Delay44_reg_next(1) <= Delay44_reg(0);

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay19_out1 <= Switch_on20_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  Switch_on20_out1 <= Delay19_out1 WHEN switch_compare_1_33 = '0' ELSE
      Delay44_out1;

  
  switch_compare_1_34 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay43_reg(0) <= X"00000000";
        Delay43_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay43_reg(0) <= Delay43_reg_next(0);
        Delay43_reg(1) <= Delay43_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay43_process;

  Delay43_out1 <= Delay43_reg(1);
  Delay43_reg_next(0) <= SampleTime_div_Lx_AXI;
  Delay43_reg_next(1) <= Delay43_reg(0);

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay18_out1 <= Switch_on19_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Switch_on19_out1 <= Delay18_out1 WHEN switch_compare_1_34 = '0' ELSE
      Delay43_out1;

  
  switch_compare_1_35 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay42_reg(0) <= X"00000000";
        Delay42_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay42_reg(0) <= Delay42_reg_next(0);
        Delay42_reg(1) <= Delay42_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay42_process;

  Delay42_out1 <= Delay42_reg(1);
  Delay42_reg_next(0) <= SampleTime_div_Ly_AXI;
  Delay42_reg_next(1) <= Delay42_reg(0);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay17_out1 <= Switch_on18_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  Switch_on18_out1 <= Delay17_out1 WHEN switch_compare_1_35 = '0' ELSE
      Delay42_out1;

  
  switch_compare_1_36 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  id_k_1_signed <= signed(id_k_1);

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_reg(0) <= to_signed(16#00000#, 18);
        Delay37_reg(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay37_reg(0) <= Delay37_reg_next(0);
        Delay37_reg(1) <= Delay37_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay37_process;

  Delay37_out1 <= Delay37_reg(1);
  Delay37_reg_next(0) <= id_k_1_signed;
  Delay37_reg_next(1) <= Delay37_reg(0);

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay16_out1 <= Switch_on17_out1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Switch_on17_out1 <= Delay16_out1 WHEN switch_compare_1_36 = '0' ELSE
      Delay37_out1;

  
  switch_compare_1_37 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  iq_k_1_signed <= signed(iq_k_1);

  Delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay36_reg(0) <= to_signed(16#00000#, 18);
        Delay36_reg(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay36_reg(0) <= Delay36_reg_next(0);
        Delay36_reg(1) <= Delay36_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay36_process;

  Delay36_out1 <= Delay36_reg(1);
  Delay36_reg_next(0) <= iq_k_1_signed;
  Delay36_reg_next(1) <= Delay36_reg(0);

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay15_out1 <= Switch_on16_out1;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  
  Switch_on16_out1 <= Delay15_out1 WHEN switch_compare_1_37 = '0' ELSE
      Delay36_out1;

  
  switch_compare_1_38 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  ix_k_1_signed <= signed(ix_k_1);

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_reg(0) <= to_signed(16#00000#, 18);
        Delay35_reg(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay35_reg(0) <= Delay35_reg_next(0);
        Delay35_reg(1) <= Delay35_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay35_process;

  Delay35_out1 <= Delay35_reg(1);
  Delay35_reg_next(0) <= ix_k_1_signed;
  Delay35_reg_next(1) <= Delay35_reg(0);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch_on15_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch_on15_out1 <= Delay14_out1 WHEN switch_compare_1_38 = '0' ELSE
      Delay35_out1;

  
  switch_compare_1_39 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  iy_k_1_signed <= signed(iy_k_1);

  Delay34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay34_reg(0) <= to_signed(16#00000#, 18);
        Delay34_reg(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay34_reg(0) <= Delay34_reg_next(0);
        Delay34_reg(1) <= Delay34_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay34_process;

  Delay34_out1 <= Delay34_reg(1);
  Delay34_reg_next(0) <= iy_k_1_signed;
  Delay34_reg_next(1) <= Delay34_reg(0);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch_on13_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch_on13_out1 <= Delay13_out1 WHEN switch_compare_1_39 = '0' ELSE
      Delay34_out1;

  
  switch_compare_1_40 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_reg(0) <= X"00000000";
        Delay32_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay32_reg(0) <= Delay32_reg_next(0);
        Delay32_reg(1) <= Delay32_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay32_process;

  Delay32_out1 <= Delay32_reg(1);
  Delay32_reg_next(0) <= Rs_AXI;
  Delay32_reg_next(1) <= Delay32_reg(0);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay12_out1 <= Switch_on12_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  Switch_on12_out1 <= Delay12_out1 WHEN switch_compare_1_40 = '0' ELSE
      Delay32_out1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg(0) <= '0';
        Delay_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay_reg(0) <= Delay_reg_next(0);
        Delay_reg(1) <= Delay_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);
  Delay_reg_next(0) <= current_valid_in;
  Delay_reg_next(1) <= Delay_reg(0);

  
  switch_compare_1_41 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  omega_m_measured_signed <= signed(omega_m_measured);

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_reg(0) <= to_signed(16#000000#, 24);
        Delay31_reg(1) <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay31_reg(0) <= Delay31_reg_next(0);
        Delay31_reg(1) <= Delay31_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay31_process;

  Delay31_out1 <= Delay31_reg(1);
  Delay31_reg_next(0) <= omega_m_measured_signed;
  Delay31_reg_next(1) <= Delay31_reg(0);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay11_out1 <= Switch_on11_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  Switch_on11_out1 <= Delay11_out1 WHEN switch_compare_1_41 = '0' ELSE
      Delay31_out1;

  
  switch_compare_1_42 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_reg(0) <= X"00000000";
        Delay30_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay30_reg(0) <= Delay30_reg_next(0);
        Delay30_reg(1) <= Delay30_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay30_process;

  Delay30_out1 <= Delay30_reg(1);
  Delay30_reg_next(0) <= pole_pairs_AXI;
  Delay30_reg_next(1) <= Delay30_reg(0);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch_on4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_on4_out1 <= Delay4_out1 WHEN switch_compare_1_42 = '0' ELSE
      Delay30_out1;

  omega_el_1 <= omega_el;

  
  switch_compare_1_43 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_reg(0) <= X"00000000";
        Delay29_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay29_reg(0) <= Delay29_reg_next(0);
        Delay29_reg(1) <= Delay29_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay29_process;

  Delay29_out1 <= Delay29_reg(1);
  Delay29_reg_next(0) <= Lq_AXI;
  Delay29_reg_next(1) <= Delay29_reg(0);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1 <= Switch_on10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch_on10_out1 <= Delay10_out1 WHEN switch_compare_1_43 = '0' ELSE
      Delay29_out1;

  
  switch_compare_1_44 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_reg(0) <= X"00000000";
        Delay28_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay28_reg(0) <= Delay28_reg_next(0);
        Delay28_reg(1) <= Delay28_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay28_process;

  Delay28_out1 <= Delay28_reg(1);
  Delay28_reg_next(0) <= Ld_AXI;
  Delay28_reg_next(1) <= Delay28_reg(0);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch_on9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch_on9_out1 <= Delay9_out1 WHEN switch_compare_1_44 = '0' ELSE
      Delay28_out1;

  
  switch_compare_1_45 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_reg(0) <= X"00000000";
        Delay27_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay27_reg(0) <= Delay27_reg_next(0);
        Delay27_reg(1) <= Delay27_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay27_process;

  Delay27_out1 <= Delay27_reg(1);
  Delay27_reg_next(0) <= psiPM_AXI;
  Delay27_reg_next(1) <= Delay27_reg(0);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch_on8_out1 <= Delay8_out1 WHEN switch_compare_1_45 = '0' ELSE
      Delay27_out1;

  
  switch_compare_1_46 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay26_reg(0) <= X"00000000";
        Delay26_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay26_reg(0) <= Delay26_reg_next(0);
        Delay26_reg(1) <= Delay26_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay26_process;

  Delay26_out1 <= Delay26_reg(1);
  Delay26_reg_next(0) <= id_ref_AXI;
  Delay26_reg_next(1) <= Delay26_reg(0);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_on3_out1 <= Delay3_out1 WHEN switch_compare_1_46 = '0' ELSE
      Delay26_out1;

  
  switch_compare_1_47 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_reg(0) <= X"00000000";
        Delay25_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay25_reg(0) <= Delay25_reg_next(0);
        Delay25_reg(1) <= Delay25_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay25_process;

  Delay25_out1 <= Delay25_reg(1);
  Delay25_reg_next(0) <= iq_ref_AXI;
  Delay25_reg_next(1) <= Delay25_reg(0);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_on2_out1 <= Delay2_out1 WHEN switch_compare_1_47 = '0' ELSE
      Delay25_out1;

  
  switch_compare_1_48 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_reg(0) <= X"00000000";
        Delay24_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay24_reg(0) <= Delay24_reg_next(0);
        Delay24_reg(1) <= Delay24_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay24_process;

  Delay24_out1 <= Delay24_reg(1);
  Delay24_reg_next(0) <= ix_ref_AXI;
  Delay24_reg_next(1) <= Delay24_reg(0);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1_48 = '0' ELSE
      Delay24_out1;

  
  switch_compare_1_49 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_reg(0) <= X"00000000";
        Delay23_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay23_reg(0) <= Delay23_reg_next(0);
        Delay23_reg(1) <= Delay23_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay23_process;

  Delay23_out1 <= Delay23_reg(1);
  Delay23_reg_next(0) <= iy_ref_AXI;
  Delay23_reg_next(1) <= Delay23_reg(0);

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay33_out1 <= Switch_on14_out1;
      END IF;
    END IF;
  END PROCESS Delay33_process;


  
  Switch_on14_out1 <= Delay33_out1 WHEN switch_compare_1_49 = '0' ELSE
      Delay23_out1;

  fc_9 <= signed(fc_8);

  Delay57_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay57_1_reg(0) <= to_signed(16#00000#, 20);
        Delay57_1_reg(1) <= to_signed(16#00000#, 20);
        Delay57_1_reg_1(0) <= to_signed(16#00000#, 20);
        Delay57_1_reg_1(1) <= to_signed(16#00000#, 20);
        Delay57_1_reg_2(0) <= to_signed(16#00000#, 20);
        Delay57_1_reg_2(1) <= to_signed(16#00000#, 20);
        Delay57_1_reg_3(0) <= to_signed(16#00000#, 20);
        Delay57_1_reg_3(1) <= to_signed(16#00000#, 20);
        Delay57_1_reg_4(0) <= to_signed(16#00000#, 20);
        Delay57_1_reg_4(1) <= to_signed(16#00000#, 20);
        Delay57_1_reg_5(0) <= to_signed(16#00000#, 20);
        Delay57_1_reg_5(1) <= to_signed(16#00000#, 20);
        Delay57_1_reg_6(0) <= to_signed(16#00000#, 20);
        Delay57_1_reg_6(1) <= to_signed(16#00000#, 20);
        Delay57_1_reg_7(0) <= to_signed(16#00000#, 20);
        Delay57_1_reg_7(1) <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        Delay57_1_reg(0) <= Delay57_1_reg_next(0);
        Delay57_1_reg(1) <= Delay57_1_reg_next(1);
        Delay57_1_reg_1(0) <= Delay57_1_reg_next_1(0);
        Delay57_1_reg_1(1) <= Delay57_1_reg_next_1(1);
        Delay57_1_reg_2(0) <= Delay57_1_reg_next_2(0);
        Delay57_1_reg_2(1) <= Delay57_1_reg_next_2(1);
        Delay57_1_reg_3(0) <= Delay57_1_reg_next_3(0);
        Delay57_1_reg_3(1) <= Delay57_1_reg_next_3(1);
        Delay57_1_reg_4(0) <= Delay57_1_reg_next_4(0);
        Delay57_1_reg_4(1) <= Delay57_1_reg_next_4(1);
        Delay57_1_reg_5(0) <= Delay57_1_reg_next_5(0);
        Delay57_1_reg_5(1) <= Delay57_1_reg_next_5(1);
        Delay57_1_reg_6(0) <= Delay57_1_reg_next_6(0);
        Delay57_1_reg_6(1) <= Delay57_1_reg_next_6(1);
        Delay57_1_reg_7(0) <= Delay57_1_reg_next_7(0);
        Delay57_1_reg_7(1) <= Delay57_1_reg_next_7(1);
      END IF;
    END IF;
  END PROCESS Delay57_1_process;

  Delay57_1_reg_next(0) <= fc_9;
  Delay57_1_reg_next(1) <= Delay57_1_reg(0);
  Delay57_out_1 <= Delay57_1_reg(1);
  Delay57_1_reg_next_1(0) <= fc_10;
  Delay57_1_reg_next_1(1) <= Delay57_1_reg_1(0);
  Delay57_out_2 <= Delay57_1_reg_1(1);
  Delay57_1_reg_next_2(0) <= fc_11;
  Delay57_1_reg_next_2(1) <= Delay57_1_reg_2(0);
  Delay57_out_3 <= Delay57_1_reg_2(1);
  Delay57_1_reg_next_3(0) <= fc_12;
  Delay57_1_reg_next_3(1) <= Delay57_1_reg_3(0);
  Delay57_out_4 <= Delay57_1_reg_3(1);
  Delay57_1_reg_next_4(0) <= fc_13;
  Delay57_1_reg_next_4(1) <= Delay57_1_reg_4(0);
  Delay57_out_5 <= Delay57_1_reg_4(1);
  Delay57_1_reg_next_5(0) <= fc_14;
  Delay57_1_reg_next_5(1) <= Delay57_1_reg_5(0);
  Delay57_out_6 <= Delay57_1_reg_5(1);
  Delay57_1_reg_next_6(0) <= fc_15;
  Delay57_1_reg_next_6(1) <= Delay57_1_reg_6(0);
  Delay57_out_7 <= Delay57_1_reg_6(1);
  Delay57_1_reg_next_7(0) <= fc_16;
  Delay57_1_reg_next_7(1) <= Delay57_1_reg_7(0);
  Delay57_out_8 <= Delay57_1_reg_7(1);

  J_0 <= std_logic_vector(Delay57_out_1);

  fc_10 <= signed(fc_17);

  J_1 <= std_logic_vector(Delay57_out_2);

  fc_11 <= signed(fc_18);

  J_2 <= std_logic_vector(Delay57_out_3);

  fc_12 <= signed(fc_19);

  J_3 <= std_logic_vector(Delay57_out_4);

  fc_13 <= signed(fc_20);

  J_4 <= std_logic_vector(Delay57_out_5);

  fc_14 <= signed(fc_21);

  J_5 <= std_logic_vector(Delay57_out_6);

  fc_15 <= signed(fc_22);

  J_6 <= std_logic_vector(Delay57_out_7);

  fc_16 <= signed(fc_23);

  J_7 <= std_logic_vector(Delay57_out_8);

  ce_out <= clk_enable;

END rtl;

