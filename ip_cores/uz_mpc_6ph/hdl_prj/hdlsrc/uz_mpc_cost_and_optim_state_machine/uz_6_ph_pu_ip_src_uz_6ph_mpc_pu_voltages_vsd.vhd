-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_mpc_cost_and_optim_state_machine\uz_6_ph_pu_ip_src_uz_6ph_mpc_pu_voltages_vsd.vhd
-- Created: 2022-09-29 16:23:08
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- pu_ud                         ce_out        1e-08
-- pu_uq                         ce_out        1e-08
-- pu_ux                         ce_out        1e-08
-- pu_uy                         ce_out        1e-08
-- pu_ud_AXI                     ce_out        1e-08
-- pu_uq_AXI                     ce_out        1e-08
-- pu_ux_AXI                     ce_out        1e-08
-- pu_uy_AXI                     ce_out        1e-08
-- voltages_done                 ce_out        1e-08
-- index_voltage                 ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_6_ph_pu_ip_src_uz_6ph_mpc_pu_voltages_vsd
-- Source Path: uz_mpc_cost_and_optim_state_machine/uz_6ph_mpc_pu_voltages_vsd
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_6_ph_pu_ip_src_uz_6ph_mpc_pu_voltages_vsd_pkg.ALL;

ENTITY uz_6_ph_pu_ip_src_uz_6ph_mpc_pu_voltages_vsd IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        v_DC_pu                           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        sin_angle                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        cos_angle                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        index                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        index_select                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        index_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        trigger_adc                       :   IN    std_logic;
        trigger_prediction_done           :   IN    std_logic;
        trigger_delay_comp_done           :   IN    std_logic;
        last_opt_index                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ce_out                            :   OUT   std_logic;
        pu_ud                             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_uq                             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_ux                             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_uy                             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_ud_AXI                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_uq_AXI                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_ux_AXI                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        pu_uy_AXI                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        voltages_done                     :   OUT   std_logic;
        index_voltage                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END uz_6_ph_pu_ip_src_uz_6ph_mpc_pu_voltages_vsd;


ARCHITECTURE rtl OF uz_6_ph_pu_ip_src_uz_6ph_mpc_pu_voltages_vsd IS

  -- Component Declarations
  COMPONENT uz_6_ph_pu_ip_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_6_ph_pu_ip_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Set                             :   IN    std_logic;
          Reset_1                         :   IN    std_logic;
          Q                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_6_ph_pu_ip_src_finite_control_set
    PORT( v_DC_pu                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          sin_angle                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          cos_angle                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          index                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          pu_ud                           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
          pu_uq                           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
          pu_ux                           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
          pu_uy                           :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En24
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_6_ph_pu_ip_src_Detect_Rise_Positive
    USE ENTITY work.uz_6_ph_pu_ip_src_Detect_Rise_Positive(rtl);

  FOR ALL : uz_6_ph_pu_ip_src_Subsystem
    USE ENTITY work.uz_6_ph_pu_ip_src_Subsystem(rtl);

  FOR ALL : uz_6_ph_pu_ip_src_finite_control_set
    USE ENTITY work.uz_6_ph_pu_ip_src_finite_control_set(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL v_DC_pu_signed                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay9_reg                       : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay9_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch27_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay56_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL sin_angle_signed                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay10_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay10_out1                     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Switch1_out1                     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay2_out1                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL cos_angle_signed                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay11_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay11_out1                     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Switch2_out1                     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay3_out1                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay21_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay21_out1                     : std_logic;
  SIGNAL Q                                : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Delay16_ctrl_const_out           : std_logic;
  SIGNAL Delay16_ctrl_delay_out           : std_logic;
  SIGNAL Delay16_Initial_Val_out          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay15_ctrl_const_out           : std_logic;
  SIGNAL Delay15_ctrl_delay_reg           : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay15_ctrl_delay_out           : std_logic;
  SIGNAL Delay15_Initial_Val_out          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL index_select_unsigned            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Delay15_reg                      : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay15_out                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay15_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch5_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay16_out                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay16_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Delay22_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay22_out1                     : std_logic;
  SIGNAL trigger                          : std_logic;
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL index_AXI_unsigned               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay13_reg                      : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay13_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch4_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay14_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL index_unsigned                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay12_reg                      : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay12_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch3_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay8_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL Delay23_ctrl_const_out           : std_logic;
  SIGNAL Delay23_ctrl_delay_out           : std_logic;
  SIGNAL Delay23_Initial_Val_out          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL last_opt_index_unsigned          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay25_reg                      : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay25_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch7_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay23_out                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay23_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch6_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Saturation_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL pu_ud_1                          : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL pu_uq_1                          : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL pu_ux_1                          : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL pu_uy_1                          : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL pu_ud_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL reduced_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL pu_ud_tmp                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_uq_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL reduced_reg_1                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL pu_uq_tmp                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_ux_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL reduced_reg_2                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL pu_ux_tmp                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL pu_uy_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL reduced_reg_3                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL pu_uy_tmp                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay24_reg                      : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay24_out1                     : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  -- catch index counter value 65
  -- 
  -- index is triggered at every iteration of the prediction
  -- 
  -- index is triggered at every iteration of the prediciton
  -- 
  -- 0=AXI 1=PL
  -- 
  -- mpc state machine

  u_Detect_Rise_Positive : uz_6_ph_pu_ip_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay_out1,
              Y => Detect_Rise_Positive_out1
              );

  u_Subsystem : uz_6_ph_pu_ip_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Set => Detect_Rise_Positive_out1,
              Reset_1 => Delay21_out1,
              Q => Q
              );

  u_finite_control_set : uz_6_ph_pu_ip_src_finite_control_set
    PORT MAP( v_DC_pu => std_logic_vector(Switch27_out1),  -- sfix18_En15
              sin_angle => std_logic_vector(Switch1_out1),  -- sfix18_En16
              cos_angle => std_logic_vector(Switch2_out1),  -- sfix18_En16
              index => std_logic_vector(Saturation_out1),  -- uint32
              pu_ud => pu_ud_1,  -- sfix27_En24
              pu_uq => pu_uq_1,  -- sfix27_En24
              pu_ux => pu_ux_1,  -- sfix27_En24
              pu_uy => pu_uy_1  -- sfix27_En24
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_reg(0) <= trigger_adc;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  
  switch_compare_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  v_DC_pu_signed <= signed(v_DC_pu);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay9_reg(0) <= v_DC_pu_signed;
        Delay9_reg(1) <= Delay9_reg(0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(1);

  Delay56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay56_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay56_out1 <= Switch27_out1;
      END IF;
    END IF;
  END PROCESS Delay56_process;


  
  Switch27_out1 <= Delay56_out1 WHEN switch_compare_1 = '0' ELSE
      Delay9_out1;

  
  switch_compare_1_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  sin_angle_signed <= signed(sin_angle);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay10_reg(0) <= sin_angle_signed;
        Delay10_reg(1) <= Delay10_reg(0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(1);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch1_out1 <= Delay2_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay10_out1;

  
  switch_compare_1_2 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  cos_angle_signed <= signed(cos_angle);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay11_reg(0) <= cos_angle_signed;
        Delay11_reg(1) <= Delay11_reg(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch2_out1 <= Delay3_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay11_out1;

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay21_reg(0) <= trigger_delay_comp_done;
        Delay21_reg(1) <= Delay21_reg(0);
      END IF;
    END IF;
  END PROCESS Delay21_process;

  Delay21_out1 <= Delay21_reg(1);

  
  switch_compare_1_3 <= '1' WHEN Q > '0' ELSE
      '0';

  Delay16_ctrl_const_out <= '1';

  Delay16_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        Delay16_ctrl_delay_out <= Delay16_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay16_ctrl_delay_process;


  Delay16_Initial_Val_out <= to_unsigned(1, 32);

  Delay15_ctrl_const_out <= '1';

  Delay15_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_ctrl_delay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay15_ctrl_delay_reg(0) <= Delay15_ctrl_const_out;
        Delay15_ctrl_delay_reg(1) <= Delay15_ctrl_delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay15_ctrl_delay_process;

  Delay15_ctrl_delay_out <= Delay15_ctrl_delay_reg(1);

  Delay15_Initial_Val_out <= to_unsigned(1, 32);

  index_select_unsigned <= unsigned(index_select);

  
  switch_compare_1_4 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        Delay15_reg(0) <= index_select_unsigned;
        Delay15_reg(1) <= Delay15_reg(0);
      END IF;
    END IF;
  END PROCESS Delay15_process;

  Delay15_out <= Delay15_reg(1);

  
  Delay15_out1 <= Delay15_Initial_Val_out WHEN Delay15_ctrl_delay_out = '0' ELSE
      Delay15_out;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay16_out <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Delay16_out1 <= Delay16_Initial_Val_out WHEN Delay16_ctrl_delay_out = '0' ELSE
      Delay16_out;

  
  Switch5_out1 <= Delay16_out1 WHEN switch_compare_1_4 = '0' ELSE
      Delay15_out1;

  
  switch_compare_1_5 <= '1' WHEN Switch5_out1 > to_unsigned(0, 32) ELSE
      '0';

  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay22_reg(0) <= trigger_prediction_done;
        Delay22_reg(1) <= Delay22_reg(0);
      END IF;
    END IF;
  END PROCESS Delay22_process;

  Delay22_out1 <= Delay22_reg(1);

  trigger <= Detect_Rise_Positive_out1 OR (Delay22_out1 OR Delay21_out1);

  
  switch_compare_1_6 <= '1' WHEN trigger > '0' ELSE
      '0';

  index_AXI_unsigned <= unsigned(index_AXI);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        Delay13_reg(0) <= index_AXI_unsigned;
        Delay13_reg(1) <= Delay13_reg(0);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1 <= Delay13_reg(1);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch4_out1 <= Delay14_out1 WHEN switch_compare_1_6 = '0' ELSE
      Delay13_out1;

  
  switch_compare_1_7 <= '1' WHEN trigger > '0' ELSE
      '0';

  index_unsigned <= unsigned(index);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        Delay12_reg(0) <= index_unsigned;
        Delay12_reg(1) <= Delay12_reg(0);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(1);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch3_out1 <= Delay8_out1 WHEN switch_compare_1_7 = '0' ELSE
      Delay12_out1;

  
  Switch_out1 <= Switch4_out1 WHEN switch_compare_1_5 = '0' ELSE
      Switch3_out1;

  
  switch_compare_1_8 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Delay23_ctrl_const_out <= '1';

  Delay23_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        Delay23_ctrl_delay_out <= Delay23_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay23_ctrl_delay_process;


  Delay23_Initial_Val_out <= to_unsigned(1, 32);

  last_opt_index_unsigned <= unsigned(last_opt_index);

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        Delay25_reg(0) <= last_opt_index_unsigned;
        Delay25_reg(1) <= Delay25_reg(0);
      END IF;
    END IF;
  END PROCESS Delay25_process;

  Delay25_out1 <= Delay25_reg(1);

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_out <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay23_out <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  
  Delay23_out1 <= Delay23_Initial_Val_out WHEN Delay23_ctrl_delay_out = '0' ELSE
      Delay23_out;

  
  Switch7_out1 <= Delay23_out1 WHEN switch_compare_1_8 = '0' ELSE
      Delay25_out1;

  
  Switch6_out1 <= Switch_out1 WHEN switch_compare_1_3 = '0' ELSE
      Switch7_out1;

  
  Saturation_out1 <= to_unsigned(64, 32) WHEN Switch6_out1 > to_unsigned(64, 32) ELSE
      to_unsigned(1, 32) WHEN Switch6_out1 < to_unsigned(1, 32) ELSE
      Switch6_out1;

  pu_ud_signed <= signed(pu_ud_1);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= pu_ud_signed;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  pu_ud_tmp <= reduced_reg(1);

  pu_ud <= std_logic_vector(pu_ud_tmp);

  pu_uq_signed <= signed(pu_uq_1);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= pu_uq_signed;
        reduced_reg_1(1) <= reduced_reg_1(0);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  pu_uq_tmp <= reduced_reg_1(1);

  pu_uq <= std_logic_vector(pu_uq_tmp);

  pu_ux_signed <= signed(pu_ux_1);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= pu_ux_signed;
        reduced_reg_2(1) <= reduced_reg_2(0);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  pu_ux_tmp <= reduced_reg_2(1);

  pu_ux <= std_logic_vector(pu_ux_tmp);

  pu_uy_signed <= signed(pu_uy_1);

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_3 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        reduced_reg_3(0) <= pu_uy_signed;
        reduced_reg_3(1) <= reduced_reg_3(0);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  pu_uy_tmp <= reduced_reg_3(1);

  pu_uy <= std_logic_vector(pu_uy_tmp);

  pu_ud_AXI <= std_logic_vector(pu_ud_tmp);

  pu_uq_AXI <= std_logic_vector(pu_uq_tmp);

  pu_ux_AXI <= std_logic_vector(pu_ux_tmp);

  pu_uy_AXI <= std_logic_vector(pu_uy_tmp);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay1_reg(0) <= trigger;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        Delay24_reg(0) <= Saturation_out1;
        Delay24_reg(1) <= Delay24_reg(0);
      END IF;
    END IF;
  END PROCESS Delay24_process;

  Delay24_out1 <= Delay24_reg(1);

  index_voltage <= std_logic_vector(Delay24_out1);

  ce_out <= clk_enable;

  voltages_done <= Delay1_out1;

END rtl;

