-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage2.vhd
-- Created: 2022-05-18 19:36:59
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage2
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph/Line-Line to Phase voltage2
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In1                               :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
        Out1                              :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
        );
END uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage2;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_src_Line_Line_to_Phase_voltage2 IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a_b_c                           :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
          alpha_beta_0                    :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          alpha_beta_0                    :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
          a_b_c                           :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block1
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block1(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_sub_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_add_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_add_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block1
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block1(rtl);

  -- Signals
  SIGNAL abc_to_alpha_beta_0_out1         : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Constant1_out1_re                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1_im                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Re_AC                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Re_BD                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Im_AD                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Im_BC                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux4_out1                        : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL alpha_beta_0_to_abc_out1         : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]

BEGIN
  u_abc_to_alpha_beta_0 : uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a_b_c => In1,  -- single [3]
              alpha_beta_0 => abc_to_alpha_beta_0_out1  -- single [3]
              );

  u_nfp_mul_comp : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => abc_to_alpha_beta_0_out1(0),  -- single
              nfp_in2 => Constant1_out1_re,  -- single
              nfp_out => Product_Re_AC  -- single
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => abc_to_alpha_beta_0_out1(1),  -- single
              nfp_in2 => Constant1_out1_im,  -- single
              nfp_out => Product_Re_BD  -- single
              );

  u_nfp_sub_comp : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product_Re_AC,  -- single
              nfp_in2 => Product_Re_BD,  -- single
              nfp_out => Mux4_out1(0)  -- single
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => abc_to_alpha_beta_0_out1(0),  -- single
              nfp_in2 => Constant1_out1_im,  -- single
              nfp_out => Product_Im_AD  -- single
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => abc_to_alpha_beta_0_out1(1),  -- single
              nfp_in2 => Constant1_out1_re,  -- single
              nfp_out => Product_Im_BC  -- single
              );

  u_nfp_add_comp : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product_Im_AD,  -- single
              nfp_in2 => Product_Im_BC,  -- single
              nfp_out => Mux4_out1(1)  -- single
              );

  u_alpha_beta_0_to_abc : uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              alpha_beta_0 => Mux4_out1,  -- single [3]
              a_b_c => alpha_beta_0_to_abc_out1  -- single [3]
              );

  Constant1_out1_re <= X"3f000000";
  Constant1_out1_im <= X"be93cd3a";

  Constant_out1 <= X"00000000";

  Mux4_out1(2) <= Constant_out1;

  Out1 <= alpha_beta_0_to_abc_out1;

END rtl;

