-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Transformation_V11\Trans_123_dq_V11_ip_addr_decoder.vhd
-- Created: 2018-11-17 16:24:01
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Trans_123_dq_V11_ip_addr_decoder
-- Source Path: Trans_123_dq_V11_ip/Trans_123_dq_V11_ip_axi_lite/Trans_123_dq_V11_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Trans_123_dq_V11_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_id_AXI                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        read_iq_AXI                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        read_i1_AXI                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        read_i3_AXI                       :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_theta_offset_AXI            :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En20
        );
END Trans_123_dq_V11_ip_addr_decoder;


ARCHITECTURE rtl OF Trans_123_dq_V11_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp          : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_id_AXI_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL read_iq_AXI_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL read_i1_AXI_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL read_i3_AXI_signed               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL decode_sel_i3_AXI                : std_logic;  -- ufix1
  SIGNAL decode_sel_i1_AXI                : std_logic;  -- ufix1
  SIGNAL decode_sel_iq_AXI                : std_logic;  -- ufix1
  SIGNAL decode_sel_id_AXI                : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_id_AXI                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL data_in_id_AXI                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_id_AXI                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_iq_AXI                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL data_in_iq_AXI                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_iq_AXI                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_i1_AXI                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL data_in_i1_AXI                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i1_AXI                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_i3_AXI                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL data_in_i3_AXI                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_i3_AXI                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL decode_sel_theta_offset_AXI      : std_logic;  -- ufix1
  SIGNAL reg_enb_theta_offset_AXI         : std_logic;  -- ufix1
  SIGNAL data_in_theta_offset_AXI         : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL write_reg_theta_offset_AXI       : signed(23 DOWNTO 0);  -- sfix24_En20

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  read_id_AXI_signed <= signed(read_id_AXI);

  read_iq_AXI_signed <= signed(read_iq_AXI);

  read_i1_AXI_signed <= signed(read_i1_AXI);

  read_i3_AXI_signed <= signed(read_i3_AXI);

  
  decode_sel_i3_AXI <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  
  decode_sel_i1_AXI <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  
  decode_sel_iq_AXI <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  
  decode_sel_id_AXI <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp <= const_0 WHEN decode_sel_ip_timestamp = '0' ELSE
      read_reg_ip_timestamp;

  reg_id_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_id_AXI <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        read_reg_id_AXI <= read_id_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_id_AXI_process;


  data_in_id_AXI <= unsigned(resize(read_reg_id_AXI, 32));

  
  decode_rd_id_AXI <= decode_rd_ip_timestamp WHEN decode_sel_id_AXI = '0' ELSE
      data_in_id_AXI;

  reg_iq_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_iq_AXI <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        read_reg_iq_AXI <= read_iq_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_iq_AXI_process;


  data_in_iq_AXI <= unsigned(resize(read_reg_iq_AXI, 32));

  
  decode_rd_iq_AXI <= decode_rd_id_AXI WHEN decode_sel_iq_AXI = '0' ELSE
      data_in_iq_AXI;

  reg_i1_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_i1_AXI <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        read_reg_i1_AXI <= read_i1_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_i1_AXI_process;


  data_in_i1_AXI <= unsigned(resize(read_reg_i1_AXI, 32));

  
  decode_rd_i1_AXI <= decode_rd_iq_AXI WHEN decode_sel_i1_AXI = '0' ELSE
      data_in_i1_AXI;

  reg_i3_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_i3_AXI <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        read_reg_i3_AXI <= read_i3_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_i3_AXI_process;


  data_in_i3_AXI <= unsigned(resize(read_reg_i3_AXI, 32));

  
  decode_rd_i3_AXI <= decode_rd_i1_AXI WHEN decode_sel_i3_AXI = '0' ELSE
      data_in_i3_AXI;

  data_read <= std_logic_vector(decode_rd_i3_AXI);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_axi_enable <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  
  decode_sel_theta_offset_AXI <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_theta_offset_AXI <= decode_sel_theta_offset_AXI AND wr_enb;

  data_in_theta_offset_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_theta_offset_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_theta_offset_AXI <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_theta_offset_AXI = '1' THEN
        write_reg_theta_offset_AXI <= data_in_theta_offset_AXI;
      END IF;
    END IF;
  END PROCESS reg_theta_offset_AXI_process;


  write_theta_offset_AXI <= std_logic_vector(write_reg_theta_offset_AXI);

END rtl;

