// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_applyFunction_float_1u_24 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        l_strMv8_dout,
        l_strMv8_empty_n,
        l_strMv8_read,
        l_strOutput7_din,
        l_strOutput7_full_n,
        l_strOutput7_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_n_out_din,
        p_n_out_full_n,
        p_n_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] l_strMv8_dout;
input   l_strMv8_empty_n;
output   l_strMv8_read;
output  [31:0] l_strOutput7_din;
input   l_strOutput7_full_n;
output   l_strOutput7_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
output  [31:0] p_n_out_din;
input   p_n_out_full_n;
output   p_n_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg l_strMv8_read;
reg l_strOutput7_write;
reg p_n_read;
reg p_n_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    l_strMv8_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln53_reg_164;
reg    l_strOutput7_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln53_reg_164_pp0_iter1_reg;
reg    p_n_blk_n;
reg    p_n_out_blk_n;
reg   [31:0] i_reg_83;
reg   [31:0] l_parBlocks_reg_159;
reg    ap_block_state1;
wire   [0:0] icmp_ln53_fu_99_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_16_fu_104_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] l_strMv8_read_reg_173;
wire   [0:0] icmp_ln16_fu_129_p2;
reg   [0:0] icmp_ln16_reg_183;
wire   [0:0] icmp_ln16_1_fu_135_p2;
reg   [0:0] icmp_ln16_1_reg_188;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_94_p0;
wire   [7:0] tmp_fu_115_p4;
wire   [22:0] trunc_ln16_fu_125_p1;
wire   [0:0] or_ln16_fu_141_p2;
wire   [0:0] grp_fu_94_p2;
wire   [0:0] and_ln16_fu_145_p2;
reg    grp_fu_94_ce;
reg    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

MLP_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U134(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_94_p0),
    .din1(32'd0),
    .ce(grp_fu_94_ce),
    .opcode(5'd2),
    .dout(grp_fu_94_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_99_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_83 <= i_16_fu_104_p2;
    end else if ((~((real_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_83 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln16_1_reg_188 <= icmp_ln16_1_fu_135_p2;
        icmp_ln16_reg_183 <= icmp_ln16_fu_129_p2;
        l_strMv8_read_reg_173 <= l_strMv8_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln53_reg_164 <= icmp_ln53_fu_99_p2;
        icmp_ln53_reg_164_pp0_iter1_reg <= icmp_ln53_reg_164;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_parBlocks_reg_159 <= p_n_dout;
    end
end

always @ (*) begin
    if ((icmp_ln53_fu_99_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_94_ce = 1'b1;
    end else begin
        grp_fu_94_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_strMv8_blk_n = l_strMv8_empty_n;
    end else begin
        l_strMv8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_164 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_strMv8_read = 1'b1;
    end else begin
        l_strMv8_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_164_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        l_strOutput7_blk_n = l_strOutput7_full_n;
    end else begin
        l_strOutput7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_164_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        l_strOutput7_write = 1'b1;
    end else begin
        l_strOutput7_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_blk_n = p_n_out_full_n;
    end else begin
        p_n_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_write = 1'b1;
    end else begin
        p_n_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln53_fu_99_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln53_fu_99_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln16_fu_145_p2 = (or_ln16_fu_141_p2 & grp_fu_94_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((icmp_ln53_reg_164_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (l_strOutput7_full_n == 1'b0)) | ((icmp_ln53_reg_164 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (l_strMv8_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln53_reg_164_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (l_strOutput7_full_n == 1'b0)) | ((icmp_ln53_reg_164 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (l_strMv8_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln53_reg_164_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (l_strOutput7_full_n == 1'b0)) | ((icmp_ln53_reg_164 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (l_strMv8_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln53_reg_164_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (l_strOutput7_full_n == 1'b0)) | ((icmp_ln53_reg_164 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (l_strMv8_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln53_reg_164 == 1'd0) & (l_strMv8_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln53_reg_164_pp0_iter1_reg == 1'd0) & (l_strOutput7_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_94_p0 = l_strMv8_dout;

assign i_16_fu_104_p2 = (i_reg_83 + 32'd1);

assign icmp_ln16_1_fu_135_p2 = ((trunc_ln16_fu_125_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_129_p2 = ((tmp_fu_115_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_99_p2 = ((i_reg_83 == l_parBlocks_reg_159) ? 1'b1 : 1'b0);

assign l_strOutput7_din = ((and_ln16_fu_145_p2[0:0] === 1'b1) ? l_strMv8_read_reg_173 : 32'd0);

assign or_ln16_fu_141_p2 = (icmp_ln16_reg_183 | icmp_ln16_1_reg_188);

assign p_n_out_din = p_n_dout;

assign start_out = real_start;

assign tmp_fu_115_p4 = {{l_strMv8_dout[30:23]}};

assign trunc_ln16_fu_125_p1 = l_strMv8_dout[22:0];

endmodule //MLP_applyFunction_float_1u_24
