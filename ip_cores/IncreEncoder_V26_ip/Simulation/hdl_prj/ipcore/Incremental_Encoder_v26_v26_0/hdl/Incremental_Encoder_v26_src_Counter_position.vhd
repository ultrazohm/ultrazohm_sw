-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\inc_enc_v26\Incremental_Encoder_v26_src_Counter_position.vhd
-- Created: 2023-04-17 11:30:45
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Incremental_Encoder_v26_src_Counter_position
-- Source Path: inc_enc_v26/IncEnc_V26/Counter_position
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Incremental_Encoder_v26_src_Counter_position IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_245467_0                    :   IN    std_logic;
        Edge_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        Reset                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        IncsPerTurn                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        Dir                               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
        count                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END Incremental_Encoder_v26_src_Counter_position;


ARCHITECTURE rtl OF Incremental_Encoder_v26_src_Counter_position IS

  -- Signals
  SIGNAL IncsPerTurn_unsigned             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL reset_old5_out1                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Dir_signed                       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL reset_old6_out1                  : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant4_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Reset_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Edge_signed                      : signed(7 DOWNTO 0);  -- int8
  SIGNAL Constant3_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant5_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Constant2_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL speed_old_switch2_out1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL reset_old4_out1                  : signed(15 DOWNTO 0);  -- int16
  SIGNAL speed_old_switch1_out1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL Constant1_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL reset_old5_out1_dtc              : signed(15 DOWNTO 0);  -- int16
  SIGNAL Constant4_out1_dtc               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Resett_switch1_out1              : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL reset_old1_out1                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Add1_add_cast                    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Add1_out1                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL Resett_switch2_out1              : signed(15 DOWNTO 0);  -- int16
  SIGNAL Resett_switch3_out1              : signed(15 DOWNTO 0);  -- int16
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL reset_old2_out1                  : std_logic;
  SIGNAL reset_old2_out1_dtc              : signed(15 DOWNTO 0);  -- int16
  SIGNAL only_use_for_neg_speed_out1      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Resett_switch3_out1_dtc          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL reset_old3_out1                  : std_logic;

BEGIN
  -- Count
  -- Check if count is to big  0-Increments
  -- Check if count is  to small

  IncsPerTurn_unsigned <= unsigned(IncsPerTurn);

  reset_old5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reset_old5_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_245467_0 = '1' THEN
        reset_old5_out1 <= IncsPerTurn_unsigned;
      END IF;
    END IF;
  END PROCESS reset_old5_process;


  Dir_signed <= signed(Dir);

  reset_old6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reset_old6_out1 <= to_signed(16#0#, 4);
      ELSIF enb_1_245467_0 = '1' THEN
        reset_old6_out1 <= Dir_signed;
      END IF;
    END IF;
  END PROCESS reset_old6_process;


  
  switch_compare_1 <= '1' WHEN reset_old6_out1 >= to_signed(16#1#, 4) ELSE
      '0';

  Constant4_out1 <= to_signed(16#0000#, 16);

  Reset_unsigned <= unsigned(Reset);

  Edge_signed <= signed(Edge_rsvd);

  Constant3_out1 <= to_signed(16#0000#, 16);

  
  switch_compare_1_1 <= '1' WHEN reset_old6_out1 >= to_signed(16#1#, 4) ELSE
      '0';

  Constant5_out1 <= to_signed(-16#0001#, 16);

  Constant2_out1 <= to_signed(16#0001#, 16);

  
  speed_old_switch2_out1 <= Constant5_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant2_out1;

  reset_old4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reset_old4_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_245467_0 = '1' THEN
        reset_old4_out1 <= speed_old_switch2_out1;
      END IF;
    END IF;
  END PROCESS reset_old4_process;


  
  speed_old_switch1_out1 <= Constant3_out1 WHEN Edge_signed = to_signed(16#00#, 8) ELSE
      reset_old4_out1;

  Constant1_out1 <= to_signed(16#0000#, 16);

  reset_old5_out1_dtc <= signed(reset_old5_out1);

  Constant4_out1_dtc <= unsigned(Constant4_out1);

  reset_old1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reset_old1_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_245467_0 = '1' THEN
        reset_old1_out1 <= Resett_switch1_out1;
      END IF;
    END IF;
  END PROCESS reset_old1_process;


  Add1_add_cast <= signed(reset_old1_out1);
  Add1_out1 <= speed_old_switch1_out1 + Add1_add_cast;

  
  Resett_switch2_out1 <= Add1_out1 WHEN Reset_unsigned = to_unsigned(16#00#, 8) ELSE
      Constant1_out1;

  
  Relational_Operator1_relop1 <= '1' WHEN Resett_switch3_out1 <= Constant4_out1 ELSE
      '0';

  reset_old2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reset_old2_out1 <= '0';
      ELSIF enb_1_245467_0 = '1' THEN
        reset_old2_out1 <= Relational_Operator1_relop1;
      END IF;
    END IF;
  END PROCESS reset_old2_process;


  reset_old2_out1_dtc <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & reset_old2_out1;

  
  only_use_for_neg_speed_out1 <= reset_old2_out1_dtc WHEN switch_compare_1 = '0' ELSE
      Constant4_out1;

  
  Resett_switch3_out1 <= Resett_switch2_out1 WHEN only_use_for_neg_speed_out1 = to_signed(16#0000#, 16) ELSE
      reset_old5_out1_dtc;

  Resett_switch3_out1_dtc <= unsigned(Resett_switch3_out1);

  
  Relational_Operator_relop1 <= '1' WHEN Resett_switch1_out1 > reset_old5_out1 ELSE
      '0';

  reset_old3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reset_old3_out1 <= '0';
      ELSIF enb_1_245467_0 = '1' THEN
        reset_old3_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS reset_old3_process;


  
  Resett_switch1_out1 <= Resett_switch3_out1_dtc WHEN reset_old3_out1 = '0' ELSE
      Constant4_out1_dtc;

  count <= std_logic_vector(Resett_switch1_out1);

END rtl;

