// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_updateParameter_float_1u_entry69 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_learningRate,
        p_batchSize,
        p_weightSize,
        p_biasSize,
        p_learningRate_out_din,
        p_learningRate_out_full_n,
        p_learningRate_out_write,
        p_batchSize_out_din,
        p_batchSize_out_full_n,
        p_batchSize_out_write,
        p_weightSize_out_din,
        p_weightSize_out_full_n,
        p_weightSize_out_write,
        p_weightSize_out1_din,
        p_weightSize_out1_full_n,
        p_weightSize_out1_write,
        p_biasSize_out_din,
        p_biasSize_out_full_n,
        p_biasSize_out_write,
        p_biasSize_out2_din,
        p_biasSize_out2_full_n,
        p_biasSize_out2_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] p_learningRate;
input  [31:0] p_batchSize;
input  [31:0] p_weightSize;
input  [31:0] p_biasSize;
output  [31:0] p_learningRate_out_din;
input   p_learningRate_out_full_n;
output   p_learningRate_out_write;
output  [31:0] p_batchSize_out_din;
input   p_batchSize_out_full_n;
output   p_batchSize_out_write;
output  [31:0] p_weightSize_out_din;
input   p_weightSize_out_full_n;
output   p_weightSize_out_write;
output  [31:0] p_weightSize_out1_din;
input   p_weightSize_out1_full_n;
output   p_weightSize_out1_write;
output  [31:0] p_biasSize_out_din;
input   p_biasSize_out_full_n;
output   p_biasSize_out_write;
output  [31:0] p_biasSize_out2_din;
input   p_biasSize_out2_full_n;
output   p_biasSize_out2_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_learningRate_out_write;
reg p_batchSize_out_write;
reg p_weightSize_out_write;
reg p_weightSize_out1_write;
reg p_biasSize_out_write;
reg p_biasSize_out2_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_learningRate_out_blk_n;
reg    p_batchSize_out_blk_n;
reg    p_weightSize_out_blk_n;
reg    p_weightSize_out1_blk_n;
reg    p_biasSize_out_blk_n;
reg    p_biasSize_out2_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_batchSize_out_blk_n = p_batchSize_out_full_n;
    end else begin
        p_batchSize_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_batchSize_out_write = 1'b1;
    end else begin
        p_batchSize_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_biasSize_out2_blk_n = p_biasSize_out2_full_n;
    end else begin
        p_biasSize_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_biasSize_out2_write = 1'b1;
    end else begin
        p_biasSize_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_biasSize_out_blk_n = p_biasSize_out_full_n;
    end else begin
        p_biasSize_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_biasSize_out_write = 1'b1;
    end else begin
        p_biasSize_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_learningRate_out_blk_n = p_learningRate_out_full_n;
    end else begin
        p_learningRate_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_learningRate_out_write = 1'b1;
    end else begin
        p_learningRate_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weightSize_out1_blk_n = p_weightSize_out1_full_n;
    end else begin
        p_weightSize_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weightSize_out1_write = 1'b1;
    end else begin
        p_weightSize_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weightSize_out_blk_n = p_weightSize_out_full_n;
    end else begin
        p_weightSize_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weightSize_out_write = 1'b1;
    end else begin
        p_weightSize_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (p_biasSize_out2_full_n == 1'b0) | (p_biasSize_out_full_n == 1'b0) | (p_weightSize_out1_full_n == 1'b0) | (p_weightSize_out_full_n == 1'b0) | (p_batchSize_out_full_n == 1'b0) | (p_learningRate_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign p_batchSize_out_din = p_batchSize;

assign p_biasSize_out2_din = p_biasSize;

assign p_biasSize_out_din = p_biasSize;

assign p_learningRate_out_din = p_learningRate;

assign p_weightSize_out1_din = p_weightSize;

assign p_weightSize_out_din = p_weightSize;

assign start_out = real_start;

endmodule //BGD_updateParameter_float_1u_entry69
