-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_accumulate_float_8u_33 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_values_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    p_values_empty_n : IN STD_LOGIC;
    p_values_read : OUT STD_LOGIC;
    p_accumulator_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_accumulator_ce0 : OUT STD_LOGIC;
    p_accumulator_we0 : OUT STD_LOGIC;
    p_accumulator_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_accumulator_ce1 : OUT STD_LOGIC;
    p_accumulator_we1 : OUT STD_LOGIC;
    p_accumulator_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_size_empty_n : IN STD_LOGIC;
    p_size_read : OUT STD_LOGIC );
end;


architecture behav of BGD_accumulate_float_8u_33 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_values_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln409_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_size_blk_n : STD_LOGIC;
    signal i_reg_183 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal icmp_ln409_reg_429_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal trunc_ln_reg_424 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln409_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln409_fu_224_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln409_reg_433 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_9_fu_234_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_reg_438 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_reg_448 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_1_reg_453 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_1_reg_453_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln674_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_Result_i_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_48_i_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_49_i_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_50_i_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_51_i_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_52_i_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_53_i_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_1_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_2_reg_509 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_2_reg_509_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_3_reg_515 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_3_reg_515_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln101_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal p_accumulator_load_2_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_3_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_4_reg_536 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_4_reg_536_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_5_reg_542 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_5_reg_542_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln101_44_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal p_accumulator_load_4_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_5_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_6_reg_563 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_6_reg_563_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_7_reg_569 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_7_reg_569_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln101_45_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_6_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_7_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_46_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_47_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_48_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_49_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_50_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_3_i_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_4_i_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_5_i_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_187_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln416_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_1_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_2_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_3_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_4_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln416_5_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_6_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln416_7_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_230_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln416_fu_247_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln416_1_fu_332_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln416_2_fu_342_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln416_3_fu_356_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln416_4_fu_366_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln416_5_fu_380_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln416_6_fu_390_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_194_ce : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component BGD_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U463 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        din1 => grp_fu_194_p1,
        ce => grp_fu_194_ce,
        dout => grp_fu_194_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_183 <= ap_const_lv29_0;
            elsif (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_183 <= add_ln409_reg_433;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add3_3_i_reg_614 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add3_4_i_reg_619 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add3_5_i_reg_624 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln409_reg_433 <= add_ln409_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln409_reg_429 <= icmp_ln409_fu_219_p2;
                icmp_ln409_reg_429_pp0_iter1_reg <= icmp_ln409_reg_429;
                    p_accumulator_addr_1_reg_453_pp0_iter1_reg(8 downto 3) <= p_accumulator_addr_1_reg_453(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Result_48_i_reg_469 <= p_values_dout(95 downto 64);
                p_Result_49_i_reg_474 <= p_values_dout(127 downto 96);
                p_Result_50_i_reg_479 <= p_values_dout(159 downto 128);
                p_Result_51_i_reg_484 <= p_values_dout(191 downto 160);
                p_Result_52_i_reg_489 <= p_values_dout(223 downto 192);
                p_Result_53_i_reg_494 <= p_values_dout(255 downto 224);
                p_Result_i_reg_464 <= p_values_dout(63 downto 32);
                    p_accumulator_addr_2_reg_509(8 downto 3) <= zext_ln416_2_fu_337_p1(9 - 1 downto 0)(8 downto 3);
                    p_accumulator_addr_3_reg_515(8 downto 3) <= zext_ln416_3_fu_347_p1(9 - 1 downto 0)(8 downto 3);
                trunc_ln674_reg_459 <= trunc_ln674_fu_258_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln409_fu_219_p2 = ap_const_lv1_0))) then
                    p_accumulator_addr_1_reg_453(8 downto 3) <= zext_ln416_1_fu_253_p1(9 - 1 downto 0)(8 downto 3);
                    p_accumulator_addr_reg_448(8 downto 3) <= zext_ln416_fu_242_p1(9 - 1 downto 0)(8 downto 3);
                    tmp_9_reg_438(8 downto 3) <= tmp_9_fu_234_p3(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    p_accumulator_addr_2_reg_509_pp0_iter1_reg(8 downto 3) <= p_accumulator_addr_2_reg_509(8 downto 3);
                    p_accumulator_addr_3_reg_515_pp0_iter1_reg(8 downto 3) <= p_accumulator_addr_3_reg_515(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    p_accumulator_addr_4_reg_536(8 downto 3) <= zext_ln416_4_fu_361_p1(9 - 1 downto 0)(8 downto 3);
                    p_accumulator_addr_5_reg_542(8 downto 3) <= zext_ln416_5_fu_371_p1(9 - 1 downto 0)(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    p_accumulator_addr_4_reg_536_pp0_iter1_reg(8 downto 3) <= p_accumulator_addr_4_reg_536(8 downto 3);
                    p_accumulator_addr_5_reg_542_pp0_iter1_reg(8 downto 3) <= p_accumulator_addr_5_reg_542(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    p_accumulator_addr_6_reg_563(8 downto 3) <= zext_ln416_6_fu_385_p1(9 - 1 downto 0)(8 downto 3);
                    p_accumulator_addr_7_reg_569(8 downto 3) <= zext_ln416_7_fu_395_p1(9 - 1 downto 0)(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    p_accumulator_addr_6_reg_563_pp0_iter1_reg(8 downto 3) <= p_accumulator_addr_6_reg_563(8 downto 3);
                    p_accumulator_addr_7_reg_569_pp0_iter1_reg(8 downto 3) <= p_accumulator_addr_7_reg_569(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_accumulator_load_1_reg_504 <= p_accumulator_q0;
                p_accumulator_load_reg_499 <= p_accumulator_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                p_accumulator_load_2_reg_526 <= p_accumulator_q1;
                p_accumulator_load_3_reg_531 <= p_accumulator_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                p_accumulator_load_4_reg_553 <= p_accumulator_q1;
                p_accumulator_load_5_reg_558 <= p_accumulator_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                p_accumulator_load_6_reg_579 <= p_accumulator_q1;
                p_accumulator_load_7_reg_584 <= p_accumulator_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then
                reg_198 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then
                reg_204 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln_reg_424 <= p_size_dout(31 downto 3);
            end if;
        end if;
    end process;
    tmp_9_reg_438(2 downto 0) <= "000";
    p_accumulator_addr_reg_448(2 downto 0) <= "000";
    p_accumulator_addr_1_reg_453(2 downto 0) <= "001";
    p_accumulator_addr_1_reg_453_pp0_iter1_reg(2 downto 0) <= "001";
    p_accumulator_addr_2_reg_509(2 downto 0) <= "010";
    p_accumulator_addr_2_reg_509_pp0_iter1_reg(2 downto 0) <= "010";
    p_accumulator_addr_3_reg_515(2 downto 0) <= "011";
    p_accumulator_addr_3_reg_515_pp0_iter1_reg(2 downto 0) <= "011";
    p_accumulator_addr_4_reg_536(2 downto 0) <= "100";
    p_accumulator_addr_4_reg_536_pp0_iter1_reg(2 downto 0) <= "100";
    p_accumulator_addr_5_reg_542(2 downto 0) <= "101";
    p_accumulator_addr_5_reg_542_pp0_iter1_reg(2 downto 0) <= "101";
    p_accumulator_addr_6_reg_563(2 downto 0) <= "110";
    p_accumulator_addr_6_reg_563_pp0_iter1_reg(2 downto 0) <= "110";
    p_accumulator_addr_7_reg_569(2 downto 0) <= "111";
    p_accumulator_addr_7_reg_569_pp0_iter1_reg(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_size_empty_n, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter1, icmp_ln409_fu_219_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln409_fu_219_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln409_fu_219_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln409_fu_224_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_187_p4) + unsigned(ap_const_lv29_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(p_values_empty_n, ap_enable_reg_pp0_iter0, icmp_ln409_reg_429)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (p_values_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(p_values_empty_n, ap_enable_reg_pp0_iter0, icmp_ln409_reg_429)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (p_values_empty_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_size_empty_n)
    begin
                ap_block_state1 <= ((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(p_values_empty_n, icmp_ln409_reg_429)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln409_reg_429 = ap_const_lv1_0) and (p_values_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln409_fu_219_p2)
    begin
        if ((icmp_ln409_fu_219_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_187_p4_assign_proc : process(icmp_ln409_reg_429, i_reg_183, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, add_ln409_reg_433, ap_block_pp0_stage0)
    begin
        if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_187_p4 <= add_ln409_reg_433;
        else 
            ap_phi_mux_i_phi_fu_187_p4 <= i_reg_183;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln101_44_fu_376_p1 <= p_Result_i_reg_464;
    bitcast_ln101_45_fu_400_p1 <= p_Result_48_i_reg_469;
    bitcast_ln101_46_fu_404_p1 <= p_Result_49_i_reg_474;
    bitcast_ln101_47_fu_408_p1 <= p_Result_50_i_reg_479;
    bitcast_ln101_48_fu_412_p1 <= p_Result_51_i_reg_484;
    bitcast_ln101_49_fu_416_p1 <= p_Result_52_i_reg_489;
    bitcast_ln101_50_fu_420_p1 <= p_Result_53_i_reg_494;
    bitcast_ln101_fu_352_p1 <= trunc_ln674_reg_459;
    empty_fu_230_p1 <= ap_phi_mux_i_phi_fu_187_p4(6 - 1 downto 0);

    grp_fu_194_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_194_ce <= ap_const_logic_1;
        else 
            grp_fu_194_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_194_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, p_accumulator_load_reg_499, p_accumulator_load_1_reg_504, ap_CS_fsm_pp0_stage2, p_accumulator_load_2_reg_526, p_accumulator_load_3_reg_531, ap_CS_fsm_pp0_stage3, p_accumulator_load_4_reg_553, p_accumulator_load_5_reg_558, p_accumulator_load_6_reg_579, p_accumulator_load_7_reg_584, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_194_p0 <= p_accumulator_load_7_reg_584;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_194_p0 <= p_accumulator_load_6_reg_579;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_194_p0 <= p_accumulator_load_5_reg_558;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_194_p0 <= p_accumulator_load_4_reg_553;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_194_p0 <= p_accumulator_load_3_reg_531;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_194_p0 <= p_accumulator_load_2_reg_526;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_194_p0 <= p_accumulator_load_1_reg_504;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_194_p0 <= p_accumulator_load_reg_499;
        else 
            grp_fu_194_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_194_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, bitcast_ln101_fu_352_p1, ap_CS_fsm_pp0_stage2, bitcast_ln101_44_fu_376_p1, ap_CS_fsm_pp0_stage3, bitcast_ln101_45_fu_400_p1, bitcast_ln101_46_fu_404_p1, bitcast_ln101_47_fu_408_p1, bitcast_ln101_48_fu_412_p1, bitcast_ln101_49_fu_416_p1, bitcast_ln101_50_fu_420_p1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_194_p1 <= bitcast_ln101_50_fu_420_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_194_p1 <= bitcast_ln101_49_fu_416_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_194_p1 <= bitcast_ln101_48_fu_412_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_194_p1 <= bitcast_ln101_47_fu_408_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_194_p1 <= bitcast_ln101_46_fu_404_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_194_p1 <= bitcast_ln101_45_fu_400_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_194_p1 <= bitcast_ln101_44_fu_376_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_194_p1 <= bitcast_ln101_fu_352_p1;
        else 
            grp_fu_194_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln409_fu_219_p2 <= "1" when (ap_phi_mux_i_phi_fu_187_p4 = trunc_ln_reg_424) else "0";
    or_ln416_1_fu_332_p2 <= (tmp_9_reg_438 or ap_const_lv9_2);
    or_ln416_2_fu_342_p2 <= (tmp_9_reg_438 or ap_const_lv9_3);
    or_ln416_3_fu_356_p2 <= (tmp_9_reg_438 or ap_const_lv9_4);
    or_ln416_4_fu_366_p2 <= (tmp_9_reg_438 or ap_const_lv9_5);
    or_ln416_5_fu_380_p2 <= (tmp_9_reg_438 or ap_const_lv9_6);
    or_ln416_6_fu_390_p2 <= (tmp_9_reg_438 or ap_const_lv9_7);
    or_ln416_fu_247_p2 <= (tmp_9_fu_234_p3 or ap_const_lv9_1);

    p_accumulator_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, p_accumulator_addr_2_reg_509_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, p_accumulator_addr_4_reg_536_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, p_accumulator_addr_6_reg_563_pp0_iter1_reg, p_accumulator_addr_7_reg_569_pp0_iter1_reg, ap_block_pp0_stage0, zext_ln416_1_fu_253_p1, zext_ln416_3_fu_347_p1, ap_block_pp0_stage2, zext_ln416_5_fu_371_p1, ap_block_pp0_stage3, zext_ln416_7_fu_395_p1, ap_block_pp0_stage7, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_address0 <= p_accumulator_addr_7_reg_569_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_address0 <= p_accumulator_addr_6_reg_563_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_address0 <= p_accumulator_addr_4_reg_536_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_address0 <= p_accumulator_addr_2_reg_509_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_accumulator_address0 <= zext_ln416_7_fu_395_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            p_accumulator_address0 <= zext_ln416_5_fu_371_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_accumulator_address0 <= zext_ln416_3_fu_347_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_accumulator_address0 <= zext_ln416_1_fu_253_p1(9 - 1 downto 0);
        else 
            p_accumulator_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    p_accumulator_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, p_accumulator_addr_reg_448, p_accumulator_addr_1_reg_453_pp0_iter1_reg, p_accumulator_addr_3_reg_515_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, p_accumulator_addr_5_reg_542_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln416_fu_242_p1, zext_ln416_2_fu_337_p1, zext_ln416_4_fu_361_p1, ap_block_pp0_stage2, zext_ln416_6_fu_385_p1, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_address1 <= p_accumulator_addr_5_reg_542_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_address1 <= p_accumulator_addr_3_reg_515_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_address1 <= p_accumulator_addr_1_reg_453_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            p_accumulator_address1 <= p_accumulator_addr_reg_448;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_accumulator_address1 <= zext_ln416_6_fu_385_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            p_accumulator_address1 <= zext_ln416_4_fu_361_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_accumulator_address1 <= zext_ln416_2_fu_337_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_accumulator_address1 <= zext_ln416_fu_242_p1(9 - 1 downto 0);
        else 
            p_accumulator_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    p_accumulator_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            p_accumulator_ce0 <= ap_const_logic_1;
        else 
            p_accumulator_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            p_accumulator_ce1 <= ap_const_logic_1;
        else 
            p_accumulator_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_d0_assign_proc : process(reg_198, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, reg_204, ap_CS_fsm_pp0_stage5, add3_4_i_reg_619, ap_block_pp0_stage7, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_d0 <= reg_198;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_d0 <= add3_4_i_reg_619;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            p_accumulator_d0 <= reg_204;
        else 
            p_accumulator_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_accumulator_d1_assign_proc : process(ap_enable_reg_pp0_iter0, reg_198, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, add3_3_i_reg_614, add3_5_i_reg_624, ap_block_pp0_stage7, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_d1 <= add3_5_i_reg_624;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            p_accumulator_d1 <= add3_3_i_reg_614;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            p_accumulator_d1 <= reg_198;
        else 
            p_accumulator_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_accumulator_we0_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, icmp_ln409_reg_429_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            p_accumulator_we0 <= ap_const_logic_1;
        else 
            p_accumulator_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_we1_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln409_reg_429, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, icmp_ln409_reg_429_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln409_reg_429_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            p_accumulator_we1 <= ap_const_logic_1;
        else 
            p_accumulator_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_size_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_size_blk_n <= p_size_empty_n;
        else 
            p_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_size_empty_n)
    begin
        if ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_size_read <= ap_const_logic_1;
        else 
            p_size_read <= ap_const_logic_0;
        end if; 
    end process;


    p_values_blk_n_assign_proc : process(p_values_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln409_reg_429)
    begin
        if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_values_blk_n <= p_values_empty_n;
        else 
            p_values_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_values_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln409_reg_429, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln409_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_values_read <= ap_const_logic_1;
        else 
            p_values_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_9_fu_234_p3 <= (empty_fu_230_p1 & ap_const_lv3_0);
    trunc_ln674_fu_258_p1 <= p_values_dout(32 - 1 downto 0);
    zext_ln416_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_fu_247_p2),64));
    zext_ln416_2_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_1_fu_332_p2),64));
    zext_ln416_3_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_2_fu_342_p2),64));
    zext_ln416_4_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_3_fu_356_p2),64));
    zext_ln416_5_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_4_fu_366_p2),64));
    zext_ln416_6_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_5_fu_380_p2),64));
    zext_ln416_7_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_6_fu_390_p2),64));
    zext_ln416_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_234_p3),64));
end behav;
