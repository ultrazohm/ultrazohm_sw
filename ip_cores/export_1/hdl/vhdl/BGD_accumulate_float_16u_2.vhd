-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_accumulate_float_16u_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_values_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    p_values_empty_n : IN STD_LOGIC;
    p_values_read : OUT STD_LOGIC;
    p_accumulator_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_accumulator_ce0 : OUT STD_LOGIC;
    p_accumulator_we0 : OUT STD_LOGIC;
    p_accumulator_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_accumulator_ce1 : OUT STD_LOGIC;
    p_accumulator_we1 : OUT STD_LOGIC;
    p_accumulator_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_weightGradientAvg_offset_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    p_weightGradientAvg_offset_empty_n : IN STD_LOGIC;
    p_weightGradientAvg_offset_read : OUT STD_LOGIC;
    mul_ln546_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln546_loc_empty_n : IN STD_LOGIC;
    mul_ln546_loc_read : OUT STD_LOGIC;
    p_initZero_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    p_initZero_empty_n : IN STD_LOGIC;
    p_initZero_read : OUT STD_LOGIC );
end;


architecture behav of BGD_accumulate_float_16u_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv14_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000101";
    constant ap_const_lv14_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000110";
    constant ap_const_lv14_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000111";
    constant ap_const_lv14_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_const_lv14_9 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001001";
    constant ap_const_lv14_A : STD_LOGIC_VECTOR (13 downto 0) := "00000000001010";
    constant ap_const_lv14_B : STD_LOGIC_VECTOR (13 downto 0) := "00000000001011";
    constant ap_const_lv14_C : STD_LOGIC_VECTOR (13 downto 0) := "00000000001100";
    constant ap_const_lv14_D : STD_LOGIC_VECTOR (13 downto 0) := "00000000001101";
    constant ap_const_lv14_E : STD_LOGIC_VECTOR (13 downto 0) := "00000000001110";
    constant ap_const_lv14_F : STD_LOGIC_VECTOR (13 downto 0) := "00000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_values_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_weightGradientAvg_offset_blk_n : STD_LOGIC;
    signal mul_ln546_loc_blk_n : STD_LOGIC;
    signal p_initZero_blk_n : STD_LOGIC;
    signal reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_initZero_read_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_weightGradientAvg_offset_read_reg_898 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_reg_924 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln397_fu_428_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln397_reg_932 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_438_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_937 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln397_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_accumulator_addr_reg_956 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln674_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_91_i_i_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_92_i_i_reg_971 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_93_i_i_reg_976 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_94_i_i_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_95_i_i_reg_986 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_96_i_i_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_97_i_i_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_98_i_i_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_99_i_i_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_100_i_i_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_101_i_i_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_102_i_i_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_103_i_i_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_104_i_i_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_31_reg_1046 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_accumulator_addr_32_reg_1051 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_accumulator_addr_33_reg_1056 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_accumulator_addr_34_reg_1062 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln101_121_fu_674_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_122_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_35_reg_1078 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_accumulator_addr_36_reg_1084 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln101_123_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_124_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_37_reg_1100 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_accumulator_addr_38_reg_1106 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln101_125_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_126_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_39_reg_1122 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_accumulator_addr_40_reg_1128 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln101_127_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_128_fu_792_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_41_reg_1149 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_accumulator_addr_42_reg_1155 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln101_129_fu_826_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_130_fu_830_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_43_reg_1171 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_accumulator_addr_44_reg_1177 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_30_fu_869_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_30_reg_1183 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln101_131_fu_874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_132_fu_878_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_45_reg_1198 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln101_133_fu_886_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_134_fu_890_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_135_fu_894_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_317 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln404_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_31_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_32_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_33_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_34_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_35_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_36_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_37_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_38_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_39_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_40_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_41_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_42_fu_821_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_43_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_44_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln404_45_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_328_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_434_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln404_fu_446_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_fu_614_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_16_fu_619_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_29_fu_629_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_17_fu_634_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_30_fu_644_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_18_fu_649_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_31_fu_659_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_19_fu_664_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_32_fu_682_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_20_fu_687_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_33_fu_697_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_21_fu_702_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_34_fu_720_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_22_fu_725_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_35_fu_735_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_23_fu_740_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_36_fu_758_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_24_fu_763_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_37_fu_773_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_25_fu_778_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_38_fu_796_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_26_fu_801_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_39_fu_811_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_27_fu_816_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_40_fu_834_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_28_fu_839_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_41_fu_849_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln404_29_fu_854_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln404_42_fu_864_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component BGD_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U405 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_328_p0,
        din1 => grp_fu_328_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U406 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_332_p0,
        din1 => grp_fu_332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln546_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_317 <= ap_const_lv28_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_reg_317 <= add_ln397_reg_932;
            end if; 
        end if;
    end process;

    reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_336 <= p_accumulator_q1;
            elsif ((((p_initZero_read_reg_918 = ap_const_lv1_0) and (p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                reg_336 <= p_accumulator_q0;
            end if; 
        end if;
    end process;

    reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                reg_347 <= p_accumulator_q1;
            elsif (((p_initZero_read_reg_918 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_347 <= p_accumulator_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln397_reg_932 <= add_ln397_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln404_30_reg_1183 <= add_ln404_30_fu_869_p2;
                p_accumulator_addr_43_reg_1171 <= zext_ln404_43_fu_844_p1(14 - 1 downto 0);
                p_accumulator_addr_44_reg_1177 <= zext_ln404_44_fu_859_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_Result_100_i_i_reg_1016 <= p_values_dout(383 downto 352);
                p_Result_101_i_i_reg_1021 <= p_values_dout(415 downto 384);
                p_Result_102_i_i_reg_1026 <= p_values_dout(447 downto 416);
                p_Result_103_i_i_reg_1031 <= p_values_dout(479 downto 448);
                p_Result_104_i_i_reg_1036 <= p_values_dout(511 downto 480);
                p_Result_91_i_i_reg_966 <= p_values_dout(63 downto 32);
                p_Result_92_i_i_reg_971 <= p_values_dout(95 downto 64);
                p_Result_93_i_i_reg_976 <= p_values_dout(127 downto 96);
                p_Result_94_i_i_reg_981 <= p_values_dout(159 downto 128);
                p_Result_95_i_i_reg_986 <= p_values_dout(191 downto 160);
                p_Result_96_i_i_reg_991 <= p_values_dout(223 downto 192);
                p_Result_97_i_i_reg_996 <= p_values_dout(255 downto 224);
                p_Result_98_i_i_reg_1001 <= p_values_dout(287 downto 256);
                p_Result_99_i_i_reg_1011 <= p_values_dout(351 downto 320);
                p_Result_i_i_reg_1006 <= p_values_dout(319 downto 288);
                trunc_ln674_reg_961 <= trunc_ln674_fu_456_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_accumulator_addr_31_reg_1046 <= zext_ln404_31_fu_624_p1(14 - 1 downto 0);
                p_accumulator_addr_32_reg_1051 <= zext_ln404_32_fu_639_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                p_accumulator_addr_33_reg_1056 <= zext_ln404_33_fu_654_p1(14 - 1 downto 0);
                p_accumulator_addr_34_reg_1062 <= zext_ln404_34_fu_669_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_accumulator_addr_35_reg_1078 <= zext_ln404_35_fu_692_p1(14 - 1 downto 0);
                p_accumulator_addr_36_reg_1084 <= zext_ln404_36_fu_707_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                p_accumulator_addr_37_reg_1100 <= zext_ln404_37_fu_730_p1(14 - 1 downto 0);
                p_accumulator_addr_38_reg_1106 <= zext_ln404_38_fu_745_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_accumulator_addr_39_reg_1122 <= zext_ln404_39_fu_768_p1(14 - 1 downto 0);
                p_accumulator_addr_40_reg_1128 <= zext_ln404_40_fu_783_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                p_accumulator_addr_41_reg_1149 <= zext_ln404_41_fu_806_p1(14 - 1 downto 0);
                p_accumulator_addr_42_reg_1155 <= zext_ln404_42_fu_821_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                p_accumulator_addr_45_reg_1198 <= zext_ln404_45_fu_882_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_accumulator_addr_reg_956 <= zext_ln404_fu_451_p1(14 - 1 downto 0);
                    tmp_s_reg_937(13 downto 4) <= tmp_s_fu_438_p3(13 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln546_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_initZero_read_reg_918 <= p_initZero_dout;
                p_weightGradientAvg_offset_read_reg_898 <= p_weightGradientAvg_offset_dout;
                trunc_ln_reg_924 <= mul_ln546_loc_dout(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_341 <= grp_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_352 <= grp_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_357 <= grp_fu_332_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_937(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_values_empty_n, p_weightGradientAvg_offset_empty_n, mul_ln546_loc_empty_n, p_initZero_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln397_fu_423_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln546_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln397_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state3 => 
                if (((p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln397_fu_428_p2 <= std_logic_vector(unsigned(i_reg_317) + unsigned(ap_const_lv28_1));
    add_ln404_16_fu_619_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_fu_614_p2));
    add_ln404_17_fu_634_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_29_fu_629_p2));
    add_ln404_18_fu_649_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_30_fu_644_p2));
    add_ln404_19_fu_664_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_31_fu_659_p2));
    add_ln404_20_fu_687_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_32_fu_682_p2));
    add_ln404_21_fu_702_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_33_fu_697_p2));
    add_ln404_22_fu_725_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_34_fu_720_p2));
    add_ln404_23_fu_740_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_35_fu_735_p2));
    add_ln404_24_fu_763_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_36_fu_758_p2));
    add_ln404_25_fu_778_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_37_fu_773_p2));
    add_ln404_26_fu_801_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_38_fu_796_p2));
    add_ln404_27_fu_816_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_39_fu_811_p2));
    add_ln404_28_fu_839_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_40_fu_834_p2));
    add_ln404_29_fu_854_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_41_fu_849_p2));
    add_ln404_30_fu_869_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(or_ln404_42_fu_864_p2));
    add_ln404_fu_446_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_898) + unsigned(tmp_s_fu_438_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_weightGradientAvg_offset_empty_n, mul_ln546_loc_empty_n, p_initZero_empty_n)
    begin
                ap_block_state1 <= ((p_initZero_empty_n = ap_const_logic_0) or (mul_ln546_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln101_121_fu_674_p1 <= p_Result_91_i_i_reg_966;
    bitcast_ln101_122_fu_678_p1 <= p_Result_92_i_i_reg_971;
    bitcast_ln101_123_fu_712_p1 <= p_Result_93_i_i_reg_976;
    bitcast_ln101_124_fu_716_p1 <= p_Result_94_i_i_reg_981;
    bitcast_ln101_125_fu_750_p1 <= p_Result_95_i_i_reg_986;
    bitcast_ln101_126_fu_754_p1 <= p_Result_96_i_i_reg_991;
    bitcast_ln101_127_fu_788_p1 <= p_Result_97_i_i_reg_996;
    bitcast_ln101_128_fu_792_p1 <= p_Result_98_i_i_reg_1001;
    bitcast_ln101_129_fu_826_p1 <= p_Result_i_i_reg_1006;
    bitcast_ln101_130_fu_830_p1 <= p_Result_99_i_i_reg_1011;
    bitcast_ln101_131_fu_874_p1 <= p_Result_100_i_i_reg_1016;
    bitcast_ln101_132_fu_878_p1 <= p_Result_101_i_i_reg_1021;
    bitcast_ln101_133_fu_886_p1 <= p_Result_102_i_i_reg_1026;
    bitcast_ln101_134_fu_890_p1 <= p_Result_103_i_i_reg_1031;
    bitcast_ln101_135_fu_894_p1 <= p_Result_104_i_i_reg_1036;
    bitcast_ln101_fu_610_p1 <= trunc_ln674_reg_961;
    empty_fu_434_p1 <= i_reg_317(10 - 1 downto 0);
    grp_fu_328_p0 <= 
        ap_const_lv32_0 when (p_initZero_read_reg_918(0) = '1') else 
        reg_336;

    grp_fu_328_p1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state4, bitcast_ln101_fu_610_p1, bitcast_ln101_121_fu_674_p1, bitcast_ln101_123_fu_712_p1, bitcast_ln101_125_fu_750_p1, bitcast_ln101_127_fu_788_p1, bitcast_ln101_129_fu_826_p1, bitcast_ln101_131_fu_874_p1, bitcast_ln101_133_fu_886_p1, bitcast_ln101_135_fu_894_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_328_p1 <= bitcast_ln101_135_fu_894_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_328_p1 <= bitcast_ln101_133_fu_886_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_328_p1 <= bitcast_ln101_131_fu_874_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_328_p1 <= bitcast_ln101_129_fu_826_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_328_p1 <= bitcast_ln101_127_fu_788_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_328_p1 <= bitcast_ln101_125_fu_750_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_328_p1 <= bitcast_ln101_123_fu_712_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_328_p1 <= bitcast_ln101_121_fu_674_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_328_p1 <= bitcast_ln101_fu_610_p1;
        else 
            grp_fu_328_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_332_p0 <= 
        ap_const_lv32_0 when (p_initZero_read_reg_918(0) = '1') else 
        reg_347;

    grp_fu_332_p1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, bitcast_ln101_122_fu_678_p1, bitcast_ln101_124_fu_716_p1, bitcast_ln101_126_fu_754_p1, bitcast_ln101_128_fu_792_p1, bitcast_ln101_130_fu_830_p1, bitcast_ln101_132_fu_878_p1, bitcast_ln101_134_fu_890_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_332_p1 <= bitcast_ln101_134_fu_890_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_332_p1 <= bitcast_ln101_132_fu_878_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_332_p1 <= bitcast_ln101_130_fu_830_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_332_p1 <= bitcast_ln101_128_fu_792_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_332_p1 <= bitcast_ln101_126_fu_754_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_332_p1 <= bitcast_ln101_124_fu_716_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_332_p1 <= bitcast_ln101_122_fu_678_p1;
        else 
            grp_fu_332_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln397_fu_423_p2 <= "1" when (i_reg_317 = trunc_ln_reg_924) else "0";

    mul_ln546_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln546_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln546_loc_blk_n <= mul_ln546_loc_empty_n;
        else 
            mul_ln546_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mul_ln546_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln546_loc_empty_n, p_initZero_empty_n)
    begin
        if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln546_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln546_loc_read <= ap_const_logic_1;
        else 
            mul_ln546_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln404_29_fu_629_p2 <= (tmp_s_reg_937 or ap_const_lv14_2);
    or_ln404_30_fu_644_p2 <= (tmp_s_reg_937 or ap_const_lv14_3);
    or_ln404_31_fu_659_p2 <= (tmp_s_reg_937 or ap_const_lv14_4);
    or_ln404_32_fu_682_p2 <= (tmp_s_reg_937 or ap_const_lv14_5);
    or_ln404_33_fu_697_p2 <= (tmp_s_reg_937 or ap_const_lv14_6);
    or_ln404_34_fu_720_p2 <= (tmp_s_reg_937 or ap_const_lv14_7);
    or_ln404_35_fu_735_p2 <= (tmp_s_reg_937 or ap_const_lv14_8);
    or_ln404_36_fu_758_p2 <= (tmp_s_reg_937 or ap_const_lv14_9);
    or_ln404_37_fu_773_p2 <= (tmp_s_reg_937 or ap_const_lv14_A);
    or_ln404_38_fu_796_p2 <= (tmp_s_reg_937 or ap_const_lv14_B);
    or_ln404_39_fu_811_p2 <= (tmp_s_reg_937 or ap_const_lv14_C);
    or_ln404_40_fu_834_p2 <= (tmp_s_reg_937 or ap_const_lv14_D);
    or_ln404_41_fu_849_p2 <= (tmp_s_reg_937 or ap_const_lv14_E);
    or_ln404_42_fu_864_p2 <= (tmp_s_reg_937 or ap_const_lv14_F);
    or_ln404_fu_614_p2 <= (tmp_s_reg_937 or ap_const_lv14_1);

    p_accumulator_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state2, p_accumulator_addr_reg_956, ap_CS_fsm_state10, p_accumulator_addr_32_reg_1051, p_accumulator_addr_34_reg_1062, p_accumulator_addr_36_reg_1084, p_accumulator_addr_38_reg_1106, p_accumulator_addr_40_reg_1128, p_accumulator_addr_42_reg_1155, p_accumulator_addr_44_reg_1177, ap_CS_fsm_state24, zext_ln404_fu_451_p1, zext_ln404_32_fu_639_p1, zext_ln404_33_fu_654_p1, zext_ln404_35_fu_692_p1, zext_ln404_37_fu_730_p1, zext_ln404_39_fu_768_p1, zext_ln404_41_fu_806_p1, zext_ln404_43_fu_844_p1, zext_ln404_45_fu_882_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            p_accumulator_address0 <= p_accumulator_addr_44_reg_1177;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            p_accumulator_address0 <= p_accumulator_addr_42_reg_1155;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            p_accumulator_address0 <= p_accumulator_addr_40_reg_1128;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            p_accumulator_address0 <= p_accumulator_addr_38_reg_1106;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            p_accumulator_address0 <= p_accumulator_addr_36_reg_1084;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            p_accumulator_address0 <= p_accumulator_addr_34_reg_1062;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            p_accumulator_address0 <= p_accumulator_addr_32_reg_1051;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            p_accumulator_address0 <= zext_ln404_45_fu_882_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            p_accumulator_address0 <= zext_ln404_43_fu_844_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            p_accumulator_address0 <= zext_ln404_41_fu_806_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            p_accumulator_address0 <= zext_ln404_39_fu_768_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_accumulator_address0 <= zext_ln404_37_fu_730_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_accumulator_address0 <= zext_ln404_35_fu_692_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            p_accumulator_address0 <= zext_ln404_33_fu_654_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_accumulator_address0 <= zext_ln404_32_fu_639_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_accumulator_address0 <= p_accumulator_addr_reg_956;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_accumulator_address0 <= zext_ln404_fu_451_p1(14 - 1 downto 0);
        else 
            p_accumulator_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    p_accumulator_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, p_accumulator_addr_31_reg_1046, ap_CS_fsm_state10, p_accumulator_addr_33_reg_1056, p_accumulator_addr_35_reg_1078, p_accumulator_addr_37_reg_1100, p_accumulator_addr_39_reg_1122, p_accumulator_addr_41_reg_1149, p_accumulator_addr_43_reg_1171, p_accumulator_addr_45_reg_1198, ap_CS_fsm_state24, zext_ln404_31_fu_624_p1, zext_ln404_34_fu_669_p1, zext_ln404_36_fu_707_p1, zext_ln404_38_fu_745_p1, zext_ln404_40_fu_783_p1, zext_ln404_42_fu_821_p1, zext_ln404_44_fu_859_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            p_accumulator_address1 <= p_accumulator_addr_45_reg_1198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            p_accumulator_address1 <= p_accumulator_addr_43_reg_1171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            p_accumulator_address1 <= p_accumulator_addr_41_reg_1149;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            p_accumulator_address1 <= p_accumulator_addr_39_reg_1122;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            p_accumulator_address1 <= p_accumulator_addr_37_reg_1100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            p_accumulator_address1 <= p_accumulator_addr_35_reg_1078;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            p_accumulator_address1 <= p_accumulator_addr_33_reg_1056;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            p_accumulator_address1 <= p_accumulator_addr_31_reg_1046;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            p_accumulator_address1 <= zext_ln404_44_fu_859_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            p_accumulator_address1 <= zext_ln404_42_fu_821_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            p_accumulator_address1 <= zext_ln404_40_fu_783_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_accumulator_address1 <= zext_ln404_38_fu_745_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_accumulator_address1 <= zext_ln404_36_fu_707_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            p_accumulator_address1 <= zext_ln404_34_fu_669_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_accumulator_address1 <= zext_ln404_31_fu_624_p1(14 - 1 downto 0);
        else 
            p_accumulator_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    p_accumulator_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state24, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            p_accumulator_ce0 <= ap_const_logic_1;
        else 
            p_accumulator_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state10, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            p_accumulator_ce1 <= ap_const_logic_1;
        else 
            p_accumulator_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_d0_assign_proc : process(ap_CS_fsm_state18, reg_341, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, reg_352, reg_357, ap_CS_fsm_state24, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            p_accumulator_d0 <= reg_357;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            p_accumulator_d0 <= reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_accumulator_d0 <= reg_341;
        else 
            p_accumulator_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    p_accumulator_d1 <= reg_341;

    p_accumulator_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            p_accumulator_we0 <= ap_const_logic_1;
        else 
            p_accumulator_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_we1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            p_accumulator_we1 <= ap_const_logic_1;
        else 
            p_accumulator_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_initZero_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_initZero_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_initZero_blk_n <= p_initZero_empty_n;
        else 
            p_initZero_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_initZero_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln546_loc_empty_n, p_initZero_empty_n)
    begin
        if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln546_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_initZero_read <= ap_const_logic_1;
        else 
            p_initZero_read <= ap_const_logic_0;
        end if; 
    end process;


    p_values_blk_n_assign_proc : process(p_values_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_values_blk_n <= p_values_empty_n;
        else 
            p_values_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_values_read_assign_proc : process(p_values_empty_n, ap_CS_fsm_state3)
    begin
        if (((p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_values_read <= ap_const_logic_1;
        else 
            p_values_read <= ap_const_logic_0;
        end if; 
    end process;


    p_weightGradientAvg_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_weightGradientAvg_offset_blk_n <= p_weightGradientAvg_offset_empty_n;
        else 
            p_weightGradientAvg_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_weightGradientAvg_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln546_loc_empty_n, p_initZero_empty_n)
    begin
        if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln546_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_weightGradientAvg_offset_read <= ap_const_logic_1;
        else 
            p_weightGradientAvg_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_438_p3 <= (empty_fu_434_p1 & ap_const_lv4_0);
    trunc_ln674_fu_456_p1 <= p_values_dout(32 - 1 downto 0);
    zext_ln404_31_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_16_fu_619_p2),64));
    zext_ln404_32_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_17_fu_634_p2),64));
    zext_ln404_33_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_18_fu_649_p2),64));
    zext_ln404_34_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_19_fu_664_p2),64));
    zext_ln404_35_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_20_fu_687_p2),64));
    zext_ln404_36_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_21_fu_702_p2),64));
    zext_ln404_37_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_22_fu_725_p2),64));
    zext_ln404_38_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_23_fu_740_p2),64));
    zext_ln404_39_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_24_fu_763_p2),64));
    zext_ln404_40_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_25_fu_778_p2),64));
    zext_ln404_41_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_26_fu_801_p2),64));
    zext_ln404_42_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_27_fu_816_p2),64));
    zext_ln404_43_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_28_fu_839_p2),64));
    zext_ln404_44_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_29_fu_854_p2),64));
    zext_ln404_45_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_30_reg_1183),64));
    zext_ln404_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln404_fu_446_p2),64));
end behav;
