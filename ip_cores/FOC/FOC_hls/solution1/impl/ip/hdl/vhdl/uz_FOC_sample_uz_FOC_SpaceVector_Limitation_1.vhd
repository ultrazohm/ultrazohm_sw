-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_FOC_sample_uz_FOC_SpaceVector_Limitation_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (255 downto 0);
    u_input_Volts_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    u_input_Volts_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_dc_volts : IN STD_LOGIC_VECTOR (31 downto 0);
    omega_el_rad_per_sec : IN STD_LOGIC_VECTOR (31 downto 0);
    i_actual_Ampere_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of uz_FOC_sample_uz_FOC_SpaceVector_Limitation_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (172 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (172 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (172 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (172 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (172 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (172 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (172 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state169 : STD_LOGIC_VECTOR (172 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state170 : STD_LOGIC_VECTOR (172 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state171 : STD_LOGIC_VECTOR (172 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state172 : STD_LOGIC_VECTOR (172 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state173 : STD_LOGIC_VECTOR (172 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_AC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_3F733333 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011100110011001100110011";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_3FDDB3D7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110111011011001111010111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_const_lv32_BF733333 : STD_LOGIC_VECTOR (31 downto 0) := "10111111011100110011001100110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv256_lc_2 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (172 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_pow_generic_float_s_fu_153_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state158 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state158 : signal is "none";
    signal grp_pow_generic_float_s_fu_173_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state162 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state162 : signal is "none";
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal ap_CS_fsm_state170 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state170 : signal is "none";
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_SV_max_reg_1107 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln35_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_4_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_4_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sign_4_fu_430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1138 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_reg_1143 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_2_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_2_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_3_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_3_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_1158 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_1_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_1_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal if_omega_equal_q_current_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal if_omega_equal_q_current_reg_1168 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal and_ln29_1_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_reg_1172 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_614_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal or_ln31_fu_624_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal or_ln31_reg_1181 : STD_LOGIC_VECTOR (255 downto 0);
    signal bitcast_ln350_1_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln59_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_1194 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_reg_1199 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_2_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_2_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_3_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_3_reg_1209 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_1_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_1_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal sign_6_fu_795_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sign_6_reg_1218 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln60_1_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln60_1_reg_1223 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal u_output_Volts_3_reg_1228 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal u_output_Volts_4_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal bitcast_ln350_fu_866_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal icmp_ln47_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_1_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_1_reg_1249 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_reg_1254 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_3_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_3_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_1_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_1_reg_1264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal sign_5_fu_1020_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sign_5_reg_1268 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal u_output_Volts_2_reg_1278 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal select_ln48_1_fu_1054_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln48_1_reg_1283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal u_output_Volts_reg_1288 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal u_output_Volts_1_reg_1294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state173 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state173 : signal is "none";
    signal grp_pow_generic_float_s_fu_153_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_153_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_153_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_153_ap_ready : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_153_base_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_float_s_fu_173_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_173_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_173_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_173_ap_ready : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_173_base_r : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_self_0_phi_fu_111_p10 : STD_LOGIC_VECTOR (255 downto 0);
    signal self_0_reg_108 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_phi_mux_u_output_Volts_7_phi_fu_126_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_output_Volts_7_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_u_output_Volts_6_phi_fu_141_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_output_Volts_6_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_float_s_fu_153_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (172 downto 0);
    signal ap_NS_fsm_state35 : STD_LOGIC;
    signal ap_NS_fsm_state71 : STD_LOGIC;
    signal ap_NS_fsm_state107 : STD_LOGIC;
    signal ap_NS_fsm_state143 : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal grp_pow_generic_float_s_fu_173_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_193_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal ap_CS_fsm_state159 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state159 : signal is "none";
    signal grp_fu_197_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal ap_CS_fsm_state171 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state171 : signal is "none";
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_CS_fsm_state163 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state163 : signal is "none";
    signal bitcast_ln35_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_281_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_fu_291_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_8_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_4_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_317_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_4_fu_327_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_10_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_9_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_8_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_354_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_9_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_10_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_2_fu_399_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_1_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_443_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_453_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_40_fu_461_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_1_fu_471_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln29_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_503_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_513_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln27_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_1_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_1_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_552_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_562_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_600_p4 : STD_LOGIC_VECTOR (231 downto 0);
    signal trunc_ln31_fu_610_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_633_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_1_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln59_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_646_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_fu_656_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_52_fu_664_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_1_fu_674_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln59_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_1_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_6_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_725_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_6_fu_735_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_14_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_13_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_6_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_13_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_14_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_6_fu_763_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln60_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln60_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln60_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln60_fu_803_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_855_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_858_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_fu_885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_871_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_fu_881_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_46_fu_889_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_1_fu_899_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln47_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln47_1_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_5_fu_947_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_950_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_5_fu_960_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_12_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_11_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_5_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_11_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_12_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_4_fu_988_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln48_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln48_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_fu_1028_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_208_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_214_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_220_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_226_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

    component uz_FOC_sample_pow_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_FOC_sample_fsqrt_32ns_32ns_32_8_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_pow_generic_float_s_fu_153 : component uz_FOC_sample_pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_153_ap_start,
        ap_done => grp_pow_generic_float_s_fu_153_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_153_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_153_ap_ready,
        ap_ce => ap_const_logic_1,
        base_r => grp_pow_generic_float_s_fu_153_base_r,
        ap_return => grp_pow_generic_float_s_fu_153_ap_return);

    grp_pow_generic_float_s_fu_173 : component uz_FOC_sample_pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_173_ap_start,
        ap_done => grp_pow_generic_float_s_fu_173_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_173_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_173_ap_ready,
        ap_ce => ap_const_logic_1,
        base_r => grp_pow_generic_float_s_fu_173_base_r,
        ap_return => grp_pow_generic_float_s_fu_173_ap_return);

    faddfsub_32ns_32ns_32_4_full_dsp_1_U27 : component uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_193_p0,
        din1 => grp_fu_193_p1,
        opcode => grp_fu_193_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U28 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_197_p0,
        din1 => grp_fu_197_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);

    fdiv_32ns_32ns_32_9_no_dsp_1_U29 : component uz_FOC_sample_fdiv_32ns_32ns_32_9_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_dc_volts,
        din1 => ap_const_lv32_3FDDB3D7,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U30 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_208_opcode,
        dout => grp_fu_208_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U31 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_214_opcode,
        dout => grp_fu_214_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U32 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => grp_fu_220_opcode,
        dout => grp_fu_220_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U33 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_226_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => grp_fu_226_opcode,
        dout => grp_fu_226_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U34 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_actual_Ampere_1,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_8,
        dout => grp_fu_232_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U35 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_actual_Ampere_1,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_238_p2);

    fsqrt_32ns_32ns_32_8_no_dsp_1_U36 : component uz_FOC_sample_fsqrt_32ns_32ns_32_8_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_260,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg(0) <= '0';
                ap_return_0_preg(1) <= '0';
                ap_return_0_preg(2) <= '0';
                ap_return_0_preg(3) <= '0';
                ap_return_0_preg(4) <= '0';
                ap_return_0_preg(5) <= '0';
                ap_return_0_preg(6) <= '0';
                ap_return_0_preg(7) <= '0';
                ap_return_0_preg(8) <= '0';
                ap_return_0_preg(9) <= '0';
                ap_return_0_preg(10) <= '0';
                ap_return_0_preg(11) <= '0';
                ap_return_0_preg(12) <= '0';
                ap_return_0_preg(13) <= '0';
                ap_return_0_preg(14) <= '0';
                ap_return_0_preg(15) <= '0';
                ap_return_0_preg(16) <= '0';
                ap_return_0_preg(24) <= '0';
                ap_return_0_preg(25) <= '0';
                ap_return_0_preg(26) <= '0';
                ap_return_0_preg(27) <= '0';
                ap_return_0_preg(28) <= '0';
                ap_return_0_preg(29) <= '0';
                ap_return_0_preg(30) <= '0';
                ap_return_0_preg(31) <= '0';
                ap_return_0_preg(32) <= '0';
                ap_return_0_preg(33) <= '0';
                ap_return_0_preg(34) <= '0';
                ap_return_0_preg(35) <= '0';
                ap_return_0_preg(36) <= '0';
                ap_return_0_preg(37) <= '0';
                ap_return_0_preg(38) <= '0';
                ap_return_0_preg(39) <= '0';
                ap_return_0_preg(40) <= '0';
                ap_return_0_preg(41) <= '0';
                ap_return_0_preg(42) <= '0';
                ap_return_0_preg(43) <= '0';
                ap_return_0_preg(44) <= '0';
                ap_return_0_preg(45) <= '0';
                ap_return_0_preg(46) <= '0';
                ap_return_0_preg(47) <= '0';
                ap_return_0_preg(48) <= '0';
                ap_return_0_preg(49) <= '0';
                ap_return_0_preg(50) <= '0';
                ap_return_0_preg(51) <= '0';
                ap_return_0_preg(52) <= '0';
                ap_return_0_preg(53) <= '0';
                ap_return_0_preg(54) <= '0';
                ap_return_0_preg(55) <= '0';
                ap_return_0_preg(56) <= '0';
                ap_return_0_preg(57) <= '0';
                ap_return_0_preg(58) <= '0';
                ap_return_0_preg(59) <= '0';
                ap_return_0_preg(60) <= '0';
                ap_return_0_preg(61) <= '0';
                ap_return_0_preg(62) <= '0';
                ap_return_0_preg(63) <= '0';
                ap_return_0_preg(64) <= '0';
                ap_return_0_preg(65) <= '0';
                ap_return_0_preg(66) <= '0';
                ap_return_0_preg(67) <= '0';
                ap_return_0_preg(68) <= '0';
                ap_return_0_preg(69) <= '0';
                ap_return_0_preg(70) <= '0';
                ap_return_0_preg(71) <= '0';
                ap_return_0_preg(72) <= '0';
                ap_return_0_preg(73) <= '0';
                ap_return_0_preg(74) <= '0';
                ap_return_0_preg(75) <= '0';
                ap_return_0_preg(76) <= '0';
                ap_return_0_preg(77) <= '0';
                ap_return_0_preg(78) <= '0';
                ap_return_0_preg(79) <= '0';
                ap_return_0_preg(80) <= '0';
                ap_return_0_preg(81) <= '0';
                ap_return_0_preg(82) <= '0';
                ap_return_0_preg(83) <= '0';
                ap_return_0_preg(84) <= '0';
                ap_return_0_preg(85) <= '0';
                ap_return_0_preg(86) <= '0';
                ap_return_0_preg(87) <= '0';
                ap_return_0_preg(88) <= '0';
                ap_return_0_preg(89) <= '0';
                ap_return_0_preg(90) <= '0';
                ap_return_0_preg(91) <= '0';
                ap_return_0_preg(92) <= '0';
                ap_return_0_preg(93) <= '0';
                ap_return_0_preg(94) <= '0';
                ap_return_0_preg(95) <= '0';
                ap_return_0_preg(96) <= '0';
                ap_return_0_preg(97) <= '0';
                ap_return_0_preg(98) <= '0';
                ap_return_0_preg(99) <= '0';
                ap_return_0_preg(100) <= '0';
                ap_return_0_preg(101) <= '0';
                ap_return_0_preg(102) <= '0';
                ap_return_0_preg(103) <= '0';
                ap_return_0_preg(104) <= '0';
                ap_return_0_preg(105) <= '0';
                ap_return_0_preg(106) <= '0';
                ap_return_0_preg(107) <= '0';
                ap_return_0_preg(108) <= '0';
                ap_return_0_preg(109) <= '0';
                ap_return_0_preg(110) <= '0';
                ap_return_0_preg(111) <= '0';
                ap_return_0_preg(112) <= '0';
                ap_return_0_preg(113) <= '0';
                ap_return_0_preg(114) <= '0';
                ap_return_0_preg(115) <= '0';
                ap_return_0_preg(116) <= '0';
                ap_return_0_preg(117) <= '0';
                ap_return_0_preg(118) <= '0';
                ap_return_0_preg(119) <= '0';
                ap_return_0_preg(120) <= '0';
                ap_return_0_preg(121) <= '0';
                ap_return_0_preg(122) <= '0';
                ap_return_0_preg(123) <= '0';
                ap_return_0_preg(124) <= '0';
                ap_return_0_preg(125) <= '0';
                ap_return_0_preg(126) <= '0';
                ap_return_0_preg(127) <= '0';
                ap_return_0_preg(128) <= '0';
                ap_return_0_preg(129) <= '0';
                ap_return_0_preg(130) <= '0';
                ap_return_0_preg(131) <= '0';
                ap_return_0_preg(132) <= '0';
                ap_return_0_preg(133) <= '0';
                ap_return_0_preg(134) <= '0';
                ap_return_0_preg(135) <= '0';
                ap_return_0_preg(136) <= '0';
                ap_return_0_preg(137) <= '0';
                ap_return_0_preg(138) <= '0';
                ap_return_0_preg(139) <= '0';
                ap_return_0_preg(140) <= '0';
                ap_return_0_preg(141) <= '0';
                ap_return_0_preg(142) <= '0';
                ap_return_0_preg(143) <= '0';
                ap_return_0_preg(144) <= '0';
                ap_return_0_preg(145) <= '0';
                ap_return_0_preg(146) <= '0';
                ap_return_0_preg(147) <= '0';
                ap_return_0_preg(148) <= '0';
                ap_return_0_preg(149) <= '0';
                ap_return_0_preg(150) <= '0';
                ap_return_0_preg(151) <= '0';
                ap_return_0_preg(152) <= '0';
                ap_return_0_preg(153) <= '0';
                ap_return_0_preg(154) <= '0';
                ap_return_0_preg(155) <= '0';
                ap_return_0_preg(156) <= '0';
                ap_return_0_preg(157) <= '0';
                ap_return_0_preg(158) <= '0';
                ap_return_0_preg(159) <= '0';
                ap_return_0_preg(160) <= '0';
                ap_return_0_preg(161) <= '0';
                ap_return_0_preg(162) <= '0';
                ap_return_0_preg(163) <= '0';
                ap_return_0_preg(164) <= '0';
                ap_return_0_preg(165) <= '0';
                ap_return_0_preg(166) <= '0';
                ap_return_0_preg(167) <= '0';
                ap_return_0_preg(168) <= '0';
                ap_return_0_preg(169) <= '0';
                ap_return_0_preg(170) <= '0';
                ap_return_0_preg(171) <= '0';
                ap_return_0_preg(172) <= '0';
                ap_return_0_preg(173) <= '0';
                ap_return_0_preg(174) <= '0';
                ap_return_0_preg(175) <= '0';
                ap_return_0_preg(176) <= '0';
                ap_return_0_preg(177) <= '0';
                ap_return_0_preg(178) <= '0';
                ap_return_0_preg(179) <= '0';
                ap_return_0_preg(180) <= '0';
                ap_return_0_preg(181) <= '0';
                ap_return_0_preg(182) <= '0';
                ap_return_0_preg(183) <= '0';
                ap_return_0_preg(184) <= '0';
                ap_return_0_preg(185) <= '0';
                ap_return_0_preg(186) <= '0';
                ap_return_0_preg(187) <= '0';
                ap_return_0_preg(188) <= '0';
                ap_return_0_preg(189) <= '0';
                ap_return_0_preg(190) <= '0';
                ap_return_0_preg(191) <= '0';
                ap_return_0_preg(192) <= '0';
                ap_return_0_preg(193) <= '0';
                ap_return_0_preg(194) <= '0';
                ap_return_0_preg(195) <= '0';
                ap_return_0_preg(196) <= '0';
                ap_return_0_preg(197) <= '0';
                ap_return_0_preg(198) <= '0';
                ap_return_0_preg(199) <= '0';
                ap_return_0_preg(200) <= '0';
                ap_return_0_preg(201) <= '0';
                ap_return_0_preg(202) <= '0';
                ap_return_0_preg(203) <= '0';
                ap_return_0_preg(204) <= '0';
                ap_return_0_preg(205) <= '0';
                ap_return_0_preg(206) <= '0';
                ap_return_0_preg(207) <= '0';
                ap_return_0_preg(208) <= '0';
                ap_return_0_preg(209) <= '0';
                ap_return_0_preg(210) <= '0';
                ap_return_0_preg(211) <= '0';
                ap_return_0_preg(212) <= '0';
                ap_return_0_preg(213) <= '0';
                ap_return_0_preg(214) <= '0';
                ap_return_0_preg(215) <= '0';
                ap_return_0_preg(216) <= '0';
                ap_return_0_preg(217) <= '0';
                ap_return_0_preg(218) <= '0';
                ap_return_0_preg(219) <= '0';
                ap_return_0_preg(220) <= '0';
                ap_return_0_preg(221) <= '0';
                ap_return_0_preg(222) <= '0';
                ap_return_0_preg(223) <= '0';
                ap_return_0_preg(224) <= '0';
                ap_return_0_preg(225) <= '0';
                ap_return_0_preg(226) <= '0';
                ap_return_0_preg(227) <= '0';
                ap_return_0_preg(228) <= '0';
                ap_return_0_preg(229) <= '0';
                ap_return_0_preg(230) <= '0';
                ap_return_0_preg(231) <= '0';
                ap_return_0_preg(232) <= '0';
                ap_return_0_preg(233) <= '0';
                ap_return_0_preg(234) <= '0';
                ap_return_0_preg(235) <= '0';
                ap_return_0_preg(236) <= '0';
                ap_return_0_preg(237) <= '0';
                ap_return_0_preg(238) <= '0';
                ap_return_0_preg(239) <= '0';
                ap_return_0_preg(240) <= '0';
                ap_return_0_preg(241) <= '0';
                ap_return_0_preg(242) <= '0';
                ap_return_0_preg(243) <= '0';
                ap_return_0_preg(244) <= '0';
                ap_return_0_preg(245) <= '0';
                ap_return_0_preg(246) <= '0';
                ap_return_0_preg(247) <= '0';
                ap_return_0_preg(248) <= '0';
                ap_return_0_preg(249) <= '0';
                ap_return_0_preg(250) <= '0';
                ap_return_0_preg(251) <= '0';
                ap_return_0_preg(252) <= '0';
                ap_return_0_preg(253) <= '0';
                ap_return_0_preg(254) <= '0';
                ap_return_0_preg(255) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                                        ap_return_0_preg(16 downto 0) <= ap_phi_mux_self_0_phi_fu_111_p10(16 downto 0);                    ap_return_0_preg(255 downto 24) <= ap_phi_mux_self_0_phi_fu_111_p10(255 downto 24);
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                    ap_return_1_preg <= ap_phi_mux_u_output_Volts_6_phi_fu_141_p10;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                    ap_return_2_preg <= ap_phi_mux_u_output_Volts_7_phi_fu_126_p10;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_153_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_153_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state143) and (ap_const_logic_1 = ap_CS_fsm_state142)) or ((ap_const_logic_1 = ap_NS_fsm_state107) and (ap_const_logic_1 = ap_CS_fsm_state106)) or ((ap_const_logic_1 = ap_NS_fsm_state71) and (ap_const_logic_1 = ap_CS_fsm_state70)) or ((ap_const_logic_1 = ap_NS_fsm_state35) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
                    grp_pow_generic_float_s_fu_153_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_153_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_153_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_173_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_173_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state143) and (ap_const_logic_1 = ap_CS_fsm_state142)) or ((ap_const_logic_1 = ap_NS_fsm_state71) and (ap_const_logic_1 = ap_CS_fsm_state70)))) then 
                    grp_pow_generic_float_s_fu_173_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_173_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_173_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    self_0_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln29_1_fu_594_p2) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                                self_0_reg_108(16 downto 0) <= and_ln_fu_614_p4(16 downto 0);                self_0_reg_108(255 downto 24) <= and_ln_fu_614_p4(255 downto 24);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state138) or ((ap_const_lv1_1 = and_ln59_1_reg_1214) and (ap_const_lv1_1 = and_ln29_1_reg_1172) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102)) or ((ap_const_lv1_1 = and_ln47_1_reg_1264) and (ap_const_lv1_1 = and_ln29_1_reg_1172) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102)))) then 
                                self_0_reg_108(16 downto 0) <= or_ln31_reg_1181(16 downto 0);                self_0_reg_108(255 downto 24) <= or_ln31_reg_1181(255 downto 24);
            end if; 
        end if;
    end process;

    u_output_Volts_6_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                u_output_Volts_6_reg_138 <= reg_271;
            elsif (((ap_const_lv1_1 = and_ln59_1_reg_1214) and (ap_const_lv1_1 = and_ln29_1_reg_1172) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                u_output_Volts_6_reg_138 <= u_output_Volts_4_reg_1234;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state138) or ((ap_const_lv1_0 = and_ln29_1_fu_594_p2) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
                u_output_Volts_6_reg_138 <= u_input_Volts_0;
            elsif (((ap_const_lv1_1 = and_ln47_1_reg_1264) and (ap_const_lv1_1 = and_ln29_1_reg_1172) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                u_output_Volts_6_reg_138 <= u_output_Volts_reg_1288;
            end if; 
        end if;
    end process;

    u_output_Volts_7_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) or ((ap_const_lv1_0 = and_ln29_1_fu_594_p2) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
                u_output_Volts_7_reg_123 <= u_input_Volts_1;
            elsif (((ap_const_lv1_1 = and_ln59_1_reg_1214) and (ap_const_lv1_1 = and_ln29_1_reg_1172) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                u_output_Volts_7_reg_123 <= u_output_Volts_3_reg_1228;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
                u_output_Volts_7_reg_123 <= u_output_Volts_2_reg_1278;
            elsif (((ap_const_lv1_1 = and_ln47_1_reg_1264) and (ap_const_lv1_1 = and_ln29_1_reg_1172) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                u_output_Volts_7_reg_123 <= u_output_Volts_1_reg_1294;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                U_SV_max_reg_1107 <= grp_fu_202_p2;
                or_ln35_4_reg_1122 <= or_ln35_4_fu_343_p2;
                or_ln35_reg_1116 <= or_ln35_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                and_ln29_1_reg_1172 <= and_ln29_1_fu_594_p2;
                if_omega_equal_q_current_reg_1168 <= if_omega_equal_q_current_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                and_ln47_1_reg_1264 <= and_ln47_1_fu_941_p2;
                    sign_5_reg_1268(29 downto 23) <= sign_5_fu_1020_p3(29 downto 23);    sign_5_reg_1268(31) <= sign_5_fu_1020_p3(31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                and_ln59_1_reg_1214 <= and_ln59_1_fu_716_p2;
                    sign_6_reg_1218(29 downto 23) <= sign_6_fu_795_p3(29 downto 23);    sign_6_reg_1218(31) <= sign_6_fu_795_p3(31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                icmp_ln27_1_reg_1143 <= icmp_ln27_1_fu_481_p2;
                icmp_ln27_2_reg_1148 <= icmp_ln27_2_fu_487_p2;
                icmp_ln27_3_reg_1153 <= icmp_ln27_3_fu_493_p2;
                icmp_ln27_reg_1138 <= icmp_ln27_fu_475_p2;
                icmp_ln29_1_reg_1163 <= icmp_ln29_1_fu_523_p2;
                icmp_ln29_reg_1158 <= icmp_ln29_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                icmp_ln47_1_reg_1249 <= icmp_ln47_1_fu_909_p2;
                icmp_ln47_2_reg_1254 <= icmp_ln47_2_fu_915_p2;
                icmp_ln47_3_reg_1259 <= icmp_ln47_3_fu_921_p2;
                icmp_ln47_reg_1244 <= icmp_ln47_fu_903_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                icmp_ln59_1_reg_1199 <= icmp_ln59_1_fu_684_p2;
                icmp_ln59_2_reg_1204 <= icmp_ln59_2_fu_690_p2;
                icmp_ln59_3_reg_1209 <= icmp_ln59_3_fu_696_p2;
                icmp_ln59_reg_1194 <= icmp_ln59_fu_678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln29_1_fu_594_p2) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    or_ln31_reg_1181(15 downto 0) <= or_ln31_fu_624_p2(15 downto 0);    or_ln31_reg_1181(255 downto 24) <= or_ln31_fu_624_p2(255 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state158) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_249 <= grp_pow_generic_float_s_fu_153_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state158) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_255 <= grp_pow_generic_float_s_fu_173_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state162) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_260 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state170) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_265 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_271 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state139)) then
                    select_ln48_1_reg_1283(1 downto 0) <= select_ln48_1_fu_1054_p3(1 downto 0);    select_ln48_1_reg_1283(5 downto 4) <= select_ln48_1_fu_1054_p3(5 downto 4);    select_ln48_1_reg_1283(9 downto 8) <= select_ln48_1_fu_1054_p3(9 downto 8);    select_ln48_1_reg_1283(13 downto 12) <= select_ln48_1_fu_1054_p3(13 downto 12);    select_ln48_1_reg_1283(17 downto 16) <= select_ln48_1_fu_1054_p3(17 downto 16);    select_ln48_1_reg_1283(22 downto 20) <= select_ln48_1_fu_1054_p3(22 downto 20);    select_ln48_1_reg_1283(29 downto 24) <= select_ln48_1_fu_1054_p3(29 downto 24);    select_ln48_1_reg_1283(31) <= select_ln48_1_fu_1054_p3(31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                    select_ln60_1_reg_1223(1 downto 0) <= select_ln60_1_fu_829_p3(1 downto 0);    select_ln60_1_reg_1223(5 downto 4) <= select_ln60_1_fu_829_p3(5 downto 4);    select_ln60_1_reg_1223(9 downto 8) <= select_ln60_1_fu_829_p3(9 downto 8);    select_ln60_1_reg_1223(13 downto 12) <= select_ln60_1_fu_829_p3(13 downto 12);    select_ln60_1_reg_1223(17 downto 16) <= select_ln60_1_fu_829_p3(17 downto 16);    select_ln60_1_reg_1223(22 downto 20) <= select_ln60_1_fu_829_p3(22 downto 20);    select_ln60_1_reg_1223(29 downto 24) <= select_ln60_1_fu_829_p3(29 downto 24);    select_ln60_1_reg_1223(31) <= select_ln60_1_fu_829_p3(31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state122)) then
                tmp_4_reg_1273 <= grp_pow_generic_float_s_fu_153_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state173)) then
                u_output_Volts_1_reg_1294 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state137)) then
                u_output_Volts_2_reg_1278 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                u_output_Volts_3_reg_1228 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                u_output_Volts_4_reg_1234 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state142)) then
                u_output_Volts_reg_1288 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    or_ln31_reg_1181(23 downto 16) <= "00000001";
    sign_6_reg_1218(22 downto 0) <= "00000000000000000000000";
    sign_6_reg_1218(30) <= '0';
    select_ln60_1_reg_1223(3 downto 2) <= "00";
    select_ln60_1_reg_1223(7 downto 6) <= "00";
    select_ln60_1_reg_1223(11 downto 10) <= "00";
    select_ln60_1_reg_1223(15 downto 14) <= "00";
    select_ln60_1_reg_1223(19 downto 18) <= "00";
    select_ln60_1_reg_1223(23 downto 23) <= "0";
    select_ln60_1_reg_1223(30) <= '0';
    sign_5_reg_1268(22 downto 0) <= "00000000000000000000000";
    sign_5_reg_1268(30) <= '0';
    select_ln48_1_reg_1283(3 downto 2) <= "00";
    select_ln48_1_reg_1283(7 downto 6) <= "00";
    select_ln48_1_reg_1283(11 downto 10) <= "00";
    select_ln48_1_reg_1283(15 downto 14) <= "00";
    select_ln48_1_reg_1283(19 downto 18) <= "00";
    select_ln48_1_reg_1283(23 downto 23) <= "0";
    select_ln48_1_reg_1283(30) <= '0';
    self_0_reg_108(23 downto 17) <= "0000000";
    ap_return_0_preg(23 downto 17) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, if_omega_equal_q_current_fu_543_p2, ap_CS_fsm_state30, and_ln29_1_fu_594_p2, and_ln59_1_fu_716_p2, ap_CS_fsm_state34, and_ln47_1_fu_941_p2, ap_CS_fsm_state106)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_lv1_1 = and_ln29_1_fu_594_p2) and (if_omega_equal_q_current_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                elsif (((ap_const_lv1_1 = and_ln29_1_fu_594_p2) and (if_omega_equal_q_current_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_lv1_1 = and_ln59_1_fu_716_p2) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                if (((ap_const_lv1_1 = and_ln47_1_fu_941_p2) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                    ap_NS_fsm <= ap_ST_fsm_state139;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state160;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state166;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when ap_ST_fsm_state167 => 
                ap_NS_fsm <= ap_ST_fsm_state168;
            when ap_ST_fsm_state168 => 
                ap_NS_fsm <= ap_ST_fsm_state169;
            when ap_ST_fsm_state169 => 
                ap_NS_fsm <= ap_ST_fsm_state170;
            when ap_ST_fsm_state170 => 
                ap_NS_fsm <= ap_ST_fsm_state171;
            when ap_ST_fsm_state171 => 
                ap_NS_fsm <= ap_ST_fsm_state172;
            when ap_ST_fsm_state172 => 
                ap_NS_fsm <= ap_ST_fsm_state173;
            when ap_ST_fsm_state173 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln27_fu_537_p2 <= (or_ln27_fu_529_p2 and or_ln27_1_fu_533_p2);
    and_ln29_1_fu_594_p2 <= (grp_fu_214_p2 and and_ln29_fu_588_p2);
    and_ln29_fu_588_p2 <= (or_ln29_fu_566_p2 and or_ln29_1_fu_582_p2);
    and_ln35_10_fu_425_p2 <= (or_ln35_4_reg_1122 and and_ln35_fu_419_p2);
    and_ln35_11_fu_982_p2 <= (or_ln35_5_fu_976_p2 and grp_fu_214_p2);
    and_ln35_12_fu_1014_p2 <= (or_ln35_5_fu_976_p2 and and_ln35_fu_1008_p2);
    and_ln35_13_fu_757_p2 <= (or_ln35_6_fu_751_p2 and grp_fu_214_p2);
    and_ln35_14_fu_789_p2 <= (or_ln35_6_fu_751_p2 and and_ln35_fu_783_p2);
    and_ln35_8_fu_380_p2 <= (or_ln35_reg_1116 and and_ln35_fu_374_p2);
    and_ln35_9_fu_394_p2 <= (or_ln35_4_reg_1122 and grp_fu_226_p2);
    and_ln35_fu_1008_p2 <= (xor_ln35_fu_996_p2 and xor_ln35_fu_1002_p2);
    and_ln35_fu_349_p2 <= (or_ln35_reg_1116 and grp_fu_208_p2);
    and_ln35_fu_374_p2 <= (xor_ln35_fu_368_p2 and xor_ln35_fu_362_p2);
    and_ln35_fu_419_p2 <= (xor_ln35_fu_413_p2 and xor_ln35_fu_407_p2);
    and_ln35_fu_783_p2 <= (xor_ln35_fu_777_p2 and xor_ln35_fu_771_p2);
    and_ln47_1_fu_941_p2 <= (grp_fu_208_p2 and and_ln47_fu_935_p2);
    and_ln47_fu_935_p2 <= (or_ln47_fu_927_p2 and or_ln47_1_fu_931_p2);
    and_ln48_fu_1048_p2 <= (xor_ln48_fu_1042_p2 and xor_ln48_fu_1036_p2);
    and_ln59_1_fu_716_p2 <= (grp_fu_208_p2 and and_ln59_fu_710_p2);
    and_ln59_fu_710_p2 <= (or_ln59_fu_702_p2 and or_ln59_1_fu_706_p2);
    and_ln60_fu_823_p2 <= (xor_ln60_fu_817_p2 and xor_ln60_fu_811_p2);
    and_ln_fu_614_p4 <= ((tmp_5_fu_600_p4 & ap_const_lv8_0) & trunc_ln31_fu_610_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state158 <= ap_CS_fsm(157);
    ap_CS_fsm_state159 <= ap_CS_fsm(158);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state162 <= ap_CS_fsm(161);
    ap_CS_fsm_state163 <= ap_CS_fsm(162);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state170 <= ap_CS_fsm(169);
    ap_CS_fsm_state171 <= ap_CS_fsm(170);
    ap_CS_fsm_state173 <= ap_CS_fsm(172);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_NS_fsm_state107 <= ap_NS_fsm(106);
    ap_NS_fsm_state143 <= ap_NS_fsm(142);
    ap_NS_fsm_state35 <= ap_NS_fsm(34);
    ap_NS_fsm_state71 <= ap_NS_fsm(70);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state102) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_self_0_phi_fu_111_p10_assign_proc : process(if_omega_equal_q_current_reg_1168, and_ln29_1_reg_1172, or_ln31_reg_1181, and_ln59_1_reg_1214, and_ln47_1_reg_1264, self_0_reg_108, ap_CS_fsm_state102)
    begin
        if ((((ap_const_lv1_1 = and_ln59_1_reg_1214) and (ap_const_lv1_1 = and_ln29_1_reg_1172) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102)) or ((ap_const_lv1_1 = and_ln47_1_reg_1264) and (ap_const_lv1_1 = and_ln29_1_reg_1172) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102)))) then 
            ap_phi_mux_self_0_phi_fu_111_p10 <= or_ln31_reg_1181;
        else 
            ap_phi_mux_self_0_phi_fu_111_p10 <= self_0_reg_108;
        end if; 
    end process;


    ap_phi_mux_u_output_Volts_6_phi_fu_141_p10_assign_proc : process(if_omega_equal_q_current_reg_1168, and_ln29_1_reg_1172, and_ln59_1_reg_1214, u_output_Volts_4_reg_1234, and_ln47_1_reg_1264, u_output_Volts_reg_1288, ap_CS_fsm_state102, u_output_Volts_6_reg_138)
    begin
        if (((ap_const_lv1_1 = and_ln29_1_reg_1172) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
            if (((ap_const_lv1_1 = and_ln59_1_reg_1214) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_0))) then 
                ap_phi_mux_u_output_Volts_6_phi_fu_141_p10 <= u_output_Volts_4_reg_1234;
            elsif (((ap_const_lv1_1 = and_ln47_1_reg_1264) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_1))) then 
                ap_phi_mux_u_output_Volts_6_phi_fu_141_p10 <= u_output_Volts_reg_1288;
            else 
                ap_phi_mux_u_output_Volts_6_phi_fu_141_p10 <= u_output_Volts_6_reg_138;
            end if;
        else 
            ap_phi_mux_u_output_Volts_6_phi_fu_141_p10 <= u_output_Volts_6_reg_138;
        end if; 
    end process;


    ap_phi_mux_u_output_Volts_7_phi_fu_126_p10_assign_proc : process(if_omega_equal_q_current_reg_1168, and_ln29_1_reg_1172, and_ln59_1_reg_1214, u_output_Volts_3_reg_1228, and_ln47_1_reg_1264, u_output_Volts_1_reg_1294, ap_CS_fsm_state102, u_output_Volts_7_reg_123)
    begin
        if (((ap_const_lv1_1 = and_ln29_1_reg_1172) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
            if (((ap_const_lv1_1 = and_ln59_1_reg_1214) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_0))) then 
                ap_phi_mux_u_output_Volts_7_phi_fu_126_p10 <= u_output_Volts_3_reg_1228;
            elsif (((ap_const_lv1_1 = and_ln47_1_reg_1264) and (if_omega_equal_q_current_reg_1168 = ap_const_lv1_1))) then 
                ap_phi_mux_u_output_Volts_7_phi_fu_126_p10 <= u_output_Volts_1_reg_1294;
            else 
                ap_phi_mux_u_output_Volts_7_phi_fu_126_p10 <= u_output_Volts_7_reg_123;
            end if;
        else 
            ap_phi_mux_u_output_Volts_7_phi_fu_126_p10 <= u_output_Volts_7_reg_123;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_phi_mux_self_0_phi_fu_111_p10, ap_CS_fsm_state102, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            ap_return_0 <= ap_phi_mux_self_0_phi_fu_111_p10;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state102, ap_phi_mux_u_output_Volts_6_phi_fu_141_p10, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            ap_return_1 <= ap_phi_mux_u_output_Volts_6_phi_fu_141_p10;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state102, ap_phi_mux_u_output_Volts_7_phi_fu_126_p10, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            ap_return_2 <= ap_phi_mux_u_output_Volts_7_phi_fu_126_p10;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    bitcast_ln27_1_fu_457_p1 <= sign_4_fu_430_p3;
    bitcast_ln27_fu_439_p1 <= sign_fu_385_p3;
    bitcast_ln29_1_fu_549_p1 <= U_SV_max_reg_1107;
    bitcast_ln29_fu_499_p1 <= reg_265;
    bitcast_ln350_1_fu_641_p1 <= zext_ln368_1_fu_637_p1;
    bitcast_ln350_fu_866_p1 <= zext_ln368_fu_862_p1;
    bitcast_ln35_4_fu_313_p1 <= i_actual_Ampere_1;
    bitcast_ln35_5_fu_947_p1 <= u_input_Volts_1;
    bitcast_ln35_6_fu_722_p1 <= u_input_Volts_0;
    bitcast_ln35_fu_277_p1 <= omega_el_rad_per_sec;
    bitcast_ln47_fu_885_p1 <= reg_271;
    bitcast_ln59_fu_660_p1 <= reg_271;

    grp_fu_193_opcode_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state51, ap_CS_fsm_state87, ap_CS_fsm_state123, ap_CS_fsm_state159)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state159) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_fu_193_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_193_opcode <= ap_const_lv2_0;
        else 
            grp_fu_193_opcode <= "XX";
        end if; 
    end process;


    grp_fu_193_p0_assign_proc : process(reg_249, tmp_4_reg_1273, ap_CS_fsm_state17, ap_CS_fsm_state51, ap_CS_fsm_state87, ap_CS_fsm_state123, ap_CS_fsm_state159)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            grp_fu_193_p0 <= tmp_4_reg_1273;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state159) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_193_p0 <= reg_249;
        else 
            grp_fu_193_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_193_p1_assign_proc : process(reg_249, reg_255, ap_CS_fsm_state17, ap_CS_fsm_state51, ap_CS_fsm_state87, ap_CS_fsm_state123, ap_CS_fsm_state159)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            grp_fu_193_p1 <= reg_249;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state159) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_193_p1 <= reg_255;
        else 
            grp_fu_193_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_197_p0_assign_proc : process(U_SV_max_reg_1107, if_omega_equal_q_current_fu_543_p2, ap_CS_fsm_state30, and_ln29_1_fu_594_p2, sign_6_reg_1218, select_ln60_1_reg_1223, sign_5_reg_1268, select_ln48_1_reg_1283, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state99, ap_CS_fsm_state135, ap_CS_fsm_state140, ap_CS_fsm_state171)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            grp_fu_197_p0 <= select_ln48_1_reg_1283;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state171) or (ap_const_logic_1 = ap_CS_fsm_state135))) then 
            grp_fu_197_p0 <= sign_5_reg_1268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_197_p0 <= select_ln60_1_reg_1223;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            grp_fu_197_p0 <= sign_6_reg_1218;
        elsif ((((ap_const_lv1_1 = and_ln29_1_fu_594_p2) and (if_omega_equal_q_current_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_lv1_1 = and_ln29_1_fu_594_p2) and (if_omega_equal_q_current_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_197_p0 <= U_SV_max_reg_1107;
        else 
            grp_fu_197_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_197_p1_assign_proc : process(reg_265, U_SV_max_reg_1107, if_omega_equal_q_current_fu_543_p2, ap_CS_fsm_state30, and_ln29_1_fu_594_p2, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state99, ap_CS_fsm_state135, ap_CS_fsm_state140, ap_CS_fsm_state171)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            grp_fu_197_p1 <= U_SV_max_reg_1107;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state171) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            grp_fu_197_p1 <= reg_265;
        elsif ((((ap_const_lv1_1 = and_ln29_1_fu_594_p2) and (if_omega_equal_q_current_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_lv1_1 = and_ln29_1_fu_594_p2) and (if_omega_equal_q_current_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_197_p1 <= ap_const_lv32_3F733333;
        else 
            grp_fu_197_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state33, and_ln59_1_fu_716_p2, ap_CS_fsm_state34, ap_CS_fsm_state105, and_ln47_1_fu_941_p2, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_208_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_208_opcode <= ap_const_lv5_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_lv1_1 = and_ln47_1_fu_941_p2) and (ap_const_logic_1 = ap_CS_fsm_state106)) or ((ap_const_lv1_1 = and_ln59_1_fu_716_p2) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            grp_fu_208_opcode <= ap_const_lv5_4;
        else 
            grp_fu_208_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_208_p0_assign_proc : process(u_input_Volts_0, u_input_Volts_1, omega_el_rad_per_sec, ap_CS_fsm_state28, sign_fu_385_p3, ap_CS_fsm_state29, bitcast_ln350_1_fu_641_p1, ap_CS_fsm_state33, ap_CS_fsm_state34, bitcast_ln350_fu_866_p1, ap_CS_fsm_state105, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_fu_208_p0 <= u_input_Volts_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_fu_208_p0 <= bitcast_ln350_fu_866_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_208_p0 <= u_input_Volts_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_208_p0 <= bitcast_ln350_1_fu_641_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_208_p0 <= sign_fu_385_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_208_p0 <= omega_el_rad_per_sec;
        else 
            grp_fu_208_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_p1_assign_proc : process(ap_CS_fsm_state28, reg_271, ap_CS_fsm_state29, sign_4_fu_430_p3, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state105, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_208_p1 <= reg_271;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_208_p1 <= sign_4_fu_430_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_208_p1 <= ap_const_lv32_0;
        else 
            grp_fu_208_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_214_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state33, and_ln59_1_fu_716_p2, ap_CS_fsm_state34, ap_CS_fsm_state105, and_ln47_1_fu_941_p2, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_214_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_214_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_lv1_1 = and_ln47_1_fu_941_p2) and (ap_const_logic_1 = ap_CS_fsm_state106)) or ((ap_const_lv1_1 = and_ln59_1_fu_716_p2) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            grp_fu_214_opcode <= ap_const_lv5_8;
        else 
            grp_fu_214_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_214_p0_assign_proc : process(u_input_Volts_0, u_input_Volts_1, omega_el_rad_per_sec, reg_265, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state105, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_214_p0 <= u_input_Volts_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_214_p0 <= u_input_Volts_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_214_p0 <= reg_265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_214_p0 <= omega_el_rad_per_sec;
        else 
            grp_fu_214_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_214_p1_assign_proc : process(ap_CS_fsm_state28, U_SV_max_reg_1107, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state105, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_214_p1 <= U_SV_max_reg_1107;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_214_p1 <= ap_const_lv32_0;
        else 
            grp_fu_214_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_220_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state33, and_ln59_1_fu_716_p2, ap_CS_fsm_state34, ap_CS_fsm_state105, and_ln47_1_fu_941_p2, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_220_opcode <= ap_const_lv5_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_lv1_1 = and_ln47_1_fu_941_p2) and (ap_const_logic_1 = ap_CS_fsm_state106)) or ((ap_const_lv1_1 = and_ln59_1_fu_716_p2) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            grp_fu_220_opcode <= ap_const_lv5_1;
        else 
            grp_fu_220_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_220_p0_assign_proc : process(u_input_Volts_0, u_input_Volts_1, omega_el_rad_per_sec, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state105, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_220_p0 <= u_input_Volts_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_220_p0 <= u_input_Volts_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_220_p0 <= omega_el_rad_per_sec;
        else 
            grp_fu_220_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_226_opcode <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_226_opcode <= ap_const_lv5_4;
        else 
            grp_fu_226_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_226_p0_assign_proc : process(u_input_Volts_0, u_input_Volts_1, i_actual_Ampere_1, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state105)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_fu_226_p0 <= u_input_Volts_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_226_p0 <= u_input_Volts_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_226_p0 <= i_actual_Ampere_1;
        else 
            grp_fu_226_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_pow_generic_float_s_fu_153_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_pow_generic_float_s_fu_153_ap_start_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_pow_generic_float_s_fu_153_ap_start <= ap_const_logic_1;
        else 
            grp_pow_generic_float_s_fu_153_ap_start <= grp_pow_generic_float_s_fu_153_ap_start_reg;
        end if; 
    end process;


    grp_pow_generic_float_s_fu_153_base_r_assign_proc : process(ap_CS_fsm_state1, u_input_Volts_0, U_SV_max_reg_1107, ap_CS_fsm_state35, ap_CS_fsm_state71, ap_CS_fsm_state107, ap_CS_fsm_state143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_pow_generic_float_s_fu_153_base_r <= U_SV_max_reg_1107;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_pow_generic_float_s_fu_153_base_r <= u_input_Volts_0;
        else 
            grp_pow_generic_float_s_fu_153_base_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_pow_generic_float_s_fu_173_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_pow_generic_float_s_fu_173_ap_start_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_pow_generic_float_s_fu_173_ap_start <= ap_const_logic_1;
        else 
            grp_pow_generic_float_s_fu_173_ap_start <= grp_pow_generic_float_s_fu_173_ap_start_reg;
        end if; 
    end process;


    grp_pow_generic_float_s_fu_173_base_r_assign_proc : process(ap_CS_fsm_state1, u_input_Volts_1, u_output_Volts_3_reg_1228, u_output_Volts_reg_1288, ap_CS_fsm_state71, ap_CS_fsm_state143)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            grp_pow_generic_float_s_fu_173_base_r <= u_output_Volts_reg_1288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_pow_generic_float_s_fu_173_base_r <= u_output_Volts_3_reg_1228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_pow_generic_float_s_fu_173_base_r <= u_input_Volts_1;
        else 
            grp_pow_generic_float_s_fu_173_base_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln27_1_fu_481_p2 <= "1" when (trunc_ln27_fu_453_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_2_fu_487_p2 <= "0" when (tmp_40_fu_461_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_3_fu_493_p2 <= "1" when (trunc_ln27_1_fu_471_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_475_p2 <= "0" when (tmp_39_fu_443_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_1_fu_523_p2 <= "1" when (trunc_ln29_fu_513_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_570_p2 <= "0" when (tmp_43_fu_552_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_576_p2 <= "1" when (trunc_ln29_1_fu_562_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_517_p2 <= "0" when (tmp_42_fu_503_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_10_fu_337_p2 <= "1" when (trunc_ln35_4_fu_327_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_11_fu_964_p2 <= "0" when (tmp_48_fu_950_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_12_fu_970_p2 <= "1" when (trunc_ln35_5_fu_960_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_13_fu_739_p2 <= "0" when (tmp_54_fu_725_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_14_fu_745_p2 <= "1" when (trunc_ln35_6_fu_735_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_8_fu_301_p2 <= "1" when (trunc_ln35_fu_291_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_9_fu_331_p2 <= "0" when (tmp_36_fu_317_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_fu_295_p2 <= "0" when (tmp_33_fu_281_p4 = ap_const_lv8_FF) else "1";
    icmp_ln47_1_fu_909_p2 <= "1" when (trunc_ln47_fu_881_p1 = ap_const_lv23_0) else "0";
    icmp_ln47_2_fu_915_p2 <= "0" when (tmp_46_fu_889_p4 = ap_const_lv8_FF) else "1";
    icmp_ln47_3_fu_921_p2 <= "1" when (trunc_ln47_1_fu_899_p1 = ap_const_lv23_0) else "0";
    icmp_ln47_fu_903_p2 <= "0" when (tmp_45_fu_871_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_1_fu_684_p2 <= "1" when (trunc_ln59_fu_656_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_2_fu_690_p2 <= "0" when (tmp_52_fu_664_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_3_fu_696_p2 <= "1" when (trunc_ln59_1_fu_674_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_fu_678_p2 <= "0" when (tmp_51_fu_646_p4 = ap_const_lv8_FF) else "1";
    if_omega_equal_q_current_fu_543_p2 <= (grp_fu_208_p2 and and_ln27_fu_537_p2);
    or_ln27_1_fu_533_p2 <= (icmp_ln27_3_reg_1153 or icmp_ln27_2_reg_1148);
    or_ln27_fu_529_p2 <= (icmp_ln27_reg_1138 or icmp_ln27_1_reg_1143);
    or_ln29_1_fu_582_p2 <= (icmp_ln29_3_fu_576_p2 or icmp_ln29_2_fu_570_p2);
    or_ln29_fu_566_p2 <= (icmp_ln29_reg_1158 or icmp_ln29_1_reg_1163);
    or_ln31_fu_624_p2 <= (ap_const_lv256_lc_1 or and_ln_fu_614_p4);
    or_ln35_4_fu_343_p2 <= (icmp_ln35_9_fu_331_p2 or icmp_ln35_10_fu_337_p2);
    or_ln35_5_fu_976_p2 <= (icmp_ln35_12_fu_970_p2 or icmp_ln35_11_fu_964_p2);
    or_ln35_6_fu_751_p2 <= (icmp_ln35_14_fu_745_p2 or icmp_ln35_13_fu_739_p2);
    or_ln35_fu_307_p2 <= (icmp_ln35_fu_295_p2 or icmp_ln35_8_fu_301_p2);
    or_ln47_1_fu_931_p2 <= (icmp_ln47_3_reg_1259 or icmp_ln47_2_reg_1254);
    or_ln47_fu_927_p2 <= (icmp_ln47_reg_1244 or icmp_ln47_1_reg_1249);
    or_ln59_1_fu_706_p2 <= (icmp_ln59_3_reg_1209 or icmp_ln59_2_reg_1204);
    or_ln59_fu_702_p2 <= (icmp_ln59_reg_1194 or icmp_ln59_1_reg_1199);
    p_Result_1_fu_633_p1 <= p_Val2_1_fu_630_p1(31 - 1 downto 0);
    p_Result_s_fu_858_p1 <= p_Val2_s_fu_855_p1(31 - 1 downto 0);
    p_Val2_1_fu_630_p1 <= u_input_Volts_1;
    p_Val2_s_fu_855_p1 <= u_input_Volts_0;
    select_ln35_2_fu_399_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_9_fu_394_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_4_fu_988_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_11_fu_982_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_6_fu_763_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_13_fu_757_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_fu_354_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_fu_349_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln48_1_fu_1054_p3 <= 
        select_ln48_fu_1028_p3 when (and_ln48_fu_1048_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln48_fu_1028_p3 <= 
        ap_const_lv32_BF733333 when (grp_fu_208_p2(0) = '1') else 
        ap_const_lv32_3F733333;
    select_ln60_1_fu_829_p3 <= 
        select_ln60_fu_803_p3 when (and_ln60_fu_823_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln60_fu_803_p3 <= 
        ap_const_lv32_BF733333 when (grp_fu_208_p2(0) = '1') else 
        ap_const_lv32_3F733333;
    sign_4_fu_430_p3 <= 
        select_ln35_2_fu_399_p3 when (and_ln35_10_fu_425_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_5_fu_1020_p3 <= 
        select_ln35_4_fu_988_p3 when (and_ln35_12_fu_1014_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_6_fu_795_p3 <= 
        select_ln35_6_fu_763_p3 when (and_ln35_14_fu_789_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_fu_385_p3 <= 
        select_ln35_fu_354_p3 when (and_ln35_8_fu_380_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_33_fu_281_p4 <= bitcast_ln35_fu_277_p1(30 downto 23);
    tmp_36_fu_317_p4 <= bitcast_ln35_4_fu_313_p1(30 downto 23);
    tmp_39_fu_443_p4 <= bitcast_ln27_fu_439_p1(30 downto 23);
    tmp_40_fu_461_p4 <= bitcast_ln27_1_fu_457_p1(30 downto 23);
    tmp_42_fu_503_p4 <= bitcast_ln29_fu_499_p1(30 downto 23);
    tmp_43_fu_552_p4 <= bitcast_ln29_1_fu_549_p1(30 downto 23);
    tmp_45_fu_871_p4 <= p_Val2_s_fu_855_p1(30 downto 23);
    tmp_46_fu_889_p4 <= bitcast_ln47_fu_885_p1(30 downto 23);
    tmp_48_fu_950_p4 <= bitcast_ln35_5_fu_947_p1(30 downto 23);
    tmp_51_fu_646_p4 <= p_Val2_1_fu_630_p1(30 downto 23);
    tmp_52_fu_664_p4 <= bitcast_ln59_fu_660_p1(30 downto 23);
    tmp_54_fu_725_p4 <= bitcast_ln35_6_fu_722_p1(30 downto 23);
    tmp_5_fu_600_p4 <= p_read(255 downto 24);
    trunc_ln27_1_fu_471_p1 <= bitcast_ln27_1_fu_457_p1(23 - 1 downto 0);
    trunc_ln27_fu_453_p1 <= bitcast_ln27_fu_439_p1(23 - 1 downto 0);
    trunc_ln29_1_fu_562_p1 <= bitcast_ln29_1_fu_549_p1(23 - 1 downto 0);
    trunc_ln29_fu_513_p1 <= bitcast_ln29_fu_499_p1(23 - 1 downto 0);
    trunc_ln31_fu_610_p1 <= p_read(16 - 1 downto 0);
    trunc_ln35_4_fu_327_p1 <= bitcast_ln35_4_fu_313_p1(23 - 1 downto 0);
    trunc_ln35_5_fu_960_p1 <= bitcast_ln35_5_fu_947_p1(23 - 1 downto 0);
    trunc_ln35_6_fu_735_p1 <= bitcast_ln35_6_fu_722_p1(23 - 1 downto 0);
    trunc_ln35_fu_291_p1 <= bitcast_ln35_fu_277_p1(23 - 1 downto 0);
    trunc_ln47_1_fu_899_p1 <= bitcast_ln47_fu_885_p1(23 - 1 downto 0);
    trunc_ln47_fu_881_p1 <= p_Val2_s_fu_855_p1(23 - 1 downto 0);
    trunc_ln59_1_fu_674_p1 <= bitcast_ln59_fu_660_p1(23 - 1 downto 0);
    trunc_ln59_fu_656_p1 <= p_Val2_1_fu_630_p1(23 - 1 downto 0);
    xor_ln35_fu_1002_p2 <= (grp_fu_226_p2 xor ap_const_lv1_1);
    xor_ln35_fu_362_p2 <= (grp_fu_214_p2 xor ap_const_lv1_1);
    xor_ln35_fu_368_p2 <= (grp_fu_220_p2 xor ap_const_lv1_1);
    xor_ln35_fu_407_p2 <= (grp_fu_232_p2 xor ap_const_lv1_1);
    xor_ln35_fu_413_p2 <= (grp_fu_238_p2 xor ap_const_lv1_1);
    xor_ln35_fu_771_p2 <= (grp_fu_220_p2 xor ap_const_lv1_1);
    xor_ln35_fu_777_p2 <= (grp_fu_226_p2 xor ap_const_lv1_1);
    xor_ln35_fu_996_p2 <= (grp_fu_220_p2 xor ap_const_lv1_1);
    xor_ln48_fu_1036_p2 <= (grp_fu_214_p2 xor ap_const_lv1_1);
    xor_ln48_fu_1042_p2 <= (grp_fu_220_p2 xor ap_const_lv1_1);
    xor_ln60_fu_811_p2 <= (grp_fu_214_p2 xor ap_const_lv1_1);
    xor_ln60_fu_817_p2 <= (grp_fu_220_p2 xor ap_const_lv1_1);
    zext_ln368_1_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_633_p1),32));
    zext_ln368_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_858_p1),32));
end behav;
