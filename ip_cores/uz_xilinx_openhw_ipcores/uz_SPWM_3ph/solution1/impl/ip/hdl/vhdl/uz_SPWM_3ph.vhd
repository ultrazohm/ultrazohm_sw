-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_SPWM_3ph is
port (
    u_a : IN STD_LOGIC_VECTOR (31 downto 0);
    u_b : IN STD_LOGIC_VECTOR (31 downto 0);
    u_c : IN STD_LOGIC_VECTOR (31 downto 0);
    u_dc : IN STD_LOGIC_VECTOR (31 downto 0);
    DC_a : OUT STD_LOGIC_VECTOR (31 downto 0);
    DC_b : OUT STD_LOGIC_VECTOR (31 downto 0);
    DC_c : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of uz_SPWM_3ph is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_SPWM_3ph_uz_SPWM_3ph,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.057000,HLS_SYN_LAT=14,HLS_SYN_TPT=15,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1020,HLS_SYN_LUT=1245,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal SPWM_single_phase_U0_ap_start : STD_LOGIC;
    signal SPWM_single_phase_U0_ap_done : STD_LOGIC;
    signal SPWM_single_phase_U0_ap_continue : STD_LOGIC;
    signal SPWM_single_phase_U0_ap_idle : STD_LOGIC;
    signal SPWM_single_phase_U0_ap_ready : STD_LOGIC;
    signal SPWM_single_phase_U0_DC : STD_LOGIC_VECTOR (31 downto 0);
    signal SPWM_single_phase_U0_DC_ap_vld : STD_LOGIC;
    signal SPWM_single_phase_1_U0_ap_start : STD_LOGIC;
    signal SPWM_single_phase_1_U0_ap_done : STD_LOGIC;
    signal SPWM_single_phase_1_U0_ap_continue : STD_LOGIC;
    signal SPWM_single_phase_1_U0_ap_idle : STD_LOGIC;
    signal SPWM_single_phase_1_U0_ap_ready : STD_LOGIC;
    signal SPWM_single_phase_1_U0_DC : STD_LOGIC_VECTOR (31 downto 0);
    signal SPWM_single_phase_1_U0_DC_ap_vld : STD_LOGIC;
    signal SPWM_single_phase_2_U0_ap_start : STD_LOGIC;
    signal SPWM_single_phase_2_U0_ap_done : STD_LOGIC;
    signal SPWM_single_phase_2_U0_ap_continue : STD_LOGIC;
    signal SPWM_single_phase_2_U0_ap_idle : STD_LOGIC;
    signal SPWM_single_phase_2_U0_ap_ready : STD_LOGIC;
    signal SPWM_single_phase_2_U0_DC : STD_LOGIC_VECTOR (31 downto 0);
    signal SPWM_single_phase_2_U0_DC_ap_vld : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_SPWM_single_phase_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_SPWM_single_phase_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_SPWM_single_phase_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_SPWM_single_phase_1_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_SPWM_single_phase_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_SPWM_single_phase_2_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component uz_SPWM_3ph_SPWM_single_phase IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        voltage : IN STD_LOGIC_VECTOR (31 downto 0);
        u_dc : IN STD_LOGIC_VECTOR (31 downto 0);
        DC : OUT STD_LOGIC_VECTOR (31 downto 0);
        DC_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_SPWM_3ph_SPWM_single_phase_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        voltage : IN STD_LOGIC_VECTOR (31 downto 0);
        u_dc : IN STD_LOGIC_VECTOR (31 downto 0);
        DC : OUT STD_LOGIC_VECTOR (31 downto 0);
        DC_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_SPWM_3ph_SPWM_single_phase_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        voltage : IN STD_LOGIC_VECTOR (31 downto 0);
        u_dc : IN STD_LOGIC_VECTOR (31 downto 0);
        DC : OUT STD_LOGIC_VECTOR (31 downto 0);
        DC_ap_vld : OUT STD_LOGIC );
    end component;



begin
    SPWM_single_phase_U0 : component uz_SPWM_3ph_SPWM_single_phase
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SPWM_single_phase_U0_ap_start,
        ap_done => SPWM_single_phase_U0_ap_done,
        ap_continue => SPWM_single_phase_U0_ap_continue,
        ap_idle => SPWM_single_phase_U0_ap_idle,
        ap_ready => SPWM_single_phase_U0_ap_ready,
        voltage => u_a,
        u_dc => u_dc,
        DC => SPWM_single_phase_U0_DC,
        DC_ap_vld => SPWM_single_phase_U0_DC_ap_vld);

    SPWM_single_phase_1_U0 : component uz_SPWM_3ph_SPWM_single_phase_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SPWM_single_phase_1_U0_ap_start,
        ap_done => SPWM_single_phase_1_U0_ap_done,
        ap_continue => SPWM_single_phase_1_U0_ap_continue,
        ap_idle => SPWM_single_phase_1_U0_ap_idle,
        ap_ready => SPWM_single_phase_1_U0_ap_ready,
        voltage => u_b,
        u_dc => u_dc,
        DC => SPWM_single_phase_1_U0_DC,
        DC_ap_vld => SPWM_single_phase_1_U0_DC_ap_vld);

    SPWM_single_phase_2_U0 : component uz_SPWM_3ph_SPWM_single_phase_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SPWM_single_phase_2_U0_ap_start,
        ap_done => SPWM_single_phase_2_U0_ap_done,
        ap_continue => SPWM_single_phase_2_U0_ap_continue,
        ap_idle => SPWM_single_phase_2_U0_ap_idle,
        ap_ready => SPWM_single_phase_2_U0_ap_ready,
        voltage => u_c,
        u_dc => u_dc,
        DC => SPWM_single_phase_2_U0_DC,
        DC_ap_vld => SPWM_single_phase_2_U0_DC_ap_vld);





    ap_sync_reg_SPWM_single_phase_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_SPWM_single_phase_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_SPWM_single_phase_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_SPWM_single_phase_1_U0_ap_ready <= ap_sync_SPWM_single_phase_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_SPWM_single_phase_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_SPWM_single_phase_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_SPWM_single_phase_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_SPWM_single_phase_2_U0_ap_ready <= ap_sync_SPWM_single_phase_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_SPWM_single_phase_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_SPWM_single_phase_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_SPWM_single_phase_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_SPWM_single_phase_U0_ap_ready <= ap_sync_SPWM_single_phase_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    DC_a <= SPWM_single_phase_U0_DC;
    DC_b <= SPWM_single_phase_1_U0_DC;
    DC_c <= SPWM_single_phase_2_U0_DC;
    SPWM_single_phase_1_U0_ap_continue <= ap_sync_done;
    SPWM_single_phase_1_U0_ap_start <= ((ap_sync_reg_SPWM_single_phase_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    SPWM_single_phase_2_U0_ap_continue <= ap_sync_done;
    SPWM_single_phase_2_U0_ap_start <= ((ap_sync_reg_SPWM_single_phase_2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    SPWM_single_phase_U0_ap_continue <= ap_sync_done;
    SPWM_single_phase_U0_ap_start <= ((ap_sync_reg_SPWM_single_phase_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ap_done <= ap_sync_done;
    ap_idle <= (SPWM_single_phase_U0_ap_idle and SPWM_single_phase_2_U0_ap_idle and SPWM_single_phase_1_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_SPWM_single_phase_1_U0_ap_ready <= (ap_sync_reg_SPWM_single_phase_1_U0_ap_ready or SPWM_single_phase_1_U0_ap_ready);
    ap_sync_SPWM_single_phase_2_U0_ap_ready <= (ap_sync_reg_SPWM_single_phase_2_U0_ap_ready or SPWM_single_phase_2_U0_ap_ready);
    ap_sync_SPWM_single_phase_U0_ap_ready <= (ap_sync_reg_SPWM_single_phase_U0_ap_ready or SPWM_single_phase_U0_ap_ready);
    ap_sync_done <= (SPWM_single_phase_U0_ap_done and SPWM_single_phase_2_U0_ap_done and SPWM_single_phase_1_U0_ap_done);
    ap_sync_ready <= (ap_sync_SPWM_single_phase_U0_ap_ready and ap_sync_SPWM_single_phase_2_U0_ap_ready and ap_sync_SPWM_single_phase_1_U0_ap_ready);
end behav;
