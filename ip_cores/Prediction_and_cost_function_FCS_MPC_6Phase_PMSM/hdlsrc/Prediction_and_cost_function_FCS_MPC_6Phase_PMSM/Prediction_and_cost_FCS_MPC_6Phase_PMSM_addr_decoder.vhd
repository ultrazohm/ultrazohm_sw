-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\Prediction_and_cost_function_FCS_MPC_6Phase_PMSM\hdlsrc\Prediction_and_cost_function_FCS_MPC_6Phase_PMSM\Prediction_and_cost_FCS_MPC_6Phase_PMSM_addr_decoder.vhd
-- Created: 2022-08-25 09:54:41
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Prediction_and_cost_FCS_MPC_6Phase_PMSM_addr_decoder
-- Source Path: Prediction_and_cost_FCS_MPC_6Phase_PMSM/Prediction_and_cost_FCS_MPC_6Phase_PMSM_axi_lite/Prediction_and_cost_FCS_MPC_6Phase_PMSM_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Prediction_and_cost_FCS_MPC_6Phase_PMSM_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_J_AXI                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_Lq_AXI                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Ld_AXI                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_SampleTime_div_Ld_AXI       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_SampleTime_div_Lq_AXI       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_SampleTime_div_Lx_AXI       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_pole_pairs_AXI              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_SampleTime_div_Ly_AXI       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Rs_AXI                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_psiPM_AXI                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_id_ref_AXI                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_iq_ref_AXI                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_ix_ref_AXI                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_iy_ref_AXI                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_use_AXI                     :   OUT   std_logic;  -- ufix1
        write_id_k_1_AXI                  :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        write_iq_k_1_AXI                  :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        write_ix_k_1_AXI                  :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        write_iy_k_1_AXI                  :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        write_omega_m_measured_AXI        :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        write_d_voltage_per_switching_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        write_q_voltage_per_switching_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        write_x_voltage_per_switching_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        write_y_volatge_per_switching_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
        );
END Prediction_and_cost_FCS_MPC_6Phase_PMSM_addr_decoder;


ARCHITECTURE rtl OF Prediction_and_cost_FCS_MPC_6Phase_PMSM_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL read_J_AXI_signed                : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL decode_sel_J_AXI_1_1             : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_J_AXI                   : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL data_slice_J_AXI_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_J_AXI_1_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_Lq_AXI_1_1            : std_logic;  -- ufix1
  SIGNAL reg_enb_Lq_AXI_1_1               : std_logic;  -- ufix1
  SIGNAL data_reg_Lq_AXI_1_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Ld_AXI_1_1            : std_logic;  -- ufix1
  SIGNAL reg_enb_Ld_AXI_1_1               : std_logic;  -- ufix1
  SIGNAL data_reg_Ld_AXI_1_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_SampleTime_div_Ld_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_SampleTime_div_Ld_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_SampleTime_div_Ld_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_SampleTime_div_Lq_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_SampleTime_div_Lq_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_SampleTime_div_Lq_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_SampleTime_div_Lx_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_SampleTime_div_Lx_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_SampleTime_div_Lx_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_pole_pairs_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL reg_enb_pole_pairs_AXI_1_1       : std_logic;  -- ufix1
  SIGNAL data_reg_pole_pairs_AXI_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_SampleTime_div_Ly_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_SampleTime_div_Ly_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_SampleTime_div_Ly_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Rs_AXI_1_1            : std_logic;  -- ufix1
  SIGNAL reg_enb_Rs_AXI_1_1               : std_logic;  -- ufix1
  SIGNAL data_reg_Rs_AXI_1_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_psiPM_AXI_1_1         : std_logic;  -- ufix1
  SIGNAL reg_enb_psiPM_AXI_1_1            : std_logic;  -- ufix1
  SIGNAL data_reg_psiPM_AXI_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_id_ref_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_id_ref_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL data_reg_id_ref_AXI_1_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_iq_ref_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_iq_ref_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL data_reg_iq_ref_AXI_1_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_ix_ref_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_ix_ref_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL data_reg_ix_ref_AXI_1_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_iy_ref_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_iy_ref_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL data_reg_iy_ref_AXI_1_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_use_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_use_AXI_1_1              : std_logic;  -- ufix1
  SIGNAL data_in_use_AXI                  : std_logic;  -- ufix1
  SIGNAL data_reg_use_AXI_1_1             : std_logic;  -- ufix1
  SIGNAL decode_sel_id_k_1_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_id_k_1_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_id_k_1_AXI               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL data_reg_id_k_1_AXI_1_1          : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL decode_sel_iq_k_1_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_iq_k_1_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_iq_k_1_AXI               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL data_reg_iq_k_1_AXI_1_1          : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL decode_sel_ix_k_1_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_ix_k_1_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_ix_k_1_AXI               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL data_reg_ix_k_1_AXI_1_1          : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL decode_sel_iy_k_1_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_iy_k_1_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_iy_k_1_AXI               : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL data_reg_iy_k_1_AXI_1_1          : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL decode_sel_omega_m_measured_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_omega_m_measured_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_omega_m_measured_AXI     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_omega_m_measured_AXI_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL decode_sel_d_voltage_per_switching_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_d_voltage_per_switching_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_d_voltage_per_switching_state_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_d_voltage_per_switching_state_AXI_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL decode_sel_q_voltage_per_switching_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_q_voltage_per_switching_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_q_voltage_per_switching_state_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_q_voltage_per_switching_state_AXI_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL decode_sel_x_voltage_per_switching_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_x_voltage_per_switching_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_x_voltage_per_switching_state_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_x_voltage_per_switching_state_AXI_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL decode_sel_y_volatge_per_switching_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_y_volatge_per_switching_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_y_volatge_per_switching_state_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_y_volatge_per_switching_state_AXI_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1_1 <= '1';

  enb <= const_1_1;

  read_J_AXI_signed <= signed(read_J_AXI);

  
  decode_sel_J_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0057#, 14) ELSE
      '0';

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_J_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_J_AXI <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        read_reg_J_AXI <= read_J_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_J_AXI_process;


  data_slice_J_AXI_1 <= unsigned(resize(read_reg_J_AXI, 32));

  
  decode_rd_J_AXI_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_J_AXI_1_1 = '0' ELSE
      data_slice_J_AXI_1;

  data_read <= std_logic_vector(decode_rd_J_AXI_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_axi_enable <= data_reg_axi_enable_1_1;

  
  decode_sel_Lq_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_Lq_AXI_1_1 <= decode_sel_Lq_AXI_1_1 AND wr_enb;

  reg_Lq_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Lq_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Lq_AXI_1_1 = '1' THEN
        data_reg_Lq_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Lq_AXI_1_1_process;


  write_Lq_AXI <= std_logic_vector(data_reg_Lq_AXI_1_1);

  
  decode_sel_Ld_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_Ld_AXI_1_1 <= decode_sel_Ld_AXI_1_1 AND wr_enb;

  reg_Ld_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Ld_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Ld_AXI_1_1 = '1' THEN
        data_reg_Ld_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Ld_AXI_1_1_process;


  write_Ld_AXI <= std_logic_vector(data_reg_Ld_AXI_1_1);

  
  decode_sel_SampleTime_div_Ld_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_SampleTime_div_Ld_AXI_1_1 <= decode_sel_SampleTime_div_Ld_AXI_1_1 AND wr_enb;

  reg_SampleTime_div_Ld_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_SampleTime_div_Ld_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_SampleTime_div_Ld_AXI_1_1 = '1' THEN
        data_reg_SampleTime_div_Ld_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_SampleTime_div_Ld_AXI_1_1_process;


  write_SampleTime_div_Ld_AXI <= std_logic_vector(data_reg_SampleTime_div_Ld_AXI_1_1);

  
  decode_sel_SampleTime_div_Lq_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_SampleTime_div_Lq_AXI_1_1 <= decode_sel_SampleTime_div_Lq_AXI_1_1 AND wr_enb;

  reg_SampleTime_div_Lq_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_SampleTime_div_Lq_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_SampleTime_div_Lq_AXI_1_1 = '1' THEN
        data_reg_SampleTime_div_Lq_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_SampleTime_div_Lq_AXI_1_1_process;


  write_SampleTime_div_Lq_AXI <= std_logic_vector(data_reg_SampleTime_div_Lq_AXI_1_1);

  
  decode_sel_SampleTime_div_Lx_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_SampleTime_div_Lx_AXI_1_1 <= decode_sel_SampleTime_div_Lx_AXI_1_1 AND wr_enb;

  reg_SampleTime_div_Lx_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_SampleTime_div_Lx_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_SampleTime_div_Lx_AXI_1_1 = '1' THEN
        data_reg_SampleTime_div_Lx_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_SampleTime_div_Lx_AXI_1_1_process;


  write_SampleTime_div_Lx_AXI <= std_logic_vector(data_reg_SampleTime_div_Lx_AXI_1_1);

  
  decode_sel_pole_pairs_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_pole_pairs_AXI_1_1 <= decode_sel_pole_pairs_AXI_1_1 AND wr_enb;

  reg_pole_pairs_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_pole_pairs_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_pole_pairs_AXI_1_1 = '1' THEN
        data_reg_pole_pairs_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_pole_pairs_AXI_1_1_process;


  write_pole_pairs_AXI <= std_logic_vector(data_reg_pole_pairs_AXI_1_1);

  
  decode_sel_SampleTime_div_Ly_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_SampleTime_div_Ly_AXI_1_1 <= decode_sel_SampleTime_div_Ly_AXI_1_1 AND wr_enb;

  reg_SampleTime_div_Ly_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_SampleTime_div_Ly_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_SampleTime_div_Ly_AXI_1_1 = '1' THEN
        data_reg_SampleTime_div_Ly_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_SampleTime_div_Ly_AXI_1_1_process;


  write_SampleTime_div_Ly_AXI <= std_logic_vector(data_reg_SampleTime_div_Ly_AXI_1_1);

  
  decode_sel_Rs_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_Rs_AXI_1_1 <= decode_sel_Rs_AXI_1_1 AND wr_enb;

  reg_Rs_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Rs_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Rs_AXI_1_1 = '1' THEN
        data_reg_Rs_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Rs_AXI_1_1_process;


  write_Rs_AXI <= std_logic_vector(data_reg_Rs_AXI_1_1);

  
  decode_sel_psiPM_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_psiPM_AXI_1_1 <= decode_sel_psiPM_AXI_1_1 AND wr_enb;

  reg_psiPM_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_psiPM_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_psiPM_AXI_1_1 = '1' THEN
        data_reg_psiPM_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_psiPM_AXI_1_1_process;


  write_psiPM_AXI <= std_logic_vector(data_reg_psiPM_AXI_1_1);

  
  decode_sel_id_ref_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_id_ref_AXI_1_1 <= decode_sel_id_ref_AXI_1_1 AND wr_enb;

  reg_id_ref_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_id_ref_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_id_ref_AXI_1_1 = '1' THEN
        data_reg_id_ref_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_id_ref_AXI_1_1_process;


  write_id_ref_AXI <= std_logic_vector(data_reg_id_ref_AXI_1_1);

  
  decode_sel_iq_ref_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_iq_ref_AXI_1_1 <= decode_sel_iq_ref_AXI_1_1 AND wr_enb;

  reg_iq_ref_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_iq_ref_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_iq_ref_AXI_1_1 = '1' THEN
        data_reg_iq_ref_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_iq_ref_AXI_1_1_process;


  write_iq_ref_AXI <= std_logic_vector(data_reg_iq_ref_AXI_1_1);

  
  decode_sel_ix_ref_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  reg_enb_ix_ref_AXI_1_1 <= decode_sel_ix_ref_AXI_1_1 AND wr_enb;

  reg_ix_ref_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_ix_ref_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_ix_ref_AXI_1_1 = '1' THEN
        data_reg_ix_ref_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ix_ref_AXI_1_1_process;


  write_ix_ref_AXI <= std_logic_vector(data_reg_ix_ref_AXI_1_1);

  
  decode_sel_iy_ref_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  reg_enb_iy_ref_AXI_1_1 <= decode_sel_iy_ref_AXI_1_1 AND wr_enb;

  reg_iy_ref_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_iy_ref_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_iy_ref_AXI_1_1 = '1' THEN
        data_reg_iy_ref_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_iy_ref_AXI_1_1_process;


  write_iy_ref_AXI <= std_logic_vector(data_reg_iy_ref_AXI_1_1);

  
  decode_sel_use_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  reg_enb_use_AXI_1_1 <= decode_sel_use_AXI_1_1 AND wr_enb;

  data_in_use_AXI <= data_write_unsigned(0);

  reg_use_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_use_AXI_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_use_AXI_1_1 = '1' THEN
        data_reg_use_AXI_1_1 <= data_in_use_AXI;
      END IF;
    END IF;
  END PROCESS reg_use_AXI_1_1_process;


  write_use_AXI <= data_reg_use_AXI_1_1;

  
  decode_sel_id_k_1_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  reg_enb_id_k_1_AXI_1_1 <= decode_sel_id_k_1_AXI_1_1 AND wr_enb;

  data_in_id_k_1_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_id_k_1_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_id_k_1_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_id_k_1_AXI_1_1 = '1' THEN
        data_reg_id_k_1_AXI_1_1 <= data_in_id_k_1_AXI;
      END IF;
    END IF;
  END PROCESS reg_id_k_1_AXI_1_1_process;


  write_id_k_1_AXI <= std_logic_vector(data_reg_id_k_1_AXI_1_1);

  
  decode_sel_iq_k_1_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  reg_enb_iq_k_1_AXI_1_1 <= decode_sel_iq_k_1_AXI_1_1 AND wr_enb;

  data_in_iq_k_1_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_iq_k_1_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_iq_k_1_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_iq_k_1_AXI_1_1 = '1' THEN
        data_reg_iq_k_1_AXI_1_1 <= data_in_iq_k_1_AXI;
      END IF;
    END IF;
  END PROCESS reg_iq_k_1_AXI_1_1_process;


  write_iq_k_1_AXI <= std_logic_vector(data_reg_iq_k_1_AXI_1_1);

  
  decode_sel_ix_k_1_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  reg_enb_ix_k_1_AXI_1_1 <= decode_sel_ix_k_1_AXI_1_1 AND wr_enb;

  data_in_ix_k_1_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_ix_k_1_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_ix_k_1_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_ix_k_1_AXI_1_1 = '1' THEN
        data_reg_ix_k_1_AXI_1_1 <= data_in_ix_k_1_AXI;
      END IF;
    END IF;
  END PROCESS reg_ix_k_1_AXI_1_1_process;


  write_ix_k_1_AXI <= std_logic_vector(data_reg_ix_k_1_AXI_1_1);

  
  decode_sel_iy_k_1_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0051#, 14) ELSE
      '0';

  reg_enb_iy_k_1_AXI_1_1 <= decode_sel_iy_k_1_AXI_1_1 AND wr_enb;

  data_in_iy_k_1_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_iy_k_1_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_iy_k_1_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_iy_k_1_AXI_1_1 = '1' THEN
        data_reg_iy_k_1_AXI_1_1 <= data_in_iy_k_1_AXI;
      END IF;
    END IF;
  END PROCESS reg_iy_k_1_AXI_1_1_process;


  write_iy_k_1_AXI <= std_logic_vector(data_reg_iy_k_1_AXI_1_1);

  
  decode_sel_omega_m_measured_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0052#, 14) ELSE
      '0';

  reg_enb_omega_m_measured_AXI_1_1 <= decode_sel_omega_m_measured_AXI_1_1 AND wr_enb;

  data_in_omega_m_measured_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_omega_m_measured_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_omega_m_measured_AXI_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_omega_m_measured_AXI_1_1 = '1' THEN
        data_reg_omega_m_measured_AXI_1_1 <= data_in_omega_m_measured_AXI;
      END IF;
    END IF;
  END PROCESS reg_omega_m_measured_AXI_1_1_process;


  write_omega_m_measured_AXI <= std_logic_vector(data_reg_omega_m_measured_AXI_1_1);

  
  decode_sel_d_voltage_per_switching_state_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0053#, 14) ELSE
      '0';

  reg_enb_d_voltage_per_switching_state_AXI_1_1 <= decode_sel_d_voltage_per_switching_state_AXI_1_1 AND wr_enb;

  data_in_d_voltage_per_switching_state_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_d_voltage_per_switching_state_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_d_voltage_per_switching_state_AXI_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_d_voltage_per_switching_state_AXI_1_1 = '1' THEN
        data_reg_d_voltage_per_switching_state_AXI_1_1 <= data_in_d_voltage_per_switching_state_AXI;
      END IF;
    END IF;
  END PROCESS reg_d_voltage_per_switching_state_AXI_1_1_process;


  write_d_voltage_per_switching_state_AXI <= std_logic_vector(data_reg_d_voltage_per_switching_state_AXI_1_1);

  
  decode_sel_q_voltage_per_switching_state_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0054#, 14) ELSE
      '0';

  reg_enb_q_voltage_per_switching_state_AXI_1_1 <= decode_sel_q_voltage_per_switching_state_AXI_1_1 AND wr_enb;

  data_in_q_voltage_per_switching_state_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_q_voltage_per_switching_state_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_q_voltage_per_switching_state_AXI_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_q_voltage_per_switching_state_AXI_1_1 = '1' THEN
        data_reg_q_voltage_per_switching_state_AXI_1_1 <= data_in_q_voltage_per_switching_state_AXI;
      END IF;
    END IF;
  END PROCESS reg_q_voltage_per_switching_state_AXI_1_1_process;


  write_q_voltage_per_switching_state_AXI <= std_logic_vector(data_reg_q_voltage_per_switching_state_AXI_1_1);

  
  decode_sel_x_voltage_per_switching_state_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0055#, 14) ELSE
      '0';

  reg_enb_x_voltage_per_switching_state_AXI_1_1 <= decode_sel_x_voltage_per_switching_state_AXI_1_1 AND wr_enb;

  data_in_x_voltage_per_switching_state_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_x_voltage_per_switching_state_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_x_voltage_per_switching_state_AXI_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_x_voltage_per_switching_state_AXI_1_1 = '1' THEN
        data_reg_x_voltage_per_switching_state_AXI_1_1 <= data_in_x_voltage_per_switching_state_AXI;
      END IF;
    END IF;
  END PROCESS reg_x_voltage_per_switching_state_AXI_1_1_process;


  write_x_voltage_per_switching_state_AXI <= std_logic_vector(data_reg_x_voltage_per_switching_state_AXI_1_1);

  
  decode_sel_y_volatge_per_switching_state_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0056#, 14) ELSE
      '0';

  reg_enb_y_volatge_per_switching_state_AXI_1_1 <= decode_sel_y_volatge_per_switching_state_AXI_1_1 AND wr_enb;

  data_in_y_volatge_per_switching_state_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_y_volatge_per_switching_state_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_y_volatge_per_switching_state_AXI_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_y_volatge_per_switching_state_AXI_1_1 = '1' THEN
        data_reg_y_volatge_per_switching_state_AXI_1_1 <= data_in_y_volatge_per_switching_state_AXI;
      END IF;
    END IF;
  END PROCESS reg_y_volatge_per_switching_state_AXI_1_1_process;


  write_y_volatge_per_switching_state_AXI <= std_logic_vector(data_reg_y_volatge_per_switching_state_AXI_1_1);

END rtl;

