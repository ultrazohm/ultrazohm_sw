// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_padding_float_4u_unsigned_int_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_data_dout,
        p_data_empty_n,
        p_data_read,
        p_pad_din,
        p_pad_full_n,
        p_pad_write,
        l_numElem_cast_loc_dout,
        l_numElem_cast_loc_empty_n,
        l_numElem_cast_loc_read,
        p_mulIters_dout,
        p_mulIters_empty_n,
        p_mulIters_read,
        l_numElem_cast_loc_out_din,
        l_numElem_cast_loc_out_full_n,
        l_numElem_cast_loc_out_write,
        p_mulIters_out_din,
        p_mulIters_out_full_n,
        p_mulIters_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] p_data_dout;
input   p_data_empty_n;
output   p_data_read;
output  [31:0] p_pad_din;
input   p_pad_full_n;
output   p_pad_write;
input  [29:0] l_numElem_cast_loc_dout;
input   l_numElem_cast_loc_empty_n;
output   l_numElem_cast_loc_read;
input  [31:0] p_mulIters_dout;
input   p_mulIters_empty_n;
output   p_mulIters_read;
output  [29:0] l_numElem_cast_loc_out_din;
input   l_numElem_cast_loc_out_full_n;
output   l_numElem_cast_loc_out_write;
output  [31:0] p_mulIters_out_din;
input   p_mulIters_out_full_n;
output   p_mulIters_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_data_read;
reg p_pad_write;
reg l_numElem_cast_loc_read;
reg p_mulIters_read;
reg l_numElem_cast_loc_out_write;
reg p_mulIters_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_data_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln58_reg_240;
reg   [0:0] icmp_ln61_reg_249;
reg    p_pad_blk_n;
reg    l_numElem_cast_loc_blk_n;
reg    p_mulIters_blk_n;
reg    l_numElem_cast_loc_out_blk_n;
reg    p_mulIters_out_blk_n;
reg   [62:0] indvar_flatten_reg_113;
reg   [30:0] i_reg_124;
wire   [30:0] p_n_cast2_i_i_fu_148_p1;
reg   [30:0] p_n_cast2_i_i_reg_225;
reg    ap_block_state1;
wire   [30:0] l_totalNum_fu_168_p3;
reg   [30:0] l_totalNum_reg_230;
wire   [62:0] mul_ln52_fu_184_p2;
reg   [62:0] mul_ln52_reg_235;
wire   [0:0] icmp_ln58_fu_190_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op38_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [62:0] add_ln58_fu_195_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln61_fu_214_p2;
wire   [30:0] i_6_fu_219_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [31:0] ap_phi_mux_empty_phi_fu_139_p4;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_reg_135;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_reg_135;
reg    ap_block_pp0_stage0_01001;
wire   [30:0] add_ln56_fu_152_p2;
wire   [28:0] tmp_6_fu_158_p4;
wire   [31:0] mul_ln52_fu_184_p0;
wire   [30:0] mul_ln52_fu_184_p1;
wire   [0:0] icmp_ln59_fu_201_p2;
wire   [30:0] select_ln58_fu_206_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [62:0] mul_ln52_fu_184_p00;
wire   [62:0] mul_ln52_fu_184_p10;
reg    ap_condition_138;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

MLP_mul_32ns_31ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 63 ))
mul_32ns_31ns_63_1_1_U393(
    .din0(mul_ln52_fu_184_p0),
    .din1(mul_ln52_fu_184_p1),
    .dout(mul_ln52_fu_184_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_138)) begin
        if (((icmp_ln61_fu_214_p2 == 1'd0) & (icmp_ln58_fu_190_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_reg_135 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_reg_135 <= ap_phi_reg_pp0_iter0_empty_reg_135;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln58_fu_190_p2 == 1'd0))) begin
        i_reg_124 <= i_6_fu_219_p2;
    end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_124 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln58_fu_190_p2 == 1'd0))) begin
        indvar_flatten_reg_113 <= add_ln58_fu_195_p2;
    end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_113 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln58_reg_240 <= icmp_ln58_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_fu_190_p2 == 1'd0))) begin
        icmp_ln61_reg_249 <= icmp_ln61_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_totalNum_reg_230[30 : 2] <= l_totalNum_fu_168_p3[30 : 2];
        mul_ln52_reg_235 <= mul_ln52_fu_184_p2;
        p_n_cast2_i_i_reg_225[29 : 0] <= p_n_cast2_i_i_fu_148_p1[29 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln58_fu_190_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_249 == 1'd1) & (icmp_ln58_reg_240 == 1'd0))) begin
        ap_phi_mux_empty_phi_fu_139_p4 = p_data_dout;
    end else begin
        ap_phi_mux_empty_phi_fu_139_p4 = ap_phi_reg_pp0_iter1_empty_reg_135;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_numElem_cast_loc_blk_n = l_numElem_cast_loc_empty_n;
    end else begin
        l_numElem_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_numElem_cast_loc_out_blk_n = l_numElem_cast_loc_out_full_n;
    end else begin
        l_numElem_cast_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_numElem_cast_loc_out_write = 1'b1;
    end else begin
        l_numElem_cast_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_numElem_cast_loc_read = 1'b1;
    end else begin
        l_numElem_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_249 == 1'd1) & (icmp_ln58_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_data_blk_n = p_data_empty_n;
    end else begin
        p_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_read_state3 == 1'b1))) begin
        p_data_read = 1'b1;
    end else begin
        p_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_blk_n = p_mulIters_empty_n;
    end else begin
        p_mulIters_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_out_blk_n = p_mulIters_out_full_n;
    end else begin
        p_mulIters_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_out_write = 1'b1;
    end else begin
        p_mulIters_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_read = 1'b1;
    end else begin
        p_mulIters_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_pad_blk_n = p_pad_full_n;
    end else begin
        p_pad_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln58_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_pad_write = 1'b1;
    end else begin
        p_pad_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln58_fu_190_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln58_fu_190_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln56_fu_152_p2 = (p_n_cast2_i_i_fu_148_p1 + 31'd3);

assign add_ln58_fu_195_p2 = (indvar_flatten_reg_113 + 63'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln58_reg_240 == 1'd0) & (p_pad_full_n == 1'b0)) | ((p_data_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln58_reg_240 == 1'd0) & (p_pad_full_n == 1'b0)) | ((p_data_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln58_reg_240 == 1'd0) & (p_pad_full_n == 1'b0)) | ((p_data_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln58_reg_240 == 1'd0) & (p_pad_full_n == 1'b0)) | ((p_data_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_condition_138 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_empty_reg_135 = 'bx;

always @ (*) begin
    ap_predicate_op38_read_state3 = ((icmp_ln61_reg_249 == 1'd1) & (icmp_ln58_reg_240 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign i_6_fu_219_p2 = (select_ln58_fu_206_p3 + 31'd1);

assign icmp_ln58_fu_190_p2 = ((indvar_flatten_reg_113 == mul_ln52_reg_235) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_201_p2 = ((i_reg_124 == l_totalNum_reg_230) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_214_p2 = ((select_ln58_fu_206_p3 < p_n_cast2_i_i_reg_225) ? 1'b1 : 1'b0);

assign l_numElem_cast_loc_out_din = l_numElem_cast_loc_dout;

assign l_totalNum_fu_168_p3 = {{tmp_6_fu_158_p4}, {2'd0}};

assign mul_ln52_fu_184_p0 = mul_ln52_fu_184_p00;

assign mul_ln52_fu_184_p00 = p_mulIters_dout;

assign mul_ln52_fu_184_p1 = mul_ln52_fu_184_p10;

assign mul_ln52_fu_184_p10 = l_totalNum_fu_168_p3;

assign p_mulIters_out_din = p_mulIters_dout;

assign p_n_cast2_i_i_fu_148_p1 = l_numElem_cast_loc_dout;

assign p_pad_din = ap_phi_mux_empty_phi_fu_139_p4;

assign select_ln58_fu_206_p3 = ((icmp_ln59_fu_201_p2[0:0] === 1'b1) ? 31'd0 : i_reg_124);

assign start_out = real_start;

assign tmp_6_fu_158_p4 = {{add_ln56_fu_152_p2[30:2]}};

always @ (posedge ap_clk) begin
    p_n_cast2_i_i_reg_225[30] <= 1'b0;
    l_totalNum_reg_230[1:0] <= 2'b00;
end

endmodule //MLP_padding_float_4u_unsigned_int_s
