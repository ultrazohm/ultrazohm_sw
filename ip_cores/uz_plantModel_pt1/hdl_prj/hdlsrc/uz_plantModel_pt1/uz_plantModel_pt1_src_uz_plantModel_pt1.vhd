-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/uz_plantModel_pt1/uz_plantModel_pt1_src_uz_plantModel_pt1.vhd
-- Created: 2021-06-16 13:58:48
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 100x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- output                        ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_plantModel_pt1_src_uz_plantModel_pt1
-- Source Path: uz_plantModel_pt1/uz_plantModel_pt1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_plantModel_pt1_src_uz_plantModel_pt1_pkg.ALL;

ENTITY uz_plantModel_pt1_src_uz_plantModel_pt1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        input                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        gain                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        time_constant                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        reset_1                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        output                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END uz_plantModel_pt1_src_uz_plantModel_pt1;


ARCHITECTURE rtl OF uz_plantModel_pt1_src_uz_plantModel_pt1 IS

  -- Component Declarations
  COMPONENT uz_plantModel_pt1_src_uz_plantModel_pt1_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_100_0                     :   OUT   std_logic;
          enb_1_100_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_plantModel_pt1_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_plantModel_pt1_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_plantModel_pt1_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_plantModel_pt1_src_uz_plantModel_pt1_tc
    USE ENTITY work.uz_plantModel_pt1_src_uz_plantModel_pt1_tc(rtl);

  FOR ALL : uz_plantModel_pt1_src_nfp_mul_single
    USE ENTITY work.uz_plantModel_pt1_src_nfp_mul_single(rtl);

  FOR ALL : uz_plantModel_pt1_src_nfp_sub_single
    USE ENTITY work.uz_plantModel_pt1_src_nfp_sub_single(rtl);

  FOR ALL : uz_plantModel_pt1_src_nfp_add_single
    USE ENTITY work.uz_plantModel_pt1_src_nfp_add_single(rtl);

  -- Signals
  SIGNAL enb_1_100_0                      : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_100_1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay6_out1_1                    : std_logic;
  SIGNAL Delay6_out1_2                    : std_logic;
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_iv                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL single                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL single_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_toDel                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_toDel_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_delOut                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_toDel                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_lowered_bypass_reg         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_toDel_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_delOut                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out_0_pipe_in_pipe_reg           : vector_of_std_logic_vector32(0 TO 9);  -- ufix32 [10]
  SIGNAL out_0_pipe_in_pipe_reg_next      : vector_of_std_logic_vector32(0 TO 9);  -- ufix32 [10]
  SIGNAL Product1_out1_2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL t_bypass_reg                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1_3                  : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_uz_plantModel_pt1_tc : uz_plantModel_pt1_src_uz_plantModel_pt1_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_100_0 => enb_1_100_0,
              enb_1_100_1 => enb_1_100_1
              );

  u_nfp_mul_comp : uz_plantModel_pt1_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay4_out1,  -- single
              nfp_in2 => Delay5_out1,  -- single
              nfp_out => Product_out1  -- single
              );

  u_nfp_sub_comp : uz_plantModel_pt1_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product_out1,  -- single
              nfp_in2 => Product1_out1_1,  -- single
              nfp_out => Sum2_out1  -- single
              );

  u_nfp_mul_comp_1 : uz_plantModel_pt1_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst,  -- single
              nfp_in2 => Sum2_out1,  -- single
              nfp_out => Gain_out1  -- single
              );

  u_nfp_add_comp : uz_plantModel_pt1_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay_out1,  -- single
              nfp_in2 => Delay1_out1,  -- single
              nfp_out => single  -- single
              );

  u_nfp_mul_comp_2 : uz_plantModel_pt1_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay3_out1,  -- single
              nfp_in2 => single,  -- single
              nfp_out => Product1_out1  -- single
              );

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= X"00000000";
      ELSIF enb_1_100_0 = '1' THEN
        Delay3_out1 <= time_constant;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb_1_100_0 = '1' THEN
        Delay6_out1 <= reset_1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay6_out1_1 <= Delay6_out1;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1_2 <= Delay6_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  kconst <= X"49742400";

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= X"00000000";
      ELSIF enb_1_100_0 = '1' THEN
        Delay4_out1 <= input;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= X"00000000";
      ELSIF enb_1_100_0 = '1' THEN
        Delay5_out1 <= gain;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay_iv <= X"00000000";

  Delay1_iv <= X"00000000";

  single_1 <= single;

  
  Delay1_toDel <= single_1 WHEN Delay6_out1_2 = '0' ELSE
      Delay1_iv;

  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_1 <= Delay1_toDel WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut <= Delay1_toDel_1;

  
  Delay1_out1 <= Delay1_delOut WHEN Delay6_out1_1 = '0' ELSE
      Delay1_iv;

  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay2_bypass_reg <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Product1_out1_1 <= Product1_out1 WHEN enb_1_100_1 = '1' ELSE
      Delay2_bypass_reg;

  
  Delay_toDel <= Gain_out1 WHEN Delay6_out1_2 = '0' ELSE
      Delay_iv;

  Delay_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_lowered_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay_lowered_bypass_reg <= Delay_toDel;
      END IF;
    END IF;
  END PROCESS Delay_lowered_bypass_process;

  
  Delay_toDel_1 <= Delay_toDel WHEN enb_1_100_1 = '1' ELSE
      Delay_lowered_bypass_reg;

  Delay_delOut <= Delay_toDel_1;

  
  Delay_out1 <= Delay_delOut WHEN Delay6_out1_1 = '0' ELSE
      Delay_iv;

  out_0_pipe_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        out_0_pipe_in_pipe_reg(0) <= X"00000000";
        out_0_pipe_in_pipe_reg(1) <= X"00000000";
        out_0_pipe_in_pipe_reg(2) <= X"00000000";
        out_0_pipe_in_pipe_reg(3) <= X"00000000";
        out_0_pipe_in_pipe_reg(4) <= X"00000000";
        out_0_pipe_in_pipe_reg(5) <= X"00000000";
        out_0_pipe_in_pipe_reg(6) <= X"00000000";
        out_0_pipe_in_pipe_reg(7) <= X"00000000";
        out_0_pipe_in_pipe_reg(8) <= X"00000000";
        out_0_pipe_in_pipe_reg(9) <= X"00000000";
      ELSIF enb = '1' THEN
        out_0_pipe_in_pipe_reg(0) <= out_0_pipe_in_pipe_reg_next(0);
        out_0_pipe_in_pipe_reg(1) <= out_0_pipe_in_pipe_reg_next(1);
        out_0_pipe_in_pipe_reg(2) <= out_0_pipe_in_pipe_reg_next(2);
        out_0_pipe_in_pipe_reg(3) <= out_0_pipe_in_pipe_reg_next(3);
        out_0_pipe_in_pipe_reg(4) <= out_0_pipe_in_pipe_reg_next(4);
        out_0_pipe_in_pipe_reg(5) <= out_0_pipe_in_pipe_reg_next(5);
        out_0_pipe_in_pipe_reg(6) <= out_0_pipe_in_pipe_reg_next(6);
        out_0_pipe_in_pipe_reg(7) <= out_0_pipe_in_pipe_reg_next(7);
        out_0_pipe_in_pipe_reg(8) <= out_0_pipe_in_pipe_reg_next(8);
        out_0_pipe_in_pipe_reg(9) <= out_0_pipe_in_pipe_reg_next(9);
      END IF;
    END IF;
  END PROCESS out_0_pipe_in_pipe_process;

  Product1_out1_2 <= out_0_pipe_in_pipe_reg(9);
  out_0_pipe_in_pipe_reg_next(0) <= Product1_out1;
  out_0_pipe_in_pipe_reg_next(1) <= out_0_pipe_in_pipe_reg(0);
  out_0_pipe_in_pipe_reg_next(2) <= out_0_pipe_in_pipe_reg(1);
  out_0_pipe_in_pipe_reg_next(3) <= out_0_pipe_in_pipe_reg(2);
  out_0_pipe_in_pipe_reg_next(4) <= out_0_pipe_in_pipe_reg(3);
  out_0_pipe_in_pipe_reg_next(5) <= out_0_pipe_in_pipe_reg(4);
  out_0_pipe_in_pipe_reg_next(6) <= out_0_pipe_in_pipe_reg(5);
  out_0_pipe_in_pipe_reg_next(7) <= out_0_pipe_in_pipe_reg(6);
  out_0_pipe_in_pipe_reg_next(8) <= out_0_pipe_in_pipe_reg(7);
  out_0_pipe_in_pipe_reg_next(9) <= out_0_pipe_in_pipe_reg(8);

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t_bypass_reg <= Product1_out1_2;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Product1_out1_3 <= Product1_out1_2 WHEN enb_1_100_1 = '1' ELSE
      t_bypass_reg;

  ce_out <= enb_1_100_1;

  output <= Product1_out1_3;

END rtl;

