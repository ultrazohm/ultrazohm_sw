-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\Prediction_and_cost_function_FCS_MPC_6Phase_PMSM\hdlsrc\Prediction_and_cost_function_FCS_MPC_6Phase_PMSM\Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_HDL_DUT.vhd
-- Created: 2022-09-01 11:27:45
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- J                             ce_out        1e-08
-- J_AXI                         ce_out        1e-08
-- done                          ce_out        1e-08
-- Index                         ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_HDL_DUT
-- Source Path: Prediction_and_cost_function_FCS_MPC_6Phase_PMSM/HDL_DUT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_HDL_DUT_pkg.ALL;

ENTITY Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_HDL_DUT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Lq_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ld_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Rs_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_m_measured                  :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        pole_pairs_AXI                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psiPM_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iq_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ix_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iy_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        d_voltage_per_switching_state     :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        q_voltage_per_switching_state     :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        x_volatge_per_switching_state     :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        y_phase_volatge_per_switching_state :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        use_AXI                           :   IN    std_logic;
        id_k_1_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        omega_m_measured_AXI              :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        d_voltage_per_switching_state_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        q_voltage_per_switching_state_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        x_voltage_per_switching_state_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        y_volatge_per_switching_state_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        valid_in                          :   IN    std_logic;
        Reset_1                           :   IN    std_logic;
        valid_in_ADC                      :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        J                                 :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_AXI                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        done                              :   OUT   std_logic;
        Index                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- int32
        );
END Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_HDL_DUT;


ARCHITECTURE rtl OF Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_HDL_DUT IS

  -- Component Declarations
  COMPONENT Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_18_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_24_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          SampleTime_div_Ld               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lq               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lx               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Ly               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_k_1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_k_1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_k_1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_k_1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Rs                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          omega_el                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Lq                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Ld                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          psiPM                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_ref                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_ref                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_ref                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_ref                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          J                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_single_to_sfix_20_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En11
          );
  END COMPONENT;

  COMPONENT Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Compare_To_Constant
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive
    USE ENTITY work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive(rtl);

  FOR ALL : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_18_En11_to_single
    USE ENTITY work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_18_En11_to_single(rtl);

  FOR ALL : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive2
    USE ENTITY work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive2(rtl);

  FOR ALL : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_24_En11_to_single
    USE ENTITY work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_24_En11_to_single(rtl);

  FOR ALL : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_mul_single
    USE ENTITY work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_mul_single(rtl);

  FOR ALL : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_MATLAB_Function
    USE ENTITY work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_MATLAB_Function(rtl);

  FOR ALL : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_single_to_sfix_20_En11
    USE ENTITY work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_single_to_sfix_20_En11(rtl);

  FOR ALL : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive1
    USE ENTITY work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive1(rtl);

  FOR ALL : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Compare_To_Constant
    USE ENTITY work.Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Compare_To_Constant(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay21_out1                     : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Delay23_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on21_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay20_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Delay24_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on20_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay19_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Delay25_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on19_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay18_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Delay26_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on18_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay17_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL End_Cycle_3                      : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch2_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL Delay56_out1                     : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL id_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay27_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL id_k_1_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay47_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on22_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay16_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on17_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on17_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch4_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL iq_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay28_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL iq_k_1_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay48_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on23_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay15_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on16_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on16_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL ix_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay29_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL ix_k_1_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay49_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on24_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay14_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on15_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on15_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch8_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL iy_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay30_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL iy_k_1_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay50_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on25_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay13_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL Delay31_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on12_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay60_out1                     : std_logic;
  SIGNAL End_Cycle_4                      : std_logic;
  SIGNAL delayMatch12_reg                 : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL delayMatch12_reg_next            : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL End_Cycle_5                      : std_logic;
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL delayMatch11_reg_next            : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL omega_m_measured_signed          : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omega_m_measured_AXI_signed      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay32_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on26_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay35_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch10_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch10_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Delay35_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay11_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL Delay34_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on10_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL Delay36_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on9_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL Delay37_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on8_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay8_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL delayMatch13_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch13_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL d_voltage_per_switching_state_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay38_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL d_voltage_per_switching_state_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay52_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on27_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion11_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay7_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL delayMatch15_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch15_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL q_voltage_per_switching_state_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay39_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL q_voltage_per_switching_state_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay53_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on28_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL stateControl_15                  : std_logic;
  SIGNAL delayMatch17_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch17_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_16                  : std_logic;
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL x_volatge_per_switching_state_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay40_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL x_voltage_per_switching_state_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay54_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on29_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion13_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_24              : std_logic;
  SIGNAL stateControl_17                  : std_logic;
  SIGNAL delayMatch19_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch19_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_18                  : std_logic;
  SIGNAL switch_compare_1_25              : std_logic;
  SIGNAL y_phase_volatge_per_switching_state_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay41_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL y_volatge_per_switching_state_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay55_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on30_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion14_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_26              : std_logic;
  SIGNAL Delay42_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_27              : std_logic;
  SIGNAL Delay43_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_28              : std_logic;
  SIGNAL Delay44_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_29              : std_logic;
  SIGNAL Delay45_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on14_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay33_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_1                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL Delay57_out1                     : std_logic;
  SIGNAL End_Cycle_6                      : std_logic;
  SIGNAL count_step                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_reset                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL HDL_Counter_out1                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL count                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_2                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay58_reg                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay58_reg_next                 : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay58_out1                     : std_logic;
  SIGNAL delayMatch21_reg                 : std_logic_vector(0 TO 119);  -- ufix1 [120]
  SIGNAL delayMatch21_reg_next            : std_logic_vector(0 TO 119);  -- ufix1 [120]
  SIGNAL Delay58_out1_1                   : std_logic;
  SIGNAL Delay59_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch22_reg                 : vector_of_signed32(0 TO 119);  -- sfix32 [120]
  SIGNAL delayMatch22_reg_next            : vector_of_signed32(0 TO 119);  -- sfix32 [120]
  SIGNAL Delay59_out1_1                   : signed(31 DOWNTO 0);  -- int32

BEGIN
  u_Detect_Rise_Positive : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay21_out1,
              Y => End_Cycle
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_sfix_18_En11_to_single : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on22_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion7_out1  -- single
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_sfix_18_En11_to_single_1 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on23_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion8_out1  -- single
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_sfix_18_En11_to_single_2 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on24_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion9_out1  -- single
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_sfix_18_En11_to_single_3 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on25_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion10_out1  -- single
              );

  u_Detect_Rise_Positive2 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay60_out1,
              Y => End_Cycle_4
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_sfix_24_En11_to_single : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on26_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion4_out1  -- single
              );

  u_nfp_mul_comp : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion4_out1,  -- single
              nfp_in2 => Delay35_out1_1,  -- single
              nfp_out => omega_el  -- single
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_sfix_24_En11_to_single_1 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on27_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion11_out1  -- single
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_sfix_24_En11_to_single_2 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on28_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion12_out1  -- single
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_sfix_24_En11_to_single_3 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on29_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion13_out1  -- single
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_sfix_24_En11_to_single_4 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on30_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion14_out1  -- single
              );

  u_MATLAB_Function : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_MATLAB_Function
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              SampleTime_div_Ld => Switch_on21_out1,  -- single
              SampleTime_div_Lq => Switch_on20_out1,  -- single
              SampleTime_div_Lx => Switch_on19_out1,  -- single
              SampleTime_div_Ly => Switch_on18_out1,  -- single
              id_k_1 => Switch_on17_out1,  -- single
              iq_k_1 => Switch_on16_out1,  -- single
              ix_k_1 => Switch_on15_out1,  -- single
              iy_k_1 => Switch_on13_out1,  -- single
              Rs => Switch_on12_out1,  -- single
              omega_el => Switch_on11_out1,  -- single
              Lq => Switch_on10_out1,  -- single
              Ld => Switch_on9_out1,  -- single
              psiPM => Switch_on8_out1,  -- single
              d_phase_voltage_per_switching_state => Switch_on7_out1,  -- single
              q_phase_voltage_per_switching_state => Switch_on6_out1,  -- single
              x_phase_voltage_per_switching_state => Switch_on5_out1,  -- single
              y_phase_voltage_per_switching_state => Switch_on4_out1,  -- single
              id_ref => Switch_on3_out1,  -- single
              iq_ref => Switch_on2_out1,  -- single
              ix_ref => Switch_on1_out1,  -- single
              iy_ref => Switch_on14_out1,  -- single
              J => J_1  -- single
              );

  u_Prediction_and_cost_function_FCS_MPC_6Phase_PMSM_HDL_DUT_nfp_convert_single_to_sfix_20_En11 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_1,  -- single
              nfp_out => Data_Type_Conversion1_out1  -- sfix20_En11
              );

  u_Detect_Rise_Positive1 : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay57_out1,
              Y => End_Cycle_6
              );

  u_Compare_To_Constant : Prediction_and_cost_FCS_MPC_6Phase_PMSM_src_Compare_To_Constant
    PORT MAP( u => std_logic_vector(HDL_Counter_out1),  -- int32
              y => Compare_To_Constant_out1
              );

  enb <= clk_enable;

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay21_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay23_out1 <= SampleTime_div_Ld_AXI;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay20_out1 <= Switch_on21_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  
  Switch_on21_out1 <= Delay20_out1 WHEN switch_compare_1 = '0' ELSE
      Delay23_out1;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay24_out1 <= SampleTime_div_Lq_AXI;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay19_out1 <= Switch_on20_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  Switch_on20_out1 <= Delay19_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay24_out1;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay25_out1 <= SampleTime_div_Lx_AXI;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay18_out1 <= Switch_on19_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Switch_on19_out1 <= Delay18_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay25_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay26_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay26_out1 <= SampleTime_div_Ly_AXI;
      END IF;
    END IF;
  END PROCESS Delay26_process;


  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay17_out1 <= Switch_on18_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  Switch_on18_out1 <= Delay17_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay26_out1;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        End_Cycle_1 <= '0';
      ELSIF enb = '1' THEN
        End_Cycle_1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= '0';
        reduced_reg(1) <= '0';
        reduced_reg(2) <= '0';
        reduced_reg(3) <= '0';
        reduced_reg(4) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  End_Cycle_2 <= reduced_reg(4);
  reduced_reg_next(0) <= End_Cycle_1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);

  End_Cycle_3 <= End_Cycle_2;

  
  switch_compare_1_4 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch2_reg(0) <= '0';
        delayMatch2_reg(1) <= '0';
        delayMatch2_reg(2) <= '0';
        delayMatch2_reg(3) <= '0';
        delayMatch2_reg(4) <= '0';
        delayMatch2_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_2 <= delayMatch2_reg(5);
  delayMatch2_reg_next(0) <= stateControl_1;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);

  Delay56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay56_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay56_out1 <= use_AXI;
      END IF;
    END IF;
  END PROCESS Delay56_process;


  
  switch_compare_1_5 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  id_k_1_signed <= signed(id_k_1);

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay27_out1 <= id_k_1_signed;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  id_k_1_AXI_signed <= signed(id_k_1_AXI);

  Delay47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay47_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay47_out1 <= id_k_1_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay47_process;


  
  Switch_on22_out1 <= Delay27_out1 WHEN switch_compare_1_5 = '0' ELSE
      Delay47_out1;

  
  Switch_on17_out1_1 <= Delay16_out1 WHEN stateControl_2 = '0' ELSE
      Switch_on17_out1;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay16_out1 <= Switch_on17_out1_1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Switch_on17_out1 <= Delay16_out1 WHEN switch_compare_1_4 = '0' ELSE
      Data_Type_Conversion7_out1;

  
  switch_compare_1_6 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_3 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg(0) <= '0';
        delayMatch4_reg(1) <= '0';
        delayMatch4_reg(2) <= '0';
        delayMatch4_reg(3) <= '0';
        delayMatch4_reg(4) <= '0';
        delayMatch4_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
        delayMatch4_reg(2) <= delayMatch4_reg_next(2);
        delayMatch4_reg(3) <= delayMatch4_reg_next(3);
        delayMatch4_reg(4) <= delayMatch4_reg_next(4);
        delayMatch4_reg(5) <= delayMatch4_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  stateControl_4 <= delayMatch4_reg(5);
  delayMatch4_reg_next(0) <= stateControl_3;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);
  delayMatch4_reg_next(2) <= delayMatch4_reg(1);
  delayMatch4_reg_next(3) <= delayMatch4_reg(2);
  delayMatch4_reg_next(4) <= delayMatch4_reg(3);
  delayMatch4_reg_next(5) <= delayMatch4_reg(4);

  
  switch_compare_1_7 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  iq_k_1_signed <= signed(iq_k_1);

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay28_out1 <= iq_k_1_signed;
      END IF;
    END IF;
  END PROCESS Delay28_process;


  iq_k_1_AXI_signed <= signed(iq_k_1_AXI);

  Delay48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay48_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay48_out1 <= iq_k_1_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay48_process;


  
  Switch_on23_out1 <= Delay28_out1 WHEN switch_compare_1_7 = '0' ELSE
      Delay48_out1;

  
  Switch_on16_out1_1 <= Delay15_out1 WHEN stateControl_4 = '0' ELSE
      Switch_on16_out1;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay15_out1 <= Switch_on16_out1_1;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  
  Switch_on16_out1 <= Delay15_out1 WHEN switch_compare_1_6 = '0' ELSE
      Data_Type_Conversion8_out1;

  
  switch_compare_1_8 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_5 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= '0';
        delayMatch6_reg(1) <= '0';
        delayMatch6_reg(2) <= '0';
        delayMatch6_reg(3) <= '0';
        delayMatch6_reg(4) <= '0';
        delayMatch6_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  stateControl_6 <= delayMatch6_reg(5);
  delayMatch6_reg_next(0) <= stateControl_5;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);
  delayMatch6_reg_next(5) <= delayMatch6_reg(4);

  
  switch_compare_1_9 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  ix_k_1_signed <= signed(ix_k_1);

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay29_out1 <= ix_k_1_signed;
      END IF;
    END IF;
  END PROCESS Delay29_process;


  ix_k_1_AXI_signed <= signed(ix_k_1_AXI);

  Delay49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay49_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay49_out1 <= ix_k_1_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay49_process;


  
  Switch_on24_out1 <= Delay29_out1 WHEN switch_compare_1_9 = '0' ELSE
      Delay49_out1;

  
  Switch_on15_out1_1 <= Delay14_out1 WHEN stateControl_6 = '0' ELSE
      Switch_on15_out1;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch_on15_out1_1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch_on15_out1 <= Delay14_out1 WHEN switch_compare_1_8 = '0' ELSE
      Data_Type_Conversion9_out1;

  
  switch_compare_1_10 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_7 <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg(0) <= '0';
        delayMatch8_reg(1) <= '0';
        delayMatch8_reg(2) <= '0';
        delayMatch8_reg(3) <= '0';
        delayMatch8_reg(4) <= '0';
        delayMatch8_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
        delayMatch8_reg(2) <= delayMatch8_reg_next(2);
        delayMatch8_reg(3) <= delayMatch8_reg_next(3);
        delayMatch8_reg(4) <= delayMatch8_reg_next(4);
        delayMatch8_reg(5) <= delayMatch8_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  stateControl_8 <= delayMatch8_reg(5);
  delayMatch8_reg_next(0) <= stateControl_7;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);
  delayMatch8_reg_next(2) <= delayMatch8_reg(1);
  delayMatch8_reg_next(3) <= delayMatch8_reg(2);
  delayMatch8_reg_next(4) <= delayMatch8_reg(3);
  delayMatch8_reg_next(5) <= delayMatch8_reg(4);

  
  switch_compare_1_11 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  iy_k_1_signed <= signed(iy_k_1);

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay30_out1 <= iy_k_1_signed;
      END IF;
    END IF;
  END PROCESS Delay30_process;


  iy_k_1_AXI_signed <= signed(iy_k_1_AXI);

  Delay50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay50_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay50_out1 <= iy_k_1_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay50_process;


  
  Switch_on25_out1 <= Delay30_out1 WHEN switch_compare_1_11 = '0' ELSE
      Delay50_out1;

  
  Switch_on13_out1_1 <= Delay13_out1 WHEN stateControl_8 = '0' ELSE
      Switch_on13_out1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch_on13_out1_1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch_on13_out1 <= Delay13_out1 WHEN switch_compare_1_10 = '0' ELSE
      Data_Type_Conversion10_out1;

  
  switch_compare_1_12 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay31_out1 <= Rs_AXI;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay12_out1 <= Switch_on12_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  Switch_on12_out1 <= Delay12_out1 WHEN switch_compare_1_12 = '0' ELSE
      Delay31_out1;

  Delay60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay60_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay60_out1 <= valid_in_ADC;
      END IF;
    END IF;
  END PROCESS Delay60_process;


  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch12_reg(0) <= '0';
        delayMatch12_reg(1) <= '0';
        delayMatch12_reg(2) <= '0';
        delayMatch12_reg(3) <= '0';
        delayMatch12_reg(4) <= '0';
        delayMatch12_reg(5) <= '0';
        delayMatch12_reg(6) <= '0';
        delayMatch12_reg(7) <= '0';
        delayMatch12_reg(8) <= '0';
        delayMatch12_reg(9) <= '0';
        delayMatch12_reg(10) <= '0';
        delayMatch12_reg(11) <= '0';
        delayMatch12_reg(12) <= '0';
        delayMatch12_reg(13) <= '0';
      ELSIF enb = '1' THEN
        delayMatch12_reg(0) <= delayMatch12_reg_next(0);
        delayMatch12_reg(1) <= delayMatch12_reg_next(1);
        delayMatch12_reg(2) <= delayMatch12_reg_next(2);
        delayMatch12_reg(3) <= delayMatch12_reg_next(3);
        delayMatch12_reg(4) <= delayMatch12_reg_next(4);
        delayMatch12_reg(5) <= delayMatch12_reg_next(5);
        delayMatch12_reg(6) <= delayMatch12_reg_next(6);
        delayMatch12_reg(7) <= delayMatch12_reg_next(7);
        delayMatch12_reg(8) <= delayMatch12_reg_next(8);
        delayMatch12_reg(9) <= delayMatch12_reg_next(9);
        delayMatch12_reg(10) <= delayMatch12_reg_next(10);
        delayMatch12_reg(11) <= delayMatch12_reg_next(11);
        delayMatch12_reg(12) <= delayMatch12_reg_next(12);
        delayMatch12_reg(13) <= delayMatch12_reg_next(13);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  End_Cycle_5 <= delayMatch12_reg(13);
  delayMatch12_reg_next(0) <= End_Cycle_4;
  delayMatch12_reg_next(1) <= delayMatch12_reg(0);
  delayMatch12_reg_next(2) <= delayMatch12_reg(1);
  delayMatch12_reg_next(3) <= delayMatch12_reg(2);
  delayMatch12_reg_next(4) <= delayMatch12_reg(3);
  delayMatch12_reg_next(5) <= delayMatch12_reg(4);
  delayMatch12_reg_next(6) <= delayMatch12_reg(5);
  delayMatch12_reg_next(7) <= delayMatch12_reg(6);
  delayMatch12_reg_next(8) <= delayMatch12_reg(7);
  delayMatch12_reg_next(9) <= delayMatch12_reg(8);
  delayMatch12_reg_next(10) <= delayMatch12_reg(9);
  delayMatch12_reg_next(11) <= delayMatch12_reg(10);
  delayMatch12_reg_next(12) <= delayMatch12_reg(11);
  delayMatch12_reg_next(13) <= delayMatch12_reg(12);

  
  switch_compare_1_13 <= '1' WHEN End_Cycle_5 = '1' ELSE
      '0';

  stateControl_9 <= '1';

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch11_reg(0) <= '0';
        delayMatch11_reg(1) <= '0';
        delayMatch11_reg(2) <= '0';
        delayMatch11_reg(3) <= '0';
        delayMatch11_reg(4) <= '0';
        delayMatch11_reg(5) <= '0';
        delayMatch11_reg(6) <= '0';
        delayMatch11_reg(7) <= '0';
        delayMatch11_reg(8) <= '0';
        delayMatch11_reg(9) <= '0';
        delayMatch11_reg(10) <= '0';
        delayMatch11_reg(11) <= '0';
        delayMatch11_reg(12) <= '0';
        delayMatch11_reg(13) <= '0';
      ELSIF enb = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
        delayMatch11_reg(2) <= delayMatch11_reg_next(2);
        delayMatch11_reg(3) <= delayMatch11_reg_next(3);
        delayMatch11_reg(4) <= delayMatch11_reg_next(4);
        delayMatch11_reg(5) <= delayMatch11_reg_next(5);
        delayMatch11_reg(6) <= delayMatch11_reg_next(6);
        delayMatch11_reg(7) <= delayMatch11_reg_next(7);
        delayMatch11_reg(8) <= delayMatch11_reg_next(8);
        delayMatch11_reg(9) <= delayMatch11_reg_next(9);
        delayMatch11_reg(10) <= delayMatch11_reg_next(10);
        delayMatch11_reg(11) <= delayMatch11_reg_next(11);
        delayMatch11_reg(12) <= delayMatch11_reg_next(12);
        delayMatch11_reg(13) <= delayMatch11_reg_next(13);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  stateControl_10 <= delayMatch11_reg(13);
  delayMatch11_reg_next(0) <= stateControl_9;
  delayMatch11_reg_next(1) <= delayMatch11_reg(0);
  delayMatch11_reg_next(2) <= delayMatch11_reg(1);
  delayMatch11_reg_next(3) <= delayMatch11_reg(2);
  delayMatch11_reg_next(4) <= delayMatch11_reg(3);
  delayMatch11_reg_next(5) <= delayMatch11_reg(4);
  delayMatch11_reg_next(6) <= delayMatch11_reg(5);
  delayMatch11_reg_next(7) <= delayMatch11_reg(6);
  delayMatch11_reg_next(8) <= delayMatch11_reg(7);
  delayMatch11_reg_next(9) <= delayMatch11_reg(8);
  delayMatch11_reg_next(10) <= delayMatch11_reg(9);
  delayMatch11_reg_next(11) <= delayMatch11_reg(10);
  delayMatch11_reg_next(12) <= delayMatch11_reg(11);
  delayMatch11_reg_next(13) <= delayMatch11_reg(12);

  
  switch_compare_1_14 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  omega_m_measured_signed <= signed(omega_m_measured);

  Delay51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay51_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay51_out1 <= omega_m_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay51_process;


  omega_m_measured_AXI_signed <= signed(omega_m_measured_AXI);

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay32_out1 <= omega_m_measured_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay32_process;


  
  Switch_on26_out1 <= Delay51_out1 WHEN switch_compare_1_14 = '0' ELSE
      Delay32_out1;

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay35_out1 <= pole_pairs_AXI;
      END IF;
    END IF;
  END PROCESS Delay35_process;


  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch10_reg(0) <= X"00000000";
        delayMatch10_reg(1) <= X"00000000";
        delayMatch10_reg(2) <= X"00000000";
        delayMatch10_reg(3) <= X"00000000";
        delayMatch10_reg(4) <= X"00000000";
        delayMatch10_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch10_reg(0) <= delayMatch10_reg_next(0);
        delayMatch10_reg(1) <= delayMatch10_reg_next(1);
        delayMatch10_reg(2) <= delayMatch10_reg_next(2);
        delayMatch10_reg(3) <= delayMatch10_reg_next(3);
        delayMatch10_reg(4) <= delayMatch10_reg_next(4);
        delayMatch10_reg(5) <= delayMatch10_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  Delay35_out1_1 <= delayMatch10_reg(5);
  delayMatch10_reg_next(0) <= Delay35_out1;
  delayMatch10_reg_next(1) <= delayMatch10_reg(0);
  delayMatch10_reg_next(2) <= delayMatch10_reg(1);
  delayMatch10_reg_next(3) <= delayMatch10_reg(2);
  delayMatch10_reg_next(4) <= delayMatch10_reg(3);
  delayMatch10_reg_next(5) <= delayMatch10_reg(4);

  omega_el_1 <= omega_el;

  
  Switch_on11_out1_1 <= Delay11_out1 WHEN stateControl_10 = '0' ELSE
      Switch_on11_out1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay11_out1 <= Switch_on11_out1_1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  Switch_on11_out1 <= Delay11_out1 WHEN switch_compare_1_13 = '0' ELSE
      omega_el_1;

  
  switch_compare_1_15 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay34_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay34_out1 <= Lq_AXI;
      END IF;
    END IF;
  END PROCESS Delay34_process;


  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1 <= Switch_on10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch_on10_out1 <= Delay10_out1 WHEN switch_compare_1_15 = '0' ELSE
      Delay34_out1;

  
  switch_compare_1_16 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay36_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay36_out1 <= Ld_AXI;
      END IF;
    END IF;
  END PROCESS Delay36_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch_on9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch_on9_out1 <= Delay9_out1 WHEN switch_compare_1_16 = '0' ELSE
      Delay36_out1;

  
  switch_compare_1_17 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay37_out1 <= psiPM_AXI;
      END IF;
    END IF;
  END PROCESS Delay37_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch_on8_out1 <= Delay8_out1 WHEN switch_compare_1_17 = '0' ELSE
      Delay37_out1;

  
  switch_compare_1_18 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_11 <= '1';

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_reg(0) <= '0';
        delayMatch13_reg(1) <= '0';
        delayMatch13_reg(2) <= '0';
        delayMatch13_reg(3) <= '0';
        delayMatch13_reg(4) <= '0';
        delayMatch13_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch13_reg(0) <= delayMatch13_reg_next(0);
        delayMatch13_reg(1) <= delayMatch13_reg_next(1);
        delayMatch13_reg(2) <= delayMatch13_reg_next(2);
        delayMatch13_reg(3) <= delayMatch13_reg_next(3);
        delayMatch13_reg(4) <= delayMatch13_reg_next(4);
        delayMatch13_reg(5) <= delayMatch13_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  stateControl_12 <= delayMatch13_reg(5);
  delayMatch13_reg_next(0) <= stateControl_11;
  delayMatch13_reg_next(1) <= delayMatch13_reg(0);
  delayMatch13_reg_next(2) <= delayMatch13_reg(1);
  delayMatch13_reg_next(3) <= delayMatch13_reg(2);
  delayMatch13_reg_next(4) <= delayMatch13_reg(3);
  delayMatch13_reg_next(5) <= delayMatch13_reg(4);

  
  switch_compare_1_19 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  d_voltage_per_switching_state_signed <= signed(d_voltage_per_switching_state);

  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay38_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay38_out1 <= d_voltage_per_switching_state_signed;
      END IF;
    END IF;
  END PROCESS Delay38_process;


  d_voltage_per_switching_state_AXI_signed <= signed(d_voltage_per_switching_state_AXI);

  Delay52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay52_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay52_out1 <= d_voltage_per_switching_state_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay52_process;


  
  Switch_on27_out1 <= Delay38_out1 WHEN switch_compare_1_19 = '0' ELSE
      Delay52_out1;

  
  Switch_on7_out1_1 <= Delay7_out1 WHEN stateControl_12 = '0' ELSE
      Switch_on7_out1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch_on7_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch_on7_out1 <= Delay7_out1 WHEN switch_compare_1_18 = '0' ELSE
      Data_Type_Conversion11_out1;

  
  switch_compare_1_20 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_13 <= '1';

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= '0';
        delayMatch15_reg(1) <= '0';
        delayMatch15_reg(2) <= '0';
        delayMatch15_reg(3) <= '0';
        delayMatch15_reg(4) <= '0';
        delayMatch15_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
        delayMatch15_reg(3) <= delayMatch15_reg_next(3);
        delayMatch15_reg(4) <= delayMatch15_reg_next(4);
        delayMatch15_reg(5) <= delayMatch15_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  stateControl_14 <= delayMatch15_reg(5);
  delayMatch15_reg_next(0) <= stateControl_13;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);
  delayMatch15_reg_next(3) <= delayMatch15_reg(2);
  delayMatch15_reg_next(4) <= delayMatch15_reg(3);
  delayMatch15_reg_next(5) <= delayMatch15_reg(4);

  
  switch_compare_1_21 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  q_voltage_per_switching_state_signed <= signed(q_voltage_per_switching_state);

  Delay39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay39_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay39_out1 <= q_voltage_per_switching_state_signed;
      END IF;
    END IF;
  END PROCESS Delay39_process;


  q_voltage_per_switching_state_AXI_signed <= signed(q_voltage_per_switching_state_AXI);

  Delay53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay53_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay53_out1 <= q_voltage_per_switching_state_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay53_process;


  
  Switch_on28_out1 <= Delay39_out1 WHEN switch_compare_1_21 = '0' ELSE
      Delay53_out1;

  
  Switch_on6_out1_1 <= Delay6_out1 WHEN stateControl_14 = '0' ELSE
      Switch_on6_out1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch_on6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch_on6_out1 <= Delay6_out1 WHEN switch_compare_1_20 = '0' ELSE
      Data_Type_Conversion12_out1;

  
  switch_compare_1_22 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_15 <= '1';

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch17_reg(0) <= '0';
        delayMatch17_reg(1) <= '0';
        delayMatch17_reg(2) <= '0';
        delayMatch17_reg(3) <= '0';
        delayMatch17_reg(4) <= '0';
        delayMatch17_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch17_reg(0) <= delayMatch17_reg_next(0);
        delayMatch17_reg(1) <= delayMatch17_reg_next(1);
        delayMatch17_reg(2) <= delayMatch17_reg_next(2);
        delayMatch17_reg(3) <= delayMatch17_reg_next(3);
        delayMatch17_reg(4) <= delayMatch17_reg_next(4);
        delayMatch17_reg(5) <= delayMatch17_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  stateControl_16 <= delayMatch17_reg(5);
  delayMatch17_reg_next(0) <= stateControl_15;
  delayMatch17_reg_next(1) <= delayMatch17_reg(0);
  delayMatch17_reg_next(2) <= delayMatch17_reg(1);
  delayMatch17_reg_next(3) <= delayMatch17_reg(2);
  delayMatch17_reg_next(4) <= delayMatch17_reg(3);
  delayMatch17_reg_next(5) <= delayMatch17_reg(4);

  
  switch_compare_1_23 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  x_volatge_per_switching_state_signed <= signed(x_volatge_per_switching_state);

  Delay40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay40_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay40_out1 <= x_volatge_per_switching_state_signed;
      END IF;
    END IF;
  END PROCESS Delay40_process;


  x_voltage_per_switching_state_AXI_signed <= signed(x_voltage_per_switching_state_AXI);

  Delay54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay54_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay54_out1 <= x_voltage_per_switching_state_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay54_process;


  
  Switch_on29_out1 <= Delay40_out1 WHEN switch_compare_1_23 = '0' ELSE
      Delay54_out1;

  
  Switch_on5_out1_1 <= Delay5_out1 WHEN stateControl_16 = '0' ELSE
      Switch_on5_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch_on5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch_on5_out1 <= Delay5_out1 WHEN switch_compare_1_22 = '0' ELSE
      Data_Type_Conversion13_out1;

  
  switch_compare_1_24 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_17 <= '1';

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch19_reg(0) <= '0';
        delayMatch19_reg(1) <= '0';
        delayMatch19_reg(2) <= '0';
        delayMatch19_reg(3) <= '0';
        delayMatch19_reg(4) <= '0';
        delayMatch19_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch19_reg(0) <= delayMatch19_reg_next(0);
        delayMatch19_reg(1) <= delayMatch19_reg_next(1);
        delayMatch19_reg(2) <= delayMatch19_reg_next(2);
        delayMatch19_reg(3) <= delayMatch19_reg_next(3);
        delayMatch19_reg(4) <= delayMatch19_reg_next(4);
        delayMatch19_reg(5) <= delayMatch19_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch19_process;

  stateControl_18 <= delayMatch19_reg(5);
  delayMatch19_reg_next(0) <= stateControl_17;
  delayMatch19_reg_next(1) <= delayMatch19_reg(0);
  delayMatch19_reg_next(2) <= delayMatch19_reg(1);
  delayMatch19_reg_next(3) <= delayMatch19_reg(2);
  delayMatch19_reg_next(4) <= delayMatch19_reg(3);
  delayMatch19_reg_next(5) <= delayMatch19_reg(4);

  
  switch_compare_1_25 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  y_phase_volatge_per_switching_state_signed <= signed(y_phase_volatge_per_switching_state);

  Delay41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay41_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay41_out1 <= y_phase_volatge_per_switching_state_signed;
      END IF;
    END IF;
  END PROCESS Delay41_process;


  y_volatge_per_switching_state_AXI_signed <= signed(y_volatge_per_switching_state_AXI);

  Delay55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay55_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay55_out1 <= y_volatge_per_switching_state_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay55_process;


  
  Switch_on30_out1 <= Delay41_out1 WHEN switch_compare_1_25 = '0' ELSE
      Delay55_out1;

  
  Switch_on4_out1_1 <= Delay4_out1 WHEN stateControl_18 = '0' ELSE
      Switch_on4_out1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch_on4_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_on4_out1 <= Delay4_out1 WHEN switch_compare_1_24 = '0' ELSE
      Data_Type_Conversion14_out1;

  
  switch_compare_1_26 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay42_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay42_out1 <= id_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay42_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_on3_out1 <= Delay3_out1 WHEN switch_compare_1_26 = '0' ELSE
      Delay42_out1;

  
  switch_compare_1_27 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay43_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay43_out1 <= iq_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay43_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_on2_out1 <= Delay2_out1 WHEN switch_compare_1_27 = '0' ELSE
      Delay43_out1;

  
  switch_compare_1_28 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay44_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay44_out1 <= ix_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay44_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1_28 = '0' ELSE
      Delay44_out1;

  
  switch_compare_1_29 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay45_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay45_out1 <= iy_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay45_process;


  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay33_out1 <= Switch_on14_out1;
      END IF;
    END IF;
  END PROCESS Delay33_process;


  
  Switch_on14_out1 <= Delay33_out1 WHEN switch_compare_1_29 = '0' ELSE
      Delay45_out1;

  Delay57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay57_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay57_out1 <= Reset_1;
      END IF;
    END IF;
  END PROCESS Delay57_process;


  -- Free running, Signed Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_signed(1, 32);

  count_reset <= to_signed(0, 32);

  count <= HDL_Counter_out1 + count_step;

  
  count_1 <= HDL_Counter_out1 WHEN End_Cycle = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN End_Cycle_6 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Logical_Operator_out1 <= End_Cycle_1 AND Compare_To_Constant_out1;

  Delay58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay58_reg(0) <= '0';
        Delay58_reg(1) <= '0';
        Delay58_reg(2) <= '0';
      ELSIF enb = '1' THEN
        Delay58_reg(0) <= Delay58_reg_next(0);
        Delay58_reg(1) <= Delay58_reg_next(1);
        Delay58_reg(2) <= Delay58_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay58_process;

  Delay58_out1 <= Delay58_reg(2);
  Delay58_reg_next(0) <= Logical_Operator_out1;
  Delay58_reg_next(1) <= Delay58_reg(0);
  Delay58_reg_next(2) <= Delay58_reg(1);

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch21_reg(0) <= '0';
        delayMatch21_reg(1) <= '0';
        delayMatch21_reg(2) <= '0';
        delayMatch21_reg(3) <= '0';
        delayMatch21_reg(4) <= '0';
        delayMatch21_reg(5) <= '0';
        delayMatch21_reg(6) <= '0';
        delayMatch21_reg(7) <= '0';
        delayMatch21_reg(8) <= '0';
        delayMatch21_reg(9) <= '0';
        delayMatch21_reg(10) <= '0';
        delayMatch21_reg(11) <= '0';
        delayMatch21_reg(12) <= '0';
        delayMatch21_reg(13) <= '0';
        delayMatch21_reg(14) <= '0';
        delayMatch21_reg(15) <= '0';
        delayMatch21_reg(16) <= '0';
        delayMatch21_reg(17) <= '0';
        delayMatch21_reg(18) <= '0';
        delayMatch21_reg(19) <= '0';
        delayMatch21_reg(20) <= '0';
        delayMatch21_reg(21) <= '0';
        delayMatch21_reg(22) <= '0';
        delayMatch21_reg(23) <= '0';
        delayMatch21_reg(24) <= '0';
        delayMatch21_reg(25) <= '0';
        delayMatch21_reg(26) <= '0';
        delayMatch21_reg(27) <= '0';
        delayMatch21_reg(28) <= '0';
        delayMatch21_reg(29) <= '0';
        delayMatch21_reg(30) <= '0';
        delayMatch21_reg(31) <= '0';
        delayMatch21_reg(32) <= '0';
        delayMatch21_reg(33) <= '0';
        delayMatch21_reg(34) <= '0';
        delayMatch21_reg(35) <= '0';
        delayMatch21_reg(36) <= '0';
        delayMatch21_reg(37) <= '0';
        delayMatch21_reg(38) <= '0';
        delayMatch21_reg(39) <= '0';
        delayMatch21_reg(40) <= '0';
        delayMatch21_reg(41) <= '0';
        delayMatch21_reg(42) <= '0';
        delayMatch21_reg(43) <= '0';
        delayMatch21_reg(44) <= '0';
        delayMatch21_reg(45) <= '0';
        delayMatch21_reg(46) <= '0';
        delayMatch21_reg(47) <= '0';
        delayMatch21_reg(48) <= '0';
        delayMatch21_reg(49) <= '0';
        delayMatch21_reg(50) <= '0';
        delayMatch21_reg(51) <= '0';
        delayMatch21_reg(52) <= '0';
        delayMatch21_reg(53) <= '0';
        delayMatch21_reg(54) <= '0';
        delayMatch21_reg(55) <= '0';
        delayMatch21_reg(56) <= '0';
        delayMatch21_reg(57) <= '0';
        delayMatch21_reg(58) <= '0';
        delayMatch21_reg(59) <= '0';
        delayMatch21_reg(60) <= '0';
        delayMatch21_reg(61) <= '0';
        delayMatch21_reg(62) <= '0';
        delayMatch21_reg(63) <= '0';
        delayMatch21_reg(64) <= '0';
        delayMatch21_reg(65) <= '0';
        delayMatch21_reg(66) <= '0';
        delayMatch21_reg(67) <= '0';
        delayMatch21_reg(68) <= '0';
        delayMatch21_reg(69) <= '0';
        delayMatch21_reg(70) <= '0';
        delayMatch21_reg(71) <= '0';
        delayMatch21_reg(72) <= '0';
        delayMatch21_reg(73) <= '0';
        delayMatch21_reg(74) <= '0';
        delayMatch21_reg(75) <= '0';
        delayMatch21_reg(76) <= '0';
        delayMatch21_reg(77) <= '0';
        delayMatch21_reg(78) <= '0';
        delayMatch21_reg(79) <= '0';
        delayMatch21_reg(80) <= '0';
        delayMatch21_reg(81) <= '0';
        delayMatch21_reg(82) <= '0';
        delayMatch21_reg(83) <= '0';
        delayMatch21_reg(84) <= '0';
        delayMatch21_reg(85) <= '0';
        delayMatch21_reg(86) <= '0';
        delayMatch21_reg(87) <= '0';
        delayMatch21_reg(88) <= '0';
        delayMatch21_reg(89) <= '0';
        delayMatch21_reg(90) <= '0';
        delayMatch21_reg(91) <= '0';
        delayMatch21_reg(92) <= '0';
        delayMatch21_reg(93) <= '0';
        delayMatch21_reg(94) <= '0';
        delayMatch21_reg(95) <= '0';
        delayMatch21_reg(96) <= '0';
        delayMatch21_reg(97) <= '0';
        delayMatch21_reg(98) <= '0';
        delayMatch21_reg(99) <= '0';
        delayMatch21_reg(100) <= '0';
        delayMatch21_reg(101) <= '0';
        delayMatch21_reg(102) <= '0';
        delayMatch21_reg(103) <= '0';
        delayMatch21_reg(104) <= '0';
        delayMatch21_reg(105) <= '0';
        delayMatch21_reg(106) <= '0';
        delayMatch21_reg(107) <= '0';
        delayMatch21_reg(108) <= '0';
        delayMatch21_reg(109) <= '0';
        delayMatch21_reg(110) <= '0';
        delayMatch21_reg(111) <= '0';
        delayMatch21_reg(112) <= '0';
        delayMatch21_reg(113) <= '0';
        delayMatch21_reg(114) <= '0';
        delayMatch21_reg(115) <= '0';
        delayMatch21_reg(116) <= '0';
        delayMatch21_reg(117) <= '0';
        delayMatch21_reg(118) <= '0';
        delayMatch21_reg(119) <= '0';
      ELSIF enb = '1' THEN
        delayMatch21_reg(0) <= delayMatch21_reg_next(0);
        delayMatch21_reg(1) <= delayMatch21_reg_next(1);
        delayMatch21_reg(2) <= delayMatch21_reg_next(2);
        delayMatch21_reg(3) <= delayMatch21_reg_next(3);
        delayMatch21_reg(4) <= delayMatch21_reg_next(4);
        delayMatch21_reg(5) <= delayMatch21_reg_next(5);
        delayMatch21_reg(6) <= delayMatch21_reg_next(6);
        delayMatch21_reg(7) <= delayMatch21_reg_next(7);
        delayMatch21_reg(8) <= delayMatch21_reg_next(8);
        delayMatch21_reg(9) <= delayMatch21_reg_next(9);
        delayMatch21_reg(10) <= delayMatch21_reg_next(10);
        delayMatch21_reg(11) <= delayMatch21_reg_next(11);
        delayMatch21_reg(12) <= delayMatch21_reg_next(12);
        delayMatch21_reg(13) <= delayMatch21_reg_next(13);
        delayMatch21_reg(14) <= delayMatch21_reg_next(14);
        delayMatch21_reg(15) <= delayMatch21_reg_next(15);
        delayMatch21_reg(16) <= delayMatch21_reg_next(16);
        delayMatch21_reg(17) <= delayMatch21_reg_next(17);
        delayMatch21_reg(18) <= delayMatch21_reg_next(18);
        delayMatch21_reg(19) <= delayMatch21_reg_next(19);
        delayMatch21_reg(20) <= delayMatch21_reg_next(20);
        delayMatch21_reg(21) <= delayMatch21_reg_next(21);
        delayMatch21_reg(22) <= delayMatch21_reg_next(22);
        delayMatch21_reg(23) <= delayMatch21_reg_next(23);
        delayMatch21_reg(24) <= delayMatch21_reg_next(24);
        delayMatch21_reg(25) <= delayMatch21_reg_next(25);
        delayMatch21_reg(26) <= delayMatch21_reg_next(26);
        delayMatch21_reg(27) <= delayMatch21_reg_next(27);
        delayMatch21_reg(28) <= delayMatch21_reg_next(28);
        delayMatch21_reg(29) <= delayMatch21_reg_next(29);
        delayMatch21_reg(30) <= delayMatch21_reg_next(30);
        delayMatch21_reg(31) <= delayMatch21_reg_next(31);
        delayMatch21_reg(32) <= delayMatch21_reg_next(32);
        delayMatch21_reg(33) <= delayMatch21_reg_next(33);
        delayMatch21_reg(34) <= delayMatch21_reg_next(34);
        delayMatch21_reg(35) <= delayMatch21_reg_next(35);
        delayMatch21_reg(36) <= delayMatch21_reg_next(36);
        delayMatch21_reg(37) <= delayMatch21_reg_next(37);
        delayMatch21_reg(38) <= delayMatch21_reg_next(38);
        delayMatch21_reg(39) <= delayMatch21_reg_next(39);
        delayMatch21_reg(40) <= delayMatch21_reg_next(40);
        delayMatch21_reg(41) <= delayMatch21_reg_next(41);
        delayMatch21_reg(42) <= delayMatch21_reg_next(42);
        delayMatch21_reg(43) <= delayMatch21_reg_next(43);
        delayMatch21_reg(44) <= delayMatch21_reg_next(44);
        delayMatch21_reg(45) <= delayMatch21_reg_next(45);
        delayMatch21_reg(46) <= delayMatch21_reg_next(46);
        delayMatch21_reg(47) <= delayMatch21_reg_next(47);
        delayMatch21_reg(48) <= delayMatch21_reg_next(48);
        delayMatch21_reg(49) <= delayMatch21_reg_next(49);
        delayMatch21_reg(50) <= delayMatch21_reg_next(50);
        delayMatch21_reg(51) <= delayMatch21_reg_next(51);
        delayMatch21_reg(52) <= delayMatch21_reg_next(52);
        delayMatch21_reg(53) <= delayMatch21_reg_next(53);
        delayMatch21_reg(54) <= delayMatch21_reg_next(54);
        delayMatch21_reg(55) <= delayMatch21_reg_next(55);
        delayMatch21_reg(56) <= delayMatch21_reg_next(56);
        delayMatch21_reg(57) <= delayMatch21_reg_next(57);
        delayMatch21_reg(58) <= delayMatch21_reg_next(58);
        delayMatch21_reg(59) <= delayMatch21_reg_next(59);
        delayMatch21_reg(60) <= delayMatch21_reg_next(60);
        delayMatch21_reg(61) <= delayMatch21_reg_next(61);
        delayMatch21_reg(62) <= delayMatch21_reg_next(62);
        delayMatch21_reg(63) <= delayMatch21_reg_next(63);
        delayMatch21_reg(64) <= delayMatch21_reg_next(64);
        delayMatch21_reg(65) <= delayMatch21_reg_next(65);
        delayMatch21_reg(66) <= delayMatch21_reg_next(66);
        delayMatch21_reg(67) <= delayMatch21_reg_next(67);
        delayMatch21_reg(68) <= delayMatch21_reg_next(68);
        delayMatch21_reg(69) <= delayMatch21_reg_next(69);
        delayMatch21_reg(70) <= delayMatch21_reg_next(70);
        delayMatch21_reg(71) <= delayMatch21_reg_next(71);
        delayMatch21_reg(72) <= delayMatch21_reg_next(72);
        delayMatch21_reg(73) <= delayMatch21_reg_next(73);
        delayMatch21_reg(74) <= delayMatch21_reg_next(74);
        delayMatch21_reg(75) <= delayMatch21_reg_next(75);
        delayMatch21_reg(76) <= delayMatch21_reg_next(76);
        delayMatch21_reg(77) <= delayMatch21_reg_next(77);
        delayMatch21_reg(78) <= delayMatch21_reg_next(78);
        delayMatch21_reg(79) <= delayMatch21_reg_next(79);
        delayMatch21_reg(80) <= delayMatch21_reg_next(80);
        delayMatch21_reg(81) <= delayMatch21_reg_next(81);
        delayMatch21_reg(82) <= delayMatch21_reg_next(82);
        delayMatch21_reg(83) <= delayMatch21_reg_next(83);
        delayMatch21_reg(84) <= delayMatch21_reg_next(84);
        delayMatch21_reg(85) <= delayMatch21_reg_next(85);
        delayMatch21_reg(86) <= delayMatch21_reg_next(86);
        delayMatch21_reg(87) <= delayMatch21_reg_next(87);
        delayMatch21_reg(88) <= delayMatch21_reg_next(88);
        delayMatch21_reg(89) <= delayMatch21_reg_next(89);
        delayMatch21_reg(90) <= delayMatch21_reg_next(90);
        delayMatch21_reg(91) <= delayMatch21_reg_next(91);
        delayMatch21_reg(92) <= delayMatch21_reg_next(92);
        delayMatch21_reg(93) <= delayMatch21_reg_next(93);
        delayMatch21_reg(94) <= delayMatch21_reg_next(94);
        delayMatch21_reg(95) <= delayMatch21_reg_next(95);
        delayMatch21_reg(96) <= delayMatch21_reg_next(96);
        delayMatch21_reg(97) <= delayMatch21_reg_next(97);
        delayMatch21_reg(98) <= delayMatch21_reg_next(98);
        delayMatch21_reg(99) <= delayMatch21_reg_next(99);
        delayMatch21_reg(100) <= delayMatch21_reg_next(100);
        delayMatch21_reg(101) <= delayMatch21_reg_next(101);
        delayMatch21_reg(102) <= delayMatch21_reg_next(102);
        delayMatch21_reg(103) <= delayMatch21_reg_next(103);
        delayMatch21_reg(104) <= delayMatch21_reg_next(104);
        delayMatch21_reg(105) <= delayMatch21_reg_next(105);
        delayMatch21_reg(106) <= delayMatch21_reg_next(106);
        delayMatch21_reg(107) <= delayMatch21_reg_next(107);
        delayMatch21_reg(108) <= delayMatch21_reg_next(108);
        delayMatch21_reg(109) <= delayMatch21_reg_next(109);
        delayMatch21_reg(110) <= delayMatch21_reg_next(110);
        delayMatch21_reg(111) <= delayMatch21_reg_next(111);
        delayMatch21_reg(112) <= delayMatch21_reg_next(112);
        delayMatch21_reg(113) <= delayMatch21_reg_next(113);
        delayMatch21_reg(114) <= delayMatch21_reg_next(114);
        delayMatch21_reg(115) <= delayMatch21_reg_next(115);
        delayMatch21_reg(116) <= delayMatch21_reg_next(116);
        delayMatch21_reg(117) <= delayMatch21_reg_next(117);
        delayMatch21_reg(118) <= delayMatch21_reg_next(118);
        delayMatch21_reg(119) <= delayMatch21_reg_next(119);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  Delay58_out1_1 <= delayMatch21_reg(119);
  delayMatch21_reg_next(0) <= Delay58_out1;
  delayMatch21_reg_next(1) <= delayMatch21_reg(0);
  delayMatch21_reg_next(2) <= delayMatch21_reg(1);
  delayMatch21_reg_next(3) <= delayMatch21_reg(2);
  delayMatch21_reg_next(4) <= delayMatch21_reg(3);
  delayMatch21_reg_next(5) <= delayMatch21_reg(4);
  delayMatch21_reg_next(6) <= delayMatch21_reg(5);
  delayMatch21_reg_next(7) <= delayMatch21_reg(6);
  delayMatch21_reg_next(8) <= delayMatch21_reg(7);
  delayMatch21_reg_next(9) <= delayMatch21_reg(8);
  delayMatch21_reg_next(10) <= delayMatch21_reg(9);
  delayMatch21_reg_next(11) <= delayMatch21_reg(10);
  delayMatch21_reg_next(12) <= delayMatch21_reg(11);
  delayMatch21_reg_next(13) <= delayMatch21_reg(12);
  delayMatch21_reg_next(14) <= delayMatch21_reg(13);
  delayMatch21_reg_next(15) <= delayMatch21_reg(14);
  delayMatch21_reg_next(16) <= delayMatch21_reg(15);
  delayMatch21_reg_next(17) <= delayMatch21_reg(16);
  delayMatch21_reg_next(18) <= delayMatch21_reg(17);
  delayMatch21_reg_next(19) <= delayMatch21_reg(18);
  delayMatch21_reg_next(20) <= delayMatch21_reg(19);
  delayMatch21_reg_next(21) <= delayMatch21_reg(20);
  delayMatch21_reg_next(22) <= delayMatch21_reg(21);
  delayMatch21_reg_next(23) <= delayMatch21_reg(22);
  delayMatch21_reg_next(24) <= delayMatch21_reg(23);
  delayMatch21_reg_next(25) <= delayMatch21_reg(24);
  delayMatch21_reg_next(26) <= delayMatch21_reg(25);
  delayMatch21_reg_next(27) <= delayMatch21_reg(26);
  delayMatch21_reg_next(28) <= delayMatch21_reg(27);
  delayMatch21_reg_next(29) <= delayMatch21_reg(28);
  delayMatch21_reg_next(30) <= delayMatch21_reg(29);
  delayMatch21_reg_next(31) <= delayMatch21_reg(30);
  delayMatch21_reg_next(32) <= delayMatch21_reg(31);
  delayMatch21_reg_next(33) <= delayMatch21_reg(32);
  delayMatch21_reg_next(34) <= delayMatch21_reg(33);
  delayMatch21_reg_next(35) <= delayMatch21_reg(34);
  delayMatch21_reg_next(36) <= delayMatch21_reg(35);
  delayMatch21_reg_next(37) <= delayMatch21_reg(36);
  delayMatch21_reg_next(38) <= delayMatch21_reg(37);
  delayMatch21_reg_next(39) <= delayMatch21_reg(38);
  delayMatch21_reg_next(40) <= delayMatch21_reg(39);
  delayMatch21_reg_next(41) <= delayMatch21_reg(40);
  delayMatch21_reg_next(42) <= delayMatch21_reg(41);
  delayMatch21_reg_next(43) <= delayMatch21_reg(42);
  delayMatch21_reg_next(44) <= delayMatch21_reg(43);
  delayMatch21_reg_next(45) <= delayMatch21_reg(44);
  delayMatch21_reg_next(46) <= delayMatch21_reg(45);
  delayMatch21_reg_next(47) <= delayMatch21_reg(46);
  delayMatch21_reg_next(48) <= delayMatch21_reg(47);
  delayMatch21_reg_next(49) <= delayMatch21_reg(48);
  delayMatch21_reg_next(50) <= delayMatch21_reg(49);
  delayMatch21_reg_next(51) <= delayMatch21_reg(50);
  delayMatch21_reg_next(52) <= delayMatch21_reg(51);
  delayMatch21_reg_next(53) <= delayMatch21_reg(52);
  delayMatch21_reg_next(54) <= delayMatch21_reg(53);
  delayMatch21_reg_next(55) <= delayMatch21_reg(54);
  delayMatch21_reg_next(56) <= delayMatch21_reg(55);
  delayMatch21_reg_next(57) <= delayMatch21_reg(56);
  delayMatch21_reg_next(58) <= delayMatch21_reg(57);
  delayMatch21_reg_next(59) <= delayMatch21_reg(58);
  delayMatch21_reg_next(60) <= delayMatch21_reg(59);
  delayMatch21_reg_next(61) <= delayMatch21_reg(60);
  delayMatch21_reg_next(62) <= delayMatch21_reg(61);
  delayMatch21_reg_next(63) <= delayMatch21_reg(62);
  delayMatch21_reg_next(64) <= delayMatch21_reg(63);
  delayMatch21_reg_next(65) <= delayMatch21_reg(64);
  delayMatch21_reg_next(66) <= delayMatch21_reg(65);
  delayMatch21_reg_next(67) <= delayMatch21_reg(66);
  delayMatch21_reg_next(68) <= delayMatch21_reg(67);
  delayMatch21_reg_next(69) <= delayMatch21_reg(68);
  delayMatch21_reg_next(70) <= delayMatch21_reg(69);
  delayMatch21_reg_next(71) <= delayMatch21_reg(70);
  delayMatch21_reg_next(72) <= delayMatch21_reg(71);
  delayMatch21_reg_next(73) <= delayMatch21_reg(72);
  delayMatch21_reg_next(74) <= delayMatch21_reg(73);
  delayMatch21_reg_next(75) <= delayMatch21_reg(74);
  delayMatch21_reg_next(76) <= delayMatch21_reg(75);
  delayMatch21_reg_next(77) <= delayMatch21_reg(76);
  delayMatch21_reg_next(78) <= delayMatch21_reg(77);
  delayMatch21_reg_next(79) <= delayMatch21_reg(78);
  delayMatch21_reg_next(80) <= delayMatch21_reg(79);
  delayMatch21_reg_next(81) <= delayMatch21_reg(80);
  delayMatch21_reg_next(82) <= delayMatch21_reg(81);
  delayMatch21_reg_next(83) <= delayMatch21_reg(82);
  delayMatch21_reg_next(84) <= delayMatch21_reg(83);
  delayMatch21_reg_next(85) <= delayMatch21_reg(84);
  delayMatch21_reg_next(86) <= delayMatch21_reg(85);
  delayMatch21_reg_next(87) <= delayMatch21_reg(86);
  delayMatch21_reg_next(88) <= delayMatch21_reg(87);
  delayMatch21_reg_next(89) <= delayMatch21_reg(88);
  delayMatch21_reg_next(90) <= delayMatch21_reg(89);
  delayMatch21_reg_next(91) <= delayMatch21_reg(90);
  delayMatch21_reg_next(92) <= delayMatch21_reg(91);
  delayMatch21_reg_next(93) <= delayMatch21_reg(92);
  delayMatch21_reg_next(94) <= delayMatch21_reg(93);
  delayMatch21_reg_next(95) <= delayMatch21_reg(94);
  delayMatch21_reg_next(96) <= delayMatch21_reg(95);
  delayMatch21_reg_next(97) <= delayMatch21_reg(96);
  delayMatch21_reg_next(98) <= delayMatch21_reg(97);
  delayMatch21_reg_next(99) <= delayMatch21_reg(98);
  delayMatch21_reg_next(100) <= delayMatch21_reg(99);
  delayMatch21_reg_next(101) <= delayMatch21_reg(100);
  delayMatch21_reg_next(102) <= delayMatch21_reg(101);
  delayMatch21_reg_next(103) <= delayMatch21_reg(102);
  delayMatch21_reg_next(104) <= delayMatch21_reg(103);
  delayMatch21_reg_next(105) <= delayMatch21_reg(104);
  delayMatch21_reg_next(106) <= delayMatch21_reg(105);
  delayMatch21_reg_next(107) <= delayMatch21_reg(106);
  delayMatch21_reg_next(108) <= delayMatch21_reg(107);
  delayMatch21_reg_next(109) <= delayMatch21_reg(108);
  delayMatch21_reg_next(110) <= delayMatch21_reg(109);
  delayMatch21_reg_next(111) <= delayMatch21_reg(110);
  delayMatch21_reg_next(112) <= delayMatch21_reg(111);
  delayMatch21_reg_next(113) <= delayMatch21_reg(112);
  delayMatch21_reg_next(114) <= delayMatch21_reg(113);
  delayMatch21_reg_next(115) <= delayMatch21_reg(114);
  delayMatch21_reg_next(116) <= delayMatch21_reg(115);
  delayMatch21_reg_next(117) <= delayMatch21_reg(116);
  delayMatch21_reg_next(118) <= delayMatch21_reg(117);
  delayMatch21_reg_next(119) <= delayMatch21_reg(118);

  done <= Delay58_out1_1;

  Delay59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay59_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay59_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay59_process;


  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch22_reg(0) <= to_signed(0, 32);
        delayMatch22_reg(1) <= to_signed(0, 32);
        delayMatch22_reg(2) <= to_signed(0, 32);
        delayMatch22_reg(3) <= to_signed(0, 32);
        delayMatch22_reg(4) <= to_signed(0, 32);
        delayMatch22_reg(5) <= to_signed(0, 32);
        delayMatch22_reg(6) <= to_signed(0, 32);
        delayMatch22_reg(7) <= to_signed(0, 32);
        delayMatch22_reg(8) <= to_signed(0, 32);
        delayMatch22_reg(9) <= to_signed(0, 32);
        delayMatch22_reg(10) <= to_signed(0, 32);
        delayMatch22_reg(11) <= to_signed(0, 32);
        delayMatch22_reg(12) <= to_signed(0, 32);
        delayMatch22_reg(13) <= to_signed(0, 32);
        delayMatch22_reg(14) <= to_signed(0, 32);
        delayMatch22_reg(15) <= to_signed(0, 32);
        delayMatch22_reg(16) <= to_signed(0, 32);
        delayMatch22_reg(17) <= to_signed(0, 32);
        delayMatch22_reg(18) <= to_signed(0, 32);
        delayMatch22_reg(19) <= to_signed(0, 32);
        delayMatch22_reg(20) <= to_signed(0, 32);
        delayMatch22_reg(21) <= to_signed(0, 32);
        delayMatch22_reg(22) <= to_signed(0, 32);
        delayMatch22_reg(23) <= to_signed(0, 32);
        delayMatch22_reg(24) <= to_signed(0, 32);
        delayMatch22_reg(25) <= to_signed(0, 32);
        delayMatch22_reg(26) <= to_signed(0, 32);
        delayMatch22_reg(27) <= to_signed(0, 32);
        delayMatch22_reg(28) <= to_signed(0, 32);
        delayMatch22_reg(29) <= to_signed(0, 32);
        delayMatch22_reg(30) <= to_signed(0, 32);
        delayMatch22_reg(31) <= to_signed(0, 32);
        delayMatch22_reg(32) <= to_signed(0, 32);
        delayMatch22_reg(33) <= to_signed(0, 32);
        delayMatch22_reg(34) <= to_signed(0, 32);
        delayMatch22_reg(35) <= to_signed(0, 32);
        delayMatch22_reg(36) <= to_signed(0, 32);
        delayMatch22_reg(37) <= to_signed(0, 32);
        delayMatch22_reg(38) <= to_signed(0, 32);
        delayMatch22_reg(39) <= to_signed(0, 32);
        delayMatch22_reg(40) <= to_signed(0, 32);
        delayMatch22_reg(41) <= to_signed(0, 32);
        delayMatch22_reg(42) <= to_signed(0, 32);
        delayMatch22_reg(43) <= to_signed(0, 32);
        delayMatch22_reg(44) <= to_signed(0, 32);
        delayMatch22_reg(45) <= to_signed(0, 32);
        delayMatch22_reg(46) <= to_signed(0, 32);
        delayMatch22_reg(47) <= to_signed(0, 32);
        delayMatch22_reg(48) <= to_signed(0, 32);
        delayMatch22_reg(49) <= to_signed(0, 32);
        delayMatch22_reg(50) <= to_signed(0, 32);
        delayMatch22_reg(51) <= to_signed(0, 32);
        delayMatch22_reg(52) <= to_signed(0, 32);
        delayMatch22_reg(53) <= to_signed(0, 32);
        delayMatch22_reg(54) <= to_signed(0, 32);
        delayMatch22_reg(55) <= to_signed(0, 32);
        delayMatch22_reg(56) <= to_signed(0, 32);
        delayMatch22_reg(57) <= to_signed(0, 32);
        delayMatch22_reg(58) <= to_signed(0, 32);
        delayMatch22_reg(59) <= to_signed(0, 32);
        delayMatch22_reg(60) <= to_signed(0, 32);
        delayMatch22_reg(61) <= to_signed(0, 32);
        delayMatch22_reg(62) <= to_signed(0, 32);
        delayMatch22_reg(63) <= to_signed(0, 32);
        delayMatch22_reg(64) <= to_signed(0, 32);
        delayMatch22_reg(65) <= to_signed(0, 32);
        delayMatch22_reg(66) <= to_signed(0, 32);
        delayMatch22_reg(67) <= to_signed(0, 32);
        delayMatch22_reg(68) <= to_signed(0, 32);
        delayMatch22_reg(69) <= to_signed(0, 32);
        delayMatch22_reg(70) <= to_signed(0, 32);
        delayMatch22_reg(71) <= to_signed(0, 32);
        delayMatch22_reg(72) <= to_signed(0, 32);
        delayMatch22_reg(73) <= to_signed(0, 32);
        delayMatch22_reg(74) <= to_signed(0, 32);
        delayMatch22_reg(75) <= to_signed(0, 32);
        delayMatch22_reg(76) <= to_signed(0, 32);
        delayMatch22_reg(77) <= to_signed(0, 32);
        delayMatch22_reg(78) <= to_signed(0, 32);
        delayMatch22_reg(79) <= to_signed(0, 32);
        delayMatch22_reg(80) <= to_signed(0, 32);
        delayMatch22_reg(81) <= to_signed(0, 32);
        delayMatch22_reg(82) <= to_signed(0, 32);
        delayMatch22_reg(83) <= to_signed(0, 32);
        delayMatch22_reg(84) <= to_signed(0, 32);
        delayMatch22_reg(85) <= to_signed(0, 32);
        delayMatch22_reg(86) <= to_signed(0, 32);
        delayMatch22_reg(87) <= to_signed(0, 32);
        delayMatch22_reg(88) <= to_signed(0, 32);
        delayMatch22_reg(89) <= to_signed(0, 32);
        delayMatch22_reg(90) <= to_signed(0, 32);
        delayMatch22_reg(91) <= to_signed(0, 32);
        delayMatch22_reg(92) <= to_signed(0, 32);
        delayMatch22_reg(93) <= to_signed(0, 32);
        delayMatch22_reg(94) <= to_signed(0, 32);
        delayMatch22_reg(95) <= to_signed(0, 32);
        delayMatch22_reg(96) <= to_signed(0, 32);
        delayMatch22_reg(97) <= to_signed(0, 32);
        delayMatch22_reg(98) <= to_signed(0, 32);
        delayMatch22_reg(99) <= to_signed(0, 32);
        delayMatch22_reg(100) <= to_signed(0, 32);
        delayMatch22_reg(101) <= to_signed(0, 32);
        delayMatch22_reg(102) <= to_signed(0, 32);
        delayMatch22_reg(103) <= to_signed(0, 32);
        delayMatch22_reg(104) <= to_signed(0, 32);
        delayMatch22_reg(105) <= to_signed(0, 32);
        delayMatch22_reg(106) <= to_signed(0, 32);
        delayMatch22_reg(107) <= to_signed(0, 32);
        delayMatch22_reg(108) <= to_signed(0, 32);
        delayMatch22_reg(109) <= to_signed(0, 32);
        delayMatch22_reg(110) <= to_signed(0, 32);
        delayMatch22_reg(111) <= to_signed(0, 32);
        delayMatch22_reg(112) <= to_signed(0, 32);
        delayMatch22_reg(113) <= to_signed(0, 32);
        delayMatch22_reg(114) <= to_signed(0, 32);
        delayMatch22_reg(115) <= to_signed(0, 32);
        delayMatch22_reg(116) <= to_signed(0, 32);
        delayMatch22_reg(117) <= to_signed(0, 32);
        delayMatch22_reg(118) <= to_signed(0, 32);
        delayMatch22_reg(119) <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        delayMatch22_reg(0) <= delayMatch22_reg_next(0);
        delayMatch22_reg(1) <= delayMatch22_reg_next(1);
        delayMatch22_reg(2) <= delayMatch22_reg_next(2);
        delayMatch22_reg(3) <= delayMatch22_reg_next(3);
        delayMatch22_reg(4) <= delayMatch22_reg_next(4);
        delayMatch22_reg(5) <= delayMatch22_reg_next(5);
        delayMatch22_reg(6) <= delayMatch22_reg_next(6);
        delayMatch22_reg(7) <= delayMatch22_reg_next(7);
        delayMatch22_reg(8) <= delayMatch22_reg_next(8);
        delayMatch22_reg(9) <= delayMatch22_reg_next(9);
        delayMatch22_reg(10) <= delayMatch22_reg_next(10);
        delayMatch22_reg(11) <= delayMatch22_reg_next(11);
        delayMatch22_reg(12) <= delayMatch22_reg_next(12);
        delayMatch22_reg(13) <= delayMatch22_reg_next(13);
        delayMatch22_reg(14) <= delayMatch22_reg_next(14);
        delayMatch22_reg(15) <= delayMatch22_reg_next(15);
        delayMatch22_reg(16) <= delayMatch22_reg_next(16);
        delayMatch22_reg(17) <= delayMatch22_reg_next(17);
        delayMatch22_reg(18) <= delayMatch22_reg_next(18);
        delayMatch22_reg(19) <= delayMatch22_reg_next(19);
        delayMatch22_reg(20) <= delayMatch22_reg_next(20);
        delayMatch22_reg(21) <= delayMatch22_reg_next(21);
        delayMatch22_reg(22) <= delayMatch22_reg_next(22);
        delayMatch22_reg(23) <= delayMatch22_reg_next(23);
        delayMatch22_reg(24) <= delayMatch22_reg_next(24);
        delayMatch22_reg(25) <= delayMatch22_reg_next(25);
        delayMatch22_reg(26) <= delayMatch22_reg_next(26);
        delayMatch22_reg(27) <= delayMatch22_reg_next(27);
        delayMatch22_reg(28) <= delayMatch22_reg_next(28);
        delayMatch22_reg(29) <= delayMatch22_reg_next(29);
        delayMatch22_reg(30) <= delayMatch22_reg_next(30);
        delayMatch22_reg(31) <= delayMatch22_reg_next(31);
        delayMatch22_reg(32) <= delayMatch22_reg_next(32);
        delayMatch22_reg(33) <= delayMatch22_reg_next(33);
        delayMatch22_reg(34) <= delayMatch22_reg_next(34);
        delayMatch22_reg(35) <= delayMatch22_reg_next(35);
        delayMatch22_reg(36) <= delayMatch22_reg_next(36);
        delayMatch22_reg(37) <= delayMatch22_reg_next(37);
        delayMatch22_reg(38) <= delayMatch22_reg_next(38);
        delayMatch22_reg(39) <= delayMatch22_reg_next(39);
        delayMatch22_reg(40) <= delayMatch22_reg_next(40);
        delayMatch22_reg(41) <= delayMatch22_reg_next(41);
        delayMatch22_reg(42) <= delayMatch22_reg_next(42);
        delayMatch22_reg(43) <= delayMatch22_reg_next(43);
        delayMatch22_reg(44) <= delayMatch22_reg_next(44);
        delayMatch22_reg(45) <= delayMatch22_reg_next(45);
        delayMatch22_reg(46) <= delayMatch22_reg_next(46);
        delayMatch22_reg(47) <= delayMatch22_reg_next(47);
        delayMatch22_reg(48) <= delayMatch22_reg_next(48);
        delayMatch22_reg(49) <= delayMatch22_reg_next(49);
        delayMatch22_reg(50) <= delayMatch22_reg_next(50);
        delayMatch22_reg(51) <= delayMatch22_reg_next(51);
        delayMatch22_reg(52) <= delayMatch22_reg_next(52);
        delayMatch22_reg(53) <= delayMatch22_reg_next(53);
        delayMatch22_reg(54) <= delayMatch22_reg_next(54);
        delayMatch22_reg(55) <= delayMatch22_reg_next(55);
        delayMatch22_reg(56) <= delayMatch22_reg_next(56);
        delayMatch22_reg(57) <= delayMatch22_reg_next(57);
        delayMatch22_reg(58) <= delayMatch22_reg_next(58);
        delayMatch22_reg(59) <= delayMatch22_reg_next(59);
        delayMatch22_reg(60) <= delayMatch22_reg_next(60);
        delayMatch22_reg(61) <= delayMatch22_reg_next(61);
        delayMatch22_reg(62) <= delayMatch22_reg_next(62);
        delayMatch22_reg(63) <= delayMatch22_reg_next(63);
        delayMatch22_reg(64) <= delayMatch22_reg_next(64);
        delayMatch22_reg(65) <= delayMatch22_reg_next(65);
        delayMatch22_reg(66) <= delayMatch22_reg_next(66);
        delayMatch22_reg(67) <= delayMatch22_reg_next(67);
        delayMatch22_reg(68) <= delayMatch22_reg_next(68);
        delayMatch22_reg(69) <= delayMatch22_reg_next(69);
        delayMatch22_reg(70) <= delayMatch22_reg_next(70);
        delayMatch22_reg(71) <= delayMatch22_reg_next(71);
        delayMatch22_reg(72) <= delayMatch22_reg_next(72);
        delayMatch22_reg(73) <= delayMatch22_reg_next(73);
        delayMatch22_reg(74) <= delayMatch22_reg_next(74);
        delayMatch22_reg(75) <= delayMatch22_reg_next(75);
        delayMatch22_reg(76) <= delayMatch22_reg_next(76);
        delayMatch22_reg(77) <= delayMatch22_reg_next(77);
        delayMatch22_reg(78) <= delayMatch22_reg_next(78);
        delayMatch22_reg(79) <= delayMatch22_reg_next(79);
        delayMatch22_reg(80) <= delayMatch22_reg_next(80);
        delayMatch22_reg(81) <= delayMatch22_reg_next(81);
        delayMatch22_reg(82) <= delayMatch22_reg_next(82);
        delayMatch22_reg(83) <= delayMatch22_reg_next(83);
        delayMatch22_reg(84) <= delayMatch22_reg_next(84);
        delayMatch22_reg(85) <= delayMatch22_reg_next(85);
        delayMatch22_reg(86) <= delayMatch22_reg_next(86);
        delayMatch22_reg(87) <= delayMatch22_reg_next(87);
        delayMatch22_reg(88) <= delayMatch22_reg_next(88);
        delayMatch22_reg(89) <= delayMatch22_reg_next(89);
        delayMatch22_reg(90) <= delayMatch22_reg_next(90);
        delayMatch22_reg(91) <= delayMatch22_reg_next(91);
        delayMatch22_reg(92) <= delayMatch22_reg_next(92);
        delayMatch22_reg(93) <= delayMatch22_reg_next(93);
        delayMatch22_reg(94) <= delayMatch22_reg_next(94);
        delayMatch22_reg(95) <= delayMatch22_reg_next(95);
        delayMatch22_reg(96) <= delayMatch22_reg_next(96);
        delayMatch22_reg(97) <= delayMatch22_reg_next(97);
        delayMatch22_reg(98) <= delayMatch22_reg_next(98);
        delayMatch22_reg(99) <= delayMatch22_reg_next(99);
        delayMatch22_reg(100) <= delayMatch22_reg_next(100);
        delayMatch22_reg(101) <= delayMatch22_reg_next(101);
        delayMatch22_reg(102) <= delayMatch22_reg_next(102);
        delayMatch22_reg(103) <= delayMatch22_reg_next(103);
        delayMatch22_reg(104) <= delayMatch22_reg_next(104);
        delayMatch22_reg(105) <= delayMatch22_reg_next(105);
        delayMatch22_reg(106) <= delayMatch22_reg_next(106);
        delayMatch22_reg(107) <= delayMatch22_reg_next(107);
        delayMatch22_reg(108) <= delayMatch22_reg_next(108);
        delayMatch22_reg(109) <= delayMatch22_reg_next(109);
        delayMatch22_reg(110) <= delayMatch22_reg_next(110);
        delayMatch22_reg(111) <= delayMatch22_reg_next(111);
        delayMatch22_reg(112) <= delayMatch22_reg_next(112);
        delayMatch22_reg(113) <= delayMatch22_reg_next(113);
        delayMatch22_reg(114) <= delayMatch22_reg_next(114);
        delayMatch22_reg(115) <= delayMatch22_reg_next(115);
        delayMatch22_reg(116) <= delayMatch22_reg_next(116);
        delayMatch22_reg(117) <= delayMatch22_reg_next(117);
        delayMatch22_reg(118) <= delayMatch22_reg_next(118);
        delayMatch22_reg(119) <= delayMatch22_reg_next(119);
      END IF;
    END IF;
  END PROCESS delayMatch22_process;

  Delay59_out1_1 <= delayMatch22_reg(119);
  delayMatch22_reg_next(0) <= Delay59_out1;
  delayMatch22_reg_next(1) <= delayMatch22_reg(0);
  delayMatch22_reg_next(2) <= delayMatch22_reg(1);
  delayMatch22_reg_next(3) <= delayMatch22_reg(2);
  delayMatch22_reg_next(4) <= delayMatch22_reg(3);
  delayMatch22_reg_next(5) <= delayMatch22_reg(4);
  delayMatch22_reg_next(6) <= delayMatch22_reg(5);
  delayMatch22_reg_next(7) <= delayMatch22_reg(6);
  delayMatch22_reg_next(8) <= delayMatch22_reg(7);
  delayMatch22_reg_next(9) <= delayMatch22_reg(8);
  delayMatch22_reg_next(10) <= delayMatch22_reg(9);
  delayMatch22_reg_next(11) <= delayMatch22_reg(10);
  delayMatch22_reg_next(12) <= delayMatch22_reg(11);
  delayMatch22_reg_next(13) <= delayMatch22_reg(12);
  delayMatch22_reg_next(14) <= delayMatch22_reg(13);
  delayMatch22_reg_next(15) <= delayMatch22_reg(14);
  delayMatch22_reg_next(16) <= delayMatch22_reg(15);
  delayMatch22_reg_next(17) <= delayMatch22_reg(16);
  delayMatch22_reg_next(18) <= delayMatch22_reg(17);
  delayMatch22_reg_next(19) <= delayMatch22_reg(18);
  delayMatch22_reg_next(20) <= delayMatch22_reg(19);
  delayMatch22_reg_next(21) <= delayMatch22_reg(20);
  delayMatch22_reg_next(22) <= delayMatch22_reg(21);
  delayMatch22_reg_next(23) <= delayMatch22_reg(22);
  delayMatch22_reg_next(24) <= delayMatch22_reg(23);
  delayMatch22_reg_next(25) <= delayMatch22_reg(24);
  delayMatch22_reg_next(26) <= delayMatch22_reg(25);
  delayMatch22_reg_next(27) <= delayMatch22_reg(26);
  delayMatch22_reg_next(28) <= delayMatch22_reg(27);
  delayMatch22_reg_next(29) <= delayMatch22_reg(28);
  delayMatch22_reg_next(30) <= delayMatch22_reg(29);
  delayMatch22_reg_next(31) <= delayMatch22_reg(30);
  delayMatch22_reg_next(32) <= delayMatch22_reg(31);
  delayMatch22_reg_next(33) <= delayMatch22_reg(32);
  delayMatch22_reg_next(34) <= delayMatch22_reg(33);
  delayMatch22_reg_next(35) <= delayMatch22_reg(34);
  delayMatch22_reg_next(36) <= delayMatch22_reg(35);
  delayMatch22_reg_next(37) <= delayMatch22_reg(36);
  delayMatch22_reg_next(38) <= delayMatch22_reg(37);
  delayMatch22_reg_next(39) <= delayMatch22_reg(38);
  delayMatch22_reg_next(40) <= delayMatch22_reg(39);
  delayMatch22_reg_next(41) <= delayMatch22_reg(40);
  delayMatch22_reg_next(42) <= delayMatch22_reg(41);
  delayMatch22_reg_next(43) <= delayMatch22_reg(42);
  delayMatch22_reg_next(44) <= delayMatch22_reg(43);
  delayMatch22_reg_next(45) <= delayMatch22_reg(44);
  delayMatch22_reg_next(46) <= delayMatch22_reg(45);
  delayMatch22_reg_next(47) <= delayMatch22_reg(46);
  delayMatch22_reg_next(48) <= delayMatch22_reg(47);
  delayMatch22_reg_next(49) <= delayMatch22_reg(48);
  delayMatch22_reg_next(50) <= delayMatch22_reg(49);
  delayMatch22_reg_next(51) <= delayMatch22_reg(50);
  delayMatch22_reg_next(52) <= delayMatch22_reg(51);
  delayMatch22_reg_next(53) <= delayMatch22_reg(52);
  delayMatch22_reg_next(54) <= delayMatch22_reg(53);
  delayMatch22_reg_next(55) <= delayMatch22_reg(54);
  delayMatch22_reg_next(56) <= delayMatch22_reg(55);
  delayMatch22_reg_next(57) <= delayMatch22_reg(56);
  delayMatch22_reg_next(58) <= delayMatch22_reg(57);
  delayMatch22_reg_next(59) <= delayMatch22_reg(58);
  delayMatch22_reg_next(60) <= delayMatch22_reg(59);
  delayMatch22_reg_next(61) <= delayMatch22_reg(60);
  delayMatch22_reg_next(62) <= delayMatch22_reg(61);
  delayMatch22_reg_next(63) <= delayMatch22_reg(62);
  delayMatch22_reg_next(64) <= delayMatch22_reg(63);
  delayMatch22_reg_next(65) <= delayMatch22_reg(64);
  delayMatch22_reg_next(66) <= delayMatch22_reg(65);
  delayMatch22_reg_next(67) <= delayMatch22_reg(66);
  delayMatch22_reg_next(68) <= delayMatch22_reg(67);
  delayMatch22_reg_next(69) <= delayMatch22_reg(68);
  delayMatch22_reg_next(70) <= delayMatch22_reg(69);
  delayMatch22_reg_next(71) <= delayMatch22_reg(70);
  delayMatch22_reg_next(72) <= delayMatch22_reg(71);
  delayMatch22_reg_next(73) <= delayMatch22_reg(72);
  delayMatch22_reg_next(74) <= delayMatch22_reg(73);
  delayMatch22_reg_next(75) <= delayMatch22_reg(74);
  delayMatch22_reg_next(76) <= delayMatch22_reg(75);
  delayMatch22_reg_next(77) <= delayMatch22_reg(76);
  delayMatch22_reg_next(78) <= delayMatch22_reg(77);
  delayMatch22_reg_next(79) <= delayMatch22_reg(78);
  delayMatch22_reg_next(80) <= delayMatch22_reg(79);
  delayMatch22_reg_next(81) <= delayMatch22_reg(80);
  delayMatch22_reg_next(82) <= delayMatch22_reg(81);
  delayMatch22_reg_next(83) <= delayMatch22_reg(82);
  delayMatch22_reg_next(84) <= delayMatch22_reg(83);
  delayMatch22_reg_next(85) <= delayMatch22_reg(84);
  delayMatch22_reg_next(86) <= delayMatch22_reg(85);
  delayMatch22_reg_next(87) <= delayMatch22_reg(86);
  delayMatch22_reg_next(88) <= delayMatch22_reg(87);
  delayMatch22_reg_next(89) <= delayMatch22_reg(88);
  delayMatch22_reg_next(90) <= delayMatch22_reg(89);
  delayMatch22_reg_next(91) <= delayMatch22_reg(90);
  delayMatch22_reg_next(92) <= delayMatch22_reg(91);
  delayMatch22_reg_next(93) <= delayMatch22_reg(92);
  delayMatch22_reg_next(94) <= delayMatch22_reg(93);
  delayMatch22_reg_next(95) <= delayMatch22_reg(94);
  delayMatch22_reg_next(96) <= delayMatch22_reg(95);
  delayMatch22_reg_next(97) <= delayMatch22_reg(96);
  delayMatch22_reg_next(98) <= delayMatch22_reg(97);
  delayMatch22_reg_next(99) <= delayMatch22_reg(98);
  delayMatch22_reg_next(100) <= delayMatch22_reg(99);
  delayMatch22_reg_next(101) <= delayMatch22_reg(100);
  delayMatch22_reg_next(102) <= delayMatch22_reg(101);
  delayMatch22_reg_next(103) <= delayMatch22_reg(102);
  delayMatch22_reg_next(104) <= delayMatch22_reg(103);
  delayMatch22_reg_next(105) <= delayMatch22_reg(104);
  delayMatch22_reg_next(106) <= delayMatch22_reg(105);
  delayMatch22_reg_next(107) <= delayMatch22_reg(106);
  delayMatch22_reg_next(108) <= delayMatch22_reg(107);
  delayMatch22_reg_next(109) <= delayMatch22_reg(108);
  delayMatch22_reg_next(110) <= delayMatch22_reg(109);
  delayMatch22_reg_next(111) <= delayMatch22_reg(110);
  delayMatch22_reg_next(112) <= delayMatch22_reg(111);
  delayMatch22_reg_next(113) <= delayMatch22_reg(112);
  delayMatch22_reg_next(114) <= delayMatch22_reg(113);
  delayMatch22_reg_next(115) <= delayMatch22_reg(114);
  delayMatch22_reg_next(116) <= delayMatch22_reg(115);
  delayMatch22_reg_next(117) <= delayMatch22_reg(116);
  delayMatch22_reg_next(118) <= delayMatch22_reg(117);
  delayMatch22_reg_next(119) <= delayMatch22_reg(118);

  Index <= std_logic_vector(Delay59_out1_1);

  ce_out <= clk_enable;

  J <= Data_Type_Conversion1_out1;

  J_AXI <= Data_Type_Conversion1_out1;

END rtl;

