-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\UZ_D_GaN_Inverter_reduced\UZ_D_GaN_Inverter_src_UZ_D_GaN_Inverter.vhd
-- Created: 2021-05-05 08:30:11
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- AXI_Gan_Temp_1_freq           ce_out        1e-08
-- AXI_Gan_Temp_1_hightime       ce_out        1e-08
-- AXI_Gan_Temp_1_lowtime        ce_out        1e-08
-- AXI_Gan_Temp_1_dutycyc        ce_out        1e-08
-- AXI_Gan_Temp_2_freq           ce_out        1e-08
-- AXI_Gan_Temp_2_hightime       ce_out        1e-08
-- AXI_Gan_Temp_2_lowtime        ce_out        1e-08
-- AXI_Gan_Temp_2_dutycyc        ce_out        1e-08
-- AXI_Gan_Temp_3_freq           ce_out        1e-08
-- AXI_Gan_Temp_3_hightime       ce_out        1e-08
-- AXI_Gan_Temp_3_lowtime        ce_out        1e-08
-- AXI_Gan_Temp_3_dutycyc        ce_out        1e-08
-- AXI_Gan_Temp_4_freq           ce_out        1e-08
-- AXI_Gan_Temp_4_hightime       ce_out        1e-08
-- AXI_Gan_Temp_4_lowtime        ce_out        1e-08
-- AXI_Gan_Temp_4_dutycyc        ce_out        1e-08
-- AXI_GaN_FAULT_H1              ce_out        1e-08
-- AXI_GaN_FAULT_L1              ce_out        1e-08
-- AXI_GaN_FAULT_H2              ce_out        1e-08
-- AXI_GaN_FAULT_L2              ce_out        1e-08
-- AXI_GaN_FAULT_H3              ce_out        1e-08
-- AXI_GaN_FAULT_L3              ce_out        1e-08
-- AXI_GaN_OC_H1                 ce_out        1e-08
-- AXI_GaN_OC_L1                 ce_out        1e-08
-- AXI_GaN_OC_H2                 ce_out        1e-08
-- AXI_GaN_OC_L2                 ce_out        1e-08
-- AXI_GaN_OC_H3                 ce_out        1e-08
-- AXI_GaN_OC_L3                 ce_out        1e-08
-- AXI_I_DIAG                    ce_out        1e-08
-- AXI_I1_DIAG                   ce_out        1e-08
-- AXI_I2_DIAG                   ce_out        1e-08
-- AXI_I3_DIAG                   ce_out        1e-08
-- PWM_EN                        ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: UZ_D_GaN_Inverter_src_UZ_D_GaN_Inverter
-- Source Path: UZ_D_GaN_Inverter_reduced/UZ_D_GaN_Inverter
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY UZ_D_GaN_Inverter_src_UZ_D_GaN_Inverter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        GaN_Temp1                         :   IN    std_logic;
        GaN_Temp2                         :   IN    std_logic;
        GaN_Temp3                         :   IN    std_logic;
        GaN_Temp4                         :   IN    std_logic;
        GaN_Temp5                         :   IN    std_logic;
        GaN_Temp6                         :   IN    std_logic;
        GaN_FAULT_H1                      :   IN    std_logic;
        GaN_FAULT_L1                      :   IN    std_logic;
        GaN_FAULT_H2                      :   IN    std_logic;
        GaN_FAULT_L2                      :   IN    std_logic;
        GaN_FAULT_H3                      :   IN    std_logic;
        GaN_FAULT_L3                      :   IN    std_logic;
        GaN_OC_H1                         :   IN    std_logic;
        GaN_OC_L1                         :   IN    std_logic;
        GaN_OC_H2                         :   IN    std_logic;
        GaN_OC_L2                         :   IN    std_logic;
        GaN_OC_H3                         :   IN    std_logic;
        GaN_OC_L3                         :   IN    std_logic;
        I_DIAG                            :   IN    std_logic;
        I1_DIAG                           :   IN    std_logic;
        I2_DIAG                           :   IN    std_logic;
        I3_DIAG                           :   IN    std_logic;
        AXI_PWM_Enable                    :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        AXI_Gan_Temp_1_freq               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_1_hightime           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_1_lowtime            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_1_dutycyc            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        AXI_Gan_Temp_2_freq               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_2_hightime           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_2_lowtime            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_2_dutycyc            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        AXI_Gan_Temp_3_freq               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_3_hightime           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_3_lowtime            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_3_dutycyc            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        AXI_Gan_Temp_4_freq               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_4_hightime           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_4_lowtime            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_Gan_Temp_4_dutycyc            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        AXI_GaN_FAULT_H1                  :   OUT   std_logic;
        AXI_GaN_FAULT_L1                  :   OUT   std_logic;
        AXI_GaN_FAULT_H2                  :   OUT   std_logic;
        AXI_GaN_FAULT_L2                  :   OUT   std_logic;
        AXI_GaN_FAULT_H3                  :   OUT   std_logic;
        AXI_GaN_FAULT_L3                  :   OUT   std_logic;
        AXI_GaN_OC_H1                     :   OUT   std_logic;
        AXI_GaN_OC_L1                     :   OUT   std_logic;
        AXI_GaN_OC_H2                     :   OUT   std_logic;
        AXI_GaN_OC_L2                     :   OUT   std_logic;
        AXI_GaN_OC_H3                     :   OUT   std_logic;
        AXI_GaN_OC_L3                     :   OUT   std_logic;
        AXI_I_DIAG                        :   OUT   std_logic;
        AXI_I1_DIAG                       :   OUT   std_logic;
        AXI_I2_DIAG                       :   OUT   std_logic;
        AXI_I3_DIAG                       :   OUT   std_logic;
        PWM_EN                            :   OUT   std_logic
        );
END UZ_D_GaN_Inverter_src_UZ_D_GaN_Inverter;


ARCHITECTURE rtl OF UZ_D_GaN_Inverter_src_UZ_D_GaN_Inverter IS

  -- Component Declarations
  COMPONENT UZ_D_GaN_Inverter_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_HDL_Reciprocal
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_HDL_Reciprocal1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_Detect_Rise_Positive2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_HDL_Reciprocal2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_Detect_Rise_Positive3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_HDL_Reciprocal3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Rise_Positive
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Rise_Positive(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_HDL_Reciprocal
    USE ENTITY work.UZ_D_GaN_Inverter_src_HDL_Reciprocal(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Rise_Positive1
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Rise_Positive1(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive1
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive1(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_HDL_Reciprocal1
    USE ENTITY work.UZ_D_GaN_Inverter_src_HDL_Reciprocal1(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Rise_Positive2
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Rise_Positive2(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive2
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive2(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_HDL_Reciprocal2
    USE ENTITY work.UZ_D_GaN_Inverter_src_HDL_Reciprocal2(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Rise_Positive3
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Rise_Positive3(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive3
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive3(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_HDL_Reciprocal3
    USE ENTITY work.UZ_D_GaN_Inverter_src_HDL_Reciprocal3(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Delay17_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_freq                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay18_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Detect_Fall_Nonpositive_out1     : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL AXI_hightime                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay19_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_lowtime                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Reciprocal_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL HDL_Reciprocal_out1_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Product_mul_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En31
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Gain_mul_temp                    : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL AXI_dutycyc                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Detect_Rise_Positive1_out1       : std_logic;
  SIGNAL HDL_Counter1_out1                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Delay20_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_freq_1                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay21_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Detect_Fall_Nonpositive1_out1    : std_logic;
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL AXI_hightime_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay22_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_lowtime_1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Reciprocal1_out1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL HDL_Reciprocal1_out1_unsigned    : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Product1_mul_temp                : unsigned(63 DOWNTO 0);  -- ufix64_En31
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Gain1_mul_temp                   : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL AXI_dutycyc_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Detect_Rise_Positive2_out1       : std_logic;
  SIGNAL HDL_Counter2_out1                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Constant5_out1        : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Delay23_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_freq_2                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay24_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Detect_Fall_Nonpositive2_out1    : std_logic;
  SIGNAL Compare_To_Constant4_out1        : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL AXI_hightime_2                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay25_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_lowtime_2                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Reciprocal2_out1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL HDL_Reciprocal2_out1_unsigned    : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Product2_mul_temp                : unsigned(63 DOWNTO 0);  -- ufix64_En31
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Gain2_mul_temp                   : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL AXI_dutycyc_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Detect_Rise_Positive3_out1       : std_logic;
  SIGNAL HDL_Counter3_out1                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Constant7_out1        : std_logic;
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL Delay26_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_freq_3                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay27_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Detect_Fall_Nonpositive3_out1    : std_logic;
  SIGNAL Compare_To_Constant6_out1        : std_logic;
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL AXI_hightime_3                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay28_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_lowtime_3                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Reciprocal3_out1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL HDL_Reciprocal3_out1_unsigned    : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Product3_mul_temp                : unsigned(63 DOWNTO 0);  -- ufix64_En31
  SIGNAL Product3_out1                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Gain3_mul_temp                   : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL AXI_dutycyc_3                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL Delay15_out1                     : std_logic;
  SIGNAL Delay16_out1                     : std_logic;

BEGIN
  u_Detect_Rise_Positive : UZ_D_GaN_Inverter_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => GaN_Temp1,
              Y => Detect_Rise_Positive_out1
              );

  u_Detect_Fall_Nonpositive : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => GaN_Temp1,
              Y => Detect_Fall_Nonpositive_out1
              );

  u_HDL_Reciprocal : UZ_D_GaN_Inverter_src_HDL_Reciprocal
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              din => std_logic_vector(AXI_freq),  -- uint32
              dout => HDL_Reciprocal_out1  -- ufix32_En31
              );

  u_Detect_Rise_Positive1 : UZ_D_GaN_Inverter_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => GaN_Temp2,
              Y => Detect_Rise_Positive1_out1
              );

  u_Detect_Fall_Nonpositive1 : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => GaN_Temp2,
              Y => Detect_Fall_Nonpositive1_out1
              );

  u_HDL_Reciprocal1 : UZ_D_GaN_Inverter_src_HDL_Reciprocal1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              din => std_logic_vector(AXI_freq_1),  -- uint32
              dout => HDL_Reciprocal1_out1  -- ufix32_En31
              );

  u_Detect_Rise_Positive2 : UZ_D_GaN_Inverter_src_Detect_Rise_Positive2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => GaN_Temp3,
              Y => Detect_Rise_Positive2_out1
              );

  u_Detect_Fall_Nonpositive2 : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => GaN_Temp3,
              Y => Detect_Fall_Nonpositive2_out1
              );

  u_HDL_Reciprocal2 : UZ_D_GaN_Inverter_src_HDL_Reciprocal2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              din => std_logic_vector(AXI_freq_2),  -- uint32
              dout => HDL_Reciprocal2_out1  -- ufix32_En31
              );

  u_Detect_Rise_Positive3 : UZ_D_GaN_Inverter_src_Detect_Rise_Positive3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => GaN_Temp4,
              Y => Detect_Rise_Positive3_out1
              );

  u_Detect_Fall_Nonpositive3 : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => GaN_Temp4,
              Y => Detect_Fall_Nonpositive3_out1
              );

  u_HDL_Reciprocal3 : UZ_D_GaN_Inverter_src_HDL_Reciprocal3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              din => std_logic_vector(AXI_freq_3),  -- uint32
              dout => HDL_Reciprocal3_out1  -- ufix32_En31
              );

  enb <= clk_enable;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2500000
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(1, 32);
      ELSIF enb = '1' THEN
        IF Detect_Rise_Positive_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(1, 32);
        ELSIF HDL_Counter_out1 >= to_unsigned(2500000, 32) THEN 
          HDL_Counter_out1 <= to_unsigned(1, 32);
        ELSE 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(1, 32) ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Compare_To_Constant1_out1 > '0' ELSE
      '0';

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay17_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay18_out1 <= AXI_freq;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  AXI_freq <= Delay18_out1 WHEN switch_compare_1 = '0' ELSE
      Delay17_out1;

  AXI_Gan_Temp_1_freq <= std_logic_vector(AXI_freq);

  
  Compare_To_Constant_out1 <= '1' WHEN Detect_Fall_Nonpositive_out1 = '1' ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay19_out1 <= AXI_hightime;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  AXI_hightime <= Delay19_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay17_out1;

  AXI_Gan_Temp_1_hightime <= std_logic_vector(AXI_hightime);

  AXI_lowtime <= AXI_freq - AXI_hightime;

  AXI_Gan_Temp_1_lowtime <= std_logic_vector(AXI_lowtime);

  HDL_Reciprocal_out1_unsigned <= unsigned(HDL_Reciprocal_out1);

  Product_mul_temp <= AXI_hightime * HDL_Reciprocal_out1_unsigned;
  Product_out1 <= signed(Product_mul_temp(32 DOWNTO 1));

  Gain_mul_temp <= to_signed(1677721600, 32) * Product_out1;
  AXI_dutycyc <= Gain_mul_temp(61 DOWNTO 30);

  AXI_Gan_Temp_1_dutycyc <= std_logic_vector(AXI_dutycyc);

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2500000
  HDL_Counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter1_out1 <= to_unsigned(1, 32);
      ELSIF enb = '1' THEN
        IF Detect_Rise_Positive1_out1 = '1' THEN 
          HDL_Counter1_out1 <= to_unsigned(1, 32);
        ELSIF HDL_Counter1_out1 >= to_unsigned(2500000, 32) THEN 
          HDL_Counter1_out1 <= to_unsigned(1, 32);
        ELSE 
          HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  Compare_To_Constant3_out1 <= '1' WHEN HDL_Counter1_out1 = to_unsigned(1, 32) ELSE
      '0';

  
  switch_compare_1_2 <= '1' WHEN Compare_To_Constant3_out1 > '0' ELSE
      '0';

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay20_out1 <= HDL_Counter1_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay21_out1 <= AXI_freq_1;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  
  AXI_freq_1 <= Delay21_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay20_out1;

  AXI_Gan_Temp_2_freq <= std_logic_vector(AXI_freq_1);

  
  Compare_To_Constant2_out1 <= '1' WHEN Detect_Fall_Nonpositive1_out1 = '1' ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN Compare_To_Constant2_out1 > '0' ELSE
      '0';

  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay22_out1 <= AXI_hightime_1;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  
  AXI_hightime_1 <= Delay22_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay20_out1;

  AXI_Gan_Temp_2_hightime <= std_logic_vector(AXI_hightime_1);

  AXI_lowtime_1 <= AXI_freq_1 - AXI_hightime_1;

  AXI_Gan_Temp_2_lowtime <= std_logic_vector(AXI_lowtime_1);

  HDL_Reciprocal1_out1_unsigned <= unsigned(HDL_Reciprocal1_out1);

  Product1_mul_temp <= AXI_hightime_1 * HDL_Reciprocal1_out1_unsigned;
  Product1_out1 <= signed(Product1_mul_temp(32 DOWNTO 1));

  Gain1_mul_temp <= to_signed(1677721600, 32) * Product1_out1;
  AXI_dutycyc_1 <= Gain1_mul_temp(61 DOWNTO 30);

  AXI_Gan_Temp_2_dutycyc <= std_logic_vector(AXI_dutycyc_1);

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2500000
  HDL_Counter2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter2_out1 <= to_unsigned(1, 32);
      ELSIF enb = '1' THEN
        IF Detect_Rise_Positive2_out1 = '1' THEN 
          HDL_Counter2_out1 <= to_unsigned(1, 32);
        ELSIF HDL_Counter2_out1 >= to_unsigned(2500000, 32) THEN 
          HDL_Counter2_out1 <= to_unsigned(1, 32);
        ELSE 
          HDL_Counter2_out1 <= HDL_Counter2_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  
  Compare_To_Constant5_out1 <= '1' WHEN HDL_Counter2_out1 = to_unsigned(1, 32) ELSE
      '0';

  
  switch_compare_1_4 <= '1' WHEN Compare_To_Constant5_out1 > '0' ELSE
      '0';

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay23_out1 <= HDL_Counter2_out1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay24_out1 <= AXI_freq_2;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  
  AXI_freq_2 <= Delay24_out1 WHEN switch_compare_1_4 = '0' ELSE
      Delay23_out1;

  AXI_Gan_Temp_3_freq <= std_logic_vector(AXI_freq_2);

  
  Compare_To_Constant4_out1 <= '1' WHEN Detect_Fall_Nonpositive2_out1 = '1' ELSE
      '0';

  
  switch_compare_1_5 <= '1' WHEN Compare_To_Constant4_out1 > '0' ELSE
      '0';

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay25_out1 <= AXI_hightime_2;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  
  AXI_hightime_2 <= Delay25_out1 WHEN switch_compare_1_5 = '0' ELSE
      Delay23_out1;

  AXI_Gan_Temp_3_hightime <= std_logic_vector(AXI_hightime_2);

  AXI_lowtime_2 <= AXI_freq_2 - AXI_hightime_2;

  AXI_Gan_Temp_3_lowtime <= std_logic_vector(AXI_lowtime_2);

  HDL_Reciprocal2_out1_unsigned <= unsigned(HDL_Reciprocal2_out1);

  Product2_mul_temp <= AXI_hightime_2 * HDL_Reciprocal2_out1_unsigned;
  Product2_out1 <= signed(Product2_mul_temp(32 DOWNTO 1));

  Gain2_mul_temp <= to_signed(1677721600, 32) * Product2_out1;
  AXI_dutycyc_2 <= Gain2_mul_temp(61 DOWNTO 30);

  AXI_Gan_Temp_3_dutycyc <= std_logic_vector(AXI_dutycyc_2);

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2500000
  HDL_Counter3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter3_out1 <= to_unsigned(1, 32);
      ELSIF enb = '1' THEN
        IF Detect_Rise_Positive3_out1 = '1' THEN 
          HDL_Counter3_out1 <= to_unsigned(1, 32);
        ELSIF HDL_Counter3_out1 >= to_unsigned(2500000, 32) THEN 
          HDL_Counter3_out1 <= to_unsigned(1, 32);
        ELSE 
          HDL_Counter3_out1 <= HDL_Counter3_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter3_process;


  
  Compare_To_Constant7_out1 <= '1' WHEN HDL_Counter3_out1 = to_unsigned(1, 32) ELSE
      '0';

  
  switch_compare_1_6 <= '1' WHEN Compare_To_Constant7_out1 > '0' ELSE
      '0';

  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay26_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay26_out1 <= HDL_Counter3_out1;
      END IF;
    END IF;
  END PROCESS Delay26_process;


  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay27_out1 <= AXI_freq_3;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  
  AXI_freq_3 <= Delay27_out1 WHEN switch_compare_1_6 = '0' ELSE
      Delay26_out1;

  AXI_Gan_Temp_4_freq <= std_logic_vector(AXI_freq_3);

  
  Compare_To_Constant6_out1 <= '1' WHEN Detect_Fall_Nonpositive3_out1 = '1' ELSE
      '0';

  
  switch_compare_1_7 <= '1' WHEN Compare_To_Constant6_out1 > '0' ELSE
      '0';

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay28_out1 <= AXI_hightime_3;
      END IF;
    END IF;
  END PROCESS Delay28_process;


  
  AXI_hightime_3 <= Delay28_out1 WHEN switch_compare_1_7 = '0' ELSE
      Delay26_out1;

  AXI_Gan_Temp_4_hightime <= std_logic_vector(AXI_hightime_3);

  AXI_lowtime_3 <= AXI_freq_3 - AXI_hightime_3;

  AXI_Gan_Temp_4_lowtime <= std_logic_vector(AXI_lowtime_3);

  HDL_Reciprocal3_out1_unsigned <= unsigned(HDL_Reciprocal3_out1);

  Product3_mul_temp <= AXI_hightime_3 * HDL_Reciprocal3_out1_unsigned;
  Product3_out1 <= signed(Product3_mul_temp(32 DOWNTO 1));

  Gain3_mul_temp <= to_signed(1677721600, 32) * Product3_out1;
  AXI_dutycyc_3 <= Gain3_mul_temp(61 DOWNTO 30);

  AXI_Gan_Temp_4_dutycyc <= std_logic_vector(AXI_dutycyc_3);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= GaN_FAULT_H1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= GaN_FAULT_L1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= GaN_FAULT_H2;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= GaN_FAULT_L2;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= GaN_FAULT_H3;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= GaN_FAULT_L3;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= GaN_OC_H1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= GaN_OC_L1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_out1 <= GaN_OC_H2;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1 <= GaN_OC_L2;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_out1 <= GaN_OC_H3;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_out1 <= GaN_OC_L3;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1 <= I_DIAG;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay13_out1 <= I1_DIAG;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay14_out1 <= I2_DIAG;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay15_out1 <= I3_DIAG;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay16_out1 <= AXI_PWM_Enable;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  ce_out <= clk_enable;

  AXI_GaN_FAULT_H1 <= Delay_out1;

  AXI_GaN_FAULT_L1 <= Delay1_out1;

  AXI_GaN_FAULT_H2 <= Delay2_out1;

  AXI_GaN_FAULT_L2 <= Delay3_out1;

  AXI_GaN_FAULT_H3 <= Delay4_out1;

  AXI_GaN_FAULT_L3 <= Delay5_out1;

  AXI_GaN_OC_H1 <= Delay6_out1;

  AXI_GaN_OC_L1 <= Delay7_out1;

  AXI_GaN_OC_H2 <= Delay8_out1;

  AXI_GaN_OC_L2 <= Delay9_out1;

  AXI_GaN_OC_H3 <= Delay10_out1;

  AXI_GaN_OC_L3 <= Delay11_out1;

  AXI_I_DIAG <= Delay12_out1;

  AXI_I1_DIAG <= Delay13_out1;

  AXI_I2_DIAG <= Delay14_out1;

  AXI_I3_DIAG <= Delay15_out1;

  PWM_EN <= Delay16_out1;

END rtl;

