-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_p_anonymous_namespace_preProcess_float_4u_unsigned_int_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_x_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    p_x_empty_n : IN STD_LOGIC;
    p_x_read : OUT STD_LOGIC;
    p_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_data_full_n : IN STD_LOGIC;
    p_data_write : OUT STD_LOGIC;
    l_numElem_cast_loc_dout : IN STD_LOGIC_VECTOR (27 downto 0);
    l_numElem_cast_loc_empty_n : IN STD_LOGIC;
    l_numElem_cast_loc_read : OUT STD_LOGIC;
    p_mulIters_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_mulIters_empty_n : IN STD_LOGIC;
    p_mulIters_read : OUT STD_LOGIC;
    l_numElem_cast_loc_out_din : OUT STD_LOGIC_VECTOR (27 downto 0);
    l_numElem_cast_loc_out_full_n : IN STD_LOGIC;
    l_numElem_cast_loc_out_write : OUT STD_LOGIC;
    p_mulIters_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_mulIters_out_full_n : IN STD_LOGIC;
    p_mulIters_out_write : OUT STD_LOGIC );
end;


architecture behav of BGD_p_anonymous_namespace_preProcess_float_4u_unsigned_int_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal p_x_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln50_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_data_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal icmp_ln50_reg_484_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal l_numElem_cast_loc_blk_n : STD_LOGIC;
    signal p_mulIters_blk_n : STD_LOGIC;
    signal l_numElem_cast_loc_out_blk_n : STD_LOGIC;
    signal p_mulIters_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_161 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln43_fu_240_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln43_reg_479 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln50_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln50_reg_484_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_484_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_251_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln674_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_29_i_i_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_30_i_i_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_31_i_i_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_32_i_i_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_33_i_i_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_34_i_i_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_35_i_i_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_36_i_i_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_37_i_i_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_38_i_i_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_39_i_i_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_40_i_i_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_41_i_i_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_42_i_i_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_i_i_i_i_i_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i2_i_i_i_i_i_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_i2_i_i_i_i_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i2_i5_i_i_i_i_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_i_i2_i_i_i_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i2_i_i5_i_i_i_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_i2_i9_i_i_i_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i2_i5_i12_i_i_i_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_i_i_i_i_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i6_i_i_i_i_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_i6_i_i_i_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i6_i13_i_i_i_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_i_i_i_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i14_i_i_i_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_sum_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_fu_240_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln43_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_ce : STD_LOGIC;
    signal grp_fu_176_ce : STD_LOGIC;
    signal grp_fu_180_ce : STD_LOGIC;
    signal grp_fu_184_ce : STD_LOGIC;
    signal grp_fu_188_ce : STD_LOGIC;
    signal grp_fu_192_ce : STD_LOGIC;
    signal grp_fu_196_ce : STD_LOGIC;
    signal grp_fu_200_ce : STD_LOGIC;
    signal grp_fu_204_ce : STD_LOGIC;
    signal grp_fu_208_ce : STD_LOGIC;
    signal grp_fu_212_ce : STD_LOGIC;
    signal grp_fu_216_ce : STD_LOGIC;
    signal grp_fu_220_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_228_ce : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln43_fu_240_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln43_fu_240_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component BGD_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_mul_28ns_32ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U226 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_172_p0,
        din1 => grp_fu_172_p1,
        ce => grp_fu_172_ce,
        dout => grp_fu_172_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U227 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_176_p0,
        din1 => grp_fu_176_p1,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U228 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        ce => grp_fu_180_ce,
        dout => grp_fu_180_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U229 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_184_p0,
        din1 => grp_fu_184_p1,
        ce => grp_fu_184_ce,
        dout => grp_fu_184_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U230 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_188_p0,
        din1 => grp_fu_188_p1,
        ce => grp_fu_188_ce,
        dout => grp_fu_188_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U231 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_192_p0,
        din1 => grp_fu_192_p1,
        ce => grp_fu_192_ce,
        dout => grp_fu_192_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U232 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_196_p0,
        din1 => grp_fu_196_p1,
        ce => grp_fu_196_ce,
        dout => grp_fu_196_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U233 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_200_p0,
        din1 => grp_fu_200_p1,
        ce => grp_fu_200_ce,
        dout => grp_fu_200_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U234 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_i_i_i_i_i_i_reg_653,
        din1 => add_i2_i_i_i_i_i_reg_658,
        ce => grp_fu_204_ce,
        dout => grp_fu_204_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U235 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_i_i2_i_i_i_i_reg_663,
        din1 => add_i2_i5_i_i_i_i_reg_668,
        ce => grp_fu_208_ce,
        dout => grp_fu_208_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U236 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_i_i_i2_i_i_i_reg_673,
        din1 => add_i2_i_i5_i_i_i_reg_678,
        ce => grp_fu_212_ce,
        dout => grp_fu_212_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U237 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_i_i2_i9_i_i_i_reg_683,
        din1 => add_i2_i5_i12_i_i_i_reg_688,
        ce => grp_fu_216_ce,
        dout => grp_fu_216_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U238 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_i_i_i_i_i_reg_693,
        din1 => add_i6_i_i_i_i_reg_698,
        ce => grp_fu_220_ce,
        dout => grp_fu_220_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U239 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_i_i6_i_i_i_reg_703,
        din1 => add_i6_i13_i_i_i_reg_708,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U240 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_i_i_i_i_reg_713,
        din1 => add_i14_i_i_i_reg_718,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    mul_28ns_32ns_60_1_1_U241 : component BGD_mul_28ns_32ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 32,
        dout_WIDTH => 60)
    port map (
        din0 => mul_ln43_fu_240_p0,
        din1 => mul_ln43_fu_240_p1,
        dout => mul_ln43_fu_240_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                elsif ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln50_fu_246_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_161 <= add_ln50_fu_251_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_161 <= ap_const_lv60_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln50_reg_484_pp0_iter15_reg = ap_const_lv1_0))) then
                add_i14_i_i_i_reg_718 <= grp_fu_224_p2;
                add_i_i_i_i_reg_713 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln50_reg_484_pp0_iter5_reg = ap_const_lv1_0))) then
                add_i2_i5_i12_i_i_i_reg_688 <= grp_fu_200_p2;
                add_i2_i5_i_i_i_i_reg_668 <= grp_fu_184_p2;
                add_i2_i_i5_i_i_i_reg_678 <= grp_fu_192_p2;
                add_i2_i_i_i_i_i_reg_658 <= grp_fu_176_p2;
                add_i_i2_i9_i_i_i_reg_683 <= grp_fu_196_p2;
                add_i_i2_i_i_i_i_reg_663 <= grp_fu_180_p2;
                add_i_i_i2_i_i_i_reg_673 <= grp_fu_188_p2;
                add_i_i_i_i_i_i_reg_653 <= grp_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln50_reg_484_pp0_iter10_reg = ap_const_lv1_0))) then
                add_i6_i13_i_i_i_reg_708 <= grp_fu_216_p2;
                add_i6_i_i_i_i_reg_698 <= grp_fu_208_p2;
                add_i_i6_i_i_i_reg_703 <= grp_fu_212_p2;
                add_i_i_i_i_i_reg_693 <= grp_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln50_reg_484 <= icmp_ln50_fu_246_p2;
                icmp_ln50_reg_484_pp0_iter1_reg <= icmp_ln50_reg_484;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln50_reg_484_pp0_iter10_reg <= icmp_ln50_reg_484_pp0_iter9_reg;
                icmp_ln50_reg_484_pp0_iter11_reg <= icmp_ln50_reg_484_pp0_iter10_reg;
                icmp_ln50_reg_484_pp0_iter12_reg <= icmp_ln50_reg_484_pp0_iter11_reg;
                icmp_ln50_reg_484_pp0_iter13_reg <= icmp_ln50_reg_484_pp0_iter12_reg;
                icmp_ln50_reg_484_pp0_iter14_reg <= icmp_ln50_reg_484_pp0_iter13_reg;
                icmp_ln50_reg_484_pp0_iter15_reg <= icmp_ln50_reg_484_pp0_iter14_reg;
                icmp_ln50_reg_484_pp0_iter16_reg <= icmp_ln50_reg_484_pp0_iter15_reg;
                icmp_ln50_reg_484_pp0_iter17_reg <= icmp_ln50_reg_484_pp0_iter16_reg;
                icmp_ln50_reg_484_pp0_iter18_reg <= icmp_ln50_reg_484_pp0_iter17_reg;
                icmp_ln50_reg_484_pp0_iter19_reg <= icmp_ln50_reg_484_pp0_iter18_reg;
                icmp_ln50_reg_484_pp0_iter20_reg <= icmp_ln50_reg_484_pp0_iter19_reg;
                icmp_ln50_reg_484_pp0_iter21_reg <= icmp_ln50_reg_484_pp0_iter20_reg;
                icmp_ln50_reg_484_pp0_iter2_reg <= icmp_ln50_reg_484_pp0_iter1_reg;
                icmp_ln50_reg_484_pp0_iter3_reg <= icmp_ln50_reg_484_pp0_iter2_reg;
                icmp_ln50_reg_484_pp0_iter4_reg <= icmp_ln50_reg_484_pp0_iter3_reg;
                icmp_ln50_reg_484_pp0_iter5_reg <= icmp_ln50_reg_484_pp0_iter4_reg;
                icmp_ln50_reg_484_pp0_iter6_reg <= icmp_ln50_reg_484_pp0_iter5_reg;
                icmp_ln50_reg_484_pp0_iter7_reg <= icmp_ln50_reg_484_pp0_iter6_reg;
                icmp_ln50_reg_484_pp0_iter8_reg <= icmp_ln50_reg_484_pp0_iter7_reg;
                icmp_ln50_reg_484_pp0_iter9_reg <= icmp_ln50_reg_484_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln50_reg_484_pp0_iter20_reg = ap_const_lv1_0))) then
                l_sum_reg_723 <= grp_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln43_reg_479 <= mul_ln43_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_484 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_29_i_i_reg_503 <= p_x_dout(95 downto 64);
                p_Result_30_i_i_reg_508 <= p_x_dout(127 downto 96);
                p_Result_31_i_i_reg_513 <= p_x_dout(159 downto 128);
                p_Result_32_i_i_reg_518 <= p_x_dout(191 downto 160);
                p_Result_33_i_i_reg_523 <= p_x_dout(223 downto 192);
                p_Result_34_i_i_reg_528 <= p_x_dout(255 downto 224);
                p_Result_35_i_i_reg_533 <= p_x_dout(287 downto 256);
                p_Result_36_i_i_reg_538 <= p_x_dout(319 downto 288);
                p_Result_37_i_i_reg_543 <= p_x_dout(351 downto 320);
                p_Result_38_i_i_reg_548 <= p_x_dout(383 downto 352);
                p_Result_39_i_i_reg_553 <= p_x_dout(415 downto 384);
                p_Result_40_i_i_reg_558 <= p_x_dout(447 downto 416);
                p_Result_41_i_i_reg_563 <= p_x_dout(479 downto 448);
                p_Result_42_i_i_reg_568 <= p_x_dout(511 downto 480);
                p_Result_i_i_reg_498 <= p_x_dout(63 downto 32);
                trunc_ln674_reg_493 <= trunc_ln674_fu_257_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n, p_mulIters_empty_n, l_numElem_cast_loc_out_full_n, p_mulIters_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter22, icmp_ln50_fu_246_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter21)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln50_fu_246_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln50_fu_246_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln50_fu_251_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_161) + unsigned(ap_const_lv60_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state25 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_x_empty_n, p_data_full_n, ap_enable_reg_pp0_iter1, icmp_ln50_reg_484, ap_enable_reg_pp0_iter22, icmp_ln50_reg_484_pp0_iter21_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln50_reg_484_pp0_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (p_data_full_n = ap_const_logic_0)) or ((icmp_ln50_reg_484 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_x_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_x_empty_n, p_data_full_n, ap_enable_reg_pp0_iter1, icmp_ln50_reg_484, ap_enable_reg_pp0_iter22, icmp_ln50_reg_484_pp0_iter21_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln50_reg_484_pp0_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (p_data_full_n = ap_const_logic_0)) or ((icmp_ln50_reg_484 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_x_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_x_empty_n, p_data_full_n, ap_enable_reg_pp0_iter1, icmp_ln50_reg_484, ap_enable_reg_pp0_iter22, icmp_ln50_reg_484_pp0_iter21_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln50_reg_484_pp0_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (p_data_full_n = ap_const_logic_0)) or ((icmp_ln50_reg_484 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_x_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, l_numElem_cast_loc_empty_n, p_mulIters_empty_n, l_numElem_cast_loc_out_full_n, p_mulIters_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_pp0_stage0_iter22_assign_proc : process(p_data_full_n, icmp_ln50_reg_484_pp0_iter21_reg)
    begin
                ap_block_state24_pp0_stage0_iter22 <= ((icmp_ln50_reg_484_pp0_iter21_reg = ap_const_lv1_0) and (p_data_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_x_empty_n, icmp_ln50_reg_484)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln50_reg_484 = ap_const_lv1_0) and (p_x_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln50_fu_246_p2)
    begin
        if ((icmp_ln50_fu_246_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    grp_fu_172_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_172_ce <= ap_const_logic_1;
        else 
            grp_fu_172_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_172_p0 <= trunc_ln674_reg_493;
    grp_fu_172_p1 <= p_Result_i_i_reg_498;

    grp_fu_176_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_176_p0 <= p_Result_29_i_i_reg_503;
    grp_fu_176_p1 <= p_Result_30_i_i_reg_508;

    grp_fu_180_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_180_ce <= ap_const_logic_1;
        else 
            grp_fu_180_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_180_p0 <= p_Result_31_i_i_reg_513;
    grp_fu_180_p1 <= p_Result_32_i_i_reg_518;

    grp_fu_184_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_184_ce <= ap_const_logic_1;
        else 
            grp_fu_184_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_184_p0 <= p_Result_33_i_i_reg_523;
    grp_fu_184_p1 <= p_Result_34_i_i_reg_528;

    grp_fu_188_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_188_ce <= ap_const_logic_1;
        else 
            grp_fu_188_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_188_p0 <= p_Result_35_i_i_reg_533;
    grp_fu_188_p1 <= p_Result_36_i_i_reg_538;

    grp_fu_192_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_192_ce <= ap_const_logic_1;
        else 
            grp_fu_192_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_192_p0 <= p_Result_37_i_i_reg_543;
    grp_fu_192_p1 <= p_Result_38_i_i_reg_548;

    grp_fu_196_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_196_ce <= ap_const_logic_1;
        else 
            grp_fu_196_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_196_p0 <= p_Result_39_i_i_reg_553;
    grp_fu_196_p1 <= p_Result_40_i_i_reg_558;

    grp_fu_200_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_200_ce <= ap_const_logic_1;
        else 
            grp_fu_200_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_200_p0 <= p_Result_41_i_i_reg_563;
    grp_fu_200_p1 <= p_Result_42_i_i_reg_568;

    grp_fu_204_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_204_ce <= ap_const_logic_1;
        else 
            grp_fu_204_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_208_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_208_ce <= ap_const_logic_1;
        else 
            grp_fu_208_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_212_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_212_ce <= ap_const_logic_1;
        else 
            grp_fu_212_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_216_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_216_ce <= ap_const_logic_1;
        else 
            grp_fu_216_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_220_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_220_ce <= ap_const_logic_1;
        else 
            grp_fu_220_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_224_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_228_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_228_ce <= ap_const_logic_1;
        else 
            grp_fu_228_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln50_fu_246_p2 <= "1" when (indvar_flatten_reg_161 = mul_ln43_reg_479) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    l_numElem_cast_loc_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l_numElem_cast_loc_blk_n <= l_numElem_cast_loc_empty_n;
        else 
            l_numElem_cast_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l_numElem_cast_loc_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_loc_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l_numElem_cast_loc_out_blk_n <= l_numElem_cast_loc_out_full_n;
        else 
            l_numElem_cast_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_numElem_cast_loc_out_din <= l_numElem_cast_loc_dout;

    l_numElem_cast_loc_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n, p_mulIters_empty_n, l_numElem_cast_loc_out_full_n, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l_numElem_cast_loc_out_write <= ap_const_logic_1;
        else 
            l_numElem_cast_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    l_numElem_cast_loc_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n, p_mulIters_empty_n, l_numElem_cast_loc_out_full_n, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l_numElem_cast_loc_read <= ap_const_logic_1;
        else 
            l_numElem_cast_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln43_fu_240_p0 <= mul_ln43_fu_240_p00(28 - 1 downto 0);
    mul_ln43_fu_240_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_numElem_cast_loc_dout),60));
    mul_ln43_fu_240_p1 <= mul_ln43_fu_240_p10(32 - 1 downto 0);
    mul_ln43_fu_240_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mulIters_dout),60));

    p_data_blk_n_assign_proc : process(p_data_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter22, icmp_ln50_reg_484_pp0_iter21_reg)
    begin
        if (((icmp_ln50_reg_484_pp0_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_data_blk_n <= p_data_full_n;
        else 
            p_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_data_din <= l_sum_reg_723;

    p_data_write_assign_proc : process(ap_enable_reg_pp0_iter22, icmp_ln50_reg_484_pp0_iter21_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_reg_484_pp0_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_data_write <= ap_const_logic_1;
        else 
            p_data_write <= ap_const_logic_0;
        end if; 
    end process;


    p_mulIters_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_mulIters_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_mulIters_blk_n <= p_mulIters_empty_n;
        else 
            p_mulIters_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_mulIters_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_mulIters_out_blk_n <= p_mulIters_out_full_n;
        else 
            p_mulIters_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_mulIters_out_din <= p_mulIters_dout;

    p_mulIters_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n, p_mulIters_empty_n, l_numElem_cast_loc_out_full_n, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_mulIters_out_write <= ap_const_logic_1;
        else 
            p_mulIters_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_mulIters_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n, p_mulIters_empty_n, l_numElem_cast_loc_out_full_n, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (l_numElem_cast_loc_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_mulIters_read <= ap_const_logic_1;
        else 
            p_mulIters_read <= ap_const_logic_0;
        end if; 
    end process;


    p_x_blk_n_assign_proc : process(p_x_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln50_reg_484)
    begin
        if (((icmp_ln50_reg_484 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_x_blk_n <= p_x_empty_n;
        else 
            p_x_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_x_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln50_reg_484, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_reg_484 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_x_read <= ap_const_logic_1;
        else 
            p_x_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln674_fu_257_p1 <= p_x_dout(32 - 1 downto 0);
end behav;
