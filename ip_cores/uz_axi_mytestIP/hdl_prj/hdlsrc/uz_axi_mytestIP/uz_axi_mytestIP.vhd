-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_axi_mytestIP\uz_axi_mytestIP.vhd
-- Created: 2022-05-12 15:45:47
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- C_int32                       ce_out        1e-08
-- C_uint32                      ce_out        1e-08
-- Out3                          ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_axi_mytestIP
-- Source Path: uz_axi_mytestIP/uz_axi_mytestIP
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_axi_mytestIP IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        A_int32                           :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        B_int32                           :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        A_uint32                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        B_uint32                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        In5                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
        In6                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
        ce_out                            :   OUT   std_logic;
        C_int32                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        C_uint32                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Out3                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En5
        );
END uz_axi_mytestIP;


ARCHITECTURE rtl OF uz_axi_mytestIP IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL A_int32_signed                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL B_int32_signed                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product_mul_temp                 : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL B_uint32_unsigned                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay2_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL A_uint32_unsigned                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay3_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product1_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL In5_signed                       : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL In6_signed                       : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL Delay5_out1                      : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL Product2_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En10
  SIGNAL Product2_out1                    : signed(15 DOWNTO 0);  -- sfix16_En5

BEGIN
  A_int32_signed <= signed(A_int32);

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay_out1 <= A_int32_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  B_int32_signed <= signed(B_int32);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay1_out1 <= B_int32_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Product_mul_temp <= Delay_out1 * Delay1_out1;
  Product_out1 <= Product_mul_temp(31 DOWNTO 0);

  C_int32 <= std_logic_vector(Product_out1);

  B_uint32_unsigned <= unsigned(B_uint32);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay2_out1 <= B_uint32_unsigned;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  A_uint32_unsigned <= unsigned(A_uint32);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay3_out1 <= A_uint32_unsigned;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Product1_out1 <= resize(Delay2_out1 * Delay3_out1, 32);

  C_uint32 <= std_logic_vector(Product1_out1);

  In5_signed <= signed(In5);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay4_out1 <= In5_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  In6_signed <= signed(In6);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay5_out1 <= In6_signed;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Product2_mul_temp <= Delay4_out1 * Delay5_out1;
  Product2_out1 <= Product2_mul_temp(20 DOWNTO 5);

  Out3 <= std_logic_vector(Product2_out1);

  ce_out <= clk_enable;

END rtl;

