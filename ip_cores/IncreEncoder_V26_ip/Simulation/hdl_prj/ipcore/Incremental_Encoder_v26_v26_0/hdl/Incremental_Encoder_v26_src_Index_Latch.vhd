-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\inc_enc_v26\Incremental_Encoder_v26_src_Index_Latch.vhd
-- Created: 2023-04-14 13:51:34
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Incremental_Encoder_v26_src_Index_Latch
-- Source Path: inc_enc_v26/IncEnc_V26/Index_Latch
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Incremental_Encoder_v26_src_Index_Latch IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_245467_0                    :   IN    std_logic;
        Reset_in                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Index_found                       :   OUT   std_logic
        );
END Incremental_Encoder_v26_src_Index_Latch;


ARCHITECTURE rtl OF Incremental_Encoder_v26_src_Index_Latch IS

  -- Signals
  SIGNAL Reset_in_unsigned                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Reset_in_is_not0                 : std_logic;
  SIGNAL Constant4_out1                   : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL switch_compare_1                 : std_logic;

BEGIN
  Reset_in_unsigned <= unsigned(Reset_in);

  
  Reset_in_is_not0 <= '1' WHEN Reset_in_unsigned /= to_unsigned(16#00#, 8) ELSE
      '0';

  Constant4_out1 <= '0';

  Constant_out1 <= '1';

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb_1_245467_0 = '1' THEN
        Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  OR_out1 <= Reset_in_is_not0 OR Delay_out1;

  
  switch_compare_1 <= '1' WHEN OR_out1 > '0' ELSE
      '0';

  
  Switch_out1 <= Constant4_out1 WHEN switch_compare_1 = '0' ELSE
      Constant_out1;

  Index_found <= Switch_out1;

END rtl;

