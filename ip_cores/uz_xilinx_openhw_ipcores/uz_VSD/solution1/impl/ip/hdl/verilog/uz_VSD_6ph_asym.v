// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_VSD_6ph_asym_uz_VSD_6ph_asym,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.018000,HLS_SYN_LAT=5,HLS_SYN_TPT=6,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6858,HLS_SYN_LUT=6552,HLS_VERSION=2022_2}" *)

module uz_VSD_6ph_asym (
        in_a1,
        in_b1,
        in_c1,
        in_a2,
        in_b2,
        in_c2,
        out_alpha,
        out_beta,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


input  [31:0] in_a1;
input  [31:0] in_b1;
input  [31:0] in_c1;
input  [31:0] in_a2;
input  [31:0] in_b2;
input  [31:0] in_c2;
output  [31:0] out_alpha;
output  [31:0] out_beta;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    multiply_1_U0_ap_start;
wire    multiply_1_U0_ap_done;
wire    multiply_1_U0_ap_continue;
wire    multiply_1_U0_ap_idle;
wire    multiply_1_U0_ap_ready;
wire   [31:0] multiply_1_U0_ap_return;
wire    products_0_full_n;
wire    multiply_224_U0_ap_start;
wire    multiply_224_U0_ap_done;
wire    multiply_224_U0_ap_continue;
wire    multiply_224_U0_ap_idle;
wire    multiply_224_U0_ap_ready;
wire   [31:0] multiply_224_U0_ap_return;
wire    products_1_full_n;
wire    multiply_325_U0_ap_start;
wire    multiply_325_U0_ap_done;
wire    multiply_325_U0_ap_continue;
wire    multiply_325_U0_ap_idle;
wire    multiply_325_U0_ap_ready;
wire   [31:0] multiply_325_U0_ap_return;
wire    products_2_full_n;
wire    multiply_426_U0_ap_start;
wire    multiply_426_U0_ap_done;
wire    multiply_426_U0_ap_continue;
wire    multiply_426_U0_ap_idle;
wire    multiply_426_U0_ap_ready;
wire   [31:0] multiply_426_U0_ap_return;
wire    products_3_full_n;
wire    multiply_527_U0_ap_start;
wire    multiply_527_U0_ap_done;
wire    multiply_527_U0_ap_continue;
wire    multiply_527_U0_ap_idle;
wire    multiply_527_U0_ap_ready;
wire   [31:0] multiply_527_U0_ap_return;
wire    products_4_full_n;
wire    multiply_628_U0_ap_start;
wire    multiply_628_U0_ap_done;
wire    multiply_628_U0_ap_continue;
wire    multiply_628_U0_ap_idle;
wire    multiply_628_U0_ap_ready;
wire   [31:0] multiply_628_U0_ap_return;
wire    products_5_full_n;
wire    Block_entry1421_proc_U0_ap_start;
wire    Block_entry1421_proc_U0_ap_done;
wire    Block_entry1421_proc_U0_ap_continue;
wire    Block_entry1421_proc_U0_ap_idle;
wire    Block_entry1421_proc_U0_ap_ready;
wire   [31:0] Block_entry1421_proc_U0_ap_return;
wire    products_assign_load_loc_channel_full_n;
wire    Block_entry1422_proc_U0_ap_start;
wire    Block_entry1422_proc_U0_ap_done;
wire    Block_entry1422_proc_U0_ap_continue;
wire    Block_entry1422_proc_U0_ap_idle;
wire    Block_entry1422_proc_U0_ap_ready;
wire   [31:0] Block_entry1422_proc_U0_ap_return;
wire    add_i_loc_channel_full_n;
wire    Block_entry1423_proc_U0_ap_start;
wire    Block_entry1423_proc_U0_ap_done;
wire    Block_entry1423_proc_U0_ap_continue;
wire    Block_entry1423_proc_U0_ap_idle;
wire    Block_entry1423_proc_U0_ap_ready;
wire   [31:0] Block_entry1423_proc_U0_ap_return;
wire    add3_i_loc_channel_full_n;
wire    Block_entry1424_proc_U0_ap_start;
wire    Block_entry1424_proc_U0_ap_done;
wire    Block_entry1424_proc_U0_ap_continue;
wire    Block_entry1424_proc_U0_ap_idle;
wire    Block_entry1424_proc_U0_ap_ready;
wire   [31:0] Block_entry1424_proc_U0_ap_return;
wire    add5_i_loc_channel_full_n;
wire    Block_entry1425_proc_U0_ap_start;
wire    Block_entry1425_proc_U0_ap_done;
wire    Block_entry1425_proc_U0_ap_continue;
wire    Block_entry1425_proc_U0_ap_idle;
wire    Block_entry1425_proc_U0_ap_ready;
wire   [31:0] Block_entry1425_proc_U0_ap_return;
wire    add7_i_loc_channel_full_n;
wire    Block_entry1426_proc_U0_ap_start;
wire    Block_entry1426_proc_U0_ap_done;
wire    Block_entry1426_proc_U0_ap_continue;
wire    Block_entry1426_proc_U0_ap_idle;
wire    Block_entry1426_proc_U0_ap_ready;
wire   [31:0] Block_entry1426_proc_U0_out_alpha;
wire    Block_entry1426_proc_U0_out_alpha_ap_vld;
wire    multiply_7_U0_ap_start;
wire    multiply_7_U0_ap_done;
wire    multiply_7_U0_ap_continue;
wire    multiply_7_U0_ap_idle;
wire    multiply_7_U0_ap_ready;
wire   [31:0] multiply_7_U0_ap_return;
wire    products_0_1_full_n;
wire    multiply_829_U0_ap_start;
wire    multiply_829_U0_ap_done;
wire    multiply_829_U0_ap_continue;
wire    multiply_829_U0_ap_idle;
wire    multiply_829_U0_ap_ready;
wire   [31:0] multiply_829_U0_ap_return;
wire    products_1_1_full_n;
wire    multiply_930_U0_ap_start;
wire    multiply_930_U0_ap_done;
wire    multiply_930_U0_ap_continue;
wire    multiply_930_U0_ap_idle;
wire    multiply_930_U0_ap_ready;
wire   [31:0] multiply_930_U0_ap_return;
wire    products_2_1_full_n;
wire    multiply_1031_U0_ap_start;
wire    multiply_1031_U0_ap_done;
wire    multiply_1031_U0_ap_continue;
wire    multiply_1031_U0_ap_idle;
wire    multiply_1031_U0_ap_ready;
wire   [31:0] multiply_1031_U0_ap_return;
wire    products_3_1_full_n;
wire    multiply_1132_U0_ap_start;
wire    multiply_1132_U0_ap_done;
wire    multiply_1132_U0_ap_continue;
wire    multiply_1132_U0_ap_idle;
wire    multiply_1132_U0_ap_ready;
wire   [31:0] multiply_1132_U0_ap_return;
wire    products_4_1_full_n;
wire    multiply33_U0_ap_start;
wire    multiply33_U0_ap_done;
wire    multiply33_U0_ap_continue;
wire    multiply33_U0_ap_idle;
wire    multiply33_U0_ap_ready;
wire   [31:0] multiply33_U0_ap_return;
wire    products_5_1_full_n;
wire    Block_entry1434_proc_U0_ap_start;
wire    Block_entry1434_proc_U0_ap_done;
wire    Block_entry1434_proc_U0_ap_continue;
wire    Block_entry1434_proc_U0_ap_idle;
wire    Block_entry1434_proc_U0_ap_ready;
wire   [31:0] Block_entry1434_proc_U0_ap_return;
wire    products_assign_1_load_loc_channel_full_n;
wire    Block_entry1435_proc_U0_ap_start;
wire    Block_entry1435_proc_U0_ap_done;
wire    Block_entry1435_proc_U0_ap_continue;
wire    Block_entry1435_proc_U0_ap_idle;
wire    Block_entry1435_proc_U0_ap_ready;
wire   [31:0] Block_entry1435_proc_U0_ap_return;
wire    add_i1_loc_channel_full_n;
wire    Block_entry1436_proc_U0_ap_start;
wire    Block_entry1436_proc_U0_ap_done;
wire    Block_entry1436_proc_U0_ap_continue;
wire    Block_entry1436_proc_U0_ap_idle;
wire    Block_entry1436_proc_U0_ap_ready;
wire   [31:0] Block_entry1436_proc_U0_ap_return;
wire    add3_i1_loc_channel_full_n;
wire    Block_entry1437_proc_U0_ap_start;
wire    Block_entry1437_proc_U0_ap_done;
wire    Block_entry1437_proc_U0_ap_continue;
wire    Block_entry1437_proc_U0_ap_idle;
wire    Block_entry1437_proc_U0_ap_ready;
wire   [31:0] Block_entry1437_proc_U0_ap_return;
wire    add5_i1_loc_channel_full_n;
wire    Block_entry1438_proc_U0_ap_start;
wire    Block_entry1438_proc_U0_ap_done;
wire    Block_entry1438_proc_U0_ap_continue;
wire    Block_entry1438_proc_U0_ap_idle;
wire    Block_entry1438_proc_U0_ap_ready;
wire   [31:0] Block_entry1438_proc_U0_ap_return;
wire    add7_i1_loc_channel_full_n;
wire    Block_entry1439_proc_U0_ap_start;
wire    Block_entry1439_proc_U0_ap_done;
wire    Block_entry1439_proc_U0_ap_continue;
wire    Block_entry1439_proc_U0_ap_idle;
wire    Block_entry1439_proc_U0_ap_ready;
wire   [31:0] Block_entry1439_proc_U0_out_beta;
wire    Block_entry1439_proc_U0_out_beta_ap_vld;
wire   [31:0] products_0_dout;
wire   [1:0] products_0_num_data_valid;
wire   [1:0] products_0_fifo_cap;
wire    products_0_empty_n;
wire   [31:0] products_1_dout;
wire   [2:0] products_1_num_data_valid;
wire   [2:0] products_1_fifo_cap;
wire    products_1_empty_n;
wire   [31:0] products_2_dout;
wire   [2:0] products_2_num_data_valid;
wire   [2:0] products_2_fifo_cap;
wire    products_2_empty_n;
wire   [31:0] products_3_dout;
wire   [3:0] products_3_num_data_valid;
wire   [3:0] products_3_fifo_cap;
wire    products_3_empty_n;
wire   [31:0] products_4_dout;
wire   [3:0] products_4_num_data_valid;
wire   [3:0] products_4_fifo_cap;
wire    products_4_empty_n;
wire   [31:0] products_5_dout;
wire   [3:0] products_5_num_data_valid;
wire   [3:0] products_5_fifo_cap;
wire    products_5_empty_n;
wire   [31:0] products_assign_load_loc_channel_dout;
wire   [1:0] products_assign_load_loc_channel_num_data_valid;
wire   [1:0] products_assign_load_loc_channel_fifo_cap;
wire    products_assign_load_loc_channel_empty_n;
wire   [31:0] add_i_loc_channel_dout;
wire   [1:0] add_i_loc_channel_num_data_valid;
wire   [1:0] add_i_loc_channel_fifo_cap;
wire    add_i_loc_channel_empty_n;
wire   [31:0] add3_i_loc_channel_dout;
wire   [1:0] add3_i_loc_channel_num_data_valid;
wire   [1:0] add3_i_loc_channel_fifo_cap;
wire    add3_i_loc_channel_empty_n;
wire   [31:0] add5_i_loc_channel_dout;
wire   [1:0] add5_i_loc_channel_num_data_valid;
wire   [1:0] add5_i_loc_channel_fifo_cap;
wire    add5_i_loc_channel_empty_n;
wire   [31:0] add7_i_loc_channel_dout;
wire   [1:0] add7_i_loc_channel_num_data_valid;
wire   [1:0] add7_i_loc_channel_fifo_cap;
wire    add7_i_loc_channel_empty_n;
wire   [31:0] products_0_1_dout;
wire   [1:0] products_0_1_num_data_valid;
wire   [1:0] products_0_1_fifo_cap;
wire    products_0_1_empty_n;
wire   [31:0] products_1_1_dout;
wire   [2:0] products_1_1_num_data_valid;
wire   [2:0] products_1_1_fifo_cap;
wire    products_1_1_empty_n;
wire   [31:0] products_2_1_dout;
wire   [2:0] products_2_1_num_data_valid;
wire   [2:0] products_2_1_fifo_cap;
wire    products_2_1_empty_n;
wire   [31:0] products_3_1_dout;
wire   [3:0] products_3_1_num_data_valid;
wire   [3:0] products_3_1_fifo_cap;
wire    products_3_1_empty_n;
wire   [31:0] products_4_1_dout;
wire   [3:0] products_4_1_num_data_valid;
wire   [3:0] products_4_1_fifo_cap;
wire    products_4_1_empty_n;
wire   [31:0] products_5_1_dout;
wire   [3:0] products_5_1_num_data_valid;
wire   [3:0] products_5_1_fifo_cap;
wire    products_5_1_empty_n;
wire   [31:0] products_assign_1_load_loc_channel_dout;
wire   [1:0] products_assign_1_load_loc_channel_num_data_valid;
wire   [1:0] products_assign_1_load_loc_channel_fifo_cap;
wire    products_assign_1_load_loc_channel_empty_n;
wire   [31:0] add_i1_loc_channel_dout;
wire   [1:0] add_i1_loc_channel_num_data_valid;
wire   [1:0] add_i1_loc_channel_fifo_cap;
wire    add_i1_loc_channel_empty_n;
wire   [31:0] add3_i1_loc_channel_dout;
wire   [1:0] add3_i1_loc_channel_num_data_valid;
wire   [1:0] add3_i1_loc_channel_fifo_cap;
wire    add3_i1_loc_channel_empty_n;
wire   [31:0] add5_i1_loc_channel_dout;
wire   [1:0] add5_i1_loc_channel_num_data_valid;
wire   [1:0] add5_i1_loc_channel_fifo_cap;
wire    add5_i1_loc_channel_empty_n;
wire   [31:0] add7_i1_loc_channel_dout;
wire   [1:0] add7_i1_loc_channel_num_data_valid;
wire   [1:0] add7_i1_loc_channel_fifo_cap;
wire    add7_i1_loc_channel_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_multiply_1_U0_ap_ready;
wire    ap_sync_multiply_1_U0_ap_ready;
reg    ap_sync_reg_multiply_224_U0_ap_ready;
wire    ap_sync_multiply_224_U0_ap_ready;
reg    ap_sync_reg_multiply_325_U0_ap_ready;
wire    ap_sync_multiply_325_U0_ap_ready;
reg    ap_sync_reg_multiply_426_U0_ap_ready;
wire    ap_sync_multiply_426_U0_ap_ready;
reg    ap_sync_reg_multiply_527_U0_ap_ready;
wire    ap_sync_multiply_527_U0_ap_ready;
reg    ap_sync_reg_multiply_628_U0_ap_ready;
wire    ap_sync_multiply_628_U0_ap_ready;
reg    ap_sync_reg_multiply_7_U0_ap_ready;
wire    ap_sync_multiply_7_U0_ap_ready;
reg    ap_sync_reg_multiply_829_U0_ap_ready;
wire    ap_sync_multiply_829_U0_ap_ready;
reg    ap_sync_reg_multiply_930_U0_ap_ready;
wire    ap_sync_multiply_930_U0_ap_ready;
reg    ap_sync_reg_multiply_1031_U0_ap_ready;
wire    ap_sync_multiply_1031_U0_ap_ready;
reg    ap_sync_reg_multiply_1132_U0_ap_ready;
wire    ap_sync_multiply_1132_U0_ap_ready;
reg    ap_sync_reg_multiply33_U0_ap_ready;
wire    ap_sync_multiply33_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_multiply_1_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_224_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_325_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_426_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_527_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_628_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_7_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_829_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_930_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_1031_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_1132_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply33_U0_ap_ready = 1'b0;
end

uz_VSD_6ph_asym_multiply_1 multiply_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_1_U0_ap_start),
    .ap_done(multiply_1_U0_ap_done),
    .ap_continue(multiply_1_U0_ap_continue),
    .ap_idle(multiply_1_U0_ap_idle),
    .ap_ready(multiply_1_U0_ap_ready),
    .arg2(in_a1),
    .ap_return(multiply_1_U0_ap_return)
);

uz_VSD_6ph_asym_multiply_224 multiply_224_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_224_U0_ap_start),
    .ap_done(multiply_224_U0_ap_done),
    .ap_continue(multiply_224_U0_ap_continue),
    .ap_idle(multiply_224_U0_ap_idle),
    .ap_ready(multiply_224_U0_ap_ready),
    .arg2(in_b1),
    .ap_return(multiply_224_U0_ap_return)
);

uz_VSD_6ph_asym_multiply_325 multiply_325_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_325_U0_ap_start),
    .ap_done(multiply_325_U0_ap_done),
    .ap_continue(multiply_325_U0_ap_continue),
    .ap_idle(multiply_325_U0_ap_idle),
    .ap_ready(multiply_325_U0_ap_ready),
    .arg2(in_c1),
    .ap_return(multiply_325_U0_ap_return)
);

uz_VSD_6ph_asym_multiply_426 multiply_426_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_426_U0_ap_start),
    .ap_done(multiply_426_U0_ap_done),
    .ap_continue(multiply_426_U0_ap_continue),
    .ap_idle(multiply_426_U0_ap_idle),
    .ap_ready(multiply_426_U0_ap_ready),
    .arg2(in_a2),
    .ap_return(multiply_426_U0_ap_return)
);

uz_VSD_6ph_asym_multiply_527 multiply_527_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_527_U0_ap_start),
    .ap_done(multiply_527_U0_ap_done),
    .ap_continue(multiply_527_U0_ap_continue),
    .ap_idle(multiply_527_U0_ap_idle),
    .ap_ready(multiply_527_U0_ap_ready),
    .arg2(in_b2),
    .ap_return(multiply_527_U0_ap_return)
);

uz_VSD_6ph_asym_multiply_628 multiply_628_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_628_U0_ap_start),
    .ap_done(multiply_628_U0_ap_done),
    .ap_continue(multiply_628_U0_ap_continue),
    .ap_idle(multiply_628_U0_ap_idle),
    .ap_ready(multiply_628_U0_ap_ready),
    .arg2(in_c2),
    .ap_return(multiply_628_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1421_proc Block_entry1421_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1421_proc_U0_ap_start),
    .ap_done(Block_entry1421_proc_U0_ap_done),
    .ap_continue(Block_entry1421_proc_U0_ap_continue),
    .ap_idle(Block_entry1421_proc_U0_ap_idle),
    .ap_ready(Block_entry1421_proc_U0_ap_ready),
    .p_read(products_0_dout),
    .ap_return(Block_entry1421_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1422_proc Block_entry1422_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1422_proc_U0_ap_start),
    .ap_done(Block_entry1422_proc_U0_ap_done),
    .ap_continue(Block_entry1422_proc_U0_ap_continue),
    .ap_idle(Block_entry1422_proc_U0_ap_idle),
    .ap_ready(Block_entry1422_proc_U0_ap_ready),
    .p_read(products_1_dout),
    .p_read1(products_assign_load_loc_channel_dout),
    .ap_return(Block_entry1422_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1423_proc Block_entry1423_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1423_proc_U0_ap_start),
    .ap_done(Block_entry1423_proc_U0_ap_done),
    .ap_continue(Block_entry1423_proc_U0_ap_continue),
    .ap_idle(Block_entry1423_proc_U0_ap_idle),
    .ap_ready(Block_entry1423_proc_U0_ap_ready),
    .p_read(products_2_dout),
    .p_read1(add_i_loc_channel_dout),
    .ap_return(Block_entry1423_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1424_proc Block_entry1424_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1424_proc_U0_ap_start),
    .ap_done(Block_entry1424_proc_U0_ap_done),
    .ap_continue(Block_entry1424_proc_U0_ap_continue),
    .ap_idle(Block_entry1424_proc_U0_ap_idle),
    .ap_ready(Block_entry1424_proc_U0_ap_ready),
    .p_read(products_3_dout),
    .p_read1(add3_i_loc_channel_dout),
    .ap_return(Block_entry1424_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1425_proc Block_entry1425_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1425_proc_U0_ap_start),
    .ap_done(Block_entry1425_proc_U0_ap_done),
    .ap_continue(Block_entry1425_proc_U0_ap_continue),
    .ap_idle(Block_entry1425_proc_U0_ap_idle),
    .ap_ready(Block_entry1425_proc_U0_ap_ready),
    .p_read(products_4_dout),
    .p_read1(add5_i_loc_channel_dout),
    .ap_return(Block_entry1425_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1426_proc Block_entry1426_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1426_proc_U0_ap_start),
    .ap_done(Block_entry1426_proc_U0_ap_done),
    .ap_continue(Block_entry1426_proc_U0_ap_continue),
    .ap_idle(Block_entry1426_proc_U0_ap_idle),
    .ap_ready(Block_entry1426_proc_U0_ap_ready),
    .p_read(products_5_dout),
    .p_read1(add7_i_loc_channel_dout),
    .out_alpha(Block_entry1426_proc_U0_out_alpha),
    .out_alpha_ap_vld(Block_entry1426_proc_U0_out_alpha_ap_vld)
);

uz_VSD_6ph_asym_multiply_7 multiply_7_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_7_U0_ap_start),
    .ap_done(multiply_7_U0_ap_done),
    .ap_continue(multiply_7_U0_ap_continue),
    .ap_idle(multiply_7_U0_ap_idle),
    .ap_ready(multiply_7_U0_ap_ready),
    .arg2(in_a1),
    .ap_return(multiply_7_U0_ap_return)
);

uz_VSD_6ph_asym_multiply_829 multiply_829_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_829_U0_ap_start),
    .ap_done(multiply_829_U0_ap_done),
    .ap_continue(multiply_829_U0_ap_continue),
    .ap_idle(multiply_829_U0_ap_idle),
    .ap_ready(multiply_829_U0_ap_ready),
    .arg2(in_b1),
    .ap_return(multiply_829_U0_ap_return)
);

uz_VSD_6ph_asym_multiply_930 multiply_930_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_930_U0_ap_start),
    .ap_done(multiply_930_U0_ap_done),
    .ap_continue(multiply_930_U0_ap_continue),
    .ap_idle(multiply_930_U0_ap_idle),
    .ap_ready(multiply_930_U0_ap_ready),
    .arg2(in_c1),
    .ap_return(multiply_930_U0_ap_return)
);

uz_VSD_6ph_asym_multiply_1031 multiply_1031_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_1031_U0_ap_start),
    .ap_done(multiply_1031_U0_ap_done),
    .ap_continue(multiply_1031_U0_ap_continue),
    .ap_idle(multiply_1031_U0_ap_idle),
    .ap_ready(multiply_1031_U0_ap_ready),
    .arg2(in_a2),
    .ap_return(multiply_1031_U0_ap_return)
);

uz_VSD_6ph_asym_multiply_1132 multiply_1132_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_1132_U0_ap_start),
    .ap_done(multiply_1132_U0_ap_done),
    .ap_continue(multiply_1132_U0_ap_continue),
    .ap_idle(multiply_1132_U0_ap_idle),
    .ap_ready(multiply_1132_U0_ap_ready),
    .arg2(in_b2),
    .ap_return(multiply_1132_U0_ap_return)
);

uz_VSD_6ph_asym_multiply33 multiply33_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply33_U0_ap_start),
    .ap_done(multiply33_U0_ap_done),
    .ap_continue(multiply33_U0_ap_continue),
    .ap_idle(multiply33_U0_ap_idle),
    .ap_ready(multiply33_U0_ap_ready),
    .arg2(in_c2),
    .ap_return(multiply33_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1434_proc Block_entry1434_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1434_proc_U0_ap_start),
    .ap_done(Block_entry1434_proc_U0_ap_done),
    .ap_continue(Block_entry1434_proc_U0_ap_continue),
    .ap_idle(Block_entry1434_proc_U0_ap_idle),
    .ap_ready(Block_entry1434_proc_U0_ap_ready),
    .p_read(products_0_1_dout),
    .ap_return(Block_entry1434_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1435_proc Block_entry1435_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1435_proc_U0_ap_start),
    .ap_done(Block_entry1435_proc_U0_ap_done),
    .ap_continue(Block_entry1435_proc_U0_ap_continue),
    .ap_idle(Block_entry1435_proc_U0_ap_idle),
    .ap_ready(Block_entry1435_proc_U0_ap_ready),
    .p_read(products_1_1_dout),
    .p_read1(products_assign_1_load_loc_channel_dout),
    .ap_return(Block_entry1435_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1436_proc Block_entry1436_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1436_proc_U0_ap_start),
    .ap_done(Block_entry1436_proc_U0_ap_done),
    .ap_continue(Block_entry1436_proc_U0_ap_continue),
    .ap_idle(Block_entry1436_proc_U0_ap_idle),
    .ap_ready(Block_entry1436_proc_U0_ap_ready),
    .p_read(products_2_1_dout),
    .p_read1(add_i1_loc_channel_dout),
    .ap_return(Block_entry1436_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1437_proc Block_entry1437_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1437_proc_U0_ap_start),
    .ap_done(Block_entry1437_proc_U0_ap_done),
    .ap_continue(Block_entry1437_proc_U0_ap_continue),
    .ap_idle(Block_entry1437_proc_U0_ap_idle),
    .ap_ready(Block_entry1437_proc_U0_ap_ready),
    .p_read(products_3_1_dout),
    .p_read1(add3_i1_loc_channel_dout),
    .ap_return(Block_entry1437_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1438_proc Block_entry1438_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1438_proc_U0_ap_start),
    .ap_done(Block_entry1438_proc_U0_ap_done),
    .ap_continue(Block_entry1438_proc_U0_ap_continue),
    .ap_idle(Block_entry1438_proc_U0_ap_idle),
    .ap_ready(Block_entry1438_proc_U0_ap_ready),
    .p_read(products_4_1_dout),
    .p_read1(add5_i1_loc_channel_dout),
    .ap_return(Block_entry1438_proc_U0_ap_return)
);

uz_VSD_6ph_asym_Block_entry1439_proc Block_entry1439_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry1439_proc_U0_ap_start),
    .ap_done(Block_entry1439_proc_U0_ap_done),
    .ap_continue(Block_entry1439_proc_U0_ap_continue),
    .ap_idle(Block_entry1439_proc_U0_ap_idle),
    .ap_ready(Block_entry1439_proc_U0_ap_ready),
    .p_read(products_5_1_dout),
    .p_read1(add7_i1_loc_channel_dout),
    .out_beta(Block_entry1439_proc_U0_out_beta),
    .out_beta_ap_vld(Block_entry1439_proc_U0_out_beta_ap_vld)
);

uz_VSD_6ph_asym_fifo_w32_d2_S products_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_1_U0_ap_return),
    .if_full_n(products_0_full_n),
    .if_write(multiply_1_U0_ap_done),
    .if_dout(products_0_dout),
    .if_num_data_valid(products_0_num_data_valid),
    .if_fifo_cap(products_0_fifo_cap),
    .if_empty_n(products_0_empty_n),
    .if_read(Block_entry1421_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d3_S products_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_224_U0_ap_return),
    .if_full_n(products_1_full_n),
    .if_write(multiply_224_U0_ap_done),
    .if_dout(products_1_dout),
    .if_num_data_valid(products_1_num_data_valid),
    .if_fifo_cap(products_1_fifo_cap),
    .if_empty_n(products_1_empty_n),
    .if_read(Block_entry1422_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d4_S products_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_325_U0_ap_return),
    .if_full_n(products_2_full_n),
    .if_write(multiply_325_U0_ap_done),
    .if_dout(products_2_dout),
    .if_num_data_valid(products_2_num_data_valid),
    .if_fifo_cap(products_2_fifo_cap),
    .if_empty_n(products_2_empty_n),
    .if_read(Block_entry1423_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d5_S products_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_426_U0_ap_return),
    .if_full_n(products_3_full_n),
    .if_write(multiply_426_U0_ap_done),
    .if_dout(products_3_dout),
    .if_num_data_valid(products_3_num_data_valid),
    .if_fifo_cap(products_3_fifo_cap),
    .if_empty_n(products_3_empty_n),
    .if_read(Block_entry1424_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d6_S products_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_527_U0_ap_return),
    .if_full_n(products_4_full_n),
    .if_write(multiply_527_U0_ap_done),
    .if_dout(products_4_dout),
    .if_num_data_valid(products_4_num_data_valid),
    .if_fifo_cap(products_4_fifo_cap),
    .if_empty_n(products_4_empty_n),
    .if_read(Block_entry1425_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d7_S products_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_628_U0_ap_return),
    .if_full_n(products_5_full_n),
    .if_write(multiply_628_U0_ap_done),
    .if_dout(products_5_dout),
    .if_num_data_valid(products_5_num_data_valid),
    .if_fifo_cap(products_5_fifo_cap),
    .if_empty_n(products_5_empty_n),
    .if_read(Block_entry1426_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S products_assign_load_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1421_proc_U0_ap_return),
    .if_full_n(products_assign_load_loc_channel_full_n),
    .if_write(Block_entry1421_proc_U0_ap_done),
    .if_dout(products_assign_load_loc_channel_dout),
    .if_num_data_valid(products_assign_load_loc_channel_num_data_valid),
    .if_fifo_cap(products_assign_load_loc_channel_fifo_cap),
    .if_empty_n(products_assign_load_loc_channel_empty_n),
    .if_read(Block_entry1422_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S add_i_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1422_proc_U0_ap_return),
    .if_full_n(add_i_loc_channel_full_n),
    .if_write(Block_entry1422_proc_U0_ap_done),
    .if_dout(add_i_loc_channel_dout),
    .if_num_data_valid(add_i_loc_channel_num_data_valid),
    .if_fifo_cap(add_i_loc_channel_fifo_cap),
    .if_empty_n(add_i_loc_channel_empty_n),
    .if_read(Block_entry1423_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S add3_i_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1423_proc_U0_ap_return),
    .if_full_n(add3_i_loc_channel_full_n),
    .if_write(Block_entry1423_proc_U0_ap_done),
    .if_dout(add3_i_loc_channel_dout),
    .if_num_data_valid(add3_i_loc_channel_num_data_valid),
    .if_fifo_cap(add3_i_loc_channel_fifo_cap),
    .if_empty_n(add3_i_loc_channel_empty_n),
    .if_read(Block_entry1424_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S add5_i_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1424_proc_U0_ap_return),
    .if_full_n(add5_i_loc_channel_full_n),
    .if_write(Block_entry1424_proc_U0_ap_done),
    .if_dout(add5_i_loc_channel_dout),
    .if_num_data_valid(add5_i_loc_channel_num_data_valid),
    .if_fifo_cap(add5_i_loc_channel_fifo_cap),
    .if_empty_n(add5_i_loc_channel_empty_n),
    .if_read(Block_entry1425_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S add7_i_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1425_proc_U0_ap_return),
    .if_full_n(add7_i_loc_channel_full_n),
    .if_write(Block_entry1425_proc_U0_ap_done),
    .if_dout(add7_i_loc_channel_dout),
    .if_num_data_valid(add7_i_loc_channel_num_data_valid),
    .if_fifo_cap(add7_i_loc_channel_fifo_cap),
    .if_empty_n(add7_i_loc_channel_empty_n),
    .if_read(Block_entry1426_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S products_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_7_U0_ap_return),
    .if_full_n(products_0_1_full_n),
    .if_write(multiply_7_U0_ap_done),
    .if_dout(products_0_1_dout),
    .if_num_data_valid(products_0_1_num_data_valid),
    .if_fifo_cap(products_0_1_fifo_cap),
    .if_empty_n(products_0_1_empty_n),
    .if_read(Block_entry1434_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d3_S products_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_829_U0_ap_return),
    .if_full_n(products_1_1_full_n),
    .if_write(multiply_829_U0_ap_done),
    .if_dout(products_1_1_dout),
    .if_num_data_valid(products_1_1_num_data_valid),
    .if_fifo_cap(products_1_1_fifo_cap),
    .if_empty_n(products_1_1_empty_n),
    .if_read(Block_entry1435_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d4_S products_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_930_U0_ap_return),
    .if_full_n(products_2_1_full_n),
    .if_write(multiply_930_U0_ap_done),
    .if_dout(products_2_1_dout),
    .if_num_data_valid(products_2_1_num_data_valid),
    .if_fifo_cap(products_2_1_fifo_cap),
    .if_empty_n(products_2_1_empty_n),
    .if_read(Block_entry1436_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d5_S products_3_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_1031_U0_ap_return),
    .if_full_n(products_3_1_full_n),
    .if_write(multiply_1031_U0_ap_done),
    .if_dout(products_3_1_dout),
    .if_num_data_valid(products_3_1_num_data_valid),
    .if_fifo_cap(products_3_1_fifo_cap),
    .if_empty_n(products_3_1_empty_n),
    .if_read(Block_entry1437_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d6_S products_4_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_1132_U0_ap_return),
    .if_full_n(products_4_1_full_n),
    .if_write(multiply_1132_U0_ap_done),
    .if_dout(products_4_1_dout),
    .if_num_data_valid(products_4_1_num_data_valid),
    .if_fifo_cap(products_4_1_fifo_cap),
    .if_empty_n(products_4_1_empty_n),
    .if_read(Block_entry1438_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d7_S products_5_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply33_U0_ap_return),
    .if_full_n(products_5_1_full_n),
    .if_write(multiply33_U0_ap_done),
    .if_dout(products_5_1_dout),
    .if_num_data_valid(products_5_1_num_data_valid),
    .if_fifo_cap(products_5_1_fifo_cap),
    .if_empty_n(products_5_1_empty_n),
    .if_read(Block_entry1439_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S products_assign_1_load_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1434_proc_U0_ap_return),
    .if_full_n(products_assign_1_load_loc_channel_full_n),
    .if_write(Block_entry1434_proc_U0_ap_done),
    .if_dout(products_assign_1_load_loc_channel_dout),
    .if_num_data_valid(products_assign_1_load_loc_channel_num_data_valid),
    .if_fifo_cap(products_assign_1_load_loc_channel_fifo_cap),
    .if_empty_n(products_assign_1_load_loc_channel_empty_n),
    .if_read(Block_entry1435_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S add_i1_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1435_proc_U0_ap_return),
    .if_full_n(add_i1_loc_channel_full_n),
    .if_write(Block_entry1435_proc_U0_ap_done),
    .if_dout(add_i1_loc_channel_dout),
    .if_num_data_valid(add_i1_loc_channel_num_data_valid),
    .if_fifo_cap(add_i1_loc_channel_fifo_cap),
    .if_empty_n(add_i1_loc_channel_empty_n),
    .if_read(Block_entry1436_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S add3_i1_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1436_proc_U0_ap_return),
    .if_full_n(add3_i1_loc_channel_full_n),
    .if_write(Block_entry1436_proc_U0_ap_done),
    .if_dout(add3_i1_loc_channel_dout),
    .if_num_data_valid(add3_i1_loc_channel_num_data_valid),
    .if_fifo_cap(add3_i1_loc_channel_fifo_cap),
    .if_empty_n(add3_i1_loc_channel_empty_n),
    .if_read(Block_entry1437_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S add5_i1_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1437_proc_U0_ap_return),
    .if_full_n(add5_i1_loc_channel_full_n),
    .if_write(Block_entry1437_proc_U0_ap_done),
    .if_dout(add5_i1_loc_channel_dout),
    .if_num_data_valid(add5_i1_loc_channel_num_data_valid),
    .if_fifo_cap(add5_i1_loc_channel_fifo_cap),
    .if_empty_n(add5_i1_loc_channel_empty_n),
    .if_read(Block_entry1438_proc_U0_ap_ready)
);

uz_VSD_6ph_asym_fifo_w32_d2_S add7_i1_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry1438_proc_U0_ap_return),
    .if_full_n(add7_i1_loc_channel_full_n),
    .if_write(Block_entry1438_proc_U0_ap_done),
    .if_dout(add7_i1_loc_channel_dout),
    .if_num_data_valid(add7_i1_loc_channel_num_data_valid),
    .if_fifo_cap(add7_i1_loc_channel_fifo_cap),
    .if_empty_n(add7_i1_loc_channel_empty_n),
    .if_read(Block_entry1439_proc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply33_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply33_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply33_U0_ap_ready <= ap_sync_multiply33_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_1031_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_1031_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_1031_U0_ap_ready <= ap_sync_multiply_1031_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_1132_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_1132_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_1132_U0_ap_ready <= ap_sync_multiply_1132_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_1_U0_ap_ready <= ap_sync_multiply_1_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_224_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_224_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_224_U0_ap_ready <= ap_sync_multiply_224_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_325_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_325_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_325_U0_ap_ready <= ap_sync_multiply_325_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_426_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_426_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_426_U0_ap_ready <= ap_sync_multiply_426_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_527_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_527_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_527_U0_ap_ready <= ap_sync_multiply_527_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_628_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_628_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_628_U0_ap_ready <= ap_sync_multiply_628_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_7_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_7_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_7_U0_ap_ready <= ap_sync_multiply_7_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_829_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_829_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_829_U0_ap_ready <= ap_sync_multiply_829_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_930_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_930_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_930_U0_ap_ready <= ap_sync_multiply_930_U0_ap_ready;
        end
    end
end

assign Block_entry1421_proc_U0_ap_continue = products_assign_load_loc_channel_full_n;

assign Block_entry1421_proc_U0_ap_start = products_0_empty_n;

assign Block_entry1422_proc_U0_ap_continue = add_i_loc_channel_full_n;

assign Block_entry1422_proc_U0_ap_start = (products_assign_load_loc_channel_empty_n & products_1_empty_n);

assign Block_entry1423_proc_U0_ap_continue = add3_i_loc_channel_full_n;

assign Block_entry1423_proc_U0_ap_start = (products_2_empty_n & add_i_loc_channel_empty_n);

assign Block_entry1424_proc_U0_ap_continue = add5_i_loc_channel_full_n;

assign Block_entry1424_proc_U0_ap_start = (products_3_empty_n & add3_i_loc_channel_empty_n);

assign Block_entry1425_proc_U0_ap_continue = add7_i_loc_channel_full_n;

assign Block_entry1425_proc_U0_ap_start = (products_4_empty_n & add5_i_loc_channel_empty_n);

assign Block_entry1426_proc_U0_ap_continue = ap_sync_done;

assign Block_entry1426_proc_U0_ap_start = (products_5_empty_n & add7_i_loc_channel_empty_n);

assign Block_entry1434_proc_U0_ap_continue = products_assign_1_load_loc_channel_full_n;

assign Block_entry1434_proc_U0_ap_start = products_0_1_empty_n;

assign Block_entry1435_proc_U0_ap_continue = add_i1_loc_channel_full_n;

assign Block_entry1435_proc_U0_ap_start = (products_assign_1_load_loc_channel_empty_n & products_1_1_empty_n);

assign Block_entry1436_proc_U0_ap_continue = add3_i1_loc_channel_full_n;

assign Block_entry1436_proc_U0_ap_start = (products_2_1_empty_n & add_i1_loc_channel_empty_n);

assign Block_entry1437_proc_U0_ap_continue = add5_i1_loc_channel_full_n;

assign Block_entry1437_proc_U0_ap_start = (products_3_1_empty_n & add3_i1_loc_channel_empty_n);

assign Block_entry1438_proc_U0_ap_continue = add7_i1_loc_channel_full_n;

assign Block_entry1438_proc_U0_ap_start = (products_4_1_empty_n & add5_i1_loc_channel_empty_n);

assign Block_entry1439_proc_U0_ap_continue = ap_sync_done;

assign Block_entry1439_proc_U0_ap_start = (products_5_1_empty_n & add7_i1_loc_channel_empty_n);

assign ap_done = ap_sync_done;

assign ap_idle = (multiply_930_U0_ap_idle & multiply_829_U0_ap_idle & multiply_7_U0_ap_idle & multiply_628_U0_ap_idle & multiply_527_U0_ap_idle & multiply_426_U0_ap_idle & multiply_325_U0_ap_idle & multiply_224_U0_ap_idle & multiply_1_U0_ap_idle & multiply_1132_U0_ap_idle & multiply_1031_U0_ap_idle & multiply33_U0_ap_idle & (products_assign_1_load_loc_channel_empty_n ^ 1'b1) & (products_5_1_empty_n ^ 1'b1) & (products_4_1_empty_n ^ 1'b1) & (products_3_1_empty_n ^ 1'b1) & (products_2_1_empty_n ^ 1'b1) & (products_1_1_empty_n ^ 1'b1) & (products_0_1_empty_n ^ 1'b1) & (products_assign_load_loc_channel_empty_n ^ 1'b1) & (products_5_empty_n ^ 1'b1) & (products_4_empty_n ^ 1'b1) & (products_3_empty_n ^ 1'b1) & (products_2_empty_n ^ 1'b1) & (products_1_empty_n ^ 1'b1) & (products_0_empty_n ^ 1'b1) & (1'b1 ^ add7_i1_loc_channel_empty_n) & (1'b1 ^ add5_i1_loc_channel_empty_n) & (1'b1 ^ add3_i1_loc_channel_empty_n) & (1'b1 ^ add_i1_loc_channel_empty_n) & (1'b1 ^ add7_i_loc_channel_empty_n) & (1'b1 ^ add5_i_loc_channel_empty_n) & (1'b1 ^ add3_i_loc_channel_empty_n) & (1'b1 ^ add_i_loc_channel_empty_n) & Block_entry1439_proc_U0_ap_idle & Block_entry1438_proc_U0_ap_idle & Block_entry1437_proc_U0_ap_idle & Block_entry1436_proc_U0_ap_idle & Block_entry1435_proc_U0_ap_idle & Block_entry1434_proc_U0_ap_idle & Block_entry1426_proc_U0_ap_idle & Block_entry1425_proc_U0_ap_idle & Block_entry1424_proc_U0_ap_idle & Block_entry1423_proc_U0_ap_idle & Block_entry1422_proc_U0_ap_idle & Block_entry1421_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_done = (Block_entry1439_proc_U0_ap_done & Block_entry1426_proc_U0_ap_done);

assign ap_sync_multiply33_U0_ap_ready = (multiply33_U0_ap_ready | ap_sync_reg_multiply33_U0_ap_ready);

assign ap_sync_multiply_1031_U0_ap_ready = (multiply_1031_U0_ap_ready | ap_sync_reg_multiply_1031_U0_ap_ready);

assign ap_sync_multiply_1132_U0_ap_ready = (multiply_1132_U0_ap_ready | ap_sync_reg_multiply_1132_U0_ap_ready);

assign ap_sync_multiply_1_U0_ap_ready = (multiply_1_U0_ap_ready | ap_sync_reg_multiply_1_U0_ap_ready);

assign ap_sync_multiply_224_U0_ap_ready = (multiply_224_U0_ap_ready | ap_sync_reg_multiply_224_U0_ap_ready);

assign ap_sync_multiply_325_U0_ap_ready = (multiply_325_U0_ap_ready | ap_sync_reg_multiply_325_U0_ap_ready);

assign ap_sync_multiply_426_U0_ap_ready = (multiply_426_U0_ap_ready | ap_sync_reg_multiply_426_U0_ap_ready);

assign ap_sync_multiply_527_U0_ap_ready = (multiply_527_U0_ap_ready | ap_sync_reg_multiply_527_U0_ap_ready);

assign ap_sync_multiply_628_U0_ap_ready = (multiply_628_U0_ap_ready | ap_sync_reg_multiply_628_U0_ap_ready);

assign ap_sync_multiply_7_U0_ap_ready = (multiply_7_U0_ap_ready | ap_sync_reg_multiply_7_U0_ap_ready);

assign ap_sync_multiply_829_U0_ap_ready = (multiply_829_U0_ap_ready | ap_sync_reg_multiply_829_U0_ap_ready);

assign ap_sync_multiply_930_U0_ap_ready = (multiply_930_U0_ap_ready | ap_sync_reg_multiply_930_U0_ap_ready);

assign ap_sync_ready = (ap_sync_multiply_930_U0_ap_ready & ap_sync_multiply_829_U0_ap_ready & ap_sync_multiply_7_U0_ap_ready & ap_sync_multiply_628_U0_ap_ready & ap_sync_multiply_527_U0_ap_ready & ap_sync_multiply_426_U0_ap_ready & ap_sync_multiply_325_U0_ap_ready & ap_sync_multiply_224_U0_ap_ready & ap_sync_multiply_1_U0_ap_ready & ap_sync_multiply_1132_U0_ap_ready & ap_sync_multiply_1031_U0_ap_ready & ap_sync_multiply33_U0_ap_ready);

assign multiply33_U0_ap_continue = products_5_1_full_n;

assign multiply33_U0_ap_start = ((ap_sync_reg_multiply33_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_1031_U0_ap_continue = products_3_1_full_n;

assign multiply_1031_U0_ap_start = ((ap_sync_reg_multiply_1031_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_1132_U0_ap_continue = products_4_1_full_n;

assign multiply_1132_U0_ap_start = ((ap_sync_reg_multiply_1132_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_1_U0_ap_continue = products_0_full_n;

assign multiply_1_U0_ap_start = ((ap_sync_reg_multiply_1_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_224_U0_ap_continue = products_1_full_n;

assign multiply_224_U0_ap_start = ((ap_sync_reg_multiply_224_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_325_U0_ap_continue = products_2_full_n;

assign multiply_325_U0_ap_start = ((ap_sync_reg_multiply_325_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_426_U0_ap_continue = products_3_full_n;

assign multiply_426_U0_ap_start = ((ap_sync_reg_multiply_426_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_527_U0_ap_continue = products_4_full_n;

assign multiply_527_U0_ap_start = ((ap_sync_reg_multiply_527_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_628_U0_ap_continue = products_5_full_n;

assign multiply_628_U0_ap_start = ((ap_sync_reg_multiply_628_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_7_U0_ap_continue = products_0_1_full_n;

assign multiply_7_U0_ap_start = ((ap_sync_reg_multiply_7_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_829_U0_ap_continue = products_1_1_full_n;

assign multiply_829_U0_ap_start = ((ap_sync_reg_multiply_829_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_930_U0_ap_continue = products_2_1_full_n;

assign multiply_930_U0_ap_start = ((ap_sync_reg_multiply_930_U0_ap_ready ^ 1'b1) & ap_start);

assign out_alpha = Block_entry1426_proc_U0_out_alpha;

assign out_beta = Block_entry1439_proc_U0_out_beta;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "uz_VSD_6ph_asym_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //uz_VSD_6ph_asym

