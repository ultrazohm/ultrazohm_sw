-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_PI_Controller_sample is
generic (
    C_M_AXI_DOUT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DOUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DOUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DOUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_DIN_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_DIN_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DOUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DOUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DOUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_Dout_AWVALID : OUT STD_LOGIC;
    m_axi_Dout_AWREADY : IN STD_LOGIC;
    m_axi_Dout_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ADDR_WIDTH-1 downto 0);
    m_axi_Dout_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Dout_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_AWUSER_WIDTH-1 downto 0);
    m_axi_Dout_WVALID : OUT STD_LOGIC;
    m_axi_Dout_WREADY : IN STD_LOGIC;
    m_axi_Dout_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_DATA_WIDTH-1 downto 0);
    m_axi_Dout_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_DATA_WIDTH/8-1 downto 0);
    m_axi_Dout_WLAST : OUT STD_LOGIC;
    m_axi_Dout_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_WUSER_WIDTH-1 downto 0);
    m_axi_Dout_ARVALID : OUT STD_LOGIC;
    m_axi_Dout_ARREADY : IN STD_LOGIC;
    m_axi_Dout_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ADDR_WIDTH-1 downto 0);
    m_axi_Dout_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Dout_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Dout_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Dout_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DOUT_ARUSER_WIDTH-1 downto 0);
    m_axi_Dout_RVALID : IN STD_LOGIC;
    m_axi_Dout_RREADY : OUT STD_LOGIC;
    m_axi_Dout_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_DATA_WIDTH-1 downto 0);
    m_axi_Dout_RLAST : IN STD_LOGIC;
    m_axi_Dout_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_RUSER_WIDTH-1 downto 0);
    m_axi_Dout_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_BVALID : IN STD_LOGIC;
    m_axi_Dout_BREADY : OUT STD_LOGIC;
    m_axi_Dout_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Dout_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_ID_WIDTH-1 downto 0);
    m_axi_Dout_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DOUT_BUSER_WIDTH-1 downto 0);
    s_axi_Din_AWVALID : IN STD_LOGIC;
    s_axi_Din_AWREADY : OUT STD_LOGIC;
    s_axi_Din_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_ADDR_WIDTH-1 downto 0);
    s_axi_Din_WVALID : IN STD_LOGIC;
    s_axi_Din_WREADY : OUT STD_LOGIC;
    s_axi_Din_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_DATA_WIDTH-1 downto 0);
    s_axi_Din_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_DATA_WIDTH/8-1 downto 0);
    s_axi_Din_ARVALID : IN STD_LOGIC;
    s_axi_Din_ARREADY : OUT STD_LOGIC;
    s_axi_Din_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIN_ADDR_WIDTH-1 downto 0);
    s_axi_Din_RVALID : OUT STD_LOGIC;
    s_axi_Din_RREADY : IN STD_LOGIC;
    s_axi_Din_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DIN_DATA_WIDTH-1 downto 0);
    s_axi_Din_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_Din_BVALID : OUT STD_LOGIC;
    s_axi_Din_BREADY : IN STD_LOGIC;
    s_axi_Din_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of uz_PI_Controller_sample is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_PI_Controller_sample_uz_PI_Controller_sample,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2050,HLS_SYN_LUT=2833,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal self : STD_LOGIC_VECTOR (159 downto 0);
    signal I_rst : STD_LOGIC_VECTOR (31 downto 0);
    signal referenceValue : STD_LOGIC_VECTOR (31 downto 0);
    signal actualValue : STD_LOGIC_VECTOR (31 downto 0);
    signal ext_clamping : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal I_sum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Dout_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Dout_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal Dout_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal Dout_AWVALID : STD_LOGIC;
    signal Dout_AWREADY : STD_LOGIC;
    signal Dout_WVALID : STD_LOGIC;
    signal Dout_WREADY : STD_LOGIC;
    signal Dout_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Dout_ARREADY : STD_LOGIC;
    signal Dout_RVALID : STD_LOGIC;
    signal Dout_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Dout_RLAST : STD_LOGIC;
    signal Dout_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal Dout_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Dout_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Dout_BVALID : STD_LOGIC;
    signal Dout_BREADY : STD_LOGIC;
    signal Dout_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Dout_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal Dout_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal empty_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ext_clamping_read_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_231_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln47_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln47_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_1_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_2_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_2_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_3_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_3_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_4_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_4_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_5_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_5_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal Dout_addr_reg_849 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln46_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sum_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal or_ln35_1_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_1_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln54_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln35_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln49_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln49_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal and_ln23_1_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_1_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_3_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_3_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bitcast_ln49_1_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln49_1_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal select_ln25_fu_485_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_4_fu_504_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_4_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_2_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_5_fu_528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_5_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal or_ln35_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal sign_fu_607_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sign_1_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_979 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_2_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_2_reg_994 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_3_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_3_reg_999 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_763_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln57_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln59_fu_771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_269_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_1_fu_279_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_4_fu_301_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_3_fu_311_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln6_fu_343_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln35_1_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_380_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_1_fu_390_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_3_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_2_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln23_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_424_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_434_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_1_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_2_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_3_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln23_2_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_4_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_539_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_fu_549_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_1_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_1_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_576_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_2_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_3_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_2_fu_620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_fu_658_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_1_fu_676_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_662_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_672_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_680_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_1_fu_690_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln27_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_1_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_1_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_2_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_718_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_6_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal clamping_active_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_180_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_180_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_194_ce : STD_LOGIC;
    signal grp_fu_194_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_199_ce : STD_LOGIC;
    signal grp_fu_199_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component uz_PI_Controller_sample_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_PI_Controller_sample_Din_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        self : OUT STD_LOGIC_VECTOR (159 downto 0);
        I_rst : OUT STD_LOGIC_VECTOR (31 downto 0);
        referenceValue : OUT STD_LOGIC_VECTOR (31 downto 0);
        actualValue : OUT STD_LOGIC_VECTOR (31 downto 0);
        ext_clamping : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component uz_PI_Controller_sample_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component uz_PI_Controller_sample_Dout_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Din_s_axi_U : component uz_PI_Controller_sample_Din_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_DIN_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_DIN_DATA_WIDTH)
    port map (
        AWVALID => s_axi_Din_AWVALID,
        AWREADY => s_axi_Din_AWREADY,
        AWADDR => s_axi_Din_AWADDR,
        WVALID => s_axi_Din_WVALID,
        WREADY => s_axi_Din_WREADY,
        WDATA => s_axi_Din_WDATA,
        WSTRB => s_axi_Din_WSTRB,
        ARVALID => s_axi_Din_ARVALID,
        ARREADY => s_axi_Din_ARREADY,
        ARADDR => s_axi_Din_ARADDR,
        RVALID => s_axi_Din_RVALID,
        RREADY => s_axi_Din_RREADY,
        RDATA => s_axi_Din_RDATA,
        RRESP => s_axi_Din_RRESP,
        BVALID => s_axi_Din_BVALID,
        BREADY => s_axi_Din_BREADY,
        BRESP => s_axi_Din_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        self => self,
        I_rst => I_rst,
        referenceValue => referenceValue,
        actualValue => actualValue,
        ext_clamping => ext_clamping,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_s_axi_U : component uz_PI_Controller_sample_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_r => output_r);

    Dout_m_axi_U : component uz_PI_Controller_sample_Dout_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DOUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DOUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DOUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DOUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DOUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DOUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DOUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DOUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DOUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DOUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DOUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_Dout_AWVALID,
        AWREADY => m_axi_Dout_AWREADY,
        AWADDR => m_axi_Dout_AWADDR,
        AWID => m_axi_Dout_AWID,
        AWLEN => m_axi_Dout_AWLEN,
        AWSIZE => m_axi_Dout_AWSIZE,
        AWBURST => m_axi_Dout_AWBURST,
        AWLOCK => m_axi_Dout_AWLOCK,
        AWCACHE => m_axi_Dout_AWCACHE,
        AWPROT => m_axi_Dout_AWPROT,
        AWQOS => m_axi_Dout_AWQOS,
        AWREGION => m_axi_Dout_AWREGION,
        AWUSER => m_axi_Dout_AWUSER,
        WVALID => m_axi_Dout_WVALID,
        WREADY => m_axi_Dout_WREADY,
        WDATA => m_axi_Dout_WDATA,
        WSTRB => m_axi_Dout_WSTRB,
        WLAST => m_axi_Dout_WLAST,
        WID => m_axi_Dout_WID,
        WUSER => m_axi_Dout_WUSER,
        ARVALID => m_axi_Dout_ARVALID,
        ARREADY => m_axi_Dout_ARREADY,
        ARADDR => m_axi_Dout_ARADDR,
        ARID => m_axi_Dout_ARID,
        ARLEN => m_axi_Dout_ARLEN,
        ARSIZE => m_axi_Dout_ARSIZE,
        ARBURST => m_axi_Dout_ARBURST,
        ARLOCK => m_axi_Dout_ARLOCK,
        ARCACHE => m_axi_Dout_ARCACHE,
        ARPROT => m_axi_Dout_ARPROT,
        ARQOS => m_axi_Dout_ARQOS,
        ARREGION => m_axi_Dout_ARREGION,
        ARUSER => m_axi_Dout_ARUSER,
        RVALID => m_axi_Dout_RVALID,
        RREADY => m_axi_Dout_RREADY,
        RDATA => m_axi_Dout_RDATA,
        RLAST => m_axi_Dout_RLAST,
        RID => m_axi_Dout_RID,
        RUSER => m_axi_Dout_RUSER,
        RRESP => m_axi_Dout_RRESP,
        BVALID => m_axi_Dout_BVALID,
        BREADY => m_axi_Dout_BREADY,
        BRESP => m_axi_Dout_BRESP,
        BID => m_axi_Dout_BID,
        BUSER => m_axi_Dout_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => Dout_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => Dout_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => Dout_RDATA,
        I_RID => Dout_RID,
        I_RUSER => Dout_RUSER,
        I_RRESP => Dout_RRESP,
        I_RLAST => Dout_RLAST,
        I_AWVALID => Dout_AWVALID,
        I_AWREADY => Dout_AWREADY,
        I_AWADDR => Dout_addr_reg_849,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => Dout_WVALID,
        I_WREADY => Dout_WREADY,
        I_WDATA => Dout_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => Dout_BVALID,
        I_BREADY => Dout_BREADY,
        I_BRESP => Dout_BRESP,
        I_BID => Dout_BID,
        I_BUSER => Dout_BUSER);

    faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component uz_PI_Controller_sample_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        opcode => grp_fu_180_opcode,
        ce => grp_fu_180_ce,
        dout => grp_fu_180_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_214,
        din1 => grp_fu_190_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U4 : component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_194_p0,
        din1 => grp_fu_194_p1,
        ce => grp_fu_194_ce,
        opcode => grp_fu_194_opcode,
        dout => grp_fu_194_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U5 : component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_199_p0,
        din1 => grp_fu_199_p1,
        ce => grp_fu_199_ce,
        opcode => grp_fu_199_opcode,
        dout => grp_fu_199_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U6 : component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_204_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_204_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U7 : component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => output_5_reg_953,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_209_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                Dout_addr_reg_849 <= sext_ln57_fu_353_p1;
                empty_reg_799 <= empty_fu_231_p1;
                ext_clamping_read_reg_784 <= ext_clamping;
                icmp_ln23_2_reg_824 <= icmp_ln23_2_fu_289_p2;
                icmp_ln23_3_reg_829 <= icmp_ln23_3_fu_295_p2;
                icmp_ln23_4_reg_834 <= icmp_ln23_4_fu_321_p2;
                icmp_ln23_5_reg_839 <= icmp_ln23_5_fu_327_p2;
                trunc_ln2_reg_814 <= self(127 downto 96);
                trunc_ln47_reg_809 <= trunc_ln47_fu_245_p1;
                trunc_ln49_1_reg_819 <= self(159 downto 128);
                trunc_ln5_reg_844 <= self(95 downto 64);
                trunc_ln_reg_804 <= self(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                I_sum <= select_ln59_fu_771_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                P_sum_reg_865 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                and_ln23_1_reg_909 <= and_ln23_1_fu_460_p2;
                and_ln23_3_reg_915 <= and_ln23_3_fu_470_p2;
                bitcast_ln49_reg_901 <= bitcast_ln49_fu_416_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                and_ln25_reg_921 <= and_ln25_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bitcast_ln49_1_reg_927 <= bitcast_ln49_1_fu_481_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                fcmp_ln35_reg_891 <= grp_fu_199_p2;
                fcmp_ln35_reg_896 <= grp_fu_204_p2;
                tmp_7_reg_886 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                icmp_ln27_1_reg_989 <= icmp_ln27_1_fu_700_p2;
                icmp_ln27_2_reg_994 <= icmp_ln27_2_fu_706_p2;
                icmp_ln27_3_reg_999 <= icmp_ln27_3_fu_712_p2;
                icmp_ln27_reg_984 <= icmp_ln27_fu_694_p2;
                tmp_11_reg_979 <= grp_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                or_ln35_1_reg_875 <= or_ln35_1_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                or_ln35_reg_962 <= or_ln35_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                output_4_reg_938 <= output_4_fu_504_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                output_5_reg_953 <= output_5_fu_528_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_214 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then
                reg_223 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                select_ln50_reg_1004 <= select_ln50_fu_763_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                tmp_2_reg_943 <= grp_fu_194_p2;
                tmp_5_reg_948 <= grp_fu_199_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state19, ap_CS_fsm_state24, Dout_AWREADY, Dout_WREADY, Dout_BVALID)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Dout_AWVALID_assign_proc : process(ap_CS_fsm_state2, Dout_AWREADY)
    begin
        if (((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Dout_AWVALID <= ap_const_logic_1;
        else 
            Dout_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    Dout_BREADY_assign_proc : process(ap_CS_fsm_state24, Dout_BVALID)
    begin
        if (((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            Dout_BREADY <= ap_const_logic_1;
        else 
            Dout_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    Dout_WDATA <= output_4_reg_938;

    Dout_WVALID_assign_proc : process(ap_CS_fsm_state19, Dout_WREADY)
    begin
        if (((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            Dout_WVALID <= ap_const_logic_1;
        else 
            Dout_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    Dout_blk_n_AW_assign_proc : process(m_axi_Dout_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Dout_blk_n_AW <= m_axi_Dout_AWREADY;
        else 
            Dout_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    Dout_blk_n_B_assign_proc : process(m_axi_Dout_BVALID, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Dout_blk_n_B <= m_axi_Dout_BVALID;
        else 
            Dout_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    Dout_blk_n_W_assign_proc : process(m_axi_Dout_WREADY, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Dout_blk_n_W <= m_axi_Dout_WREADY;
        else 
            Dout_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    and_ln23_1_fu_460_p2 <= (or_ln23_fu_450_p2 and or_ln23_1_fu_456_p2);
    and_ln23_2_fu_514_p2 <= (tmp_2_reg_943 and and_ln23_1_reg_909);
    and_ln23_3_fu_470_p2 <= (or_ln23_fu_450_p2 and or_ln23_2_fu_466_p2);
    and_ln23_4_fu_518_p2 <= (tmp_5_reg_948 and and_ln23_3_reg_915);
    and_ln23_fu_522_p2 <= (and_ln23_4_fu_518_p2 and and_ln23_2_fu_514_p2);
    and_ln25_fu_476_p2 <= (grp_fu_194_p2 and and_ln23_3_reg_915);
    and_ln27_1_fu_739_p2 <= (or_ln27_fu_731_p2 and or_ln27_1_fu_735_p2);
    and_ln27_2_fu_745_p2 <= (grp_fu_194_p2 and and_ln27_1_fu_739_p2);
    and_ln27_fu_721_p2 <= (tmp_11_reg_979 and or_ln35_reg_962);
    and_ln35_1_fu_602_p2 <= (or_ln35_reg_962 and and_ln35_fu_596_p2);
    and_ln35_2_fu_616_p2 <= (tmp_7_reg_886 and or_ln35_1_reg_875);
    and_ln35_3_fu_644_p2 <= (or_ln35_1_reg_875 and and_ln35_fu_638_p2);
    and_ln35_fu_571_p2 <= (or_ln35_reg_962 and grp_fu_194_p2);
    and_ln35_fu_596_p2 <= (xor_ln35_fu_590_p2 and xor_ln35_fu_584_p2);
    and_ln35_fu_638_p2 <= (xor_ln35_fu_633_p2 and xor_ln35_fu_628_p2);
    and_ln49_fu_492_p2 <= (grp_fu_194_p2 and and_ln23_1_reg_909);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln23_fu_420_p1 <= reg_214;
    bitcast_ln27_1_fu_676_p1 <= sign_1_fu_649_p3;
    bitcast_ln27_fu_658_p1 <= sign_fu_607_p3;
    bitcast_ln35_1_fu_376_p1 <= reg_223;
    bitcast_ln35_fu_536_p1 <= output_5_reg_953;
    bitcast_ln46_fu_363_p1 <= trunc_ln_reg_804;
    bitcast_ln49_1_fu_481_p1 <= trunc_ln49_1_reg_819;
    bitcast_ln49_fu_416_p1 <= trunc_ln2_reg_814;
    bitcast_ln54_fu_412_p1 <= trunc_ln5_reg_844;
    clamping_active_fu_757_p2 <= (output_6_fu_751_p2 or empty_20_fu_718_p1);
    empty_20_fu_718_p1 <= ext_clamping_read_reg_784(1 - 1 downto 0);
    empty_fu_231_p1 <= I_rst(1 - 1 downto 0);

    grp_fu_180_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state19, Dout_AWREADY, Dout_WREADY, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state25, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = Dout_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_180_ce <= ap_const_logic_1;
        else 
            grp_fu_180_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_180_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, empty_reg_799, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state25)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            grp_fu_180_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            grp_fu_180_opcode <= ap_const_lv2_0;
        else 
            grp_fu_180_opcode <= "XX";
        end if; 
    end process;


    grp_fu_180_p0_assign_proc : process(ap_CS_fsm_state1, referenceValue, I_sum, reg_214, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_180_p0 <= reg_214;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_180_p0 <= I_sum;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_180_p0 <= referenceValue;
        else 
            grp_fu_180_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p1_assign_proc : process(ap_CS_fsm_state1, actualValue, P_sum_reg_865, ap_CS_fsm_state10, ap_CS_fsm_state17, select_ln25_fu_485_p3, select_ln50_reg_1004, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_180_p1 <= select_ln50_reg_1004;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_180_p1 <= select_ln25_fu_485_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_180_p1 <= P_sum_reg_865;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_180_p1 <= actualValue;
        else 
            grp_fu_180_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p0_assign_proc : process(reg_214, reg_223, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_186_p0 <= reg_223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_186_p0 <= reg_214;
        else 
            grp_fu_186_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p1_assign_proc : process(bitcast_ln46_fu_363_p1, ap_CS_fsm_state6, ap_CS_fsm_state10, bitcast_ln54_fu_412_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_186_p1 <= bitcast_ln54_fu_412_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_186_p1 <= bitcast_ln46_fu_363_p1;
        else 
            grp_fu_186_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_190_p1 <= trunc_ln47_reg_809;

    grp_fu_194_ce_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state24, Dout_WREADY, Dout_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = Dout_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            grp_fu_194_ce <= ap_const_logic_1;
        else 
            grp_fu_194_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_194_opcode_assign_proc : process(empty_reg_799, ap_CS_fsm_state10, ap_CS_fsm_state15, and_ln25_reg_921, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_194_opcode <= ap_const_lv5_1;
        elsif (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_194_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_194_opcode <= ap_const_lv5_2;
        elsif ((((ap_const_lv1_0 = and_ln25_reg_921) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_fu_194_opcode <= ap_const_lv5_4;
        else 
            grp_fu_194_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_194_p0_assign_proc : process(reg_214, reg_223, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, output_5_reg_953, ap_CS_fsm_state22, sign_fu_607_p3, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_194_p0 <= sign_fu_607_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_194_p0 <= output_5_reg_953;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_194_p0 <= reg_214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_194_p0 <= reg_223;
        else 
            grp_fu_194_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_194_p1_assign_proc : process(ap_CS_fsm_state10, bitcast_ln49_fu_416_p1, ap_CS_fsm_state15, bitcast_ln49_1_fu_481_p1, bitcast_ln49_1_reg_927, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, sign_1_fu_649_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_194_p1 <= sign_1_fu_649_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_194_p1 <= bitcast_ln49_1_reg_927;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_194_p1 <= bitcast_ln49_1_fu_481_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_194_p1 <= bitcast_ln49_fu_416_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_194_p1 <= ap_const_lv32_0;
        else 
            grp_fu_194_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_199_ce_assign_proc : process(ap_CS_fsm_state19, Dout_WREADY, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = Dout_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            grp_fu_199_ce <= ap_const_logic_1;
        else 
            grp_fu_199_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_199_opcode_assign_proc : process(empty_reg_799, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state22)
    begin
        if (((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_199_opcode <= ap_const_lv5_5;
        elsif ((((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((empty_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_fu_199_opcode <= ap_const_lv5_8;
        else 
            grp_fu_199_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_199_p0_assign_proc : process(reg_214, reg_223, ap_CS_fsm_state10, ap_CS_fsm_state18, output_5_reg_953, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_199_p0 <= output_5_reg_953;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_199_p0 <= reg_214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_199_p0 <= reg_223;
        else 
            grp_fu_199_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_199_p1_assign_proc : process(ap_CS_fsm_state10, bitcast_ln49_reg_901, ap_CS_fsm_state18, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_199_p1 <= bitcast_ln49_reg_901;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_199_p1 <= ap_const_lv32_0;
        else 
            grp_fu_199_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p0_assign_proc : process(reg_223, ap_CS_fsm_state10, output_5_reg_953, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_204_p0 <= output_5_reg_953;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_204_p0 <= reg_223;
        else 
            grp_fu_204_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln23_1_fu_444_p2 <= "1" when (trunc_ln23_fu_434_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_2_fu_289_p2 <= "0" when (tmp_1_fu_269_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_3_fu_295_p2 <= "1" when (trunc_ln23_1_fu_279_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_4_fu_321_p2 <= "0" when (tmp_4_fu_301_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_5_fu_327_p2 <= "1" when (trunc_ln23_3_fu_311_p4 = ap_const_lv23_0) else "0";
    icmp_ln23_fu_438_p2 <= "0" when (tmp_fu_424_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_1_fu_700_p2 <= "1" when (trunc_ln27_fu_672_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_2_fu_706_p2 <= "0" when (tmp_13_fu_680_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_3_fu_712_p2 <= "1" when (trunc_ln27_1_fu_690_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_694_p2 <= "0" when (tmp_12_fu_662_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_1_fu_559_p2 <= "1" when (trunc_ln35_fu_549_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_2_fu_394_p2 <= "0" when (tmp_6_fu_380_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_3_fu_400_p2 <= "1" when (trunc_ln35_1_fu_390_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_fu_553_p2 <= "0" when (tmp_9_fu_539_p4 = ap_const_lv8_FF) else "1";
    or_ln23_1_fu_456_p2 <= (icmp_ln23_3_reg_829 or icmp_ln23_2_reg_824);
    or_ln23_2_fu_466_p2 <= (icmp_ln23_5_reg_839 or icmp_ln23_4_reg_834);
    or_ln23_fu_450_p2 <= (icmp_ln23_fu_438_p2 or icmp_ln23_1_fu_444_p2);
    or_ln27_1_fu_735_p2 <= (icmp_ln27_3_reg_999 or icmp_ln27_2_reg_994);
    or_ln27_fu_731_p2 <= (icmp_ln27_reg_984 or icmp_ln27_1_reg_989);
    or_ln35_1_fu_406_p2 <= (icmp_ln35_3_fu_400_p2 or icmp_ln35_2_fu_394_p2);
    or_ln35_fu_565_p2 <= (icmp_ln35_fu_553_p2 or icmp_ln35_1_fu_559_p2);
    output_3_fu_497_p3 <= 
        bitcast_ln49_1_reg_927 when (and_ln49_fu_492_p2(0) = '1') else 
        reg_214;
    output_4_fu_504_p3 <= 
        bitcast_ln49_reg_901 when (and_ln25_reg_921(0) = '1') else 
        output_3_fu_497_p3;
    output_5_fu_528_p3 <= 
        ap_const_lv32_0 when (and_ln23_fu_522_p2(0) = '1') else 
        grp_fu_180_p2;
    output_6_fu_751_p2 <= (xor_ln27_fu_725_p2 and and_ln27_2_fu_745_p2);
    select_ln25_fu_485_p3 <= 
        bitcast_ln49_reg_901 when (and_ln25_reg_921(0) = '1') else 
        bitcast_ln49_1_fu_481_p1;
    select_ln35_2_fu_620_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_2_fu_616_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_fu_576_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_fu_571_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln50_fu_763_p3 <= 
        ap_const_lv32_0 when (clamping_active_fu_757_p2(0) = '1') else 
        reg_223;
    select_ln59_fu_771_p3 <= 
        ap_const_lv32_0 when (empty_reg_799(0) = '1') else 
        grp_fu_180_p2;
        sext_ln57_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_343_p4),64));

    sign_1_fu_649_p3 <= 
        select_ln35_2_fu_620_p3 when (and_ln35_3_fu_644_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_fu_607_p3 <= 
        select_ln35_fu_576_p3 when (and_ln35_1_fu_602_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_12_fu_662_p4 <= bitcast_ln27_fu_658_p1(30 downto 23);
    tmp_13_fu_680_p4 <= bitcast_ln27_1_fu_676_p1(30 downto 23);
    tmp_1_fu_269_p4 <= self(158 downto 151);
    tmp_4_fu_301_p4 <= self(126 downto 119);
    tmp_6_fu_380_p4 <= bitcast_ln35_1_fu_376_p1(30 downto 23);
    tmp_9_fu_539_p4 <= bitcast_ln35_fu_536_p1(30 downto 23);
    tmp_fu_424_p4 <= bitcast_ln23_fu_420_p1(30 downto 23);
    trunc_ln23_1_fu_279_p4 <= self(150 downto 128);
    trunc_ln23_3_fu_311_p4 <= self(118 downto 96);
    trunc_ln23_fu_434_p1 <= bitcast_ln23_fu_420_p1(23 - 1 downto 0);
    trunc_ln27_1_fu_690_p1 <= bitcast_ln27_1_fu_676_p1(23 - 1 downto 0);
    trunc_ln27_fu_672_p1 <= bitcast_ln27_fu_658_p1(23 - 1 downto 0);
    trunc_ln35_1_fu_390_p1 <= bitcast_ln35_1_fu_376_p1(23 - 1 downto 0);
    trunc_ln35_fu_549_p1 <= bitcast_ln35_fu_536_p1(23 - 1 downto 0);
    trunc_ln47_fu_245_p1 <= self(32 - 1 downto 0);
    trunc_ln6_fu_343_p4 <= output_r(63 downto 2);
    xor_ln27_fu_725_p2 <= (ap_const_lv1_1 xor and_ln27_fu_721_p2);
    xor_ln35_fu_584_p2 <= (grp_fu_199_p2 xor ap_const_lv1_1);
    xor_ln35_fu_590_p2 <= (grp_fu_204_p2 xor ap_const_lv1_1);
    xor_ln35_fu_628_p2 <= (fcmp_ln35_reg_891 xor ap_const_lv1_1);
    xor_ln35_fu_633_p2 <= (fcmp_ln35_reg_896 xor ap_const_lv1_1);
end behav;
