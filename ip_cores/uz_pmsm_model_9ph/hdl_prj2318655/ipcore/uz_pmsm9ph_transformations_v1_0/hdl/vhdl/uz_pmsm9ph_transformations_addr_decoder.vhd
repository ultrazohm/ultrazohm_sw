-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj2318655/hdlsrc/uz_pmsm_model_9ph_21b_all_double/uz_pmsm9ph_transformations_addr_decoder.vhd
-- Created: 2022-06-05 21:48:03
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm9ph_transformations_addr_decoder
-- Source Path: uz_pmsm9ph_transformations/uz_pmsm9ph_transformations_axi4/uz_pmsm9ph_transformations_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm9ph_transformations_pkg.ALL;

ENTITY uz_pmsm9ph_transformations_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_Out2                         :   IN    vector_of_std_logic_vector25(0 TO 8);  -- sfix25_En12 [9]
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic  -- ufix1
        );
END uz_pmsm9ph_transformations_addr_decoder;


ARCHITECTURE rtl OF uz_pmsm9ph_transformations_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_Out2_1_1              : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Out2                  : std_logic;  -- ufix1
  SIGNAL strobe_sel_Out2                  : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL strobe_in_Out2                   : std_logic;  -- ufix1
  SIGNAL strobe_sw_Out2                   : std_logic;  -- ufix1
  SIGNAL strobe_reg_Out2                  : std_logic;  -- ufix1
  SIGNAL read_Out2_signed                 : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL sync_reg_Out2                    : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL dtc_cast                         : unsigned(31 DOWNTO 0);  -- ufix32_En12
  SIGNAL dtc_cast_1                       : unsigned(31 DOWNTO 0);  -- ufix32_En12
  SIGNAL dtc_cast_2                       : unsigned(31 DOWNTO 0);  -- ufix32_En12
  SIGNAL dtc_cast_3                       : unsigned(31 DOWNTO 0);  -- ufix32_En12
  SIGNAL dtc_cast_4                       : unsigned(31 DOWNTO 0);  -- ufix32_En12
  SIGNAL dtc_cast_5                       : unsigned(31 DOWNTO 0);  -- ufix32_En12
  SIGNAL dtc_cast_6                       : unsigned(31 DOWNTO 0);  -- ufix32_En12
  SIGNAL dtc_cast_7                       : unsigned(31 DOWNTO 0);  -- ufix32_En12
  SIGNAL dtc_cast_8                       : unsigned(31 DOWNTO 0);  -- ufix32_En12
  SIGNAL data_slice_Out2_1                : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL decode_sel_Out2_1_2              : std_logic;  -- ufix1
  SIGNAL data_slice_Out2_1_0              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2_1_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Out2_1_3              : std_logic;  -- ufix1
  SIGNAL data_slice_Out2_1_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2_1_2               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Out2_1_4              : std_logic;  -- ufix1
  SIGNAL data_slice_Out2_1_2              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2_1_3               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Out2_1_5              : std_logic;  -- ufix1
  SIGNAL data_slice_Out2_1_3              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2_1_4               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Out2_1_6              : std_logic;  -- ufix1
  SIGNAL data_slice_Out2_1_4              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2_1_5               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Out2_1_7              : std_logic;  -- ufix1
  SIGNAL data_slice_Out2_1_5              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2_1_6               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Out2_1_8              : std_logic;  -- ufix1
  SIGNAL data_slice_Out2_1_6              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2_1_7               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Out2_1_9              : std_logic;  -- ufix1
  SIGNAL data_slice_Out2_1_7              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2_1_8               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_Out2_1_8              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2_1_9               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_Out2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  
  decode_sel_Out2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  strobe_sel_Out2 <= decode_sel_Out2 AND wr_enb;

  const_zero <= '0';

  data_write_unsigned <= unsigned(data_write);

  strobe_in_Out2 <= data_write_unsigned(0);

  
  strobe_sw_Out2 <= const_zero WHEN strobe_sel_Out2 = '0' ELSE
      strobe_in_Out2;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_Out2 <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_Out2 <= strobe_sw_Out2;
      END IF;
    END IF;
  END PROCESS reg_process;


  outputgen: FOR k IN 0 TO 8 GENERATE
    read_Out2_signed(k) <= signed(read_Out2(k));
  END GENERATE;

  reg_Out2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_Out2(0) <= to_signed(16#0000000#, 25);
        sync_reg_Out2(1) <= to_signed(16#0000000#, 25);
        sync_reg_Out2(2) <= to_signed(16#0000000#, 25);
        sync_reg_Out2(3) <= to_signed(16#0000000#, 25);
        sync_reg_Out2(4) <= to_signed(16#0000000#, 25);
        sync_reg_Out2(5) <= to_signed(16#0000000#, 25);
        sync_reg_Out2(6) <= to_signed(16#0000000#, 25);
        sync_reg_Out2(7) <= to_signed(16#0000000#, 25);
        sync_reg_Out2(8) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' AND strobe_reg_Out2 = '1' THEN
        sync_reg_Out2(0) <= read_Out2_signed(0);
        sync_reg_Out2(1) <= read_Out2_signed(1);
        sync_reg_Out2(2) <= read_Out2_signed(2);
        sync_reg_Out2(3) <= read_Out2_signed(3);
        sync_reg_Out2(4) <= read_Out2_signed(4);
        sync_reg_Out2(5) <= read_Out2_signed(5);
        sync_reg_Out2(6) <= read_Out2_signed(6);
        sync_reg_Out2(7) <= read_Out2_signed(7);
        sync_reg_Out2(8) <= read_Out2_signed(8);
      END IF;
    END IF;
  END PROCESS reg_Out2_process;


  dtc_cast <= unsigned(resize(sync_reg_Out2(0), 32));
  data_slice_Out2_1(0) <= dtc_cast;
  dtc_cast_1 <= unsigned(resize(sync_reg_Out2(1), 32));
  data_slice_Out2_1(1) <= dtc_cast_1;
  dtc_cast_2 <= unsigned(resize(sync_reg_Out2(2), 32));
  data_slice_Out2_1(2) <= dtc_cast_2;
  dtc_cast_3 <= unsigned(resize(sync_reg_Out2(3), 32));
  data_slice_Out2_1(3) <= dtc_cast_3;
  dtc_cast_4 <= unsigned(resize(sync_reg_Out2(4), 32));
  data_slice_Out2_1(4) <= dtc_cast_4;
  dtc_cast_5 <= unsigned(resize(sync_reg_Out2(5), 32));
  data_slice_Out2_1(5) <= dtc_cast_5;
  dtc_cast_6 <= unsigned(resize(sync_reg_Out2(6), 32));
  data_slice_Out2_1(6) <= dtc_cast_6;
  dtc_cast_7 <= unsigned(resize(sync_reg_Out2(7), 32));
  data_slice_Out2_1(7) <= dtc_cast_7;
  dtc_cast_8 <= unsigned(resize(sync_reg_Out2(8), 32));
  data_slice_Out2_1(8) <= dtc_cast_8;

  
  decode_sel_Out2_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  data_slice_Out2_1_0 <= data_slice_Out2_1(0);

  
  decode_rd_Out2_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_Out2_1_1 = '0' ELSE
      data_slice_Out2_1_0;

  
  decode_sel_Out2_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  data_slice_Out2_1_1 <= data_slice_Out2_1(1);

  
  decode_rd_Out2_1_2 <= decode_rd_Out2_1_1 WHEN decode_sel_Out2_1_2 = '0' ELSE
      data_slice_Out2_1_1;

  
  decode_sel_Out2_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  data_slice_Out2_1_2 <= data_slice_Out2_1(2);

  
  decode_rd_Out2_1_3 <= decode_rd_Out2_1_2 WHEN decode_sel_Out2_1_3 = '0' ELSE
      data_slice_Out2_1_2;

  
  decode_sel_Out2_1_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  data_slice_Out2_1_3 <= data_slice_Out2_1(3);

  
  decode_rd_Out2_1_4 <= decode_rd_Out2_1_3 WHEN decode_sel_Out2_1_4 = '0' ELSE
      data_slice_Out2_1_3;

  
  decode_sel_Out2_1_6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  data_slice_Out2_1_4 <= data_slice_Out2_1(4);

  
  decode_rd_Out2_1_5 <= decode_rd_Out2_1_4 WHEN decode_sel_Out2_1_5 = '0' ELSE
      data_slice_Out2_1_4;

  
  decode_sel_Out2_1_7 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  data_slice_Out2_1_5 <= data_slice_Out2_1(5);

  
  decode_rd_Out2_1_6 <= decode_rd_Out2_1_5 WHEN decode_sel_Out2_1_6 = '0' ELSE
      data_slice_Out2_1_5;

  
  decode_sel_Out2_1_8 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  data_slice_Out2_1_6 <= data_slice_Out2_1(6);

  
  decode_rd_Out2_1_7 <= decode_rd_Out2_1_6 WHEN decode_sel_Out2_1_7 = '0' ELSE
      data_slice_Out2_1_6;

  
  decode_sel_Out2_1_9 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  data_slice_Out2_1_7 <= data_slice_Out2_1(7);

  
  decode_rd_Out2_1_8 <= decode_rd_Out2_1_7 WHEN decode_sel_Out2_1_8 = '0' ELSE
      data_slice_Out2_1_7;

  data_slice_Out2_1_8 <= data_slice_Out2_1(8);

  
  decode_rd_Out2_1_9 <= decode_rd_Out2_1_8 WHEN decode_sel_Out2_1_9 = '0' ELSE
      data_slice_Out2_1_8;

  data_read <= std_logic_vector(decode_rd_Out2_1_9);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

END rtl;

