-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_Prediction_and_cost_function_6phase\hdlsrc\parallel_prediction_and_cost_function_6phase\parallel_prediction_and_cost_function_6phase_src_MATLAB_Function.vhd
-- Created: 2022-10-06 09:26:50
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_prediction_and_cost_function_6phase_src_MATLAB_Function
-- Source Path: parallel_prediction_and_cost_function_6phase/Prediction_and_cost_function/Subsystem/MATLAB Function
-- Hierarchy Level: 2
-- 
-- Prediction of the d-, q-, x-, y-currents of the 6-Phase-PMSM with the finite control set 
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_prediction_and_cost_function_6phase_src_Prediction_and_cost_function_pkg.ALL;

ENTITY parallel_prediction_and_cost_function_6phase_src_MATLAB_Function IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        SampleTime_div_Ld                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_k_1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iq_k_1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ix_k_1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iy_k_1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Rs                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_el                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Lq                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psiPM                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        d_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        q_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        x_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        y_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_ref                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iq_ref                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ix_ref                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iy_ref                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        J                                 :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END parallel_prediction_and_cost_function_6phase_src_MATLAB_Function;


ARCHITECTURE rtl OF parallel_prediction_and_cost_function_6phase_src_MATLAB_Function IS

  -- Component Declarations
  COMPONENT parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_nfp_mul_single(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_nfp_sub_single(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_nfp_add_single(rtl);

  -- Signals
  SIGNAL delayMatch4_reg                  : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL delayMatch4_reg_next             : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL id_ref_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch2_reg                  : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch2_reg_next             : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL SampleTime_div_Ld_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch_reg                   : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch_reg_next              : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL d_phase_voltage_per_switching_state_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg                      : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL reduced_reg_next                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL iq_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_3                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_4                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_5                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch3_reg                  : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL delayMatch3_reg_next             : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL id_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL id_k_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_6                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch20_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch20_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Out_1_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch11_reg                 : vector_of_std_logic_vector32(0 TO 35);  -- ufix32 [36]
  SIGNAL delayMatch11_reg_next            : vector_of_std_logic_vector32(0 TO 35);  -- ufix32 [36]
  SIGNAL iq_ref_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch9_reg                  : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL delayMatch9_reg_next             : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL SampleTime_div_Lq_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch6_reg                  : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch6_reg_next             : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL q_phase_voltage_per_switching_state_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_7                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_8                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch8_reg                  : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch8_reg_next             : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL out0_9                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch7_reg                  : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch7_reg_next             : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch5_reg                  : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch5_reg_next             : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL psiPM_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_10                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_11                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_12                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_13                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_14                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_1                    : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL reduced_reg_next_1               : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL iq_k_1_2                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL iq_k_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_15                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out_1_2                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_16                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch15_reg                 : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL delayMatch15_reg_next            : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL ix_ref_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch13_reg                 : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch13_reg_next            : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL SampleTime_div_Lx_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch12_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch12_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL x_phase_voltage_per_switching_state_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_17                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_18                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_19                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch14_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch14_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL ix_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ix_k_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_20                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out_1_3                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch21_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch21_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL Out_1_4                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_21                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch19_reg                 : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL delayMatch19_reg_next            : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL iy_ref_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch17_reg                 : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch17_reg_next            : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL SampleTime_div_Ly_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch16_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch16_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL y_phase_voltage_per_switching_state_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_22                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_23                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_24                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch18_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch18_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL iy_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL iy_k_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_25                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out_1_5                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch22_reg                 : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL delayMatch22_reg_next            : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL Out_1_6                          : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_mul_comp : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => id_k_1,  -- single
              nfp_in2 => Rs,  -- single
              nfp_out => out0  -- single
              );

  u_nfp_sub_comp : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => d_phase_voltage_per_switching_state_1,  -- single
              nfp_in2 => out0,  -- single
              nfp_out => out0_1  -- single
              );

  u_nfp_mul_comp_1 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el,  -- single
              nfp_in2 => Lq,  -- single
              nfp_out => out0_2  -- single
              );

  u_nfp_mul_comp_2 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_2,  -- single
              nfp_in2 => iq_k_1_1,  -- single
              nfp_out => out0_3  -- single
              );

  u_nfp_add_comp : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_1,  -- single
              nfp_in2 => out0_3,  -- single
              nfp_out => out0_4  -- single
              );

  u_nfp_mul_comp_3 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Ld_1,  -- single
              nfp_in2 => out0_4,  -- single
              nfp_out => out0_5  -- single
              );

  u_nfp_add_comp_1 : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_5,  -- single
              nfp_in2 => id_k_1_1,  -- single
              nfp_out => id_k_2  -- single
              );

  -- Calculation of the cost function
  u_nfp_sub_comp_1 : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => id_ref_1,  -- single
              nfp_in2 => id_k_2,  -- single
              nfp_out => out0_6  -- single
              );

  u_nfp_mul_comp_4 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_6,  -- single
              nfp_in2 => out0_6,  -- single
              nfp_out => Out_1  -- single
              );

  u_nfp_mul_comp_5 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iq_k_1,  -- single
              nfp_in2 => Rs,  -- single
              nfp_out => out0_7  -- single
              );

  u_nfp_sub_comp_2 : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => q_phase_voltage_per_switching_state_1,  -- single
              nfp_in2 => out0_7,  -- single
              nfp_out => out0_8  -- single
              );

  u_nfp_mul_comp_6 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => id_k_1,  -- single
              nfp_in2 => Ld,  -- single
              nfp_out => out0_10  -- single
              );

  u_nfp_add_comp_2 : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psiPM_1,  -- single
              nfp_in2 => out0_10,  -- single
              nfp_out => out0_11  -- single
              );

  u_nfp_mul_comp_7 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el_1,  -- single
              nfp_in2 => out0_11,  -- single
              nfp_out => out0_12  -- single
              );

  u_nfp_sub_comp_3 : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_9,  -- single
              nfp_in2 => out0_12,  -- single
              nfp_out => out0_13  -- single
              );

  u_nfp_mul_comp_8 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Lq_1,  -- single
              nfp_in2 => out0_13,  -- single
              nfp_out => out0_14  -- single
              );

  u_nfp_add_comp_3 : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_14,  -- single
              nfp_in2 => iq_k_1_2,  -- single
              nfp_out => iq_k_2  -- single
              );

  u_nfp_sub_comp_4 : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iq_ref_1,  -- single
              nfp_in2 => iq_k_2,  -- single
              nfp_out => out0_15  -- single
              );

  u_nfp_mul_comp_9 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_15,  -- single
              nfp_in2 => out0_15,  -- single
              nfp_out => Out_1_2  -- single
              );

  u_nfp_add_comp_4 : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Out_1_1,  -- single
              nfp_in2 => Out_1_2,  -- single
              nfp_out => out0_16  -- single
              );

  u_nfp_mul_comp_10 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => ix_k_1,  -- single
              nfp_in2 => Rs,  -- single
              nfp_out => out0_17  -- single
              );

  u_nfp_sub_comp_5 : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => x_phase_voltage_per_switching_state_1,  -- single
              nfp_in2 => out0_17,  -- single
              nfp_out => out0_18  -- single
              );

  u_nfp_mul_comp_11 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Lx_1,  -- single
              nfp_in2 => out0_18,  -- single
              nfp_out => out0_19  -- single
              );

  u_nfp_add_comp_5 : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_19,  -- single
              nfp_in2 => ix_k_1_1,  -- single
              nfp_out => ix_k_2  -- single
              );

  u_nfp_sub_comp_6 : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => ix_ref_1,  -- single
              nfp_in2 => ix_k_2,  -- single
              nfp_out => out0_20  -- single
              );

  u_nfp_mul_comp_12 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_20,  -- single
              nfp_in2 => out0_20,  -- single
              nfp_out => Out_1_3  -- single
              );

  u_nfp_add_comp_6 : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_16,  -- single
              nfp_in2 => Out_1_4,  -- single
              nfp_out => out0_21  -- single
              );

  u_nfp_mul_comp_13 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iy_k_1,  -- single
              nfp_in2 => Rs,  -- single
              nfp_out => out0_22  -- single
              );

  u_nfp_sub_comp_7 : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => y_phase_voltage_per_switching_state_1,  -- single
              nfp_in2 => out0_22,  -- single
              nfp_out => out0_23  -- single
              );

  u_nfp_mul_comp_14 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Ly_1,  -- single
              nfp_in2 => out0_23,  -- single
              nfp_out => out0_24  -- single
              );

  u_nfp_add_comp_7 : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_24,  -- single
              nfp_in2 => iy_k_1_1,  -- single
              nfp_out => iy_k_2  -- single
              );

  u_nfp_sub_comp_8 : parallel_prediction_and_cost_function_6phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iy_ref_1,  -- single
              nfp_in2 => iy_k_2,  -- single
              nfp_out => out0_25  -- single
              );

  u_nfp_mul_comp_15 : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_25,  -- single
              nfp_in2 => out0_25,  -- single
              nfp_out => Out_1_5  -- single
              );

  u_nfp_add_comp_8 : parallel_prediction_and_cost_function_6phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_21,  -- single
              nfp_in2 => Out_1_6,  -- single
              nfp_out => J  -- single
              );

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg(0) <= X"00000000";
        delayMatch4_reg(1) <= X"00000000";
        delayMatch4_reg(2) <= X"00000000";
        delayMatch4_reg(3) <= X"00000000";
        delayMatch4_reg(4) <= X"00000000";
        delayMatch4_reg(5) <= X"00000000";
        delayMatch4_reg(6) <= X"00000000";
        delayMatch4_reg(7) <= X"00000000";
        delayMatch4_reg(8) <= X"00000000";
        delayMatch4_reg(9) <= X"00000000";
        delayMatch4_reg(10) <= X"00000000";
        delayMatch4_reg(11) <= X"00000000";
        delayMatch4_reg(12) <= X"00000000";
        delayMatch4_reg(13) <= X"00000000";
        delayMatch4_reg(14) <= X"00000000";
        delayMatch4_reg(15) <= X"00000000";
        delayMatch4_reg(16) <= X"00000000";
        delayMatch4_reg(17) <= X"00000000";
        delayMatch4_reg(18) <= X"00000000";
        delayMatch4_reg(19) <= X"00000000";
        delayMatch4_reg(20) <= X"00000000";
        delayMatch4_reg(21) <= X"00000000";
        delayMatch4_reg(22) <= X"00000000";
        delayMatch4_reg(23) <= X"00000000";
        delayMatch4_reg(24) <= X"00000000";
        delayMatch4_reg(25) <= X"00000000";
        delayMatch4_reg(26) <= X"00000000";
        delayMatch4_reg(27) <= X"00000000";
        delayMatch4_reg(28) <= X"00000000";
        delayMatch4_reg(29) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
        delayMatch4_reg(2) <= delayMatch4_reg_next(2);
        delayMatch4_reg(3) <= delayMatch4_reg_next(3);
        delayMatch4_reg(4) <= delayMatch4_reg_next(4);
        delayMatch4_reg(5) <= delayMatch4_reg_next(5);
        delayMatch4_reg(6) <= delayMatch4_reg_next(6);
        delayMatch4_reg(7) <= delayMatch4_reg_next(7);
        delayMatch4_reg(8) <= delayMatch4_reg_next(8);
        delayMatch4_reg(9) <= delayMatch4_reg_next(9);
        delayMatch4_reg(10) <= delayMatch4_reg_next(10);
        delayMatch4_reg(11) <= delayMatch4_reg_next(11);
        delayMatch4_reg(12) <= delayMatch4_reg_next(12);
        delayMatch4_reg(13) <= delayMatch4_reg_next(13);
        delayMatch4_reg(14) <= delayMatch4_reg_next(14);
        delayMatch4_reg(15) <= delayMatch4_reg_next(15);
        delayMatch4_reg(16) <= delayMatch4_reg_next(16);
        delayMatch4_reg(17) <= delayMatch4_reg_next(17);
        delayMatch4_reg(18) <= delayMatch4_reg_next(18);
        delayMatch4_reg(19) <= delayMatch4_reg_next(19);
        delayMatch4_reg(20) <= delayMatch4_reg_next(20);
        delayMatch4_reg(21) <= delayMatch4_reg_next(21);
        delayMatch4_reg(22) <= delayMatch4_reg_next(22);
        delayMatch4_reg(23) <= delayMatch4_reg_next(23);
        delayMatch4_reg(24) <= delayMatch4_reg_next(24);
        delayMatch4_reg(25) <= delayMatch4_reg_next(25);
        delayMatch4_reg(26) <= delayMatch4_reg_next(26);
        delayMatch4_reg(27) <= delayMatch4_reg_next(27);
        delayMatch4_reg(28) <= delayMatch4_reg_next(28);
        delayMatch4_reg(29) <= delayMatch4_reg_next(29);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  id_ref_1 <= delayMatch4_reg(29);
  delayMatch4_reg_next(0) <= id_ref;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);
  delayMatch4_reg_next(2) <= delayMatch4_reg(1);
  delayMatch4_reg_next(3) <= delayMatch4_reg(2);
  delayMatch4_reg_next(4) <= delayMatch4_reg(3);
  delayMatch4_reg_next(5) <= delayMatch4_reg(4);
  delayMatch4_reg_next(6) <= delayMatch4_reg(5);
  delayMatch4_reg_next(7) <= delayMatch4_reg(6);
  delayMatch4_reg_next(8) <= delayMatch4_reg(7);
  delayMatch4_reg_next(9) <= delayMatch4_reg(8);
  delayMatch4_reg_next(10) <= delayMatch4_reg(9);
  delayMatch4_reg_next(11) <= delayMatch4_reg(10);
  delayMatch4_reg_next(12) <= delayMatch4_reg(11);
  delayMatch4_reg_next(13) <= delayMatch4_reg(12);
  delayMatch4_reg_next(14) <= delayMatch4_reg(13);
  delayMatch4_reg_next(15) <= delayMatch4_reg(14);
  delayMatch4_reg_next(16) <= delayMatch4_reg(15);
  delayMatch4_reg_next(17) <= delayMatch4_reg(16);
  delayMatch4_reg_next(18) <= delayMatch4_reg(17);
  delayMatch4_reg_next(19) <= delayMatch4_reg(18);
  delayMatch4_reg_next(20) <= delayMatch4_reg(19);
  delayMatch4_reg_next(21) <= delayMatch4_reg(20);
  delayMatch4_reg_next(22) <= delayMatch4_reg(21);
  delayMatch4_reg_next(23) <= delayMatch4_reg(22);
  delayMatch4_reg_next(24) <= delayMatch4_reg(23);
  delayMatch4_reg_next(25) <= delayMatch4_reg(24);
  delayMatch4_reg_next(26) <= delayMatch4_reg(25);
  delayMatch4_reg_next(27) <= delayMatch4_reg(26);
  delayMatch4_reg_next(28) <= delayMatch4_reg(27);
  delayMatch4_reg_next(29) <= delayMatch4_reg(28);

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch2_reg(0) <= X"00000000";
        delayMatch2_reg(1) <= X"00000000";
        delayMatch2_reg(2) <= X"00000000";
        delayMatch2_reg(3) <= X"00000000";
        delayMatch2_reg(4) <= X"00000000";
        delayMatch2_reg(5) <= X"00000000";
        delayMatch2_reg(6) <= X"00000000";
        delayMatch2_reg(7) <= X"00000000";
        delayMatch2_reg(8) <= X"00000000";
        delayMatch2_reg(9) <= X"00000000";
        delayMatch2_reg(10) <= X"00000000";
        delayMatch2_reg(11) <= X"00000000";
        delayMatch2_reg(12) <= X"00000000";
        delayMatch2_reg(13) <= X"00000000";
        delayMatch2_reg(14) <= X"00000000";
        delayMatch2_reg(15) <= X"00000000";
        delayMatch2_reg(16) <= X"00000000";
        delayMatch2_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
        delayMatch2_reg(6) <= delayMatch2_reg_next(6);
        delayMatch2_reg(7) <= delayMatch2_reg_next(7);
        delayMatch2_reg(8) <= delayMatch2_reg_next(8);
        delayMatch2_reg(9) <= delayMatch2_reg_next(9);
        delayMatch2_reg(10) <= delayMatch2_reg_next(10);
        delayMatch2_reg(11) <= delayMatch2_reg_next(11);
        delayMatch2_reg(12) <= delayMatch2_reg_next(12);
        delayMatch2_reg(13) <= delayMatch2_reg_next(13);
        delayMatch2_reg(14) <= delayMatch2_reg_next(14);
        delayMatch2_reg(15) <= delayMatch2_reg_next(15);
        delayMatch2_reg(16) <= delayMatch2_reg_next(16);
        delayMatch2_reg(17) <= delayMatch2_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  SampleTime_div_Ld_1 <= delayMatch2_reg(17);
  delayMatch2_reg_next(0) <= SampleTime_div_Ld;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);
  delayMatch2_reg_next(6) <= delayMatch2_reg(5);
  delayMatch2_reg_next(7) <= delayMatch2_reg(6);
  delayMatch2_reg_next(8) <= delayMatch2_reg(7);
  delayMatch2_reg_next(9) <= delayMatch2_reg(8);
  delayMatch2_reg_next(10) <= delayMatch2_reg(9);
  delayMatch2_reg_next(11) <= delayMatch2_reg(10);
  delayMatch2_reg_next(12) <= delayMatch2_reg(11);
  delayMatch2_reg_next(13) <= delayMatch2_reg(12);
  delayMatch2_reg_next(14) <= delayMatch2_reg(13);
  delayMatch2_reg_next(15) <= delayMatch2_reg(14);
  delayMatch2_reg_next(16) <= delayMatch2_reg(15);
  delayMatch2_reg_next(17) <= delayMatch2_reg(16);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg(0) <= X"00000000";
        delayMatch_reg(1) <= X"00000000";
        delayMatch_reg(2) <= X"00000000";
        delayMatch_reg(3) <= X"00000000";
        delayMatch_reg(4) <= X"00000000";
        delayMatch_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  d_phase_voltage_per_switching_state_1 <= delayMatch_reg(5);
  delayMatch_reg_next(0) <= d_phase_voltage_per_switching_state;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= X"00000000";
        reduced_reg(1) <= X"00000000";
        reduced_reg(2) <= X"00000000";
        reduced_reg(3) <= X"00000000";
        reduced_reg(4) <= X"00000000";
        reduced_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
      END IF;
    END IF;
  END PROCESS reduced_process;

  iq_k_1_1 <= reduced_reg(5);
  reduced_reg_next(0) <= iq_k_1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg(0) <= X"00000000";
        delayMatch3_reg(1) <= X"00000000";
        delayMatch3_reg(2) <= X"00000000";
        delayMatch3_reg(3) <= X"00000000";
        delayMatch3_reg(4) <= X"00000000";
        delayMatch3_reg(5) <= X"00000000";
        delayMatch3_reg(6) <= X"00000000";
        delayMatch3_reg(7) <= X"00000000";
        delayMatch3_reg(8) <= X"00000000";
        delayMatch3_reg(9) <= X"00000000";
        delayMatch3_reg(10) <= X"00000000";
        delayMatch3_reg(11) <= X"00000000";
        delayMatch3_reg(12) <= X"00000000";
        delayMatch3_reg(13) <= X"00000000";
        delayMatch3_reg(14) <= X"00000000";
        delayMatch3_reg(15) <= X"00000000";
        delayMatch3_reg(16) <= X"00000000";
        delayMatch3_reg(17) <= X"00000000";
        delayMatch3_reg(18) <= X"00000000";
        delayMatch3_reg(19) <= X"00000000";
        delayMatch3_reg(20) <= X"00000000";
        delayMatch3_reg(21) <= X"00000000";
        delayMatch3_reg(22) <= X"00000000";
        delayMatch3_reg(23) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
        delayMatch3_reg(3) <= delayMatch3_reg_next(3);
        delayMatch3_reg(4) <= delayMatch3_reg_next(4);
        delayMatch3_reg(5) <= delayMatch3_reg_next(5);
        delayMatch3_reg(6) <= delayMatch3_reg_next(6);
        delayMatch3_reg(7) <= delayMatch3_reg_next(7);
        delayMatch3_reg(8) <= delayMatch3_reg_next(8);
        delayMatch3_reg(9) <= delayMatch3_reg_next(9);
        delayMatch3_reg(10) <= delayMatch3_reg_next(10);
        delayMatch3_reg(11) <= delayMatch3_reg_next(11);
        delayMatch3_reg(12) <= delayMatch3_reg_next(12);
        delayMatch3_reg(13) <= delayMatch3_reg_next(13);
        delayMatch3_reg(14) <= delayMatch3_reg_next(14);
        delayMatch3_reg(15) <= delayMatch3_reg_next(15);
        delayMatch3_reg(16) <= delayMatch3_reg_next(16);
        delayMatch3_reg(17) <= delayMatch3_reg_next(17);
        delayMatch3_reg(18) <= delayMatch3_reg_next(18);
        delayMatch3_reg(19) <= delayMatch3_reg_next(19);
        delayMatch3_reg(20) <= delayMatch3_reg_next(20);
        delayMatch3_reg(21) <= delayMatch3_reg_next(21);
        delayMatch3_reg(22) <= delayMatch3_reg_next(22);
        delayMatch3_reg(23) <= delayMatch3_reg_next(23);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  id_k_1_1 <= delayMatch3_reg(23);
  delayMatch3_reg_next(0) <= id_k_1;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);
  delayMatch3_reg_next(3) <= delayMatch3_reg(2);
  delayMatch3_reg_next(4) <= delayMatch3_reg(3);
  delayMatch3_reg_next(5) <= delayMatch3_reg(4);
  delayMatch3_reg_next(6) <= delayMatch3_reg(5);
  delayMatch3_reg_next(7) <= delayMatch3_reg(6);
  delayMatch3_reg_next(8) <= delayMatch3_reg(7);
  delayMatch3_reg_next(9) <= delayMatch3_reg(8);
  delayMatch3_reg_next(10) <= delayMatch3_reg(9);
  delayMatch3_reg_next(11) <= delayMatch3_reg(10);
  delayMatch3_reg_next(12) <= delayMatch3_reg(11);
  delayMatch3_reg_next(13) <= delayMatch3_reg(12);
  delayMatch3_reg_next(14) <= delayMatch3_reg(13);
  delayMatch3_reg_next(15) <= delayMatch3_reg(14);
  delayMatch3_reg_next(16) <= delayMatch3_reg(15);
  delayMatch3_reg_next(17) <= delayMatch3_reg(16);
  delayMatch3_reg_next(18) <= delayMatch3_reg(17);
  delayMatch3_reg_next(19) <= delayMatch3_reg(18);
  delayMatch3_reg_next(20) <= delayMatch3_reg(19);
  delayMatch3_reg_next(21) <= delayMatch3_reg(20);
  delayMatch3_reg_next(22) <= delayMatch3_reg(21);
  delayMatch3_reg_next(23) <= delayMatch3_reg(22);

  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch20_reg(0) <= X"00000000";
        delayMatch20_reg(1) <= X"00000000";
        delayMatch20_reg(2) <= X"00000000";
        delayMatch20_reg(3) <= X"00000000";
        delayMatch20_reg(4) <= X"00000000";
        delayMatch20_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch20_reg(0) <= delayMatch20_reg_next(0);
        delayMatch20_reg(1) <= delayMatch20_reg_next(1);
        delayMatch20_reg(2) <= delayMatch20_reg_next(2);
        delayMatch20_reg(3) <= delayMatch20_reg_next(3);
        delayMatch20_reg(4) <= delayMatch20_reg_next(4);
        delayMatch20_reg(5) <= delayMatch20_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch20_process;

  Out_1_1 <= delayMatch20_reg(5);
  delayMatch20_reg_next(0) <= Out_1;
  delayMatch20_reg_next(1) <= delayMatch20_reg(0);
  delayMatch20_reg_next(2) <= delayMatch20_reg(1);
  delayMatch20_reg_next(3) <= delayMatch20_reg(2);
  delayMatch20_reg_next(4) <= delayMatch20_reg(3);
  delayMatch20_reg_next(5) <= delayMatch20_reg(4);

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch11_reg(0) <= X"00000000";
        delayMatch11_reg(1) <= X"00000000";
        delayMatch11_reg(2) <= X"00000000";
        delayMatch11_reg(3) <= X"00000000";
        delayMatch11_reg(4) <= X"00000000";
        delayMatch11_reg(5) <= X"00000000";
        delayMatch11_reg(6) <= X"00000000";
        delayMatch11_reg(7) <= X"00000000";
        delayMatch11_reg(8) <= X"00000000";
        delayMatch11_reg(9) <= X"00000000";
        delayMatch11_reg(10) <= X"00000000";
        delayMatch11_reg(11) <= X"00000000";
        delayMatch11_reg(12) <= X"00000000";
        delayMatch11_reg(13) <= X"00000000";
        delayMatch11_reg(14) <= X"00000000";
        delayMatch11_reg(15) <= X"00000000";
        delayMatch11_reg(16) <= X"00000000";
        delayMatch11_reg(17) <= X"00000000";
        delayMatch11_reg(18) <= X"00000000";
        delayMatch11_reg(19) <= X"00000000";
        delayMatch11_reg(20) <= X"00000000";
        delayMatch11_reg(21) <= X"00000000";
        delayMatch11_reg(22) <= X"00000000";
        delayMatch11_reg(23) <= X"00000000";
        delayMatch11_reg(24) <= X"00000000";
        delayMatch11_reg(25) <= X"00000000";
        delayMatch11_reg(26) <= X"00000000";
        delayMatch11_reg(27) <= X"00000000";
        delayMatch11_reg(28) <= X"00000000";
        delayMatch11_reg(29) <= X"00000000";
        delayMatch11_reg(30) <= X"00000000";
        delayMatch11_reg(31) <= X"00000000";
        delayMatch11_reg(32) <= X"00000000";
        delayMatch11_reg(33) <= X"00000000";
        delayMatch11_reg(34) <= X"00000000";
        delayMatch11_reg(35) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
        delayMatch11_reg(2) <= delayMatch11_reg_next(2);
        delayMatch11_reg(3) <= delayMatch11_reg_next(3);
        delayMatch11_reg(4) <= delayMatch11_reg_next(4);
        delayMatch11_reg(5) <= delayMatch11_reg_next(5);
        delayMatch11_reg(6) <= delayMatch11_reg_next(6);
        delayMatch11_reg(7) <= delayMatch11_reg_next(7);
        delayMatch11_reg(8) <= delayMatch11_reg_next(8);
        delayMatch11_reg(9) <= delayMatch11_reg_next(9);
        delayMatch11_reg(10) <= delayMatch11_reg_next(10);
        delayMatch11_reg(11) <= delayMatch11_reg_next(11);
        delayMatch11_reg(12) <= delayMatch11_reg_next(12);
        delayMatch11_reg(13) <= delayMatch11_reg_next(13);
        delayMatch11_reg(14) <= delayMatch11_reg_next(14);
        delayMatch11_reg(15) <= delayMatch11_reg_next(15);
        delayMatch11_reg(16) <= delayMatch11_reg_next(16);
        delayMatch11_reg(17) <= delayMatch11_reg_next(17);
        delayMatch11_reg(18) <= delayMatch11_reg_next(18);
        delayMatch11_reg(19) <= delayMatch11_reg_next(19);
        delayMatch11_reg(20) <= delayMatch11_reg_next(20);
        delayMatch11_reg(21) <= delayMatch11_reg_next(21);
        delayMatch11_reg(22) <= delayMatch11_reg_next(22);
        delayMatch11_reg(23) <= delayMatch11_reg_next(23);
        delayMatch11_reg(24) <= delayMatch11_reg_next(24);
        delayMatch11_reg(25) <= delayMatch11_reg_next(25);
        delayMatch11_reg(26) <= delayMatch11_reg_next(26);
        delayMatch11_reg(27) <= delayMatch11_reg_next(27);
        delayMatch11_reg(28) <= delayMatch11_reg_next(28);
        delayMatch11_reg(29) <= delayMatch11_reg_next(29);
        delayMatch11_reg(30) <= delayMatch11_reg_next(30);
        delayMatch11_reg(31) <= delayMatch11_reg_next(31);
        delayMatch11_reg(32) <= delayMatch11_reg_next(32);
        delayMatch11_reg(33) <= delayMatch11_reg_next(33);
        delayMatch11_reg(34) <= delayMatch11_reg_next(34);
        delayMatch11_reg(35) <= delayMatch11_reg_next(35);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  iq_ref_1 <= delayMatch11_reg(35);
  delayMatch11_reg_next(0) <= iq_ref;
  delayMatch11_reg_next(1) <= delayMatch11_reg(0);
  delayMatch11_reg_next(2) <= delayMatch11_reg(1);
  delayMatch11_reg_next(3) <= delayMatch11_reg(2);
  delayMatch11_reg_next(4) <= delayMatch11_reg(3);
  delayMatch11_reg_next(5) <= delayMatch11_reg(4);
  delayMatch11_reg_next(6) <= delayMatch11_reg(5);
  delayMatch11_reg_next(7) <= delayMatch11_reg(6);
  delayMatch11_reg_next(8) <= delayMatch11_reg(7);
  delayMatch11_reg_next(9) <= delayMatch11_reg(8);
  delayMatch11_reg_next(10) <= delayMatch11_reg(9);
  delayMatch11_reg_next(11) <= delayMatch11_reg(10);
  delayMatch11_reg_next(12) <= delayMatch11_reg(11);
  delayMatch11_reg_next(13) <= delayMatch11_reg(12);
  delayMatch11_reg_next(14) <= delayMatch11_reg(13);
  delayMatch11_reg_next(15) <= delayMatch11_reg(14);
  delayMatch11_reg_next(16) <= delayMatch11_reg(15);
  delayMatch11_reg_next(17) <= delayMatch11_reg(16);
  delayMatch11_reg_next(18) <= delayMatch11_reg(17);
  delayMatch11_reg_next(19) <= delayMatch11_reg(18);
  delayMatch11_reg_next(20) <= delayMatch11_reg(19);
  delayMatch11_reg_next(21) <= delayMatch11_reg(20);
  delayMatch11_reg_next(22) <= delayMatch11_reg(21);
  delayMatch11_reg_next(23) <= delayMatch11_reg(22);
  delayMatch11_reg_next(24) <= delayMatch11_reg(23);
  delayMatch11_reg_next(25) <= delayMatch11_reg(24);
  delayMatch11_reg_next(26) <= delayMatch11_reg(25);
  delayMatch11_reg_next(27) <= delayMatch11_reg(26);
  delayMatch11_reg_next(28) <= delayMatch11_reg(27);
  delayMatch11_reg_next(29) <= delayMatch11_reg(28);
  delayMatch11_reg_next(30) <= delayMatch11_reg(29);
  delayMatch11_reg_next(31) <= delayMatch11_reg(30);
  delayMatch11_reg_next(32) <= delayMatch11_reg(31);
  delayMatch11_reg_next(33) <= delayMatch11_reg(32);
  delayMatch11_reg_next(34) <= delayMatch11_reg(33);
  delayMatch11_reg_next(35) <= delayMatch11_reg(34);

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch9_reg(0) <= X"00000000";
        delayMatch9_reg(1) <= X"00000000";
        delayMatch9_reg(2) <= X"00000000";
        delayMatch9_reg(3) <= X"00000000";
        delayMatch9_reg(4) <= X"00000000";
        delayMatch9_reg(5) <= X"00000000";
        delayMatch9_reg(6) <= X"00000000";
        delayMatch9_reg(7) <= X"00000000";
        delayMatch9_reg(8) <= X"00000000";
        delayMatch9_reg(9) <= X"00000000";
        delayMatch9_reg(10) <= X"00000000";
        delayMatch9_reg(11) <= X"00000000";
        delayMatch9_reg(12) <= X"00000000";
        delayMatch9_reg(13) <= X"00000000";
        delayMatch9_reg(14) <= X"00000000";
        delayMatch9_reg(15) <= X"00000000";
        delayMatch9_reg(16) <= X"00000000";
        delayMatch9_reg(17) <= X"00000000";
        delayMatch9_reg(18) <= X"00000000";
        delayMatch9_reg(19) <= X"00000000";
        delayMatch9_reg(20) <= X"00000000";
        delayMatch9_reg(21) <= X"00000000";
        delayMatch9_reg(22) <= X"00000000";
        delayMatch9_reg(23) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch9_reg(0) <= delayMatch9_reg_next(0);
        delayMatch9_reg(1) <= delayMatch9_reg_next(1);
        delayMatch9_reg(2) <= delayMatch9_reg_next(2);
        delayMatch9_reg(3) <= delayMatch9_reg_next(3);
        delayMatch9_reg(4) <= delayMatch9_reg_next(4);
        delayMatch9_reg(5) <= delayMatch9_reg_next(5);
        delayMatch9_reg(6) <= delayMatch9_reg_next(6);
        delayMatch9_reg(7) <= delayMatch9_reg_next(7);
        delayMatch9_reg(8) <= delayMatch9_reg_next(8);
        delayMatch9_reg(9) <= delayMatch9_reg_next(9);
        delayMatch9_reg(10) <= delayMatch9_reg_next(10);
        delayMatch9_reg(11) <= delayMatch9_reg_next(11);
        delayMatch9_reg(12) <= delayMatch9_reg_next(12);
        delayMatch9_reg(13) <= delayMatch9_reg_next(13);
        delayMatch9_reg(14) <= delayMatch9_reg_next(14);
        delayMatch9_reg(15) <= delayMatch9_reg_next(15);
        delayMatch9_reg(16) <= delayMatch9_reg_next(16);
        delayMatch9_reg(17) <= delayMatch9_reg_next(17);
        delayMatch9_reg(18) <= delayMatch9_reg_next(18);
        delayMatch9_reg(19) <= delayMatch9_reg_next(19);
        delayMatch9_reg(20) <= delayMatch9_reg_next(20);
        delayMatch9_reg(21) <= delayMatch9_reg_next(21);
        delayMatch9_reg(22) <= delayMatch9_reg_next(22);
        delayMatch9_reg(23) <= delayMatch9_reg_next(23);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  SampleTime_div_Lq_1 <= delayMatch9_reg(23);
  delayMatch9_reg_next(0) <= SampleTime_div_Lq;
  delayMatch9_reg_next(1) <= delayMatch9_reg(0);
  delayMatch9_reg_next(2) <= delayMatch9_reg(1);
  delayMatch9_reg_next(3) <= delayMatch9_reg(2);
  delayMatch9_reg_next(4) <= delayMatch9_reg(3);
  delayMatch9_reg_next(5) <= delayMatch9_reg(4);
  delayMatch9_reg_next(6) <= delayMatch9_reg(5);
  delayMatch9_reg_next(7) <= delayMatch9_reg(6);
  delayMatch9_reg_next(8) <= delayMatch9_reg(7);
  delayMatch9_reg_next(9) <= delayMatch9_reg(8);
  delayMatch9_reg_next(10) <= delayMatch9_reg(9);
  delayMatch9_reg_next(11) <= delayMatch9_reg(10);
  delayMatch9_reg_next(12) <= delayMatch9_reg(11);
  delayMatch9_reg_next(13) <= delayMatch9_reg(12);
  delayMatch9_reg_next(14) <= delayMatch9_reg(13);
  delayMatch9_reg_next(15) <= delayMatch9_reg(14);
  delayMatch9_reg_next(16) <= delayMatch9_reg(15);
  delayMatch9_reg_next(17) <= delayMatch9_reg(16);
  delayMatch9_reg_next(18) <= delayMatch9_reg(17);
  delayMatch9_reg_next(19) <= delayMatch9_reg(18);
  delayMatch9_reg_next(20) <= delayMatch9_reg(19);
  delayMatch9_reg_next(21) <= delayMatch9_reg(20);
  delayMatch9_reg_next(22) <= delayMatch9_reg(21);
  delayMatch9_reg_next(23) <= delayMatch9_reg(22);

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= X"00000000";
        delayMatch6_reg(1) <= X"00000000";
        delayMatch6_reg(2) <= X"00000000";
        delayMatch6_reg(3) <= X"00000000";
        delayMatch6_reg(4) <= X"00000000";
        delayMatch6_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  q_phase_voltage_per_switching_state_1 <= delayMatch6_reg(5);
  delayMatch6_reg_next(0) <= q_phase_voltage_per_switching_state;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);
  delayMatch6_reg_next(5) <= delayMatch6_reg(4);

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg(0) <= X"00000000";
        delayMatch8_reg(1) <= X"00000000";
        delayMatch8_reg(2) <= X"00000000";
        delayMatch8_reg(3) <= X"00000000";
        delayMatch8_reg(4) <= X"00000000";
        delayMatch8_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
        delayMatch8_reg(2) <= delayMatch8_reg_next(2);
        delayMatch8_reg(3) <= delayMatch8_reg_next(3);
        delayMatch8_reg(4) <= delayMatch8_reg_next(4);
        delayMatch8_reg(5) <= delayMatch8_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  out0_9 <= delayMatch8_reg(5);
  delayMatch8_reg_next(0) <= out0_8;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);
  delayMatch8_reg_next(2) <= delayMatch8_reg(1);
  delayMatch8_reg_next(3) <= delayMatch8_reg(2);
  delayMatch8_reg_next(4) <= delayMatch8_reg(3);
  delayMatch8_reg_next(5) <= delayMatch8_reg(4);

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch7_reg(0) <= X"00000000";
        delayMatch7_reg(1) <= X"00000000";
        delayMatch7_reg(2) <= X"00000000";
        delayMatch7_reg(3) <= X"00000000";
        delayMatch7_reg(4) <= X"00000000";
        delayMatch7_reg(5) <= X"00000000";
        delayMatch7_reg(6) <= X"00000000";
        delayMatch7_reg(7) <= X"00000000";
        delayMatch7_reg(8) <= X"00000000";
        delayMatch7_reg(9) <= X"00000000";
        delayMatch7_reg(10) <= X"00000000";
        delayMatch7_reg(11) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch7_reg(0) <= delayMatch7_reg_next(0);
        delayMatch7_reg(1) <= delayMatch7_reg_next(1);
        delayMatch7_reg(2) <= delayMatch7_reg_next(2);
        delayMatch7_reg(3) <= delayMatch7_reg_next(3);
        delayMatch7_reg(4) <= delayMatch7_reg_next(4);
        delayMatch7_reg(5) <= delayMatch7_reg_next(5);
        delayMatch7_reg(6) <= delayMatch7_reg_next(6);
        delayMatch7_reg(7) <= delayMatch7_reg_next(7);
        delayMatch7_reg(8) <= delayMatch7_reg_next(8);
        delayMatch7_reg(9) <= delayMatch7_reg_next(9);
        delayMatch7_reg(10) <= delayMatch7_reg_next(10);
        delayMatch7_reg(11) <= delayMatch7_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  omega_el_1 <= delayMatch7_reg(11);
  delayMatch7_reg_next(0) <= omega_el;
  delayMatch7_reg_next(1) <= delayMatch7_reg(0);
  delayMatch7_reg_next(2) <= delayMatch7_reg(1);
  delayMatch7_reg_next(3) <= delayMatch7_reg(2);
  delayMatch7_reg_next(4) <= delayMatch7_reg(3);
  delayMatch7_reg_next(5) <= delayMatch7_reg(4);
  delayMatch7_reg_next(6) <= delayMatch7_reg(5);
  delayMatch7_reg_next(7) <= delayMatch7_reg(6);
  delayMatch7_reg_next(8) <= delayMatch7_reg(7);
  delayMatch7_reg_next(9) <= delayMatch7_reg(8);
  delayMatch7_reg_next(10) <= delayMatch7_reg(9);
  delayMatch7_reg_next(11) <= delayMatch7_reg(10);

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch5_reg(0) <= X"00000000";
        delayMatch5_reg(1) <= X"00000000";
        delayMatch5_reg(2) <= X"00000000";
        delayMatch5_reg(3) <= X"00000000";
        delayMatch5_reg(4) <= X"00000000";
        delayMatch5_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= delayMatch5_reg_next(0);
        delayMatch5_reg(1) <= delayMatch5_reg_next(1);
        delayMatch5_reg(2) <= delayMatch5_reg_next(2);
        delayMatch5_reg(3) <= delayMatch5_reg_next(3);
        delayMatch5_reg(4) <= delayMatch5_reg_next(4);
        delayMatch5_reg(5) <= delayMatch5_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  psiPM_1 <= delayMatch5_reg(5);
  delayMatch5_reg_next(0) <= psiPM;
  delayMatch5_reg_next(1) <= delayMatch5_reg(0);
  delayMatch5_reg_next(2) <= delayMatch5_reg(1);
  delayMatch5_reg_next(3) <= delayMatch5_reg(2);
  delayMatch5_reg_next(4) <= delayMatch5_reg(3);
  delayMatch5_reg_next(5) <= delayMatch5_reg(4);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= X"00000000";
        reduced_reg_1(1) <= X"00000000";
        reduced_reg_1(2) <= X"00000000";
        reduced_reg_1(3) <= X"00000000";
        reduced_reg_1(4) <= X"00000000";
        reduced_reg_1(5) <= X"00000000";
        reduced_reg_1(6) <= X"00000000";
        reduced_reg_1(7) <= X"00000000";
        reduced_reg_1(8) <= X"00000000";
        reduced_reg_1(9) <= X"00000000";
        reduced_reg_1(10) <= X"00000000";
        reduced_reg_1(11) <= X"00000000";
        reduced_reg_1(12) <= X"00000000";
        reduced_reg_1(13) <= X"00000000";
        reduced_reg_1(14) <= X"00000000";
        reduced_reg_1(15) <= X"00000000";
        reduced_reg_1(16) <= X"00000000";
        reduced_reg_1(17) <= X"00000000";
        reduced_reg_1(18) <= X"00000000";
        reduced_reg_1(19) <= X"00000000";
        reduced_reg_1(20) <= X"00000000";
        reduced_reg_1(21) <= X"00000000";
        reduced_reg_1(22) <= X"00000000";
        reduced_reg_1(23) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
        reduced_reg_1(4) <= reduced_reg_next_1(4);
        reduced_reg_1(5) <= reduced_reg_next_1(5);
        reduced_reg_1(6) <= reduced_reg_next_1(6);
        reduced_reg_1(7) <= reduced_reg_next_1(7);
        reduced_reg_1(8) <= reduced_reg_next_1(8);
        reduced_reg_1(9) <= reduced_reg_next_1(9);
        reduced_reg_1(10) <= reduced_reg_next_1(10);
        reduced_reg_1(11) <= reduced_reg_next_1(11);
        reduced_reg_1(12) <= reduced_reg_next_1(12);
        reduced_reg_1(13) <= reduced_reg_next_1(13);
        reduced_reg_1(14) <= reduced_reg_next_1(14);
        reduced_reg_1(15) <= reduced_reg_next_1(15);
        reduced_reg_1(16) <= reduced_reg_next_1(16);
        reduced_reg_1(17) <= reduced_reg_next_1(17);
        reduced_reg_1(18) <= reduced_reg_next_1(18);
        reduced_reg_1(19) <= reduced_reg_next_1(19);
        reduced_reg_1(20) <= reduced_reg_next_1(20);
        reduced_reg_1(21) <= reduced_reg_next_1(21);
        reduced_reg_1(22) <= reduced_reg_next_1(22);
        reduced_reg_1(23) <= reduced_reg_next_1(23);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  iq_k_1_2 <= reduced_reg_1(23);
  reduced_reg_next_1(0) <= iq_k_1_1;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);
  reduced_reg_next_1(4) <= reduced_reg_1(3);
  reduced_reg_next_1(5) <= reduced_reg_1(4);
  reduced_reg_next_1(6) <= reduced_reg_1(5);
  reduced_reg_next_1(7) <= reduced_reg_1(6);
  reduced_reg_next_1(8) <= reduced_reg_1(7);
  reduced_reg_next_1(9) <= reduced_reg_1(8);
  reduced_reg_next_1(10) <= reduced_reg_1(9);
  reduced_reg_next_1(11) <= reduced_reg_1(10);
  reduced_reg_next_1(12) <= reduced_reg_1(11);
  reduced_reg_next_1(13) <= reduced_reg_1(12);
  reduced_reg_next_1(14) <= reduced_reg_1(13);
  reduced_reg_next_1(15) <= reduced_reg_1(14);
  reduced_reg_next_1(16) <= reduced_reg_1(15);
  reduced_reg_next_1(17) <= reduced_reg_1(16);
  reduced_reg_next_1(18) <= reduced_reg_1(17);
  reduced_reg_next_1(19) <= reduced_reg_1(18);
  reduced_reg_next_1(20) <= reduced_reg_1(19);
  reduced_reg_next_1(21) <= reduced_reg_1(20);
  reduced_reg_next_1(22) <= reduced_reg_1(21);
  reduced_reg_next_1(23) <= reduced_reg_1(22);

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= X"00000000";
        delayMatch15_reg(1) <= X"00000000";
        delayMatch15_reg(2) <= X"00000000";
        delayMatch15_reg(3) <= X"00000000";
        delayMatch15_reg(4) <= X"00000000";
        delayMatch15_reg(5) <= X"00000000";
        delayMatch15_reg(6) <= X"00000000";
        delayMatch15_reg(7) <= X"00000000";
        delayMatch15_reg(8) <= X"00000000";
        delayMatch15_reg(9) <= X"00000000";
        delayMatch15_reg(10) <= X"00000000";
        delayMatch15_reg(11) <= X"00000000";
        delayMatch15_reg(12) <= X"00000000";
        delayMatch15_reg(13) <= X"00000000";
        delayMatch15_reg(14) <= X"00000000";
        delayMatch15_reg(15) <= X"00000000";
        delayMatch15_reg(16) <= X"00000000";
        delayMatch15_reg(17) <= X"00000000";
        delayMatch15_reg(18) <= X"00000000";
        delayMatch15_reg(19) <= X"00000000";
        delayMatch15_reg(20) <= X"00000000";
        delayMatch15_reg(21) <= X"00000000";
        delayMatch15_reg(22) <= X"00000000";
        delayMatch15_reg(23) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
        delayMatch15_reg(3) <= delayMatch15_reg_next(3);
        delayMatch15_reg(4) <= delayMatch15_reg_next(4);
        delayMatch15_reg(5) <= delayMatch15_reg_next(5);
        delayMatch15_reg(6) <= delayMatch15_reg_next(6);
        delayMatch15_reg(7) <= delayMatch15_reg_next(7);
        delayMatch15_reg(8) <= delayMatch15_reg_next(8);
        delayMatch15_reg(9) <= delayMatch15_reg_next(9);
        delayMatch15_reg(10) <= delayMatch15_reg_next(10);
        delayMatch15_reg(11) <= delayMatch15_reg_next(11);
        delayMatch15_reg(12) <= delayMatch15_reg_next(12);
        delayMatch15_reg(13) <= delayMatch15_reg_next(13);
        delayMatch15_reg(14) <= delayMatch15_reg_next(14);
        delayMatch15_reg(15) <= delayMatch15_reg_next(15);
        delayMatch15_reg(16) <= delayMatch15_reg_next(16);
        delayMatch15_reg(17) <= delayMatch15_reg_next(17);
        delayMatch15_reg(18) <= delayMatch15_reg_next(18);
        delayMatch15_reg(19) <= delayMatch15_reg_next(19);
        delayMatch15_reg(20) <= delayMatch15_reg_next(20);
        delayMatch15_reg(21) <= delayMatch15_reg_next(21);
        delayMatch15_reg(22) <= delayMatch15_reg_next(22);
        delayMatch15_reg(23) <= delayMatch15_reg_next(23);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  ix_ref_1 <= delayMatch15_reg(23);
  delayMatch15_reg_next(0) <= ix_ref;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);
  delayMatch15_reg_next(3) <= delayMatch15_reg(2);
  delayMatch15_reg_next(4) <= delayMatch15_reg(3);
  delayMatch15_reg_next(5) <= delayMatch15_reg(4);
  delayMatch15_reg_next(6) <= delayMatch15_reg(5);
  delayMatch15_reg_next(7) <= delayMatch15_reg(6);
  delayMatch15_reg_next(8) <= delayMatch15_reg(7);
  delayMatch15_reg_next(9) <= delayMatch15_reg(8);
  delayMatch15_reg_next(10) <= delayMatch15_reg(9);
  delayMatch15_reg_next(11) <= delayMatch15_reg(10);
  delayMatch15_reg_next(12) <= delayMatch15_reg(11);
  delayMatch15_reg_next(13) <= delayMatch15_reg(12);
  delayMatch15_reg_next(14) <= delayMatch15_reg(13);
  delayMatch15_reg_next(15) <= delayMatch15_reg(14);
  delayMatch15_reg_next(16) <= delayMatch15_reg(15);
  delayMatch15_reg_next(17) <= delayMatch15_reg(16);
  delayMatch15_reg_next(18) <= delayMatch15_reg(17);
  delayMatch15_reg_next(19) <= delayMatch15_reg(18);
  delayMatch15_reg_next(20) <= delayMatch15_reg(19);
  delayMatch15_reg_next(21) <= delayMatch15_reg(20);
  delayMatch15_reg_next(22) <= delayMatch15_reg(21);
  delayMatch15_reg_next(23) <= delayMatch15_reg(22);

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_reg(0) <= X"00000000";
        delayMatch13_reg(1) <= X"00000000";
        delayMatch13_reg(2) <= X"00000000";
        delayMatch13_reg(3) <= X"00000000";
        delayMatch13_reg(4) <= X"00000000";
        delayMatch13_reg(5) <= X"00000000";
        delayMatch13_reg(6) <= X"00000000";
        delayMatch13_reg(7) <= X"00000000";
        delayMatch13_reg(8) <= X"00000000";
        delayMatch13_reg(9) <= X"00000000";
        delayMatch13_reg(10) <= X"00000000";
        delayMatch13_reg(11) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch13_reg(0) <= delayMatch13_reg_next(0);
        delayMatch13_reg(1) <= delayMatch13_reg_next(1);
        delayMatch13_reg(2) <= delayMatch13_reg_next(2);
        delayMatch13_reg(3) <= delayMatch13_reg_next(3);
        delayMatch13_reg(4) <= delayMatch13_reg_next(4);
        delayMatch13_reg(5) <= delayMatch13_reg_next(5);
        delayMatch13_reg(6) <= delayMatch13_reg_next(6);
        delayMatch13_reg(7) <= delayMatch13_reg_next(7);
        delayMatch13_reg(8) <= delayMatch13_reg_next(8);
        delayMatch13_reg(9) <= delayMatch13_reg_next(9);
        delayMatch13_reg(10) <= delayMatch13_reg_next(10);
        delayMatch13_reg(11) <= delayMatch13_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  SampleTime_div_Lx_1 <= delayMatch13_reg(11);
  delayMatch13_reg_next(0) <= SampleTime_div_Lx;
  delayMatch13_reg_next(1) <= delayMatch13_reg(0);
  delayMatch13_reg_next(2) <= delayMatch13_reg(1);
  delayMatch13_reg_next(3) <= delayMatch13_reg(2);
  delayMatch13_reg_next(4) <= delayMatch13_reg(3);
  delayMatch13_reg_next(5) <= delayMatch13_reg(4);
  delayMatch13_reg_next(6) <= delayMatch13_reg(5);
  delayMatch13_reg_next(7) <= delayMatch13_reg(6);
  delayMatch13_reg_next(8) <= delayMatch13_reg(7);
  delayMatch13_reg_next(9) <= delayMatch13_reg(8);
  delayMatch13_reg_next(10) <= delayMatch13_reg(9);
  delayMatch13_reg_next(11) <= delayMatch13_reg(10);

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch12_reg(0) <= X"00000000";
        delayMatch12_reg(1) <= X"00000000";
        delayMatch12_reg(2) <= X"00000000";
        delayMatch12_reg(3) <= X"00000000";
        delayMatch12_reg(4) <= X"00000000";
        delayMatch12_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch12_reg(0) <= delayMatch12_reg_next(0);
        delayMatch12_reg(1) <= delayMatch12_reg_next(1);
        delayMatch12_reg(2) <= delayMatch12_reg_next(2);
        delayMatch12_reg(3) <= delayMatch12_reg_next(3);
        delayMatch12_reg(4) <= delayMatch12_reg_next(4);
        delayMatch12_reg(5) <= delayMatch12_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  x_phase_voltage_per_switching_state_1 <= delayMatch12_reg(5);
  delayMatch12_reg_next(0) <= x_phase_voltage_per_switching_state;
  delayMatch12_reg_next(1) <= delayMatch12_reg(0);
  delayMatch12_reg_next(2) <= delayMatch12_reg(1);
  delayMatch12_reg_next(3) <= delayMatch12_reg(2);
  delayMatch12_reg_next(4) <= delayMatch12_reg(3);
  delayMatch12_reg_next(5) <= delayMatch12_reg(4);

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch14_reg(0) <= X"00000000";
        delayMatch14_reg(1) <= X"00000000";
        delayMatch14_reg(2) <= X"00000000";
        delayMatch14_reg(3) <= X"00000000";
        delayMatch14_reg(4) <= X"00000000";
        delayMatch14_reg(5) <= X"00000000";
        delayMatch14_reg(6) <= X"00000000";
        delayMatch14_reg(7) <= X"00000000";
        delayMatch14_reg(8) <= X"00000000";
        delayMatch14_reg(9) <= X"00000000";
        delayMatch14_reg(10) <= X"00000000";
        delayMatch14_reg(11) <= X"00000000";
        delayMatch14_reg(12) <= X"00000000";
        delayMatch14_reg(13) <= X"00000000";
        delayMatch14_reg(14) <= X"00000000";
        delayMatch14_reg(15) <= X"00000000";
        delayMatch14_reg(16) <= X"00000000";
        delayMatch14_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
        delayMatch14_reg(3) <= delayMatch14_reg_next(3);
        delayMatch14_reg(4) <= delayMatch14_reg_next(4);
        delayMatch14_reg(5) <= delayMatch14_reg_next(5);
        delayMatch14_reg(6) <= delayMatch14_reg_next(6);
        delayMatch14_reg(7) <= delayMatch14_reg_next(7);
        delayMatch14_reg(8) <= delayMatch14_reg_next(8);
        delayMatch14_reg(9) <= delayMatch14_reg_next(9);
        delayMatch14_reg(10) <= delayMatch14_reg_next(10);
        delayMatch14_reg(11) <= delayMatch14_reg_next(11);
        delayMatch14_reg(12) <= delayMatch14_reg_next(12);
        delayMatch14_reg(13) <= delayMatch14_reg_next(13);
        delayMatch14_reg(14) <= delayMatch14_reg_next(14);
        delayMatch14_reg(15) <= delayMatch14_reg_next(15);
        delayMatch14_reg(16) <= delayMatch14_reg_next(16);
        delayMatch14_reg(17) <= delayMatch14_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  ix_k_1_1 <= delayMatch14_reg(17);
  delayMatch14_reg_next(0) <= ix_k_1;
  delayMatch14_reg_next(1) <= delayMatch14_reg(0);
  delayMatch14_reg_next(2) <= delayMatch14_reg(1);
  delayMatch14_reg_next(3) <= delayMatch14_reg(2);
  delayMatch14_reg_next(4) <= delayMatch14_reg(3);
  delayMatch14_reg_next(5) <= delayMatch14_reg(4);
  delayMatch14_reg_next(6) <= delayMatch14_reg(5);
  delayMatch14_reg_next(7) <= delayMatch14_reg(6);
  delayMatch14_reg_next(8) <= delayMatch14_reg(7);
  delayMatch14_reg_next(9) <= delayMatch14_reg(8);
  delayMatch14_reg_next(10) <= delayMatch14_reg(9);
  delayMatch14_reg_next(11) <= delayMatch14_reg(10);
  delayMatch14_reg_next(12) <= delayMatch14_reg(11);
  delayMatch14_reg_next(13) <= delayMatch14_reg(12);
  delayMatch14_reg_next(14) <= delayMatch14_reg(13);
  delayMatch14_reg_next(15) <= delayMatch14_reg(14);
  delayMatch14_reg_next(16) <= delayMatch14_reg(15);
  delayMatch14_reg_next(17) <= delayMatch14_reg(16);

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch21_reg(0) <= X"00000000";
        delayMatch21_reg(1) <= X"00000000";
        delayMatch21_reg(2) <= X"00000000";
        delayMatch21_reg(3) <= X"00000000";
        delayMatch21_reg(4) <= X"00000000";
        delayMatch21_reg(5) <= X"00000000";
        delayMatch21_reg(6) <= X"00000000";
        delayMatch21_reg(7) <= X"00000000";
        delayMatch21_reg(8) <= X"00000000";
        delayMatch21_reg(9) <= X"00000000";
        delayMatch21_reg(10) <= X"00000000";
        delayMatch21_reg(11) <= X"00000000";
        delayMatch21_reg(12) <= X"00000000";
        delayMatch21_reg(13) <= X"00000000";
        delayMatch21_reg(14) <= X"00000000";
        delayMatch21_reg(15) <= X"00000000";
        delayMatch21_reg(16) <= X"00000000";
        delayMatch21_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch21_reg(0) <= delayMatch21_reg_next(0);
        delayMatch21_reg(1) <= delayMatch21_reg_next(1);
        delayMatch21_reg(2) <= delayMatch21_reg_next(2);
        delayMatch21_reg(3) <= delayMatch21_reg_next(3);
        delayMatch21_reg(4) <= delayMatch21_reg_next(4);
        delayMatch21_reg(5) <= delayMatch21_reg_next(5);
        delayMatch21_reg(6) <= delayMatch21_reg_next(6);
        delayMatch21_reg(7) <= delayMatch21_reg_next(7);
        delayMatch21_reg(8) <= delayMatch21_reg_next(8);
        delayMatch21_reg(9) <= delayMatch21_reg_next(9);
        delayMatch21_reg(10) <= delayMatch21_reg_next(10);
        delayMatch21_reg(11) <= delayMatch21_reg_next(11);
        delayMatch21_reg(12) <= delayMatch21_reg_next(12);
        delayMatch21_reg(13) <= delayMatch21_reg_next(13);
        delayMatch21_reg(14) <= delayMatch21_reg_next(14);
        delayMatch21_reg(15) <= delayMatch21_reg_next(15);
        delayMatch21_reg(16) <= delayMatch21_reg_next(16);
        delayMatch21_reg(17) <= delayMatch21_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  Out_1_4 <= delayMatch21_reg(17);
  delayMatch21_reg_next(0) <= Out_1_3;
  delayMatch21_reg_next(1) <= delayMatch21_reg(0);
  delayMatch21_reg_next(2) <= delayMatch21_reg(1);
  delayMatch21_reg_next(3) <= delayMatch21_reg(2);
  delayMatch21_reg_next(4) <= delayMatch21_reg(3);
  delayMatch21_reg_next(5) <= delayMatch21_reg(4);
  delayMatch21_reg_next(6) <= delayMatch21_reg(5);
  delayMatch21_reg_next(7) <= delayMatch21_reg(6);
  delayMatch21_reg_next(8) <= delayMatch21_reg(7);
  delayMatch21_reg_next(9) <= delayMatch21_reg(8);
  delayMatch21_reg_next(10) <= delayMatch21_reg(9);
  delayMatch21_reg_next(11) <= delayMatch21_reg(10);
  delayMatch21_reg_next(12) <= delayMatch21_reg(11);
  delayMatch21_reg_next(13) <= delayMatch21_reg(12);
  delayMatch21_reg_next(14) <= delayMatch21_reg(13);
  delayMatch21_reg_next(15) <= delayMatch21_reg(14);
  delayMatch21_reg_next(16) <= delayMatch21_reg(15);
  delayMatch21_reg_next(17) <= delayMatch21_reg(16);

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch19_reg(0) <= X"00000000";
        delayMatch19_reg(1) <= X"00000000";
        delayMatch19_reg(2) <= X"00000000";
        delayMatch19_reg(3) <= X"00000000";
        delayMatch19_reg(4) <= X"00000000";
        delayMatch19_reg(5) <= X"00000000";
        delayMatch19_reg(6) <= X"00000000";
        delayMatch19_reg(7) <= X"00000000";
        delayMatch19_reg(8) <= X"00000000";
        delayMatch19_reg(9) <= X"00000000";
        delayMatch19_reg(10) <= X"00000000";
        delayMatch19_reg(11) <= X"00000000";
        delayMatch19_reg(12) <= X"00000000";
        delayMatch19_reg(13) <= X"00000000";
        delayMatch19_reg(14) <= X"00000000";
        delayMatch19_reg(15) <= X"00000000";
        delayMatch19_reg(16) <= X"00000000";
        delayMatch19_reg(17) <= X"00000000";
        delayMatch19_reg(18) <= X"00000000";
        delayMatch19_reg(19) <= X"00000000";
        delayMatch19_reg(20) <= X"00000000";
        delayMatch19_reg(21) <= X"00000000";
        delayMatch19_reg(22) <= X"00000000";
        delayMatch19_reg(23) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch19_reg(0) <= delayMatch19_reg_next(0);
        delayMatch19_reg(1) <= delayMatch19_reg_next(1);
        delayMatch19_reg(2) <= delayMatch19_reg_next(2);
        delayMatch19_reg(3) <= delayMatch19_reg_next(3);
        delayMatch19_reg(4) <= delayMatch19_reg_next(4);
        delayMatch19_reg(5) <= delayMatch19_reg_next(5);
        delayMatch19_reg(6) <= delayMatch19_reg_next(6);
        delayMatch19_reg(7) <= delayMatch19_reg_next(7);
        delayMatch19_reg(8) <= delayMatch19_reg_next(8);
        delayMatch19_reg(9) <= delayMatch19_reg_next(9);
        delayMatch19_reg(10) <= delayMatch19_reg_next(10);
        delayMatch19_reg(11) <= delayMatch19_reg_next(11);
        delayMatch19_reg(12) <= delayMatch19_reg_next(12);
        delayMatch19_reg(13) <= delayMatch19_reg_next(13);
        delayMatch19_reg(14) <= delayMatch19_reg_next(14);
        delayMatch19_reg(15) <= delayMatch19_reg_next(15);
        delayMatch19_reg(16) <= delayMatch19_reg_next(16);
        delayMatch19_reg(17) <= delayMatch19_reg_next(17);
        delayMatch19_reg(18) <= delayMatch19_reg_next(18);
        delayMatch19_reg(19) <= delayMatch19_reg_next(19);
        delayMatch19_reg(20) <= delayMatch19_reg_next(20);
        delayMatch19_reg(21) <= delayMatch19_reg_next(21);
        delayMatch19_reg(22) <= delayMatch19_reg_next(22);
        delayMatch19_reg(23) <= delayMatch19_reg_next(23);
      END IF;
    END IF;
  END PROCESS delayMatch19_process;

  iy_ref_1 <= delayMatch19_reg(23);
  delayMatch19_reg_next(0) <= iy_ref;
  delayMatch19_reg_next(1) <= delayMatch19_reg(0);
  delayMatch19_reg_next(2) <= delayMatch19_reg(1);
  delayMatch19_reg_next(3) <= delayMatch19_reg(2);
  delayMatch19_reg_next(4) <= delayMatch19_reg(3);
  delayMatch19_reg_next(5) <= delayMatch19_reg(4);
  delayMatch19_reg_next(6) <= delayMatch19_reg(5);
  delayMatch19_reg_next(7) <= delayMatch19_reg(6);
  delayMatch19_reg_next(8) <= delayMatch19_reg(7);
  delayMatch19_reg_next(9) <= delayMatch19_reg(8);
  delayMatch19_reg_next(10) <= delayMatch19_reg(9);
  delayMatch19_reg_next(11) <= delayMatch19_reg(10);
  delayMatch19_reg_next(12) <= delayMatch19_reg(11);
  delayMatch19_reg_next(13) <= delayMatch19_reg(12);
  delayMatch19_reg_next(14) <= delayMatch19_reg(13);
  delayMatch19_reg_next(15) <= delayMatch19_reg(14);
  delayMatch19_reg_next(16) <= delayMatch19_reg(15);
  delayMatch19_reg_next(17) <= delayMatch19_reg(16);
  delayMatch19_reg_next(18) <= delayMatch19_reg(17);
  delayMatch19_reg_next(19) <= delayMatch19_reg(18);
  delayMatch19_reg_next(20) <= delayMatch19_reg(19);
  delayMatch19_reg_next(21) <= delayMatch19_reg(20);
  delayMatch19_reg_next(22) <= delayMatch19_reg(21);
  delayMatch19_reg_next(23) <= delayMatch19_reg(22);

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch17_reg(0) <= X"00000000";
        delayMatch17_reg(1) <= X"00000000";
        delayMatch17_reg(2) <= X"00000000";
        delayMatch17_reg(3) <= X"00000000";
        delayMatch17_reg(4) <= X"00000000";
        delayMatch17_reg(5) <= X"00000000";
        delayMatch17_reg(6) <= X"00000000";
        delayMatch17_reg(7) <= X"00000000";
        delayMatch17_reg(8) <= X"00000000";
        delayMatch17_reg(9) <= X"00000000";
        delayMatch17_reg(10) <= X"00000000";
        delayMatch17_reg(11) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch17_reg(0) <= delayMatch17_reg_next(0);
        delayMatch17_reg(1) <= delayMatch17_reg_next(1);
        delayMatch17_reg(2) <= delayMatch17_reg_next(2);
        delayMatch17_reg(3) <= delayMatch17_reg_next(3);
        delayMatch17_reg(4) <= delayMatch17_reg_next(4);
        delayMatch17_reg(5) <= delayMatch17_reg_next(5);
        delayMatch17_reg(6) <= delayMatch17_reg_next(6);
        delayMatch17_reg(7) <= delayMatch17_reg_next(7);
        delayMatch17_reg(8) <= delayMatch17_reg_next(8);
        delayMatch17_reg(9) <= delayMatch17_reg_next(9);
        delayMatch17_reg(10) <= delayMatch17_reg_next(10);
        delayMatch17_reg(11) <= delayMatch17_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  SampleTime_div_Ly_1 <= delayMatch17_reg(11);
  delayMatch17_reg_next(0) <= SampleTime_div_Ly;
  delayMatch17_reg_next(1) <= delayMatch17_reg(0);
  delayMatch17_reg_next(2) <= delayMatch17_reg(1);
  delayMatch17_reg_next(3) <= delayMatch17_reg(2);
  delayMatch17_reg_next(4) <= delayMatch17_reg(3);
  delayMatch17_reg_next(5) <= delayMatch17_reg(4);
  delayMatch17_reg_next(6) <= delayMatch17_reg(5);
  delayMatch17_reg_next(7) <= delayMatch17_reg(6);
  delayMatch17_reg_next(8) <= delayMatch17_reg(7);
  delayMatch17_reg_next(9) <= delayMatch17_reg(8);
  delayMatch17_reg_next(10) <= delayMatch17_reg(9);
  delayMatch17_reg_next(11) <= delayMatch17_reg(10);

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch16_reg(0) <= X"00000000";
        delayMatch16_reg(1) <= X"00000000";
        delayMatch16_reg(2) <= X"00000000";
        delayMatch16_reg(3) <= X"00000000";
        delayMatch16_reg(4) <= X"00000000";
        delayMatch16_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch16_reg(0) <= delayMatch16_reg_next(0);
        delayMatch16_reg(1) <= delayMatch16_reg_next(1);
        delayMatch16_reg(2) <= delayMatch16_reg_next(2);
        delayMatch16_reg(3) <= delayMatch16_reg_next(3);
        delayMatch16_reg(4) <= delayMatch16_reg_next(4);
        delayMatch16_reg(5) <= delayMatch16_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  y_phase_voltage_per_switching_state_1 <= delayMatch16_reg(5);
  delayMatch16_reg_next(0) <= y_phase_voltage_per_switching_state;
  delayMatch16_reg_next(1) <= delayMatch16_reg(0);
  delayMatch16_reg_next(2) <= delayMatch16_reg(1);
  delayMatch16_reg_next(3) <= delayMatch16_reg(2);
  delayMatch16_reg_next(4) <= delayMatch16_reg(3);
  delayMatch16_reg_next(5) <= delayMatch16_reg(4);

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch18_reg(0) <= X"00000000";
        delayMatch18_reg(1) <= X"00000000";
        delayMatch18_reg(2) <= X"00000000";
        delayMatch18_reg(3) <= X"00000000";
        delayMatch18_reg(4) <= X"00000000";
        delayMatch18_reg(5) <= X"00000000";
        delayMatch18_reg(6) <= X"00000000";
        delayMatch18_reg(7) <= X"00000000";
        delayMatch18_reg(8) <= X"00000000";
        delayMatch18_reg(9) <= X"00000000";
        delayMatch18_reg(10) <= X"00000000";
        delayMatch18_reg(11) <= X"00000000";
        delayMatch18_reg(12) <= X"00000000";
        delayMatch18_reg(13) <= X"00000000";
        delayMatch18_reg(14) <= X"00000000";
        delayMatch18_reg(15) <= X"00000000";
        delayMatch18_reg(16) <= X"00000000";
        delayMatch18_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch18_reg(0) <= delayMatch18_reg_next(0);
        delayMatch18_reg(1) <= delayMatch18_reg_next(1);
        delayMatch18_reg(2) <= delayMatch18_reg_next(2);
        delayMatch18_reg(3) <= delayMatch18_reg_next(3);
        delayMatch18_reg(4) <= delayMatch18_reg_next(4);
        delayMatch18_reg(5) <= delayMatch18_reg_next(5);
        delayMatch18_reg(6) <= delayMatch18_reg_next(6);
        delayMatch18_reg(7) <= delayMatch18_reg_next(7);
        delayMatch18_reg(8) <= delayMatch18_reg_next(8);
        delayMatch18_reg(9) <= delayMatch18_reg_next(9);
        delayMatch18_reg(10) <= delayMatch18_reg_next(10);
        delayMatch18_reg(11) <= delayMatch18_reg_next(11);
        delayMatch18_reg(12) <= delayMatch18_reg_next(12);
        delayMatch18_reg(13) <= delayMatch18_reg_next(13);
        delayMatch18_reg(14) <= delayMatch18_reg_next(14);
        delayMatch18_reg(15) <= delayMatch18_reg_next(15);
        delayMatch18_reg(16) <= delayMatch18_reg_next(16);
        delayMatch18_reg(17) <= delayMatch18_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  iy_k_1_1 <= delayMatch18_reg(17);
  delayMatch18_reg_next(0) <= iy_k_1;
  delayMatch18_reg_next(1) <= delayMatch18_reg(0);
  delayMatch18_reg_next(2) <= delayMatch18_reg(1);
  delayMatch18_reg_next(3) <= delayMatch18_reg(2);
  delayMatch18_reg_next(4) <= delayMatch18_reg(3);
  delayMatch18_reg_next(5) <= delayMatch18_reg(4);
  delayMatch18_reg_next(6) <= delayMatch18_reg(5);
  delayMatch18_reg_next(7) <= delayMatch18_reg(6);
  delayMatch18_reg_next(8) <= delayMatch18_reg(7);
  delayMatch18_reg_next(9) <= delayMatch18_reg(8);
  delayMatch18_reg_next(10) <= delayMatch18_reg(9);
  delayMatch18_reg_next(11) <= delayMatch18_reg(10);
  delayMatch18_reg_next(12) <= delayMatch18_reg(11);
  delayMatch18_reg_next(13) <= delayMatch18_reg(12);
  delayMatch18_reg_next(14) <= delayMatch18_reg(13);
  delayMatch18_reg_next(15) <= delayMatch18_reg(14);
  delayMatch18_reg_next(16) <= delayMatch18_reg(15);
  delayMatch18_reg_next(17) <= delayMatch18_reg(16);

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch22_reg(0) <= X"00000000";
        delayMatch22_reg(1) <= X"00000000";
        delayMatch22_reg(2) <= X"00000000";
        delayMatch22_reg(3) <= X"00000000";
        delayMatch22_reg(4) <= X"00000000";
        delayMatch22_reg(5) <= X"00000000";
        delayMatch22_reg(6) <= X"00000000";
        delayMatch22_reg(7) <= X"00000000";
        delayMatch22_reg(8) <= X"00000000";
        delayMatch22_reg(9) <= X"00000000";
        delayMatch22_reg(10) <= X"00000000";
        delayMatch22_reg(11) <= X"00000000";
        delayMatch22_reg(12) <= X"00000000";
        delayMatch22_reg(13) <= X"00000000";
        delayMatch22_reg(14) <= X"00000000";
        delayMatch22_reg(15) <= X"00000000";
        delayMatch22_reg(16) <= X"00000000";
        delayMatch22_reg(17) <= X"00000000";
        delayMatch22_reg(18) <= X"00000000";
        delayMatch22_reg(19) <= X"00000000";
        delayMatch22_reg(20) <= X"00000000";
        delayMatch22_reg(21) <= X"00000000";
        delayMatch22_reg(22) <= X"00000000";
        delayMatch22_reg(23) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch22_reg(0) <= delayMatch22_reg_next(0);
        delayMatch22_reg(1) <= delayMatch22_reg_next(1);
        delayMatch22_reg(2) <= delayMatch22_reg_next(2);
        delayMatch22_reg(3) <= delayMatch22_reg_next(3);
        delayMatch22_reg(4) <= delayMatch22_reg_next(4);
        delayMatch22_reg(5) <= delayMatch22_reg_next(5);
        delayMatch22_reg(6) <= delayMatch22_reg_next(6);
        delayMatch22_reg(7) <= delayMatch22_reg_next(7);
        delayMatch22_reg(8) <= delayMatch22_reg_next(8);
        delayMatch22_reg(9) <= delayMatch22_reg_next(9);
        delayMatch22_reg(10) <= delayMatch22_reg_next(10);
        delayMatch22_reg(11) <= delayMatch22_reg_next(11);
        delayMatch22_reg(12) <= delayMatch22_reg_next(12);
        delayMatch22_reg(13) <= delayMatch22_reg_next(13);
        delayMatch22_reg(14) <= delayMatch22_reg_next(14);
        delayMatch22_reg(15) <= delayMatch22_reg_next(15);
        delayMatch22_reg(16) <= delayMatch22_reg_next(16);
        delayMatch22_reg(17) <= delayMatch22_reg_next(17);
        delayMatch22_reg(18) <= delayMatch22_reg_next(18);
        delayMatch22_reg(19) <= delayMatch22_reg_next(19);
        delayMatch22_reg(20) <= delayMatch22_reg_next(20);
        delayMatch22_reg(21) <= delayMatch22_reg_next(21);
        delayMatch22_reg(22) <= delayMatch22_reg_next(22);
        delayMatch22_reg(23) <= delayMatch22_reg_next(23);
      END IF;
    END IF;
  END PROCESS delayMatch22_process;

  Out_1_6 <= delayMatch22_reg(23);
  delayMatch22_reg_next(0) <= Out_1_5;
  delayMatch22_reg_next(1) <= delayMatch22_reg(0);
  delayMatch22_reg_next(2) <= delayMatch22_reg(1);
  delayMatch22_reg_next(3) <= delayMatch22_reg(2);
  delayMatch22_reg_next(4) <= delayMatch22_reg(3);
  delayMatch22_reg_next(5) <= delayMatch22_reg(4);
  delayMatch22_reg_next(6) <= delayMatch22_reg(5);
  delayMatch22_reg_next(7) <= delayMatch22_reg(6);
  delayMatch22_reg_next(8) <= delayMatch22_reg(7);
  delayMatch22_reg_next(9) <= delayMatch22_reg(8);
  delayMatch22_reg_next(10) <= delayMatch22_reg(9);
  delayMatch22_reg_next(11) <= delayMatch22_reg(10);
  delayMatch22_reg_next(12) <= delayMatch22_reg(11);
  delayMatch22_reg_next(13) <= delayMatch22_reg(12);
  delayMatch22_reg_next(14) <= delayMatch22_reg(13);
  delayMatch22_reg_next(15) <= delayMatch22_reg(14);
  delayMatch22_reg_next(16) <= delayMatch22_reg(15);
  delayMatch22_reg_next(17) <= delayMatch22_reg(16);
  delayMatch22_reg_next(18) <= delayMatch22_reg(17);
  delayMatch22_reg_next(19) <= delayMatch22_reg(18);
  delayMatch22_reg_next(20) <= delayMatch22_reg(19);
  delayMatch22_reg_next(21) <= delayMatch22_reg(20);
  delayMatch22_reg_next(22) <= delayMatch22_reg(21);
  delayMatch22_reg_next(23) <= delayMatch22_reg(22);

END rtl;

