-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_updateParameter_float_4u_Block_split1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_learningRate_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_learningRate_empty_n : IN STD_LOGIC;
    p_learningRate_read : OUT STD_LOGIC;
    p_batchSize_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_batchSize_empty_n : IN STD_LOGIC;
    p_batchSize_read : OUT STD_LOGIC;
    l_multiplicator_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_multiplicator_out_out_full_n : IN STD_LOGIC;
    l_multiplicator_out_out_write : OUT STD_LOGIC;
    l_multiplicator_out_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_multiplicator_out_out1_full_n : IN STD_LOGIC;
    l_multiplicator_out_out1_write : OUT STD_LOGIC );
end;


architecture behav of BGD_updateParameter_float_4u_Block_split1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_learningRate_blk_n : STD_LOGIC;
    signal p_batchSize_blk_n : STD_LOGIC;
    signal l_multiplicator_out_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal l_multiplicator_out_out1_blk_n : STD_LOGIC;
    signal p_learningRate_read_reg_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_batchSize_read_reg_77 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_54_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_multiplicator_reg_87 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state12 : BOOLEAN;
    signal grp_fu_54_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln584_fu_58_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln584_fu_61_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component BGD_fdiv_32ns_32ns_32_10_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fdiv_32ns_32ns_32_10_no_dsp_1_U403 : component BGD_fdiv_32ns_32ns_32_10_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_54_p0,
        din1 => p_batchSize_read_reg_77,
        ce => ap_const_logic_1,
        dout => grp_fu_54_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((l_multiplicator_out_out1_full_n = ap_const_logic_0) or (l_multiplicator_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                l_multiplicator_reg_87 <= grp_fu_54_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_batchSize_empty_n = ap_const_logic_0) or (p_learningRate_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_batchSize_read_reg_77 <= p_batchSize_dout;
                p_learningRate_read_reg_72 <= p_learningRate_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_learningRate_empty_n, p_batchSize_empty_n, l_multiplicator_out_out_full_n, l_multiplicator_out_out1_full_n, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_batchSize_empty_n = ap_const_logic_0) or (p_learningRate_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if ((not(((l_multiplicator_out_out1_full_n = ap_const_logic_0) or (l_multiplicator_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_learningRate_empty_n, p_batchSize_empty_n)
    begin
                ap_block_state1 <= ((p_batchSize_empty_n = ap_const_logic_0) or (p_learningRate_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state12_assign_proc : process(l_multiplicator_out_out_full_n, l_multiplicator_out_out1_full_n)
    begin
                ap_block_state12 <= ((l_multiplicator_out_out1_full_n = ap_const_logic_0) or (l_multiplicator_out_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, l_multiplicator_out_out_full_n, l_multiplicator_out_out1_full_n, ap_CS_fsm_state12)
    begin
        if ((not(((l_multiplicator_out_out1_full_n = ap_const_logic_0) or (l_multiplicator_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(l_multiplicator_out_out_full_n, l_multiplicator_out_out1_full_n, ap_CS_fsm_state12)
    begin
        if ((not(((l_multiplicator_out_out1_full_n = ap_const_logic_0) or (l_multiplicator_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln584_fu_58_p1 <= p_learningRate_read_reg_72;
    grp_fu_54_p0 <= xor_ln584_fu_61_p2;

    l_multiplicator_out_out1_blk_n_assign_proc : process(l_multiplicator_out_out1_full_n, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            l_multiplicator_out_out1_blk_n <= l_multiplicator_out_out1_full_n;
        else 
            l_multiplicator_out_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_multiplicator_out_out1_din <= l_multiplicator_reg_87;

    l_multiplicator_out_out1_write_assign_proc : process(l_multiplicator_out_out_full_n, l_multiplicator_out_out1_full_n, ap_CS_fsm_state12)
    begin
        if ((not(((l_multiplicator_out_out1_full_n = ap_const_logic_0) or (l_multiplicator_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            l_multiplicator_out_out1_write <= ap_const_logic_1;
        else 
            l_multiplicator_out_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    l_multiplicator_out_out_blk_n_assign_proc : process(l_multiplicator_out_out_full_n, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            l_multiplicator_out_out_blk_n <= l_multiplicator_out_out_full_n;
        else 
            l_multiplicator_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_multiplicator_out_out_din <= l_multiplicator_reg_87;

    l_multiplicator_out_out_write_assign_proc : process(l_multiplicator_out_out_full_n, l_multiplicator_out_out1_full_n, ap_CS_fsm_state12)
    begin
        if ((not(((l_multiplicator_out_out1_full_n = ap_const_logic_0) or (l_multiplicator_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            l_multiplicator_out_out_write <= ap_const_logic_1;
        else 
            l_multiplicator_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_batchSize_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_batchSize_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_batchSize_blk_n <= p_batchSize_empty_n;
        else 
            p_batchSize_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_batchSize_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_learningRate_empty_n, p_batchSize_empty_n)
    begin
        if ((not(((p_batchSize_empty_n = ap_const_logic_0) or (p_learningRate_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_batchSize_read <= ap_const_logic_1;
        else 
            p_batchSize_read <= ap_const_logic_0;
        end if; 
    end process;


    p_learningRate_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_learningRate_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_learningRate_blk_n <= p_learningRate_empty_n;
        else 
            p_learningRate_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_learningRate_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_learningRate_empty_n, p_batchSize_empty_n)
    begin
        if ((not(((p_batchSize_empty_n = ap_const_logic_0) or (p_learningRate_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_learningRate_read <= ap_const_logic_1;
        else 
            p_learningRate_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln584_fu_61_p2 <= (bitcast_ln584_fu_58_p1 xor ap_const_lv32_80000000);
end behav;
