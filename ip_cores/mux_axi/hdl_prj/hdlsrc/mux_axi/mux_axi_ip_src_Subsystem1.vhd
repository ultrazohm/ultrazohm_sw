-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mux_axi\mux_axi_ip_src_Subsystem1.vhd
-- Created: 2021-10-21 11:05:09
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mux_axi_ip_src_Subsystem1
-- Source Path: mux_axi/mux_axi/Subsystem1
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY mux_axi_ip_src_Subsystem1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        interrupt_in                      :   IN    std_logic;
        n_th_adc_interrupt                :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        interrupt_out_isr                 :   OUT   std_logic
        );
END mux_axi_ip_src_Subsystem1;


ARCHITECTURE rtl OF mux_axi_ip_src_Subsystem1 IS

  -- Component Declarations
  COMPONENT mux_axi_ip_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mux_axi_ip_src_Detect_Fall_Nonpositive2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : mux_axi_ip_src_Detect_Rise_Positive
    USE ENTITY work.mux_axi_ip_src_Detect_Rise_Positive(rtl);

  FOR ALL : mux_axi_ip_src_Detect_Fall_Nonpositive2
    USE ENTITY work.mux_axi_ip_src_Detect_Fall_Nonpositive2(rtl);

  -- Signals
  SIGNAL n_th_adc_interrupt_unsigned      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL PipelineDelay_out1               : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Detect_Fall_Nonpositive2_out1    : std_logic;

BEGIN
  -- This delay is only used to improve timing (Pipeline) and is not related to the function of the module! 
  -- 
  -- Resets the counter at a rising edge

  u_Detect_Rise_Positive : mux_axi_ip_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => interrupt_in,
              Y => Detect_Rise_Positive_out1
              );

  u_Detect_Fall_Nonpositive2 : mux_axi_ip_src_Detect_Fall_Nonpositive2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => std_logic_vector(HDL_Counter_out1),  -- uint8
              Y => Detect_Fall_Nonpositive2_out1
              );

  n_th_adc_interrupt_unsigned <= unsigned(n_th_adc_interrupt);

  PipelineDelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        PipelineDelay_out1 <= '0';
      ELSIF enb = '1' THEN
        PipelineDelay_out1 <= Detect_Rise_Positive_out1;
      END IF;
    END IF;
  END PROCESS PipelineDelay_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Relational_Operator_relop1 <= '1' WHEN resize(Delay_out1, 32) >= n_th_adc_interrupt_unsigned ELSE
      '0';

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        IF Relational_Operator_relop1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#00#, 8);
        ELSIF PipelineDelay_out1 = '1' THEN 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  interrupt_out_isr <= Detect_Fall_Nonpositive2_out1;

END rtl;

