-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_padding_float_4u_unsigned_int_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_data_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_data_empty_n : IN STD_LOGIC;
    p_data_read : OUT STD_LOGIC;
    p_pad_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_pad_full_n : IN STD_LOGIC;
    p_pad_write : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_mulIters_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_mulIters_empty_n : IN STD_LOGIC;
    p_mulIters_read : OUT STD_LOGIC;
    p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_full_n : IN STD_LOGIC;
    p_n_out_write : OUT STD_LOGIC;
    p_mulIters_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_mulIters_out_full_n : IN STD_LOGIC;
    p_mulIters_out_write : OUT STD_LOGIC );
end;


architecture behav of BGD_padding_float_4u_unsigned_int_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal p_data_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln58_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_pad_blk_n : STD_LOGIC;
    signal p_n_blk_n : STD_LOGIC;
    signal p_mulIters_blk_n : STD_LOGIC;
    signal p_n_out_blk_n : STD_LOGIC;
    signal p_mulIters_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_105 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_read_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal l_totalNum_fu_156_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_totalNum_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln52_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln52_reg_223 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln58_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op37_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln58_fu_183_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln61_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_empty_phi_fu_131_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln56_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_146_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln52_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln52_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln59_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_194_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln52_fu_172_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln52_fu_172_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_138 : BOOLEAN;

    component BGD_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_32ns_32ns_64_1_1_U178 : component BGD_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln52_fu_172_p0,
        din1 => mul_ln52_fu_172_p1,
        dout => mul_ln52_fu_172_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_138)) then
                if (((icmp_ln61_fu_202_p2 = ap_const_lv1_0) and (icmp_ln58_fu_178_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_reg_127 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_reg_127 <= ap_phi_reg_pp0_iter0_empty_reg_127;
                end if;
            end if; 
        end if;
    end process;

    i_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln58_fu_178_p2 = ap_const_lv1_0))) then 
                i_reg_116 <= i_5_fu_207_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_116 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln58_fu_178_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_105 <= add_ln58_fu_183_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_105 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln58_reg_228 <= icmp_ln58_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_fu_178_p2 = ap_const_lv1_0))) then
                icmp_ln61_reg_237 <= icmp_ln61_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    l_totalNum_reg_218(31 downto 2) <= l_totalNum_fu_156_p3(31 downto 2);
                mul_ln52_reg_223 <= mul_ln52_fu_172_p2;
                p_n_read_reg_213 <= p_n_dout;
            end if;
        end if;
    end process;
    l_totalNum_reg_218(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_n_empty_n, p_mulIters_empty_n, p_n_out_full_n, p_mulIters_out_full_n, icmp_ln58_fu_178_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln58_fu_178_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln58_fu_178_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln56_fu_140_p2 <= std_logic_vector(unsigned(p_n_dout) + unsigned(ap_const_lv32_3));
    add_ln58_fu_183_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_105) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_data_empty_n, p_pad_full_n, ap_enable_reg_pp0_iter1, icmp_ln58_reg_228, ap_predicate_op37_read_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln58_reg_228 = ap_const_lv1_0) and (p_pad_full_n = ap_const_logic_0)) or ((p_data_empty_n = ap_const_logic_0) and (ap_predicate_op37_read_state3 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_data_empty_n, p_pad_full_n, ap_enable_reg_pp0_iter1, icmp_ln58_reg_228, ap_predicate_op37_read_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln58_reg_228 = ap_const_lv1_0) and (p_pad_full_n = ap_const_logic_0)) or ((p_data_empty_n = ap_const_logic_0) and (ap_predicate_op37_read_state3 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_data_empty_n, p_pad_full_n, ap_enable_reg_pp0_iter1, icmp_ln58_reg_228, ap_predicate_op37_read_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln58_reg_228 = ap_const_lv1_0) and (p_pad_full_n = ap_const_logic_0)) or ((p_data_empty_n = ap_const_logic_0) and (ap_predicate_op37_read_state3 = ap_const_boolean_1))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, p_n_empty_n, p_mulIters_empty_n, p_n_out_full_n, p_mulIters_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_data_empty_n, p_pad_full_n, icmp_ln58_reg_228, ap_predicate_op37_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln58_reg_228 = ap_const_lv1_0) and (p_pad_full_n = ap_const_logic_0)) or ((p_data_empty_n = ap_const_logic_0) and (ap_predicate_op37_read_state3 = ap_const_boolean_1)));
    end process;


    ap_condition_138_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_138 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln58_fu_178_p2)
    begin
        if ((icmp_ln58_fu_178_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_131_p4_assign_proc : process(p_data_dout, icmp_ln58_reg_228, icmp_ln61_reg_237, ap_phi_reg_pp0_iter1_empty_reg_127)
    begin
        if (((icmp_ln61_reg_237 = ap_const_lv1_1) and (icmp_ln58_reg_228 = ap_const_lv1_0))) then 
            ap_phi_mux_empty_phi_fu_131_p4 <= p_data_dout;
        else 
            ap_phi_mux_empty_phi_fu_131_p4 <= ap_phi_reg_pp0_iter1_empty_reg_127;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_reg_127 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op37_read_state3_assign_proc : process(icmp_ln58_reg_228, icmp_ln61_reg_237)
    begin
                ap_predicate_op37_read_state3 <= ((icmp_ln61_reg_237 = ap_const_lv1_1) and (icmp_ln58_reg_228 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    i_5_fu_207_p2 <= std_logic_vector(unsigned(select_ln58_fu_194_p3) + unsigned(ap_const_lv32_1));
    icmp_ln58_fu_178_p2 <= "1" when (indvar_flatten_reg_105 = mul_ln52_reg_223) else "0";
    icmp_ln59_fu_189_p2 <= "1" when (i_reg_116 = l_totalNum_reg_218) else "0";
    icmp_ln61_fu_202_p2 <= "1" when (unsigned(select_ln58_fu_194_p3) < unsigned(p_n_read_reg_213)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    l_totalNum_fu_156_p3 <= (tmp_1_fu_146_p4 & ap_const_lv2_0);
    mul_ln52_fu_172_p0 <= mul_ln52_fu_172_p00(32 - 1 downto 0);
    mul_ln52_fu_172_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mulIters_dout),64));
    mul_ln52_fu_172_p1 <= mul_ln52_fu_172_p10(32 - 1 downto 0);
    mul_ln52_fu_172_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_totalNum_fu_156_p3),64));

    p_data_blk_n_assign_proc : process(p_data_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln58_reg_228, icmp_ln61_reg_237)
    begin
        if (((icmp_ln61_reg_237 = ap_const_lv1_1) and (icmp_ln58_reg_228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_data_blk_n <= p_data_empty_n;
        else 
            p_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_data_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op37_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op37_read_state3 = ap_const_boolean_1))) then 
            p_data_read <= ap_const_logic_1;
        else 
            p_data_read <= ap_const_logic_0;
        end if; 
    end process;


    p_mulIters_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_mulIters_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_mulIters_blk_n <= p_mulIters_empty_n;
        else 
            p_mulIters_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_mulIters_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_mulIters_out_blk_n <= p_mulIters_out_full_n;
        else 
            p_mulIters_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_mulIters_out_din <= p_mulIters_dout;

    p_mulIters_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_mulIters_empty_n, p_n_out_full_n, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_mulIters_out_write <= ap_const_logic_1;
        else 
            p_mulIters_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_mulIters_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_mulIters_empty_n, p_n_out_full_n, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_mulIters_read <= ap_const_logic_1;
        else 
            p_mulIters_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_blk_n <= p_n_out_full_n;
        else 
            p_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_n_out_din <= p_n_dout;

    p_n_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_mulIters_empty_n, p_n_out_full_n, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_write <= ap_const_logic_1;
        else 
            p_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_n_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_mulIters_empty_n, p_n_out_full_n, p_mulIters_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_mulIters_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_mulIters_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_pad_blk_n_assign_proc : process(p_pad_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln58_reg_228)
    begin
        if (((icmp_ln58_reg_228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_pad_blk_n <= p_pad_full_n;
        else 
            p_pad_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_pad_din <= ap_phi_mux_empty_phi_fu_131_p4;

    p_pad_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln58_reg_228, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln58_reg_228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_pad_write <= ap_const_logic_1;
        else 
            p_pad_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln58_fu_194_p3 <= 
        ap_const_lv32_0 when (icmp_ln59_fu_189_p2(0) = '1') else 
        i_reg_116;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_146_p4 <= add_ln56_fu_140_p2(31 downto 2);
end behav;
