-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_Park is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_trafo_alpha : IN STD_LOGIC_VECTOR (31 downto 0);
    in_trafo_beta : IN STD_LOGIC_VECTOR (31 downto 0);
    in_inv_d : IN STD_LOGIC_VECTOR (31 downto 0);
    in_inv_q : IN STD_LOGIC_VECTOR (31 downto 0);
    theta_el : IN STD_LOGIC_VECTOR (31 downto 0);
    out_trafo_d : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_trafo_q : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_inv_alpha : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_inv_beta : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of uz_Park is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_Park_uz_Park,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3913,HLS_SYN_LUT=7249,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_sin_or_cos_float_s_fu_112_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_theta_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_sin_or_cos_float_s_fu_128_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_theta_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bitcast_ln18_1_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal products_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal products_1_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal products_2_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal products_3_reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal products_4_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal products_5_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal products_6_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal products_7_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_s_fu_112_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_112_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_112_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_112_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_128_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_128_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_128_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_128_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_float_s_fu_128_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bitcast_ln18_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component uz_Park_sin_or_cos_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        do_cos : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_Park_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_Park_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_sin_or_cos_float_s_fu_112 : component uz_Park_sin_or_cos_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_float_s_fu_112_ap_start,
        ap_done => grp_sin_or_cos_float_s_fu_112_ap_done,
        ap_idle => grp_sin_or_cos_float_s_fu_112_ap_idle,
        ap_ready => grp_sin_or_cos_float_s_fu_112_ap_ready,
        t_in => theta_el,
        do_cos => ap_const_lv1_0,
        ap_return => grp_sin_or_cos_float_s_fu_112_ap_return);

    grp_sin_or_cos_float_s_fu_128 : component uz_Park_sin_or_cos_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_float_s_fu_128_ap_start,
        ap_done => grp_sin_or_cos_float_s_fu_128_ap_done,
        ap_idle => grp_sin_or_cos_float_s_fu_128_ap_idle,
        ap_ready => grp_sin_or_cos_float_s_fu_128_ap_ready,
        t_in => theta_el,
        do_cos => ap_const_lv1_1,
        ap_return => grp_sin_or_cos_float_s_fu_128_ap_return);

    fadd_32ns_32ns_32_4_full_dsp_1_U34 : component uz_Park_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => products_reg_290,
        din1 => products_1_reg_295,
        ce => ap_const_logic_1,
        dout => grp_fu_144_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U35 : component uz_Park_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => products_2_reg_300,
        din1 => products_3_reg_305,
        ce => ap_const_logic_1,
        dout => grp_fu_148_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U36 : component uz_Park_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => products_4_reg_310,
        din1 => products_5_reg_315,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U37 : component uz_Park_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => products_6_reg_320,
        din1 => products_7_reg_325,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U38 : component uz_Park_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cos_theta_reg_247,
        din1 => in_trafo_alpha,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U39 : component uz_Park_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sin_theta_reg_241,
        din1 => in_trafo_beta,
        ce => ap_const_logic_1,
        dout => grp_fu_165_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U40 : component uz_Park_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln18_1_fu_210_p1,
        din1 => in_trafo_alpha,
        ce => ap_const_logic_1,
        dout => grp_fu_170_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U41 : component uz_Park_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cos_theta_reg_247,
        din1 => in_trafo_beta,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U42 : component uz_Park_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cos_theta_reg_247,
        din1 => in_inv_d,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U43 : component uz_Park_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln18_1_fu_210_p1,
        din1 => in_inv_q,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U44 : component uz_Park_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sin_theta_reg_241,
        din1 => in_inv_d,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U45 : component uz_Park_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cos_theta_reg_247,
        din1 => in_inv_q,
        ce => ap_const_logic_1,
        dout => grp_fu_195_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_s_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_float_s_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_sin_or_cos_float_s_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_s_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_s_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_s_fu_128_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_float_s_fu_128_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_sin_or_cos_float_s_fu_128_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_s_fu_128_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_s_fu_128_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cos_theta_reg_247 <= grp_sin_or_cos_float_s_fu_128_ap_return;
                sin_theta_reg_241 <= grp_sin_or_cos_float_s_fu_112_ap_return;
                xor_ln18_reg_255 <= xor_ln18_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                products_1_reg_295 <= grp_fu_165_p2;
                products_2_reg_300 <= grp_fu_170_p2;
                products_3_reg_305 <= grp_fu_175_p2;
                products_4_reg_310 <= grp_fu_180_p2;
                products_5_reg_315 <= grp_fu_185_p2;
                products_6_reg_320 <= grp_fu_190_p2;
                products_7_reg_325 <= grp_fu_195_p2;
                products_reg_290 <= grp_fu_160_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state2_on_subcall_done_assign_proc : process(grp_sin_or_cos_float_s_fu_112_ap_done, grp_sin_or_cos_float_s_fu_128_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_sin_or_cos_float_s_fu_128_ap_done = ap_const_logic_0) or (grp_sin_or_cos_float_s_fu_112_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln18_1_fu_210_p1 <= xor_ln18_reg_255;
    bitcast_ln18_fu_200_p1 <= grp_sin_or_cos_float_s_fu_112_ap_return;
    grp_sin_or_cos_float_s_fu_112_ap_start <= grp_sin_or_cos_float_s_fu_112_ap_start_reg;
    grp_sin_or_cos_float_s_fu_128_ap_start <= grp_sin_or_cos_float_s_fu_128_ap_start_reg;
    out_inv_alpha <= grp_fu_152_p2;
    out_inv_beta <= grp_fu_156_p2;
    out_trafo_d <= grp_fu_144_p2;
    out_trafo_q <= grp_fu_148_p2;
    xor_ln18_fu_204_p2 <= (bitcast_ln18_fu_200_p1 xor ap_const_lv32_80000000);
end behav;
