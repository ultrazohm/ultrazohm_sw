// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_computeOutputError_float_1u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_results_address0,
        p_results_ce0,
        p_results_q0,
        p_results_offset_dout,
        p_results_offset_empty_n,
        p_results_offset_read,
        p_classes_address0,
        p_classes_ce0,
        p_classes_q0,
        p_classes_offset_dout,
        p_classes_offset_empty_n,
        p_classes_offset_read,
        p_n_out_din,
        p_n_out_full_n,
        p_n_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
output  [12:0] p_results_address0;
output   p_results_ce0;
input  [31:0] p_results_q0;
input  [12:0] p_results_offset_dout;
input   p_results_offset_empty_n;
output   p_results_offset_read;
output  [9:0] p_classes_address0;
output   p_classes_ce0;
input  [31:0] p_classes_q0;
input  [9:0] p_classes_offset_dout;
input   p_classes_offset_empty_n;
output   p_classes_offset_read;
output  [31:0] p_n_out_din;
input   p_n_out_full_n;
output   p_n_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_out_write;
reg p_n_read;
reg p_results_ce0;
reg p_results_offset_read;
reg p_classes_ce0;
reg p_classes_offset_read;
reg p_n_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_out_blk_n;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln329_reg_190;
reg   [0:0] icmp_ln329_reg_190_pp0_iter6_reg;
reg    p_n_blk_n;
reg    p_results_offset_blk_n;
reg    p_classes_offset_blk_n;
reg    p_n_out_blk_n;
reg   [31:0] i_reg_117;
reg   [31:0] l_parBlocks_reg_175;
reg    ap_block_state1;
reg   [12:0] p_results_offset_read_reg_180;
reg   [9:0] p_classes_offset_read_reg_185;
wire   [0:0] icmp_ln329_fu_132_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln329_reg_190_pp0_iter1_reg;
reg   [0:0] icmp_ln329_reg_190_pp0_iter2_reg;
reg   [0:0] icmp_ln329_reg_190_pp0_iter3_reg;
reg   [0:0] icmp_ln329_reg_190_pp0_iter4_reg;
reg   [0:0] icmp_ln329_reg_190_pp0_iter5_reg;
wire   [31:0] add_ln329_fu_137_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] p_results_load_reg_209;
reg   [31:0] p_classes_load_reg_214;
wire   [31:0] grp_fu_128_p2;
reg   [31:0] l_error_m_Val_reg_219;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire   [63:0] sum_cast_i_fu_156_p1;
wire   [63:0] sum3_cast_i_fu_166_p1;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] trunc_ln329_1_fu_147_p1;
wire   [12:0] sum_i_fu_151_p2;
wire   [9:0] trunc_ln329_fu_143_p1;
wire   [9:0] sum3_i_fu_161_p2;
reg    grp_fu_128_ce;
wire    ap_CS_fsm_state10;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

BGD_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_results_load_reg_209),
    .din1(p_classes_load_reg_214),
    .ce(grp_fu_128_ce),
    .dout(grp_fu_128_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_117 <= 32'd0;
    end else if (((icmp_ln329_fu_132_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_117 <= add_ln329_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln329_reg_190 <= icmp_ln329_fu_132_p2;
        icmp_ln329_reg_190_pp0_iter1_reg <= icmp_ln329_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln329_reg_190_pp0_iter2_reg <= icmp_ln329_reg_190_pp0_iter1_reg;
        icmp_ln329_reg_190_pp0_iter3_reg <= icmp_ln329_reg_190_pp0_iter2_reg;
        icmp_ln329_reg_190_pp0_iter4_reg <= icmp_ln329_reg_190_pp0_iter3_reg;
        icmp_ln329_reg_190_pp0_iter5_reg <= icmp_ln329_reg_190_pp0_iter4_reg;
        icmp_ln329_reg_190_pp0_iter6_reg <= icmp_ln329_reg_190_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln329_reg_190_pp0_iter5_reg == 1'd0))) begin
        l_error_m_Val_reg_219 <= grp_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_parBlocks_reg_175 <= p_n_dout;
        p_classes_offset_read_reg_185 <= p_classes_offset_dout;
        p_results_offset_read_reg_180 <= p_results_offset_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln329_reg_190 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_classes_load_reg_214 <= p_classes_q0;
        p_results_load_reg_209 <= p_results_q0;
    end
end

always @ (*) begin
    if ((icmp_ln329_fu_132_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_128_ce = 1'b1;
    end else begin
        grp_fu_128_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_classes_ce0 = 1'b1;
    end else begin
        p_classes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_classes_offset_blk_n = p_classes_offset_empty_n;
    end else begin
        p_classes_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_classes_offset_read = 1'b1;
    end else begin
        p_classes_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_blk_n = p_n_out_full_n;
    end else begin
        p_n_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_write = 1'b1;
    end else begin
        p_n_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln329_reg_190_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln329_reg_190_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_results_ce0 = 1'b1;
    end else begin
        p_results_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_results_offset_blk_n = p_results_offset_empty_n;
    end else begin
        p_results_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_results_offset_read = 1'b1;
    end else begin
        p_results_offset_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln329_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln329_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln329_fu_137_p2 = (i_reg_117 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln329_reg_190_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln329_reg_190_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln329_reg_190_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_classes_offset_empty_n == 1'b0) | (p_results_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter7 = ((icmp_ln329_reg_190_pp0_iter6_reg == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln329_fu_132_p2 = ((i_reg_117 == l_parBlocks_reg_175) ? 1'b1 : 1'b0);

assign p_classes_address0 = sum3_cast_i_fu_166_p1;

assign p_n_out_din = p_n_dout;

assign p_out_din = l_error_m_Val_reg_219;

assign p_results_address0 = sum_cast_i_fu_156_p1;

assign sum3_cast_i_fu_166_p1 = sum3_i_fu_161_p2;

assign sum3_i_fu_161_p2 = (p_classes_offset_read_reg_185 + trunc_ln329_fu_143_p1);

assign sum_cast_i_fu_156_p1 = sum_i_fu_151_p2;

assign sum_i_fu_151_p2 = (p_results_offset_read_reg_180 + trunc_ln329_1_fu_147_p1);

assign trunc_ln329_1_fu_147_p1 = i_reg_117[12:0];

assign trunc_ln329_fu_143_p1 = i_reg_117[9:0];

endmodule //BGD_computeOutputError_float_1u_s
