-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_gemv_float_2u_unsigned_int_float_s is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_M_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    p_M_empty_n : IN STD_LOGIC;
    p_M_read : OUT STD_LOGIC;
    p_x_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    p_x_empty_n : IN STD_LOGIC;
    p_x_read : OUT STD_LOGIC;
    p_y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_y_full_n : IN STD_LOGIC;
    p_y_write : OUT STD_LOGIC;
    p_m_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_m_r_empty_n : IN STD_LOGIC;
    p_m_r_read : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_m_out_full_n : IN STD_LOGIC;
    p_m_out_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of BGD_gemv_float_2u_unsigned_int_float_s is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal dot83_U0_ap_start : STD_LOGIC;
    signal dot83_U0_ap_done : STD_LOGIC;
    signal dot83_U0_ap_continue : STD_LOGIC;
    signal dot83_U0_ap_idle : STD_LOGIC;
    signal dot83_U0_ap_ready : STD_LOGIC;
    signal dot83_U0_p_m_read : STD_LOGIC;
    signal dot83_U0_p_m_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dot83_U0_p_m_out_write : STD_LOGIC;
    signal dot83_U0_p_M_r_read : STD_LOGIC;
    signal dot83_U0_p_x_read : STD_LOGIC;
    signal dot83_U0_p_y_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dot83_U0_p_y_write : STD_LOGIC;
    signal dot83_U0_p_n_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal dot83_U0_start_full_n : STD_LOGIC;
    signal dot83_U0_start_write : STD_LOGIC;

    component BGD_dot83 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_empty_n : IN STD_LOGIC;
        p_m_read : OUT STD_LOGIC;
        p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_full_n : IN STD_LOGIC;
        p_m_out_write : OUT STD_LOGIC;
        p_M_r_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        p_M_r_empty_n : IN STD_LOGIC;
        p_M_r_read : OUT STD_LOGIC;
        p_x_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        p_x_empty_n : IN STD_LOGIC;
        p_x_read : OUT STD_LOGIC;
        p_y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_y_full_n : IN STD_LOGIC;
        p_y_write : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC );
    end component;



begin
    dot83_U0 : component BGD_dot83
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dot83_U0_ap_start,
        ap_done => dot83_U0_ap_done,
        ap_continue => dot83_U0_ap_continue,
        ap_idle => dot83_U0_ap_idle,
        ap_ready => dot83_U0_ap_ready,
        p_m_dout => p_m_r_dout,
        p_m_empty_n => p_m_r_empty_n,
        p_m_read => dot83_U0_p_m_read,
        p_m_out_din => dot83_U0_p_m_out_din,
        p_m_out_full_n => p_m_out_full_n,
        p_m_out_write => dot83_U0_p_m_out_write,
        p_M_r_dout => p_M_dout,
        p_M_r_empty_n => p_M_empty_n,
        p_M_r_read => dot83_U0_p_M_r_read,
        p_x_dout => p_x_dout,
        p_x_empty_n => p_x_empty_n,
        p_x_read => dot83_U0_p_x_read,
        p_y_din => dot83_U0_p_y_din,
        p_y_full_n => p_y_full_n,
        p_y_write => dot83_U0_p_y_write,
        p_n_dout => p_n_dout,
        p_n_empty_n => p_n_empty_n,
        p_n_read => dot83_U0_p_n_read);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= dot83_U0_ap_done;
    ap_idle <= dot83_U0_ap_idle;
    ap_ready <= internal_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= dot83_U0_ap_done;
    ap_sync_ready <= dot83_U0_ap_ready;
    dot83_U0_ap_continue <= ap_continue;
    dot83_U0_ap_start <= real_start;
    dot83_U0_start_full_n <= ap_const_logic_1;
    dot83_U0_start_write <= ap_const_logic_0;
    internal_ap_ready <= ap_sync_ready;
    p_M_read <= dot83_U0_p_M_r_read;
    p_m_out_din <= dot83_U0_p_m_out_din;
    p_m_out_write <= dot83_U0_p_m_out_write;
    p_m_r_read <= dot83_U0_p_m_read;
    p_n_read <= dot83_U0_p_n_read;
    p_x_read <= dot83_U0_p_x_read;
    p_y_din <= dot83_U0_p_y_din;
    p_y_write <= dot83_U0_p_y_write;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
