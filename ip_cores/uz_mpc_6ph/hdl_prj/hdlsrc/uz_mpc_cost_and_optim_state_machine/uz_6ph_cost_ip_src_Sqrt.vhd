-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_mpc_cost_and_optim_state_machine\uz_6ph_cost_ip_src_Sqrt.vhd
-- Created: 2022-09-20 09:58:30
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_6ph_cost_ip_src_Sqrt
-- Source Path: uz_mpc_cost_and_optim_state_machine/uz_6ph_mpc_costs_and_optimization/Sqrt
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_6ph_cost_ip_src_uz_6ph_mpc_costs_and_optimization_pkg.ALL;

ENTITY uz_6ph_cost_ip_src_Sqrt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_3_1_0                         :   IN    std_logic;
        din                               :   IN    std_logic_vector(26 DOWNTO 0);  -- ufix27_En22
        dout                              :   OUT   std_logic_vector(26 DOWNTO 0)  -- ufix27_En22
        );
END uz_6ph_cost_ip_src_Sqrt;


ARCHITECTURE rtl OF uz_6ph_cost_ip_src_Sqrt IS

  -- Component Declarations
  COMPONENT uz_6ph_cost_ip_src_Sqrt_iv
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_3_1_0                       :   IN    std_logic;
          ain                             :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28_En28
          sel                             :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          xinit                           :   OUT   std_logic_vector(53 DOWNTO 0);  -- sfix54_En49
          inzero                          :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT uz_6ph_cost_ip_src_Sqrt_core
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_3_1_0                       :   IN    std_logic;
          xin                             :   IN    std_logic_vector(53 DOWNTO 0);  -- sfix54_En49
          ain                             :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28_En28
          sel                             :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          xout                            :   OUT   std_logic_vector(53 DOWNTO 0);  -- sfix54_En49
          aout                            :   OUT   std_logic_vector(27 DOWNTO 0)  -- ufix28_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_6ph_cost_ip_src_Sqrt_iv
    USE ENTITY work.uz_6ph_cost_ip_src_Sqrt_iv(rtl);

  FOR ALL : uz_6ph_cost_ip_src_Sqrt_core
    USE ENTITY work.uz_6ph_cost_ip_src_Sqrt_core(rtl);

  -- Signals
  SIGNAL din_unsigned                     : unsigned(26 DOWNTO 0);  -- ufix27_En22
  SIGNAL in_norm_out1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL in_norm_anorm                    : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL in_norm_anorm_1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_2                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_3                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_4                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_cast                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL in_norm_anorm_5                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_6                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_7                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_8                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_9                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_10                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_11                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_12                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_anorm_13                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL anorm                            : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL dynamicshift                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL anorm_p                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL sel                              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL xinit                            : std_logic_vector(53 DOWNTO 0);  -- ufix54
  SIGNAL inzero                           : std_logic;  -- ufix1
  SIGNAL inzero_reg_reg                   : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL inzero_p                         : std_logic;  -- ufix1
  SIGNAL anorm_p2                         : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL xstage1                          : std_logic_vector(53 DOWNTO 0);  -- ufix54
  SIGNAL astage1                          : std_logic_vector(27 DOWNTO 0);  -- ufix28
  SIGNAL xstage2                          : std_logic_vector(53 DOWNTO 0);  -- ufix54
  SIGNAL astage2                          : std_logic_vector(27 DOWNTO 0);  -- ufix28
  SIGNAL xstage3                          : std_logic_vector(53 DOWNTO 0);  -- ufix54
  SIGNAL astage3                          : std_logic_vector(27 DOWNTO 0);  -- ufix28
  SIGNAL xstage3_signed                   : signed(53 DOWNTO 0);  -- sfix54_En49
  SIGNAL constInf                         : unsigned(26 DOWNTO 0);  -- ufix27_En22
  SIGNAL ds_reg_reg                       : vector_of_unsigned5(0 TO 4);  -- ufix5 [5]
  SIGNAL dynamicshift_p                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL out_denorm_cast                  : unsigned(66 DOWNTO 0);  -- ufix67_En49
  SIGNAL out_denorm_cast_1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL out_denorm_cast_2                : unsigned(66 DOWNTO 0);  -- ufix67_En52
  SIGNAL denormout                        : unsigned(26 DOWNTO 0);  -- ufix27_En22
  SIGNAL dout_tmp                         : unsigned(26 DOWNTO 0);  -- ufix27_En22

BEGIN
  -- RecipSqrt Implementation using Newton Method

  u_iv_stage_inst : uz_6ph_cost_ip_src_Sqrt_iv
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_3_1_0 => enb_3_1_0,
              ain => std_logic_vector(anorm_p),  -- ufix28_En28
              sel => std_logic_vector(sel),  -- ufix2
              xinit => xinit,  -- sfix54_En49
              inzero => inzero  -- ufix1
              );

  u_core_stage1_inst : uz_6ph_cost_ip_src_Sqrt_core
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_3_1_0 => enb_3_1_0,
              xin => xinit,  -- sfix54_En49
              ain => std_logic_vector(anorm_p2),  -- ufix28_En28
              sel => std_logic_vector(sel),  -- ufix2
              xout => xstage1,  -- sfix54_En49
              aout => astage1  -- ufix28_En28
              );

  u_core_stage2_inst : uz_6ph_cost_ip_src_Sqrt_core
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_3_1_0 => enb_3_1_0,
              xin => xstage1,  -- sfix54_En49
              ain => astage1,  -- ufix28_En28
              sel => std_logic_vector(sel),  -- ufix2
              xout => xstage2,  -- sfix54_En49
              aout => astage2  -- ufix28_En28
              );

  u_core_stage3_inst : uz_6ph_cost_ip_src_Sqrt_core
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_3_1_0 => enb_3_1_0,
              xin => xstage2,  -- sfix54_En49
              ain => astage2,  -- ufix28_En28
              sel => std_logic_vector(sel),  -- ufix2
              xout => xstage3,  -- sfix54_En49
              aout => astage3  -- ufix28_En28
              );

  din_unsigned <= unsigned(din);

  -- Input Normalization
  in_norm_anorm <= resize(din_unsigned, 28);
  in_norm_anorm_1 <= in_norm_anorm(27 DOWNTO 26);
  in_norm_anorm_2 <= in_norm_anorm(25 DOWNTO 24);
  in_norm_anorm_3 <= in_norm_anorm(23 DOWNTO 22);
  in_norm_anorm_4 <= in_norm_anorm(21 DOWNTO 20);
  in_norm_anorm_5 <= in_norm_anorm(19 DOWNTO 18);
  in_norm_anorm_6 <= in_norm_anorm(17 DOWNTO 16);
  in_norm_anorm_7 <= in_norm_anorm(15 DOWNTO 14);
  in_norm_anorm_8 <= in_norm_anorm(13 DOWNTO 12);
  in_norm_anorm_9 <= in_norm_anorm(11 DOWNTO 10);
  in_norm_anorm_10 <= in_norm_anorm(9 DOWNTO 8);
  in_norm_anorm_11 <= in_norm_anorm(7 DOWNTO 6);
  in_norm_anorm_12 <= in_norm_anorm(5 DOWNTO 4);
  in_norm_anorm_13 <= in_norm_anorm(3 DOWNTO 2);
  
  in_norm_out1 <= to_unsigned(16#00#, 5) WHEN (in_norm_anorm_1(1) OR in_norm_anorm_1(0)) = '1' ELSE
      to_unsigned(16#01#, 5) WHEN (in_norm_anorm_2(1) OR in_norm_anorm_2(0)) = '1' ELSE
      to_unsigned(16#02#, 5) WHEN (in_norm_anorm_3(1) OR in_norm_anorm_3(0)) = '1' ELSE
      to_unsigned(16#03#, 5) WHEN (in_norm_anorm_4(1) OR in_norm_anorm_4(0)) = '1' ELSE
      to_unsigned(16#04#, 5) WHEN (in_norm_anorm_5(1) OR in_norm_anorm_5(0)) = '1' ELSE
      to_unsigned(16#05#, 5) WHEN (in_norm_anorm_6(1) OR in_norm_anorm_6(0)) = '1' ELSE
      to_unsigned(16#06#, 5) WHEN (in_norm_anorm_7(1) OR in_norm_anorm_7(0)) = '1' ELSE
      to_unsigned(16#07#, 5) WHEN (in_norm_anorm_8(1) OR in_norm_anorm_8(0)) = '1' ELSE
      to_unsigned(16#08#, 5) WHEN (in_norm_anorm_9(1) OR in_norm_anorm_9(0)) = '1' ELSE
      to_unsigned(16#09#, 5) WHEN (in_norm_anorm_10(1) OR in_norm_anorm_10(0)) = '1' ELSE
      to_unsigned(16#0A#, 5) WHEN (in_norm_anorm_11(1) OR in_norm_anorm_11(0)) = '1' ELSE
      to_unsigned(16#0B#, 5) WHEN (in_norm_anorm_12(1) OR in_norm_anorm_12(0)) = '1' ELSE
      to_unsigned(16#0C#, 5) WHEN (in_norm_anorm_13(1) OR in_norm_anorm_13(0)) = '1' ELSE
      to_unsigned(16#0D#, 5);
  in_norm_cast <= resize(in_norm_out1 sll 1, 8);
  anorm <= in_norm_anorm sll to_integer(in_norm_cast);
  dynamicshift <= in_norm_out1;

  -- Pipeline register
  anorm_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        anorm_p <= to_unsigned(16#0000000#, 28);
      ELSIF enb = '1' THEN
        anorm_p <= anorm;
      END IF;
    END IF;
  END PROCESS anorm_reg_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2
  -- 
  -- Selector signal counter
  sel_cnt_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sel <= to_unsigned(16#0#, 2);
      ELSIF enb_3_1_0 = '1' THEN
        IF sel >= to_unsigned(16#2#, 2) THEN 
          sel <= to_unsigned(16#0#, 2);
        ELSE 
          sel <= sel + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS sel_cnt_process;


  -- Pipeline registers
  inzero_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        inzero_reg_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        inzero_reg_reg(0) <= inzero;
        inzero_reg_reg(1 TO 3) <= inzero_reg_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS inzero_reg_process;

  inzero_p <= inzero_reg_reg(3);

  -- Pipeline registers
  anorm_reg2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        anorm_p2 <= to_unsigned(16#0000000#, 28);
      ELSIF enb = '1' THEN
        anorm_p2 <= anorm_p;
      END IF;
    END IF;
  END PROCESS anorm_reg2_process;


  xstage3_signed <= signed(xstage3);

  constInf <= to_unsigned(16#7FFFFFF#, 27);

  -- Pipeline registers
  ds_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ds_reg_reg <= (OTHERS => to_unsigned(16#00#, 5));
      ELSIF enb = '1' THEN
        ds_reg_reg(0) <= dynamicshift;
        ds_reg_reg(1 TO 4) <= ds_reg_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS ds_reg_process;

  dynamicshift_p <= ds_reg_reg(4);

  -- Output Denormalization
  out_denorm_cast <= unsigned(resize(xstage3_signed, 67));
  out_denorm_cast_1 <= resize(dynamicshift_p, 8);
  out_denorm_cast_2 <= out_denorm_cast sll to_integer(out_denorm_cast_1);
  
  denormout <= "111111111111111111111111111" WHEN out_denorm_cast_2(66 DOWNTO 57) /= "0000000000" ELSE
      out_denorm_cast_2(56 DOWNTO 30);

  -- Zero input logic
  
  dout_tmp <= constInf WHEN inzero_p = '1' ELSE
      denormout;

  dout <= std_logic_vector(dout_tmp);

END rtl;

