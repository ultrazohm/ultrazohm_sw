// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_dot100 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_m_dout,
        p_m_empty_n,
        p_m_read,
        p_m_out_din,
        p_m_out_full_n,
        p_m_out_write,
        p_M_r_dout,
        p_M_r_empty_n,
        p_M_r_read,
        p_x_dout,
        p_x_empty_n,
        p_x_read,
        p_y_din,
        p_y_full_n,
        p_y_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_m_dout;
input   p_m_empty_n;
output   p_m_read;
output  [31:0] p_m_out_din;
input   p_m_out_full_n;
output   p_m_out_write;
input  [511:0] p_M_r_dout;
input   p_M_r_empty_n;
output   p_M_r_read;
input  [511:0] p_x_dout;
input   p_x_empty_n;
output   p_x_read;
output  [31:0] p_y_din;
input   p_y_full_n;
output   p_y_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_m_read;
reg p_m_out_write;
reg p_M_r_read;
reg p_x_read;
reg p_y_write;
reg p_n_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_m_blk_n;
wire    call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n;
reg    p_m_out_blk_n;
reg    p_n_blk_n;
reg   [31:0] p_m_read_reg_70;
reg    ap_block_state1;
reg   [31:0] p_n_read_reg_75;
wire    grp_dot_fu_48_p_x_read;
wire    grp_dot_fu_48_p_y_read;
wire   [31:0] grp_dot_fu_48_p_res_din;
wire    grp_dot_fu_48_p_res_write;
wire    grp_dot_fu_48_ap_start;
wire    grp_dot_fu_48_ap_done;
wire    grp_dot_fu_48_ap_ready;
wire    grp_dot_fu_48_ap_idle;
reg    grp_dot_fu_48_ap_continue;
reg    call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_start;
wire    call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_done;
wire    call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_idle;
wire    call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_ready;
wire   [31:0] call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_din;
wire    call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_write;
reg    grp_dot_fu_48_ap_start_reg;
reg    ap_block_state1_ignore_call13;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_dot_fu_48_ap_ready;
wire    ap_sync_grp_dot_fu_48_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_dot_fu_48_ap_ready;
reg    ap_sync_reg_grp_dot_fu_48_ap_done;
reg    ap_block_state1_ignore_call12;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_dot_fu_48_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dot_fu_48_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dot_fu_48_ap_done = 1'b0;
end

BGD_dot grp_dot_fu_48(
    .p_x_dout(p_M_r_dout),
    .p_x_empty_n(p_M_r_empty_n),
    .p_x_read(grp_dot_fu_48_p_x_read),
    .p_y_dout(p_x_dout),
    .p_y_empty_n(p_x_empty_n),
    .p_y_read(grp_dot_fu_48_p_y_read),
    .p_res_din(grp_dot_fu_48_p_res_din),
    .p_res_full_n(p_y_full_n),
    .p_res_write(grp_dot_fu_48_p_res_write),
    .p_n(p_n_read_reg_75),
    .p_iter(p_m_read_reg_70),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .p_n_ap_vld(1'b1),
    .p_iter_ap_vld(1'b1),
    .ap_start(grp_dot_fu_48_ap_start),
    .ap_done(grp_dot_fu_48_ap_done),
    .ap_ready(grp_dot_fu_48_ap_ready),
    .ap_idle(grp_dot_fu_48_ap_idle),
    .ap_continue(grp_dot_fu_48_ap_continue)
);

BGD_p_prop_scalar_p_m_proc call_ln59_p_prop_scalar_p_m_proc_fu_62(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_start),
    .ap_done(call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_done),
    .ap_idle(call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_idle),
    .ap_ready(call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_ready),
    .scalar_p_m(p_m_dout),
    .p_m_out_din(call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_din),
    .p_m_out_full_n(p_m_out_full_n),
    .p_m_out_write(call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_write),
    .p_m_out_blk_n(call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dot_fu_48_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_dot_fu_48_ap_done <= 1'b0;
        end else if ((grp_dot_fu_48_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dot_fu_48_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dot_fu_48_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_dot_fu_48_ap_ready <= 1'b0;
        end else if ((grp_dot_fu_48_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dot_fu_48_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dot_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if (((~((ap_start == 1'b0) | (call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (ap_sync_grp_dot_fu_48_ap_ready == 1'b0)))) begin
            grp_dot_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_dot_fu_48_ap_ready == 1'b1)) begin
            grp_dot_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_read_reg_70 <= p_m_dout;
        p_n_read_reg_75 <= p_n_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_start = 1'b1;
    end else begin
        call_ln59_p_prop_scalar_p_m_proc_fu_62_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        grp_dot_fu_48_ap_continue = 1'b1;
    end else begin
        grp_dot_fu_48_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_M_r_read = grp_dot_fu_48_p_x_read;
    end else begin
        p_M_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_blk_n = p_m_empty_n;
    end else begin
        p_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_out_blk_n = call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n;
    end else begin
        p_m_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_m_out_write = call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_write;
    end else begin
        p_m_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_read = 1'b1;
    end else begin
        p_m_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_x_read = grp_dot_fu_48_p_y_read;
    end else begin
        p_x_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_y_write = grp_dot_fu_48_p_res_write;
    end else begin
        p_y_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call12 = ((ap_start == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call13 = ((ap_start == 1'b0) | (call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_blk_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_dot_fu_48_ap_ready & ap_sync_grp_dot_fu_48_ap_done) == 1'b0);
end

assign ap_sync_grp_dot_fu_48_ap_done = (grp_dot_fu_48_ap_done | ap_sync_reg_grp_dot_fu_48_ap_done);

assign ap_sync_grp_dot_fu_48_ap_ready = (grp_dot_fu_48_ap_ready | ap_sync_reg_grp_dot_fu_48_ap_ready);

assign grp_dot_fu_48_ap_start = grp_dot_fu_48_ap_start_reg;

assign p_m_out_din = call_ln59_p_prop_scalar_p_m_proc_fu_62_p_m_out_din;

assign p_y_din = grp_dot_fu_48_p_res_din;

endmodule //BGD_dot100
