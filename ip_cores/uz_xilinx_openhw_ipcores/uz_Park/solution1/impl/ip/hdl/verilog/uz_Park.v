// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_Park_uz_Park,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3913,HLS_SYN_LUT=7249,HLS_VERSION=2022_2}" *)

module uz_Park (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_trafo_alpha,
        in_trafo_beta,
        in_inv_d,
        in_inv_q,
        theta_el,
        out_trafo_d,
        out_trafo_q,
        out_inv_alpha,
        out_inv_beta
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_trafo_alpha;
input  [31:0] in_trafo_beta;
input  [31:0] in_inv_d;
input  [31:0] in_inv_q;
input  [31:0] theta_el;
output  [31:0] out_trafo_d;
output  [31:0] out_trafo_q;
output  [31:0] out_inv_alpha;
output  [31:0] out_inv_beta;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_sin_or_cos_float_s_fu_112_ap_return;
reg   [31:0] sin_theta_reg_241;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_sin_or_cos_float_s_fu_128_ap_return;
reg   [31:0] cos_theta_reg_247;
wire   [31:0] xor_ln18_fu_204_p2;
reg   [31:0] xor_ln18_reg_255;
wire    ap_CS_fsm_state3;
wire   [31:0] bitcast_ln18_1_fu_210_p1;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] products_reg_290;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_165_p2;
reg   [31:0] products_1_reg_295;
wire   [31:0] grp_fu_170_p2;
reg   [31:0] products_2_reg_300;
wire   [31:0] grp_fu_175_p2;
reg   [31:0] products_3_reg_305;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] products_4_reg_310;
wire   [31:0] grp_fu_185_p2;
reg   [31:0] products_5_reg_315;
wire   [31:0] grp_fu_190_p2;
reg   [31:0] products_6_reg_320;
wire   [31:0] grp_fu_195_p2;
reg   [31:0] products_7_reg_325;
wire    grp_sin_or_cos_float_s_fu_112_ap_start;
wire    grp_sin_or_cos_float_s_fu_112_ap_done;
wire    grp_sin_or_cos_float_s_fu_112_ap_idle;
wire    grp_sin_or_cos_float_s_fu_112_ap_ready;
wire    grp_sin_or_cos_float_s_fu_128_ap_start;
wire    grp_sin_or_cos_float_s_fu_128_ap_done;
wire    grp_sin_or_cos_float_s_fu_128_ap_idle;
wire    grp_sin_or_cos_float_s_fu_128_ap_ready;
reg    grp_sin_or_cos_float_s_fu_112_ap_start_reg;
reg    grp_sin_or_cos_float_s_fu_128_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state6;
wire   [31:0] bitcast_ln18_fu_200_p1;
wire   [31:0] grp_fu_144_p2;
wire   [31:0] grp_fu_148_p2;
wire   [31:0] grp_fu_152_p2;
wire   [31:0] grp_fu_156_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_block_state2_on_subcall_done;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_sin_or_cos_float_s_fu_112_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_float_s_fu_128_ap_start_reg = 1'b0;
end

uz_Park_sin_or_cos_float_s grp_sin_or_cos_float_s_fu_112(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_float_s_fu_112_ap_start),
    .ap_done(grp_sin_or_cos_float_s_fu_112_ap_done),
    .ap_idle(grp_sin_or_cos_float_s_fu_112_ap_idle),
    .ap_ready(grp_sin_or_cos_float_s_fu_112_ap_ready),
    .t_in(theta_el),
    .do_cos(1'd0),
    .ap_return(grp_sin_or_cos_float_s_fu_112_ap_return)
);

uz_Park_sin_or_cos_float_s grp_sin_or_cos_float_s_fu_128(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_float_s_fu_128_ap_start),
    .ap_done(grp_sin_or_cos_float_s_fu_128_ap_done),
    .ap_idle(grp_sin_or_cos_float_s_fu_128_ap_idle),
    .ap_ready(grp_sin_or_cos_float_s_fu_128_ap_ready),
    .t_in(theta_el),
    .do_cos(1'd1),
    .ap_return(grp_sin_or_cos_float_s_fu_128_ap_return)
);

uz_Park_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(products_reg_290),
    .din1(products_1_reg_295),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

uz_Park_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(products_2_reg_300),
    .din1(products_3_reg_305),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

uz_Park_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(products_4_reg_310),
    .din1(products_5_reg_315),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

uz_Park_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(products_6_reg_320),
    .din1(products_7_reg_325),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

uz_Park_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cos_theta_reg_247),
    .din1(in_trafo_alpha),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

uz_Park_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sin_theta_reg_241),
    .din1(in_trafo_beta),
    .ce(1'b1),
    .dout(grp_fu_165_p2)
);

uz_Park_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln18_1_fu_210_p1),
    .din1(in_trafo_alpha),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

uz_Park_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cos_theta_reg_247),
    .din1(in_trafo_beta),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

uz_Park_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cos_theta_reg_247),
    .din1(in_inv_d),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

uz_Park_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln18_1_fu_210_p1),
    .din1(in_inv_q),
    .ce(1'b1),
    .dout(grp_fu_185_p2)
);

uz_Park_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sin_theta_reg_241),
    .din1(in_inv_d),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

uz_Park_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cos_theta_reg_247),
    .din1(in_inv_q),
    .ce(1'b1),
    .dout(grp_fu_195_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_float_s_fu_112_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_sin_or_cos_float_s_fu_112_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_float_s_fu_112_ap_ready == 1'b1)) begin
            grp_sin_or_cos_float_s_fu_112_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_float_s_fu_128_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_sin_or_cos_float_s_fu_128_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_float_s_fu_128_ap_ready == 1'b1)) begin
            grp_sin_or_cos_float_s_fu_128_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cos_theta_reg_247 <= grp_sin_or_cos_float_s_fu_128_ap_return;
        sin_theta_reg_241 <= grp_sin_or_cos_float_s_fu_112_ap_return;
        xor_ln18_reg_255 <= xor_ln18_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        products_1_reg_295 <= grp_fu_165_p2;
        products_2_reg_300 <= grp_fu_170_p2;
        products_3_reg_305 <= grp_fu_175_p2;
        products_4_reg_310 <= grp_fu_180_p2;
        products_5_reg_315 <= grp_fu_185_p2;
        products_6_reg_320 <= grp_fu_190_p2;
        products_7_reg_325 <= grp_fu_195_p2;
        products_reg_290 <= grp_fu_160_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_sin_or_cos_float_s_fu_128_ap_done == 1'b0) | (grp_sin_or_cos_float_s_fu_112_ap_done == 1'b0));
end

assign bitcast_ln18_1_fu_210_p1 = xor_ln18_reg_255;

assign bitcast_ln18_fu_200_p1 = grp_sin_or_cos_float_s_fu_112_ap_return;

assign grp_sin_or_cos_float_s_fu_112_ap_start = grp_sin_or_cos_float_s_fu_112_ap_start_reg;

assign grp_sin_or_cos_float_s_fu_128_ap_start = grp_sin_or_cos_float_s_fu_128_ap_start_reg;

assign out_inv_alpha = grp_fu_152_p2;

assign out_inv_beta = grp_fu_156_p2;

assign out_trafo_d = grp_fu_144_p2;

assign out_trafo_q = grp_fu_148_p2;

assign xor_ln18_fu_204_p2 = (bitcast_ln18_fu_200_p1 ^ 32'd2147483648);

endmodule //uz_Park
