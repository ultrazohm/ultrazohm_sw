// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_p_anonymous_namespace_preProcess_float_3u_unsigned_int_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_x_dout,
        p_x_empty_n,
        p_x_read,
        p_data_din,
        p_data_full_n,
        p_data_write,
        l_numElem_cast_loc_dout,
        l_numElem_cast_loc_empty_n,
        l_numElem_cast_loc_read,
        p_mulIters_dout,
        p_mulIters_empty_n,
        p_mulIters_read,
        l_numElem_cast_loc_out_din,
        l_numElem_cast_loc_out_full_n,
        l_numElem_cast_loc_out_write,
        p_mulIters_out_din,
        p_mulIters_out_full_n,
        p_mulIters_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state20 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [255:0] p_x_dout;
input   p_x_empty_n;
output   p_x_read;
output  [31:0] p_data_din;
input   p_data_full_n;
output   p_data_write;
input  [28:0] l_numElem_cast_loc_dout;
input   l_numElem_cast_loc_empty_n;
output   l_numElem_cast_loc_read;
input  [31:0] p_mulIters_dout;
input   p_mulIters_empty_n;
output   p_mulIters_read;
output  [28:0] l_numElem_cast_loc_out_din;
input   l_numElem_cast_loc_out_full_n;
output   l_numElem_cast_loc_out_write;
output  [31:0] p_mulIters_out_din;
input   p_mulIters_out_full_n;
output   p_mulIters_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_x_read;
reg p_data_write;
reg l_numElem_cast_loc_read;
reg p_mulIters_read;
reg l_numElem_cast_loc_out_write;
reg p_mulIters_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_x_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln50_reg_308;
reg    p_data_blk_n;
reg    ap_enable_reg_pp0_iter17;
reg   [0:0] icmp_ln50_reg_308_pp0_iter16_reg;
reg    l_numElem_cast_loc_blk_n;
reg    p_mulIters_blk_n;
reg    l_numElem_cast_loc_out_blk_n;
reg    p_mulIters_out_blk_n;
reg   [60:0] indvar_flatten_reg_129;
wire   [60:0] mul_ln43_fu_176_p2;
reg   [60:0] mul_ln43_reg_303;
reg    ap_block_state1;
wire   [0:0] icmp_ln50_fu_182_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
reg    ap_block_state19_pp0_stage0_iter17;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln50_reg_308_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter2_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter3_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter4_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter5_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter6_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter7_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter8_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter9_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter10_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter11_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter12_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter13_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter14_reg;
reg   [0:0] icmp_ln50_reg_308_pp0_iter15_reg;
wire   [60:0] add_ln50_fu_187_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] trunc_ln674_fu_193_p1;
reg   [31:0] trunc_ln674_reg_317;
reg   [31:0] p_Result_i_i_reg_322;
reg   [31:0] p_Result_28_i_i_reg_327;
reg   [31:0] p_Result_29_i_i_reg_332;
reg   [31:0] p_Result_30_i_i_reg_337;
reg   [31:0] p_Result_31_i_i_reg_342;
reg   [31:0] p_Result_32_i_i_reg_347;
reg   [31:0] p_Result_33_i_i_reg_352;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] add_i_i_i_i_i_reg_397;
wire   [31:0] grp_fu_144_p2;
reg   [31:0] add_i2_i_i_i_i_reg_402;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] add_i_i2_i_i_i_reg_407;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] add_i2_i5_i_i_i_reg_412;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] add_i_i_i_i_reg_417;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] add_i6_i_i_i_reg_422;
wire   [31:0] grp_fu_164_p2;
reg   [31:0] l_sum_reg_427;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_140_p0;
wire   [31:0] grp_fu_140_p1;
wire   [31:0] grp_fu_144_p0;
wire   [31:0] grp_fu_144_p1;
wire   [31:0] grp_fu_148_p0;
wire   [31:0] grp_fu_148_p1;
wire   [31:0] grp_fu_152_p0;
wire   [31:0] grp_fu_152_p1;
wire   [28:0] mul_ln43_fu_176_p0;
wire   [31:0] mul_ln43_fu_176_p1;
reg    grp_fu_140_ce;
reg    grp_fu_144_ce;
reg    grp_fu_148_ce;
reg    grp_fu_152_ce;
reg    grp_fu_156_ce;
reg    grp_fu_160_ce;
reg    grp_fu_164_ce;
wire    ap_CS_fsm_state20;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [60:0] mul_ln43_fu_176_p00;
wire   [60:0] mul_ln43_fu_176_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
end

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U198(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_140_p0),
    .din1(grp_fu_140_p1),
    .ce(grp_fu_140_ce),
    .dout(grp_fu_140_p2)
);

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U199(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_144_p0),
    .din1(grp_fu_144_p1),
    .ce(grp_fu_144_ce),
    .dout(grp_fu_144_p2)
);

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U200(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_148_p0),
    .din1(grp_fu_148_p1),
    .ce(grp_fu_148_ce),
    .dout(grp_fu_148_p2)
);

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U201(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_152_p0),
    .din1(grp_fu_152_p1),
    .ce(grp_fu_152_ce),
    .dout(grp_fu_152_p2)
);

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U202(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_i_i_i_i_i_reg_397),
    .din1(add_i2_i_i_i_i_reg_402),
    .ce(grp_fu_156_ce),
    .dout(grp_fu_156_p2)
);

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U203(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_i_i2_i_i_i_reg_407),
    .din1(add_i2_i5_i_i_i_reg_412),
    .ce(grp_fu_160_ce),
    .dout(grp_fu_160_p2)
);

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U204(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_i_i_i_i_reg_417),
    .din1(add_i6_i_i_i_reg_422),
    .ce(grp_fu_164_ce),
    .dout(grp_fu_164_p2)
);

BGD_mul_29ns_32ns_61_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 61 ))
mul_29ns_32ns_61_1_1_U205(
    .din0(mul_ln43_fu_176_p0),
    .din1(mul_ln43_fu_176_p1),
    .dout(mul_ln43_fu_176_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter17 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln50_fu_182_p2 == 1'd0))) begin
        indvar_flatten_reg_129 <= add_ln50_fu_187_p2;
    end else if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_129 <= 61'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_reg_308_pp0_iter5_reg == 1'd0))) begin
        add_i2_i5_i_i_i_reg_412 <= grp_fu_152_p2;
        add_i2_i_i_i_i_reg_402 <= grp_fu_144_p2;
        add_i_i2_i_i_i_reg_407 <= grp_fu_148_p2;
        add_i_i_i_i_i_reg_397 <= grp_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_reg_308_pp0_iter10_reg == 1'd0))) begin
        add_i6_i_i_i_reg_422 <= grp_fu_160_p2;
        add_i_i_i_i_reg_417 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_308 <= icmp_ln50_fu_182_p2;
        icmp_ln50_reg_308_pp0_iter1_reg <= icmp_ln50_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln50_reg_308_pp0_iter10_reg <= icmp_ln50_reg_308_pp0_iter9_reg;
        icmp_ln50_reg_308_pp0_iter11_reg <= icmp_ln50_reg_308_pp0_iter10_reg;
        icmp_ln50_reg_308_pp0_iter12_reg <= icmp_ln50_reg_308_pp0_iter11_reg;
        icmp_ln50_reg_308_pp0_iter13_reg <= icmp_ln50_reg_308_pp0_iter12_reg;
        icmp_ln50_reg_308_pp0_iter14_reg <= icmp_ln50_reg_308_pp0_iter13_reg;
        icmp_ln50_reg_308_pp0_iter15_reg <= icmp_ln50_reg_308_pp0_iter14_reg;
        icmp_ln50_reg_308_pp0_iter16_reg <= icmp_ln50_reg_308_pp0_iter15_reg;
        icmp_ln50_reg_308_pp0_iter2_reg <= icmp_ln50_reg_308_pp0_iter1_reg;
        icmp_ln50_reg_308_pp0_iter3_reg <= icmp_ln50_reg_308_pp0_iter2_reg;
        icmp_ln50_reg_308_pp0_iter4_reg <= icmp_ln50_reg_308_pp0_iter3_reg;
        icmp_ln50_reg_308_pp0_iter5_reg <= icmp_ln50_reg_308_pp0_iter4_reg;
        icmp_ln50_reg_308_pp0_iter6_reg <= icmp_ln50_reg_308_pp0_iter5_reg;
        icmp_ln50_reg_308_pp0_iter7_reg <= icmp_ln50_reg_308_pp0_iter6_reg;
        icmp_ln50_reg_308_pp0_iter8_reg <= icmp_ln50_reg_308_pp0_iter7_reg;
        icmp_ln50_reg_308_pp0_iter9_reg <= icmp_ln50_reg_308_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_reg_308_pp0_iter15_reg == 1'd0))) begin
        l_sum_reg_427 <= grp_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln43_reg_303 <= mul_ln43_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_28_i_i_reg_327 <= {{p_x_dout[95:64]}};
        p_Result_29_i_i_reg_332 <= {{p_x_dout[127:96]}};
        p_Result_30_i_i_reg_337 <= {{p_x_dout[159:128]}};
        p_Result_31_i_i_reg_342 <= {{p_x_dout[191:160]}};
        p_Result_32_i_i_reg_347 <= {{p_x_dout[223:192]}};
        p_Result_33_i_i_reg_352 <= {{p_x_dout[255:224]}};
        p_Result_i_i_reg_322 <= {{p_x_dout[63:32]}};
        trunc_ln674_reg_317 <= trunc_ln674_fu_193_p1;
    end
end

always @ (*) begin
    if ((icmp_ln50_fu_182_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_140_ce = 1'b1;
    end else begin
        grp_fu_140_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_144_ce = 1'b1;
    end else begin
        grp_fu_144_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_148_ce = 1'b1;
    end else begin
        grp_fu_148_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_152_ce = 1'b1;
    end else begin
        grp_fu_152_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_156_ce = 1'b1;
    end else begin
        grp_fu_156_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_160_ce = 1'b1;
    end else begin
        grp_fu_160_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_164_ce = 1'b1;
    end else begin
        grp_fu_164_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_numElem_cast_loc_blk_n = l_numElem_cast_loc_empty_n;
    end else begin
        l_numElem_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_numElem_cast_loc_out_blk_n = l_numElem_cast_loc_out_full_n;
    end else begin
        l_numElem_cast_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_numElem_cast_loc_out_write = 1'b1;
    end else begin
        l_numElem_cast_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_numElem_cast_loc_read = 1'b1;
    end else begin
        l_numElem_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_308_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        p_data_blk_n = p_data_full_n;
    end else begin
        p_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_308_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_data_write = 1'b1;
    end else begin
        p_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_blk_n = p_mulIters_empty_n;
    end else begin
        p_mulIters_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_out_blk_n = p_mulIters_out_full_n;
    end else begin
        p_mulIters_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_out_write = 1'b1;
    end else begin
        p_mulIters_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_mulIters_read = 1'b1;
    end else begin
        p_mulIters_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_x_blk_n = p_x_empty_n;
    end else begin
        p_x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_x_read = 1'b1;
    end else begin
        p_x_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln50_fu_182_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln50_fu_182_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_187_p2 = (indvar_flatten_reg_129 + 61'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln50_reg_308_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (p_data_full_n == 1'b0)) | ((icmp_ln50_reg_308 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_x_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln50_reg_308_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (p_data_full_n == 1'b0)) | ((icmp_ln50_reg_308 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_x_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln50_reg_308_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (p_data_full_n == 1'b0)) | ((icmp_ln50_reg_308 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_x_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (p_mulIters_out_full_n == 1'b0) | (l_numElem_cast_loc_out_full_n == 1'b0) | (p_mulIters_empty_n == 1'b0) | (l_numElem_cast_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter17 = ((icmp_ln50_reg_308_pp0_iter16_reg == 1'd0) & (p_data_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln50_reg_308 == 1'd0) & (p_x_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_140_p0 = trunc_ln674_reg_317;

assign grp_fu_140_p1 = p_Result_i_i_reg_322;

assign grp_fu_144_p0 = p_Result_28_i_i_reg_327;

assign grp_fu_144_p1 = p_Result_29_i_i_reg_332;

assign grp_fu_148_p0 = p_Result_30_i_i_reg_337;

assign grp_fu_148_p1 = p_Result_31_i_i_reg_342;

assign grp_fu_152_p0 = p_Result_32_i_i_reg_347;

assign grp_fu_152_p1 = p_Result_33_i_i_reg_352;

assign icmp_ln50_fu_182_p2 = ((indvar_flatten_reg_129 == mul_ln43_reg_303) ? 1'b1 : 1'b0);

assign l_numElem_cast_loc_out_din = l_numElem_cast_loc_dout;

assign mul_ln43_fu_176_p0 = mul_ln43_fu_176_p00;

assign mul_ln43_fu_176_p00 = l_numElem_cast_loc_dout;

assign mul_ln43_fu_176_p1 = mul_ln43_fu_176_p10;

assign mul_ln43_fu_176_p10 = p_mulIters_dout;

assign p_data_din = l_sum_reg_427;

assign p_mulIters_out_din = p_mulIters_dout;

assign start_out = real_start;

assign trunc_ln674_fu_193_p1 = p_x_dout[31:0];

endmodule //BGD_p_anonymous_namespace_preProcess_float_3u_unsigned_int_float_s
