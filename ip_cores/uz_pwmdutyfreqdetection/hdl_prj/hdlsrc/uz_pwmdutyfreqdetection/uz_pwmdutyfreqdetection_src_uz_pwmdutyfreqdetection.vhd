-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pwmdutyfreqdetection\uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection.vhd
-- Created: 2023-03-14 13:55:30
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 4.34783e-10
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- AXI_period                    ce_out        1e-08
-- AXI_hightime                  ce_out        1e-08
-- AXI_lowtime                   ce_out        1e-08
-- AXI_dutycyc                   ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection
-- Source Path: uz_pwmdutyfreqdetection/uz_pwmdutyfreqdetection
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection_pkg.ALL;

ENTITY uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        pwm_in                            :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        AXI_period                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_hightime                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_lowtime                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_dutycyc                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
        );
END uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection;


ARCHITECTURE rtl OF uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection IS

  -- Component Declarations
  COMPONENT uz_pwmdutyfreqdetection_src_Detect_Fall_Nonpositive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_23_0                      :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pwmdutyfreqdetection_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_23_0                      :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pwmdutyfreqdetection_src_Reciprocal
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_23_0                      :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pwmdutyfreqdetection_src_Detect_Fall_Nonpositive1
    USE ENTITY work.uz_pwmdutyfreqdetection_src_Detect_Fall_Nonpositive1(rtl);

  FOR ALL : uz_pwmdutyfreqdetection_src_Detect_Rise_Positive1
    USE ENTITY work.uz_pwmdutyfreqdetection_src_Detect_Rise_Positive1(rtl);

  FOR ALL : uz_pwmdutyfreqdetection_src_Reciprocal
    USE ENTITY work.uz_pwmdutyfreqdetection_src_Reciprocal(rtl);

  -- Signals
  SIGNAL enb_1_23_0                       : std_logic;
  SIGNAL Delay15_out1                     : std_logic;
  SIGNAL Detect_Fall_Nonpositive1_out1    : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL HDL_Counter1_ctrl_const_out      : std_logic;
  SIGNAL HDL_Counter1_ctrl_delay_out      : std_logic;
  SIGNAL HDL_Counter1_Initial_Val_out     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Detect_Rise_Positive1_out1       : std_logic;
  SIGNAL count_step                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL count_from                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_reset                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Counter1_out1                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count                            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_1                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Counter1_out                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch10_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay9_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Switch11_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay11_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Sum1_out1                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay10_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch1_reg                  : vector_of_unsigned32(0 TO 17);  -- ufix32 [18]
  SIGNAL Delay10_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay12_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch2_reg                  : vector_of_unsigned32(0 TO 17);  -- ufix32 [18]
  SIGNAL Delay12_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay13_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch3_reg                  : vector_of_unsigned32(0 TO 17);  -- ufix32 [18]
  SIGNAL Delay13_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch_reg                   : vector_of_unsigned32(0 TO 17);  -- ufix32 [18]
  SIGNAL Switch10_out1_1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Reciprocal_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Reciprocal_out1_unsigned         : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Product1_mul_temp                : unsigned(63 DOWNTO 0);  -- ufix64_En31
  SIGNAL Product1_out1                    : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Delay14_out1                     : unsigned(31 DOWNTO 0);  -- ufix32_En31

BEGIN
  u_Detect_Fall_Nonpositive1 : uz_pwmdutyfreqdetection_src_Detect_Fall_Nonpositive1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => clk_enable,
              U => Delay15_out1,
              Y => Detect_Fall_Nonpositive1_out1
              );

  u_Detect_Rise_Positive1 : uz_pwmdutyfreqdetection_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => clk_enable,
              U => Delay15_out1,
              Y => Detect_Rise_Positive1_out1
              );

  u_Reciprocal : uz_pwmdutyfreqdetection_src_Reciprocal
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => clk_enable,
              din => std_logic_vector(Sum1_out1),  -- uint32
              dout => Reciprocal_out1  -- ufix32_En31
              );

  enb_1_23_0 <= clk_enable;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= '0';
      ELSIF enb_1_23_0 = '1' THEN
        Delay15_out1 <= pwm_in;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  
  switch_compare_1 <= '1' WHEN Detect_Fall_Nonpositive1_out1 > '0' ELSE
      '0';

  HDL_Counter1_ctrl_const_out <= '1';

  HDL_Counter1_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter1_ctrl_delay_out <= '0';
      ELSIF enb_1_23_0 = '1' THEN
        HDL_Counter1_ctrl_delay_out <= HDL_Counter1_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_ctrl_delay_process;


  HDL_Counter1_Initial_Val_out <= to_unsigned(1, 32);

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2500000
  count_step <= to_unsigned(1, 32);

  Logical_Operator3_out1 <= Detect_Rise_Positive1_out1 OR Detect_Fall_Nonpositive1_out1;

  count_from <= to_unsigned(1, 32);

  count_reset <= to_unsigned(1, 32);

  count <= HDL_Counter1_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter1_out1 = to_unsigned(2500000, 32) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= count_value WHEN Logical_Operator3_out1 = '0' ELSE
      count_reset;

  HDL_Counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter1_out <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        HDL_Counter1_out <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  HDL_Counter1_out1 <= HDL_Counter1_Initial_Val_out WHEN HDL_Counter1_ctrl_delay_out = '0' ELSE
      HDL_Counter1_out;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Delay9_out1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch10_out1 <= Delay9_out1 WHEN switch_compare_1 = '0' ELSE
      HDL_Counter1_out1;

  
  switch_compare_1_1 <= '1' WHEN Detect_Rise_Positive1_out1 > '0' ELSE
      '0';

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Delay11_out1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  Switch11_out1 <= Delay11_out1 WHEN switch_compare_1_1 = '0' ELSE
      HDL_Counter1_out1;

  Sum1_out1 <= Switch10_out1 + Switch11_out1;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Delay10_out1 <= Sum1_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb_1_23_0 = '1' THEN
        delayMatch1_reg(0) <= Delay10_out1;
        delayMatch1_reg(1 TO 17) <= delayMatch1_reg(0 TO 16);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Delay10_out1_1 <= delayMatch1_reg(17);

  AXI_period <= std_logic_vector(Delay10_out1_1);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Delay12_out1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch2_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb_1_23_0 = '1' THEN
        delayMatch2_reg(0) <= Delay12_out1;
        delayMatch2_reg(1 TO 17) <= delayMatch2_reg(0 TO 16);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Delay12_out1_1 <= delayMatch2_reg(17);

  AXI_hightime <= std_logic_vector(Delay12_out1_1);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Delay13_out1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb_1_23_0 = '1' THEN
        delayMatch3_reg(0) <= Delay13_out1;
        delayMatch3_reg(1 TO 17) <= delayMatch3_reg(0 TO 16);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Delay13_out1_1 <= delayMatch3_reg(17);

  AXI_lowtime <= std_logic_vector(Delay13_out1_1);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb_1_23_0 = '1' THEN
        delayMatch_reg(0) <= Switch10_out1;
        delayMatch_reg(1 TO 17) <= delayMatch_reg(0 TO 16);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Switch10_out1_1 <= delayMatch_reg(17);

  Reciprocal_out1_unsigned <= unsigned(Reciprocal_out1);

  Product1_mul_temp <= Switch10_out1_1 * Reciprocal_out1_unsigned;
  Product1_out1 <= Product1_mul_temp(31 DOWNTO 0);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        Delay14_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  AXI_dutycyc <= std_logic_vector(Delay14_out1);

  ce_out <= clk_enable;

END rtl;

