-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_p_anonymous_namespace_postProcess_float_2u_unsigned_int_50 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    l_pad_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    l_pad_empty_n : IN STD_LOGIC;
    l_pad_read : OUT STD_LOGIC;
    p_sum_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_sum_full_n : IN STD_LOGIC;
    p_sum_write : OUT STD_LOGIC;
    l_numElem_cast_loc_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    l_numElem_cast_loc_empty_n : IN STD_LOGIC;
    l_numElem_cast_loc_read : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC );
end;


architecture behav of MLP_p_anonymous_namespace_postProcess_float_2u_unsigned_int_50 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv61_0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv31_3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv61_1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal l_pad_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln69_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_sum_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal icmp_ln79_reg_274 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_274_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal l_numElem_cast_loc_blk_n : STD_LOGIC;
    signal p_n_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_89 : STD_LOGIC_VECTOR (60 downto 0);
    signal i_reg_101 : STD_LOGIC_VECTOR (28 downto 0);
    signal l_finalSum_reg_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln_fu_145_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln_reg_250 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sext_ln69_fu_161_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln69_reg_255 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln61_fu_173_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal mul_ln61_reg_260 : STD_LOGIC_VECTOR (60 downto 0);
    signal icmp_ln69_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_265_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_265_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_265_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_265_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_269_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_269_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_269_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_274_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_274_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_274_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_274_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_206_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_13_reg_278 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln69_fu_212_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln69_reg_283 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i2_i_i_i_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_i_i_i_i_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal add_i_i_i_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal select_ln69_1_fu_238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_finalSum_1_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter4_state18 : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten_phi_fu_93_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_phi_mux_i_phi_fu_105_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_phi_mux_l_finalSum_phi_fu_116_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_123_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_numElems_cast_i_i_fu_135_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln68_fu_139_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub7_i_i_fu_155_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln61_fu_173_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln61_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln69_fu_189_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln71_fu_197_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_123_ce : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln61_fu_173_p00 : STD_LOGIC_VECTOR (60 downto 0);
    signal mul_ln61_fu_173_p10 : STD_LOGIC_VECTOR (60 downto 0);

    component MLP_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_mul_29ns_32ns_61_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (60 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U235 : component MLP_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_123_p0,
        din1 => grp_fu_123_p1,
        ce => grp_fu_123_ce,
        dout => grp_fu_123_p2);

    mul_29ns_32ns_61_1_1_U236 : component MLP_mul_29ns_32ns_61_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 32,
        dout_WIDTH => 61)
    port map (
        din0 => mul_ln61_fu_173_p0,
        din1 => mul_ln61_fu_173_p1,
        dout => mul_ln61_fu_173_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter4_state18))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter4_state18) and (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((not(((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_101 <= i_13_reg_278;
            elsif ((not(((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_101 <= ap_const_lv29_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_89 <= add_ln69_reg_283;
            elsif ((not(((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_89 <= ap_const_lv61_0;
            end if; 
        end if;
    end process;

    l_finalSum_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_reg_265_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                l_finalSum_reg_112 <= grp_fu_123_p2;
            elsif ((not(((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l_finalSum_reg_112 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln69_reg_265_pp0_iter1_reg = ap_const_lv1_0))) then
                add_i2_i_i_i_reg_308 <= grp_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_265_pp0_iter2_reg = ap_const_lv1_0))) then
                add_i_i_i_i_reg_313 <= grp_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln69_reg_265_pp0_iter3_reg = ap_const_lv1_0))) then
                add_i_i_i_reg_318 <= grp_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln69_reg_283 <= add_ln69_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_fu_179_p2 = ap_const_lv1_0))) then
                i_13_reg_278 <= i_13_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln69_reg_265 <= icmp_ln69_fu_179_p2;
                icmp_ln69_reg_265_pp0_iter1_reg <= icmp_ln69_reg_265;
                icmp_ln69_reg_265_pp0_iter2_reg <= icmp_ln69_reg_265_pp0_iter1_reg;
                icmp_ln69_reg_265_pp0_iter3_reg <= icmp_ln69_reg_265_pp0_iter2_reg;
                icmp_ln69_reg_265_pp0_iter4_reg <= icmp_ln69_reg_265_pp0_iter3_reg;
                icmp_ln71_reg_269_pp0_iter1_reg <= icmp_ln71_reg_269;
                icmp_ln71_reg_269_pp0_iter2_reg <= icmp_ln71_reg_269_pp0_iter1_reg;
                icmp_ln71_reg_269_pp0_iter3_reg <= icmp_ln71_reg_269_pp0_iter2_reg;
                icmp_ln79_reg_274_pp0_iter1_reg <= icmp_ln79_reg_274;
                icmp_ln79_reg_274_pp0_iter2_reg <= icmp_ln79_reg_274_pp0_iter1_reg;
                icmp_ln79_reg_274_pp0_iter3_reg <= icmp_ln79_reg_274_pp0_iter2_reg;
                icmp_ln79_reg_274_pp0_iter4_reg <= icmp_ln79_reg_274_pp0_iter3_reg;
                icmp_ln79_reg_274_pp0_iter5_reg <= icmp_ln79_reg_274_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_fu_179_p2 = ap_const_lv1_0))) then
                icmp_ln71_reg_269 <= icmp_ln71_fu_184_p2;
                icmp_ln79_reg_274 <= icmp_ln79_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_reg_265_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                l_finalSum_1_reg_328 <= grp_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln61_reg_260 <= mul_ln61_fu_173_p2;
                sext_ln69_reg_255 <= sext_ln69_fu_161_p1;
                trunc_ln_reg_250 <= add_ln68_fu_139_p2(30 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_127 <= l_pad_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_131 <= l_pad_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n, p_n_empty_n, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter3, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter4, ap_condition_pp0_exit_iter4_state18, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter4_state18))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter4_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln68_fu_139_p2 <= std_logic_vector(unsigned(p_numElems_cast_i_i_fu_135_p1) + unsigned(ap_const_lv31_3));
    add_ln69_fu_212_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_89) + unsigned(ap_const_lv61_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state24 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(l_pad_empty_n, icmp_ln69_reg_265, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_265 = ap_const_lv1_0) and (l_pad_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(l_pad_empty_n, icmp_ln69_reg_265, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_265 = ap_const_lv1_0) and (l_pad_empty_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(l_pad_empty_n, p_sum_full_n, ap_enable_reg_pp0_iter0, icmp_ln69_reg_265, ap_enable_reg_pp0_iter5, icmp_ln79_reg_274_pp0_iter5_reg)
    begin
                ap_block_pp0_stage1_01001 <= (((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (l_pad_empty_n = ap_const_logic_0)) or ((p_sum_full_n = ap_const_logic_0) and (icmp_ln79_reg_274_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(l_pad_empty_n, p_sum_full_n, ap_enable_reg_pp0_iter0, icmp_ln69_reg_265, ap_enable_reg_pp0_iter5, icmp_ln79_reg_274_pp0_iter5_reg)
    begin
                ap_block_pp0_stage1_11001 <= (((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (l_pad_empty_n = ap_const_logic_0)) or ((p_sum_full_n = ap_const_logic_0) and (icmp_ln79_reg_274_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(l_pad_empty_n, p_sum_full_n, ap_enable_reg_pp0_iter0, icmp_ln69_reg_265, ap_enable_reg_pp0_iter5, icmp_ln79_reg_274_pp0_iter5_reg)
    begin
                ap_block_pp0_stage1_subdone <= (((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (l_pad_empty_n = ap_const_logic_0)) or ((p_sum_full_n = ap_const_logic_0) and (icmp_ln79_reg_274_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(l_pad_empty_n, ap_enable_reg_pp0_iter0, icmp_ln69_reg_265)
    begin
                ap_block_pp0_stage2_11001 <= ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (l_pad_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(l_pad_empty_n, ap_enable_reg_pp0_iter0, icmp_ln69_reg_265)
    begin
                ap_block_pp0_stage2_subdone <= ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (l_pad_empty_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(l_pad_empty_n, ap_enable_reg_pp0_iter0, icmp_ln69_reg_265)
    begin
                ap_block_pp0_stage3_11001 <= ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (l_pad_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(l_pad_empty_n, ap_enable_reg_pp0_iter0, icmp_ln69_reg_265)
    begin
                ap_block_pp0_stage3_subdone <= ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (l_pad_empty_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, l_numElem_cast_loc_empty_n, p_n_empty_n)
    begin
                ap_block_state1 <= ((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_pp0_stage1_iter5_assign_proc : process(p_sum_full_n, icmp_ln79_reg_274_pp0_iter5_reg)
    begin
                ap_block_state23_pp0_stage1_iter5 <= ((p_sum_full_n = ap_const_logic_0) and (icmp_ln79_reg_274_pp0_iter5_reg = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(l_pad_empty_n, icmp_ln69_reg_265)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln69_reg_265 = ap_const_lv1_0) and (l_pad_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage2_iter0_assign_proc : process(l_pad_empty_n, icmp_ln69_reg_265)
    begin
                ap_block_state4_pp0_stage2_iter0 <= ((icmp_ln69_reg_265 = ap_const_lv1_0) and (l_pad_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage3_iter0_assign_proc : process(l_pad_empty_n, icmp_ln69_reg_265)
    begin
                ap_block_state5_pp0_stage3_iter0 <= ((icmp_ln69_reg_265 = ap_const_lv1_0) and (l_pad_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage0_iter1_assign_proc : process(l_pad_empty_n, icmp_ln69_reg_265)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((icmp_ln69_reg_265 = ap_const_lv1_0) and (l_pad_empty_n = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter4_state18_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter4_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter4_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln69_reg_265, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((icmp_ln69_reg_265 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_105_p4_assign_proc : process(icmp_ln69_reg_265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_reg_101, i_13_reg_278)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_105_p4 <= i_13_reg_278;
        else 
            ap_phi_mux_i_phi_fu_105_p4 <= i_reg_101;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_93_p4_assign_proc : process(icmp_ln69_reg_265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, indvar_flatten_reg_89, add_ln69_reg_283)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_93_p4 <= add_ln69_reg_283;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_93_p4 <= indvar_flatten_reg_89;
        end if; 
    end process;


    ap_phi_mux_l_finalSum_phi_fu_116_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, l_finalSum_reg_112, icmp_ln69_reg_265_pp0_iter4_reg, grp_fu_123_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_reg_265_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_phi_mux_l_finalSum_phi_fu_116_p4 <= grp_fu_123_p2;
        else 
            ap_phi_mux_l_finalSum_phi_fu_116_p4 <= l_finalSum_reg_112;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_123_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_123_ce <= ap_const_logic_1;
        else 
            grp_fu_123_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_123_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_6_fu_223_p1, tmp_8_fu_233_p1, add_i_i_i_i_reg_313, ap_enable_reg_pp0_iter2, select_ln69_1_fu_238_p3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_123_p0 <= select_ln69_1_fu_238_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_123_p0 <= add_i_i_i_i_reg_313;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_123_p0 <= tmp_8_fu_233_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_123_p0 <= tmp_6_fu_223_p1;
        else 
            grp_fu_123_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_123_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_fu_218_p1, tmp_7_fu_228_p1, add_i2_i_i_i_reg_308, ap_enable_reg_pp0_iter2, add_i_i_i_reg_318, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_123_p1 <= add_i_i_i_reg_318;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_123_p1 <= add_i2_i_i_i_reg_308;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_123_p1 <= tmp_7_fu_228_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_123_p1 <= tmp_fu_218_p1;
        else 
            grp_fu_123_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_13_fu_206_p2 <= std_logic_vector(unsigned(select_ln69_fu_189_p3) + unsigned(ap_const_lv29_1));
    icmp_ln69_fu_179_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_93_p4 = mul_ln61_reg_260) else "0";
    icmp_ln71_fu_184_p2 <= "1" when (ap_phi_mux_i_phi_fu_105_p4 = trunc_ln_reg_250) else "0";
    icmp_ln79_fu_201_p2 <= "1" when (zext_ln71_fu_197_p1 = sext_ln69_reg_255) else "0";

    l_numElem_cast_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l_numElem_cast_loc_blk_n <= l_numElem_cast_loc_empty_n;
        else 
            l_numElem_cast_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l_numElem_cast_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n, p_n_empty_n)
    begin
        if ((not(((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l_numElem_cast_loc_read <= ap_const_logic_1;
        else 
            l_numElem_cast_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    l_pad_blk_n_assign_proc : process(l_pad_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln69_reg_265, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            l_pad_blk_n <= l_pad_empty_n;
        else 
            l_pad_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l_pad_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln69_reg_265, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln69_reg_265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            l_pad_read <= ap_const_logic_1;
        else 
            l_pad_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln61_fu_173_p0 <= mul_ln61_fu_173_p00(29 - 1 downto 0);
    mul_ln61_fu_173_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_145_p4),61));
    mul_ln61_fu_173_p1 <= mul_ln61_fu_173_p10(32 - 1 downto 0);
    mul_ln61_fu_173_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_n_dout),61));

    p_n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_loc_empty_n, p_n_empty_n)
    begin
        if ((not(((p_n_empty_n = ap_const_logic_0) or (l_numElem_cast_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;

    p_numElems_cast_i_i_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_numElem_cast_loc_dout),31));

    p_sum_blk_n_assign_proc : process(p_sum_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter5, icmp_ln79_reg_274_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln79_reg_274_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            p_sum_blk_n <= p_sum_full_n;
        else 
            p_sum_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_sum_din <= l_finalSum_1_reg_328;

    p_sum_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter5, icmp_ln79_reg_274_pp0_iter5_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln79_reg_274_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            p_sum_write <= ap_const_logic_1;
        else 
            p_sum_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln69_1_fu_238_p3 <= 
        ap_const_lv32_0 when (icmp_ln71_reg_269_pp0_iter3_reg(0) = '1') else 
        ap_phi_mux_l_finalSum_phi_fu_116_p4;
    select_ln69_fu_189_p3 <= 
        ap_const_lv29_0 when (icmp_ln71_fu_184_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_105_p4;
        sext_ln69_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub7_i_i_fu_155_p2),30));

    sub7_i_i_fu_155_p2 <= std_logic_vector(unsigned(trunc_ln_fu_145_p4) + unsigned(ap_const_lv29_1FFFFFFF));
    tmp_6_fu_223_p1 <= reg_131;
    tmp_7_fu_228_p1 <= reg_127;
    tmp_8_fu_233_p1 <= reg_131;
    tmp_fu_218_p1 <= reg_127;
    trunc_ln_fu_145_p4 <= add_ln68_fu_139_p2(30 downto 2);
    zext_ln71_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln69_fu_189_p3),30));
end behav;
