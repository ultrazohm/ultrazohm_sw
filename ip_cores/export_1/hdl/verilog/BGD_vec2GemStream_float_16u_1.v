// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_vec2GemStream_float_16u_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_m_dout,
        p_m_empty_n,
        p_m_read,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_in_address1,
        p_in_ce1,
        p_in_q1,
        p_in_offset_dout,
        p_in_offset_empty_n,
        p_in_offset_read
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_pp0_stage0 = 18'd2;
parameter    ap_ST_fsm_pp0_stage1 = 18'd4;
parameter    ap_ST_fsm_pp0_stage2 = 18'd8;
parameter    ap_ST_fsm_pp0_stage3 = 18'd16;
parameter    ap_ST_fsm_pp0_stage4 = 18'd32;
parameter    ap_ST_fsm_pp0_stage5 = 18'd64;
parameter    ap_ST_fsm_pp0_stage6 = 18'd128;
parameter    ap_ST_fsm_pp0_stage7 = 18'd256;
parameter    ap_ST_fsm_pp0_stage8 = 18'd512;
parameter    ap_ST_fsm_pp0_stage9 = 18'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 18'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 18'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 18'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 18'd32768;
parameter    ap_ST_fsm_pp0_stage15 = 18'd65536;
parameter    ap_ST_fsm_state19 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [511:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_m_dout;
input   p_m_empty_n;
output   p_m_read;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
output  [14:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;
input  [14:0] p_in_offset_dout;
input   p_in_offset_empty_n;
output   p_in_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_out_write;
reg p_m_read;
reg p_n_read;
reg[14:0] p_in_address1;
reg p_in_ce1;
reg p_in_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln86_reg_701;
reg    p_m_blk_n;
reg    p_n_blk_n;
reg    p_in_offset_blk_n;
reg   [59:0] indvar_flatten_reg_264;
reg   [27:0] i_reg_275;
reg   [14:0] p_in_offset_read_reg_671;
reg    ap_block_state1;
wire   [27:0] trunc_ln_fu_286_p4;
reg   [27:0] trunc_ln_reg_691;
wire   [59:0] bound_fu_304_p2;
reg   [59:0] bound_reg_696;
wire   [0:0] icmp_ln86_fu_310_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state18_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [59:0] add_ln86_fu_315_p2;
reg   [59:0] add_ln86_reg_705;
reg    ap_enable_reg_pp0_iter0;
wire   [27:0] select_ln86_fu_326_p3;
reg   [27:0] select_ln86_reg_710;
wire   [14:0] tmp_2_fu_338_p3;
reg   [14:0] tmp_2_reg_715;
reg   [31:0] l_val_m_Val_0_reg_739;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] l_val_m_Val_1_reg_749;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] l_val_m_Val_2_reg_759;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] l_val_m_Val_3_reg_769;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] l_val_m_Val_4_reg_779;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] l_val_m_Val_5_reg_789;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [31:0] l_val_m_Val_6_reg_799;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
reg   [31:0] l_val_m_Val_7_reg_809;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
reg   [31:0] l_val_m_Val_8_reg_819;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
reg   [31:0] l_val_m_Val_9_reg_829;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
reg   [31:0] l_val_m_Val_10_reg_839;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state13_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
reg   [31:0] l_val_m_Val_11_reg_849;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state14_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
reg   [31:0] l_val_m_Val_12_reg_859;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state15_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
reg   [31:0] l_val_m_Val_13_reg_869;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state16_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire   [14:0] add_ln92_30_fu_571_p2;
reg   [14:0] add_ln92_30_reg_879;
reg   [31:0] l_val_m_Val_14_reg_884;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state17_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_11001;
wire   [27:0] add_ln87_fu_580_p2;
reg   [27:0] add_ln87_reg_894;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage15_subdone;
reg   [59:0] ap_phi_mux_indvar_flatten_phi_fu_268_p4;
reg   [27:0] ap_phi_mux_i_phi_fu_279_p4;
wire   [63:0] zext_ln92_fu_351_p1;
wire   [63:0] zext_ln92_16_fu_366_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln92_17_fu_381_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln92_18_fu_396_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln92_19_fu_411_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln92_20_fu_426_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln92_21_fu_441_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln92_22_fu_456_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln92_23_fu_471_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] zext_ln92_24_fu_486_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] zext_ln92_25_fu_501_p1;
wire    ap_block_pp0_stage10;
wire   [63:0] zext_ln92_26_fu_516_p1;
wire    ap_block_pp0_stage11;
wire   [63:0] zext_ln92_27_fu_531_p1;
wire    ap_block_pp0_stage12;
wire   [63:0] zext_ln92_28_fu_546_p1;
wire    ap_block_pp0_stage13;
wire   [63:0] zext_ln92_29_fu_561_p1;
wire    ap_block_pp0_stage14;
wire   [63:0] zext_ln92_30_fu_576_p1;
wire    ap_block_pp0_stage15;
reg    ap_block_pp0_stage0_01001;
wire   [27:0] bound_fu_304_p0;
wire   [31:0] bound_fu_304_p1;
wire   [0:0] icmp_ln87_fu_321_p2;
wire   [10:0] empty_fu_334_p1;
wire   [14:0] add_ln92_fu_346_p2;
wire   [14:0] or_ln92_fu_356_p2;
wire   [14:0] add_ln92_16_fu_361_p2;
wire   [14:0] or_ln92_15_fu_371_p2;
wire   [14:0] add_ln92_17_fu_376_p2;
wire   [14:0] or_ln92_16_fu_386_p2;
wire   [14:0] add_ln92_18_fu_391_p2;
wire   [14:0] or_ln92_17_fu_401_p2;
wire   [14:0] add_ln92_19_fu_406_p2;
wire   [14:0] or_ln92_18_fu_416_p2;
wire   [14:0] add_ln92_20_fu_421_p2;
wire   [14:0] or_ln92_19_fu_431_p2;
wire   [14:0] add_ln92_21_fu_436_p2;
wire   [14:0] or_ln92_20_fu_446_p2;
wire   [14:0] add_ln92_22_fu_451_p2;
wire   [14:0] or_ln92_21_fu_461_p2;
wire   [14:0] add_ln92_23_fu_466_p2;
wire   [14:0] or_ln92_22_fu_476_p2;
wire   [14:0] add_ln92_24_fu_481_p2;
wire   [14:0] or_ln92_23_fu_491_p2;
wire   [14:0] add_ln92_25_fu_496_p2;
wire   [14:0] or_ln92_24_fu_506_p2;
wire   [14:0] add_ln92_26_fu_511_p2;
wire   [14:0] or_ln92_25_fu_521_p2;
wire   [14:0] add_ln92_27_fu_526_p2;
wire   [14:0] or_ln92_26_fu_536_p2;
wire   [14:0] add_ln92_28_fu_541_p2;
wire   [14:0] or_ln92_27_fu_551_p2;
wire   [14:0] add_ln92_29_fu_556_p2;
wire   [14:0] or_ln92_28_fu_566_p2;
wire   [31:0] l_v_30_fu_630_p1;
wire   [31:0] l_v_29_fu_627_p1;
wire   [31:0] l_v_28_fu_624_p1;
wire   [31:0] l_v_27_fu_621_p1;
wire   [31:0] l_v_26_fu_618_p1;
wire   [31:0] l_v_25_fu_615_p1;
wire   [31:0] l_v_24_fu_612_p1;
wire   [31:0] l_v_23_fu_609_p1;
wire   [31:0] l_v_22_fu_606_p1;
wire   [31:0] l_v_21_fu_603_p1;
wire   [31:0] l_v_20_fu_600_p1;
wire   [31:0] l_v_19_fu_597_p1;
wire   [31:0] l_v_18_fu_594_p1;
wire   [31:0] l_v_17_fu_591_p1;
wire   [31:0] l_v_16_fu_588_p1;
wire   [31:0] l_v_fu_585_p1;
wire    ap_CS_fsm_state19;
reg   [17:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [59:0] bound_fu_304_p00;
wire   [59:0] bound_fu_304_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

BGD_mul_28ns_32ns_60_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 60 ))
mul_28ns_32ns_60_1_1_U371(
    .din0(bound_fu_304_p0),
    .din1(bound_fu_304_p1),
    .dout(bound_fu_304_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_275 <= add_ln87_reg_894;
    end else if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_275 <= 28'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_264 <= add_ln86_reg_705;
    end else if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_264 <= 60'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln86_reg_705 <= add_ln86_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln87_reg_894 <= add_ln87_fu_580_p2;
        l_val_m_Val_14_reg_884 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        add_ln92_30_reg_879 <= add_ln92_30_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_696 <= bound_fu_304_p2;
        p_in_offset_read_reg_671 <= p_in_offset_dout;
        trunc_ln_reg_691 <= {{p_n_dout[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_reg_701 <= icmp_ln86_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_0_reg_739 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_10_reg_839 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_11_reg_849 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_12_reg_859 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_13_reg_869 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_1_reg_749 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_2_reg_759 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_3_reg_769 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_4_reg_779 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_5_reg_789 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_6_reg_799 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_7_reg_809 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_8_reg_819 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_9_reg_829 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln86_fu_310_p2 == 1'd0))) begin
        select_ln86_reg_710 <= select_ln86_fu_326_p3;
        tmp_2_reg_715[14 : 4] <= tmp_2_fu_338_p3[14 : 4];
    end
end

always @ (*) begin
    if ((icmp_ln86_fu_310_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_279_p4 = add_ln87_reg_894;
    end else begin
        ap_phi_mux_i_phi_fu_279_p4 = i_reg_275;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_268_p4 = add_ln86_reg_705;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_268_p4 = indvar_flatten_reg_264;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            p_in_address1 = zext_ln92_30_fu_576_p1;
        end else if (((1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            p_in_address1 = zext_ln92_29_fu_561_p1;
        end else if (((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
            p_in_address1 = zext_ln92_28_fu_546_p1;
        end else if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            p_in_address1 = zext_ln92_27_fu_531_p1;
        end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            p_in_address1 = zext_ln92_26_fu_516_p1;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            p_in_address1 = zext_ln92_25_fu_501_p1;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            p_in_address1 = zext_ln92_24_fu_486_p1;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            p_in_address1 = zext_ln92_23_fu_471_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            p_in_address1 = zext_ln92_22_fu_456_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            p_in_address1 = zext_ln92_21_fu_441_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            p_in_address1 = zext_ln92_20_fu_426_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            p_in_address1 = zext_ln92_19_fu_411_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_in_address1 = zext_ln92_18_fu_396_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_in_address1 = zext_ln92_17_fu_381_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_in_address1 = zext_ln92_16_fu_366_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_in_address1 = zext_ln92_fu_351_p1;
        end else begin
            p_in_address1 = 'bx;
        end
    end else begin
        p_in_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_blk_n = p_in_offset_empty_n;
    end else begin
        p_in_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read = 1'b1;
    end else begin
        p_in_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_blk_n = p_m_empty_n;
    end else begin
        p_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_read = 1'b1;
    end else begin
        p_m_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_701 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln86_fu_310_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln86_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_315_p2 = (ap_phi_mux_indvar_flatten_phi_fu_268_p4 + 60'd1);

assign add_ln87_fu_580_p2 = (28'd1 + select_ln86_reg_710);

assign add_ln92_16_fu_361_p2 = (p_in_offset_read_reg_671 + or_ln92_fu_356_p2);

assign add_ln92_17_fu_376_p2 = (p_in_offset_read_reg_671 + or_ln92_15_fu_371_p2);

assign add_ln92_18_fu_391_p2 = (p_in_offset_read_reg_671 + or_ln92_16_fu_386_p2);

assign add_ln92_19_fu_406_p2 = (p_in_offset_read_reg_671 + or_ln92_17_fu_401_p2);

assign add_ln92_20_fu_421_p2 = (p_in_offset_read_reg_671 + or_ln92_18_fu_416_p2);

assign add_ln92_21_fu_436_p2 = (p_in_offset_read_reg_671 + or_ln92_19_fu_431_p2);

assign add_ln92_22_fu_451_p2 = (p_in_offset_read_reg_671 + or_ln92_20_fu_446_p2);

assign add_ln92_23_fu_466_p2 = (p_in_offset_read_reg_671 + or_ln92_21_fu_461_p2);

assign add_ln92_24_fu_481_p2 = (p_in_offset_read_reg_671 + or_ln92_22_fu_476_p2);

assign add_ln92_25_fu_496_p2 = (p_in_offset_read_reg_671 + or_ln92_23_fu_491_p2);

assign add_ln92_26_fu_511_p2 = (p_in_offset_read_reg_671 + or_ln92_24_fu_506_p2);

assign add_ln92_27_fu_526_p2 = (p_in_offset_read_reg_671 + or_ln92_25_fu_521_p2);

assign add_ln92_28_fu_541_p2 = (p_in_offset_read_reg_671 + or_ln92_26_fu_536_p2);

assign add_ln92_29_fu_556_p2 = (p_in_offset_read_reg_671 + or_ln92_27_fu_551_p2);

assign add_ln92_30_fu_571_p2 = (p_in_offset_read_reg_671 + or_ln92_28_fu_566_p2);

assign add_ln92_fu_346_p2 = (p_in_offset_read_reg_671 + tmp_2_fu_338_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln86_reg_701 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln86_reg_701 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln86_reg_701 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage0_iter1 = ((icmp_ln86_reg_701 == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_304_p0 = bound_fu_304_p00;

assign bound_fu_304_p00 = trunc_ln_fu_286_p4;

assign bound_fu_304_p1 = bound_fu_304_p10;

assign bound_fu_304_p10 = p_m_dout;

assign empty_fu_334_p1 = select_ln86_fu_326_p3[10:0];

assign icmp_ln86_fu_310_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_268_p4 == bound_reg_696) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_321_p2 = ((ap_phi_mux_i_phi_fu_279_p4 == trunc_ln_reg_691) ? 1'b1 : 1'b0);

assign l_v_16_fu_588_p1 = l_val_m_Val_1_reg_749;

assign l_v_17_fu_591_p1 = l_val_m_Val_2_reg_759;

assign l_v_18_fu_594_p1 = l_val_m_Val_3_reg_769;

assign l_v_19_fu_597_p1 = l_val_m_Val_4_reg_779;

assign l_v_20_fu_600_p1 = l_val_m_Val_5_reg_789;

assign l_v_21_fu_603_p1 = l_val_m_Val_6_reg_799;

assign l_v_22_fu_606_p1 = l_val_m_Val_7_reg_809;

assign l_v_23_fu_609_p1 = l_val_m_Val_8_reg_819;

assign l_v_24_fu_612_p1 = l_val_m_Val_9_reg_829;

assign l_v_25_fu_615_p1 = l_val_m_Val_10_reg_839;

assign l_v_26_fu_618_p1 = l_val_m_Val_11_reg_849;

assign l_v_27_fu_621_p1 = l_val_m_Val_12_reg_859;

assign l_v_28_fu_624_p1 = l_val_m_Val_13_reg_869;

assign l_v_29_fu_627_p1 = l_val_m_Val_14_reg_884;

assign l_v_30_fu_630_p1 = p_in_q1;

assign l_v_fu_585_p1 = l_val_m_Val_0_reg_739;

assign or_ln92_15_fu_371_p2 = (tmp_2_reg_715 | 15'd2);

assign or_ln92_16_fu_386_p2 = (tmp_2_reg_715 | 15'd3);

assign or_ln92_17_fu_401_p2 = (tmp_2_reg_715 | 15'd4);

assign or_ln92_18_fu_416_p2 = (tmp_2_reg_715 | 15'd5);

assign or_ln92_19_fu_431_p2 = (tmp_2_reg_715 | 15'd6);

assign or_ln92_20_fu_446_p2 = (tmp_2_reg_715 | 15'd7);

assign or_ln92_21_fu_461_p2 = (tmp_2_reg_715 | 15'd8);

assign or_ln92_22_fu_476_p2 = (tmp_2_reg_715 | 15'd9);

assign or_ln92_23_fu_491_p2 = (tmp_2_reg_715 | 15'd10);

assign or_ln92_24_fu_506_p2 = (tmp_2_reg_715 | 15'd11);

assign or_ln92_25_fu_521_p2 = (tmp_2_reg_715 | 15'd12);

assign or_ln92_26_fu_536_p2 = (tmp_2_reg_715 | 15'd13);

assign or_ln92_27_fu_551_p2 = (tmp_2_reg_715 | 15'd14);

assign or_ln92_28_fu_566_p2 = (tmp_2_reg_715 | 15'd15);

assign or_ln92_fu_356_p2 = (tmp_2_reg_715 | 15'd1);

assign p_out_din = {{{{{{{{{{{{{{{{l_v_30_fu_630_p1}, {l_v_29_fu_627_p1}}, {l_v_28_fu_624_p1}}, {l_v_27_fu_621_p1}}, {l_v_26_fu_618_p1}}, {l_v_25_fu_615_p1}}, {l_v_24_fu_612_p1}}, {l_v_23_fu_609_p1}}, {l_v_22_fu_606_p1}}, {l_v_21_fu_603_p1}}, {l_v_20_fu_600_p1}}, {l_v_19_fu_597_p1}}, {l_v_18_fu_594_p1}}, {l_v_17_fu_591_p1}}, {l_v_16_fu_588_p1}}, {l_v_fu_585_p1}};

assign select_ln86_fu_326_p3 = ((icmp_ln87_fu_321_p2[0:0] === 1'b1) ? 28'd0 : ap_phi_mux_i_phi_fu_279_p4);

assign tmp_2_fu_338_p3 = {{empty_fu_334_p1}, {4'd0}};

assign trunc_ln_fu_286_p4 = {{p_n_dout[31:4]}};

assign zext_ln92_16_fu_366_p1 = add_ln92_16_fu_361_p2;

assign zext_ln92_17_fu_381_p1 = add_ln92_17_fu_376_p2;

assign zext_ln92_18_fu_396_p1 = add_ln92_18_fu_391_p2;

assign zext_ln92_19_fu_411_p1 = add_ln92_19_fu_406_p2;

assign zext_ln92_20_fu_426_p1 = add_ln92_20_fu_421_p2;

assign zext_ln92_21_fu_441_p1 = add_ln92_21_fu_436_p2;

assign zext_ln92_22_fu_456_p1 = add_ln92_22_fu_451_p2;

assign zext_ln92_23_fu_471_p1 = add_ln92_23_fu_466_p2;

assign zext_ln92_24_fu_486_p1 = add_ln92_24_fu_481_p2;

assign zext_ln92_25_fu_501_p1 = add_ln92_25_fu_496_p2;

assign zext_ln92_26_fu_516_p1 = add_ln92_26_fu_511_p2;

assign zext_ln92_27_fu_531_p1 = add_ln92_27_fu_526_p2;

assign zext_ln92_28_fu_546_p1 = add_ln92_28_fu_541_p2;

assign zext_ln92_29_fu_561_p1 = add_ln92_29_fu_556_p2;

assign zext_ln92_30_fu_576_p1 = add_ln92_30_reg_879;

assign zext_ln92_fu_351_p1 = add_ln92_fu_346_p2;

always @ (posedge ap_clk) begin
    tmp_2_reg_715[3:0] <= 4'b0000;
end

endmodule //BGD_vec2GemStream_float_16u_1
