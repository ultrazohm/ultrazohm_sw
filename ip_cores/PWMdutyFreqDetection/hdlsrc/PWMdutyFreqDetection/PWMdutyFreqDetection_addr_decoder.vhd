-- -------------------------------------------------------------
-- 
-- File Name: C:\IPcoreTest\hdlsrc\PWMdutyFreqDetection\PWMdutyFreqDetection_addr_decoder.vhd
-- Created: 2021-04-27 12:03:32
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: PWMdutyFreqDetection_addr_decoder
-- Source Path: PWMdutyFreqDetection/PWMdutyFreqDetection_axi_lite/PWMdutyFreqDetection_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY PWMdutyFreqDetection_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_AXI_freq                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        read_AXI_hightime                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        read_AXI_lowtime                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        read_AXI_dutycyc                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic  -- ufix1
        );
END PWMdutyFreqDetection_addr_decoder;


ARCHITECTURE rtl OF PWMdutyFreqDetection_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_AXI_freq_signed             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL read_AXI_hightime_signed         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL read_AXI_lowtime_signed          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL read_AXI_dutycyc_signed          : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL decode_sel_AXI_dutycyc_1_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_AXI_lowtime_1_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_AXI_hightime_1_1      : std_logic;  -- ufix1
  SIGNAL decode_sel_AXI_freq_1_1          : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_AXI_freq                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_slice_AXI_freq_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_AXI_freq_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_AXI_hightime            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_slice_AXI_hightime_1        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_AXI_hightime_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_AXI_lowtime             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_slice_AXI_lowtime_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_AXI_lowtime_1_1        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_AXI_dutycyc             : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL data_slice_AXI_dutycyc_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_AXI_dutycyc_1_1        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  read_AXI_freq_signed <= signed(read_AXI_freq);

  read_AXI_hightime_signed <= signed(read_AXI_hightime);

  read_AXI_lowtime_signed <= signed(read_AXI_lowtime);

  read_AXI_dutycyc_signed <= signed(read_AXI_dutycyc);

  
  decode_sel_AXI_dutycyc_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  
  decode_sel_AXI_lowtime_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  
  decode_sel_AXI_hightime_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  
  decode_sel_AXI_freq_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_AXI_freq_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_AXI_freq <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        read_reg_AXI_freq <= read_AXI_freq_signed;
      END IF;
    END IF;
  END PROCESS reg_AXI_freq_process;


  data_slice_AXI_freq_1 <= unsigned(read_reg_AXI_freq);

  
  decode_rd_AXI_freq_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_AXI_freq_1_1 = '0' ELSE
      data_slice_AXI_freq_1;

  reg_AXI_hightime_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_AXI_hightime <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        read_reg_AXI_hightime <= read_AXI_hightime_signed;
      END IF;
    END IF;
  END PROCESS reg_AXI_hightime_process;


  data_slice_AXI_hightime_1 <= unsigned(read_reg_AXI_hightime);

  
  decode_rd_AXI_hightime_1_1 <= decode_rd_AXI_freq_1_1 WHEN decode_sel_AXI_hightime_1_1 = '0' ELSE
      data_slice_AXI_hightime_1;

  reg_AXI_lowtime_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_AXI_lowtime <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        read_reg_AXI_lowtime <= read_AXI_lowtime_signed;
      END IF;
    END IF;
  END PROCESS reg_AXI_lowtime_process;


  data_slice_AXI_lowtime_1 <= unsigned(read_reg_AXI_lowtime);

  
  decode_rd_AXI_lowtime_1_1 <= decode_rd_AXI_hightime_1_1 WHEN decode_sel_AXI_lowtime_1_1 = '0' ELSE
      data_slice_AXI_lowtime_1;

  reg_AXI_dutycyc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_AXI_dutycyc <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        read_reg_AXI_dutycyc <= read_AXI_dutycyc_signed;
      END IF;
    END IF;
  END PROCESS reg_AXI_dutycyc_process;


  data_slice_AXI_dutycyc_1 <= unsigned(read_reg_AXI_dutycyc);

  
  decode_rd_AXI_dutycyc_1_1 <= decode_rd_AXI_lowtime_1_1 WHEN decode_sel_AXI_dutycyc_1_1 = '0' ELSE
      data_slice_AXI_dutycyc_1;

  data_read <= std_logic_vector(decode_rd_AXI_dutycyc_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

END rtl;

