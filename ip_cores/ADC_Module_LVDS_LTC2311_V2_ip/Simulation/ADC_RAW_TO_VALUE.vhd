-- -------------------------------------------------------------
-- 
-- File Name: C:\Zynq\AA_IP_Repository\IPCores_Zynq_xa7z020\ADC_Module_SPI_AD7680_V3_ip\Simulation\ADC_Strom_Kuebrich\ADC_RAW_TO_VALUE_OHMRichter\ADC_RAW_TO_VALUE\ADC_RAW_TO_VALUE.vhd
-- Created: 2019-05-17 09:59:45
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- Modified by Sebastian Wendel 2019-05-17 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-07
-- Target subsystem base rate: 1e-07
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- CALC_VALUE                    ce_out        1e-07
-- CALC_VALUE_VALID              ce_out        1e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ADC_RAW_TO_VALUE
-- Source Path: ADC_RAW_TO_VALUE/ADC_RAW_TO_VALUE
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ADC_RAW_TO_VALUE IS
  generic(--CONVERSION_RATE_ADC : integer := 48; --SW:CASR = 0.000732398*2^16 = 48(dec) = 30(hex)-- STEPS_A_out1 <= to_unsigned(16#0030#, 16);
			ADC_SET_USER_OFFSET : boolean := false --SW:If False (0), than the flag uses the measured value as offset. If True (1), than the flag uses the falue in ADC_USER_OFFSET.
		--	ADC_USER_OFFSET : integer := 32768 --SW: ADC RAW value, which can used as offset, e.g., if positive and negative measurements are necessary.
 );
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ADC_SET_OFFSET                    :   IN    std_logic;
        ADC_IN                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        ADC_DATA_VALID                    :   IN    std_logic;
 --SW       ADC_SET_USER_OFFSET               :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        CALC_VALUE                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        CALC_VALUE_VALID                  :   OUT   std_logic;
        ADC_USER_OFFSET                   :   IN    std_logic_vector(32-1 downto 0); --SW: ADC RAW value, which can used as offset, e.g., if positive and negative measurements are necessary.
        CONVERSION_RATE_ADC               :   IN    std_logic_vector(32-1 downto 0)
        );
END ADC_RAW_TO_VALUE;


ARCHITECTURE rtl OF ADC_RAW_TO_VALUE IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL ADC_IN_signed                  : signed(15 DOWNTO 0);  -- int16
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL ADC_user_offset_out1             : signed(15 DOWNTO 0);  -- uint16
  SIGNAL SwitchUser_out1                  : signed(15 DOWNTO 0);  -- uint16
  SIGNAL Switch1_out1                     : signed(15 DOWNTO 0);  -- uint16
  SIGNAL Delay5_out1                      : signed(15 DOWNTO 0);  -- uint16
  SIGNAL Add_sub_cast                     : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL Add_sub_cast_1                   : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL Add_out1                         : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL STEPS_A_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Product1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product1_mul_temp                : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL Product1_cast_1                  : signed(33 DOWNTO 0);  -- sfix34_En16
  SIGNAL Product1_out1                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay4_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL CONVERSION_RATE_ADCIntern        :  std_logic_vector(32-1 downto 0);

BEGIN
  enb <= clk_enable;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
      --  Delay2_reg <= (OTHERS => '0'); --SW:Do not include this reset!
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= ADC_DATA_VALID;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  ADC_IN_signed <= signed(ADC_IN); --SW: Normaler ADC Wert

  Logical_Operator_out1 <= ADC_SET_OFFSET AND ADC_DATA_VALID;

 --SW: ADC_user_offset_out1 <= to_unsigned(16#4000#, 16);
 ADC_user_offset_out1 <=  signed(ADC_USER_OFFSET(15 DOWNTO 0)); --SW Nur die ersten 16 Bits nehmen von den 32 AXI Bits
--  ADC_user_offset_out1 <= to_unsigned(ADC_USER_OFFSET, 16);
  
  SwitchUser_out1 <= ADC_IN_signed WHEN not(ADC_SET_USER_OFFSET) ELSE
      ADC_user_offset_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
       -- Delay5_out1 <= to_unsigned(16#0000#, 16); --SW:Do not include this reset!
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch1_out1 <= Delay5_out1 WHEN Logical_Operator_out1 = '0' ELSE
      SwitchUser_out1;

  Add_sub_cast <= signed(resize(ADC_IN_signed, 18));
  Add_sub_cast_1 <= signed(resize(Switch1_out1, 18));
  Add_out1 <= Add_sub_cast - Add_sub_cast_1; --SW: Neuer ADC Wert nach Bereinigung des Offsets

  --SW: Chile = 0.00041018*2^16 = 27(dec) = 1B(hex)-- STEPS_A_out1 <= to_unsigned(16#001B#, 16);
  --STEPS_A_out1 <= to_unsigned(16#0030#, 16);
  --STEPS_A_out1 <= to_unsigned(CONVERSION_RATE_ADC, 16);
  STEPS_A_out1 <= unsigned(CONVERSION_RATE_ADC(15 DOWNTO 0)); --SW Nur die ersten 16 Bits nehmen von den 32 AXI Bits

  Product1_cast <= signed(resize(STEPS_A_out1, 17));
  Product1_mul_temp <= Add_out1 * Product1_cast;
  Product1_cast_1 <= Product1_mul_temp(33 DOWNTO 0);
  Product1_out1 <= Product1_cast_1(22 DOWNTO 5);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
       --     Delay1_out1 <= to_signed(16#00000#, 18); --SW:Do not include this reset!
      ELSIF enb = '1' THEN
        Delay1_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
      --      Delay4_out1 <= to_signed(16#00000#, 18); --SW:Do not include this reset!
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_out1 <= Delay4_out1 WHEN Delay2_out1 = '0' ELSE
      Delay1_out1;

  CALC_VALUE <= std_logic_vector(Switch_out1);

  ce_out <= clk_enable;

  CALC_VALUE_VALID <= Delay2_out1;

END rtl;

