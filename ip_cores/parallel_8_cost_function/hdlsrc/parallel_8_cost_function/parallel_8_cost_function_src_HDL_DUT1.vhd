-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_cost_function\hdlsrc\parallel_8_cost_function\parallel_8_cost_function_src_HDL_DUT1.vhd
-- Created: 2022-10-18 09:53:42
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- done                          ce_out        1e-08
-- J_0                           ce_out        1e-08
-- J_1                           ce_out        1e-08
-- J_2                           ce_out        1e-08
-- J_3                           ce_out        1e-08
-- J_4                           ce_out        1e-08
-- J_5                           ce_out        1e-08
-- J_6                           ce_out        1e-08
-- J_7                           ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_cost_function_src_HDL_DUT1
-- Source Path: parallel_8_cost_function/HDL_DUT1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_8_cost_function_src_HDL_DUT1_pkg.ALL;

ENTITY parallel_8_cost_function_src_HDL_DUT1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        Prediction_0                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_1                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_2                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_3                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_4                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_5                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_6                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_7                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_8                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_9                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_10                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_11                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_12                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_13                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_14                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_15                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_16                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_17                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_18                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_19                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_20                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_21                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_22                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_23                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_24                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_25                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_26                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_27                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_28                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_29                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_30                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_31                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        id_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iq_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ix_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iy_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        done                              :   OUT   std_logic;
        J_0                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_1                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_2                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_3                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_4                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_5                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_6                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_7                               :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En11
        );
END parallel_8_cost_function_src_HDL_DUT1;


ARCHITECTURE rtl OF parallel_8_cost_function_src_HDL_DUT1 IS

  -- Component Declarations
  COMPONENT parallel_8_cost_function_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_cost_function_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Predicton                       :   IN    vector_of_std_logic_vector32(0 TO 31);  -- single [32]
          id_ref                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_ref                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_ref                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_ref                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          J1                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J2                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J3                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J4                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J5                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J6                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J7                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J8                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_cost_function_src_Detect_Rise_Positive
    USE ENTITY work.parallel_8_cost_function_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    USE ENTITY work.parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single(rtl);

  FOR ALL : parallel_8_cost_function_src_Subsystem
    USE ENTITY work.parallel_8_cost_function_src_Subsystem(rtl);

  FOR ALL : parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    USE ENTITY work.parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 40);  -- ufix1 [41]
  SIGNAL delayMatch3_reg_next             : std_logic_vector(0 TO 40);  -- ufix1 [41]
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL End_Cycle_3                      : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch1_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL Prediction                       : vector_of_std_logic_vector18(0 TO 31);  -- ufix18 [32]
  SIGNAL Prediction_32                    : vector_of_signed18(0 TO 31);  -- sfix18_En11 [32]
  SIGNAL Delay6_out1                      : vector_of_signed18(0 TO 31);  -- sfix18_En11 [32]
  SIGNAL curent_valid_in                  : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL curent_valid_in_1                : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL Delay10_out1                     : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL Switch_on4_out1                  : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL Switch_on4_out1_1                : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Delay5_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Delay4_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay8_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay7_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Delay2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on14_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay33_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_8                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_9                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_10                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_11                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_12                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_13                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_14                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_1                    : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_3_1_1                    : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_4_1_1                    : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_5_1_1                    : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_6_1_1                    : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_7_1_1                    : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_8_1_1                    : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL curent_valid_in_2                : vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
  SIGNAL curent_valid_in_3                : vector_of_signed20(0 TO 7);  -- sfix20_En11 [8]
  SIGNAL curent_valid_in_4                : vector_of_signed20(0 TO 7);  -- sfix20_En11 [8]

BEGIN
  u_Detect_Rise_Positive : parallel_8_cost_function_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay1_out1,
              Y => End_Cycle
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(0)),  -- sfix18_En11
              nfp_out => curent_valid_in(0)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_1 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(1)),  -- sfix18_En11
              nfp_out => curent_valid_in(1)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_2 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(2)),  -- sfix18_En11
              nfp_out => curent_valid_in(2)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_3 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(3)),  -- sfix18_En11
              nfp_out => curent_valid_in(3)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_4 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(4)),  -- sfix18_En11
              nfp_out => curent_valid_in(4)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_5 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(5)),  -- sfix18_En11
              nfp_out => curent_valid_in(5)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_6 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(6)),  -- sfix18_En11
              nfp_out => curent_valid_in(6)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_7 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(7)),  -- sfix18_En11
              nfp_out => curent_valid_in(7)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_8 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(8)),  -- sfix18_En11
              nfp_out => curent_valid_in(8)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_9 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(9)),  -- sfix18_En11
              nfp_out => curent_valid_in(9)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_10 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(10)),  -- sfix18_En11
              nfp_out => curent_valid_in(10)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_11 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(11)),  -- sfix18_En11
              nfp_out => curent_valid_in(11)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_12 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(12)),  -- sfix18_En11
              nfp_out => curent_valid_in(12)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_13 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(13)),  -- sfix18_En11
              nfp_out => curent_valid_in(13)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_14 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(14)),  -- sfix18_En11
              nfp_out => curent_valid_in(14)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_15 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(15)),  -- sfix18_En11
              nfp_out => curent_valid_in(15)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_16 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(16)),  -- sfix18_En11
              nfp_out => curent_valid_in(16)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_17 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(17)),  -- sfix18_En11
              nfp_out => curent_valid_in(17)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_18 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(18)),  -- sfix18_En11
              nfp_out => curent_valid_in(18)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_19 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(19)),  -- sfix18_En11
              nfp_out => curent_valid_in(19)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_20 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(20)),  -- sfix18_En11
              nfp_out => curent_valid_in(20)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_21 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(21)),  -- sfix18_En11
              nfp_out => curent_valid_in(21)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_22 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(22)),  -- sfix18_En11
              nfp_out => curent_valid_in(22)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_23 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(23)),  -- sfix18_En11
              nfp_out => curent_valid_in(23)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_24 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(24)),  -- sfix18_En11
              nfp_out => curent_valid_in(24)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_25 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(25)),  -- sfix18_En11
              nfp_out => curent_valid_in(25)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_26 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(26)),  -- sfix18_En11
              nfp_out => curent_valid_in(26)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_27 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(27)),  -- sfix18_En11
              nfp_out => curent_valid_in(27)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_28 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(28)),  -- sfix18_En11
              nfp_out => curent_valid_in(28)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_29 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(29)),  -- sfix18_En11
              nfp_out => curent_valid_in(29)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_30 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(30)),  -- sfix18_En11
              nfp_out => curent_valid_in(30)  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_sfix_18_En11_to_single_31 : parallel_8_cost_function_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay6_out1(31)),  -- sfix18_En11
              nfp_out => curent_valid_in(31)  -- single
              );

  u_Subsystem : parallel_8_cost_function_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Predicton => Switch_on4_out1,  -- single [32]
              id_ref => Switch_on3_out1,  -- single
              iq_ref => Switch_on2_out1,  -- single
              ix_ref => Switch_on1_out1,  -- single
              iy_ref => Switch_on14_out1,  -- single
              J1 => J,  -- single
              J2 => J_8,  -- single
              J3 => J_9,  -- single
              J4 => J_10,  -- single
              J5 => J_11,  -- single
              J6 => J_12,  -- single
              J7 => J_13,  -- single
              J8 => J_14  -- single
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_single_to_sfix_20_En11 : parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J,  -- single
              nfp_out => curent_valid_in_2(0)  -- sfix20_En11
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_single_to_sfix_20_En11_1 : parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_8,  -- single
              nfp_out => nfp_out_2_1_1  -- sfix20_En11
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_single_to_sfix_20_En11_2 : parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_9,  -- single
              nfp_out => nfp_out_3_1_1  -- sfix20_En11
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_single_to_sfix_20_En11_3 : parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_10,  -- single
              nfp_out => nfp_out_4_1_1  -- sfix20_En11
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_single_to_sfix_20_En11_4 : parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_11,  -- single
              nfp_out => nfp_out_5_1_1  -- sfix20_En11
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_single_to_sfix_20_En11_5 : parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_12,  -- single
              nfp_out => nfp_out_6_1_1  -- sfix20_En11
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_single_to_sfix_20_En11_6 : parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_13,  -- single
              nfp_out => nfp_out_7_1_1  -- sfix20_En11
              );

  u_parallel_8_cost_function_HDL_DUT1_nfp_convert_single_to_sfix_20_En11_7 : parallel_8_cost_function_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_14,  -- single
              nfp_out => nfp_out_8_1_1  -- sfix20_En11
              );

  enb <= clk_enable;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        End_Cycle_1 <= '0';
      ELSIF enb = '1' THEN
        End_Cycle_1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS reduced_process;


  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg(0) <= '0';
        delayMatch3_reg(1) <= '0';
        delayMatch3_reg(2) <= '0';
        delayMatch3_reg(3) <= '0';
        delayMatch3_reg(4) <= '0';
        delayMatch3_reg(5) <= '0';
        delayMatch3_reg(6) <= '0';
        delayMatch3_reg(7) <= '0';
        delayMatch3_reg(8) <= '0';
        delayMatch3_reg(9) <= '0';
        delayMatch3_reg(10) <= '0';
        delayMatch3_reg(11) <= '0';
        delayMatch3_reg(12) <= '0';
        delayMatch3_reg(13) <= '0';
        delayMatch3_reg(14) <= '0';
        delayMatch3_reg(15) <= '0';
        delayMatch3_reg(16) <= '0';
        delayMatch3_reg(17) <= '0';
        delayMatch3_reg(18) <= '0';
        delayMatch3_reg(19) <= '0';
        delayMatch3_reg(20) <= '0';
        delayMatch3_reg(21) <= '0';
        delayMatch3_reg(22) <= '0';
        delayMatch3_reg(23) <= '0';
        delayMatch3_reg(24) <= '0';
        delayMatch3_reg(25) <= '0';
        delayMatch3_reg(26) <= '0';
        delayMatch3_reg(27) <= '0';
        delayMatch3_reg(28) <= '0';
        delayMatch3_reg(29) <= '0';
        delayMatch3_reg(30) <= '0';
        delayMatch3_reg(31) <= '0';
        delayMatch3_reg(32) <= '0';
        delayMatch3_reg(33) <= '0';
        delayMatch3_reg(34) <= '0';
        delayMatch3_reg(35) <= '0';
        delayMatch3_reg(36) <= '0';
        delayMatch3_reg(37) <= '0';
        delayMatch3_reg(38) <= '0';
        delayMatch3_reg(39) <= '0';
        delayMatch3_reg(40) <= '0';
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
        delayMatch3_reg(3) <= delayMatch3_reg_next(3);
        delayMatch3_reg(4) <= delayMatch3_reg_next(4);
        delayMatch3_reg(5) <= delayMatch3_reg_next(5);
        delayMatch3_reg(6) <= delayMatch3_reg_next(6);
        delayMatch3_reg(7) <= delayMatch3_reg_next(7);
        delayMatch3_reg(8) <= delayMatch3_reg_next(8);
        delayMatch3_reg(9) <= delayMatch3_reg_next(9);
        delayMatch3_reg(10) <= delayMatch3_reg_next(10);
        delayMatch3_reg(11) <= delayMatch3_reg_next(11);
        delayMatch3_reg(12) <= delayMatch3_reg_next(12);
        delayMatch3_reg(13) <= delayMatch3_reg_next(13);
        delayMatch3_reg(14) <= delayMatch3_reg_next(14);
        delayMatch3_reg(15) <= delayMatch3_reg_next(15);
        delayMatch3_reg(16) <= delayMatch3_reg_next(16);
        delayMatch3_reg(17) <= delayMatch3_reg_next(17);
        delayMatch3_reg(18) <= delayMatch3_reg_next(18);
        delayMatch3_reg(19) <= delayMatch3_reg_next(19);
        delayMatch3_reg(20) <= delayMatch3_reg_next(20);
        delayMatch3_reg(21) <= delayMatch3_reg_next(21);
        delayMatch3_reg(22) <= delayMatch3_reg_next(22);
        delayMatch3_reg(23) <= delayMatch3_reg_next(23);
        delayMatch3_reg(24) <= delayMatch3_reg_next(24);
        delayMatch3_reg(25) <= delayMatch3_reg_next(25);
        delayMatch3_reg(26) <= delayMatch3_reg_next(26);
        delayMatch3_reg(27) <= delayMatch3_reg_next(27);
        delayMatch3_reg(28) <= delayMatch3_reg_next(28);
        delayMatch3_reg(29) <= delayMatch3_reg_next(29);
        delayMatch3_reg(30) <= delayMatch3_reg_next(30);
        delayMatch3_reg(31) <= delayMatch3_reg_next(31);
        delayMatch3_reg(32) <= delayMatch3_reg_next(32);
        delayMatch3_reg(33) <= delayMatch3_reg_next(33);
        delayMatch3_reg(34) <= delayMatch3_reg_next(34);
        delayMatch3_reg(35) <= delayMatch3_reg_next(35);
        delayMatch3_reg(36) <= delayMatch3_reg_next(36);
        delayMatch3_reg(37) <= delayMatch3_reg_next(37);
        delayMatch3_reg(38) <= delayMatch3_reg_next(38);
        delayMatch3_reg(39) <= delayMatch3_reg_next(39);
        delayMatch3_reg(40) <= delayMatch3_reg_next(40);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Delay12_out1 <= delayMatch3_reg(40);
  delayMatch3_reg_next(0) <= End_Cycle_1;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);
  delayMatch3_reg_next(3) <= delayMatch3_reg(2);
  delayMatch3_reg_next(4) <= delayMatch3_reg(3);
  delayMatch3_reg_next(5) <= delayMatch3_reg(4);
  delayMatch3_reg_next(6) <= delayMatch3_reg(5);
  delayMatch3_reg_next(7) <= delayMatch3_reg(6);
  delayMatch3_reg_next(8) <= delayMatch3_reg(7);
  delayMatch3_reg_next(9) <= delayMatch3_reg(8);
  delayMatch3_reg_next(10) <= delayMatch3_reg(9);
  delayMatch3_reg_next(11) <= delayMatch3_reg(10);
  delayMatch3_reg_next(12) <= delayMatch3_reg(11);
  delayMatch3_reg_next(13) <= delayMatch3_reg(12);
  delayMatch3_reg_next(14) <= delayMatch3_reg(13);
  delayMatch3_reg_next(15) <= delayMatch3_reg(14);
  delayMatch3_reg_next(16) <= delayMatch3_reg(15);
  delayMatch3_reg_next(17) <= delayMatch3_reg(16);
  delayMatch3_reg_next(18) <= delayMatch3_reg(17);
  delayMatch3_reg_next(19) <= delayMatch3_reg(18);
  delayMatch3_reg_next(20) <= delayMatch3_reg(19);
  delayMatch3_reg_next(21) <= delayMatch3_reg(20);
  delayMatch3_reg_next(22) <= delayMatch3_reg(21);
  delayMatch3_reg_next(23) <= delayMatch3_reg(22);
  delayMatch3_reg_next(24) <= delayMatch3_reg(23);
  delayMatch3_reg_next(25) <= delayMatch3_reg(24);
  delayMatch3_reg_next(26) <= delayMatch3_reg(25);
  delayMatch3_reg_next(27) <= delayMatch3_reg(26);
  delayMatch3_reg_next(28) <= delayMatch3_reg(27);
  delayMatch3_reg_next(29) <= delayMatch3_reg(28);
  delayMatch3_reg_next(30) <= delayMatch3_reg(29);
  delayMatch3_reg_next(31) <= delayMatch3_reg(30);
  delayMatch3_reg_next(32) <= delayMatch3_reg(31);
  delayMatch3_reg_next(33) <= delayMatch3_reg(32);
  delayMatch3_reg_next(34) <= delayMatch3_reg(33);
  delayMatch3_reg_next(35) <= delayMatch3_reg(34);
  delayMatch3_reg_next(36) <= delayMatch3_reg(35);
  delayMatch3_reg_next(37) <= delayMatch3_reg(36);
  delayMatch3_reg_next(38) <= delayMatch3_reg(37);
  delayMatch3_reg_next(39) <= delayMatch3_reg(38);
  delayMatch3_reg_next(40) <= delayMatch3_reg(39);

  done <= Delay12_out1;

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= '0';
        reduced_reg(1) <= '0';
        reduced_reg(2) <= '0';
        reduced_reg(3) <= '0';
        reduced_reg(4) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  End_Cycle_2 <= reduced_reg(4);
  reduced_reg_next(0) <= End_Cycle_1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);

  End_Cycle_3 <= End_Cycle_2;

  
  switch_compare_1 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg(0) <= '0';
        delayMatch1_reg(1) <= '0';
        delayMatch1_reg(2) <= '0';
        delayMatch1_reg(3) <= '0';
        delayMatch1_reg(4) <= '0';
        delayMatch1_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
        delayMatch1_reg(5) <= delayMatch1_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_2 <= delayMatch1_reg(5);
  delayMatch1_reg_next(0) <= stateControl_1;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);

  Prediction(0) <= Prediction_0;
  Prediction(1) <= Prediction_1;
  Prediction(2) <= Prediction_2;
  Prediction(3) <= Prediction_3;
  Prediction(4) <= Prediction_4;
  Prediction(5) <= Prediction_5;
  Prediction(6) <= Prediction_6;
  Prediction(7) <= Prediction_7;
  Prediction(8) <= Prediction_8;
  Prediction(9) <= Prediction_9;
  Prediction(10) <= Prediction_10;
  Prediction(11) <= Prediction_11;
  Prediction(12) <= Prediction_12;
  Prediction(13) <= Prediction_13;
  Prediction(14) <= Prediction_14;
  Prediction(15) <= Prediction_15;
  Prediction(16) <= Prediction_16;
  Prediction(17) <= Prediction_17;
  Prediction(18) <= Prediction_18;
  Prediction(19) <= Prediction_19;
  Prediction(20) <= Prediction_20;
  Prediction(21) <= Prediction_21;
  Prediction(22) <= Prediction_22;
  Prediction(23) <= Prediction_23;
  Prediction(24) <= Prediction_24;
  Prediction(25) <= Prediction_25;
  Prediction(26) <= Prediction_26;
  Prediction(27) <= Prediction_27;
  Prediction(28) <= Prediction_28;
  Prediction(29) <= Prediction_29;
  Prediction(30) <= Prediction_30;
  Prediction(31) <= Prediction_31;

  outputgen1: FOR k IN 0 TO 31 GENERATE
    Prediction_32(k) <= signed(Prediction(k));
  END GENERATE;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1(0) <= to_signed(16#00000#, 18);
        Delay6_out1(1) <= to_signed(16#00000#, 18);
        Delay6_out1(2) <= to_signed(16#00000#, 18);
        Delay6_out1(3) <= to_signed(16#00000#, 18);
        Delay6_out1(4) <= to_signed(16#00000#, 18);
        Delay6_out1(5) <= to_signed(16#00000#, 18);
        Delay6_out1(6) <= to_signed(16#00000#, 18);
        Delay6_out1(7) <= to_signed(16#00000#, 18);
        Delay6_out1(8) <= to_signed(16#00000#, 18);
        Delay6_out1(9) <= to_signed(16#00000#, 18);
        Delay6_out1(10) <= to_signed(16#00000#, 18);
        Delay6_out1(11) <= to_signed(16#00000#, 18);
        Delay6_out1(12) <= to_signed(16#00000#, 18);
        Delay6_out1(13) <= to_signed(16#00000#, 18);
        Delay6_out1(14) <= to_signed(16#00000#, 18);
        Delay6_out1(15) <= to_signed(16#00000#, 18);
        Delay6_out1(16) <= to_signed(16#00000#, 18);
        Delay6_out1(17) <= to_signed(16#00000#, 18);
        Delay6_out1(18) <= to_signed(16#00000#, 18);
        Delay6_out1(19) <= to_signed(16#00000#, 18);
        Delay6_out1(20) <= to_signed(16#00000#, 18);
        Delay6_out1(21) <= to_signed(16#00000#, 18);
        Delay6_out1(22) <= to_signed(16#00000#, 18);
        Delay6_out1(23) <= to_signed(16#00000#, 18);
        Delay6_out1(24) <= to_signed(16#00000#, 18);
        Delay6_out1(25) <= to_signed(16#00000#, 18);
        Delay6_out1(26) <= to_signed(16#00000#, 18);
        Delay6_out1(27) <= to_signed(16#00000#, 18);
        Delay6_out1(28) <= to_signed(16#00000#, 18);
        Delay6_out1(29) <= to_signed(16#00000#, 18);
        Delay6_out1(30) <= to_signed(16#00000#, 18);
        Delay6_out1(31) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay6_out1(0) <= Prediction_32(0);
        Delay6_out1(1) <= Prediction_32(1);
        Delay6_out1(2) <= Prediction_32(2);
        Delay6_out1(3) <= Prediction_32(3);
        Delay6_out1(4) <= Prediction_32(4);
        Delay6_out1(5) <= Prediction_32(5);
        Delay6_out1(6) <= Prediction_32(6);
        Delay6_out1(7) <= Prediction_32(7);
        Delay6_out1(8) <= Prediction_32(8);
        Delay6_out1(9) <= Prediction_32(9);
        Delay6_out1(10) <= Prediction_32(10);
        Delay6_out1(11) <= Prediction_32(11);
        Delay6_out1(12) <= Prediction_32(12);
        Delay6_out1(13) <= Prediction_32(13);
        Delay6_out1(14) <= Prediction_32(14);
        Delay6_out1(15) <= Prediction_32(15);
        Delay6_out1(16) <= Prediction_32(16);
        Delay6_out1(17) <= Prediction_32(17);
        Delay6_out1(18) <= Prediction_32(18);
        Delay6_out1(19) <= Prediction_32(19);
        Delay6_out1(20) <= Prediction_32(20);
        Delay6_out1(21) <= Prediction_32(21);
        Delay6_out1(22) <= Prediction_32(22);
        Delay6_out1(23) <= Prediction_32(23);
        Delay6_out1(24) <= Prediction_32(24);
        Delay6_out1(25) <= Prediction_32(25);
        Delay6_out1(26) <= Prediction_32(26);
        Delay6_out1(27) <= Prediction_32(27);
        Delay6_out1(28) <= Prediction_32(28);
        Delay6_out1(29) <= Prediction_32(29);
        Delay6_out1(30) <= Prediction_32(30);
        Delay6_out1(31) <= Prediction_32(31);
      END IF;
    END IF;
  END PROCESS Delay6_process;



  curent_valid_in_1 <= curent_valid_in;

  
  Switch_on4_out1_1(0) <= Delay10_out1(0) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(0);
  
  Switch_on4_out1_1(1) <= Delay10_out1(1) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(1);
  
  Switch_on4_out1_1(2) <= Delay10_out1(2) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(2);
  
  Switch_on4_out1_1(3) <= Delay10_out1(3) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(3);
  
  Switch_on4_out1_1(4) <= Delay10_out1(4) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(4);
  
  Switch_on4_out1_1(5) <= Delay10_out1(5) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(5);
  
  Switch_on4_out1_1(6) <= Delay10_out1(6) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(6);
  
  Switch_on4_out1_1(7) <= Delay10_out1(7) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(7);
  
  Switch_on4_out1_1(8) <= Delay10_out1(8) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(8);
  
  Switch_on4_out1_1(9) <= Delay10_out1(9) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(9);
  
  Switch_on4_out1_1(10) <= Delay10_out1(10) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(10);
  
  Switch_on4_out1_1(11) <= Delay10_out1(11) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(11);
  
  Switch_on4_out1_1(12) <= Delay10_out1(12) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(12);
  
  Switch_on4_out1_1(13) <= Delay10_out1(13) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(13);
  
  Switch_on4_out1_1(14) <= Delay10_out1(14) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(14);
  
  Switch_on4_out1_1(15) <= Delay10_out1(15) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(15);
  
  Switch_on4_out1_1(16) <= Delay10_out1(16) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(16);
  
  Switch_on4_out1_1(17) <= Delay10_out1(17) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(17);
  
  Switch_on4_out1_1(18) <= Delay10_out1(18) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(18);
  
  Switch_on4_out1_1(19) <= Delay10_out1(19) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(19);
  
  Switch_on4_out1_1(20) <= Delay10_out1(20) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(20);
  
  Switch_on4_out1_1(21) <= Delay10_out1(21) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(21);
  
  Switch_on4_out1_1(22) <= Delay10_out1(22) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(22);
  
  Switch_on4_out1_1(23) <= Delay10_out1(23) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(23);
  
  Switch_on4_out1_1(24) <= Delay10_out1(24) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(24);
  
  Switch_on4_out1_1(25) <= Delay10_out1(25) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(25);
  
  Switch_on4_out1_1(26) <= Delay10_out1(26) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(26);
  
  Switch_on4_out1_1(27) <= Delay10_out1(27) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(27);
  
  Switch_on4_out1_1(28) <= Delay10_out1(28) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(28);
  
  Switch_on4_out1_1(29) <= Delay10_out1(29) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(29);
  
  Switch_on4_out1_1(30) <= Delay10_out1(30) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(30);
  
  Switch_on4_out1_1(31) <= Delay10_out1(31) WHEN stateControl_2 = '0' ELSE
      Switch_on4_out1(31);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1(0) <= X"00000000";
        Delay10_out1(1) <= X"00000000";
        Delay10_out1(2) <= X"00000000";
        Delay10_out1(3) <= X"00000000";
        Delay10_out1(4) <= X"00000000";
        Delay10_out1(5) <= X"00000000";
        Delay10_out1(6) <= X"00000000";
        Delay10_out1(7) <= X"00000000";
        Delay10_out1(8) <= X"00000000";
        Delay10_out1(9) <= X"00000000";
        Delay10_out1(10) <= X"00000000";
        Delay10_out1(11) <= X"00000000";
        Delay10_out1(12) <= X"00000000";
        Delay10_out1(13) <= X"00000000";
        Delay10_out1(14) <= X"00000000";
        Delay10_out1(15) <= X"00000000";
        Delay10_out1(16) <= X"00000000";
        Delay10_out1(17) <= X"00000000";
        Delay10_out1(18) <= X"00000000";
        Delay10_out1(19) <= X"00000000";
        Delay10_out1(20) <= X"00000000";
        Delay10_out1(21) <= X"00000000";
        Delay10_out1(22) <= X"00000000";
        Delay10_out1(23) <= X"00000000";
        Delay10_out1(24) <= X"00000000";
        Delay10_out1(25) <= X"00000000";
        Delay10_out1(26) <= X"00000000";
        Delay10_out1(27) <= X"00000000";
        Delay10_out1(28) <= X"00000000";
        Delay10_out1(29) <= X"00000000";
        Delay10_out1(30) <= X"00000000";
        Delay10_out1(31) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1(0) <= Switch_on4_out1_1(0);
        Delay10_out1(1) <= Switch_on4_out1_1(1);
        Delay10_out1(2) <= Switch_on4_out1_1(2);
        Delay10_out1(3) <= Switch_on4_out1_1(3);
        Delay10_out1(4) <= Switch_on4_out1_1(4);
        Delay10_out1(5) <= Switch_on4_out1_1(5);
        Delay10_out1(6) <= Switch_on4_out1_1(6);
        Delay10_out1(7) <= Switch_on4_out1_1(7);
        Delay10_out1(8) <= Switch_on4_out1_1(8);
        Delay10_out1(9) <= Switch_on4_out1_1(9);
        Delay10_out1(10) <= Switch_on4_out1_1(10);
        Delay10_out1(11) <= Switch_on4_out1_1(11);
        Delay10_out1(12) <= Switch_on4_out1_1(12);
        Delay10_out1(13) <= Switch_on4_out1_1(13);
        Delay10_out1(14) <= Switch_on4_out1_1(14);
        Delay10_out1(15) <= Switch_on4_out1_1(15);
        Delay10_out1(16) <= Switch_on4_out1_1(16);
        Delay10_out1(17) <= Switch_on4_out1_1(17);
        Delay10_out1(18) <= Switch_on4_out1_1(18);
        Delay10_out1(19) <= Switch_on4_out1_1(19);
        Delay10_out1(20) <= Switch_on4_out1_1(20);
        Delay10_out1(21) <= Switch_on4_out1_1(21);
        Delay10_out1(22) <= Switch_on4_out1_1(22);
        Delay10_out1(23) <= Switch_on4_out1_1(23);
        Delay10_out1(24) <= Switch_on4_out1_1(24);
        Delay10_out1(25) <= Switch_on4_out1_1(25);
        Delay10_out1(26) <= Switch_on4_out1_1(26);
        Delay10_out1(27) <= Switch_on4_out1_1(27);
        Delay10_out1(28) <= Switch_on4_out1_1(28);
        Delay10_out1(29) <= Switch_on4_out1_1(29);
        Delay10_out1(30) <= Switch_on4_out1_1(30);
        Delay10_out1(31) <= Switch_on4_out1_1(31);
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch_on4_out1(0) <= Delay10_out1(0) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(0);
  
  Switch_on4_out1(1) <= Delay10_out1(1) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(1);
  
  Switch_on4_out1(2) <= Delay10_out1(2) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(2);
  
  Switch_on4_out1(3) <= Delay10_out1(3) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(3);
  
  Switch_on4_out1(4) <= Delay10_out1(4) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(4);
  
  Switch_on4_out1(5) <= Delay10_out1(5) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(5);
  
  Switch_on4_out1(6) <= Delay10_out1(6) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(6);
  
  Switch_on4_out1(7) <= Delay10_out1(7) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(7);
  
  Switch_on4_out1(8) <= Delay10_out1(8) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(8);
  
  Switch_on4_out1(9) <= Delay10_out1(9) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(9);
  
  Switch_on4_out1(10) <= Delay10_out1(10) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(10);
  
  Switch_on4_out1(11) <= Delay10_out1(11) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(11);
  
  Switch_on4_out1(12) <= Delay10_out1(12) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(12);
  
  Switch_on4_out1(13) <= Delay10_out1(13) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(13);
  
  Switch_on4_out1(14) <= Delay10_out1(14) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(14);
  
  Switch_on4_out1(15) <= Delay10_out1(15) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(15);
  
  Switch_on4_out1(16) <= Delay10_out1(16) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(16);
  
  Switch_on4_out1(17) <= Delay10_out1(17) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(17);
  
  Switch_on4_out1(18) <= Delay10_out1(18) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(18);
  
  Switch_on4_out1(19) <= Delay10_out1(19) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(19);
  
  Switch_on4_out1(20) <= Delay10_out1(20) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(20);
  
  Switch_on4_out1(21) <= Delay10_out1(21) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(21);
  
  Switch_on4_out1(22) <= Delay10_out1(22) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(22);
  
  Switch_on4_out1(23) <= Delay10_out1(23) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(23);
  
  Switch_on4_out1(24) <= Delay10_out1(24) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(24);
  
  Switch_on4_out1(25) <= Delay10_out1(25) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(25);
  
  Switch_on4_out1(26) <= Delay10_out1(26) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(26);
  
  Switch_on4_out1(27) <= Delay10_out1(27) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(27);
  
  Switch_on4_out1(28) <= Delay10_out1(28) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(28);
  
  Switch_on4_out1(29) <= Delay10_out1(29) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(29);
  
  Switch_on4_out1(30) <= Delay10_out1(30) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(30);
  
  Switch_on4_out1(31) <= Delay10_out1(31) WHEN switch_compare_1 = '0' ELSE
      curent_valid_in_1(31);

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay5_out1 <= id_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch_on3_out1 <= Delay9_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay5_out1;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay4_out1 <= iq_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch_on2_out1 <= Delay8_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay4_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay3_out1 <= ix_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch_on1_out1 <= Delay7_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay3_out1;

  
  switch_compare_1_4 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay2_out1 <= iy_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay33_out1 <= Switch_on14_out1;
      END IF;
    END IF;
  END PROCESS Delay33_process;


  
  Switch_on14_out1 <= Delay33_out1 WHEN switch_compare_1_4 = '0' ELSE
      Delay2_out1;

  curent_valid_in_2(1) <= nfp_out_2_1_1;
  curent_valid_in_2(2) <= nfp_out_3_1_1;
  curent_valid_in_2(3) <= nfp_out_4_1_1;
  curent_valid_in_2(4) <= nfp_out_5_1_1;
  curent_valid_in_2(5) <= nfp_out_6_1_1;
  curent_valid_in_2(6) <= nfp_out_7_1_1;
  curent_valid_in_2(7) <= nfp_out_8_1_1;

  outputgen: FOR k IN 0 TO 7 GENERATE
    curent_valid_in_3(k) <= signed(curent_valid_in_2(k));
  END GENERATE;

  curent_valid_in_4 <= curent_valid_in_3;

  J_0 <= std_logic_vector(curent_valid_in_4(0));

  J_1 <= nfp_out_2_1_1;

  J_2 <= nfp_out_3_1_1;

  J_3 <= nfp_out_4_1_1;

  J_4 <= nfp_out_5_1_1;

  J_5 <= nfp_out_6_1_1;

  J_6 <= nfp_out_7_1_1;

  J_7 <= nfp_out_8_1_1;

  ce_out <= clk_enable;

END rtl;

