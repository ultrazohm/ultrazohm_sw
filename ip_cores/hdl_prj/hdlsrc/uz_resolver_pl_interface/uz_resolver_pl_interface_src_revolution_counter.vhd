-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_resolver_pl_interface\uz_resolver_pl_interface_src_revolution_counter.vhd
-- Created: 2023-01-24 16:42:36
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_resolver_pl_interface_src_revolution_counter
-- Source Path: uz_resolver_pl_interface/uz_resolver_pl_interface/revolution_counter
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_resolver_pl_interface_src_revolution_counter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        position_raw                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        resolver_polepairs                :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        cnt_reset                         :   IN    std_logic;
        cnt_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- int32
        );
END uz_resolver_pl_interface_src_revolution_counter;


ARCHITECTURE rtl OF uz_resolver_pl_interface_src_revolution_counter IS

  -- Signals
  SIGNAL position_raw_unsigned            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL resolver_polepairs_signed        : signed(31 DOWNTO 0);  -- int32
  SIGNAL cnt_out_tmp                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL angle_mech_old                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL cnt                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL angle_mech_old_next              : signed(31 DOWNTO 0);  -- int32
  SIGNAL cnt_next                         : signed(31 DOWNTO 0);  -- int32

BEGIN
  position_raw_unsigned <= unsigned(position_raw);

  resolver_polepairs_signed <= signed(resolver_polepairs);

  revolution_counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        angle_mech_old <= to_signed(16#00000000#, 32);
        cnt <= to_signed(16#00000000#, 32);
      ELSIF enb = '1' THEN
        angle_mech_old <= angle_mech_old_next;
        cnt <= cnt_next;
      END IF;
    END IF;
  END PROCESS revolution_counter_process;

  revolution_counter_output : PROCESS (angle_mech_old, cnt, cnt_reset, position_raw_unsigned,
       resolver_polepairs_signed)
    VARIABLE cnt_temp : signed(31 DOWNTO 0);
    VARIABLE sub_cast : signed(31 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(31 DOWNTO 0);
  BEGIN
    sub_cast_0 := to_signed(16#00000000#, 32);
    cnt_temp := cnt;
    --MATLAB Function 'uz_resolver_pl_interface/revolution_counter'
    sub_cast := signed(resize(position_raw_unsigned, 32));
    IF (angle_mech_old - sub_cast) > to_signed(16#0000EA60#, 32) THEN 
      cnt_temp := cnt + 1;
    ELSE 
      sub_cast_0 := signed(resize(position_raw_unsigned, 32));
      IF (angle_mech_old - sub_cast_0) < X"FFFF15A0" THEN 
        cnt_temp := cnt - 1;
      END IF;
    END IF;
    IF (cnt_temp > (resolver_polepairs_signed - 1)) OR (cnt_temp < (1 - resolver_polepairs_signed)) THEN 
      cnt_temp := to_signed(16#00000000#, 32);
    END IF;
    IF cnt_reset = '1' THEN 
      cnt_temp := to_signed(16#00000000#, 32);
    END IF;
    angle_mech_old_next <= signed(resize(position_raw_unsigned, 32));
    cnt_out_tmp <= cnt_temp;
    cnt_next <= cnt_temp;
  END PROCESS revolution_counter_output;


  cnt_out <= std_logic_vector(cnt_out_tmp);

END rtl;

