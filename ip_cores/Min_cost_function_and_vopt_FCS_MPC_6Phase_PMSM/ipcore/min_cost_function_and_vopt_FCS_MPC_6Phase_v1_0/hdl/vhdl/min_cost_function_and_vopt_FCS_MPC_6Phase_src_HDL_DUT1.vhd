-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\Min_cost_function_and_vopt_FCS_MPC_6Phase_PMSM\hdlsrc\min_cost_function_and_vopt_FCS_MPC_6Phase_PMSM\min_cost_function_and_vopt_FCS_MPC_6Phase_src_HDL_DUT1.vhd
-- Created: 2022-09-01 09:59:13
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Index_out                     ce_out        1e-08
-- last_applied_optimal_voltage_udce_out        1e-08
-- last_applied_optimal_voltage_uqce_out        1e-08
-- last_applied_optimal_voltage_uxce_out        1e-08
-- last_applied_optimal_voltage_uyce_out        1e-08
-- last_applied_optimal_voltage_uy_AXIce_out        1e-08
-- last_applied_optimal_voltage_ux_AXIce_out        1e-08
-- last_applied_optimal_voltage_uq_AXIce_out        1e-08
-- last_applied_optimal_voltage_ud_AXIce_out        1e-08
-- Index_out_AXI                 ce_out        1e-08
-- done                          ce_out        1e-08
-- done_complete                 ce_out        1e-08
-- done_complete_AXI             ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: min_cost_function_and_vopt_FCS_MPC_6Phase_src_HDL_DUT1
-- Source Path: min_cost_function_and_vopt_FCS_MPC_6Phase_PMSM/HDL_DUT1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY min_cost_function_and_vopt_FCS_MPC_6Phase_src_HDL_DUT1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        J_in                              :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        d_phase_voltage_per_switchimng_state :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        q_phase_voltage_per_switchimng_state :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        x_phase_voltage_per_switchimng_state :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        y_phase_voltage_per_switchimng_state :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        Index_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        use_AXI                           :   IN    std_logic;
        J_in_AXI                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        Index_in_AXI                      :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        d_phase_voltage_per_switchimng_state_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        q_phase_voltage_per_switchimng_state_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        x_phase_voltage_per_switchimng_state_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        y_phase_voltage_per_switchimng_state_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        valid_in_AXI                      :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        Index_out                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        last_applied_optimal_voltage_ud   :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltage_uq   :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltage_ux   :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltage_uy   :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltage_uy_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltage_ux_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltage_uq_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltage_ud_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        Index_out_AXI                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        done                              :   OUT   std_logic;
        done_complete                     :   OUT   std_logic;
        done_complete_AXI                 :   OUT   std_logic
        );
END min_cost_function_and_vopt_FCS_MPC_6Phase_src_HDL_DUT1;


ARCHITECTURE rtl OF min_cost_function_and_vopt_FCS_MPC_6Phase_src_HDL_DUT1 IS

  -- Component Declarations
  COMPONENT min_cost_function_and_vopt_FCS_MPC_6Phase_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT min_cost_function_and_vopt_FCS_MPC_6Phase_src_Compare_To_Constant
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : min_cost_function_and_vopt_FCS_MPC_6Phase_src_Detect_Rise_Positive
    USE ENTITY work.min_cost_function_and_vopt_FCS_MPC_6Phase_src_Detect_Rise_Positive(rtl);

  FOR ALL : min_cost_function_and_vopt_FCS_MPC_6Phase_src_Compare_To_Constant
    USE ENTITY work.min_cost_function_and_vopt_FCS_MPC_6Phase_src_Compare_To_Constant(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL Delay25_out1                     : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Switch_on13_out1                 : std_logic;
  SIGNAL Delay46_out1                     : std_logic;
  SIGNAL End_Cycle_3                      : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL J_in_signed                      : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL J_in_AXI_signed                  : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL Switch_on7_out1                  : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL Delay6_out1                      : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL Switch_on4_out1                  : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL Delay17_out1                     : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Index_in_signed                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL Index_in_AXI_signed              : signed(31 DOWNTO 0);  -- int32
  SIGNAL Switch_on8_out1                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay7_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Switch_on1_out1                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay18_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Constant_out1                    : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL Delay_out1                       : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL Switch1_out1                     : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL Switch_out1                      : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL Switch2_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay16_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL d_phase_voltage_per_switchimng_state_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL d_phase_voltage_per_switchimng_state_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on9_out1                  : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay8_out1                      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on2_out1                  : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay19_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch3_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay2_out1                      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay12_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL q_phase_voltage_per_switchimng_state_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL q_phase_voltage_per_switchimng_state_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on10_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay9_out1                      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on3_out1                  : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay20_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch4_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay3_out1                      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay13_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL x_phase_voltage_per_switchimng_state_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL x_phase_voltage_per_switchimng_state_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on11_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay10_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on5_out1                  : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay21_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch5_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay4_out1                      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay14_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL y_phase_voltage_per_switchimng_state_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL y_phase_voltage_per_switchimng_state_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on12_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay11_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on6_out1                  : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay22_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch6_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay5_out1                      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay15_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Constant1_out1                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay23_reg                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay23_out1                     : std_logic;
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL Delay24_reg                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay24_out1                     : std_logic;
  SIGNAL Constant2_out1                   : std_logic;
  SIGNAL Switch7_out1                     : std_logic;

BEGIN
  u_Detect_Rise_Positive : min_cost_function_and_vopt_FCS_MPC_6Phase_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay46_out1,
              Y => End_Cycle_3
              );

  u_Compare_To_Constant : min_cost_function_and_vopt_FCS_MPC_6Phase_src_Compare_To_Constant
    PORT MAP( u => std_logic_vector(Switch_on1_out1),  -- int32
              y => Compare_To_Constant_out1
              );

  End_Cycle <= use_AXI;

  End_Cycle_1 <= valid_in_AXI;

  End_Cycle_2 <= valid_in;

  enb <= clk_enable;

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay25_out1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  
  switch_compare_1 <= '1' WHEN Delay25_out1 = '1' ELSE
      '0';

  
  Switch_on13_out1 <= End_Cycle_2 WHEN switch_compare_1 = '0' ELSE
      End_Cycle_1;

  Delay46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay46_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay46_out1 <= Switch_on13_out1;
      END IF;
    END IF;
  END PROCESS Delay46_process;


  
  switch_compare_1_1 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  
  switch_compare_1_2 <= '1' WHEN Delay25_out1 = '1' ELSE
      '0';

  J_in_signed <= signed(J_in);

  J_in_AXI_signed <= signed(J_in_AXI);

  
  Switch_on7_out1 <= J_in_signed WHEN switch_compare_1_2 = '0' ELSE
      J_in_AXI_signed;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch_on7_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        Delay17_out1 <= Switch_on4_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  Switch_on4_out1 <= Delay17_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay6_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  
  switch_compare_1_4 <= '1' WHEN Delay25_out1 = '1' ELSE
      '0';

  Index_in_signed <= signed(Index_in);

  Index_in_AXI_signed <= signed(Index_in_AXI);

  
  Switch_on8_out1 <= Index_in_signed WHEN switch_compare_1_4 = '0' ELSE
      Index_in_AXI_signed;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch_on8_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay18_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Switch_on1_out1 <= Delay18_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay7_out1;

  
  switch_compare_1_5 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  Constant_out1 <= to_signed(16#7D000#, 20);

  
  switch_compare_1_6 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  
  Switch1_out1 <= Delay_out1 WHEN switch_compare_1_6 = '0' ELSE
      Switch_on4_out1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        Delay_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Switch_out1 <= Delay_out1 WHEN switch_compare_1_5 = '0' ELSE
      Constant_out1;

  
  Relational_Operator_relop1 <= '1' WHEN Switch_on4_out1 <= Switch_out1 ELSE
      '0';

  
  switch_compare_1_7 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch2_out1 <= Delay1_out1 WHEN switch_compare_1_7 = '0' ELSE
      Switch_on1_out1;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay16_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  Index_out <= std_logic_vector(Delay16_out1);

  
  switch_compare_1_8 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  
  switch_compare_1_9 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  
  switch_compare_1_10 <= '1' WHEN Delay25_out1 = '1' ELSE
      '0';

  d_phase_voltage_per_switchimng_state_signed <= signed(d_phase_voltage_per_switchimng_state);

  d_phase_voltage_per_switchimng_state_AXI_signed <= signed(d_phase_voltage_per_switchimng_state_AXI);

  
  Switch_on9_out1 <= d_phase_voltage_per_switchimng_state_signed WHEN switch_compare_1_10 = '0' ELSE
      d_phase_voltage_per_switchimng_state_AXI_signed;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on9_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay19_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  Switch_on2_out1 <= Delay19_out1 WHEN switch_compare_1_9 = '0' ELSE
      Delay8_out1;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch3_out1 <= Delay2_out1 WHEN switch_compare_1_8 = '0' ELSE
      Switch_on2_out1;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay12_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  last_applied_optimal_voltage_ud <= std_logic_vector(Delay12_out1);

  
  switch_compare_1_11 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  
  switch_compare_1_12 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  
  switch_compare_1_13 <= '1' WHEN Delay25_out1 = '1' ELSE
      '0';

  q_phase_voltage_per_switchimng_state_signed <= signed(q_phase_voltage_per_switchimng_state);

  q_phase_voltage_per_switchimng_state_AXI_signed <= signed(q_phase_voltage_per_switchimng_state_AXI);

  
  Switch_on10_out1 <= q_phase_voltage_per_switchimng_state_signed WHEN switch_compare_1_13 = '0' ELSE
      q_phase_voltage_per_switchimng_state_AXI_signed;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch_on10_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay20_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  
  Switch_on3_out1 <= Delay20_out1 WHEN switch_compare_1_12 = '0' ELSE
      Delay9_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch4_out1 <= Delay3_out1 WHEN switch_compare_1_11 = '0' ELSE
      Switch_on3_out1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  last_applied_optimal_voltage_uq <= std_logic_vector(Delay13_out1);

  
  switch_compare_1_14 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  
  switch_compare_1_15 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  
  switch_compare_1_16 <= '1' WHEN Delay25_out1 = '1' ELSE
      '0';

  x_phase_voltage_per_switchimng_state_signed <= signed(x_phase_voltage_per_switchimng_state);

  x_phase_voltage_per_switchimng_state_AXI_signed <= signed(x_phase_voltage_per_switchimng_state_AXI);

  
  Switch_on11_out1 <= x_phase_voltage_per_switchimng_state_signed WHEN switch_compare_1_16 = '0' ELSE
      x_phase_voltage_per_switchimng_state_AXI_signed;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay10_out1 <= Switch_on11_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay21_out1 <= Switch_on5_out1;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  
  Switch_on5_out1 <= Delay21_out1 WHEN switch_compare_1_15 = '0' ELSE
      Delay10_out1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch5_out1 <= Delay4_out1 WHEN switch_compare_1_14 = '0' ELSE
      Switch_on5_out1;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  last_applied_optimal_voltage_ux <= std_logic_vector(Delay14_out1);

  
  switch_compare_1_17 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  
  switch_compare_1_18 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  
  switch_compare_1_19 <= '1' WHEN Delay25_out1 = '1' ELSE
      '0';

  y_phase_voltage_per_switchimng_state_signed <= signed(y_phase_voltage_per_switchimng_state);

  y_phase_voltage_per_switchimng_state_AXI_signed <= signed(y_phase_voltage_per_switchimng_state_AXI);

  
  Switch_on12_out1 <= y_phase_voltage_per_switchimng_state_signed WHEN switch_compare_1_19 = '0' ELSE
      y_phase_voltage_per_switchimng_state_AXI_signed;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay11_out1 <= Switch_on12_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay22_out1 <= Switch_on6_out1;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  
  Switch_on6_out1 <= Delay22_out1 WHEN switch_compare_1_18 = '0' ELSE
      Delay11_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch6_out1 <= Delay5_out1 WHEN switch_compare_1_17 = '0' ELSE
      Switch_on6_out1;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay15_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  last_applied_optimal_voltage_uy <= std_logic_vector(Delay15_out1);

  last_applied_optimal_voltage_uy_AXI <= std_logic_vector(Delay15_out1);

  last_applied_optimal_voltage_ux_AXI <= std_logic_vector(Delay14_out1);

  last_applied_optimal_voltage_uq_AXI <= std_logic_vector(Delay13_out1);

  last_applied_optimal_voltage_ud_AXI <= std_logic_vector(Delay12_out1);

  Index_out_AXI <= std_logic_vector(Delay16_out1);

  Constant1_out1 <= to_signed(64, 32);

  
  Relational_Operator1_relop1 <= '1' WHEN Constant1_out1 = Switch_on1_out1 ELSE
      '0';

  Logical_Operator_out1 <= Relational_Operator1_relop1 AND End_Cycle_3;

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay23_reg(0) <= Logical_Operator_out1;
        Delay23_reg(1 TO 2) <= Delay23_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay23_process;

  Delay23_out1 <= Delay23_reg(2);

  
  switch_compare_1_20 <= '1' WHEN Delay23_out1 > '0' ELSE
      '0';

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay24_reg(0) <= End_Cycle_3;
        Delay24_reg(1 TO 2) <= Delay24_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay24_process;

  Delay24_out1 <= Delay24_reg(2);

  Constant2_out1 <= '0';

  
  Switch7_out1 <= Delay24_out1 WHEN switch_compare_1_20 = '0' ELSE
      Constant2_out1;

  ce_out <= clk_enable;

  done <= Switch7_out1;

  done_complete <= Delay23_out1;

  done_complete_AXI <= Delay23_out1;

END rtl;

