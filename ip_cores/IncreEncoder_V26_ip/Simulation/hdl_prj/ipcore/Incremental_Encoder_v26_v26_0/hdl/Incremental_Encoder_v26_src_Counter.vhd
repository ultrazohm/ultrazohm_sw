-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\inc_enc_v26\Incremental_Encoder_v26_src_Counter.vhd
-- Created: 2023-02-24 10:23:06
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Incremental_Encoder_v26_src_Counter
-- Source Path: inc_enc_v26/IncEnc_V25/Counter
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Incremental_Encoder_v26_src_Counter IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_5987_0                      :   IN    std_logic;
        Enable_ctr                        :   IN    std_logic;
        I_line                            :   IN    std_logic;
        Edge_rsvd                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
        Reset                             :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Incremental_Encoder_v26_src_Counter;


ARCHITECTURE rtl OF Incremental_Encoder_v26_src_Counter IS

  -- Signals
  SIGNAL alpha1_for_one_cycle_if_edge_recognized : signed(7 DOWNTO 0);  -- int8
  SIGNAL reset_old1_out1                  : std_logic;
  SIGNAL reset_old_switch1_out1           : std_logic;
  SIGNAL Detec_edge_sub_cast              : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Detec_edge_sub_cast_1            : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL Reset_flag_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reset_old_out1                   : std_logic;
  SIGNAL reset_old_switch_out1            : std_logic;
  SIGNAL Reset_flag_sub_cast              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Reset_flag_sub_cast_1            : unsigned(7 DOWNTO 0);  -- ufix8

BEGIN
  -- 1 for one cycle if edge recognized
  -- Reset

  
  reset_old_switch1_out1 <= reset_old1_out1 WHEN alpha1_for_one_cycle_if_edge_recognized = to_signed(16#00#, 8) ELSE
      Enable_ctr;

  reset_old1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reset_old1_out1 <= '0';
      ELSIF enb_1_5987_0 = '1' THEN
        reset_old1_out1 <= reset_old_switch1_out1;
      END IF;
    END IF;
  END PROCESS reset_old1_process;


  Detec_edge_sub_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Enable_ctr;
  Detec_edge_sub_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & reset_old1_out1;
  alpha1_for_one_cycle_if_edge_recognized <= Detec_edge_sub_cast - Detec_edge_sub_cast_1;

  Edge_rsvd <= std_logic_vector(alpha1_for_one_cycle_if_edge_recognized);

  
  reset_old_switch_out1 <= reset_old_out1 WHEN Reset_flag_out1 = to_unsigned(16#00#, 8) ELSE
      I_line;

  reset_old_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reset_old_out1 <= '0';
      ELSIF enb_1_5987_0 = '1' THEN
        reset_old_out1 <= reset_old_switch_out1;
      END IF;
    END IF;
  END PROCESS reset_old_process;


  Reset_flag_sub_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & I_line;
  Reset_flag_sub_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & reset_old_out1;
  Reset_flag_out1 <= Reset_flag_sub_cast - Reset_flag_sub_cast_1;

  Reset <= std_logic_vector(Reset_flag_out1);

END rtl;

