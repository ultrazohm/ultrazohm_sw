// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_SPWM_3ph_uz_SPWM_3ph,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.057000,HLS_SYN_LAT=14,HLS_SYN_TPT=15,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1020,HLS_SYN_LUT=1245,HLS_VERSION=2022_2}" *)

module uz_SPWM_3ph (
        u_a,
        u_b,
        u_c,
        u_dc,
        DC_a,
        DC_b,
        DC_c,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


input  [31:0] u_a;
input  [31:0] u_b;
input  [31:0] u_c;
input  [31:0] u_dc;
output  [31:0] DC_a;
output  [31:0] DC_b;
output  [31:0] DC_c;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    SPWM_single_phase_U0_ap_start;
wire    SPWM_single_phase_U0_ap_done;
wire    SPWM_single_phase_U0_ap_continue;
wire    SPWM_single_phase_U0_ap_idle;
wire    SPWM_single_phase_U0_ap_ready;
wire   [31:0] SPWM_single_phase_U0_DC;
wire    SPWM_single_phase_U0_DC_ap_vld;
wire    SPWM_single_phase_1_U0_ap_start;
wire    SPWM_single_phase_1_U0_ap_done;
wire    SPWM_single_phase_1_U0_ap_continue;
wire    SPWM_single_phase_1_U0_ap_idle;
wire    SPWM_single_phase_1_U0_ap_ready;
wire   [31:0] SPWM_single_phase_1_U0_DC;
wire    SPWM_single_phase_1_U0_DC_ap_vld;
wire    SPWM_single_phase_2_U0_ap_start;
wire    SPWM_single_phase_2_U0_ap_done;
wire    SPWM_single_phase_2_U0_ap_continue;
wire    SPWM_single_phase_2_U0_ap_idle;
wire    SPWM_single_phase_2_U0_ap_ready;
wire   [31:0] SPWM_single_phase_2_U0_DC;
wire    SPWM_single_phase_2_U0_DC_ap_vld;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_SPWM_single_phase_U0_ap_ready;
wire    ap_sync_SPWM_single_phase_U0_ap_ready;
reg    ap_sync_reg_SPWM_single_phase_1_U0_ap_ready;
wire    ap_sync_SPWM_single_phase_1_U0_ap_ready;
reg    ap_sync_reg_SPWM_single_phase_2_U0_ap_ready;
wire    ap_sync_SPWM_single_phase_2_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_SPWM_single_phase_U0_ap_ready = 1'b0;
#0 ap_sync_reg_SPWM_single_phase_1_U0_ap_ready = 1'b0;
#0 ap_sync_reg_SPWM_single_phase_2_U0_ap_ready = 1'b0;
end

uz_SPWM_3ph_SPWM_single_phase SPWM_single_phase_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(SPWM_single_phase_U0_ap_start),
    .ap_done(SPWM_single_phase_U0_ap_done),
    .ap_continue(SPWM_single_phase_U0_ap_continue),
    .ap_idle(SPWM_single_phase_U0_ap_idle),
    .ap_ready(SPWM_single_phase_U0_ap_ready),
    .voltage(u_a),
    .u_dc(u_dc),
    .DC(SPWM_single_phase_U0_DC),
    .DC_ap_vld(SPWM_single_phase_U0_DC_ap_vld)
);

uz_SPWM_3ph_SPWM_single_phase_1 SPWM_single_phase_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(SPWM_single_phase_1_U0_ap_start),
    .ap_done(SPWM_single_phase_1_U0_ap_done),
    .ap_continue(SPWM_single_phase_1_U0_ap_continue),
    .ap_idle(SPWM_single_phase_1_U0_ap_idle),
    .ap_ready(SPWM_single_phase_1_U0_ap_ready),
    .voltage(u_b),
    .u_dc(u_dc),
    .DC(SPWM_single_phase_1_U0_DC),
    .DC_ap_vld(SPWM_single_phase_1_U0_DC_ap_vld)
);

uz_SPWM_3ph_SPWM_single_phase_2 SPWM_single_phase_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(SPWM_single_phase_2_U0_ap_start),
    .ap_done(SPWM_single_phase_2_U0_ap_done),
    .ap_continue(SPWM_single_phase_2_U0_ap_continue),
    .ap_idle(SPWM_single_phase_2_U0_ap_idle),
    .ap_ready(SPWM_single_phase_2_U0_ap_ready),
    .voltage(u_c),
    .u_dc(u_dc),
    .DC(SPWM_single_phase_2_U0_DC),
    .DC_ap_vld(SPWM_single_phase_2_U0_DC_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_SPWM_single_phase_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_SPWM_single_phase_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_SPWM_single_phase_1_U0_ap_ready <= ap_sync_SPWM_single_phase_1_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_SPWM_single_phase_2_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_SPWM_single_phase_2_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_SPWM_single_phase_2_U0_ap_ready <= ap_sync_SPWM_single_phase_2_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_SPWM_single_phase_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_SPWM_single_phase_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_SPWM_single_phase_U0_ap_ready <= ap_sync_SPWM_single_phase_U0_ap_ready;
        end
    end
end

assign DC_a = SPWM_single_phase_U0_DC;

assign DC_b = SPWM_single_phase_1_U0_DC;

assign DC_c = SPWM_single_phase_2_U0_DC;

assign SPWM_single_phase_1_U0_ap_continue = ap_sync_done;

assign SPWM_single_phase_1_U0_ap_start = ((ap_sync_reg_SPWM_single_phase_1_U0_ap_ready ^ 1'b1) & ap_start);

assign SPWM_single_phase_2_U0_ap_continue = ap_sync_done;

assign SPWM_single_phase_2_U0_ap_start = ((ap_sync_reg_SPWM_single_phase_2_U0_ap_ready ^ 1'b1) & ap_start);

assign SPWM_single_phase_U0_ap_continue = ap_sync_done;

assign SPWM_single_phase_U0_ap_start = ((ap_sync_reg_SPWM_single_phase_U0_ap_ready ^ 1'b1) & ap_start);

assign ap_done = ap_sync_done;

assign ap_idle = (SPWM_single_phase_U0_ap_idle & SPWM_single_phase_2_U0_ap_idle & SPWM_single_phase_1_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_SPWM_single_phase_1_U0_ap_ready = (ap_sync_reg_SPWM_single_phase_1_U0_ap_ready | SPWM_single_phase_1_U0_ap_ready);

assign ap_sync_SPWM_single_phase_2_U0_ap_ready = (ap_sync_reg_SPWM_single_phase_2_U0_ap_ready | SPWM_single_phase_2_U0_ap_ready);

assign ap_sync_SPWM_single_phase_U0_ap_ready = (ap_sync_reg_SPWM_single_phase_U0_ap_ready | SPWM_single_phase_U0_ap_ready);

assign ap_sync_done = (SPWM_single_phase_U0_ap_done & SPWM_single_phase_2_U0_ap_done & SPWM_single_phase_1_U0_ap_done);

assign ap_sync_ready = (ap_sync_SPWM_single_phase_U0_ap_ready & ap_sync_SPWM_single_phase_2_U0_ap_ready & ap_sync_SPWM_single_phase_1_U0_ap_ready);


reg find_df_deadlock = 0;
// synthesis translate_off
`include "uz_SPWM_3ph_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //uz_SPWM_3ph

