-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP is
generic (
    C_M_AXI_AXI_READ_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_READ_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_READ_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_WRITE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_WRITE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_READ_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_READ_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_READ_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_AXI_WRITE_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_WRITE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_WRITE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_axi_read_AWVALID : OUT STD_LOGIC;
    m_axi_axi_read_AWREADY : IN STD_LOGIC;
    m_axi_axi_read_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ADDR_WIDTH-1 downto 0);
    m_axi_axi_read_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_read_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_AWUSER_WIDTH-1 downto 0);
    m_axi_axi_read_WVALID : OUT STD_LOGIC;
    m_axi_axi_read_WREADY : IN STD_LOGIC;
    m_axi_axi_read_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_DATA_WIDTH-1 downto 0);
    m_axi_axi_read_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_DATA_WIDTH/8-1 downto 0);
    m_axi_axi_read_WLAST : OUT STD_LOGIC;
    m_axi_axi_read_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_WUSER_WIDTH-1 downto 0);
    m_axi_axi_read_ARVALID : OUT STD_LOGIC;
    m_axi_axi_read_ARREADY : IN STD_LOGIC;
    m_axi_axi_read_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ADDR_WIDTH-1 downto 0);
    m_axi_axi_read_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_read_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ARUSER_WIDTH-1 downto 0);
    m_axi_axi_read_RVALID : IN STD_LOGIC;
    m_axi_axi_read_RREADY : OUT STD_LOGIC;
    m_axi_axi_read_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_DATA_WIDTH-1 downto 0);
    m_axi_axi_read_RLAST : IN STD_LOGIC;
    m_axi_axi_read_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_RUSER_WIDTH-1 downto 0);
    m_axi_axi_read_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_BVALID : IN STD_LOGIC;
    m_axi_axi_read_BREADY : OUT STD_LOGIC;
    m_axi_axi_read_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_BUSER_WIDTH-1 downto 0);
    m_axi_axi_write_AWVALID : OUT STD_LOGIC;
    m_axi_axi_write_AWREADY : IN STD_LOGIC;
    m_axi_axi_write_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ADDR_WIDTH-1 downto 0);
    m_axi_axi_write_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_write_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_AWUSER_WIDTH-1 downto 0);
    m_axi_axi_write_WVALID : OUT STD_LOGIC;
    m_axi_axi_write_WREADY : IN STD_LOGIC;
    m_axi_axi_write_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_DATA_WIDTH-1 downto 0);
    m_axi_axi_write_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_DATA_WIDTH/8-1 downto 0);
    m_axi_axi_write_WLAST : OUT STD_LOGIC;
    m_axi_axi_write_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_WUSER_WIDTH-1 downto 0);
    m_axi_axi_write_ARVALID : OUT STD_LOGIC;
    m_axi_axi_write_ARREADY : IN STD_LOGIC;
    m_axi_axi_write_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ADDR_WIDTH-1 downto 0);
    m_axi_axi_write_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_write_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ARUSER_WIDTH-1 downto 0);
    m_axi_axi_write_RVALID : IN STD_LOGIC;
    m_axi_axi_write_RREADY : OUT STD_LOGIC;
    m_axi_axi_write_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_DATA_WIDTH-1 downto 0);
    m_axi_axi_write_RLAST : IN STD_LOGIC;
    m_axi_axi_write_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_RUSER_WIDTH-1 downto 0);
    m_axi_axi_write_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_BVALID : IN STD_LOGIC;
    m_axi_axi_write_BREADY : OUT STD_LOGIC;
    m_axi_axi_write_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of MLP is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MLP_MLP,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.561000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=37,HLS_SYN_DSP=0,HLS_SYN_FF=21588,HLS_SYN_LUT=24373,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (70 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (70 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (70 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (70 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (70 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp10_stage0 : STD_LOGIC_VECTOR (70 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (70 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (70 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (70 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (70 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (70 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiLayerOutput : STD_LOGIC_VECTOR (63 downto 0);
    signal numberInputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOutputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberLayers : STD_LOGIC_VECTOR (31 downto 0);
    signal numberNeurons : STD_LOGIC_VECTOR (31 downto 0);
    signal loadParameters : STD_LOGIC_VECTOR (31 downto 0);
    signal exportLayers : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal bramWeight_ce0 : STD_LOGIC;
    signal bramWeight_we0 : STD_LOGIC;
    signal bramWeight_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramBias_ce0 : STD_LOGIC;
    signal bramBias_we0 : STD_LOGIC;
    signal bramBias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axi_read_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond11812_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond11610_reg_1295 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond11711_reg_1271 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal axi_write_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal axi_write_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp9_iter2 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal exitcond902_reg_1538 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond902_reg_1538_pp9_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal icmp_ln63_reg_1309 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_1528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_enable_reg_pp10_iter2 : STD_LOGIC := '0';
    signal ap_block_pp10_stage0 : BOOLEAN;
    signal exitcond1_reg_1567 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_1567_pp10_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal icmp_ln110_reg_1557 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_AWREADY : STD_LOGIC;
    signal axi_read_WREADY : STD_LOGIC;
    signal axi_read_ARVALID : STD_LOGIC;
    signal axi_read_ARREADY : STD_LOGIC;
    signal axi_read_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_RVALID : STD_LOGIC;
    signal axi_read_RREADY : STD_LOGIC;
    signal axi_read_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_RLAST : STD_LOGIC;
    signal axi_read_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_read_BVALID : STD_LOGIC;
    signal axi_read_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_read_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_AWVALID : STD_LOGIC;
    signal axi_write_AWREADY : STD_LOGIC;
    signal axi_write_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_WVALID : STD_LOGIC;
    signal axi_write_WREADY : STD_LOGIC;
    signal axi_write_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_ARREADY : STD_LOGIC;
    signal axi_write_RVALID : STD_LOGIC;
    signal axi_write_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_RLAST : STD_LOGIC;
    signal axi_write_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_write_BVALID : STD_LOGIC;
    signal axi_write_BREADY : STD_LOGIC;
    signal axi_write_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_write_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index86_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index86_reg_429_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_index80_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index80_reg_441_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal loop_index74_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index74_reg_453_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state32_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_11_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_12_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_10_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index68_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal axiLayerOutput_read_reg_1132 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasInput_read_reg_1137 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput_read_reg_1142 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_read_reg_1147 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_read_reg_1152 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_parBlocks_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln45_fu_613_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_reg_1173 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_1_fu_617_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln45_1_reg_1179 : STD_LOGIC_VECTOR (13 downto 0);
    signal l_parBlocks_1_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberLayers_read_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_parBlocks_2_reg_1208 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln53_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_addr_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond11812_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond11812_reg_1241_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_111_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_111_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal axi_read_addr_read_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_2_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_2_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln58_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_addr_1_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond11711_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond11711_reg_1271_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_113_reg_1275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal axi_read_addr_1_read_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln61_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal axi_read_addr_2_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond11610_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond11610_reg_1295_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_116_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal axi_read_addr_2_read_reg_1304 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal and_ln63_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_1_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_1_reg_1318 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state36_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln137_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal zext_ln137_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_1327 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln66_fu_819_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln66_reg_1337 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_processLayer_float_1u_0u_1_fu_564_ap_ready : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_ap_done : STD_LOGIC;
    signal ap_sync_grp_processLayer_float_1u_0u_1_fu_564_ap_ready : STD_LOGIC;
    signal ap_sync_grp_processLayer_float_1u_0u_1_fu_564_ap_done : STD_LOGIC;
    signal ap_block_state39_on_subcall_done : BOOLEAN;
    signal trunc_ln66_1_fu_822_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln66_1_reg_1342 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln137_2_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_2_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_3_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_3_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state40_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state41_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal add_ln137_1_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal trunc_ln137_fu_851_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln137_reg_1367 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln137_4_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_4_reg_1377 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state43_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal add_ln137_2_fu_869_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal zext_ln137_2_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_2_reg_1386 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub21_fu_883_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub21_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal sub21_cast_fu_888_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub21_cast_fu_888_p2 : signal is "no";
    signal sub21_cast_reg_1401 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln86_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln86_reg_1409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal icmp_ln81_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln86_fu_919_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln86_reg_1419 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1109_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_1120_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln84_1_reg_1430 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal icmp_ln137_6_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_6_reg_1435 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state54_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state55_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal add_ln137_4_fu_929_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal add_ln143_2_fu_949_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln143_2_reg_1449 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln137_7_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_7_reg_1454 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state57_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state58_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal add_ln137_5_fu_963_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal zext_ln137_5_fu_969_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_5_reg_1463 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1115_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_1126_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln97_1_reg_1478 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal grp_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln99_reg_1483 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln101_fu_974_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_1488 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln106_reg_1493 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_outputLayer_float_1u_0u_s_fu_589_ap_ready : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_ap_done : STD_LOGIC;
    signal ap_sync_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready : STD_LOGIC;
    signal ap_sync_grp_outputLayer_float_1u_0u_s_fu_589_ap_done : STD_LOGIC;
    signal ap_block_state66_on_subcall_done : BOOLEAN;
    signal trunc_ln130_fu_983_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln130_reg_1498 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln137_5_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_5_reg_1503 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_block_state67_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state68_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal add_ln137_3_fu_992_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal add_ln143_1_fu_1007_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln143_1_reg_1517 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln107_fu_1016_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln107_reg_1522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal icmp_ln107_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_addr_reg_1532 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond902_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_block_state71_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state72_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_state73_pp9_stage0_iter2 : BOOLEAN;
    signal ap_block_state73_io : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal empty_120_fu_1050_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal bramLayerResults_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramLayerResults_load_reg_1552 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal icmp_ln110_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op394_writeresp_state78 : BOOLEAN;
    signal ap_block_state78 : BOOLEAN;
    signal axi_write_addr_1_reg_1561 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp10_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp10_stage0 : signal is "none";
    signal ap_block_state80_pp10_stage0_iter0 : BOOLEAN;
    signal ap_block_state81_pp10_stage0_iter1 : BOOLEAN;
    signal ap_block_state82_pp10_stage0_iter2 : BOOLEAN;
    signal ap_block_state82_io : BOOLEAN;
    signal ap_block_pp10_stage0_11001 : BOOLEAN;
    signal empty_124_fu_1094_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp10_iter0 : STD_LOGIC := '0';
    signal layerBuffer0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer0_load_5_reg_1581 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp10_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state36 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state40 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state43 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_processLayer_float_1u_0u_s_fu_576_ap_ready : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_ap_done : STD_LOGIC;
    signal ap_sync_grp_processLayer_float_1u_0u_s_fu_576_ap_ready : STD_LOGIC;
    signal ap_sync_grp_processLayer_float_1u_0u_s_fu_576_ap_done : STD_LOGIC;
    signal ap_block_state53_on_subcall_done : BOOLEAN;
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state54 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state57 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state67 : STD_LOGIC;
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state71 : STD_LOGIC;
    signal ap_block_pp10_stage0_subdone : BOOLEAN;
    signal ap_condition_pp10_exit_iter0_state80 : STD_LOGIC;
    signal inputData_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal inputData_ce0 : STD_LOGIC;
    signal inputData_we0 : STD_LOGIC;
    signal inputData_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal layerBuffer0_ce0 : STD_LOGIC;
    signal layerBuffer0_we0 : STD_LOGIC;
    signal layerBuffer0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerBuffer1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal layerBuffer1_ce0 : STD_LOGIC;
    signal layerBuffer1_we0 : STD_LOGIC;
    signal layerBuffer1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramLayerResults_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramLayerResults_ce0 : STD_LOGIC;
    signal bramLayerResults_we0 : STD_LOGIC;
    signal bramLayerResults_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_weights_ce0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_weights_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_weights_we0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_weights_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_weights_ce1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_weights_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_weights_we1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_input_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_input_ce0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_input_we0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_input_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_input_ce1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_input_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_input_we1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_bias_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_bias_ce0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_bias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_bias_we0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_bias_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_bias_ce1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_bias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_bias_we1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_output_ce0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_output_we0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_output_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_output_ce1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_p_output_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_1_fu_564_p_output_we1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_ap_start : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_ap_idle : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_1_fu_564_ap_continue : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_weights_ce0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_weights_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_weights_we0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_weights_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_weights_ce1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_weights_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_weights_we1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_input_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_input_ce0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_input_we0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_input_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_input_ce1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_input_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_input_we1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_bias_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_bias_ce0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_bias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_bias_we0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_bias_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_bias_ce1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_bias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_bias_we1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_output_ce0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_output_we0 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_output_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_output_ce1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_p_output_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processLayer_float_1u_0u_s_fu_576_p_output_we1 : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_ap_start : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_ap_idle : STD_LOGIC;
    signal grp_processLayer_float_1u_0u_s_fu_576_ap_continue : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_weights_ce0 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_weights_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_weights_we0 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_weights_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_weights_ce1 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_weights_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_weights_we1 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_input_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_input_ce0 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_input_we0 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_input_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_input_ce1 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_input_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_input_we1 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_bias_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_bias_ce0 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_bias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_bias_we0 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_bias_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_bias_ce1 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_bias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_bias_we1 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_output_ce0 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_output_we0 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_output_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_output_ce1 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_output_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_outputLayer_float_1u_0u_s_fu_589_p_output_we1 : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_ap_start : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_ap_idle : STD_LOGIC;
    signal grp_outputLayer_float_1u_0u_s_fu_589_ap_continue : STD_LOGIC;
    signal ap_phi_mux_loop_index86_phi_fu_433_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index80_phi_fu_445_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index74_phi_fu_457_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_9_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_processLayer_float_1u_0u_1_fu_564_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_done : STD_LOGIC := '0';
    signal grp_processLayer_float_1u_0u_s_fu_576_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_done : STD_LOGIC := '0';
    signal grp_outputLayer_float_1u_0u_s_fu_589_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_done : STD_LOGIC := '0';
    signal loop_index86_cast_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index80_cast_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index74_cast_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln137_1_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal zext_ln143_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal zext_ln137_4_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal zext_ln143_2_fu_954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal zext_ln137_3_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal zext_ln143_1_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index68_cast_fu_1056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_cast_fu_1100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_cast_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_cast_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast8_cast_fu_1035_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast7_cast_fu_1079_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_121_fu_1061_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp9_stage0_01001 : BOOLEAN;
    signal ap_block_state87 : BOOLEAN;
    signal empty_125_fu_1105_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp10_stage0_01001 : BOOLEAN;
    signal add_ln50_fu_621_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_1_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToCopy_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_fu_653_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast2_fu_703_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast_fu_747_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln137_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln143_fu_855_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_118_fu_880_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln84_1_fu_909_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln86_fu_919_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln137_2_fu_940_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln143_3_fu_944_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln137_1_fu_1003_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast8_fu_1026_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast7_fu_1070_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1109_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (70 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;
    signal ap_idle_pp10 : STD_LOGIC;
    signal ap_enable_pp10 : STD_LOGIC;

    component MLP_processLayer_float_1u_0u_1 IS
    port (
        p_weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weights_ce0 : OUT STD_LOGIC;
        p_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we0 : OUT STD_LOGIC;
        p_weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weights_ce1 : OUT STD_LOGIC;
        p_weights_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we1 : OUT STD_LOGIC;
        p_input_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        p_input_ce0 : OUT STD_LOGIC;
        p_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we0 : OUT STD_LOGIC;
        p_input_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        p_input_ce1 : OUT STD_LOGIC;
        p_input_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we1 : OUT STD_LOGIC;
        p_bias_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_bias_ce0 : OUT STD_LOGIC;
        p_bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we0 : OUT STD_LOGIC;
        p_bias_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_bias_ce1 : OUT STD_LOGIC;
        p_bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we1 : OUT STD_LOGIC;
        p_output_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_output_ce0 : OUT STD_LOGIC;
        p_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we0 : OUT STD_LOGIC;
        p_output_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_output_ce1 : OUT STD_LOGIC;
        p_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we1 : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MLP_processLayer_float_1u_0u_s IS
    port (
        p_weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weights_ce0 : OUT STD_LOGIC;
        p_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we0 : OUT STD_LOGIC;
        p_weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weights_ce1 : OUT STD_LOGIC;
        p_weights_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we1 : OUT STD_LOGIC;
        p_weights_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_input_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_input_ce0 : OUT STD_LOGIC;
        p_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we0 : OUT STD_LOGIC;
        p_input_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_input_ce1 : OUT STD_LOGIC;
        p_input_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we1 : OUT STD_LOGIC;
        p_bias_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_bias_ce0 : OUT STD_LOGIC;
        p_bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we0 : OUT STD_LOGIC;
        p_bias_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_bias_ce1 : OUT STD_LOGIC;
        p_bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we1 : OUT STD_LOGIC;
        p_bias_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        p_output_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_output_ce0 : OUT STD_LOGIC;
        p_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we0 : OUT STD_LOGIC;
        p_output_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_output_ce1 : OUT STD_LOGIC;
        p_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we1 : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_weights_offset_ap_vld : IN STD_LOGIC;
        p_bias_offset_ap_vld : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MLP_outputLayer_float_1u_0u_s IS
    port (
        p_weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weights_ce0 : OUT STD_LOGIC;
        p_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we0 : OUT STD_LOGIC;
        p_weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weights_ce1 : OUT STD_LOGIC;
        p_weights_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we1 : OUT STD_LOGIC;
        p_weights_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_input_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_input_ce0 : OUT STD_LOGIC;
        p_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we0 : OUT STD_LOGIC;
        p_input_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_input_ce1 : OUT STD_LOGIC;
        p_input_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_we1 : OUT STD_LOGIC;
        p_bias_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_bias_ce0 : OUT STD_LOGIC;
        p_bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we0 : OUT STD_LOGIC;
        p_bias_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_bias_ce1 : OUT STD_LOGIC;
        p_bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_bias_we1 : OUT STD_LOGIC;
        p_bias_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        p_output_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_output_ce0 : OUT STD_LOGIC;
        p_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we0 : OUT STD_LOGIC;
        p_output_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_output_ce1 : OUT STD_LOGIC;
        p_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_we1 : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_weights_offset_ap_vld : IN STD_LOGIC;
        p_bias_offset_ap_vld : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MLP_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MLP_mac_muladd_14s_14s_14ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component MLP_mul_mul_14s_14s_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component MLP_bramWeight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_bramBias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_inputData IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_layerBuffer0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_bramLayerResults IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiWeightInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiBiasInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiLayerOutput : OUT STD_LOGIC_VECTOR (63 downto 0);
        numberInputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberOutputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberLayers : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberNeurons : OUT STD_LOGIC_VECTOR (31 downto 0);
        loadParameters : OUT STD_LOGIC_VECTOR (31 downto 0);
        exportLayers : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_axi_read_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MLP_axi_write_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bramWeight_U : component MLP_bramWeight
    generic map (
        DataWidth => 32,
        AddressRange => 12288,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_address0,
        ce0 => bramWeight_ce0,
        we0 => bramWeight_we0,
        d0 => bramWeight_d0,
        q0 => bramWeight_q0);

    bramBias_U : component MLP_bramBias
    generic map (
        DataWidth => 32,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramBias_address0,
        ce0 => bramBias_ce0,
        we0 => bramBias_we0,
        d0 => bramBias_d0,
        q0 => bramBias_q0);

    control_s_axi_U : component MLP_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        axiWeightInput => axiWeightInput,
        axiBiasInput => axiBiasInput,
        axiLayerOutput => axiLayerOutput,
        numberInputs => numberInputs,
        numberOutputs => numberOutputs,
        numberLayers => numberLayers,
        numberNeurons => numberNeurons,
        loadParameters => loadParameters,
        exportLayers => exportLayers);

    axi_read_m_axi_U : component MLP_axi_read_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 128,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_READ_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_READ_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_READ_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_READ_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_READ_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_READ_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_READ_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_READ_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXI_READ_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_READ_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_READ_CACHE_VALUE)
    port map (
        AWVALID => m_axi_axi_read_AWVALID,
        AWREADY => m_axi_axi_read_AWREADY,
        AWADDR => m_axi_axi_read_AWADDR,
        AWID => m_axi_axi_read_AWID,
        AWLEN => m_axi_axi_read_AWLEN,
        AWSIZE => m_axi_axi_read_AWSIZE,
        AWBURST => m_axi_axi_read_AWBURST,
        AWLOCK => m_axi_axi_read_AWLOCK,
        AWCACHE => m_axi_axi_read_AWCACHE,
        AWPROT => m_axi_axi_read_AWPROT,
        AWQOS => m_axi_axi_read_AWQOS,
        AWREGION => m_axi_axi_read_AWREGION,
        AWUSER => m_axi_axi_read_AWUSER,
        WVALID => m_axi_axi_read_WVALID,
        WREADY => m_axi_axi_read_WREADY,
        WDATA => m_axi_axi_read_WDATA,
        WSTRB => m_axi_axi_read_WSTRB,
        WLAST => m_axi_axi_read_WLAST,
        WID => m_axi_axi_read_WID,
        WUSER => m_axi_axi_read_WUSER,
        ARVALID => m_axi_axi_read_ARVALID,
        ARREADY => m_axi_axi_read_ARREADY,
        ARADDR => m_axi_axi_read_ARADDR,
        ARID => m_axi_axi_read_ARID,
        ARLEN => m_axi_axi_read_ARLEN,
        ARSIZE => m_axi_axi_read_ARSIZE,
        ARBURST => m_axi_axi_read_ARBURST,
        ARLOCK => m_axi_axi_read_ARLOCK,
        ARCACHE => m_axi_axi_read_ARCACHE,
        ARPROT => m_axi_axi_read_ARPROT,
        ARQOS => m_axi_axi_read_ARQOS,
        ARREGION => m_axi_axi_read_ARREGION,
        ARUSER => m_axi_axi_read_ARUSER,
        RVALID => m_axi_axi_read_RVALID,
        RREADY => m_axi_axi_read_RREADY,
        RDATA => m_axi_axi_read_RDATA,
        RLAST => m_axi_axi_read_RLAST,
        RID => m_axi_axi_read_RID,
        RUSER => m_axi_axi_read_RUSER,
        RRESP => m_axi_axi_read_RRESP,
        BVALID => m_axi_axi_read_BVALID,
        BREADY => m_axi_axi_read_BREADY,
        BRESP => m_axi_axi_read_BRESP,
        BID => m_axi_axi_read_BID,
        BUSER => m_axi_axi_read_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => axi_read_ARVALID,
        I_ARREADY => axi_read_ARREADY,
        I_ARADDR => axi_read_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => axi_read_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => axi_read_RVALID,
        I_RREADY => axi_read_RREADY,
        I_RDATA => axi_read_RDATA,
        I_RID => axi_read_RID,
        I_RUSER => axi_read_RUSER,
        I_RRESP => axi_read_RRESP,
        I_RLAST => axi_read_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => axi_read_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => axi_read_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => axi_read_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => axi_read_BRESP,
        I_BID => axi_read_BID,
        I_BUSER => axi_read_BUSER);

    axi_write_m_axi_U : component MLP_axi_write_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_WRITE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_WRITE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_WRITE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_WRITE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_WRITE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_WRITE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_WRITE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_WRITE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXI_WRITE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_WRITE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_WRITE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_axi_write_AWVALID,
        AWREADY => m_axi_axi_write_AWREADY,
        AWADDR => m_axi_axi_write_AWADDR,
        AWID => m_axi_axi_write_AWID,
        AWLEN => m_axi_axi_write_AWLEN,
        AWSIZE => m_axi_axi_write_AWSIZE,
        AWBURST => m_axi_axi_write_AWBURST,
        AWLOCK => m_axi_axi_write_AWLOCK,
        AWCACHE => m_axi_axi_write_AWCACHE,
        AWPROT => m_axi_axi_write_AWPROT,
        AWQOS => m_axi_axi_write_AWQOS,
        AWREGION => m_axi_axi_write_AWREGION,
        AWUSER => m_axi_axi_write_AWUSER,
        WVALID => m_axi_axi_write_WVALID,
        WREADY => m_axi_axi_write_WREADY,
        WDATA => m_axi_axi_write_WDATA,
        WSTRB => m_axi_axi_write_WSTRB,
        WLAST => m_axi_axi_write_WLAST,
        WID => m_axi_axi_write_WID,
        WUSER => m_axi_axi_write_WUSER,
        ARVALID => m_axi_axi_write_ARVALID,
        ARREADY => m_axi_axi_write_ARREADY,
        ARADDR => m_axi_axi_write_ARADDR,
        ARID => m_axi_axi_write_ARID,
        ARLEN => m_axi_axi_write_ARLEN,
        ARSIZE => m_axi_axi_write_ARSIZE,
        ARBURST => m_axi_axi_write_ARBURST,
        ARLOCK => m_axi_axi_write_ARLOCK,
        ARCACHE => m_axi_axi_write_ARCACHE,
        ARPROT => m_axi_axi_write_ARPROT,
        ARQOS => m_axi_axi_write_ARQOS,
        ARREGION => m_axi_axi_write_ARREGION,
        ARUSER => m_axi_axi_write_ARUSER,
        RVALID => m_axi_axi_write_RVALID,
        RREADY => m_axi_axi_write_RREADY,
        RDATA => m_axi_axi_write_RDATA,
        RLAST => m_axi_axi_write_RLAST,
        RID => m_axi_axi_write_RID,
        RUSER => m_axi_axi_write_RUSER,
        RRESP => m_axi_axi_write_RRESP,
        BVALID => m_axi_axi_write_BVALID,
        BREADY => m_axi_axi_write_BREADY,
        BRESP => m_axi_axi_write_BRESP,
        BID => m_axi_axi_write_BID,
        BUSER => m_axi_axi_write_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => axi_write_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => axi_write_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => axi_write_RDATA,
        I_RID => axi_write_RID,
        I_RUSER => axi_write_RUSER,
        I_RRESP => axi_write_RRESP,
        I_RLAST => axi_write_RLAST,
        I_AWVALID => axi_write_AWVALID,
        I_AWREADY => axi_write_AWREADY,
        I_AWADDR => axi_write_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => axi_write_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => axi_write_WVALID,
        I_WREADY => axi_write_WREADY,
        I_WDATA => axi_write_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => axi_write_BVALID,
        I_BREADY => axi_write_BREADY,
        I_BRESP => axi_write_BRESP,
        I_BID => axi_write_BID,
        I_BUSER => axi_write_BUSER);

    inputData_U : component MLP_inputData
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => inputData_address0,
        ce0 => inputData_ce0,
        we0 => inputData_we0,
        d0 => inputData_d0,
        q0 => inputData_q0);

    layerBuffer0_U : component MLP_layerBuffer0
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layerBuffer0_address0,
        ce0 => layerBuffer0_ce0,
        we0 => layerBuffer0_we0,
        d0 => layerBuffer0_d0,
        q0 => layerBuffer0_q0);

    layerBuffer1_U : component MLP_layerBuffer0
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layerBuffer1_address0,
        ce0 => layerBuffer1_ce0,
        we0 => layerBuffer1_we0,
        d0 => layerBuffer0_q0,
        q0 => layerBuffer1_q0);

    bramLayerResults_U : component MLP_bramLayerResults
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramLayerResults_address0,
        ce0 => bramLayerResults_ce0,
        we0 => bramLayerResults_we0,
        d0 => bramLayerResults_d0,
        q0 => bramLayerResults_q0);

    grp_processLayer_float_1u_0u_1_fu_564 : component MLP_processLayer_float_1u_0u_1
    port map (
        p_weights_address0 => grp_processLayer_float_1u_0u_1_fu_564_p_weights_address0,
        p_weights_ce0 => grp_processLayer_float_1u_0u_1_fu_564_p_weights_ce0,
        p_weights_d0 => grp_processLayer_float_1u_0u_1_fu_564_p_weights_d0,
        p_weights_q0 => bramWeight_q0,
        p_weights_we0 => grp_processLayer_float_1u_0u_1_fu_564_p_weights_we0,
        p_weights_address1 => grp_processLayer_float_1u_0u_1_fu_564_p_weights_address1,
        p_weights_ce1 => grp_processLayer_float_1u_0u_1_fu_564_p_weights_ce1,
        p_weights_d1 => grp_processLayer_float_1u_0u_1_fu_564_p_weights_d1,
        p_weights_q1 => ap_const_lv32_0,
        p_weights_we1 => grp_processLayer_float_1u_0u_1_fu_564_p_weights_we1,
        p_input_address0 => grp_processLayer_float_1u_0u_1_fu_564_p_input_address0,
        p_input_ce0 => grp_processLayer_float_1u_0u_1_fu_564_p_input_ce0,
        p_input_d0 => grp_processLayer_float_1u_0u_1_fu_564_p_input_d0,
        p_input_q0 => inputData_q0,
        p_input_we0 => grp_processLayer_float_1u_0u_1_fu_564_p_input_we0,
        p_input_address1 => grp_processLayer_float_1u_0u_1_fu_564_p_input_address1,
        p_input_ce1 => grp_processLayer_float_1u_0u_1_fu_564_p_input_ce1,
        p_input_d1 => grp_processLayer_float_1u_0u_1_fu_564_p_input_d1,
        p_input_q1 => ap_const_lv32_0,
        p_input_we1 => grp_processLayer_float_1u_0u_1_fu_564_p_input_we1,
        p_bias_address0 => grp_processLayer_float_1u_0u_1_fu_564_p_bias_address0,
        p_bias_ce0 => grp_processLayer_float_1u_0u_1_fu_564_p_bias_ce0,
        p_bias_d0 => grp_processLayer_float_1u_0u_1_fu_564_p_bias_d0,
        p_bias_q0 => bramBias_q0,
        p_bias_we0 => grp_processLayer_float_1u_0u_1_fu_564_p_bias_we0,
        p_bias_address1 => grp_processLayer_float_1u_0u_1_fu_564_p_bias_address1,
        p_bias_ce1 => grp_processLayer_float_1u_0u_1_fu_564_p_bias_ce1,
        p_bias_d1 => grp_processLayer_float_1u_0u_1_fu_564_p_bias_d1,
        p_bias_q1 => ap_const_lv32_0,
        p_bias_we1 => grp_processLayer_float_1u_0u_1_fu_564_p_bias_we1,
        p_output_address0 => grp_processLayer_float_1u_0u_1_fu_564_p_output_address0,
        p_output_ce0 => grp_processLayer_float_1u_0u_1_fu_564_p_output_ce0,
        p_output_d0 => grp_processLayer_float_1u_0u_1_fu_564_p_output_d0,
        p_output_q0 => ap_const_lv32_0,
        p_output_we0 => grp_processLayer_float_1u_0u_1_fu_564_p_output_we0,
        p_output_address1 => grp_processLayer_float_1u_0u_1_fu_564_p_output_address1,
        p_output_ce1 => grp_processLayer_float_1u_0u_1_fu_564_p_output_ce1,
        p_output_d1 => grp_processLayer_float_1u_0u_1_fu_564_p_output_d1,
        p_output_q1 => ap_const_lv32_0,
        p_output_we1 => grp_processLayer_float_1u_0u_1_fu_564_p_output_we1,
        p_n => l_parBlocks_1_reg_1185,
        p_k => l_parBlocks_reg_1161,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        ap_start => grp_processLayer_float_1u_0u_1_fu_564_ap_start,
        ap_done => grp_processLayer_float_1u_0u_1_fu_564_ap_done,
        ap_ready => grp_processLayer_float_1u_0u_1_fu_564_ap_ready,
        ap_idle => grp_processLayer_float_1u_0u_1_fu_564_ap_idle,
        ap_continue => grp_processLayer_float_1u_0u_1_fu_564_ap_continue);

    grp_processLayer_float_1u_0u_s_fu_576 : component MLP_processLayer_float_1u_0u_s
    port map (
        p_weights_address0 => grp_processLayer_float_1u_0u_s_fu_576_p_weights_address0,
        p_weights_ce0 => grp_processLayer_float_1u_0u_s_fu_576_p_weights_ce0,
        p_weights_d0 => grp_processLayer_float_1u_0u_s_fu_576_p_weights_d0,
        p_weights_q0 => bramWeight_q0,
        p_weights_we0 => grp_processLayer_float_1u_0u_s_fu_576_p_weights_we0,
        p_weights_address1 => grp_processLayer_float_1u_0u_s_fu_576_p_weights_address1,
        p_weights_ce1 => grp_processLayer_float_1u_0u_s_fu_576_p_weights_ce1,
        p_weights_d1 => grp_processLayer_float_1u_0u_s_fu_576_p_weights_d1,
        p_weights_q1 => ap_const_lv32_0,
        p_weights_we1 => grp_processLayer_float_1u_0u_s_fu_576_p_weights_we1,
        p_weights_offset => mul_ln84_1_reg_1430,
        p_input_address0 => grp_processLayer_float_1u_0u_s_fu_576_p_input_address0,
        p_input_ce0 => grp_processLayer_float_1u_0u_s_fu_576_p_input_ce0,
        p_input_d0 => grp_processLayer_float_1u_0u_s_fu_576_p_input_d0,
        p_input_q0 => layerBuffer1_q0,
        p_input_we0 => grp_processLayer_float_1u_0u_s_fu_576_p_input_we0,
        p_input_address1 => grp_processLayer_float_1u_0u_s_fu_576_p_input_address1,
        p_input_ce1 => grp_processLayer_float_1u_0u_s_fu_576_p_input_ce1,
        p_input_d1 => grp_processLayer_float_1u_0u_s_fu_576_p_input_d1,
        p_input_q1 => ap_const_lv32_0,
        p_input_we1 => grp_processLayer_float_1u_0u_s_fu_576_p_input_we1,
        p_bias_address0 => grp_processLayer_float_1u_0u_s_fu_576_p_bias_address0,
        p_bias_ce0 => grp_processLayer_float_1u_0u_s_fu_576_p_bias_ce0,
        p_bias_d0 => grp_processLayer_float_1u_0u_s_fu_576_p_bias_d0,
        p_bias_q0 => bramBias_q0,
        p_bias_we0 => grp_processLayer_float_1u_0u_s_fu_576_p_bias_we0,
        p_bias_address1 => grp_processLayer_float_1u_0u_s_fu_576_p_bias_address1,
        p_bias_ce1 => grp_processLayer_float_1u_0u_s_fu_576_p_bias_ce1,
        p_bias_d1 => grp_processLayer_float_1u_0u_s_fu_576_p_bias_d1,
        p_bias_q1 => ap_const_lv32_0,
        p_bias_we1 => grp_processLayer_float_1u_0u_s_fu_576_p_bias_we1,
        p_bias_offset => mul_ln86_reg_1419,
        p_output_address0 => grp_processLayer_float_1u_0u_s_fu_576_p_output_address0,
        p_output_ce0 => grp_processLayer_float_1u_0u_s_fu_576_p_output_ce0,
        p_output_d0 => grp_processLayer_float_1u_0u_s_fu_576_p_output_d0,
        p_output_q0 => ap_const_lv32_0,
        p_output_we0 => grp_processLayer_float_1u_0u_s_fu_576_p_output_we0,
        p_output_address1 => grp_processLayer_float_1u_0u_s_fu_576_p_output_address1,
        p_output_ce1 => grp_processLayer_float_1u_0u_s_fu_576_p_output_ce1,
        p_output_d1 => grp_processLayer_float_1u_0u_s_fu_576_p_output_d1,
        p_output_q1 => ap_const_lv32_0,
        p_output_we1 => grp_processLayer_float_1u_0u_s_fu_576_p_output_we1,
        p_n => l_parBlocks_1_reg_1185,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_weights_offset_ap_vld => ap_const_logic_1,
        p_bias_offset_ap_vld => ap_const_logic_1,
        p_n_ap_vld => ap_const_logic_1,
        ap_start => grp_processLayer_float_1u_0u_s_fu_576_ap_start,
        ap_done => grp_processLayer_float_1u_0u_s_fu_576_ap_done,
        ap_ready => grp_processLayer_float_1u_0u_s_fu_576_ap_ready,
        ap_idle => grp_processLayer_float_1u_0u_s_fu_576_ap_idle,
        ap_continue => grp_processLayer_float_1u_0u_s_fu_576_ap_continue);

    grp_outputLayer_float_1u_0u_s_fu_589 : component MLP_outputLayer_float_1u_0u_s
    port map (
        p_weights_address0 => grp_outputLayer_float_1u_0u_s_fu_589_p_weights_address0,
        p_weights_ce0 => grp_outputLayer_float_1u_0u_s_fu_589_p_weights_ce0,
        p_weights_d0 => grp_outputLayer_float_1u_0u_s_fu_589_p_weights_d0,
        p_weights_q0 => bramWeight_q0,
        p_weights_we0 => grp_outputLayer_float_1u_0u_s_fu_589_p_weights_we0,
        p_weights_address1 => grp_outputLayer_float_1u_0u_s_fu_589_p_weights_address1,
        p_weights_ce1 => grp_outputLayer_float_1u_0u_s_fu_589_p_weights_ce1,
        p_weights_d1 => grp_outputLayer_float_1u_0u_s_fu_589_p_weights_d1,
        p_weights_q1 => ap_const_lv32_0,
        p_weights_we1 => grp_outputLayer_float_1u_0u_s_fu_589_p_weights_we1,
        p_weights_offset => mul_ln97_1_reg_1478,
        p_input_address0 => grp_outputLayer_float_1u_0u_s_fu_589_p_input_address0,
        p_input_ce0 => grp_outputLayer_float_1u_0u_s_fu_589_p_input_ce0,
        p_input_d0 => grp_outputLayer_float_1u_0u_s_fu_589_p_input_d0,
        p_input_q0 => layerBuffer1_q0,
        p_input_we0 => grp_outputLayer_float_1u_0u_s_fu_589_p_input_we0,
        p_input_address1 => grp_outputLayer_float_1u_0u_s_fu_589_p_input_address1,
        p_input_ce1 => grp_outputLayer_float_1u_0u_s_fu_589_p_input_ce1,
        p_input_d1 => grp_outputLayer_float_1u_0u_s_fu_589_p_input_d1,
        p_input_q1 => ap_const_lv32_0,
        p_input_we1 => grp_outputLayer_float_1u_0u_s_fu_589_p_input_we1,
        p_bias_address0 => grp_outputLayer_float_1u_0u_s_fu_589_p_bias_address0,
        p_bias_ce0 => grp_outputLayer_float_1u_0u_s_fu_589_p_bias_ce0,
        p_bias_d0 => grp_outputLayer_float_1u_0u_s_fu_589_p_bias_d0,
        p_bias_q0 => bramBias_q0,
        p_bias_we0 => grp_outputLayer_float_1u_0u_s_fu_589_p_bias_we0,
        p_bias_address1 => grp_outputLayer_float_1u_0u_s_fu_589_p_bias_address1,
        p_bias_ce1 => grp_outputLayer_float_1u_0u_s_fu_589_p_bias_ce1,
        p_bias_d1 => grp_outputLayer_float_1u_0u_s_fu_589_p_bias_d1,
        p_bias_q1 => ap_const_lv32_0,
        p_bias_we1 => grp_outputLayer_float_1u_0u_s_fu_589_p_bias_we1,
        p_bias_offset => trunc_ln101_reg_1488,
        p_output_address0 => grp_outputLayer_float_1u_0u_s_fu_589_p_output_address0,
        p_output_ce0 => grp_outputLayer_float_1u_0u_s_fu_589_p_output_ce0,
        p_output_d0 => grp_outputLayer_float_1u_0u_s_fu_589_p_output_d0,
        p_output_q0 => ap_const_lv32_0,
        p_output_we0 => grp_outputLayer_float_1u_0u_s_fu_589_p_output_we0,
        p_output_address1 => grp_outputLayer_float_1u_0u_s_fu_589_p_output_address1,
        p_output_ce1 => grp_outputLayer_float_1u_0u_s_fu_589_p_output_ce1,
        p_output_d1 => grp_outputLayer_float_1u_0u_s_fu_589_p_output_d1,
        p_output_q1 => ap_const_lv32_0,
        p_output_we1 => grp_outputLayer_float_1u_0u_s_fu_589_p_output_we1,
        p_n => l_parBlocks_2_reg_1208,
        p_k => l_parBlocks_1_reg_1185,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_weights_offset_ap_vld => ap_const_logic_1,
        p_bias_offset_ap_vld => ap_const_logic_1,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        ap_start => grp_outputLayer_float_1u_0u_s_fu_589_ap_start,
        ap_done => grp_outputLayer_float_1u_0u_s_fu_589_ap_done,
        ap_ready => grp_outputLayer_float_1u_0u_s_fu_589_ap_ready,
        ap_idle => grp_outputLayer_float_1u_0u_s_fu_589_ap_idle,
        ap_continue => grp_outputLayer_float_1u_0u_s_fu_589_ap_continue);

    mul_32s_32s_32_1_1_U445 : component MLP_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberLayers_read_reg_1201,
        din1 => l_parBlocks_1_reg_1185,
        dout => grp_fu_603_p2);

    mul_32s_32s_32_1_1_U446 : component MLP_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons,
        din1 => mul_ln50_fu_627_p1,
        dout => mul_ln50_fu_627_p2);

    mul_32s_32s_32_1_1_U447 : component MLP_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => l_parBlocks_1_reg_1185,
        din1 => valuesToCopy_fu_642_p1,
        dout => valuesToCopy_fu_642_p2);

    mul_8s_8s_8_1_1_U448 : component MLP_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => trunc_ln66_reg_1337,
        din1 => mul_ln86_fu_919_p1,
        dout => mul_ln86_fu_919_p2);

    mac_muladd_14s_14s_14ns_14_4_1_U449 : component MLP_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln66_1_reg_1342,
        din1 => grp_fu_1109_p1,
        din2 => trunc_ln45_1_reg_1179,
        ce => ap_const_logic_1,
        dout => grp_fu_1109_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U450 : component MLP_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sub21_cast_reg_1401,
        din1 => trunc_ln66_1_reg_1342,
        din2 => trunc_ln45_1_reg_1179,
        ce => ap_const_logic_1,
        dout => grp_fu_1115_p3);

    mul_mul_14s_14s_14_4_1_U451 : component MLP_mul_mul_14s_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln66_1_reg_1342,
        din1 => grp_fu_1109_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1120_p2);

    mul_mul_14s_14s_14_4_1_U452 : component MLP_mul_mul_14s_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1115_p3,
        din1 => trunc_ln66_1_reg_1342,
        ce => ap_const_logic_1,
        dout => grp_fu_1126_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp10_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp10_exit_iter0_state80) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then 
                    ap_enable_reg_pp10_iter0 <= ap_const_logic_0;
                elsif (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                    ap_enable_reg_pp10_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp10_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp10_exit_iter0_state80)) then 
                        ap_enable_reg_pp10_iter1 <= (ap_const_logic_1 xor ap_condition_pp10_exit_iter0_state80);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp10_iter1 <= ap_enable_reg_pp10_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp10_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter2 <= ap_enable_reg_pp10_iter1;
                elsif (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                    ap_enable_reg_pp10_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state32);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state36))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln63_fu_797_p2) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state36))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state36);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_lv1_1 = and_ln63_fu_797_p2) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state40))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln75_fu_830_p2) and (ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state40))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state40);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((ap_const_lv1_1 = and_ln75_fu_830_p2) and (ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state43))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state43))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state43);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state54))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln137_2_reg_1350 = ap_const_lv1_1) and (icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state54))) then 
                    ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state54);
                elsif ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                elsif (((icmp_ln137_2_reg_1350 = ap_const_lv1_1) and (icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state57))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln137_2_reg_1350 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state57))) then 
                    ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state57);
                elsif ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                elsif (((icmp_ln137_2_reg_1350 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                    ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state67))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state66_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state67))) then 
                    ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state67);
                elsif ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                elsif (((icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state66_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                    ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_logic_1 = ap_condition_pp9_exit_iter0_state71))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state71)) then 
                        ap_enable_reg_pp9_iter1 <= (ap_const_logic_1 xor ap_condition_pp9_exit_iter0_state71);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
                elsif (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                    ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state66_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                    ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_done <= ap_const_logic_0;
                elsif ((grp_outputLayer_float_1u_0u_s_fu_589_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state66_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                    ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready <= ap_const_logic_0;
                elsif ((grp_outputLayer_float_1u_0u_s_fu_589_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_done <= ap_const_logic_0;
                elsif ((grp_processLayer_float_1u_0u_1_fu_564_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_ready <= ap_const_logic_0;
                elsif ((grp_processLayer_float_1u_0u_1_fu_564_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_done <= ap_const_logic_0;
                elsif ((grp_processLayer_float_1u_0u_s_fu_576_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_ready <= ap_const_logic_0;
                elsif ((grp_processLayer_float_1u_0u_s_fu_576_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_outputLayer_float_1u_0u_s_fu_589_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_outputLayer_float_1u_0u_s_fu_589_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state65) or ((ap_sync_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
                    grp_outputLayer_float_1u_0u_s_fu_589_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_outputLayer_float_1u_0u_s_fu_589_ap_ready = ap_const_logic_1)) then 
                    grp_outputLayer_float_1u_0u_s_fu_589_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processLayer_float_1u_0u_1_fu_564_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_processLayer_float_1u_0u_1_fu_564_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_sync_grp_processLayer_float_1u_0u_1_fu_564_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
                    grp_processLayer_float_1u_0u_1_fu_564_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processLayer_float_1u_0u_1_fu_564_ap_ready = ap_const_logic_1)) then 
                    grp_processLayer_float_1u_0u_1_fu_564_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processLayer_float_1u_0u_s_fu_576_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_processLayer_float_1u_0u_s_fu_576_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (ap_sync_grp_processLayer_float_1u_0u_s_fu_576_ap_ready = ap_const_logic_0)))) then 
                    grp_processLayer_float_1u_0u_s_fu_576_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processLayer_float_1u_0u_s_fu_576_ap_ready = ap_const_logic_1)) then 
                    grp_processLayer_float_1u_0u_s_fu_576_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_10_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state66_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                i_10_reg_531 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (icmp_ln137_5_fu_987_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
                i_10_reg_531 <= add_ln137_3_fu_992_p2;
            end if; 
        end if;
    end process;

    i_11_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_2_reg_1350 = ap_const_lv1_1) and (icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_11_reg_509 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln137_6_fu_924_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                i_11_reg_509 <= add_ln137_4_fu_929_p2;
            end if; 
        end if;
    end process;

    i_12_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_2_reg_1350 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                i_12_reg_520 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (icmp_ln137_7_fu_958_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                i_12_reg_520 <= add_ln137_5_fu_963_p2;
            end if; 
        end if;
    end process;

    i_7_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln75_fu_830_p2) and (ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                i_7_reg_476 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_3_fu_835_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_7_reg_476 <= add_ln137_1_fu_840_p2;
            end if; 
        end if;
    end process;

    i_8_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_8_reg_487 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_4_fu_864_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i_8_reg_487 <= add_ln137_2_fu_869_p2;
            end if; 
        end if;
    end process;

    i_9_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                i_9_reg_498 <= add_ln86_reg_1409;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                i_9_reg_498 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln63_fu_797_p2) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                i_reg_465 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln137_1_fu_803_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_reg_465 <= add_ln137_fu_808_p2;
            end if; 
        end if;
    end process;

    loop_index68_reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                loop_index68_reg_542 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (exitcond902_fu_1045_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
                loop_index68_reg_542 <= empty_120_fu_1050_p2;
            end if; 
        end if;
    end process;

    loop_index74_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                loop_index74_reg_453 <= ap_const_lv32_0;
            elsif (((exitcond11610_reg_1295 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                loop_index74_reg_453 <= empty_116_reg_1299;
            end if; 
        end if;
    end process;

    loop_index80_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                loop_index80_reg_441 <= ap_const_lv32_0;
            elsif (((exitcond11711_reg_1271 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                loop_index80_reg_441 <= empty_113_reg_1275;
            end if; 
        end if;
    end process;

    loop_index86_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                loop_index86_reg_429 <= ap_const_lv32_0;
            elsif (((exitcond11812_reg_1241 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                loop_index86_reg_429 <= empty_111_reg_1245;
            end if; 
        end if;
    end process;

    loop_index_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                loop_index_reg_553 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1) and (exitcond1_fu_1089_p2 = ap_const_lv1_0))) then 
                loop_index_reg_553 <= empty_124_fu_1094_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state66_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                add_ln106_reg_1493 <= add_ln106_fu_979_p2;
                trunc_ln130_reg_1498 <= trunc_ln130_fu_983_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                add_ln107_reg_1522 <= add_ln107_fu_1016_p2;
                icmp_ln107_reg_1528 <= icmp_ln107_fu_1020_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_5_fu_987_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                add_ln143_1_reg_1517 <= add_ln143_1_fu_1007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_6_fu_924_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                add_ln143_2_reg_1449 <= add_ln143_2_fu_949_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln86_reg_1409 <= add_ln86_fu_899_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                axiBiasInput_read_reg_1137 <= axiBiasInput;
                axiLayerOutput_read_reg_1132 <= axiLayerOutput;
                axiWeightInput_read_reg_1142 <= axiWeightInput;
                input_read_reg_1152 <= input_r;
                l_parBlocks_1_reg_1185 <= numberNeurons;
                l_parBlocks_2_reg_1208 <= numberOutputs;
                l_parBlocks_reg_1161 <= numberInputs;
                numberLayers_read_reg_1201 <= numberLayers;
                output_read_reg_1147 <= output_r;
                trunc_ln45_1_reg_1179 <= trunc_ln45_1_fu_617_p1;
                trunc_ln45_reg_1173 <= trunc_ln45_fu_613_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11711_reg_1271 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                axi_read_addr_1_read_reg_1280 <= axi_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                axi_read_addr_1_reg_1265 <= p_cast2_cast_fu_712_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11610_reg_1295 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                axi_read_addr_2_read_reg_1304 <= axi_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_742_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                axi_read_addr_2_reg_1289 <= p_cast_cast_fu_756_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11812_reg_1241 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                axi_read_addr_read_reg_1250 <= axi_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                axi_read_addr_reg_1235 <= p_cast1_cast_fu_662_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op394_writeresp_state78 = ap_const_boolean_1) and (axi_write_BVALID = ap_const_logic_0))) and (icmp_ln110_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                axi_write_addr_1_reg_1561 <= p_cast7_cast_fu_1079_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                axi_write_addr_reg_1532 <= p_cast8_cast_fu_1035_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (exitcond902_reg_1538 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                bramLayerResults_load_reg_1552 <= bramLayerResults_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_111_reg_1245 <= empty_111_fu_677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_113_reg_1275 <= empty_113_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                empty_116_reg_1299 <= empty_116_fu_771_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond11610_reg_1295 <= exitcond11610_fu_766_p2;
                exitcond11610_reg_1295_pp2_iter1_reg <= exitcond11610_reg_1295;
                loop_index74_reg_453_pp2_iter1_reg <= loop_index74_reg_453;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond11711_reg_1271 <= exitcond11711_fu_722_p2;
                exitcond11711_reg_1271_pp1_iter1_reg <= exitcond11711_reg_1271;
                loop_index80_reg_441_pp1_iter1_reg <= loop_index80_reg_441;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond11812_reg_1241 <= exitcond11812_fu_672_p2;
                exitcond11812_reg_1241_pp0_iter1_reg <= exitcond11812_reg_1241;
                loop_index86_reg_429_pp0_iter1_reg <= loop_index86_reg_429;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then
                exitcond1_reg_1567 <= exitcond1_fu_1089_p2;
                exitcond1_reg_1567_pp10_iter1_reg <= exitcond1_reg_1567;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                exitcond902_reg_1538 <= exitcond902_fu_1045_p2;
                exitcond902_reg_1538_pp9_iter1_reg <= exitcond902_reg_1538;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op394_writeresp_state78 = ap_const_boolean_1) and (axi_write_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                icmp_ln110_reg_1557 <= icmp_ln110_fu_1065_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln137_1_reg_1318 <= icmp_ln137_1_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                icmp_ln137_2_reg_1350 <= icmp_ln137_2_fu_825_p2;
                trunc_ln66_1_reg_1342 <= trunc_ln66_1_fu_822_p1;
                trunc_ln66_reg_1337 <= trunc_ln66_fu_819_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln137_3_reg_1358 <= icmp_ln137_3_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln137_4_reg_1377 <= icmp_ln137_4_fu_864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                icmp_ln137_5_reg_1503 <= icmp_ln137_5_fu_987_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln137_6_reg_1435 <= icmp_ln137_6_fu_924_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln137_7_reg_1454 <= icmp_ln137_7_fu_958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                icmp_ln63_reg_1309 <= icmp_ln63_fu_786_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (ap_enable_reg_pp10_iter1 = ap_const_logic_1))) then
                layerBuffer0_load_5_reg_1581 <= layerBuffer0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln45_fu_607_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln50_reg_1220 <= mul_ln50_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                mul_ln84_1_reg_1430 <= grp_fu_1120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_894_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                mul_ln86_reg_1419 <= mul_ln86_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                mul_ln97_1_reg_1478 <= grp_fu_1126_p2;
                mul_ln99_reg_1483 <= grp_fu_603_p2;
                trunc_ln101_reg_1488 <= trunc_ln101_fu_974_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                sub21_cast_reg_1401 <= sub21_cast_fu_888_p2;
                sub21_reg_1396 <= sub21_fu_883_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_3_fu_835_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                trunc_ln137_reg_1367 <= trunc_ln137_fu_851_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                valuesToCopy_2_reg_1255 <= valuesToCopy_2_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                valuesToCopy_reg_1225 <= valuesToCopy_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_4_fu_864_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                    zext_ln137_2_reg_1386(31 downto 0) <= zext_ln137_2_fu_875_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_7_fu_958_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                    zext_ln137_5_reg_1463(31 downto 0) <= zext_ln137_5_fu_969_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_1_fu_803_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                    zext_ln137_reg_1327(31 downto 0) <= zext_ln137_fu_814_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln137_reg_1327(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln137_2_reg_1386(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln137_5_reg_1463(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_CS_fsm_state25, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state14, ap_CS_fsm_state70, ap_enable_reg_pp9_iter2, ap_CS_fsm_state78, icmp_ln63_reg_1309, ap_CS_fsm_state79, ap_enable_reg_pp10_iter2, ap_CS_fsm_state87, icmp_ln110_reg_1557, axi_read_ARREADY, axi_write_AWREADY, axi_write_BVALID, icmp_ln45_fu_607_p2, ap_CS_fsm_state2, icmp_ln53_fu_647_p2, exitcond11812_fu_672_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, icmp_ln58_fu_697_p2, exitcond11711_fu_722_p2, ap_enable_reg_pp1_iter0, icmp_ln61_fu_742_p2, ap_CS_fsm_state24, exitcond11610_fu_766_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state35, and_ln63_fu_797_p2, icmp_ln137_1_fu_803_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_block_state39_on_subcall_done, icmp_ln137_2_reg_1350, and_ln75_fu_830_p2, icmp_ln137_3_fu_835_p2, ap_enable_reg_pp4_iter0, icmp_ln137_4_fu_864_p2, ap_enable_reg_pp5_iter0, ap_CS_fsm_state46, icmp_ln81_fu_894_p2, icmp_ln137_6_fu_924_p2, ap_enable_reg_pp6_iter0, icmp_ln137_7_fu_958_p2, ap_enable_reg_pp7_iter0, ap_CS_fsm_state66, ap_block_state66_on_subcall_done, icmp_ln137_5_fu_987_p2, ap_enable_reg_pp8_iter0, ap_CS_fsm_state69, icmp_ln107_fu_1020_p2, exitcond902_fu_1045_p2, ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1, icmp_ln110_fu_1065_p2, ap_predicate_op394_writeresp_state78, exitcond1_fu_1089_p2, ap_enable_reg_pp10_iter0, ap_enable_reg_pp10_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, ap_CS_fsm_state53, ap_block_state53_on_subcall_done, ap_block_pp6_stage0_subdone, ap_CS_fsm_state56, ap_block_pp7_stage0_subdone, ap_block_pp8_stage0_subdone, ap_block_pp9_stage0_subdone, ap_block_pp10_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln45_fu_607_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln45_fu_607_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln53_fu_647_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond11812_fu_672_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond11812_fu_672_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln58_fu_697_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond11711_fu_722_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond11711_fu_722_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln61_fu_742_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond11610_fu_766_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond11610_fu_766_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_lv1_1 = and_ln63_fu_797_p2) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln137_1_fu_803_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln137_1_fu_803_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_lv1_1 = and_ln75_fu_830_p2) and (ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_lv1_0 = and_ln75_fu_830_p2) and (ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_3_fu_835_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_3_fu_835_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_4_fu_864_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_4_fu_864_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln81_fu_894_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((icmp_ln137_2_reg_1350 = ap_const_lv1_1) and (icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((icmp_ln137_2_reg_1350 = ap_const_lv1_0) and (icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                elsif (((icmp_ln63_reg_1309 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if (not(((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln137_6_fu_924_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln137_6_fu_924_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                if (((icmp_ln137_2_reg_1350 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if (not(((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (icmp_ln137_7_fu_958_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (icmp_ln137_7_fu_958_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state66_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif (((icmp_ln63_reg_1309 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state66_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_pp8_stage0 => 
                if (not(((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (icmp_ln137_5_fu_987_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (icmp_ln137_5_fu_987_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state69 => 
                if (((icmp_ln107_fu_1020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_pp9_stage0 => 
                if ((not(((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (exitcond902_fu_1045_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) and not(((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                elsif ((((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (exitcond902_fu_1045_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) or ((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if ((not(((ap_predicate_op394_writeresp_state78 = ap_const_boolean_1) and (axi_write_BVALID = ap_const_logic_0))) and (icmp_ln110_fu_1065_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                elsif ((not(((ap_predicate_op394_writeresp_state78 = ap_const_boolean_1) and (axi_write_BVALID = ap_const_logic_0))) and (icmp_ln110_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_pp10_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_pp10_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter1 = ap_const_logic_0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1) and (exitcond1_fu_1089_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp10_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp10_stage0;
                elsif ((((ap_enable_reg_pp10_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter1 = ap_const_logic_0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1) and (exitcond1_fu_1089_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp10_stage0;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1557 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln106_fu_979_p2 <= std_logic_vector(unsigned(l_parBlocks_reg_1161) + unsigned(mul_ln99_reg_1483));
    add_ln107_fu_1016_p2 <= std_logic_vector(unsigned(l_parBlocks_2_reg_1208) + unsigned(add_ln106_reg_1493));
    add_ln137_1_fu_840_p2 <= std_logic_vector(unsigned(i_7_reg_476) + unsigned(ap_const_lv32_1));
    add_ln137_2_fu_869_p2 <= std_logic_vector(unsigned(i_8_reg_487) + unsigned(ap_const_lv32_1));
    add_ln137_3_fu_992_p2 <= std_logic_vector(unsigned(i_10_reg_531) + unsigned(ap_const_lv32_1));
    add_ln137_4_fu_929_p2 <= std_logic_vector(unsigned(i_11_reg_509) + unsigned(ap_const_lv32_1));
    add_ln137_5_fu_963_p2 <= std_logic_vector(unsigned(i_12_reg_520) + unsigned(ap_const_lv32_1));
    add_ln137_fu_808_p2 <= std_logic_vector(unsigned(i_reg_465) + unsigned(ap_const_lv32_1));
    add_ln143_1_fu_1007_p2 <= std_logic_vector(unsigned(trunc_ln137_1_fu_1003_p1) + unsigned(trunc_ln130_reg_1498));
    add_ln143_2_fu_949_p2 <= std_logic_vector(unsigned(add_ln143_3_fu_944_p2) + unsigned(mul_ln86_reg_1419));
    add_ln143_3_fu_944_p2 <= std_logic_vector(unsigned(trunc_ln45_reg_1173) + unsigned(trunc_ln137_2_fu_940_p1));
    add_ln143_fu_855_p2 <= std_logic_vector(unsigned(trunc_ln137_reg_1367) + unsigned(trunc_ln45_reg_1173));
    add_ln50_fu_621_p0 <= numberLayers;
    add_ln51_1_fu_633_p2 <= std_logic_vector(unsigned(l_parBlocks_reg_1161) + unsigned(mul_ln50_reg_1220));
    add_ln86_fu_899_p2 <= std_logic_vector(unsigned(i_9_reg_498) + unsigned(ap_const_lv32_1));
    and_ln63_fu_797_p2 <= (icmp_ln63_fu_786_p2 and icmp_ln137_fu_792_p2);
    and_ln75_fu_830_p2 <= (icmp_ln63_reg_1309 and icmp_ln137_2_fu_825_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp10_stage0 <= ap_CS_fsm(65);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(29);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(44);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(46);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(55);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(58);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(26);
    ap_CS_fsm_state35 <= ap_CS_fsm(28);
    ap_CS_fsm_state38 <= ap_CS_fsm(30);
    ap_CS_fsm_state39 <= ap_CS_fsm(31);
    ap_CS_fsm_state42 <= ap_CS_fsm(33);
    ap_CS_fsm_state45 <= ap_CS_fsm(35);
    ap_CS_fsm_state46 <= ap_CS_fsm(36);
    ap_CS_fsm_state48 <= ap_CS_fsm(38);
    ap_CS_fsm_state49 <= ap_CS_fsm(39);
    ap_CS_fsm_state52 <= ap_CS_fsm(42);
    ap_CS_fsm_state53 <= ap_CS_fsm(43);
    ap_CS_fsm_state56 <= ap_CS_fsm(45);
    ap_CS_fsm_state59 <= ap_CS_fsm(47);
    ap_CS_fsm_state61 <= ap_CS_fsm(49);
    ap_CS_fsm_state62 <= ap_CS_fsm(50);
    ap_CS_fsm_state65 <= ap_CS_fsm(53);
    ap_CS_fsm_state66 <= ap_CS_fsm(54);
    ap_CS_fsm_state69 <= ap_CS_fsm(56);
    ap_CS_fsm_state70 <= ap_CS_fsm(57);
    ap_CS_fsm_state78 <= ap_CS_fsm(63);
    ap_CS_fsm_state79 <= ap_CS_fsm(64);
    ap_CS_fsm_state87 <= ap_CS_fsm(70);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond11812_reg_1241, axi_read_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond11812_reg_1241 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond11812_reg_1241, axi_read_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond11812_reg_1241 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp10_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp10_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp10_stage0_11001_assign_proc : process(ap_enable_reg_pp10_iter2, ap_block_state82_io)
    begin
                ap_block_pp10_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state82_io) and (ap_enable_reg_pp10_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp10_stage0_subdone_assign_proc : process(ap_enable_reg_pp10_iter2, ap_block_state82_io)
    begin
                ap_block_pp10_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state82_io) and (ap_enable_reg_pp10_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond11711_reg_1271, axi_read_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond11711_reg_1271 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond11711_reg_1271, axi_read_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond11711_reg_1271 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond11610_reg_1295, axi_read_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond11610_reg_1295 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond11610_reg_1295, axi_read_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond11610_reg_1295 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp9_stage0_11001_assign_proc : process(ap_enable_reg_pp9_iter2, ap_block_state73_io)
    begin
                ap_block_pp9_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state73_io) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp9_stage0_subdone_assign_proc : process(ap_enable_reg_pp9_iter2, ap_block_state73_io)
    begin
                ap_block_pp9_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state73_io) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(exitcond11812_reg_1241, axi_read_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond11812_reg_1241 = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage0_iter1_assign_proc : process(exitcond11711_reg_1271, axi_read_RVALID)
    begin
                ap_block_state22_pp1_stage0_iter1 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond11711_reg_1271 = ap_const_lv1_0));
    end process;

        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_pp2_stage0_iter1_assign_proc : process(exitcond11610_reg_1295, axi_read_RVALID)
    begin
                ap_block_state33_pp2_stage0_iter1 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond11610_reg_1295 = ap_const_lv1_0));
    end process;

        ap_block_state34_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_on_subcall_done_assign_proc : process(ap_sync_grp_processLayer_float_1u_0u_1_fu_564_ap_ready, ap_sync_grp_processLayer_float_1u_0u_1_fu_564_ap_done)
    begin
                ap_block_state39_on_subcall_done <= ((ap_sync_grp_processLayer_float_1u_0u_1_fu_564_ap_ready and ap_sync_grp_processLayer_float_1u_0u_1_fu_564_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state40_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state53_on_subcall_done_assign_proc : process(ap_sync_grp_processLayer_float_1u_0u_s_fu_576_ap_ready, ap_sync_grp_processLayer_float_1u_0u_s_fu_576_ap_done)
    begin
                ap_block_state53_on_subcall_done <= ((ap_sync_grp_processLayer_float_1u_0u_s_fu_576_ap_ready and ap_sync_grp_processLayer_float_1u_0u_s_fu_576_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state54_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state66_on_subcall_done_assign_proc : process(ap_sync_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready, ap_sync_grp_outputLayer_float_1u_0u_s_fu_589_ap_done)
    begin
                ap_block_state66_on_subcall_done <= ((ap_sync_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready and ap_sync_grp_outputLayer_float_1u_0u_s_fu_589_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state67_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp9_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state73_io_assign_proc : process(exitcond902_reg_1538_pp9_iter1_reg, axi_write_WREADY)
    begin
                ap_block_state73_io <= ((axi_write_WREADY = ap_const_logic_0) and (exitcond902_reg_1538_pp9_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state73_pp9_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state78_assign_proc : process(axi_write_BVALID, ap_predicate_op394_writeresp_state78)
    begin
                ap_block_state78 <= ((ap_predicate_op394_writeresp_state78 = ap_const_boolean_1) and (axi_write_BVALID = ap_const_logic_0));
    end process;

        ap_block_state80_pp10_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp10_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state82_io_assign_proc : process(exitcond1_reg_1567_pp10_iter1_reg, axi_write_WREADY)
    begin
                ap_block_state82_io <= ((axi_write_WREADY = ap_const_logic_0) and (exitcond1_reg_1567_pp10_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state82_pp10_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state87_assign_proc : process(icmp_ln110_reg_1557, axi_write_BVALID)
    begin
                ap_block_state87 <= ((axi_write_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1557 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond11812_fu_672_p2)
    begin
        if ((exitcond11812_fu_672_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp10_exit_iter0_state80_assign_proc : process(exitcond1_fu_1089_p2)
    begin
        if ((exitcond1_fu_1089_p2 = ap_const_lv1_1)) then 
            ap_condition_pp10_exit_iter0_state80 <= ap_const_logic_1;
        else 
            ap_condition_pp10_exit_iter0_state80 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(exitcond11711_fu_722_p2)
    begin
        if ((exitcond11711_fu_722_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state32_assign_proc : process(exitcond11610_fu_766_p2)
    begin
        if ((exitcond11610_fu_766_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state36_assign_proc : process(icmp_ln137_1_fu_803_p2)
    begin
        if ((icmp_ln137_1_fu_803_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state40_assign_proc : process(icmp_ln137_3_fu_835_p2)
    begin
        if ((icmp_ln137_3_fu_835_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state40 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state43_assign_proc : process(icmp_ln137_4_fu_864_p2)
    begin
        if ((icmp_ln137_4_fu_864_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state43 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state54_assign_proc : process(icmp_ln137_6_fu_924_p2)
    begin
        if ((icmp_ln137_6_fu_924_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state54 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state57_assign_proc : process(icmp_ln137_7_fu_958_p2)
    begin
        if ((icmp_ln137_7_fu_958_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state57 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state57 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state67_assign_proc : process(icmp_ln137_5_fu_987_p2)
    begin
        if ((icmp_ln137_5_fu_987_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state67 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state67 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state71_assign_proc : process(exitcond902_fu_1045_p2)
    begin
        if ((exitcond902_fu_1045_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state71 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state71 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state87, icmp_ln110_reg_1557, axi_write_BVALID)
    begin
        if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1557 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp10 <= (ap_idle_pp10 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp10_assign_proc : process(ap_enable_reg_pp10_iter2, ap_enable_reg_pp10_iter0, ap_enable_reg_pp10_iter1)
    begin
        if (((ap_enable_reg_pp10_iter2 = ap_const_logic_0) and (ap_enable_reg_pp10_iter1 = ap_const_logic_0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_0))) then 
            ap_idle_pp10 <= ap_const_logic_1;
        else 
            ap_idle_pp10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter2, ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1)
    begin
        if (((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_loop_index74_phi_fu_457_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond11610_reg_1295, loop_index74_reg_453, empty_116_reg_1299)
    begin
        if (((exitcond11610_reg_1295 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_loop_index74_phi_fu_457_p4 <= empty_116_reg_1299;
        else 
            ap_phi_mux_loop_index74_phi_fu_457_p4 <= loop_index74_reg_453;
        end if; 
    end process;


    ap_phi_mux_loop_index80_phi_fu_445_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond11711_reg_1271, loop_index80_reg_441, empty_113_reg_1275)
    begin
        if (((exitcond11711_reg_1271 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_loop_index80_phi_fu_445_p4 <= empty_113_reg_1275;
        else 
            ap_phi_mux_loop_index80_phi_fu_445_p4 <= loop_index80_reg_441;
        end if; 
    end process;


    ap_phi_mux_loop_index86_phi_fu_433_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond11812_reg_1241, loop_index86_reg_429, empty_111_reg_1245)
    begin
        if (((exitcond11812_reg_1241 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_loop_index86_phi_fu_433_p4 <= empty_111_reg_1245;
        else 
            ap_phi_mux_loop_index86_phi_fu_433_p4 <= loop_index86_reg_429;
        end if; 
    end process;


    ap_predicate_op394_writeresp_state78_assign_proc : process(icmp_ln63_reg_1309, icmp_ln107_reg_1528)
    begin
                ap_predicate_op394_writeresp_state78 <= ((icmp_ln107_reg_1528 = ap_const_lv1_0) and (icmp_ln63_reg_1309 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state87, icmp_ln110_reg_1557, axi_write_BVALID)
    begin
        if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1557 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_outputLayer_float_1u_0u_s_fu_589_ap_done <= (grp_outputLayer_float_1u_0u_s_fu_589_ap_done or ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_done);
    ap_sync_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready <= (grp_outputLayer_float_1u_0u_s_fu_589_ap_ready or ap_sync_reg_grp_outputLayer_float_1u_0u_s_fu_589_ap_ready);
    ap_sync_grp_processLayer_float_1u_0u_1_fu_564_ap_done <= (grp_processLayer_float_1u_0u_1_fu_564_ap_done or ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_done);
    ap_sync_grp_processLayer_float_1u_0u_1_fu_564_ap_ready <= (grp_processLayer_float_1u_0u_1_fu_564_ap_ready or ap_sync_reg_grp_processLayer_float_1u_0u_1_fu_564_ap_ready);
    ap_sync_grp_processLayer_float_1u_0u_s_fu_576_ap_done <= (grp_processLayer_float_1u_0u_s_fu_576_ap_done or ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_done);
    ap_sync_grp_processLayer_float_1u_0u_s_fu_576_ap_ready <= (grp_processLayer_float_1u_0u_s_fu_576_ap_ready or ap_sync_reg_grp_processLayer_float_1u_0u_s_fu_576_ap_ready);

    axi_read_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14, axi_read_ARREADY, axi_read_addr_reg_1235, axi_read_addr_1_reg_1265, axi_read_addr_2_reg_1289)
    begin
        if ((axi_read_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                axi_read_ARADDR <= axi_read_addr_2_reg_1289;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                axi_read_ARADDR <= axi_read_addr_1_reg_1265;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_read_ARADDR <= axi_read_addr_reg_1235;
            else 
                axi_read_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            axi_read_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_read_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14, axi_read_ARREADY, l_parBlocks_reg_1161, valuesToCopy_reg_1225, valuesToCopy_2_reg_1255)
    begin
        if ((axi_read_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                axi_read_ARLEN <= l_parBlocks_reg_1161;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                axi_read_ARLEN <= valuesToCopy_2_reg_1255;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_read_ARLEN <= valuesToCopy_reg_1225;
            else 
                axi_read_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            axi_read_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_read_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14, axi_read_ARREADY)
    begin
        if ((((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            axi_read_ARVALID <= ap_const_logic_1;
        else 
            axi_read_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    axi_read_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond11812_reg_1241, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond11610_reg_1295, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond11711_reg_1271, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((exitcond11711_reg_1271 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond11610_reg_1295 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond11812_reg_1241 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            axi_read_RREADY <= ap_const_logic_1;
        else 
            axi_read_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    axi_read_blk_n_AR_assign_proc : process(m_axi_axi_read_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            axi_read_blk_n_AR <= m_axi_axi_read_ARREADY;
        else 
            axi_read_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    axi_read_blk_n_R_assign_proc : process(m_axi_axi_read_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond11812_reg_1241, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond11610_reg_1295, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond11711_reg_1271)
    begin
        if ((((exitcond11711_reg_1271 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond11610_reg_1295 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond11812_reg_1241 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            axi_read_blk_n_R <= m_axi_axi_read_RVALID;
        else 
            axi_read_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    axi_write_AWADDR_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state79, axi_write_AWREADY, axi_write_addr_reg_1532, axi_write_addr_1_reg_1561)
    begin
        if ((axi_write_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                axi_write_AWADDR <= axi_write_addr_1_reg_1561;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                axi_write_AWADDR <= axi_write_addr_reg_1532;
            else 
                axi_write_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            axi_write_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_write_AWLEN_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state79, axi_write_AWREADY, l_parBlocks_2_reg_1208, add_ln107_reg_1522)
    begin
        if ((axi_write_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                axi_write_AWLEN <= l_parBlocks_2_reg_1208;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                axi_write_AWLEN <= add_ln107_reg_1522;
            else 
                axi_write_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            axi_write_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_write_AWVALID_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state79, axi_write_AWREADY)
    begin
        if ((((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70)))) then 
            axi_write_AWVALID <= ap_const_logic_1;
        else 
            axi_write_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    axi_write_BREADY_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state87, icmp_ln110_reg_1557, axi_write_BVALID, ap_predicate_op394_writeresp_state78)
    begin
        if (((not(((ap_predicate_op394_writeresp_state78 = ap_const_boolean_1) and (axi_write_BVALID = ap_const_logic_0))) and (ap_predicate_op394_writeresp_state78 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state78)) or (not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln110_reg_1557 = ap_const_lv1_0))) and (icmp_ln110_reg_1557 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
            axi_write_BREADY <= ap_const_logic_1;
        else 
            axi_write_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    axi_write_WDATA_assign_proc : process(ap_enable_reg_pp9_iter2, exitcond902_reg_1538_pp9_iter1_reg, ap_enable_reg_pp10_iter2, exitcond1_reg_1567_pp10_iter1_reg, empty_121_fu_1061_p1, ap_block_pp9_stage0_01001, empty_125_fu_1105_p1, ap_block_pp10_stage0_01001)
    begin
        if (((exitcond1_reg_1567_pp10_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp10_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp10_stage0_01001))) then 
            axi_write_WDATA <= empty_125_fu_1105_p1;
        elsif (((exitcond902_reg_1538_pp9_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_01001))) then 
            axi_write_WDATA <= empty_121_fu_1061_p1;
        else 
            axi_write_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_write_WVALID_assign_proc : process(ap_enable_reg_pp9_iter2, exitcond902_reg_1538_pp9_iter1_reg, ap_enable_reg_pp10_iter2, exitcond1_reg_1567_pp10_iter1_reg, ap_block_pp9_stage0_11001, ap_block_pp10_stage0_11001)
    begin
        if ((((exitcond1_reg_1567_pp10_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp10_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp10_stage0_11001)) or ((exitcond902_reg_1538_pp9_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001)))) then 
            axi_write_WVALID <= ap_const_logic_1;
        else 
            axi_write_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    axi_write_blk_n_AW_assign_proc : process(m_axi_axi_write_AWREADY, ap_CS_fsm_state70, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            axi_write_blk_n_AW <= m_axi_axi_write_AWREADY;
        else 
            axi_write_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    axi_write_blk_n_B_assign_proc : process(m_axi_axi_write_BVALID, ap_CS_fsm_state78, icmp_ln63_reg_1309, icmp_ln107_reg_1528, ap_CS_fsm_state87, icmp_ln110_reg_1557)
    begin
        if ((((icmp_ln110_reg_1557 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((icmp_ln107_reg_1528 = ap_const_lv1_0) and (icmp_ln63_reg_1309 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            axi_write_blk_n_B <= m_axi_axi_write_BVALID;
        else 
            axi_write_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    axi_write_blk_n_W_assign_proc : process(m_axi_axi_write_WREADY, ap_enable_reg_pp9_iter2, ap_block_pp9_stage0, exitcond902_reg_1538_pp9_iter1_reg, ap_enable_reg_pp10_iter2, ap_block_pp10_stage0, exitcond1_reg_1567_pp10_iter1_reg)
    begin
        if ((((exitcond1_reg_1567_pp10_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp10_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp10_stage0)) or ((exitcond902_reg_1538_pp9_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0)))) then 
            axi_write_blk_n_W <= m_axi_axi_write_WREADY;
        else 
            axi_write_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    bramBias_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state39, ap_CS_fsm_state66, ap_enable_reg_pp1_iter2, ap_CS_fsm_state53, grp_processLayer_float_1u_0u_1_fu_564_p_bias_address0, grp_processLayer_float_1u_0u_s_fu_576_p_bias_address0, grp_outputLayer_float_1u_0u_s_fu_589_p_bias_address0, loop_index80_cast_fu_733_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_address0 <= loop_index80_cast_fu_733_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            bramBias_address0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_bias_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBias_address0 <= grp_processLayer_float_1u_0u_s_fu_576_p_bias_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            bramBias_address0 <= grp_processLayer_float_1u_0u_1_fu_564_p_bias_address0;
        else 
            bramBias_address0 <= "XXXXXXXX";
        end if; 
    end process;


    bramBias_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state39, ap_CS_fsm_state66, ap_enable_reg_pp1_iter2, ap_CS_fsm_state53, grp_processLayer_float_1u_0u_1_fu_564_p_bias_ce0, grp_processLayer_float_1u_0u_s_fu_576_p_bias_ce0, grp_outputLayer_float_1u_0u_s_fu_589_p_bias_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            bramBias_ce0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_bias_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBias_ce0 <= grp_processLayer_float_1u_0u_s_fu_576_p_bias_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            bramBias_ce0 <= grp_processLayer_float_1u_0u_1_fu_564_p_bias_ce0;
        else 
            bramBias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bramBias_d0 <= axi_read_addr_1_read_reg_1280;

    bramBias_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond11711_reg_1271_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((exitcond11711_reg_1271_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_we0 <= ap_const_logic_1;
        else 
            bramBias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramLayerResults_address0_assign_proc : process(ap_block_pp9_stage0, ap_CS_fsm_pp3_stage0, zext_ln137_reg_1327, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp6_stage0, ap_CS_fsm_pp8_stage0, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp8_iter1, ap_block_pp3_stage0, ap_block_pp4_stage0, zext_ln143_fu_859_p1, ap_block_pp6_stage0, zext_ln143_2_fu_954_p1, ap_block_pp8_stage0, zext_ln143_1_fu_1012_p1, loop_index68_cast_fu_1056_p1)
    begin
        if (((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
            bramLayerResults_address0 <= loop_index68_cast_fu_1056_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1))) then 
            bramLayerResults_address0 <= zext_ln143_1_fu_1012_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            bramLayerResults_address0 <= zext_ln143_2_fu_954_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            bramLayerResults_address0 <= zext_ln143_fu_859_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            bramLayerResults_address0 <= zext_ln137_reg_1327(8 - 1 downto 0);
        else 
            bramLayerResults_address0 <= "XXXXXXXX";
        end if; 
    end process;


    bramLayerResults_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_enable_reg_pp9_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp8_iter1)
    begin
        if ((((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)))) then 
            bramLayerResults_ce0 <= ap_const_logic_1;
        else 
            bramLayerResults_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramLayerResults_d0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp6_stage0, ap_CS_fsm_pp8_stage0, layerBuffer0_q0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp8_iter1, inputData_q0, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp6_stage0, ap_block_pp8_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            bramLayerResults_d0 <= layerBuffer0_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            bramLayerResults_d0 <= inputData_q0;
        else 
            bramLayerResults_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramLayerResults_we0_assign_proc : process(icmp_ln137_1_reg_1318, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln137_3_reg_1358, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln137_6_reg_1435, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, icmp_ln137_5_reg_1503, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp8_iter1)
    begin
        if ((((icmp_ln137_5_reg_1503 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1)) or ((icmp_ln137_6_reg_1435 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((icmp_ln137_3_reg_1358 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((icmp_ln137_1_reg_1318 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)))) then 
            bramLayerResults_we0 <= ap_const_logic_1;
        else 
            bramLayerResults_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state39, ap_CS_fsm_state66, ap_enable_reg_pp0_iter2, ap_CS_fsm_state53, grp_processLayer_float_1u_0u_1_fu_564_p_weights_address0, grp_processLayer_float_1u_0u_s_fu_576_p_weights_address0, grp_outputLayer_float_1u_0u_s_fu_589_p_weights_address0, loop_index86_cast_fu_683_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_address0 <= loop_index86_cast_fu_683_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            bramWeight_address0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_weights_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeight_address0 <= grp_processLayer_float_1u_0u_s_fu_576_p_weights_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            bramWeight_address0 <= grp_processLayer_float_1u_0u_1_fu_564_p_weights_address0;
        else 
            bramWeight_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeight_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state39, ap_CS_fsm_state66, ap_enable_reg_pp0_iter2, ap_CS_fsm_state53, grp_processLayer_float_1u_0u_1_fu_564_p_weights_ce0, grp_processLayer_float_1u_0u_s_fu_576_p_weights_ce0, grp_outputLayer_float_1u_0u_s_fu_589_p_weights_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            bramWeight_ce0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_weights_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeight_ce0 <= grp_processLayer_float_1u_0u_s_fu_576_p_weights_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            bramWeight_ce0 <= grp_processLayer_float_1u_0u_1_fu_564_p_weights_ce0;
        else 
            bramWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bramWeight_d0 <= axi_read_addr_read_reg_1250;

    bramWeight_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond11812_reg_1241_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((exitcond11812_reg_1241_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_we0 <= ap_const_logic_1;
        else 
            bramWeight_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_111_fu_677_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index86_phi_fu_433_p4) + unsigned(ap_const_lv32_1));
    empty_113_fu_727_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index80_phi_fu_445_p4) + unsigned(ap_const_lv32_1));
    empty_116_fu_771_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index74_phi_fu_457_p4) + unsigned(ap_const_lv32_1));
    empty_118_fu_880_p1 <= numberLayers_read_reg_1201(14 - 1 downto 0);
    empty_120_fu_1050_p2 <= std_logic_vector(unsigned(loop_index68_reg_542) + unsigned(ap_const_lv32_1));
    empty_121_fu_1061_p1 <= bramLayerResults_load_reg_1552;
    empty_124_fu_1094_p2 <= std_logic_vector(unsigned(loop_index_reg_553) + unsigned(ap_const_lv32_1));
    empty_125_fu_1105_p1 <= layerBuffer0_load_5_reg_1581;
    exitcond11610_fu_766_p2 <= "1" when (ap_phi_mux_loop_index74_phi_fu_457_p4 = l_parBlocks_reg_1161) else "0";
    exitcond11711_fu_722_p2 <= "1" when (ap_phi_mux_loop_index80_phi_fu_445_p4 = valuesToCopy_2_reg_1255) else "0";
    exitcond11812_fu_672_p2 <= "1" when (ap_phi_mux_loop_index86_phi_fu_433_p4 = valuesToCopy_reg_1225) else "0";
    exitcond1_fu_1089_p2 <= "1" when (loop_index_reg_553 = l_parBlocks_2_reg_1208) else "0";
    exitcond902_fu_1045_p2 <= "1" when (loop_index68_reg_542 = add_ln107_reg_1522) else "0";
    grp_fu_1109_p1 <= i_9_reg_498(14 - 1 downto 0);

    grp_outputLayer_float_1u_0u_s_fu_589_ap_continue_assign_proc : process(ap_CS_fsm_state66, ap_block_state66_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state66_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            grp_outputLayer_float_1u_0u_s_fu_589_ap_continue <= ap_const_logic_1;
        else 
            grp_outputLayer_float_1u_0u_s_fu_589_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_outputLayer_float_1u_0u_s_fu_589_ap_start <= grp_outputLayer_float_1u_0u_s_fu_589_ap_start_reg;

    grp_processLayer_float_1u_0u_1_fu_564_ap_continue_assign_proc : process(ap_CS_fsm_state39, ap_block_state39_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_processLayer_float_1u_0u_1_fu_564_ap_continue <= ap_const_logic_1;
        else 
            grp_processLayer_float_1u_0u_1_fu_564_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_processLayer_float_1u_0u_1_fu_564_ap_start <= grp_processLayer_float_1u_0u_1_fu_564_ap_start_reg;

    grp_processLayer_float_1u_0u_s_fu_576_ap_continue_assign_proc : process(ap_CS_fsm_state53, ap_block_state53_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_processLayer_float_1u_0u_s_fu_576_ap_continue <= ap_const_logic_1;
        else 
            grp_processLayer_float_1u_0u_s_fu_576_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_processLayer_float_1u_0u_s_fu_576_ap_start <= grp_processLayer_float_1u_0u_s_fu_576_ap_start_reg;
    icmp_ln107_fu_1020_p2 <= "1" when (add_ln107_fu_1016_p2 = ap_const_lv32_0) else "0";
    icmp_ln110_fu_1065_p2 <= "1" when (l_parBlocks_2_reg_1208 = ap_const_lv32_0) else "0";
    icmp_ln137_1_fu_803_p2 <= "1" when (i_reg_465 = l_parBlocks_reg_1161) else "0";
    icmp_ln137_2_fu_825_p2 <= "0" when (l_parBlocks_1_reg_1185 = ap_const_lv32_0) else "1";
    icmp_ln137_3_fu_835_p2 <= "1" when (i_7_reg_476 = l_parBlocks_1_reg_1185) else "0";
    icmp_ln137_4_fu_864_p2 <= "1" when (i_8_reg_487 = l_parBlocks_1_reg_1185) else "0";
    icmp_ln137_5_fu_987_p2 <= "1" when (i_10_reg_531 = l_parBlocks_2_reg_1208) else "0";
    icmp_ln137_6_fu_924_p2 <= "1" when (i_11_reg_509 = l_parBlocks_1_reg_1185) else "0";
    icmp_ln137_7_fu_958_p2 <= "1" when (i_12_reg_520 = l_parBlocks_1_reg_1185) else "0";
    icmp_ln137_fu_792_p2 <= "0" when (l_parBlocks_reg_1161 = ap_const_lv32_0) else "1";
    icmp_ln45_fu_607_p2 <= "1" when (loadParameters = ap_const_lv32_0) else "0";
    icmp_ln53_fu_647_p2 <= "1" when (valuesToCopy_fu_642_p2 = ap_const_lv32_0) else "0";
    icmp_ln58_fu_697_p2 <= "1" when (valuesToCopy_2_fu_692_p2 = ap_const_lv32_0) else "0";
    icmp_ln61_fu_742_p2 <= "1" when (l_parBlocks_reg_1161 = ap_const_lv32_0) else "0";
    icmp_ln63_fu_786_p2 <= "0" when (exportLayers = ap_const_lv32_0) else "1";
    icmp_ln81_fu_894_p2 <= "1" when (i_9_reg_498 = sub21_reg_1396) else "0";

    inputData_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, zext_ln137_fu_814_p1, ap_CS_fsm_state39, ap_enable_reg_pp2_iter2, grp_processLayer_float_1u_0u_1_fu_564_p_input_address0, loop_index74_cast_fu_777_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            inputData_address0 <= zext_ln137_fu_814_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            inputData_address0 <= loop_index74_cast_fu_777_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            inputData_address0 <= grp_processLayer_float_1u_0u_1_fu_564_p_input_address0;
        else 
            inputData_address0 <= "XXXXX";
        end if; 
    end process;


    inputData_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_enable_reg_pp2_iter2, grp_processLayer_float_1u_0u_1_fu_564_p_input_ce0)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            inputData_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            inputData_ce0 <= grp_processLayer_float_1u_0u_1_fu_564_p_input_ce0;
        else 
            inputData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputData_d0 <= axi_read_addr_2_read_reg_1304;

    inputData_we0_assign_proc : process(ap_block_pp2_stage0_11001, exitcond11610_reg_1295_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((exitcond11610_reg_1295_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            inputData_we0 <= ap_const_logic_1;
        else 
            inputData_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer0_address0_assign_proc : process(ap_block_pp10_stage0, ap_CS_fsm_state39, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln137_2_fu_875_p1, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, zext_ln137_5_fu_969_p1, ap_CS_fsm_state66, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, ap_CS_fsm_pp10_stage0, ap_enable_reg_pp10_iter0, ap_CS_fsm_state53, grp_processLayer_float_1u_0u_1_fu_564_p_output_address0, grp_processLayer_float_1u_0u_s_fu_576_p_output_address0, grp_outputLayer_float_1u_0u_s_fu_589_p_output_address0, zext_ln137_1_fu_846_p1, ap_block_pp4_stage0, ap_block_pp5_stage0, zext_ln137_4_fu_935_p1, ap_block_pp6_stage0, ap_block_pp7_stage0, zext_ln137_3_fu_998_p1, ap_block_pp8_stage0, loop_index_cast_fu_1100_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp10_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1))) then 
            layerBuffer0_address0 <= loop_index_cast_fu_1100_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
            layerBuffer0_address0 <= zext_ln137_3_fu_998_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            layerBuffer0_address0 <= zext_ln137_5_fu_969_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            layerBuffer0_address0 <= zext_ln137_4_fu_935_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            layerBuffer0_address0 <= zext_ln137_2_fu_875_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            layerBuffer0_address0 <= zext_ln137_1_fu_846_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            layerBuffer0_address0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer0_address0 <= grp_processLayer_float_1u_0u_s_fu_576_p_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layerBuffer0_address0 <= grp_processLayer_float_1u_0u_1_fu_564_p_output_address0;
        else 
            layerBuffer0_address0 <= "XXXXXX";
        end if; 
    end process;


    layerBuffer0_ce0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0, ap_CS_fsm_state66, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_enable_reg_pp8_iter0, ap_CS_fsm_pp10_stage0, ap_block_pp10_stage0_11001, ap_enable_reg_pp10_iter0, ap_CS_fsm_state53, grp_processLayer_float_1u_0u_1_fu_564_p_output_ce0, grp_processLayer_float_1u_0u_s_fu_576_p_output_ce0, grp_outputLayer_float_1u_0u_s_fu_589_p_output_ce0)
    begin
        if ((((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1)))) then 
            layerBuffer0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            layerBuffer0_ce0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer0_ce0 <= grp_processLayer_float_1u_0u_s_fu_576_p_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layerBuffer0_ce0 <= grp_processLayer_float_1u_0u_1_fu_564_p_output_ce0;
        else 
            layerBuffer0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer0_d0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state66, ap_CS_fsm_state53, grp_processLayer_float_1u_0u_1_fu_564_p_output_d0, grp_processLayer_float_1u_0u_s_fu_576_p_output_d0, grp_outputLayer_float_1u_0u_s_fu_589_p_output_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            layerBuffer0_d0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_output_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer0_d0 <= grp_processLayer_float_1u_0u_s_fu_576_p_output_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layerBuffer0_d0 <= grp_processLayer_float_1u_0u_1_fu_564_p_output_d0;
        else 
            layerBuffer0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layerBuffer0_we0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state66, ap_CS_fsm_state53, grp_processLayer_float_1u_0u_1_fu_564_p_output_we0, grp_processLayer_float_1u_0u_s_fu_576_p_output_we0, grp_outputLayer_float_1u_0u_s_fu_589_p_output_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            layerBuffer0_we0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_output_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer0_we0 <= grp_processLayer_float_1u_0u_s_fu_576_p_output_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layerBuffer0_we0 <= grp_processLayer_float_1u_0u_1_fu_564_p_output_we0;
        else 
            layerBuffer0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer1_address0_assign_proc : process(ap_CS_fsm_pp5_stage0, zext_ln137_2_reg_1386, ap_CS_fsm_pp7_stage0, zext_ln137_5_reg_1463, ap_CS_fsm_state66, ap_enable_reg_pp5_iter1, ap_CS_fsm_state53, ap_enable_reg_pp7_iter1, grp_processLayer_float_1u_0u_s_fu_576_p_input_address0, grp_outputLayer_float_1u_0u_s_fu_589_p_input_address0, ap_block_pp5_stage0, ap_block_pp7_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1))) then 
            layerBuffer1_address0 <= zext_ln137_5_reg_1463(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            layerBuffer1_address0 <= zext_ln137_2_reg_1386(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            layerBuffer1_address0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_input_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer1_address0 <= grp_processLayer_float_1u_0u_s_fu_576_p_input_address0;
        else 
            layerBuffer1_address0 <= "XXXXXX";
        end if; 
    end process;


    layerBuffer1_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_CS_fsm_state66, ap_enable_reg_pp5_iter1, ap_CS_fsm_state53, ap_enable_reg_pp7_iter1, grp_processLayer_float_1u_0u_s_fu_576_p_input_ce0, grp_outputLayer_float_1u_0u_s_fu_589_p_input_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)))) then 
            layerBuffer1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            layerBuffer1_ce0 <= grp_outputLayer_float_1u_0u_s_fu_589_p_input_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layerBuffer1_ce0 <= grp_processLayer_float_1u_0u_s_fu_576_p_input_ce0;
        else 
            layerBuffer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layerBuffer1_we0_assign_proc : process(icmp_ln137_4_reg_1377, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, icmp_ln137_7_reg_1454, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp5_iter1, ap_enable_reg_pp7_iter1)
    begin
        if ((((icmp_ln137_7_reg_1454 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)) or ((icmp_ln137_4_reg_1377 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)))) then 
            layerBuffer1_we0 <= ap_const_logic_1;
        else 
            layerBuffer1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loop_index68_cast_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index68_reg_542),64));
    loop_index74_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index74_reg_453_pp2_iter1_reg),64));
    loop_index80_cast_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index80_reg_441_pp1_iter1_reg),64));
    loop_index86_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index86_reg_429_pp0_iter1_reg),64));
    loop_index_cast_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_553),64));
    mul_ln50_fu_627_p1 <= std_logic_vector(signed(add_ln50_fu_621_p0) + signed(ap_const_lv32_FFFFFFFF));
    mul_ln86_fu_919_p1 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(trunc_ln84_1_fu_909_p1));
        p_cast1_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast1_fu_653_p4),64));

    p_cast1_fu_653_p4 <= axiWeightInput_read_reg_1142(63 downto 2);
        p_cast2_cast_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_fu_703_p4),64));

    p_cast2_fu_703_p4 <= axiBiasInput_read_reg_1137(63 downto 2);
        p_cast7_cast_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast7_fu_1070_p4),64));

    p_cast7_fu_1070_p4 <= output_read_reg_1147(63 downto 2);
        p_cast8_cast_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast8_fu_1026_p4),64));

    p_cast8_fu_1026_p4 <= axiLayerOutput_read_reg_1132(63 downto 2);
        p_cast_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_747_p4),64));

    p_cast_fu_747_p4 <= input_read_reg_1152(63 downto 2);
    sub21_cast_fu_888_p2 <= std_logic_vector(signed(ap_const_lv14_3FFF) + signed(empty_118_fu_880_p1));
    sub21_fu_883_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(numberLayers_read_reg_1201));
    trunc_ln101_fu_974_p1 <= grp_fu_603_p2(8 - 1 downto 0);
    trunc_ln130_fu_983_p1 <= add_ln106_fu_979_p2(8 - 1 downto 0);
    trunc_ln137_1_fu_1003_p1 <= i_10_reg_531(8 - 1 downto 0);
    trunc_ln137_2_fu_940_p1 <= i_11_reg_509(8 - 1 downto 0);
    trunc_ln137_fu_851_p1 <= i_7_reg_476(8 - 1 downto 0);
    trunc_ln45_1_fu_617_p1 <= numberInputs(14 - 1 downto 0);
    trunc_ln45_fu_613_p1 <= numberInputs(8 - 1 downto 0);
    trunc_ln66_1_fu_822_p1 <= l_parBlocks_1_reg_1185(14 - 1 downto 0);
    trunc_ln66_fu_819_p1 <= l_parBlocks_1_reg_1185(8 - 1 downto 0);
    trunc_ln84_1_fu_909_p1 <= i_9_reg_498(8 - 1 downto 0);
    valuesToCopy_2_fu_692_p2 <= std_logic_vector(unsigned(l_parBlocks_2_reg_1208) + unsigned(grp_fu_603_p2));
    valuesToCopy_fu_642_p1 <= std_logic_vector(unsigned(add_ln51_1_fu_633_p2) + unsigned(l_parBlocks_2_reg_1208));
    zext_ln137_1_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_476),64));
    zext_ln137_2_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_487),64));
    zext_ln137_3_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_531),64));
    zext_ln137_4_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_reg_509),64));
    zext_ln137_5_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_12_reg_520),64));
    zext_ln137_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_465),64));
    zext_ln143_1_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln143_1_reg_1517),64));
    zext_ln143_2_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln143_2_reg_1449),64));
    zext_ln143_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln143_fu_855_p2),64));
end behav;
