-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_resolver_pl_interface\uz_resolver_pl_interface_dut.vhd
-- Created: 2023-01-24 16:42:50
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_resolver_pl_interface_dut
-- Source Path: uz_resolver_pl_interface/uz_resolver_pl_interface_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_resolver_pl_interface_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        position_raw                      :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        resolver_polepairs_AXI            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        cnt_reset_AXI                     :   IN    std_logic;  -- ufix1
        position_intmax_AXI               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        machine_polepairs_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        velocity_raw                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        bitToRPS_Factor_AXI               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        theta_m_offset_rad_AXI            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        trigger                           :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        position_mech_raw                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        position_mech_2pi                 :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
        position_el_2pi                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
        omega_mech_rad_s                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        n_mech_rpm                        :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        cnt_AXI                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        done                              :   OUT   std_logic;  -- ufix1
        position_mech_2pi_AXI             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        position_el_2pi_AXI               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        omega_mech_rad_s_AXI              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        n_mech_rpm_AXI                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_resolver_pl_interface_dut;


ARCHITECTURE rtl OF uz_resolver_pl_interface_dut IS

  -- Component Declarations
  COMPONENT uz_resolver_pl_interface_src_uz_resolver_pl_interface
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          position_raw                    :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          resolver_polepairs_AXI          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          cnt_reset_AXI                   :   IN    std_logic;  -- ufix1
          position_intmax_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          machine_polepairs_AXI           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          velocity_raw                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          bitToRPS_Factor_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          theta_m_offset_rad_AXI          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          trigger                         :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          position_mech_raw               :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          position_mech_2pi               :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
          position_el_2pi                 :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
          omega_mech_rad_s                :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          n_mech_rpm                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          cnt_AXI                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          done                            :   OUT   std_logic;  -- ufix1
          position_mech_2pi_AXI           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          position_el_2pi_AXI             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          omega_mech_rad_s_AXI            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          n_mech_rpm_AXI                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_resolver_pl_interface_src_uz_resolver_pl_interface
    USE ENTITY work.uz_resolver_pl_interface_src_uz_resolver_pl_interface(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL position_mech_raw_sig            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL position_mech_2pi_sig            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL position_el_2pi_sig              : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL omega_mech_rad_s_sig             : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL n_mech_rpm_sig                   : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL cnt_AXI_sig                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL done_sig                         : std_logic;  -- ufix1
  SIGNAL position_mech_2pi_AXI_sig        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL position_el_2pi_AXI_sig          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_mech_rad_s_AXI_sig         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL n_mech_rpm_AXI_sig               : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_uz_resolver_pl_interface_src_uz_resolver_pl_interface : uz_resolver_pl_interface_src_uz_resolver_pl_interface
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              position_raw => position_raw,  -- ufix16
              resolver_polepairs_AXI => resolver_polepairs_AXI,  -- sfix32
              cnt_reset_AXI => cnt_reset_AXI,  -- ufix1
              position_intmax_AXI => position_intmax_AXI,  -- sfix32
              machine_polepairs_AXI => machine_polepairs_AXI,  -- sfix32
              velocity_raw => velocity_raw,  -- sfix16
              bitToRPS_Factor_AXI => bitToRPS_Factor_AXI,  -- ufix32
              theta_m_offset_rad_AXI => theta_m_offset_rad_AXI,  -- ufix32
              trigger => trigger,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              position_mech_raw => position_mech_raw_sig,  -- ufix16
              position_mech_2pi => position_mech_2pi_sig,  -- sfix27_En20
              position_el_2pi => position_el_2pi_sig,  -- sfix27_En20
              omega_mech_rad_s => omega_mech_rad_s_sig,  -- sfix24_En11
              n_mech_rpm => n_mech_rpm_sig,  -- sfix24_En11
              cnt_AXI => cnt_AXI_sig,  -- sfix32
              done => done_sig,  -- ufix1
              position_mech_2pi_AXI => position_mech_2pi_AXI_sig,  -- ufix32
              position_el_2pi_AXI => position_el_2pi_AXI_sig,  -- ufix32
              omega_mech_rad_s_AXI => omega_mech_rad_s_AXI_sig,  -- ufix32
              n_mech_rpm_AXI => n_mech_rpm_AXI_sig  -- ufix32
              );

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  done <= done_sig;

  position_mech_raw <= position_mech_raw_sig;

  position_mech_2pi <= position_mech_2pi_sig;

  position_el_2pi <= position_el_2pi_sig;

  omega_mech_rad_s <= omega_mech_rad_s_sig;

  n_mech_rpm <= n_mech_rpm_sig;

  cnt_AXI <= cnt_AXI_sig;

  position_mech_2pi_AXI <= position_mech_2pi_AXI_sig;

  position_el_2pi_AXI <= position_el_2pi_AXI_sig;

  omega_mech_rad_s_AXI <= omega_mech_rad_s_AXI_sig;

  n_mech_rpm_AXI <= n_mech_rpm_AXI_sig;

END rtl;

