-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/uz_plantModel_pt1/uz_plantModel_pt1_src_uz_plantModel_pt1.vhd
-- Created: 2021-06-17 10:07:07
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 100x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- output                        ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_plantModel_pt1_src_uz_plantModel_pt1
-- Source Path: uz_plantModel_pt1/uz_plantModel_pt1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_plantModel_pt1_src_uz_plantModel_pt1_pkg.ALL;

ENTITY uz_plantModel_pt1_src_uz_plantModel_pt1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        input                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        gain                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        reciprocal_time_constant          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        reset_1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        output                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END uz_plantModel_pt1_src_uz_plantModel_pt1;


ARCHITECTURE rtl OF uz_plantModel_pt1_src_uz_plantModel_pt1 IS

  -- Component Declarations
  COMPONENT uz_plantModel_pt1_src_uz_plantModel_pt1_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_100_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_plantModel_pt1_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_plantModel_pt1_src_nfp_relop_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_plantModel_pt1_src_nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_plantModel_pt1_src_nfp_sub_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_plantModel_pt1_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_plantModel_pt1_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_plantModel_pt1_src_uz_plantModel_pt1_tc
    USE ENTITY work.uz_plantModel_pt1_src_uz_plantModel_pt1_tc(rtl);

  FOR ALL : uz_plantModel_pt1_src_nfp_convert_single2double
    USE ENTITY work.uz_plantModel_pt1_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_plantModel_pt1_src_nfp_relop_double
    USE ENTITY work.uz_plantModel_pt1_src_nfp_relop_double(rtl);

  FOR ALL : uz_plantModel_pt1_src_nfp_mul_double
    USE ENTITY work.uz_plantModel_pt1_src_nfp_mul_double(rtl);

  FOR ALL : uz_plantModel_pt1_src_nfp_sub_double
    USE ENTITY work.uz_plantModel_pt1_src_nfp_sub_double(rtl);

  FOR ALL : uz_plantModel_pt1_src_nfp_add_double
    USE ENTITY work.uz_plantModel_pt1_src_nfp_add_double(rtl);

  FOR ALL : uz_plantModel_pt1_src_nfp_convert_double2single
    USE ENTITY work.uz_plantModel_pt1_src_nfp_convert_double2single(rtl);

  -- Signals
  SIGNAL enb_1_100_1                      : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay3_bypass_reg                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion3_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay6_bypass_reg                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion2_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion2_out1_2     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_compare_to_zero_out        : std_logic;
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion_out1        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay4_bypass_reg                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion_out1_1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay5_bypass_reg                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_iv                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_compare_to_zero_out       : std_logic;
  SIGNAL Delay1_iv                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay2_bypass_reg                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1_1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_toDel                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_lowered_bypass_reg         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_toDel_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_delOut                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out_0_pipe_in_pipe_reg           : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL out_0_pipe_in_pipe_reg_next      : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Data_Type_Conversion4_out1_1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL t_bypass_reg                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1_2     : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_uz_plantModel_pt1_tc : uz_plantModel_pt1_src_uz_plantModel_pt1_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_100_1 => enb_1_100_1
              );

  u_uz_plantModel_pt1_uz_plantModel_pt1_nfp_convert_single2double : uz_plantModel_pt1_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => reciprocal_time_constant,  -- single
              nfp_out => Data_Type_Conversion3_out1  -- double
              );

  u_uz_plantModel_pt1_uz_plantModel_pt1_nfp_convert_single2double_1 : uz_plantModel_pt1_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => reset_1,  -- single
              nfp_out => Data_Type_Conversion2_out1  -- double
              );

  u_nfp_relop_comp : uz_plantModel_pt1_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion2_out1_2,  -- double
              nfp_in2 => const,  -- double
              nfp_out1 => Delay_compare_to_zero_out
              );

  u_uz_plantModel_pt1_uz_plantModel_pt1_nfp_convert_single2double_2 : uz_plantModel_pt1_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => input,  -- single
              nfp_out => Data_Type_Conversion_out1  -- double
              );

  u_uz_plantModel_pt1_uz_plantModel_pt1_nfp_convert_single2double_3 : uz_plantModel_pt1_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => gain,  -- single
              nfp_out => Data_Type_Conversion1_out1  -- double
              );

  u_nfp_mul_comp : uz_plantModel_pt1_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion_out1_1,  -- double
              nfp_in2 => Data_Type_Conversion1_out1_1,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_relop_comp_1 : uz_plantModel_pt1_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion2_out1_2,  -- double
              nfp_in2 => const_1,  -- double
              nfp_out1 => Delay1_compare_to_zero_out
              );

  u_nfp_sub_comp : uz_plantModel_pt1_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product_out1,  -- double
              nfp_in2 => Product1_out1_1,  -- double
              nfp_out => Sum2_out1  -- double
              );

  u_nfp_mul_comp_1 : uz_plantModel_pt1_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst,  -- double
              nfp_in2 => Sum2_out1,  -- double
              nfp_out => Gain_out1  -- double
              );

  u_nfp_add_comp : uz_plantModel_pt1_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay_out1,  -- double
              nfp_in2 => Delay1_out1,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_nfp_mul_comp_2 : uz_plantModel_pt1_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion3_out1_1,  -- double
              nfp_in2 => Sum_out1,  -- double
              nfp_out => Product1_out1  -- double
              );

  u_uz_plantModel_pt1_uz_plantModel_pt1_nfp_convert_double2single : uz_plantModel_pt1_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product1_out1,  -- double
              nfp_out => Data_Type_Conversion4_out1  -- single
              );

  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay3_bypass_reg <= Data_Type_Conversion3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Data_Type_Conversion3_out1_1 <= Data_Type_Conversion3_out1 WHEN enb_1_100_1 = '1' ELSE
      Delay3_bypass_reg;

  Delay6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay6_bypass_reg <= Data_Type_Conversion2_out1;
      END IF;
    END IF;
  END PROCESS Delay6_bypass_process;

  
  Data_Type_Conversion2_out1_1 <= Data_Type_Conversion2_out1 WHEN enb_1_100_1 = '1' ELSE
      Delay6_bypass_reg;

  Data_Type_Conversion2_out1_2 <= Data_Type_Conversion2_out1_1;

  const <= X"0000000000000000";

  kconst <= X"3eb0c6f7a0b5ed8d";

  Delay4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay4_bypass_reg <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;

  
  Data_Type_Conversion_out1_1 <= Data_Type_Conversion_out1 WHEN enb_1_100_1 = '1' ELSE
      Delay4_bypass_reg;

  Delay5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay5_bypass_reg <= Data_Type_Conversion1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1 WHEN enb_1_100_1 = '1' ELSE
      Delay5_bypass_reg;

  Delay_iv <= X"0000000000000000";

  const_1 <= X"0000000000000000";

  Delay1_iv <= X"0000000000000000";

  
  Delay1_toDel <= Sum_out1 WHEN Delay1_compare_to_zero_out = '0' ELSE
      Delay1_iv;

  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_1 <= Delay1_toDel WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut <= Delay1_toDel_1;

  
  Delay1_out1 <= Delay1_delOut WHEN Delay1_compare_to_zero_out = '0' ELSE
      Delay1_iv;

  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay2_bypass_reg <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Product1_out1_1 <= Product1_out1 WHEN enb_1_100_1 = '1' ELSE
      Delay2_bypass_reg;

  
  Delay_toDel <= Gain_out1 WHEN Delay_compare_to_zero_out = '0' ELSE
      Delay_iv;

  Delay_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay_lowered_bypass_reg <= Delay_toDel;
      END IF;
    END IF;
  END PROCESS Delay_lowered_bypass_process;

  
  Delay_toDel_1 <= Delay_toDel WHEN enb_1_100_1 = '1' ELSE
      Delay_lowered_bypass_reg;

  Delay_delOut <= Delay_toDel_1;

  
  Delay_out1 <= Delay_delOut WHEN Delay_compare_to_zero_out = '0' ELSE
      Delay_iv;

  out_0_pipe_in_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        out_0_pipe_in_pipe_reg(0) <= X"00000000";
        out_0_pipe_in_pipe_reg(1) <= X"00000000";
        out_0_pipe_in_pipe_reg(2) <= X"00000000";
        out_0_pipe_in_pipe_reg(3) <= X"00000000";
      ELSIF enb = '1' THEN
        out_0_pipe_in_pipe_reg(0) <= out_0_pipe_in_pipe_reg_next(0);
        out_0_pipe_in_pipe_reg(1) <= out_0_pipe_in_pipe_reg_next(1);
        out_0_pipe_in_pipe_reg(2) <= out_0_pipe_in_pipe_reg_next(2);
        out_0_pipe_in_pipe_reg(3) <= out_0_pipe_in_pipe_reg_next(3);
      END IF;
    END IF;
  END PROCESS out_0_pipe_in_pipe_process;

  Data_Type_Conversion4_out1_1 <= out_0_pipe_in_pipe_reg(3);
  out_0_pipe_in_pipe_reg_next(0) <= Data_Type_Conversion4_out1;
  out_0_pipe_in_pipe_reg_next(1) <= out_0_pipe_in_pipe_reg(0);
  out_0_pipe_in_pipe_reg_next(2) <= out_0_pipe_in_pipe_reg(1);
  out_0_pipe_in_pipe_reg_next(3) <= out_0_pipe_in_pipe_reg(2);

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t_bypass_reg <= Data_Type_Conversion4_out1_1;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Data_Type_Conversion4_out1_2 <= Data_Type_Conversion4_out1_1 WHEN enb_1_100_1 = '1' ELSE
      t_bypass_reg;

  ce_out <= enb_1_100_1;

  output <= Data_Type_Conversion4_out1_2;

END rtl;

