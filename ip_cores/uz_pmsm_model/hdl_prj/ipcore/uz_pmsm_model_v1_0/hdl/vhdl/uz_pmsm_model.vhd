-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/uz_pmsm_model/uz_pmsm_model.vhd
-- Created: 2021-06-29 09:30:03
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model
-- Source Path: uz_pmsm_model
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_pmsm_model IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_ACLK                         :   IN    std_logic;  -- ufix1
        AXI4_ARESETN                      :   IN    std_logic;  -- ufix1
        AXI4_AWID                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_AWADDR                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_AWLEN                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_AWSIZE                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_AWBURST                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_AWLOCK                       :   IN    std_logic;  -- ufix1
        AXI4_AWCACHE                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_AWPROT                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_AWVALID                      :   IN    std_logic;  -- ufix1
        AXI4_WDATA                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_WSTRB                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_WLAST                        :   IN    std_logic;  -- ufix1
        AXI4_WVALID                       :   IN    std_logic;  -- ufix1
        AXI4_BREADY                       :   IN    std_logic;  -- ufix1
        AXI4_ARID                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_ARADDR                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_ARLEN                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_ARSIZE                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_ARBURST                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_ARLOCK                       :   IN    std_logic;  -- ufix1
        AXI4_ARCACHE                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_ARPROT                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_ARVALID                      :   IN    std_logic;  -- ufix1
        AXI4_RREADY                       :   IN    std_logic;  -- ufix1
        AXI4_AWREADY                      :   OUT   std_logic;  -- ufix1
        AXI4_WREADY                       :   OUT   std_logic;  -- ufix1
        AXI4_BID                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_BRESP                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_BVALID                       :   OUT   std_logic;  -- ufix1
        AXI4_ARREADY                      :   OUT   std_logic;  -- ufix1
        AXI4_RID                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_RDATA                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_RRESP                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_RLAST                        :   OUT   std_logic;  -- ufix1
        AXI4_RVALID                       :   OUT   std_logic  -- ufix1
        );
END uz_pmsm_model;


ARCHITECTURE rtl OF uz_pmsm_model IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          u_d                             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          u_q                             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          R1                              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          polepairs                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          psi_pm                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          recirprocal_L_q                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reciprocal_L_d                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_integrators               :   IN    std_logic;  -- ufix1
          mu                              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          M_n0                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reciprocal_J                    :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          in_omega_mech                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          simulate_mechanical             :   IN    std_logic;  -- ufix1
          load_torque                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          ce_out                          :   OUT   std_logic;  -- ufix1
          i_d                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          i_q                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          torque                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          omega_mech                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_axi4
    PORT( reset                           :   IN    std_logic;
          AXI4_ACLK                       :   IN    std_logic;  -- ufix1
          AXI4_ARESETN                    :   IN    std_logic;  -- ufix1
          AXI4_AWID                       :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_AWADDR                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_AWLEN                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_AWSIZE                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_AWBURST                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_AWLOCK                     :   IN    std_logic;  -- ufix1
          AXI4_AWCACHE                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_AWPROT                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_AWVALID                    :   IN    std_logic;  -- ufix1
          AXI4_WDATA                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_WSTRB                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_WLAST                      :   IN    std_logic;  -- ufix1
          AXI4_WVALID                     :   IN    std_logic;  -- ufix1
          AXI4_BREADY                     :   IN    std_logic;  -- ufix1
          AXI4_ARID                       :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_ARADDR                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_ARLEN                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_ARSIZE                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_ARBURST                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_ARLOCK                     :   IN    std_logic;  -- ufix1
          AXI4_ARCACHE                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_ARPROT                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_ARVALID                    :   IN    std_logic;  -- ufix1
          AXI4_RREADY                     :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_i_d                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_i_q                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_torque                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_omega_mech                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_AWREADY                    :   OUT   std_logic;  -- ufix1
          AXI4_WREADY                     :   OUT   std_logic;  -- ufix1
          AXI4_BID                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_BRESP                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_BVALID                     :   OUT   std_logic;  -- ufix1
          AXI4_ARREADY                    :   OUT   std_logic;  -- ufix1
          AXI4_RID                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_RDATA                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_RRESP                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_RLAST                      :   OUT   std_logic;  -- ufix1
          AXI4_RVALID                     :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_u_d                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_u_q                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_R1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_polepairs                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_psi_pm                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_recirprocal_L_q           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_reciprocal_L_d            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_reset_integrators         :   OUT   std_logic;  -- ufix1
          write_mu                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_M_n0                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_reciprocal_J              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_in_omega_mech             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_simulate_mechanical       :   OUT   std_logic;  -- ufix1
          write_load_torque               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_reset_sync
    USE ENTITY work.uz_pmsm_model_reset_sync(rtl);

  FOR ALL : uz_pmsm_model_dut
    USE ENTITY work.uz_pmsm_model_dut(rtl);

  FOR ALL : uz_pmsm_model_axi4
    USE ENTITY work.uz_pmsm_model_axi4(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_u_d                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_u_q                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_R1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_polepairs                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_psi_pm                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_recirprocal_L_q            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reciprocal_L_d             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reset_integrators          : std_logic;  -- ufix1
  SIGNAL write_mu                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_M_n0                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reciprocal_J               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_in_omega_mech              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_simulate_mechanical        : std_logic;  -- ufix1
  SIGNAL write_load_torque                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL i_d_sig                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL i_q_sig                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL torque_sig                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_mech_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_BID_tmp                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL AXI4_BRESP_tmp                   : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_RID_tmp                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL AXI4_RDATA_tmp                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_RRESP_tmp                   : std_logic_vector(1 DOWNTO 0);  -- ufix2

BEGIN
  u_uz_pmsm_model_reset_sync_inst : uz_pmsm_model_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_uz_pmsm_model_dut_inst : uz_pmsm_model_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              u_d => write_u_d,  -- ufix32
              u_q => write_u_q,  -- ufix32
              R1 => write_R1,  -- ufix32
              polepairs => write_polepairs,  -- ufix32
              psi_pm => write_psi_pm,  -- ufix32
              recirprocal_L_q => write_recirprocal_L_q,  -- ufix32
              reciprocal_L_d => write_reciprocal_L_d,  -- ufix32
              reset_integrators => write_reset_integrators,  -- ufix1
              mu => write_mu,  -- ufix32
              M_n0 => write_M_n0,  -- ufix32
              reciprocal_J => write_reciprocal_J,  -- ufix32
              in_omega_mech => write_in_omega_mech,  -- ufix32
              simulate_mechanical => write_simulate_mechanical,  -- ufix1
              load_torque => write_load_torque,  -- ufix32
              ce_out => ce_out_sig,  -- ufix1
              i_d => i_d_sig,  -- ufix32
              i_q => i_q_sig,  -- ufix32
              torque => torque_sig,  -- ufix32
              omega_mech => omega_mech_sig  -- ufix32
              );

  u_uz_pmsm_model_axi4_inst : uz_pmsm_model_axi4
    PORT MAP( reset => reset,
              AXI4_ACLK => AXI4_ACLK,  -- ufix1
              AXI4_ARESETN => AXI4_ARESETN,  -- ufix1
              AXI4_AWID => AXI4_AWID,  -- ufix12
              AXI4_AWADDR => AXI4_AWADDR,  -- ufix16
              AXI4_AWLEN => AXI4_AWLEN,  -- ufix8
              AXI4_AWSIZE => AXI4_AWSIZE,  -- ufix3
              AXI4_AWBURST => AXI4_AWBURST,  -- ufix2
              AXI4_AWLOCK => AXI4_AWLOCK,  -- ufix1
              AXI4_AWCACHE => AXI4_AWCACHE,  -- ufix4
              AXI4_AWPROT => AXI4_AWPROT,  -- ufix3
              AXI4_AWVALID => AXI4_AWVALID,  -- ufix1
              AXI4_WDATA => AXI4_WDATA,  -- ufix32
              AXI4_WSTRB => AXI4_WSTRB,  -- ufix4
              AXI4_WLAST => AXI4_WLAST,  -- ufix1
              AXI4_WVALID => AXI4_WVALID,  -- ufix1
              AXI4_BREADY => AXI4_BREADY,  -- ufix1
              AXI4_ARID => AXI4_ARID,  -- ufix12
              AXI4_ARADDR => AXI4_ARADDR,  -- ufix16
              AXI4_ARLEN => AXI4_ARLEN,  -- ufix8
              AXI4_ARSIZE => AXI4_ARSIZE,  -- ufix3
              AXI4_ARBURST => AXI4_ARBURST,  -- ufix2
              AXI4_ARLOCK => AXI4_ARLOCK,  -- ufix1
              AXI4_ARCACHE => AXI4_ARCACHE,  -- ufix4
              AXI4_ARPROT => AXI4_ARPROT,  -- ufix3
              AXI4_ARVALID => AXI4_ARVALID,  -- ufix1
              AXI4_RREADY => AXI4_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_i_d => i_d_sig,  -- ufix32
              read_i_q => i_q_sig,  -- ufix32
              read_torque => torque_sig,  -- ufix32
              read_omega_mech => omega_mech_sig,  -- ufix32
              AXI4_AWREADY => AXI4_AWREADY,  -- ufix1
              AXI4_WREADY => AXI4_WREADY,  -- ufix1
              AXI4_BID => AXI4_BID_tmp,  -- ufix12
              AXI4_BRESP => AXI4_BRESP_tmp,  -- ufix2
              AXI4_BVALID => AXI4_BVALID,  -- ufix1
              AXI4_ARREADY => AXI4_ARREADY,  -- ufix1
              AXI4_RID => AXI4_RID_tmp,  -- ufix12
              AXI4_RDATA => AXI4_RDATA_tmp,  -- ufix32
              AXI4_RRESP => AXI4_RRESP_tmp,  -- ufix2
              AXI4_RLAST => AXI4_RLAST,  -- ufix1
              AXI4_RVALID => AXI4_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_u_d => write_u_d,  -- ufix32
              write_u_q => write_u_q,  -- ufix32
              write_R1 => write_R1,  -- ufix32
              write_polepairs => write_polepairs,  -- ufix32
              write_psi_pm => write_psi_pm,  -- ufix32
              write_recirprocal_L_q => write_recirprocal_L_q,  -- ufix32
              write_reciprocal_L_d => write_reciprocal_L_d,  -- ufix32
              write_reset_integrators => write_reset_integrators,  -- ufix1
              write_mu => write_mu,  -- ufix32
              write_M_n0 => write_M_n0,  -- ufix32
              write_reciprocal_J => write_reciprocal_J,  -- ufix32
              write_in_omega_mech => write_in_omega_mech,  -- ufix32
              write_simulate_mechanical => write_simulate_mechanical,  -- ufix1
              write_load_torque => write_load_torque,  -- ufix32
              reset_internal => reset_internal  -- ufix1
              );

  ip_timestamp <= to_unsigned(2106290930, 32);

  reset_cm <=  NOT IPCORE_RESETN;

  reset_before_sync <= reset_cm OR reset_internal;

  AXI4_BID <= AXI4_BID_tmp;

  AXI4_BRESP <= AXI4_BRESP_tmp;

  AXI4_RID <= AXI4_RID_tmp;

  AXI4_RDATA <= AXI4_RDATA_tmp;

  AXI4_RRESP <= AXI4_RRESP_tmp;

END rtl;

