-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_vec2GemStream_float_8u_129 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    p_out_full_n : IN STD_LOGIC;
    p_out_write : OUT STD_LOGIC;
    p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_m_empty_n : IN STD_LOGIC;
    p_m_read : OUT STD_LOGIC;
    p_in_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_in_ce0 : OUT STD_LOGIC;
    p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_in_ce1 : OUT STD_LOGIC;
    p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MLP_vec2GemStream_float_8u_129 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv61_0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv61_1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln86_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_m_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_162 : STD_LOGIC_VECTOR (60 downto 0);
    signal i_reg_173 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln_fu_184_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln_reg_372 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound_fu_202_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal bound_reg_377 : STD_LOGIC_VECTOR (60 downto 0);
    signal icmp_ln86_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln86_fu_213_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln86_reg_386 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln86_fu_224_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln86_reg_391 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_1_fu_236_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_396 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_in_load_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_in_load_1_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_load_2_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal p_in_load_3_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_load_4_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal p_in_load_5_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_fu_320_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln87_reg_476 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_166_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_phi_mux_i_phi_fu_177_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln92_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_1_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_2_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln92_3_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_4_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln92_5_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_6_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln92_7_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_202_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal bound_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln87_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_232_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln92_fu_249_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln92_1_fu_260_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln92_2_fu_270_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln92_3_fu_280_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln92_4_fu_290_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln92_5_fu_300_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln92_6_fu_310_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal l_v_7_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_6_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_5_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_4_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_3_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_2_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_1_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_202_p00 : STD_LOGIC_VECTOR (60 downto 0);
    signal bound_fu_202_p10 : STD_LOGIC_VECTOR (60 downto 0);

    component MLP_mul_29ns_32ns_61_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (60 downto 0) );
    end component;



begin
    mul_29ns_32ns_61_1_1_U199 : component MLP_mul_29ns_32ns_61_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 32,
        dout_WIDTH => 61)
    port map (
        din0 => bound_fu_202_p0,
        din1 => bound_fu_202_p1,
        dout => bound_fu_202_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_173 <= add_ln87_reg_476;
            elsif ((not(((p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_173 <= ap_const_lv29_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_162 <= add_ln86_reg_386;
            elsif ((not(((p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_162 <= ap_const_lv61_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln86_reg_386 <= add_ln86_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln87_reg_476 <= add_ln87_fu_320_p2;
                p_in_load_4_reg_456 <= p_in_q1;
                p_in_load_5_reg_461 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_377 <= bound_fu_202_p2;
                trunc_ln_reg_372 <= p_m_dout(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln86_reg_382 <= icmp_ln86_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_in_load_1_reg_421 <= p_in_q0;
                p_in_load_reg_416 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                p_in_load_2_reg_436 <= p_in_q1;
                p_in_load_3_reg_441 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_208_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln86_reg_391 <= select_ln86_fu_224_p3;
                    tmp_1_reg_396(6 downto 3) <= tmp_1_fu_236_p3(6 downto 3);
            end if;
        end if;
    end process;
    tmp_1_reg_396(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_m_empty_n, icmp_ln86_fu_208_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_fu_208_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_fu_208_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln86_fu_213_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_166_p4) + unsigned(ap_const_lv61_1));
    add_ln87_fu_320_p2 <= std_logic_vector(unsigned(ap_const_lv29_1) + unsigned(select_ln86_reg_391));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln86_reg_382)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln86_reg_382)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln86_reg_382)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_m_empty_n)
    begin
                ap_block_state1 <= ((p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(p_out_full_n, icmp_ln86_reg_382)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((icmp_ln86_reg_382 = ap_const_lv1_0) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln86_fu_208_p2)
    begin
        if ((icmp_ln86_fu_208_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_177_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln86_reg_382, i_reg_173, add_ln87_reg_476)
    begin
        if (((icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_177_p4 <= add_ln87_reg_476;
        else 
            ap_phi_mux_i_phi_fu_177_p4 <= i_reg_173;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_166_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln86_reg_382, indvar_flatten_reg_162, add_ln86_reg_386)
    begin
        if (((icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_166_p4 <= add_ln86_reg_386;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_166_p4 <= indvar_flatten_reg_162;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_202_p0 <= bound_fu_202_p00(29 - 1 downto 0);
    bound_fu_202_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_184_p4),61));
    bound_fu_202_p1 <= bound_fu_202_p10(32 - 1 downto 0);
    bound_fu_202_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_m_dout),61));
    empty_fu_232_p1 <= select_ln86_fu_224_p3(4 - 1 downto 0);
    icmp_ln86_fu_208_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_166_p4 = bound_reg_377) else "0";
    icmp_ln87_fu_219_p2 <= "1" when (ap_phi_mux_i_phi_fu_177_p4 = trunc_ln_reg_372) else "0";
    l_v_1_fu_328_p1 <= p_in_load_1_reg_421;
    l_v_2_fu_331_p1 <= p_in_load_2_reg_436;
    l_v_3_fu_334_p1 <= p_in_load_3_reg_441;
    l_v_4_fu_337_p1 <= p_in_load_4_reg_456;
    l_v_5_fu_340_p1 <= p_in_load_5_reg_461;
    l_v_6_fu_343_p1 <= p_in_q1;
    l_v_7_fu_347_p1 <= p_in_q0;
    l_v_fu_325_p1 <= p_in_load_reg_416;
    or_ln92_1_fu_260_p2 <= (tmp_1_reg_396 or ap_const_lv7_2);
    or_ln92_2_fu_270_p2 <= (tmp_1_reg_396 or ap_const_lv7_3);
    or_ln92_3_fu_280_p2 <= (tmp_1_reg_396 or ap_const_lv7_4);
    or_ln92_4_fu_290_p2 <= (tmp_1_reg_396 or ap_const_lv7_5);
    or_ln92_5_fu_300_p2 <= (tmp_1_reg_396 or ap_const_lv7_6);
    or_ln92_6_fu_310_p2 <= (tmp_1_reg_396 or ap_const_lv7_7);
    or_ln92_fu_249_p2 <= (tmp_1_fu_236_p3 or ap_const_lv7_1);

    p_in_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln92_1_fu_255_p1, ap_block_pp0_stage1, zext_ln92_3_fu_275_p1, ap_block_pp0_stage2, zext_ln92_5_fu_295_p1, ap_block_pp0_stage3, zext_ln92_7_fu_315_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_in_address0 <= zext_ln92_7_fu_315_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_in_address0 <= zext_ln92_5_fu_295_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_in_address0 <= zext_ln92_3_fu_275_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_in_address0 <= zext_ln92_1_fu_255_p1(7 - 1 downto 0);
            else 
                p_in_address0 <= "XXXXXXX";
            end if;
        else 
            p_in_address0 <= "XXXXXXX";
        end if; 
    end process;


    p_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln92_fu_244_p1, zext_ln92_2_fu_265_p1, ap_block_pp0_stage1, zext_ln92_4_fu_285_p1, ap_block_pp0_stage2, zext_ln92_6_fu_305_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_in_address1 <= zext_ln92_6_fu_305_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_in_address1 <= zext_ln92_4_fu_285_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_in_address1 <= zext_ln92_2_fu_265_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_in_address1 <= zext_ln92_fu_244_p1(7 - 1 downto 0);
            else 
                p_in_address1 <= "XXXXXXX";
            end if;
        else 
            p_in_address1 <= "XXXXXXX";
        end if; 
    end process;


    p_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            p_in_ce0 <= ap_const_logic_1;
        else 
            p_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            p_in_ce1 <= ap_const_logic_1;
        else 
            p_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_m_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_blk_n <= p_m_empty_n;
        else 
            p_m_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_m_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n)
    begin
        if ((not(((p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_read <= ap_const_logic_1;
        else 
            p_m_read <= ap_const_logic_0;
        end if; 
    end process;


    p_out_blk_n_assign_proc : process(p_out_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln86_reg_382)
    begin
        if (((icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_blk_n <= p_out_full_n;
        else 
            p_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_din <= (((((((l_v_7_fu_347_p1 & l_v_6_fu_343_p1) & l_v_5_fu_340_p1) & l_v_4_fu_337_p1) & l_v_3_fu_334_p1) & l_v_2_fu_331_p1) & l_v_1_fu_328_p1) & l_v_fu_325_p1);

    p_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln86_reg_382, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln86_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_write <= ap_const_logic_1;
        else 
            p_out_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln86_fu_224_p3 <= 
        ap_const_lv29_0 when (icmp_ln87_fu_219_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_177_p4;
    tmp_1_fu_236_p3 <= (empty_fu_232_p1 & ap_const_lv3_0);
    trunc_ln_fu_184_p4 <= p_m_dout(31 downto 3);
    zext_ln92_1_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln92_fu_249_p2),64));
    zext_ln92_2_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln92_1_fu_260_p2),64));
    zext_ln92_3_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln92_2_fu_270_p2),64));
    zext_ln92_4_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln92_3_fu_280_p2),64));
    zext_ln92_5_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln92_4_fu_290_p2),64));
    zext_ln92_6_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln92_5_fu_300_p2),64));
    zext_ln92_7_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln92_6_fu_310_p2),64));
    zext_ln92_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_236_p3),64));
end behav;
