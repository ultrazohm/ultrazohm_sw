-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pmsm_model\uz_pmsm_model_addr_decoder.vhd
-- Created: 2024-05-23 13:51:11
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_addr_decoder
-- Source Path: uz_pmsm_model/uz_pmsm_model_axi4/uz_pmsm_model_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_pkg.ALL;

ENTITY uz_pmsm_model_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_outputs                      :   IN    vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_reset_integrators           :   OUT   std_logic;  -- ufix1
        write_simulate_mechanical         :   OUT   std_logic;  -- ufix1
        write_simulate_nonlinear          :   OUT   std_logic;  -- ufix1
        write_reciprocal_J                :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_mu                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_M_n0                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_L_d                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_L_q                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_R1                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_polepairs                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_psi_pm                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_inputs                      :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
        write_fitting_parameter           :   OUT   vector_of_std_logic_vector32(0 TO 22)  -- ufix32 [23]
        );
END uz_pmsm_model_addr_decoder;


ARCHITECTURE rtl OF uz_pmsm_model_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL decode_sel_outputs_1_1           : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_outputs               : std_logic;  -- ufix1
  SIGNAL strobe_sel_outputs               : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL strobe_in_outputs                : std_logic;  -- ufix1
  SIGNAL strobe_sw_outputs                : std_logic;  -- ufix1
  SIGNAL strobe_reg_outputs               : std_logic;  -- ufix1
  SIGNAL read_outputs_unsigned            : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL sync_reg_outputs                 : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL decode_sel_outputs_1_2           : std_logic;  -- ufix1
  SIGNAL data_slice_outputs_1_0           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_outputs_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_outputs_1_3           : std_logic;  -- ufix1
  SIGNAL data_slice_outputs_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_outputs_1_2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_outputs_1_4           : std_logic;  -- ufix1
  SIGNAL data_slice_outputs_1_2           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_outputs_1_3            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_outputs_1_3           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_outputs_1_4            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_reset_integrators_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_reset_integrators_1_1    : std_logic;  -- ufix1
  SIGNAL data_in_reset_integrators        : std_logic;  -- ufix1
  SIGNAL data_reg_reset_integrators_1_1   : std_logic;  -- ufix1
  SIGNAL decode_sel_simulate_mechanical_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_simulate_mechanical_1_1  : std_logic;  -- ufix1
  SIGNAL data_in_simulate_mechanical      : std_logic;  -- ufix1
  SIGNAL data_reg_simulate_mechanical_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_simulate_nonlinear_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_simulate_nonlinear_1_1   : std_logic;  -- ufix1
  SIGNAL data_in_simulate_nonlinear       : std_logic;  -- ufix1
  SIGNAL data_reg_simulate_nonlinear_1_1  : std_logic;  -- ufix1
  SIGNAL decode_sel_reciprocal_J_1_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_reciprocal_J_1_1         : std_logic;  -- ufix1
  SIGNAL data_reg_reciprocal_J_1_1        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_mu_1_1                : std_logic;  -- ufix1
  SIGNAL reg_enb_mu_1_1                   : std_logic;  -- ufix1
  SIGNAL data_reg_mu_1_1                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_M_n0_1_1              : std_logic;  -- ufix1
  SIGNAL reg_enb_M_n0_1_1                 : std_logic;  -- ufix1
  SIGNAL data_reg_M_n0_1_1                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_L_d_1_1               : std_logic;  -- ufix1
  SIGNAL reg_enb_L_d_1_1                  : std_logic;  -- ufix1
  SIGNAL data_reg_L_d_1_1                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_L_q_1_1               : std_logic;  -- ufix1
  SIGNAL reg_enb_L_q_1_1                  : std_logic;  -- ufix1
  SIGNAL data_reg_L_q_1_1                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_R1_1_1                : std_logic;  -- ufix1
  SIGNAL reg_enb_R1_1_1                   : std_logic;  -- ufix1
  SIGNAL data_reg_R1_1_1                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_polepairs_1_1         : std_logic;  -- ufix1
  SIGNAL reg_enb_polepairs_1_1            : std_logic;  -- ufix1
  SIGNAL data_reg_polepairs_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_psi_pm_1_1            : std_logic;  -- ufix1
  SIGNAL reg_enb_psi_pm_1_1               : std_logic;  -- ufix1
  SIGNAL data_reg_psi_pm_1_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_inputs                : std_logic;  -- ufix1
  SIGNAL strobe_sel_inputs                : std_logic;  -- ufix1
  SIGNAL const_zero_1                     : std_logic;  -- ufix1
  SIGNAL strobe_in_inputs                 : std_logic;  -- ufix1
  SIGNAL strobe_sw_inputs                 : std_logic;  -- ufix1
  SIGNAL decode_sel_inputs_1_1            : std_logic;  -- ufix1
  SIGNAL reg_enb_inputs_1_1               : std_logic;  -- ufix1
  SIGNAL data_reg_inputs_1_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_inputs_2_1            : std_logic;  -- ufix1
  SIGNAL reg_enb_inputs_2_1               : std_logic;  -- ufix1
  SIGNAL data_reg_inputs_2_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_inputs_3_1            : std_logic;  -- ufix1
  SIGNAL reg_enb_inputs_3_1               : std_logic;  -- ufix1
  SIGNAL data_reg_inputs_3_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_inputs_4_1            : std_logic;  -- ufix1
  SIGNAL reg_enb_inputs_4_1               : std_logic;  -- ufix1
  SIGNAL strobe_reg_inputs                : std_logic;  -- ufix1
  SIGNAL data_reg_inputs_4_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_inputs                 : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL sync_reg_inputs_1                : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL decode_sel_fitting_parameter     : std_logic;  -- ufix1
  SIGNAL strobe_sel_fitting_parameter     : std_logic;  -- ufix1
  SIGNAL const_zero_2                     : std_logic;  -- ufix1
  SIGNAL strobe_in_fitting_parameter      : std_logic;  -- ufix1
  SIGNAL strobe_sw_fitting_parameter      : std_logic;  -- ufix1
  SIGNAL decode_sel_fitting_parameter_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_1_1    : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_1_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_2_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_2_1    : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_2_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_3_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_3_1    : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_3_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_4_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_4_1    : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_4_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_5_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_5_1    : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_5_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_6_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_6_1    : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_6_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_7_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_7_1    : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_7_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_8_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_8_1    : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_8_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_9_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_9_1    : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_9_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_10_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_10_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_10_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_11_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_11_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_11_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_12_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_12_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_12_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_13_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_13_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_13_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_14_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_14_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_14_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_15_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_15_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_15_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_16_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_16_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_16_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_17_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_17_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_17_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_18_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_18_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_18_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_19_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_19_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_19_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_20_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_20_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_20_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_21_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_21_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_21_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_22_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_22_1   : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_22_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_fitting_parameter_23_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_fitting_parameter_23_1   : std_logic;  -- ufix1
  SIGNAL strobe_reg_fitting_parameter     : std_logic;  -- ufix1
  SIGNAL data_reg_fitting_parameter_23_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_fitting_parameter      : vector_of_unsigned32(0 TO 22);  -- ufix32 [23]
  SIGNAL sync_reg_fitting_parameter_1     : vector_of_unsigned32(0 TO 22);  -- ufix32 [23]

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1_1 <= '1';

  enb <= const_1_1;

  
  decode_sel_outputs_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0054#, 14) ELSE
      '0';

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  
  decode_sel_outputs <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0058#, 14) ELSE
      '0';

  strobe_sel_outputs <= decode_sel_outputs AND wr_enb;

  const_zero <= '0';

  data_write_unsigned <= unsigned(data_write);

  strobe_in_outputs <= data_write_unsigned(0);

  
  strobe_sw_outputs <= const_zero WHEN strobe_sel_outputs = '0' ELSE
      strobe_in_outputs;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_outputs <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_outputs <= strobe_sw_outputs;
      END IF;
    END IF;
  END PROCESS reg_process;


  outputgen2: FOR k IN 0 TO 3 GENERATE
    read_outputs_unsigned(k) <= unsigned(read_outputs(k));
  END GENERATE;

  reg_outputs_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_outputs <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' AND strobe_reg_outputs = '1' THEN
        sync_reg_outputs <= read_outputs_unsigned;
      END IF;
    END IF;
  END PROCESS reg_outputs_process;


  
  decode_sel_outputs_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0055#, 14) ELSE
      '0';

  data_slice_outputs_1_0 <= sync_reg_outputs(0);

  
  decode_rd_outputs_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_outputs_1_1 = '0' ELSE
      data_slice_outputs_1_0;

  
  decode_sel_outputs_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0056#, 14) ELSE
      '0';

  data_slice_outputs_1_1 <= sync_reg_outputs(1);

  
  decode_rd_outputs_1_2 <= decode_rd_outputs_1_1 WHEN decode_sel_outputs_1_2 = '0' ELSE
      data_slice_outputs_1_1;

  
  decode_sel_outputs_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0057#, 14) ELSE
      '0';

  data_slice_outputs_1_2 <= sync_reg_outputs(2);

  
  decode_rd_outputs_1_3 <= decode_rd_outputs_1_2 WHEN decode_sel_outputs_1_3 = '0' ELSE
      data_slice_outputs_1_2;

  data_slice_outputs_1_3 <= sync_reg_outputs(3);

  
  decode_rd_outputs_1_4 <= decode_rd_outputs_1_3 WHEN decode_sel_outputs_1_4 = '0' ELSE
      data_slice_outputs_1_3;

  data_read <= std_logic_vector(decode_rd_outputs_1_4);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_axi_enable <= data_reg_axi_enable_1_1;

  
  decode_sel_reset_integrators_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_reset_integrators_1_1 <= decode_sel_reset_integrators_1_1 AND wr_enb;

  data_in_reset_integrators <= data_write_unsigned(0);

  reg_reset_integrators_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_reset_integrators_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_reset_integrators_1_1 = '1' THEN
        data_reg_reset_integrators_1_1 <= data_in_reset_integrators;
      END IF;
    END IF;
  END PROCESS reg_reset_integrators_1_1_process;


  write_reset_integrators <= data_reg_reset_integrators_1_1;

  
  decode_sel_simulate_mechanical_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_simulate_mechanical_1_1 <= decode_sel_simulate_mechanical_1_1 AND wr_enb;

  data_in_simulate_mechanical <= data_write_unsigned(0);

  reg_simulate_mechanical_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_simulate_mechanical_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_simulate_mechanical_1_1 = '1' THEN
        data_reg_simulate_mechanical_1_1 <= data_in_simulate_mechanical;
      END IF;
    END IF;
  END PROCESS reg_simulate_mechanical_1_1_process;


  write_simulate_mechanical <= data_reg_simulate_mechanical_1_1;

  
  decode_sel_simulate_nonlinear_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_simulate_nonlinear_1_1 <= decode_sel_simulate_nonlinear_1_1 AND wr_enb;

  data_in_simulate_nonlinear <= data_write_unsigned(0);

  reg_simulate_nonlinear_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_simulate_nonlinear_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_simulate_nonlinear_1_1 = '1' THEN
        data_reg_simulate_nonlinear_1_1 <= data_in_simulate_nonlinear;
      END IF;
    END IF;
  END PROCESS reg_simulate_nonlinear_1_1_process;


  write_simulate_nonlinear <= data_reg_simulate_nonlinear_1_1;

  
  decode_sel_reciprocal_J_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_reciprocal_J_1_1 <= decode_sel_reciprocal_J_1_1 AND wr_enb;

  reg_reciprocal_J_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_reciprocal_J_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_reciprocal_J_1_1 = '1' THEN
        data_reg_reciprocal_J_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_reciprocal_J_1_1_process;


  write_reciprocal_J <= std_logic_vector(data_reg_reciprocal_J_1_1);

  
  decode_sel_mu_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_mu_1_1 <= decode_sel_mu_1_1 AND wr_enb;

  reg_mu_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_mu_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_mu_1_1 = '1' THEN
        data_reg_mu_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_mu_1_1_process;


  write_mu <= std_logic_vector(data_reg_mu_1_1);

  
  decode_sel_M_n0_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_M_n0_1_1 <= decode_sel_M_n0_1_1 AND wr_enb;

  reg_M_n0_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_M_n0_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_M_n0_1_1 = '1' THEN
        data_reg_M_n0_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_M_n0_1_1_process;


  write_M_n0 <= std_logic_vector(data_reg_M_n0_1_1);

  
  decode_sel_L_d_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_L_d_1_1 <= decode_sel_L_d_1_1 AND wr_enb;

  reg_L_d_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_L_d_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_L_d_1_1 = '1' THEN
        data_reg_L_d_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_L_d_1_1_process;


  write_L_d <= std_logic_vector(data_reg_L_d_1_1);

  
  decode_sel_L_q_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_L_q_1_1 <= decode_sel_L_q_1_1 AND wr_enb;

  reg_L_q_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_L_q_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_L_q_1_1 = '1' THEN
        data_reg_L_q_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_L_q_1_1_process;


  write_L_q <= std_logic_vector(data_reg_L_q_1_1);

  
  decode_sel_R1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_R1_1_1 <= decode_sel_R1_1_1 AND wr_enb;

  reg_R1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_R1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_R1_1_1 = '1' THEN
        data_reg_R1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_R1_1_1_process;


  write_R1 <= std_logic_vector(data_reg_R1_1_1);

  
  decode_sel_polepairs_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_polepairs_1_1 <= decode_sel_polepairs_1_1 AND wr_enb;

  reg_polepairs_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_polepairs_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_polepairs_1_1 = '1' THEN
        data_reg_polepairs_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_polepairs_1_1_process;


  write_polepairs <= std_logic_vector(data_reg_polepairs_1_1);

  
  decode_sel_psi_pm_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_psi_pm_1_1 <= decode_sel_psi_pm_1_1 AND wr_enb;

  reg_psi_pm_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_psi_pm_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_psi_pm_1_1 = '1' THEN
        data_reg_psi_pm_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_psi_pm_1_1_process;


  write_psi_pm <= std_logic_vector(data_reg_psi_pm_1_1);

  
  decode_sel_inputs <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  strobe_sel_inputs <= decode_sel_inputs AND wr_enb;

  const_zero_1 <= '0';

  strobe_in_inputs <= data_write_unsigned(0);

  
  strobe_sw_inputs <= const_zero_1 WHEN strobe_sel_inputs = '0' ELSE
      strobe_in_inputs;

  
  decode_sel_inputs_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  reg_enb_inputs_1_1 <= decode_sel_inputs_1_1 AND wr_enb;

  reg_inputs_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_inputs_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_inputs_1_1 = '1' THEN
        data_reg_inputs_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_inputs_1_1_process;


  
  decode_sel_inputs_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  reg_enb_inputs_2_1 <= decode_sel_inputs_2_1 AND wr_enb;

  reg_inputs_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_inputs_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_inputs_2_1 = '1' THEN
        data_reg_inputs_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_inputs_2_1_process;


  
  decode_sel_inputs_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  reg_enb_inputs_3_1 <= decode_sel_inputs_3_1 AND wr_enb;

  reg_inputs_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_inputs_3_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_inputs_3_1 = '1' THEN
        data_reg_inputs_3_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_inputs_3_1_process;


  
  decode_sel_inputs_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  reg_enb_inputs_4_1 <= decode_sel_inputs_4_1 AND wr_enb;

  reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_inputs <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_inputs <= strobe_sw_inputs;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_inputs_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_inputs_4_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_inputs_4_1 = '1' THEN
        data_reg_inputs_4_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_inputs_4_1_process;


  write_reg_inputs(0) <= data_reg_inputs_1_1;
  write_reg_inputs(1) <= data_reg_inputs_2_1;
  write_reg_inputs(2) <= data_reg_inputs_3_1;
  write_reg_inputs(3) <= data_reg_inputs_4_1;

  sync_reg_inputs_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_inputs_1 <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' AND strobe_reg_inputs = '1' THEN
        sync_reg_inputs_1 <= write_reg_inputs;
      END IF;
    END IF;
  END PROCESS sync_reg_inputs_process;


  outputgen1: FOR k IN 0 TO 3 GENERATE
    write_inputs(k) <= std_logic_vector(sync_reg_inputs_1(k));
  END GENERATE;

  
  decode_sel_fitting_parameter <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0080#, 14) ELSE
      '0';

  strobe_sel_fitting_parameter <= decode_sel_fitting_parameter AND wr_enb;

  const_zero_2 <= '0';

  strobe_in_fitting_parameter <= data_write_unsigned(0);

  
  strobe_sw_fitting_parameter <= const_zero_2 WHEN strobe_sel_fitting_parameter = '0' ELSE
      strobe_in_fitting_parameter;

  
  decode_sel_fitting_parameter_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0060#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_1_1 <= decode_sel_fitting_parameter_1_1 AND wr_enb;

  reg_fitting_parameter_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_1_1 = '1' THEN
        data_reg_fitting_parameter_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_1_1_process;


  
  decode_sel_fitting_parameter_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0061#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_2_1 <= decode_sel_fitting_parameter_2_1 AND wr_enb;

  reg_fitting_parameter_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_2_1 = '1' THEN
        data_reg_fitting_parameter_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_2_1_process;


  
  decode_sel_fitting_parameter_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0062#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_3_1 <= decode_sel_fitting_parameter_3_1 AND wr_enb;

  reg_fitting_parameter_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_3_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_3_1 = '1' THEN
        data_reg_fitting_parameter_3_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_3_1_process;


  
  decode_sel_fitting_parameter_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0063#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_4_1 <= decode_sel_fitting_parameter_4_1 AND wr_enb;

  reg_fitting_parameter_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_4_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_4_1 = '1' THEN
        data_reg_fitting_parameter_4_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_4_1_process;


  
  decode_sel_fitting_parameter_5_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0064#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_5_1 <= decode_sel_fitting_parameter_5_1 AND wr_enb;

  reg_fitting_parameter_5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_5_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_5_1 = '1' THEN
        data_reg_fitting_parameter_5_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_5_1_process;


  
  decode_sel_fitting_parameter_6_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0065#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_6_1 <= decode_sel_fitting_parameter_6_1 AND wr_enb;

  reg_fitting_parameter_6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_6_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_6_1 = '1' THEN
        data_reg_fitting_parameter_6_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_6_1_process;


  
  decode_sel_fitting_parameter_7_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0066#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_7_1 <= decode_sel_fitting_parameter_7_1 AND wr_enb;

  reg_fitting_parameter_7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_7_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_7_1 = '1' THEN
        data_reg_fitting_parameter_7_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_7_1_process;


  
  decode_sel_fitting_parameter_8_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0067#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_8_1 <= decode_sel_fitting_parameter_8_1 AND wr_enb;

  reg_fitting_parameter_8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_8_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_8_1 = '1' THEN
        data_reg_fitting_parameter_8_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_8_1_process;


  
  decode_sel_fitting_parameter_9_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0068#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_9_1 <= decode_sel_fitting_parameter_9_1 AND wr_enb;

  reg_fitting_parameter_9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_9_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_9_1 = '1' THEN
        data_reg_fitting_parameter_9_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_9_1_process;


  
  decode_sel_fitting_parameter_10_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0069#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_10_1 <= decode_sel_fitting_parameter_10_1 AND wr_enb;

  reg_fitting_parameter_10_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_10_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_10_1 = '1' THEN
        data_reg_fitting_parameter_10_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_10_1_process;


  
  decode_sel_fitting_parameter_11_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006A#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_11_1 <= decode_sel_fitting_parameter_11_1 AND wr_enb;

  reg_fitting_parameter_11_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_11_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_11_1 = '1' THEN
        data_reg_fitting_parameter_11_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_11_1_process;


  
  decode_sel_fitting_parameter_12_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006B#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_12_1 <= decode_sel_fitting_parameter_12_1 AND wr_enb;

  reg_fitting_parameter_12_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_12_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_12_1 = '1' THEN
        data_reg_fitting_parameter_12_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_12_1_process;


  
  decode_sel_fitting_parameter_13_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006C#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_13_1 <= decode_sel_fitting_parameter_13_1 AND wr_enb;

  reg_fitting_parameter_13_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_13_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_13_1 = '1' THEN
        data_reg_fitting_parameter_13_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_13_1_process;


  
  decode_sel_fitting_parameter_14_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006D#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_14_1 <= decode_sel_fitting_parameter_14_1 AND wr_enb;

  reg_fitting_parameter_14_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_14_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_14_1 = '1' THEN
        data_reg_fitting_parameter_14_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_14_1_process;


  
  decode_sel_fitting_parameter_15_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006E#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_15_1 <= decode_sel_fitting_parameter_15_1 AND wr_enb;

  reg_fitting_parameter_15_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_15_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_15_1 = '1' THEN
        data_reg_fitting_parameter_15_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_15_1_process;


  
  decode_sel_fitting_parameter_16_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006F#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_16_1 <= decode_sel_fitting_parameter_16_1 AND wr_enb;

  reg_fitting_parameter_16_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_16_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_16_1 = '1' THEN
        data_reg_fitting_parameter_16_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_16_1_process;


  
  decode_sel_fitting_parameter_17_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0070#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_17_1 <= decode_sel_fitting_parameter_17_1 AND wr_enb;

  reg_fitting_parameter_17_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_17_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_17_1 = '1' THEN
        data_reg_fitting_parameter_17_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_17_1_process;


  
  decode_sel_fitting_parameter_18_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0071#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_18_1 <= decode_sel_fitting_parameter_18_1 AND wr_enb;

  reg_fitting_parameter_18_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_18_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_18_1 = '1' THEN
        data_reg_fitting_parameter_18_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_18_1_process;


  
  decode_sel_fitting_parameter_19_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0072#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_19_1 <= decode_sel_fitting_parameter_19_1 AND wr_enb;

  reg_fitting_parameter_19_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_19_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_19_1 = '1' THEN
        data_reg_fitting_parameter_19_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_19_1_process;


  
  decode_sel_fitting_parameter_20_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0073#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_20_1 <= decode_sel_fitting_parameter_20_1 AND wr_enb;

  reg_fitting_parameter_20_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_20_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_20_1 = '1' THEN
        data_reg_fitting_parameter_20_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_20_1_process;


  
  decode_sel_fitting_parameter_21_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0074#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_21_1 <= decode_sel_fitting_parameter_21_1 AND wr_enb;

  reg_fitting_parameter_21_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_21_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_21_1 = '1' THEN
        data_reg_fitting_parameter_21_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_21_1_process;


  
  decode_sel_fitting_parameter_22_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0075#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_22_1 <= decode_sel_fitting_parameter_22_1 AND wr_enb;

  reg_fitting_parameter_22_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_22_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_22_1 = '1' THEN
        data_reg_fitting_parameter_22_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_22_1_process;


  
  decode_sel_fitting_parameter_23_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0076#, 14) ELSE
      '0';

  reg_enb_fitting_parameter_23_1 <= decode_sel_fitting_parameter_23_1 AND wr_enb;

  reg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_fitting_parameter <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_fitting_parameter <= strobe_sw_fitting_parameter;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  reg_fitting_parameter_23_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_fitting_parameter_23_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_fitting_parameter_23_1 = '1' THEN
        data_reg_fitting_parameter_23_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_fitting_parameter_23_1_process;


  write_reg_fitting_parameter(0) <= data_reg_fitting_parameter_1_1;
  write_reg_fitting_parameter(1) <= data_reg_fitting_parameter_2_1;
  write_reg_fitting_parameter(2) <= data_reg_fitting_parameter_3_1;
  write_reg_fitting_parameter(3) <= data_reg_fitting_parameter_4_1;
  write_reg_fitting_parameter(4) <= data_reg_fitting_parameter_5_1;
  write_reg_fitting_parameter(5) <= data_reg_fitting_parameter_6_1;
  write_reg_fitting_parameter(6) <= data_reg_fitting_parameter_7_1;
  write_reg_fitting_parameter(7) <= data_reg_fitting_parameter_8_1;
  write_reg_fitting_parameter(8) <= data_reg_fitting_parameter_9_1;
  write_reg_fitting_parameter(9) <= data_reg_fitting_parameter_10_1;
  write_reg_fitting_parameter(10) <= data_reg_fitting_parameter_11_1;
  write_reg_fitting_parameter(11) <= data_reg_fitting_parameter_12_1;
  write_reg_fitting_parameter(12) <= data_reg_fitting_parameter_13_1;
  write_reg_fitting_parameter(13) <= data_reg_fitting_parameter_14_1;
  write_reg_fitting_parameter(14) <= data_reg_fitting_parameter_15_1;
  write_reg_fitting_parameter(15) <= data_reg_fitting_parameter_16_1;
  write_reg_fitting_parameter(16) <= data_reg_fitting_parameter_17_1;
  write_reg_fitting_parameter(17) <= data_reg_fitting_parameter_18_1;
  write_reg_fitting_parameter(18) <= data_reg_fitting_parameter_19_1;
  write_reg_fitting_parameter(19) <= data_reg_fitting_parameter_20_1;
  write_reg_fitting_parameter(20) <= data_reg_fitting_parameter_21_1;
  write_reg_fitting_parameter(21) <= data_reg_fitting_parameter_22_1;
  write_reg_fitting_parameter(22) <= data_reg_fitting_parameter_23_1;

  sync_reg_fitting_parameter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_fitting_parameter_1 <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' AND strobe_reg_fitting_parameter = '1' THEN
        sync_reg_fitting_parameter_1 <= write_reg_fitting_parameter;
      END IF;
    END IF;
  END PROCESS sync_reg_fitting_parameter_process;


  outputgen: FOR k IN 0 TO 22 GENERATE
    write_fitting_parameter(k) <= std_logic_vector(sync_reg_fitting_parameter_1(k));
  END GENERATE;

END rtl;

