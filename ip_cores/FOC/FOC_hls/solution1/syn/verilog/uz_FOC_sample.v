// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_FOC_sample_uz_FOC_sample,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.324600,HLS_SYN_LAT=88,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=9561,HLS_SYN_LUT=13099,HLS_VERSION=2020_1}" *)

module uz_FOC_sample (
        ap_clk,
        ap_rst_n,
        m_axi_Dout_AWVALID,
        m_axi_Dout_AWREADY,
        m_axi_Dout_AWADDR,
        m_axi_Dout_AWID,
        m_axi_Dout_AWLEN,
        m_axi_Dout_AWSIZE,
        m_axi_Dout_AWBURST,
        m_axi_Dout_AWLOCK,
        m_axi_Dout_AWCACHE,
        m_axi_Dout_AWPROT,
        m_axi_Dout_AWQOS,
        m_axi_Dout_AWREGION,
        m_axi_Dout_AWUSER,
        m_axi_Dout_WVALID,
        m_axi_Dout_WREADY,
        m_axi_Dout_WDATA,
        m_axi_Dout_WSTRB,
        m_axi_Dout_WLAST,
        m_axi_Dout_WID,
        m_axi_Dout_WUSER,
        m_axi_Dout_ARVALID,
        m_axi_Dout_ARREADY,
        m_axi_Dout_ARADDR,
        m_axi_Dout_ARID,
        m_axi_Dout_ARLEN,
        m_axi_Dout_ARSIZE,
        m_axi_Dout_ARBURST,
        m_axi_Dout_ARLOCK,
        m_axi_Dout_ARCACHE,
        m_axi_Dout_ARPROT,
        m_axi_Dout_ARQOS,
        m_axi_Dout_ARREGION,
        m_axi_Dout_ARUSER,
        m_axi_Dout_RVALID,
        m_axi_Dout_RREADY,
        m_axi_Dout_RDATA,
        m_axi_Dout_RLAST,
        m_axi_Dout_RID,
        m_axi_Dout_RUSER,
        m_axi_Dout_RRESP,
        m_axi_Dout_BVALID,
        m_axi_Dout_BREADY,
        m_axi_Dout_BRESP,
        m_axi_Dout_BID,
        m_axi_Dout_BUSER,
        s_axi_Din_AWVALID,
        s_axi_Din_AWREADY,
        s_axi_Din_AWADDR,
        s_axi_Din_WVALID,
        s_axi_Din_WREADY,
        s_axi_Din_WDATA,
        s_axi_Din_WSTRB,
        s_axi_Din_ARVALID,
        s_axi_Din_ARREADY,
        s_axi_Din_ARADDR,
        s_axi_Din_RVALID,
        s_axi_Din_RREADY,
        s_axi_Din_RDATA,
        s_axi_Din_RRESP,
        s_axi_Din_BVALID,
        s_axi_Din_BREADY,
        s_axi_Din_BRESP,
        interrupt,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;
parameter    C_S_AXI_DIN_DATA_WIDTH = 32;
parameter    C_S_AXI_DIN_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_M_AXI_DOUT_ID_WIDTH = 1;
parameter    C_M_AXI_DOUT_ADDR_WIDTH = 64;
parameter    C_M_AXI_DOUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DOUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_USER_VALUE = 0;
parameter    C_M_AXI_DOUT_PROT_VALUE = 0;
parameter    C_M_AXI_DOUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_DIN_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DOUT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_Dout_AWVALID;
input   m_axi_Dout_AWREADY;
output  [C_M_AXI_DOUT_ADDR_WIDTH - 1:0] m_axi_Dout_AWADDR;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_AWID;
output  [7:0] m_axi_Dout_AWLEN;
output  [2:0] m_axi_Dout_AWSIZE;
output  [1:0] m_axi_Dout_AWBURST;
output  [1:0] m_axi_Dout_AWLOCK;
output  [3:0] m_axi_Dout_AWCACHE;
output  [2:0] m_axi_Dout_AWPROT;
output  [3:0] m_axi_Dout_AWQOS;
output  [3:0] m_axi_Dout_AWREGION;
output  [C_M_AXI_DOUT_AWUSER_WIDTH - 1:0] m_axi_Dout_AWUSER;
output   m_axi_Dout_WVALID;
input   m_axi_Dout_WREADY;
output  [C_M_AXI_DOUT_DATA_WIDTH - 1:0] m_axi_Dout_WDATA;
output  [C_M_AXI_DOUT_WSTRB_WIDTH - 1:0] m_axi_Dout_WSTRB;
output   m_axi_Dout_WLAST;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_WID;
output  [C_M_AXI_DOUT_WUSER_WIDTH - 1:0] m_axi_Dout_WUSER;
output   m_axi_Dout_ARVALID;
input   m_axi_Dout_ARREADY;
output  [C_M_AXI_DOUT_ADDR_WIDTH - 1:0] m_axi_Dout_ARADDR;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_ARID;
output  [7:0] m_axi_Dout_ARLEN;
output  [2:0] m_axi_Dout_ARSIZE;
output  [1:0] m_axi_Dout_ARBURST;
output  [1:0] m_axi_Dout_ARLOCK;
output  [3:0] m_axi_Dout_ARCACHE;
output  [2:0] m_axi_Dout_ARPROT;
output  [3:0] m_axi_Dout_ARQOS;
output  [3:0] m_axi_Dout_ARREGION;
output  [C_M_AXI_DOUT_ARUSER_WIDTH - 1:0] m_axi_Dout_ARUSER;
input   m_axi_Dout_RVALID;
output   m_axi_Dout_RREADY;
input  [C_M_AXI_DOUT_DATA_WIDTH - 1:0] m_axi_Dout_RDATA;
input   m_axi_Dout_RLAST;
input  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_RID;
input  [C_M_AXI_DOUT_RUSER_WIDTH - 1:0] m_axi_Dout_RUSER;
input  [1:0] m_axi_Dout_RRESP;
input   m_axi_Dout_BVALID;
output   m_axi_Dout_BREADY;
input  [1:0] m_axi_Dout_BRESP;
input  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_BID;
input  [C_M_AXI_DOUT_BUSER_WIDTH - 1:0] m_axi_Dout_BUSER;
input   s_axi_Din_AWVALID;
output   s_axi_Din_AWREADY;
input  [C_S_AXI_DIN_ADDR_WIDTH - 1:0] s_axi_Din_AWADDR;
input   s_axi_Din_WVALID;
output   s_axi_Din_WREADY;
input  [C_S_AXI_DIN_DATA_WIDTH - 1:0] s_axi_Din_WDATA;
input  [C_S_AXI_DIN_WSTRB_WIDTH - 1:0] s_axi_Din_WSTRB;
input   s_axi_Din_ARVALID;
output   s_axi_Din_ARREADY;
input  [C_S_AXI_DIN_ADDR_WIDTH - 1:0] s_axi_Din_ARADDR;
output   s_axi_Din_RVALID;
input   s_axi_Din_RREADY;
output  [C_S_AXI_DIN_DATA_WIDTH - 1:0] s_axi_Din_RDATA;
output  [1:0] s_axi_Din_RRESP;
output   s_axi_Din_BVALID;
input   s_axi_Din_BREADY;
output  [1:0] s_axi_Din_BRESP;
output   interrupt;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [255:0] self_i;
reg    self_o_ap_vld;
wire   [159:0] Controller_id;
wire   [159:0] Controller_iq;
wire   [95:0] i_reference_Ampere;
wire   [95:0] i_actual_Ampere;
wire   [31:0] V_dc_volts;
wire   [31:0] omega_el_rad_per_sec;
wire   [63:0] output_volts_d;
wire   [63:0] output_volts_q;
reg   [31:0] I_sum_d;
reg   [31:0] I_sum_q;
reg    Dout_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    Dout_blk_n_W;
wire    ap_CS_fsm_state23;
reg    Dout_blk_n_B;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
reg    Dout_AWVALID;
wire    Dout_AWREADY;
reg   [63:0] Dout_AWADDR;
reg    Dout_WVALID;
wire    Dout_WREADY;
reg   [31:0] Dout_WDATA;
wire    Dout_ARREADY;
wire    Dout_RVALID;
wire   [31:0] Dout_RDATA;
wire    Dout_RLAST;
wire   [0:0] Dout_RID;
wire   [0:0] Dout_RUSER;
wire   [1:0] Dout_RRESP;
wire    Dout_BVALID;
reg    Dout_BREADY;
wire   [1:0] Dout_BRESP;
wire   [0:0] Dout_BID;
wire   [0:0] Dout_BUSER;
wire   [31:0] grp_fu_297_p2;
reg   [31:0] reg_353;
wire    ap_CS_fsm_state4;
reg   [0:0] trunc_ln33_reg_1762;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_34_reg_1756;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_289_p2;
reg   [31:0] reg_362;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] reg_373;
wire   [31:0] grp_fu_301_p2;
reg   [31:0] reg_384;
reg   [31:0] omega_el_rad_per_sec_read_reg_1622;
reg   [31:0] V_dc_volts_read_reg_1629;
wire   [31:0] empty_fu_392_p1;
reg   [31:0] empty_reg_1634;
reg   [31:0] p_cast_reg_1639;
wire   [31:0] empty_49_fu_406_p1;
reg   [31:0] empty_49_reg_1644;
reg   [31:0] p_cast3_reg_1649;
reg   [255:0] self_read_reg_1655;
reg   [31:0] trunc_ln_reg_1660;
reg   [31:0] trunc_ln1_reg_1665;
wire   [31:0] trunc_ln60_fu_440_p1;
reg   [31:0] trunc_ln60_reg_1670;
wire   [31:0] trunc_ln61_fu_444_p1;
reg   [31:0] trunc_ln61_reg_1675;
reg   [31:0] trunc_ln4_reg_1680;
reg   [31:0] trunc_ln64_1_reg_1685;
wire   [0:0] icmp_ln23_2_fu_488_p2;
reg   [0:0] icmp_ln23_2_reg_1690;
wire   [0:0] icmp_ln23_3_fu_494_p2;
reg   [0:0] icmp_ln23_3_reg_1695;
wire   [0:0] icmp_ln23_4_fu_520_p2;
reg   [0:0] icmp_ln23_4_reg_1700;
wire   [0:0] icmp_ln23_5_fu_526_p2;
reg   [0:0] icmp_ln23_5_reg_1705;
reg   [31:0] trunc_ln7_reg_1710;
reg   [31:0] trunc_ln65_1_reg_1715;
wire   [0:0] icmp_ln23_8_fu_572_p2;
reg   [0:0] icmp_ln23_8_reg_1720;
wire   [0:0] icmp_ln23_9_fu_578_p2;
reg   [0:0] icmp_ln23_9_reg_1725;
wire   [0:0] icmp_ln23_10_fu_604_p2;
reg   [0:0] icmp_ln23_10_reg_1730;
wire   [0:0] icmp_ln23_11_fu_610_p2;
reg   [0:0] icmp_ln23_11_reg_1735;
reg   [0:0] tmp_33_reg_1740;
reg   [31:0] trunc_ln9_reg_1746;
reg   [31:0] trunc_ln2_reg_1751;
wire   [0:0] trunc_ln33_fu_652_p1;
reg   [31:0] trunc_ln20_2_reg_1768;
reg   [31:0] trunc_ln3_reg_1773;
reg   [31:0] trunc_ln20_1_reg_1778;
reg   [63:0] Dout_addr_reg_1783;
reg   [63:0] Dout_addr_1_reg_1789;
wire   [31:0] i_reference_Ampere_d_fu_726_p1;
wire   [31:0] i_reference_Ampere_q_fu_730_p1;
wire   [31:0] i_actual_Ampere_d_fu_734_p1;
wire   [31:0] i_actual_Ampere_q_fu_739_p1;
reg   [31:0] i_actual_Ampere_q_reg_1811;
wire   [31:0] config_fu_743_p1;
wire   [31:0] xor_ln25_fu_747_p2;
reg   [31:0] xor_ln25_reg_1822;
wire   [31:0] config_1_fu_752_p1;
wire   [31:0] bitcast_ln25_fu_756_p1;
wire   [31:0] config_2_fu_760_p1;
reg   [31:0] mul1_i_i_reg_1842;
wire   [31:0] bitcast_ln58_fu_764_p1;
wire    ap_CS_fsm_state6;
wire   [31:0] bitcast_ln59_fu_768_p1;
wire   [31:0] bitcast_ln60_fu_772_p1;
wire   [31:0] bitcast_ln61_fu_776_p1;
wire   [31:0] grp_fu_305_p2;
reg   [31:0] P_sum_d_reg_1867;
wire   [31:0] grp_fu_309_p2;
reg   [31:0] P_sum_q_reg_1872;
wire    ap_CS_fsm_state9;
wire   [0:0] or_ln35_1_fu_820_p2;
reg   [0:0] or_ln35_1_reg_1887;
wire   [0:0] or_ln35_3_fu_856_p2;
reg   [0:0] or_ln35_3_reg_1893;
wire   [31:0] bitcast_ln71_fu_862_p1;
wire   [31:0] bitcast_ln76_fu_866_p1;
wire   [0:0] grp_fu_313_p2;
reg   [0:0] tmp_7_reg_1909;
wire    ap_CS_fsm_state10;
wire   [0:0] grp_fu_318_p2;
reg   [0:0] fcmp_ln35_reg_1914;
wire   [0:0] grp_fu_323_p2;
reg   [0:0] fcmp_ln35_reg_1919;
wire   [0:0] grp_fu_328_p2;
reg   [0:0] tmp_25_reg_1924;
wire   [0:0] grp_fu_333_p2;
reg   [0:0] fcmp_ln35_reg_1929;
wire   [0:0] grp_fu_338_p2;
reg   [0:0] fcmp_ln35_reg_1934;
reg   [31:0] u_dq_vor_Volts_reg_1939;
reg   [31:0] u_dq_vor_Volts_2_reg_1944;
wire   [31:0] decouple_voltage_3_fu_870_p3;
reg   [31:0] decouple_voltage_3_reg_1949;
wire   [31:0] decouple_voltage_2_fu_876_p3;
reg   [31:0] decouple_voltage_2_reg_1954;
wire   [31:0] bitcast_ln64_fu_882_p1;
reg   [31:0] bitcast_ln64_reg_1959;
wire    ap_CS_fsm_state13;
wire   [0:0] and_ln23_fu_926_p2;
reg   [0:0] and_ln23_reg_1967;
wire   [0:0] and_ln23_2_fu_936_p2;
reg   [0:0] and_ln23_2_reg_1973;
wire   [31:0] bitcast_ln65_fu_942_p1;
reg   [31:0] bitcast_ln65_reg_1979;
wire   [0:0] and_ln23_5_fu_986_p2;
reg   [0:0] and_ln23_5_reg_1987;
wire   [0:0] and_ln23_7_fu_996_p2;
reg   [0:0] and_ln23_7_reg_1993;
wire   [0:0] and_ln25_fu_1002_p2;
reg   [0:0] and_ln25_reg_1999;
wire    ap_CS_fsm_state14;
wire   [0:0] and_ln25_1_fu_1007_p2;
reg   [0:0] and_ln25_1_reg_2005;
wire   [31:0] bitcast_ln64_1_fu_1012_p1;
reg   [31:0] bitcast_ln64_1_reg_2011;
wire    ap_CS_fsm_state15;
wire   [31:0] select_ln25_fu_1016_p3;
wire   [31:0] bitcast_ln65_1_fu_1023_p1;
reg   [31:0] bitcast_ln65_1_reg_2022;
wire   [31:0] select_ln25_1_fu_1027_p3;
wire   [31:0] output_12_fu_1046_p3;
reg   [31:0] output_12_reg_2034;
wire    ap_CS_fsm_state16;
wire   [31:0] output_13_fu_1064_p3;
reg   [31:0] output_13_reg_2039;
reg   [0:0] tmp_2_reg_2044;
wire    ap_CS_fsm_state17;
reg   [0:0] tmp_5_reg_2049;
reg   [0:0] tmp_17_reg_2054;
reg   [0:0] tmp_19_reg_2059;
wire   [31:0] output_8_fu_1084_p3;
reg   [31:0] output_8_reg_2064;
wire    ap_CS_fsm_state18;
wire   [31:0] output_10_fu_1106_p3;
reg   [31:0] output_10_reg_2073;
wire   [0:0] or_ln35_fu_1143_p2;
reg   [0:0] or_ln35_reg_2082;
wire    ap_CS_fsm_state19;
wire   [0:0] or_ln35_2_fu_1178_p2;
reg   [0:0] or_ln35_2_reg_2089;
wire   [31:0] sign_fu_1220_p3;
wire   [31:0] sign_1_fu_1262_p3;
reg   [0:0] tmp_11_reg_2106;
wire   [0:0] icmp_ln31_fu_1307_p2;
reg   [0:0] icmp_ln31_reg_2111;
wire   [0:0] icmp_ln31_1_fu_1313_p2;
reg   [0:0] icmp_ln31_1_reg_2116;
wire   [0:0] icmp_ln31_2_fu_1319_p2;
reg   [0:0] icmp_ln31_2_reg_2121;
wire   [0:0] icmp_ln31_3_fu_1325_p2;
reg   [0:0] icmp_ln31_3_reg_2126;
wire   [31:0] sign_2_fu_1367_p3;
wire   [31:0] sign_3_fu_1409_p3;
wire   [0:0] grp_fu_348_p2;
reg   [0:0] tmp_27_reg_2141;
wire   [0:0] icmp_ln31_4_fu_1454_p2;
reg   [0:0] icmp_ln31_4_reg_2146;
wire   [0:0] icmp_ln31_5_fu_1460_p2;
reg   [0:0] icmp_ln31_5_reg_2151;
wire   [0:0] icmp_ln31_6_fu_1466_p2;
reg   [0:0] icmp_ln31_6_reg_2156;
wire   [0:0] icmp_ln31_7_fu_1472_p2;
reg   [0:0] icmp_ln31_7_reg_2161;
wire   [31:0] select_ln66_fu_1560_p3;
reg   [31:0] select_ln66_reg_2166;
wire    ap_CS_fsm_state21;
wire   [31:0] select_ln67_fu_1568_p3;
reg   [31:0] select_ln67_reg_2171;
reg   [255:0] newret_reg_2176;
wire    ap_CS_fsm_state22;
wire    grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_ready;
wire    grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done;
reg   [31:0] u_output_Volts_d_reg_2181;
reg   [31:0] u_output_Volts_q_reg_2186;
wire    grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start;
wire    grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_idle;
wire   [255:0] grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_0;
wire   [31:0] grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_1;
wire   [31:0] grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_2;
reg    grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg;
wire  signed [63:0] sext_ln37_fu_696_p1;
wire  signed [63:0] sext_ln38_fu_716_p1;
wire   [31:0] bitcast_ln37_fu_1588_p1;
wire   [31:0] bitcast_ln38_fu_1592_p1;
wire   [31:0] select_ln82_fu_1596_p3;
wire    ap_CS_fsm_state25;
wire   [31:0] select_ln82_1_fu_1603_p3;
reg   [31:0] grp_fu_289_p0;
reg   [31:0] grp_fu_289_p1;
reg   [31:0] grp_fu_293_p0;
reg   [31:0] grp_fu_293_p1;
reg   [31:0] grp_fu_297_p0;
reg   [31:0] grp_fu_297_p1;
reg   [31:0] grp_fu_301_p0;
reg   [31:0] grp_fu_301_p1;
reg   [31:0] grp_fu_305_p0;
reg   [31:0] grp_fu_305_p1;
reg   [31:0] grp_fu_309_p0;
reg   [31:0] grp_fu_309_p1;
reg   [31:0] grp_fu_313_p0;
reg   [31:0] grp_fu_313_p1;
reg   [31:0] grp_fu_318_p0;
reg   [31:0] grp_fu_318_p1;
reg   [31:0] grp_fu_323_p0;
reg   [31:0] grp_fu_323_p1;
reg   [31:0] grp_fu_328_p0;
reg   [31:0] grp_fu_328_p1;
reg   [31:0] grp_fu_333_p0;
reg   [31:0] grp_fu_338_p0;
wire   [7:0] tmp_1_fu_468_p4;
wire   [22:0] trunc_ln23_1_fu_478_p4;
wire   [7:0] tmp_4_fu_500_p4;
wire   [22:0] trunc_ln23_3_fu_510_p4;
wire   [7:0] tmp_16_fu_552_p4;
wire   [22:0] trunc_ln23_5_fu_562_p4;
wire   [7:0] tmp_18_fu_584_p4;
wire   [22:0] trunc_ln23_7_fu_594_p4;
wire   [61:0] trunc_ln5_fu_686_p4;
wire   [61:0] trunc_ln6_fu_706_p4;
wire   [31:0] bitcast_ln35_1_fu_790_p1;
wire   [7:0] tmp_6_fu_794_p4;
wire   [22:0] trunc_ln35_1_fu_804_p1;
wire   [0:0] icmp_ln35_3_fu_814_p2;
wire   [0:0] icmp_ln35_2_fu_808_p2;
wire   [31:0] bitcast_ln35_3_fu_826_p1;
wire   [7:0] tmp_24_fu_830_p4;
wire   [22:0] trunc_ln35_3_fu_840_p1;
wire   [0:0] icmp_ln35_7_fu_850_p2;
wire   [0:0] icmp_ln35_6_fu_844_p2;
wire   [31:0] bitcast_ln23_fu_886_p1;
wire   [7:0] tmp_fu_890_p4;
wire   [22:0] trunc_ln23_fu_900_p1;
wire   [0:0] icmp_ln23_1_fu_910_p2;
wire   [0:0] icmp_ln23_fu_904_p2;
wire   [0:0] or_ln23_fu_916_p2;
wire   [0:0] or_ln23_1_fu_922_p2;
wire   [0:0] or_ln23_2_fu_932_p2;
wire   [31:0] bitcast_ln23_1_fu_946_p1;
wire   [7:0] tmp_15_fu_950_p4;
wire   [22:0] trunc_ln23_2_fu_960_p1;
wire   [0:0] icmp_ln23_7_fu_970_p2;
wire   [0:0] icmp_ln23_6_fu_964_p2;
wire   [0:0] or_ln23_3_fu_976_p2;
wire   [0:0] or_ln23_4_fu_982_p2;
wire   [0:0] or_ln23_5_fu_992_p2;
wire   [0:0] and_ln49_fu_1034_p2;
wire   [31:0] output_fu_1039_p3;
wire   [0:0] and_ln49_1_fu_1052_p2;
wire   [31:0] output_6_fu_1057_p3;
wire   [0:0] and_ln23_1_fu_1070_p2;
wire   [0:0] and_ln23_3_fu_1074_p2;
wire   [0:0] and_ln23_4_fu_1078_p2;
wire   [0:0] and_ln23_6_fu_1092_p2;
wire   [0:0] and_ln23_8_fu_1096_p2;
wire   [0:0] and_ln23_9_fu_1100_p2;
wire   [31:0] bitcast_ln35_fu_1114_p1;
wire   [7:0] tmp_9_fu_1117_p4;
wire   [22:0] trunc_ln35_fu_1127_p1;
wire   [0:0] icmp_ln35_1_fu_1137_p2;
wire   [0:0] icmp_ln35_fu_1131_p2;
wire   [31:0] bitcast_ln35_2_fu_1149_p1;
wire   [7:0] tmp_21_fu_1152_p4;
wire   [22:0] trunc_ln35_2_fu_1162_p1;
wire   [0:0] icmp_ln35_5_fu_1172_p2;
wire   [0:0] icmp_ln35_4_fu_1166_p2;
wire   [0:0] and_ln35_fu_1184_p2;
wire   [0:0] xor_ln35_fu_1197_p2;
wire   [0:0] xor_ln35_fu_1203_p2;
wire   [0:0] and_ln35_fu_1209_p2;
wire   [0:0] and_ln35_1_fu_1215_p2;
wire   [31:0] select_ln35_fu_1189_p3;
wire   [0:0] and_ln35_2_fu_1229_p2;
wire   [0:0] xor_ln35_fu_1241_p2;
wire   [0:0] xor_ln35_fu_1246_p2;
wire   [0:0] and_ln35_fu_1251_p2;
wire   [0:0] and_ln35_3_fu_1257_p2;
wire   [31:0] select_ln35_2_fu_1233_p3;
wire   [31:0] bitcast_ln31_fu_1271_p1;
wire   [31:0] bitcast_ln31_1_fu_1289_p1;
wire   [7:0] tmp_12_fu_1275_p4;
wire   [22:0] trunc_ln31_fu_1285_p1;
wire   [7:0] tmp_13_fu_1293_p4;
wire   [22:0] trunc_ln31_1_fu_1303_p1;
wire   [0:0] and_ln35_4_fu_1331_p2;
wire   [0:0] grp_fu_343_p2;
wire   [0:0] xor_ln35_fu_1344_p2;
wire   [0:0] xor_ln35_fu_1350_p2;
wire   [0:0] and_ln35_fu_1356_p2;
wire   [0:0] and_ln35_5_fu_1362_p2;
wire   [31:0] select_ln35_4_fu_1336_p3;
wire   [0:0] and_ln35_6_fu_1376_p2;
wire   [0:0] xor_ln35_fu_1388_p2;
wire   [0:0] xor_ln35_fu_1393_p2;
wire   [0:0] and_ln35_fu_1398_p2;
wire   [0:0] and_ln35_7_fu_1404_p2;
wire   [31:0] select_ln35_6_fu_1380_p3;
wire   [31:0] bitcast_ln31_2_fu_1418_p1;
wire   [31:0] bitcast_ln31_3_fu_1436_p1;
wire   [7:0] tmp_28_fu_1422_p4;
wire   [22:0] trunc_ln31_2_fu_1432_p1;
wire   [7:0] tmp_29_fu_1440_p4;
wire   [22:0] trunc_ln31_3_fu_1450_p1;
wire   [0:0] and_ln31_fu_1478_p2;
wire   [0:0] or_ln31_fu_1488_p2;
wire   [0:0] or_ln31_1_fu_1492_p2;
wire   [0:0] and_ln31_1_fu_1496_p2;
wire   [0:0] and_ln31_2_fu_1502_p2;
wire   [0:0] xor_ln31_fu_1482_p2;
wire   [0:0] and_ln31_4_fu_1514_p2;
wire   [0:0] or_ln31_2_fu_1524_p2;
wire   [0:0] or_ln31_3_fu_1528_p2;
wire   [0:0] and_ln31_5_fu_1532_p2;
wire   [0:0] and_ln31_6_fu_1538_p2;
wire   [0:0] xor_ln31_1_fu_1518_p2;
wire   [0:0] output_9_fu_1508_p2;
wire   [0:0] output_11_fu_1544_p2;
wire   [0:0] clamping_active_d_fu_1550_p2;
wire   [0:0] clamping_active_q_fu_1555_p2;
reg   [1:0] grp_fu_289_opcode;
reg    grp_fu_289_ce;
wire    ap_CS_fsm_state7;
reg   [1:0] grp_fu_293_opcode;
reg    grp_fu_293_ce;
reg    grp_fu_297_ce;
reg   [4:0] grp_fu_313_opcode;
reg   [4:0] grp_fu_318_opcode;
reg   [4:0] grp_fu_323_opcode;
reg   [4:0] grp_fu_328_opcode;
reg   [4:0] grp_fu_333_opcode;
reg   [4:0] grp_fu_338_opcode;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 I_sum_d = 32'd0;
#0 I_sum_q = 32'd0;
#0 grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg = 1'b0;
end

uz_FOC_sample_Din_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DIN_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DIN_DATA_WIDTH ))
Din_s_axi_U(
    .AWVALID(s_axi_Din_AWVALID),
    .AWREADY(s_axi_Din_AWREADY),
    .AWADDR(s_axi_Din_AWADDR),
    .WVALID(s_axi_Din_WVALID),
    .WREADY(s_axi_Din_WREADY),
    .WDATA(s_axi_Din_WDATA),
    .WSTRB(s_axi_Din_WSTRB),
    .ARVALID(s_axi_Din_ARVALID),
    .ARREADY(s_axi_Din_ARREADY),
    .ARADDR(s_axi_Din_ARADDR),
    .RVALID(s_axi_Din_RVALID),
    .RREADY(s_axi_Din_RREADY),
    .RDATA(s_axi_Din_RDATA),
    .RRESP(s_axi_Din_RRESP),
    .BVALID(s_axi_Din_BVALID),
    .BREADY(s_axi_Din_BREADY),
    .BRESP(s_axi_Din_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .i_reference_Ampere(i_reference_Ampere),
    .self_o(newret_reg_2176),
    .self_o_ap_vld(self_o_ap_vld),
    .self_i(self_i),
    .i_actual_Ampere(i_actual_Ampere),
    .V_dc_volts(V_dc_volts),
    .omega_el_rad_per_sec(omega_el_rad_per_sec),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .Controller_id(Controller_id),
    .Controller_iq(Controller_iq)
);

uz_FOC_sample_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .output_volts_d(output_volts_d),
    .output_volts_q(output_volts_q)
);

uz_FOC_sample_Dout_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DOUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DOUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DOUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DOUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DOUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DOUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DOUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DOUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DOUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DOUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DOUT_CACHE_VALUE ))
Dout_m_axi_U(
    .AWVALID(m_axi_Dout_AWVALID),
    .AWREADY(m_axi_Dout_AWREADY),
    .AWADDR(m_axi_Dout_AWADDR),
    .AWID(m_axi_Dout_AWID),
    .AWLEN(m_axi_Dout_AWLEN),
    .AWSIZE(m_axi_Dout_AWSIZE),
    .AWBURST(m_axi_Dout_AWBURST),
    .AWLOCK(m_axi_Dout_AWLOCK),
    .AWCACHE(m_axi_Dout_AWCACHE),
    .AWPROT(m_axi_Dout_AWPROT),
    .AWQOS(m_axi_Dout_AWQOS),
    .AWREGION(m_axi_Dout_AWREGION),
    .AWUSER(m_axi_Dout_AWUSER),
    .WVALID(m_axi_Dout_WVALID),
    .WREADY(m_axi_Dout_WREADY),
    .WDATA(m_axi_Dout_WDATA),
    .WSTRB(m_axi_Dout_WSTRB),
    .WLAST(m_axi_Dout_WLAST),
    .WID(m_axi_Dout_WID),
    .WUSER(m_axi_Dout_WUSER),
    .ARVALID(m_axi_Dout_ARVALID),
    .ARREADY(m_axi_Dout_ARREADY),
    .ARADDR(m_axi_Dout_ARADDR),
    .ARID(m_axi_Dout_ARID),
    .ARLEN(m_axi_Dout_ARLEN),
    .ARSIZE(m_axi_Dout_ARSIZE),
    .ARBURST(m_axi_Dout_ARBURST),
    .ARLOCK(m_axi_Dout_ARLOCK),
    .ARCACHE(m_axi_Dout_ARCACHE),
    .ARPROT(m_axi_Dout_ARPROT),
    .ARQOS(m_axi_Dout_ARQOS),
    .ARREGION(m_axi_Dout_ARREGION),
    .ARUSER(m_axi_Dout_ARUSER),
    .RVALID(m_axi_Dout_RVALID),
    .RREADY(m_axi_Dout_RREADY),
    .RDATA(m_axi_Dout_RDATA),
    .RLAST(m_axi_Dout_RLAST),
    .RID(m_axi_Dout_RID),
    .RUSER(m_axi_Dout_RUSER),
    .RRESP(m_axi_Dout_RRESP),
    .BVALID(m_axi_Dout_BVALID),
    .BREADY(m_axi_Dout_BREADY),
    .BRESP(m_axi_Dout_BRESP),
    .BID(m_axi_Dout_BID),
    .BUSER(m_axi_Dout_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(Dout_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(Dout_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(Dout_RDATA),
    .I_RID(Dout_RID),
    .I_RUSER(Dout_RUSER),
    .I_RRESP(Dout_RRESP),
    .I_RLAST(Dout_RLAST),
    .I_AWVALID(Dout_AWVALID),
    .I_AWREADY(Dout_AWREADY),
    .I_AWADDR(Dout_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(Dout_WVALID),
    .I_WREADY(Dout_WREADY),
    .I_WDATA(Dout_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(Dout_BVALID),
    .I_BREADY(Dout_BREADY),
    .I_BRESP(Dout_BRESP),
    .I_BID(Dout_BID),
    .I_BUSER(Dout_BUSER)
);

uz_FOC_sample_uz_FOC_SpaceVector_Limitation_1 grp_uz_FOC_SpaceVector_Limitation_1_fu_265(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start),
    .ap_done(grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done),
    .ap_idle(grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_idle),
    .ap_ready(grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_ready),
    .p_read(self_read_reg_1655),
    .u_input_Volts_0(reg_362),
    .u_input_Volts_1(reg_373),
    .V_dc_volts(V_dc_volts_read_reg_1629),
    .omega_el_rad_per_sec(omega_el_rad_per_sec_read_reg_1622),
    .i_actual_Ampere_1(i_actual_Ampere_q_reg_1811),
    .ap_return_0(grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_0),
    .ap_return_1(grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_1),
    .ap_return_2(grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_2)
);

uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_289_p0),
    .din1(grp_fu_289_p1),
    .opcode(grp_fu_289_opcode),
    .ce(grp_fu_289_ce),
    .dout(grp_fu_289_p2)
);

uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_293_p0),
    .din1(grp_fu_293_p1),
    .opcode(grp_fu_293_opcode),
    .ce(grp_fu_293_ce),
    .dout(grp_fu_293_p2)
);

uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(grp_fu_297_ce),
    .dout(grp_fu_297_p2)
);

uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U51(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_301_p0),
    .din1(grp_fu_301_p1),
    .ce(1'b1),
    .dout(grp_fu_301_p2)
);

uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U52(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_305_p0),
    .din1(grp_fu_305_p1),
    .ce(1'b1),
    .dout(grp_fu_305_p2)
);

uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U53(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_309_p0),
    .din1(grp_fu_309_p1),
    .ce(1'b1),
    .dout(grp_fu_309_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U54(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_313_p0),
    .din1(grp_fu_313_p1),
    .ce(1'b1),
    .opcode(grp_fu_313_opcode),
    .dout(grp_fu_313_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_318_p0),
    .din1(grp_fu_318_p1),
    .ce(1'b1),
    .opcode(grp_fu_318_opcode),
    .dout(grp_fu_318_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_323_p0),
    .din1(grp_fu_323_p1),
    .ce(1'b1),
    .opcode(grp_fu_323_opcode),
    .dout(grp_fu_323_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U57(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_328_p0),
    .din1(grp_fu_328_p1),
    .ce(1'b1),
    .opcode(grp_fu_328_opcode),
    .dout(grp_fu_328_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U58(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_333_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_333_opcode),
    .dout(grp_fu_333_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U59(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_338_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_338_opcode),
    .dout(grp_fu_338_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U60(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(output_10_reg_2073),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_343_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U61(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(output_10_reg_2073),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_348_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg <= 1'b1;
        end else if ((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_ready == 1'b1)) begin
            grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Dout_addr_1_reg_1789 <= sext_ln38_fu_716_p1;
        Dout_addr_reg_1783 <= sext_ln37_fu_696_p1;
        V_dc_volts_read_reg_1629 <= V_dc_volts;
        empty_49_reg_1644 <= empty_49_fu_406_p1;
        empty_reg_1634 <= empty_fu_392_p1;
        icmp_ln23_10_reg_1730 <= icmp_ln23_10_fu_604_p2;
        icmp_ln23_11_reg_1735 <= icmp_ln23_11_fu_610_p2;
        icmp_ln23_2_reg_1690 <= icmp_ln23_2_fu_488_p2;
        icmp_ln23_3_reg_1695 <= icmp_ln23_3_fu_494_p2;
        icmp_ln23_4_reg_1700 <= icmp_ln23_4_fu_520_p2;
        icmp_ln23_5_reg_1705 <= icmp_ln23_5_fu_526_p2;
        icmp_ln23_8_reg_1720 <= icmp_ln23_8_fu_572_p2;
        icmp_ln23_9_reg_1725 <= icmp_ln23_9_fu_578_p2;
        omega_el_rad_per_sec_read_reg_1622 <= omega_el_rad_per_sec;
        p_cast3_reg_1649 <= {{i_actual_Ampere[63:32]}};
        p_cast_reg_1639 <= {{i_reference_Ampere[63:32]}};
        self_read_reg_1655 <= self_i;
        tmp_33_reg_1740 <= self_i[32'd16];
        tmp_34_reg_1756 <= self_i[32'd8];
        trunc_ln1_reg_1665 <= {{Controller_iq[63:32]}};
        trunc_ln20_1_reg_1778 <= {{self_i[127:96]}};
        trunc_ln20_2_reg_1768 <= {{self_i[159:128]}};
        trunc_ln2_reg_1751 <= {{Controller_iq[95:64]}};
        trunc_ln33_reg_1762 <= trunc_ln33_fu_652_p1;
        trunc_ln3_reg_1773 <= {{self_i[95:64]}};
        trunc_ln4_reg_1680 <= {{Controller_id[127:96]}};
        trunc_ln60_reg_1670 <= trunc_ln60_fu_440_p1;
        trunc_ln61_reg_1675 <= trunc_ln61_fu_444_p1;
        trunc_ln64_1_reg_1685 <= {{Controller_id[159:128]}};
        trunc_ln65_1_reg_1715 <= {{Controller_iq[159:128]}};
        trunc_ln7_reg_1710 <= {{Controller_iq[127:96]}};
        trunc_ln9_reg_1746 <= {{Controller_id[95:64]}};
        trunc_ln_reg_1660 <= {{Controller_id[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        I_sum_d <= select_ln82_fu_1596_p3;
        I_sum_q <= select_ln82_1_fu_1603_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        P_sum_d_reg_1867 <= grp_fu_305_p2;
        P_sum_q_reg_1872 <= grp_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        and_ln23_2_reg_1973 <= and_ln23_2_fu_936_p2;
        and_ln23_5_reg_1987 <= and_ln23_5_fu_986_p2;
        and_ln23_7_reg_1993 <= and_ln23_7_fu_996_p2;
        and_ln23_reg_1967 <= and_ln23_fu_926_p2;
        bitcast_ln64_reg_1959 <= bitcast_ln64_fu_882_p1;
        bitcast_ln65_reg_1979 <= bitcast_ln65_fu_942_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        and_ln25_1_reg_2005 <= and_ln25_1_fu_1007_p2;
        and_ln25_reg_1999 <= and_ln25_fu_1002_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bitcast_ln64_1_reg_2011 <= bitcast_ln64_1_fu_1012_p1;
        bitcast_ln65_1_reg_2022 <= bitcast_ln65_1_fu_1023_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        decouple_voltage_2_reg_1954 <= decouple_voltage_2_fu_876_p3;
        decouple_voltage_3_reg_1949 <= decouple_voltage_3_fu_870_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fcmp_ln35_reg_1914 <= grp_fu_318_p2;
        fcmp_ln35_reg_1919 <= grp_fu_323_p2;
        fcmp_ln35_reg_1929 <= grp_fu_333_p2;
        fcmp_ln35_reg_1934 <= grp_fu_338_p2;
        tmp_25_reg_1924 <= grp_fu_328_p2;
        tmp_7_reg_1909 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2))) begin
        i_actual_Ampere_q_reg_1811 <= i_actual_Ampere_q_fu_739_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        icmp_ln31_1_reg_2116 <= icmp_ln31_1_fu_1313_p2;
        icmp_ln31_2_reg_2121 <= icmp_ln31_2_fu_1319_p2;
        icmp_ln31_3_reg_2126 <= icmp_ln31_3_fu_1325_p2;
        icmp_ln31_4_reg_2146 <= icmp_ln31_4_fu_1454_p2;
        icmp_ln31_5_reg_2151 <= icmp_ln31_5_fu_1460_p2;
        icmp_ln31_6_reg_2156 <= icmp_ln31_6_fu_1466_p2;
        icmp_ln31_7_reg_2161 <= icmp_ln31_7_fu_1472_p2;
        icmp_ln31_reg_2111 <= icmp_ln31_fu_1307_p2;
        tmp_11_reg_2106 <= grp_fu_328_p2;
        tmp_27_reg_2141 <= grp_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln33_reg_1762 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mul1_i_i_reg_1842 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        newret_reg_2176 <= grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_0;
        u_output_Volts_d_reg_2181 <= grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_1;
        u_output_Volts_q_reg_2186 <= grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        or_ln35_1_reg_1887 <= or_ln35_1_fu_820_p2;
        or_ln35_3_reg_1893 <= or_ln35_3_fu_856_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        or_ln35_2_reg_2089 <= or_ln35_2_fu_1178_p2;
        or_ln35_reg_2082 <= or_ln35_fu_1143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        output_10_reg_2073 <= output_10_fu_1106_p3;
        output_8_reg_2064 <= output_8_fu_1084_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_12_reg_2034 <= output_12_fu_1046_p3;
        output_13_reg_2039 <= output_13_fu_1064_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((trunc_ln33_reg_1762 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_353 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5) | ((trunc_ln33_reg_1762 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        reg_362 <= grp_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_373 <= grp_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        reg_384 <= grp_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        select_ln66_reg_2166 <= select_ln66_fu_1560_p3;
        select_ln67_reg_2171 <= select_ln67_fu_1568_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_17_reg_2054 <= grp_fu_323_p2;
        tmp_19_reg_2059 <= grp_fu_328_p2;
        tmp_2_reg_2044 <= grp_fu_313_p2;
        tmp_5_reg_2049 <= grp_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln33_reg_1762 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        u_dq_vor_Volts_2_reg_1944 <= grp_fu_309_p2;
        u_dq_vor_Volts_reg_1939 <= grp_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln33_reg_1762 == 1'd1) & (1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2))) begin
        xor_ln25_reg_1822 <= xor_ln25_fu_747_p2;
    end
end

always @ (*) begin
    if ((1'b1 == Dout_AWREADY)) begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            Dout_AWADDR = Dout_addr_1_reg_1789;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            Dout_AWADDR = Dout_addr_reg_1783;
        end else begin
            Dout_AWADDR = 'bx;
        end
    end else begin
        Dout_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2)))) begin
        Dout_AWVALID = 1'b1;
    end else begin
        Dout_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state28)))) begin
        Dout_BREADY = 1'b1;
    end else begin
        Dout_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        Dout_WDATA = bitcast_ln38_fu_1592_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        Dout_WDATA = bitcast_ln37_fu_1588_p1;
    end else begin
        Dout_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state23)))) begin
        Dout_WVALID = 1'b1;
    end else begin
        Dout_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        Dout_blk_n_AW = m_axi_Dout_AWREADY;
    end else begin
        Dout_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28))) begin
        Dout_blk_n_B = m_axi_Dout_BVALID;
    end else begin
        Dout_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        Dout_blk_n_W = m_axi_Dout_WREADY;
    end else begin
        Dout_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state23)) | ((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_289_ce = 1'b1;
    end else begin
        grp_fu_289_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state15)))) begin
        grp_fu_289_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9) | ((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((trunc_ln33_reg_1762 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        grp_fu_289_opcode = 2'd0;
    end else begin
        grp_fu_289_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_289_p0 = output_12_reg_2034;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_289_p0 = reg_362;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_289_p0 = I_sum_d;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_289_p0 = reg_353;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_289_p0 = i_reference_Ampere_d_fu_726_p1;
    end else begin
        grp_fu_289_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_289_p1 = select_ln66_reg_2166;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_289_p1 = decouple_voltage_2_reg_1954;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_289_p1 = select_ln25_fu_1016_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_289_p1 = P_sum_d_reg_1867;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_289_p1 = config_2_fu_760_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_289_p1 = i_actual_Ampere_d_fu_734_p1;
    end else begin
        grp_fu_289_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state23)) | ((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_293_ce = 1'b1;
    end else begin
        grp_fu_293_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state15)))) begin
        grp_fu_293_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9) | ((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state22)))) begin
        grp_fu_293_opcode = 2'd0;
    end else begin
        grp_fu_293_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_293_p0 = output_13_reg_2039;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_293_p0 = reg_373;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_293_p0 = I_sum_q;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_293_p0 = i_reference_Ampere_q_fu_730_p1;
    end else begin
        grp_fu_293_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_293_p1 = select_ln67_reg_2171;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_293_p1 = decouple_voltage_3_reg_1949;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_293_p1 = select_ln25_1_fu_1027_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_293_p1 = P_sum_q_reg_1872;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_293_p1 = i_actual_Ampere_q_fu_739_p1;
    end else begin
        grp_fu_293_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_297_ce = 1'b1;
    end else begin
        grp_fu_297_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_297_p0 = reg_353;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_297_p0 = reg_362;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_297_p0 = bitcast_ln25_fu_756_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_297_p0 = i_actual_Ampere_d_fu_734_p1;
    end else begin
        grp_fu_297_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_297_p1 = bitcast_ln71_fu_862_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_297_p1 = bitcast_ln58_fu_764_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_297_p1 = config_1_fu_752_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_297_p1 = config_fu_743_p1;
    end else begin
        grp_fu_297_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_301_p0 = reg_384;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_301_p0 = reg_373;
    end else begin
        grp_fu_301_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_301_p1 = bitcast_ln76_fu_866_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_301_p1 = bitcast_ln59_fu_768_p1;
    end else begin
        grp_fu_301_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_305_p0 = mul1_i_i_reg_1842;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_305_p0 = reg_362;
    end else begin
        grp_fu_305_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_305_p1 = omega_el_rad_per_sec_read_reg_1622;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_305_p1 = bitcast_ln60_fu_772_p1;
    end else begin
        grp_fu_305_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_309_p0 = reg_362;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_309_p0 = reg_373;
    end else begin
        grp_fu_309_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_309_p1 = omega_el_rad_per_sec_read_reg_1622;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_309_p1 = bitcast_ln61_fu_776_p1;
    end else begin
        grp_fu_309_p1 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_313_opcode = 5'd1;
    end else if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_313_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_313_opcode = 5'd2;
    end else if ((((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state19)) | ((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'd0 == and_ln25_reg_1999) & (1'b1 == ap_CS_fsm_state15)))) begin
        grp_fu_313_opcode = 5'd4;
    end else begin
        grp_fu_313_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_313_p0 = sign_fu_1220_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_313_p0 = output_8_reg_2064;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_313_p0 = reg_362;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_313_p0 = reg_353;
    end else begin
        grp_fu_313_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_313_p1 = sign_1_fu_1262_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_313_p1 = bitcast_ln64_1_reg_2011;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_313_p1 = bitcast_ln64_1_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_313_p1 = bitcast_ln64_fu_882_p1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_313_p1 = 32'd0;
    end else begin
        grp_fu_313_p1 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_318_opcode = 5'd1;
    end else if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_318_opcode = 5'd5;
    end else if (((1'd0 == and_ln25_1_reg_2005) & (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_318_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_318_opcode = 5'd2;
    end else if ((((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state19)) | ((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        grp_fu_318_opcode = 5'd8;
    end else begin
        grp_fu_318_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_318_p0 = sign_2_fu_1367_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_318_p0 = output_8_reg_2064;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_318_p0 = reg_362;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_318_p0 = reg_373;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_318_p0 = reg_353;
    end else begin
        grp_fu_318_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_318_p1 = sign_3_fu_1409_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_318_p1 = bitcast_ln64_reg_1959;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_318_p1 = bitcast_ln65_1_fu_1023_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_318_p1 = bitcast_ln65_fu_942_p1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_318_p1 = 32'd0;
    end else begin
        grp_fu_318_p1 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_323_opcode = 5'd3;
    end else if ((((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state19)) | ((tmp_34_reg_1756 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        grp_fu_323_opcode = 5'd1;
    end else begin
        grp_fu_323_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_323_p0 = output_8_reg_2064;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_323_p0 = reg_373;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_323_p0 = reg_353;
    end else begin
        grp_fu_323_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_323_p1 = bitcast_ln65_1_reg_2022;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_323_p1 = 32'd0;
    end else begin
        grp_fu_323_p1 = 'bx;
    end
end

always @ (*) begin
    if ((tmp_34_reg_1756 == 1'd0)) begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_fu_328_opcode = 5'd1;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            grp_fu_328_opcode = 5'd5;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_fu_328_opcode = 5'd4;
        end else begin
            grp_fu_328_opcode = 'bx;
        end
    end else begin
        grp_fu_328_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_328_p0 = output_8_reg_2064;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_328_p0 = reg_373;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_328_p0 = reg_384;
    end else begin
        grp_fu_328_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_328_p1 = bitcast_ln65_reg_1979;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_328_p1 = 32'd0;
    end else begin
        grp_fu_328_p1 = 'bx;
    end
end

always @ (*) begin
    if ((tmp_34_reg_1756 == 1'd0)) begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_fu_333_opcode = 5'd4;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_fu_333_opcode = 5'd8;
        end else begin
            grp_fu_333_opcode = 'bx;
        end
    end else begin
        grp_fu_333_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_333_p0 = output_10_reg_2073;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_333_p0 = reg_384;
    end else begin
        grp_fu_333_p0 = 'bx;
    end
end

always @ (*) begin
    if ((tmp_34_reg_1756 == 1'd0)) begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_fu_338_opcode = 5'd8;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_fu_338_opcode = 5'd1;
        end else begin
            grp_fu_338_opcode = 'bx;
        end
    end else begin
        grp_fu_338_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_338_p0 = output_10_reg_2073;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_338_p0 = reg_384;
    end else begin
        grp_fu_338_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state23))) begin
        self_o_ap_vld = 1'b1;
    end else begin
        self_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln23_1_fu_1070_p2 = (tmp_2_reg_2044 & and_ln23_reg_1967);

assign and_ln23_2_fu_936_p2 = (or_ln23_fu_916_p2 & or_ln23_2_fu_932_p2);

assign and_ln23_3_fu_1074_p2 = (tmp_5_reg_2049 & and_ln23_2_reg_1973);

assign and_ln23_4_fu_1078_p2 = (and_ln23_3_fu_1074_p2 & and_ln23_1_fu_1070_p2);

assign and_ln23_5_fu_986_p2 = (or_ln23_4_fu_982_p2 & or_ln23_3_fu_976_p2);

assign and_ln23_6_fu_1092_p2 = (tmp_17_reg_2054 & and_ln23_5_reg_1987);

assign and_ln23_7_fu_996_p2 = (or_ln23_5_fu_992_p2 & or_ln23_3_fu_976_p2);

assign and_ln23_8_fu_1096_p2 = (tmp_19_reg_2059 & and_ln23_7_reg_1993);

assign and_ln23_9_fu_1100_p2 = (and_ln23_8_fu_1096_p2 & and_ln23_6_fu_1092_p2);

assign and_ln23_fu_926_p2 = (or_ln23_fu_916_p2 & or_ln23_1_fu_922_p2);

assign and_ln25_1_fu_1007_p2 = (grp_fu_318_p2 & and_ln23_7_reg_1993);

assign and_ln25_fu_1002_p2 = (grp_fu_313_p2 & and_ln23_2_reg_1973);

assign and_ln31_1_fu_1496_p2 = (or_ln31_fu_1488_p2 & or_ln31_1_fu_1492_p2);

assign and_ln31_2_fu_1502_p2 = (grp_fu_313_p2 & and_ln31_1_fu_1496_p2);

assign and_ln31_4_fu_1514_p2 = (tmp_27_reg_2141 & or_ln35_2_reg_2089);

assign and_ln31_5_fu_1532_p2 = (or_ln31_3_fu_1528_p2 & or_ln31_2_fu_1524_p2);

assign and_ln31_6_fu_1538_p2 = (grp_fu_318_p2 & and_ln31_5_fu_1532_p2);

assign and_ln31_fu_1478_p2 = (tmp_11_reg_2106 & or_ln35_reg_2082);

assign and_ln35_1_fu_1215_p2 = (or_ln35_reg_2082 & and_ln35_fu_1209_p2);

assign and_ln35_2_fu_1229_p2 = (tmp_7_reg_1909 & or_ln35_1_reg_1887);

assign and_ln35_3_fu_1257_p2 = (or_ln35_1_reg_1887 & and_ln35_fu_1251_p2);

assign and_ln35_4_fu_1331_p2 = (or_ln35_2_reg_2089 & grp_fu_333_p2);

assign and_ln35_5_fu_1362_p2 = (or_ln35_2_reg_2089 & and_ln35_fu_1356_p2);

assign and_ln35_6_fu_1376_p2 = (tmp_25_reg_1924 & or_ln35_3_reg_1893);

assign and_ln35_7_fu_1404_p2 = (or_ln35_3_reg_1893 & and_ln35_fu_1398_p2);

assign and_ln35_fu_1184_p2 = (or_ln35_reg_2082 & grp_fu_313_p2);

assign and_ln35_fu_1209_p2 = (xor_ln35_fu_1203_p2 & xor_ln35_fu_1197_p2);

assign and_ln35_fu_1251_p2 = (xor_ln35_fu_1246_p2 & xor_ln35_fu_1241_p2);

assign and_ln35_fu_1356_p2 = (xor_ln35_fu_1350_p2 & xor_ln35_fu_1344_p2);

assign and_ln35_fu_1398_p2 = (xor_ln35_fu_1393_p2 & xor_ln35_fu_1388_p2);

assign and_ln49_1_fu_1052_p2 = (grp_fu_318_p2 & and_ln23_5_reg_1987);

assign and_ln49_fu_1034_p2 = (grp_fu_313_p2 & and_ln23_reg_1967);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln23_1_fu_946_p1 = reg_373;

assign bitcast_ln23_fu_886_p1 = reg_362;

assign bitcast_ln25_fu_756_p1 = xor_ln25_reg_1822;

assign bitcast_ln31_1_fu_1289_p1 = sign_1_fu_1262_p3;

assign bitcast_ln31_2_fu_1418_p1 = sign_2_fu_1367_p3;

assign bitcast_ln31_3_fu_1436_p1 = sign_3_fu_1409_p3;

assign bitcast_ln31_fu_1271_p1 = sign_fu_1220_p3;

assign bitcast_ln35_1_fu_790_p1 = reg_353;

assign bitcast_ln35_2_fu_1149_p1 = output_10_reg_2073;

assign bitcast_ln35_3_fu_826_p1 = reg_384;

assign bitcast_ln35_fu_1114_p1 = output_8_reg_2064;

assign bitcast_ln37_fu_1588_p1 = u_output_Volts_d_reg_2181;

assign bitcast_ln38_fu_1592_p1 = u_output_Volts_q_reg_2186;

assign bitcast_ln58_fu_764_p1 = trunc_ln_reg_1660;

assign bitcast_ln59_fu_768_p1 = trunc_ln1_reg_1665;

assign bitcast_ln60_fu_772_p1 = trunc_ln60_reg_1670;

assign bitcast_ln61_fu_776_p1 = trunc_ln61_reg_1675;

assign bitcast_ln64_1_fu_1012_p1 = trunc_ln64_1_reg_1685;

assign bitcast_ln64_fu_882_p1 = trunc_ln4_reg_1680;

assign bitcast_ln65_1_fu_1023_p1 = trunc_ln65_1_reg_1715;

assign bitcast_ln65_fu_942_p1 = trunc_ln7_reg_1710;

assign bitcast_ln71_fu_862_p1 = trunc_ln9_reg_1746;

assign bitcast_ln76_fu_866_p1 = trunc_ln2_reg_1751;

assign clamping_active_d_fu_1550_p2 = (tmp_33_reg_1740 | output_9_fu_1508_p2);

assign clamping_active_q_fu_1555_p2 = (tmp_33_reg_1740 | output_11_fu_1544_p2);

assign config_1_fu_752_p1 = trunc_ln20_1_reg_1778;

assign config_2_fu_760_p1 = trunc_ln20_2_reg_1768;

assign config_fu_743_p1 = trunc_ln3_reg_1773;

assign decouple_voltage_2_fu_876_p3 = ((trunc_ln33_reg_1762[0:0] === 1'b1) ? u_dq_vor_Volts_reg_1939 : 32'd0);

assign decouple_voltage_3_fu_870_p3 = ((trunc_ln33_reg_1762[0:0] === 1'b1) ? u_dq_vor_Volts_2_reg_1944 : 32'd0);

assign empty_49_fu_406_p1 = i_actual_Ampere[31:0];

assign empty_fu_392_p1 = i_reference_Ampere[31:0];

assign grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start = grp_uz_FOC_SpaceVector_Limitation_1_fu_265_ap_start_reg;

assign i_actual_Ampere_d_fu_734_p1 = empty_49_reg_1644;

assign i_actual_Ampere_q_fu_739_p1 = p_cast3_reg_1649;

assign i_reference_Ampere_d_fu_726_p1 = empty_reg_1634;

assign i_reference_Ampere_q_fu_730_p1 = p_cast_reg_1639;

assign icmp_ln23_10_fu_604_p2 = ((tmp_18_fu_584_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_11_fu_610_p2 = ((trunc_ln23_7_fu_594_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_910_p2 = ((trunc_ln23_fu_900_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_488_p2 = ((tmp_1_fu_468_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_3_fu_494_p2 = ((trunc_ln23_1_fu_478_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_4_fu_520_p2 = ((tmp_4_fu_500_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_5_fu_526_p2 = ((trunc_ln23_3_fu_510_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_6_fu_964_p2 = ((tmp_15_fu_950_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_7_fu_970_p2 = ((trunc_ln23_2_fu_960_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_8_fu_572_p2 = ((tmp_16_fu_552_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_9_fu_578_p2 = ((trunc_ln23_5_fu_562_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_904_p2 = ((tmp_fu_890_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln31_1_fu_1313_p2 = ((trunc_ln31_fu_1285_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_2_fu_1319_p2 = ((tmp_13_fu_1293_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln31_3_fu_1325_p2 = ((trunc_ln31_1_fu_1303_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_4_fu_1454_p2 = ((tmp_28_fu_1422_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln31_5_fu_1460_p2 = ((trunc_ln31_2_fu_1432_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_6_fu_1466_p2 = ((tmp_29_fu_1440_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln31_7_fu_1472_p2 = ((trunc_ln31_3_fu_1450_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_1307_p2 = ((tmp_12_fu_1275_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_1137_p2 = ((trunc_ln35_fu_1127_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_2_fu_808_p2 = ((tmp_6_fu_794_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_3_fu_814_p2 = ((trunc_ln35_1_fu_804_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_4_fu_1166_p2 = ((tmp_21_fu_1152_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_5_fu_1172_p2 = ((trunc_ln35_2_fu_1162_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_6_fu_844_p2 = ((tmp_24_fu_830_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_7_fu_850_p2 = ((trunc_ln35_3_fu_840_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_1131_p2 = ((tmp_9_fu_1117_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln23_1_fu_922_p2 = (icmp_ln23_3_reg_1695 | icmp_ln23_2_reg_1690);

assign or_ln23_2_fu_932_p2 = (icmp_ln23_5_reg_1705 | icmp_ln23_4_reg_1700);

assign or_ln23_3_fu_976_p2 = (icmp_ln23_7_fu_970_p2 | icmp_ln23_6_fu_964_p2);

assign or_ln23_4_fu_982_p2 = (icmp_ln23_9_reg_1725 | icmp_ln23_8_reg_1720);

assign or_ln23_5_fu_992_p2 = (icmp_ln23_11_reg_1735 | icmp_ln23_10_reg_1730);

assign or_ln23_fu_916_p2 = (icmp_ln23_fu_904_p2 | icmp_ln23_1_fu_910_p2);

assign or_ln31_1_fu_1492_p2 = (icmp_ln31_3_reg_2126 | icmp_ln31_2_reg_2121);

assign or_ln31_2_fu_1524_p2 = (icmp_ln31_5_reg_2151 | icmp_ln31_4_reg_2146);

assign or_ln31_3_fu_1528_p2 = (icmp_ln31_7_reg_2161 | icmp_ln31_6_reg_2156);

assign or_ln31_fu_1488_p2 = (icmp_ln31_reg_2111 | icmp_ln31_1_reg_2116);

assign or_ln35_1_fu_820_p2 = (icmp_ln35_3_fu_814_p2 | icmp_ln35_2_fu_808_p2);

assign or_ln35_2_fu_1178_p2 = (icmp_ln35_5_fu_1172_p2 | icmp_ln35_4_fu_1166_p2);

assign or_ln35_3_fu_856_p2 = (icmp_ln35_7_fu_850_p2 | icmp_ln35_6_fu_844_p2);

assign or_ln35_fu_1143_p2 = (icmp_ln35_fu_1131_p2 | icmp_ln35_1_fu_1137_p2);

assign output_10_fu_1106_p3 = ((and_ln23_9_fu_1100_p2[0:0] === 1'b1) ? 32'd0 : grp_fu_293_p2);

assign output_11_fu_1544_p2 = (xor_ln31_1_fu_1518_p2 & and_ln31_6_fu_1538_p2);

assign output_12_fu_1046_p3 = ((and_ln25_reg_1999[0:0] === 1'b1) ? bitcast_ln64_reg_1959 : output_fu_1039_p3);

assign output_13_fu_1064_p3 = ((and_ln25_1_reg_2005[0:0] === 1'b1) ? bitcast_ln65_reg_1979 : output_6_fu_1057_p3);

assign output_6_fu_1057_p3 = ((and_ln49_1_fu_1052_p2[0:0] === 1'b1) ? bitcast_ln65_1_reg_2022 : reg_373);

assign output_8_fu_1084_p3 = ((and_ln23_4_fu_1078_p2[0:0] === 1'b1) ? 32'd0 : grp_fu_289_p2);

assign output_9_fu_1508_p2 = (xor_ln31_fu_1482_p2 & and_ln31_2_fu_1502_p2);

assign output_fu_1039_p3 = ((and_ln49_fu_1034_p2[0:0] === 1'b1) ? bitcast_ln64_1_reg_2011 : reg_362);

assign select_ln25_1_fu_1027_p3 = ((and_ln25_1_reg_2005[0:0] === 1'b1) ? bitcast_ln65_reg_1979 : bitcast_ln65_1_fu_1023_p1);

assign select_ln25_fu_1016_p3 = ((and_ln25_reg_1999[0:0] === 1'b1) ? bitcast_ln64_reg_1959 : bitcast_ln64_1_fu_1012_p1);

assign select_ln35_2_fu_1233_p3 = ((and_ln35_2_fu_1229_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln35_4_fu_1336_p3 = ((and_ln35_4_fu_1331_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln35_6_fu_1380_p3 = ((and_ln35_6_fu_1376_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln35_fu_1189_p3 = ((and_ln35_fu_1184_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln66_fu_1560_p3 = ((clamping_active_d_fu_1550_p2[0:0] === 1'b1) ? 32'd0 : reg_353);

assign select_ln67_fu_1568_p3 = ((clamping_active_q_fu_1555_p2[0:0] === 1'b1) ? 32'd0 : reg_384);

assign select_ln82_1_fu_1603_p3 = ((tmp_34_reg_1756[0:0] === 1'b1) ? 32'd0 : grp_fu_293_p2);

assign select_ln82_fu_1596_p3 = ((tmp_34_reg_1756[0:0] === 1'b1) ? 32'd0 : grp_fu_289_p2);

assign sext_ln37_fu_696_p1 = $signed(trunc_ln5_fu_686_p4);

assign sext_ln38_fu_716_p1 = $signed(trunc_ln6_fu_706_p4);

assign sign_1_fu_1262_p3 = ((and_ln35_3_fu_1257_p2[0:0] === 1'b1) ? select_ln35_2_fu_1233_p3 : 32'd0);

assign sign_2_fu_1367_p3 = ((and_ln35_5_fu_1362_p2[0:0] === 1'b1) ? select_ln35_4_fu_1336_p3 : 32'd0);

assign sign_3_fu_1409_p3 = ((and_ln35_7_fu_1404_p2[0:0] === 1'b1) ? select_ln35_6_fu_1380_p3 : 32'd0);

assign sign_fu_1220_p3 = ((and_ln35_1_fu_1215_p2[0:0] === 1'b1) ? select_ln35_fu_1189_p3 : 32'd0);

assign tmp_12_fu_1275_p4 = {{bitcast_ln31_fu_1271_p1[30:23]}};

assign tmp_13_fu_1293_p4 = {{bitcast_ln31_1_fu_1289_p1[30:23]}};

assign tmp_15_fu_950_p4 = {{bitcast_ln23_1_fu_946_p1[30:23]}};

assign tmp_16_fu_552_p4 = {{Controller_iq[158:151]}};

assign tmp_18_fu_584_p4 = {{Controller_iq[126:119]}};

assign tmp_1_fu_468_p4 = {{Controller_id[158:151]}};

assign tmp_21_fu_1152_p4 = {{bitcast_ln35_2_fu_1149_p1[30:23]}};

assign tmp_24_fu_830_p4 = {{bitcast_ln35_3_fu_826_p1[30:23]}};

assign tmp_28_fu_1422_p4 = {{bitcast_ln31_2_fu_1418_p1[30:23]}};

assign tmp_29_fu_1440_p4 = {{bitcast_ln31_3_fu_1436_p1[30:23]}};

assign tmp_4_fu_500_p4 = {{Controller_id[126:119]}};

assign tmp_6_fu_794_p4 = {{bitcast_ln35_1_fu_790_p1[30:23]}};

assign tmp_9_fu_1117_p4 = {{bitcast_ln35_fu_1114_p1[30:23]}};

assign tmp_fu_890_p4 = {{bitcast_ln23_fu_886_p1[30:23]}};

assign trunc_ln23_1_fu_478_p4 = {{Controller_id[150:128]}};

assign trunc_ln23_2_fu_960_p1 = bitcast_ln23_1_fu_946_p1[22:0];

assign trunc_ln23_3_fu_510_p4 = {{Controller_id[118:96]}};

assign trunc_ln23_5_fu_562_p4 = {{Controller_iq[150:128]}};

assign trunc_ln23_7_fu_594_p4 = {{Controller_iq[118:96]}};

assign trunc_ln23_fu_900_p1 = bitcast_ln23_fu_886_p1[22:0];

assign trunc_ln31_1_fu_1303_p1 = bitcast_ln31_1_fu_1289_p1[22:0];

assign trunc_ln31_2_fu_1432_p1 = bitcast_ln31_2_fu_1418_p1[22:0];

assign trunc_ln31_3_fu_1450_p1 = bitcast_ln31_3_fu_1436_p1[22:0];

assign trunc_ln31_fu_1285_p1 = bitcast_ln31_fu_1271_p1[22:0];

assign trunc_ln33_fu_652_p1 = self_i[0:0];

assign trunc_ln35_1_fu_804_p1 = bitcast_ln35_1_fu_790_p1[22:0];

assign trunc_ln35_2_fu_1162_p1 = bitcast_ln35_2_fu_1149_p1[22:0];

assign trunc_ln35_3_fu_840_p1 = bitcast_ln35_3_fu_826_p1[22:0];

assign trunc_ln35_fu_1127_p1 = bitcast_ln35_fu_1114_p1[22:0];

assign trunc_ln5_fu_686_p4 = {{output_volts_d[63:2]}};

assign trunc_ln60_fu_440_p1 = Controller_id[31:0];

assign trunc_ln61_fu_444_p1 = Controller_iq[31:0];

assign trunc_ln6_fu_706_p4 = {{output_volts_q[63:2]}};

assign xor_ln25_fu_747_p2 = (p_cast3_reg_1649 ^ 32'd2147483648);

assign xor_ln31_1_fu_1518_p2 = (1'd1 ^ and_ln31_4_fu_1514_p2);

assign xor_ln31_fu_1482_p2 = (1'd1 ^ and_ln31_fu_1478_p2);

assign xor_ln35_fu_1197_p2 = (grp_fu_318_p2 ^ 1'd1);

assign xor_ln35_fu_1203_p2 = (grp_fu_323_p2 ^ 1'd1);

assign xor_ln35_fu_1241_p2 = (fcmp_ln35_reg_1914 ^ 1'd1);

assign xor_ln35_fu_1246_p2 = (fcmp_ln35_reg_1919 ^ 1'd1);

assign xor_ln35_fu_1344_p2 = (grp_fu_338_p2 ^ 1'd1);

assign xor_ln35_fu_1350_p2 = (grp_fu_343_p2 ^ 1'd1);

assign xor_ln35_fu_1388_p2 = (fcmp_ln35_reg_1929 ^ 1'd1);

assign xor_ln35_fu_1393_p2 = (fcmp_ln35_reg_1934 ^ 1'd1);

endmodule //uz_FOC_sample
