// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_FOC_uz_FOC,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.485400,HLS_SYN_LAT=24,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1579,HLS_SYN_LUT=1842,HLS_VERSION=2022_2}" *)

module uz_FOC (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        actual_id,
        actual_iq,
        reset_PL,
        ref_ud,
        ref_uq,
        test_out_pl,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 47'd1;
parameter    ap_ST_fsm_state2 = 47'd2;
parameter    ap_ST_fsm_state3 = 47'd4;
parameter    ap_ST_fsm_state4 = 47'd8;
parameter    ap_ST_fsm_state5 = 47'd16;
parameter    ap_ST_fsm_state6 = 47'd32;
parameter    ap_ST_fsm_state7 = 47'd64;
parameter    ap_ST_fsm_state8 = 47'd128;
parameter    ap_ST_fsm_state9 = 47'd256;
parameter    ap_ST_fsm_state10 = 47'd512;
parameter    ap_ST_fsm_state11 = 47'd1024;
parameter    ap_ST_fsm_state12 = 47'd2048;
parameter    ap_ST_fsm_state13 = 47'd4096;
parameter    ap_ST_fsm_state14 = 47'd8192;
parameter    ap_ST_fsm_state15 = 47'd16384;
parameter    ap_ST_fsm_state16 = 47'd32768;
parameter    ap_ST_fsm_state17 = 47'd65536;
parameter    ap_ST_fsm_state18 = 47'd131072;
parameter    ap_ST_fsm_state19 = 47'd262144;
parameter    ap_ST_fsm_state20 = 47'd524288;
parameter    ap_ST_fsm_state21 = 47'd1048576;
parameter    ap_ST_fsm_state22 = 47'd2097152;
parameter    ap_ST_fsm_state23 = 47'd4194304;
parameter    ap_ST_fsm_state24 = 47'd8388608;
parameter    ap_ST_fsm_state25 = 47'd16777216;
parameter    ap_ST_fsm_state26 = 47'd33554432;
parameter    ap_ST_fsm_state27 = 47'd67108864;
parameter    ap_ST_fsm_state28 = 47'd134217728;
parameter    ap_ST_fsm_state29 = 47'd268435456;
parameter    ap_ST_fsm_state30 = 47'd536870912;
parameter    ap_ST_fsm_state31 = 47'd1073741824;
parameter    ap_ST_fsm_state32 = 47'd2147483648;
parameter    ap_ST_fsm_state33 = 47'd4294967296;
parameter    ap_ST_fsm_state34 = 47'd8589934592;
parameter    ap_ST_fsm_state35 = 47'd17179869184;
parameter    ap_ST_fsm_state36 = 47'd34359738368;
parameter    ap_ST_fsm_state37 = 47'd68719476736;
parameter    ap_ST_fsm_state38 = 47'd137438953472;
parameter    ap_ST_fsm_state39 = 47'd274877906944;
parameter    ap_ST_fsm_state40 = 47'd549755813888;
parameter    ap_ST_fsm_state41 = 47'd1099511627776;
parameter    ap_ST_fsm_state42 = 47'd2199023255552;
parameter    ap_ST_fsm_state43 = 47'd4398046511104;
parameter    ap_ST_fsm_state44 = 47'd8796093022208;
parameter    ap_ST_fsm_state45 = 47'd17592186044416;
parameter    ap_ST_fsm_state46 = 47'd35184372088832;
parameter    ap_ST_fsm_state47 = 47'd70368744177664;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] actual_id;
input  [31:0] actual_iq;
input   reset_PL;
output  [31:0] ref_ud;
output  [31:0] ref_uq;
output  [31:0] test_out_pl;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ref_ud;
reg[31:0] ref_uq;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [46:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] sampletime;
wire   [31:0] set_i_d;
wire   [31:0] set_i_q;
wire   [31:0] KP_d;
wire   [31:0] KI_d;
wire   [31:0] KP_q;
wire   [31:0] KI_q;
wire    reset_PS;
wire   [31:0] limit;
reg   [31:0] out_KP_d;
reg    out_KP_d_ap_vld;
reg    out_idref_ap_vld;
wire    out_status;
reg    out_status_ap_vld;
reg   [31:0] I_sum_d;
reg   [31:0] I_sum_q;
wire   [31:0] grp_fu_263_p2;
reg   [31:0] reg_303;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state41;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] reg_311;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state36;
wire   [31:0] grp_fu_274_p2;
reg   [31:0] reg_316;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] reg_321;
wire    ap_CS_fsm_state16;
wire   [0:0] and_ln46_1_fu_438_p2;
wire    ap_CS_fsm_state32;
wire   [0:0] and_ln46_3_fu_516_p2;
reg   [31:0] limit_read_reg_553;
reg   [31:0] KI_q_read_reg_559;
reg   [31:0] KP_q_read_reg_564;
reg   [31:0] KI_d_read_reg_569;
reg   [31:0] KP_d_read_reg_574;
reg   [31:0] set_i_q_read_reg_579;
reg   [31:0] sampletime_read_reg_589;
wire   [31:0] bitcast_ln28_fu_333_p1;
reg   [31:0] bitcast_ln28_reg_607;
wire   [31:0] bitcast_ln29_fu_338_p1;
reg   [31:0] bitcast_ln29_reg_612;
wire   [31:0] bitcast_ln46_fu_378_p1;
reg   [31:0] bitcast_ln46_reg_620;
wire   [0:0] or_ln46_fu_408_p2;
reg   [0:0] or_ln46_reg_627;
wire   [0:0] icmp_ln46_3_fu_420_p2;
reg   [0:0] icmp_ln46_3_reg_632;
wire   [0:0] or_ln46_1_fu_426_p2;
reg   [0:0] or_ln46_1_reg_638;
reg   [0:0] and_ln46_1_reg_643;
wire   [31:0] bitcast_ln48_fu_444_p1;
wire   [0:0] grp_fu_297_p2;
reg   [0:0] icmp_ln48_reg_652;
wire   [0:0] or_ln46_2_fu_506_p2;
reg   [0:0] or_ln46_2_reg_663;
wire    ap_CS_fsm_state31;
reg   [0:0] and_ln46_3_reg_669;
wire   [31:0] bitcast_ln48_1_fu_522_p1;
reg   [0:0] icmp_ln48_1_reg_678;
wire    ap_CS_fsm_state46;
reg   [31:0] phi_ln31_reg_238;
wire   [0:0] reset_fu_327_p2;
reg   [0:0] empty_reg_249;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state26;
reg   [31:0] ref_ud_preg;
wire   [31:0] bitcast_ln45_fu_359_p1;
wire    ap_CS_fsm_state17;
wire   [0:0] and_ln48_1_fu_458_p2;
reg   [31:0] ref_uq_preg;
wire   [31:0] bitcast_ln45_1_fu_475_p1;
wire    ap_CS_fsm_state33;
wire   [0:0] and_ln48_3_fu_536_p2;
wire    ap_CS_fsm_state47;
reg   [31:0] grp_fu_263_p0;
reg   [31:0] grp_fu_263_p1;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state42;
reg   [31:0] grp_fu_270_p0;
reg   [31:0] grp_fu_270_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state22;
reg   [31:0] grp_fu_274_p1;
reg   [31:0] grp_fu_278_p1;
wire    ap_CS_fsm_state15;
reg   [31:0] grp_fu_282_p0;
wire   [7:0] grp_fu_287_p4;
wire   [0:0] reset_fu_327_p0;
wire   [0:0] reset_fu_327_p1;
wire   [7:0] tmp_fu_364_p4;
wire   [22:0] trunc_ln46_fu_374_p1;
wire   [0:0] icmp_ln46_1_fu_402_p2;
wire   [0:0] icmp_ln46_fu_396_p2;
wire   [7:0] tmp_1_fu_382_p4;
wire   [22:0] trunc_ln46_1_fu_392_p1;
wire   [0:0] icmp_ln46_2_fu_414_p2;
wire   [0:0] and_ln46_fu_432_p2;
wire   [0:0] grp_fu_278_p2;
wire   [0:0] or_ln48_fu_449_p2;
wire   [0:0] and_ln48_fu_453_p2;
wire   [7:0] tmp_6_fu_480_p4;
wire   [22:0] trunc_ln46_2_fu_490_p1;
wire   [0:0] icmp_ln46_5_fu_500_p2;
wire   [0:0] icmp_ln46_4_fu_494_p2;
wire   [0:0] and_ln46_2_fu_512_p2;
wire   [0:0] or_ln48_1_fu_527_p2;
wire   [0:0] and_ln48_2_fu_531_p2;
reg   [1:0] grp_fu_263_opcode;
reg   [4:0] grp_fu_278_opcode;
reg   [46:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 47'd1;
#0 I_sum_d = 32'd0;
#0 I_sum_q = 32'd0;
#0 ref_ud_preg = 32'd0;
#0 ref_uq_preg = 32'd0;
end

uz_FOC_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .sampletime(sampletime),
    .set_i_d(set_i_d),
    .set_i_q(set_i_q),
    .KP_d(KP_d),
    .KI_d(KI_d),
    .KP_q(KP_q),
    .KI_q(KI_q),
    .reset_PS(reset_PS),
    .limit(limit),
    .out_KP_d(out_KP_d),
    .out_KP_d_ap_vld(out_KP_d_ap_vld),
    .out_idref(bitcast_ln29_reg_612),
    .out_idref_ap_vld(out_idref_ap_vld),
    .out_status(out_status),
    .out_status_ap_vld(out_status_ap_vld)
);

uz_FOC_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_263_p0),
    .din1(grp_fu_263_p1),
    .opcode(grp_fu_263_opcode),
    .ce(1'b1),
    .dout(grp_fu_263_p2)
);

uz_FOC_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_270_p0),
    .din1(grp_fu_270_p1),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

uz_FOC_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_303),
    .din1(grp_fu_274_p1),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

uz_FOC_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_303),
    .din1(grp_fu_278_p1),
    .ce(1'b1),
    .opcode(grp_fu_278_opcode),
    .dout(grp_fu_278_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ref_ud_preg <= 32'd0;
    end else begin
        if (((1'd1 == and_ln46_1_reg_643) & (1'b1 == ap_CS_fsm_state17))) begin
            ref_ud_preg <= bitcast_ln46_reg_620;
        end else if (((1'd1 == and_ln48_1_fu_458_p2) & (1'b1 == ap_CS_fsm_state17) & (1'd0 == and_ln46_1_reg_643))) begin
            ref_ud_preg <= reg_321;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ref_ud_preg <= bitcast_ln45_fu_359_p1;
        end else if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ref_ud_preg <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ref_uq_preg <= 32'd0;
    end else begin
        if (((1'd1 == and_ln48_3_fu_536_p2) & (1'b1 == ap_CS_fsm_state33) & (1'd0 == and_ln46_3_reg_669))) begin
            ref_uq_preg <= reg_321;
        end else if (((1'd1 == and_ln46_3_fu_516_p2) & (1'b1 == ap_CS_fsm_state32))) begin
            ref_uq_preg <= bitcast_ln46_reg_620;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ref_uq_preg <= bitcast_ln45_1_fu_475_p1;
        end else if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ref_uq_preg <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        I_sum_d <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        I_sum_d <= grp_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        I_sum_q <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        I_sum_q <= grp_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        empty_reg_249 <= 1'd0;
    end else if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_249 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        phi_ln31_reg_238 <= grp_fu_263_p2;
    end else if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln31_reg_238 <= 32'd1065353216;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        KI_d_read_reg_569 <= KI_d;
        KI_q_read_reg_559 <= KI_q;
        KP_d_read_reg_574 <= KP_d;
        KP_q_read_reg_564 <= KP_q;
        bitcast_ln28_reg_607 <= bitcast_ln28_fu_333_p1;
        bitcast_ln29_reg_612 <= bitcast_ln29_fu_338_p1;
        limit_read_reg_553 <= limit;
        sampletime_read_reg_589 <= sampletime;
        set_i_q_read_reg_579 <= set_i_q;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        and_ln46_1_reg_643 <= and_ln46_1_fu_438_p2;
        bitcast_ln46_reg_620 <= bitcast_ln46_fu_378_p1;
        icmp_ln46_3_reg_632 <= icmp_ln46_3_fu_420_p2;
        or_ln46_1_reg_638 <= or_ln46_1_fu_426_p2;
        or_ln46_reg_627 <= or_ln46_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        and_ln46_3_reg_669 <= and_ln46_3_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (1'd0 == and_ln46_3_fu_516_p2))) begin
        icmp_ln48_1_reg_678 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == and_ln46_1_fu_438_p2))) begin
        icmp_ln48_reg_652 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        or_ln46_2_reg_663 <= or_ln46_2_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_303 <= grp_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_311 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_316 <= grp_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (1'd0 == and_ln46_3_fu_516_p2)) | ((1'b1 == ap_CS_fsm_state16) & (1'd0 == and_ln46_1_fu_438_p2)))) begin
        reg_321 <= grp_fu_282_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_263_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_263_opcode = 2'd0;
    end else begin
        grp_fu_263_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_263_p0 = reg_303;
    end else if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_263_p0 = I_sum_q;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_263_p0 = set_i_q_read_reg_579;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_263_p0 = I_sum_d;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_263_p0 = set_i_d;
    end else begin
        grp_fu_263_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_263_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_263_p1 = actual_iq;
    end else if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_263_p1 = reg_311;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_263_p1 = actual_id;
    end else begin
        grp_fu_263_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_270_p0 = reg_316;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_270_p0 = reg_303;
    end else begin
        grp_fu_270_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_270_p1 = KI_q_read_reg_559;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_270_p1 = sampletime_read_reg_589;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_270_p1 = KI_d_read_reg_569;
    end else begin
        grp_fu_270_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_274_p1 = KP_q_read_reg_564;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_274_p1 = KP_d_read_reg_574;
    end else begin
        grp_fu_274_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (1'd0 == and_ln46_3_fu_516_p2)) | ((1'b1 == ap_CS_fsm_state16) & (1'd0 == and_ln46_1_fu_438_p2)))) begin
        grp_fu_278_opcode = 5'd4;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_fu_278_opcode = 5'd2;
    end else begin
        grp_fu_278_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_278_p1 = bitcast_ln48_1_fu_522_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_278_p1 = bitcast_ln48_fu_444_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_fu_278_p1 = limit_read_reg_553;
    end else begin
        grp_fu_278_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_282_p0 = bitcast_ln46_reg_620;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_282_p0 = bitcast_ln46_fu_378_p1;
    end else begin
        grp_fu_282_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        out_KP_d = bitcast_ln28_reg_607;
    end else if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_KP_d = bitcast_ln28_fu_333_p1;
    end else begin
        out_KP_d = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | ((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_KP_d_ap_vld = 1'b1;
    end else begin
        out_KP_d_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        out_idref_ap_vld = 1'b1;
    end else begin
        out_idref_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        out_status_ap_vld = 1'b1;
    end else begin
        out_status_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln46_1_reg_643) & (1'b1 == ap_CS_fsm_state17))) begin
        ref_ud = bitcast_ln46_reg_620;
    end else if (((1'd1 == and_ln48_1_fu_458_p2) & (1'b1 == ap_CS_fsm_state17) & (1'd0 == and_ln46_1_reg_643))) begin
        ref_ud = reg_321;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        ref_ud = bitcast_ln45_fu_359_p1;
    end else if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ref_ud = 32'd0;
    end else begin
        ref_ud = ref_ud_preg;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln48_3_fu_536_p2) & (1'b1 == ap_CS_fsm_state33) & (1'd0 == and_ln46_3_reg_669))) begin
        ref_uq = reg_321;
    end else if (((1'd1 == and_ln46_3_fu_516_p2) & (1'b1 == ap_CS_fsm_state32))) begin
        ref_uq = bitcast_ln46_reg_620;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        ref_uq = bitcast_ln45_1_fu_475_p1;
    end else if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ref_uq = 32'd0;
    end else begin
        ref_uq = ref_uq_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else if (((ap_start == 1'b1) & (reset_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln46_1_fu_438_p2 = (grp_fu_278_p2 & and_ln46_fu_432_p2);

assign and_ln46_2_fu_512_p2 = (or_ln46_2_reg_663 & or_ln46_1_reg_638);

assign and_ln46_3_fu_516_p2 = (grp_fu_278_p2 & and_ln46_2_fu_512_p2);

assign and_ln46_fu_432_p2 = (or_ln46_fu_408_p2 & or_ln46_1_fu_426_p2);

assign and_ln48_1_fu_458_p2 = (grp_fu_278_p2 & and_ln48_fu_453_p2);

assign and_ln48_2_fu_531_p2 = (or_ln48_1_fu_527_p2 & or_ln46_2_reg_663);

assign and_ln48_3_fu_536_p2 = (grp_fu_278_p2 & and_ln48_2_fu_531_p2);

assign and_ln48_fu_453_p2 = (or_ln48_fu_449_p2 & or_ln46_reg_627);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln28_fu_333_p1 = KP_d;

assign bitcast_ln29_fu_338_p1 = set_i_d;

assign bitcast_ln45_1_fu_475_p1 = reg_303;

assign bitcast_ln45_fu_359_p1 = reg_303;

assign bitcast_ln46_fu_378_p1 = limit_read_reg_553;

assign bitcast_ln48_1_fu_522_p1 = grp_fu_282_p2;

assign bitcast_ln48_fu_444_p1 = grp_fu_282_p2;

assign grp_fu_282_p2 = (grp_fu_282_p0 ^ 32'd2147483648);

assign grp_fu_287_p4 = {{grp_fu_282_p2[30:23]}};

assign grp_fu_297_p2 = ((grp_fu_287_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_402_p2 = ((trunc_ln46_fu_374_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_2_fu_414_p2 = ((tmp_1_fu_382_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln46_3_fu_420_p2 = ((trunc_ln46_1_fu_392_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_4_fu_494_p2 = ((tmp_6_fu_480_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln46_5_fu_500_p2 = ((trunc_ln46_2_fu_490_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_396_p2 = ((tmp_fu_364_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln46_1_fu_426_p2 = (icmp_ln46_3_fu_420_p2 | icmp_ln46_2_fu_414_p2);

assign or_ln46_2_fu_506_p2 = (icmp_ln46_5_fu_500_p2 | icmp_ln46_4_fu_494_p2);

assign or_ln46_fu_408_p2 = (icmp_ln46_fu_396_p2 | icmp_ln46_1_fu_402_p2);

assign or_ln48_1_fu_527_p2 = (icmp_ln48_1_reg_678 | icmp_ln46_3_reg_632);

assign or_ln48_fu_449_p2 = (icmp_ln48_reg_652 | icmp_ln46_3_reg_632);

assign out_status = empty_reg_249;

assign reset_fu_327_p0 = reset_PL;

assign reset_fu_327_p1 = reset_PS;

assign reset_fu_327_p2 = (reset_fu_327_p1 | reset_fu_327_p0);

assign test_out_pl = phi_ln31_reg_238;

assign tmp_1_fu_382_p4 = {{bitcast_ln46_fu_378_p1[30:23]}};

assign tmp_6_fu_480_p4 = {{bitcast_ln45_1_fu_475_p1[30:23]}};

assign tmp_fu_364_p4 = {{bitcast_ln45_fu_359_p1[30:23]}};

assign trunc_ln46_1_fu_392_p1 = bitcast_ln46_fu_378_p1[22:0];

assign trunc_ln46_2_fu_490_p1 = bitcast_ln45_1_fu_475_p1[22:0];

assign trunc_ln46_fu_374_p1 = bitcast_ln45_fu_359_p1[22:0];

endmodule //uz_FOC
