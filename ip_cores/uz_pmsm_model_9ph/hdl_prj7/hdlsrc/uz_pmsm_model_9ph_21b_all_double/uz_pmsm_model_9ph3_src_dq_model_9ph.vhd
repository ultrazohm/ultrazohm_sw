-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj7/hdlsrc/uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph3_src_dq_model_9ph.vhd
-- Created: 2022-06-04 17:38:56
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph3_src_dq_model_9ph
-- Source Path: uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph/dq_model_9ph
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph3_src_dq_model_9ph IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_20_0                        :   IN    std_logic;
        enb_1_4000_1                      :   IN    std_logic;
        load_torque                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        alphareset_integrators            :   IN    std_logic;
        alphasimulate_mechanical          :   IN    std_logic;
        omega_mech                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq                  :   IN    vector_of_std_logic_vector32(0 TO 8);  -- single [9]
        physical_parameters_1_J           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_d         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_q         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_R_1           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_polepair      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_psi_pm        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z3          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        theta_el                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output                :   OUT   vector_of_std_logic_vector32(0 TO 8);  -- single [9]
        M_Mi                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        omega_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END uz_pmsm_model_9ph3_src_dq_model_9ph;


ARCHITECTURE rtl OF uz_pmsm_model_9ph3_src_dq_model_9ph IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_nfp_relop_double_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_nfp_relop_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_20_0                      :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_nfp_mul_double
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_mul_double(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_nfp_sub_double
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_sub_double(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_nfp_add_double
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_add_double(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    USE ENTITY work.uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_nfp_relop_double_block
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_relop_double_block(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_nfp_relop_double
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_relop_double(rtl);

  FOR ALL : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    USE ENTITY work.uz_pmsm_model_9ph3_src_nfp_convert_double2single(rtl);

  -- Signals
  SIGNAL alphareset_integrators_1         : std_logic;
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_mech_dtc                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alphareset_integrators_2         : std_logic;
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_J                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators                : std_logic;
  SIGNAL kconst_3                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_L_d                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL From10_out1                      : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL reset_integrators_1              : std_logic;
  SIGNAL kconst_4                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_2_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL physical_parameters_polepair_1   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL polepair                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL R_1                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_L_q                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL mergedDelay_waddr                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL psi_pm                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL polepair_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL pmsm_out2                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_d_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product2_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_3                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_4                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_q                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_el                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_el_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch8_reg                  : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch8_reg_next             : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL psi_d                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_5                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product7_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_d_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch1_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch1_out1_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_op_stage1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered1_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch4_reg                  : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch4_reg_next             : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL psi_q_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_q_2                            : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL mergedInput                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin                : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL From10_out1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product8_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_op_stage1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_3                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_4                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered5_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_5                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL pmsm_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product3_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_1                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_2                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_3                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_4                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_5                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay2_bypass_reg                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_6                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_out1_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product11_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_6                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_7                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered10_bypass_reg      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_8                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_2                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch1_out1_2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_6                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_7                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Angular_Position                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_9                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_10                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_11                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_3                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion6_out1_1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch49_regin               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch49_waddr               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch49_wrenb               : std_logic;  -- ufix1
  SIGNAL delayMatch49_raddr               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch49_regout              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion6_out1_2     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_1                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL i_q_3                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_2              : std_logic;
  SIGNAL kconst_5                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_3_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion7_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_8                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_9                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide1_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_12                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_13                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered3_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_14                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_4                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch12_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch12_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL psi                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide1_out1_1                   : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL reset_integrators_3              : std_logic;
  SIGNAL kconst_6                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_4_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_10                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_11                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide3_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide2_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_15                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_16                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered2_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_17                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_5                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch13_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch13_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL psi_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide3_out1_1                   : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL mergedInput_1                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_1              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_1              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_wrenb_1              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_1              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_regout_1             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_1    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_1                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_2                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL i_o1                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL slicedInput_3                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL i_o2                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_1_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayIn0                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL nfp_out_2_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayIn1                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL nfp_out_3_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayIn2                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL nfp_out_4_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayIn3                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL mergedInput_2                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_2              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_2              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_wrenb_2              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_2              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_regout_2             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_2    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_2                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL reset_integrators_4              : std_logic;
  SIGNAL kconst_7                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_5_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_12                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_13                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide5_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide4_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_18                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_19                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered6_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_20                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_6                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch14_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch14_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL psi_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide5_out1_1                   : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL reset_integrators_5              : std_logic;
  SIGNAL kconst_8                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_6_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_14                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_15                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide7_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide6_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_21                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_22                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered7_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_23                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_7                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch15_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch15_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL psi_3                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide7_out1_1                   : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL mergedInput_3                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_3              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_3              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_wrenb_3              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_3              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_regout_3             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_3    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_3                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_4                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL i_x1                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL slicedInput_5                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL i_y1                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_6              : std_logic;
  SIGNAL kconst_9                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_7_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion11_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_16                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_17                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide9_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide8_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add4_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_24                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_25                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered8_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_26                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_8                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch16_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch16_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL psi_4                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide9_out1_1                   : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL reset_integrators_7              : std_logic;
  SIGNAL kconst_10                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_8_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_18                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_19                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide11_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide10_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add5_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_27                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_28                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered9_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_29                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_9                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch17_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch17_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL psi_5                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide11_out1_1                  : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL mergedInput_4                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_4              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_4              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_wrenb_4              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_4              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_regout_4             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_4    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_4                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_6                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL i_x2                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL slicedInput_7                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL i_y2                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_5_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayIn4                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL nfp_out_6_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayIn5                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL nfp_out_7_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayIn6                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL nfp_out_8_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayIn7                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL mergedInput_5                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_5              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_5              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_wrenb_5              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_5              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_regout_5             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_5    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_5                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_8                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL dtcsi0_y                         : unsigned(31 DOWNTO 0);  -- ufix64
  SIGNAL delayOut0                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_9                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL dtcsi1_y                         : unsigned(31 DOWNTO 0);  -- ufix64
  SIGNAL delayOut1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_10                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL dtcsi2_y                         : unsigned(31 DOWNTO 0);  -- ufix64
  SIGNAL delayOut2                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_11                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL dtcsi3_y                         : unsigned(31 DOWNTO 0);  -- ufix64
  SIGNAL delayOut3                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_12                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL dtcsi0_y_1                       : unsigned(31 DOWNTO 0);  -- ufix64
  SIGNAL delayOut4                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_13                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL dtcsi1_y_1                       : unsigned(31 DOWNTO 0);  -- ufix64
  SIGNAL delayOut5                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_14                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL dtcsi2_y_1                       : unsigned(31 DOWNTO 0);  -- ufix64
  SIGNAL delayOut6                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_15                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL dtcsi3_y_1                       : unsigned(31 DOWNTO 0);  -- ufix64
  SIGNAL delayOut7                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_8              : std_logic;
  SIGNAL kconst_11                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_9_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_20                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_21                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide13_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide12_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add6_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_30                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_31                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered4_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_32                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_10                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch18_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch18_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL psi_6                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch26_regin               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch26_waddr               : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL delayMatch26_wrenb               : std_logic;  -- ufix1
  SIGNAL delayMatch26_raddr               : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL delayMatch26_regout              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_zero                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_9_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch508_regin              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch508_waddr              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch508_wrenb              : std_logic;  -- ufix1
  SIGNAL delayMatch508_raddr              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch508_regout             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayOut8                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1_1     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Data_Type_Conversion4_out1_1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1_2     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1_3     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1_1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1_2     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_bypass_reg                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1_3     : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- This signal introduces an algebraic loop if simulate_mechanical is true!
  -- 
  -- PMSM electric and magentic
  -- 
  -- Mechanical
  -- 
  -- o1 equation
  -- 
  -- DQ equations
  -- 
  -- o2 equation
  -- 
  -- x1 equation
  -- 
  -- y1 equation
  -- 
  -- x2 equation
  -- 
  -- y2 equation
  -- 
  -- zero equation
  -- 
  -- load torque negative!!!
  -- 
  -- https://de.mathworks.com/help/releases/R2021a/hdlcoder/ug/troubleshoot-generate-implementation-model-from-simscape-pmsm.html?searchHighlight=troubleshoot-generate-implementation-model-from-simscape-pmsm&s_tid=doc_srchtitle

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => alpha1_J,  -- single
              nfp_out => Data_Type_Conversion2_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_1 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => voltage_input_dq(0),  -- single
              nfp_out => nfp_out_1_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_2 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => alpha1_L_d,  -- single
              nfp_out => Data_Type_Conversion1_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_3 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => voltage_input_dq(1),  -- single
              nfp_out => nfp_out_2_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_4 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => polepair,  -- single
              nfp_out => Data_Type_Conversion5_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_5 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => R_1,  -- single
              nfp_out => Data_Type_Conversion4_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_6 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => alpha1_L_q,  -- single
              nfp_out => Data_Type_Conversion2_out1_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_7 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => psi_pm,  -- single
              nfp_out => Data_Type_Conversion6_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_8 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => polepair_1,  -- single
              nfp_out => Data_Type_Conversion1_out1_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_9 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => load_torque,  -- single
              nfp_out => Data_Type_Conversion7_out1  -- double
              );

  u_nfp_mul_comp : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => i_d_2,  -- double
              nfp_in2 => pmsm_out2,  -- double
              nfp_out => Product2_out1  -- double
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => omega_el_1,  -- double
              nfp_in2 => psi_q,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_sub_comp : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => psi_d,  -- double
              nfp_in2 => Data_Type_Conversion6_out1,  -- double
              nfp_out => Sum2_out1  -- double
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => I_q_1,  -- double
              nfp_in2 => Data_Type_Conversion4_out1,  -- double
              nfp_out => Product7_out1  -- double
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Switch1_out1_1,  -- double
              nfp_in2 => Data_Type_Conversion5_out1,  -- double
              nfp_out => omega_el  -- double
              );

  u_nfp_mul_comp_4 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => omega_el,  -- double
              nfp_in2 => psi_d_1,  -- double
              nfp_out => Product1_out1  -- double
              );

  u_nfp_sub_comp_1 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => nfp_out_2_1,  -- double
              nfp_in2 => Product1_out1,  -- double
              nfp_out => Sum1_op_stage1  -- double
              );

  u_nfp_sub_comp_2 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Sum1_op_stage1,  -- double
              nfp_in2 => Product7_out1,  -- double
              nfp_out => Sum1_out1  -- double
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_4,  -- double
              nfp_in2 => Sum1_out1,  -- double
              nfp_out => Gain_out1  -- double
              );

  u_nfp_add_comp : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1,  -- double
              nfp_in2 => Delay1_out1_5,  -- double
              nfp_out => Sum3_out1  -- double
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => psi_q_1,  -- double
              nfp_in2 => Data_Type_Conversion2_out1_1,  -- double
              nfp_out => I_q  -- double
              );

  u_ShiftRegisterRAM : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_20_0 => enb_1_20_0,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              rd_dout => mergedDelay_regout
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => From10_out1_1,  -- double
              nfp_in2 => Sum2_out1,  -- double
              nfp_out => I_d  -- double
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => I_d,  -- double
              nfp_in2 => Data_Type_Conversion4_out1,  -- double
              nfp_out => Product8_out1  -- double
              );

  u_nfp_sub_comp_3 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => nfp_out_1_1,  -- double
              nfp_in2 => Product8_out1,  -- double
              nfp_out => Sum_op_stage1  -- double
              );

  u_nfp_add_comp_1 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Sum_op_stage1,  -- double
              nfp_in2 => Product_out1,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_nfp_mul_comp_9 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_3,  -- double
              nfp_in2 => Sum_out1,  -- double
              nfp_out => Gain_out1_1  -- double
              );

  u_nfp_add_comp_2 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1_1,  -- double
              nfp_in2 => Delay1_out1_4,  -- double
              nfp_out => Sum3_out1_1  -- double
              );

  u_nfp_mul_comp_10 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => pmsm_out1,  -- double
              nfp_in2 => I_q,  -- double
              nfp_out => Product3_out1  -- double
              );

  u_nfp_sub_comp_4 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Product3_out1,  -- double
              nfp_in2 => Product2_out1,  -- double
              nfp_out => Sum3_out1_2  -- double
              );

  u_nfp_mul_comp_11 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_2,  -- double
              nfp_in2 => Sum3_out1_2,  -- double
              nfp_out => M_Mi_1  -- double
              );

  u_nfp_mul_comp_12 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => M_Mi_2,  -- double
              nfp_in2 => Data_Type_Conversion1_out1_1,  -- double
              nfp_out => M_Mi_3  -- double
              );

  u_nfp_add_comp_3 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Delay_out1_1,  -- double
              nfp_in2 => Data_Type_Conversion7_out1,  -- double
              nfp_out => Sum1_out1_1  -- double
              );

  u_nfp_mul_comp_13 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Data_Type_Conversion2_out1,  -- double
              nfp_in2 => Sum1_out1_1,  -- double
              nfp_out => Product11_out1  -- double
              );

  u_nfp_mul_comp_14 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_1,  -- double
              nfp_in2 => Product11_out1,  -- double
              nfp_out => Gain_out1_2  -- double
              );

  u_nfp_add_comp_4 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1_2,  -- double
              nfp_in2 => Delay1_out1_1,  -- double
              nfp_out => Sum3_out1_3  -- double
              );

  u_nfp_mul_comp_15 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Switch1_out1_2,  -- double
              nfp_in2 => Data_Type_Conversion1_out1_1,  -- double
              nfp_out => Product_out1_1  -- double
              );

  u_nfp_mul_comp_16 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst,  -- double
              nfp_in2 => Product_out1_1,  -- double
              nfp_out => Gain_out1_3  -- double
              );

  u_nfp_add_comp_5 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Constant_out1,  -- double
              nfp_in2 => Switch_out1,  -- double
              nfp_out => Sum2_out1_1  -- double
              );

  u_nfp_sub_comp_5 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Sum_out1_1,  -- double
              nfp_in2 => Constant_out1,  -- double
              nfp_out => Sum1_out1_2  -- double
              );

  u_nfp_add_comp_6 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Delay1_out1_7,  -- double
              nfp_in2 => Gain_out1_3,  -- double
              nfp_out => Sum_out1_1  -- double
              );

  u_nfp_relop_comp : uz_pmsm_model_9ph3_src_nfp_relop_double_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Sum_out1_1,  -- double
              nfp_in2 => const,  -- double
              nfp_out1 => Compare_To_Constant_out1
              );

  u_nfp_relop_comp_1 : uz_pmsm_model_9ph3_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Switch_out1,  -- double
              nfp_in2 => const_1,  -- double
              nfp_out1 => Compare_To_Constant1_out1
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Delay1_out1_6,  -- double
              nfp_out => Data_Type_Conversion6_out1_1  -- single
              );

  u_ShiftRegisterRAM_1 : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb_1_20_0 => enb_1_20_0,
              wr_din => delayMatch49_regin,
              wr_addr => std_logic_vector(delayMatch49_waddr),
              wr_en => delayMatch49_wrenb,  -- ufix1
              rd_addr => std_logic_vector(delayMatch49_raddr),
              rd_dout => delayMatch49_regout
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_10 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => voltage_input_dq(2),  -- single
              nfp_out => nfp_out_3_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_11 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => L_z1,  -- single
              nfp_out => Data_Type_Conversion7_out1_1  -- double
              );

  u_nfp_mul_comp_17 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide1_out1,  -- double
              nfp_out => Divide_out1  -- double
              );

  u_nfp_sub_comp_6 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => nfp_out_3_1,  -- double
              nfp_in2 => Divide_out1,  -- double
              nfp_out => Add_out1  -- double
              );

  u_nfp_mul_comp_18 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_5,  -- double
              nfp_in2 => Add_out1,  -- double
              nfp_out => Gain_out1_4  -- double
              );

  u_nfp_add_comp_7 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1_4,  -- double
              nfp_in2 => Delay1_out1_9,  -- double
              nfp_out => Sum3_out1_4  -- double
              );

  u_nfp_mul_comp_19 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => psi,  -- double
              nfp_in2 => Data_Type_Conversion7_out1_1,  -- double
              nfp_out => Divide1_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_12 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => voltage_input_dq(3),  -- single
              nfp_out => nfp_out_4_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_13 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => L_z2,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- double
              );

  u_nfp_mul_comp_20 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide3_out1,  -- double
              nfp_out => Divide2_out1  -- double
              );

  u_nfp_sub_comp_7 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => nfp_out_4_1,  -- double
              nfp_in2 => Divide2_out1,  -- double
              nfp_out => Add1_out1  -- double
              );

  u_nfp_mul_comp_21 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_6,  -- double
              nfp_in2 => Add1_out1,  -- double
              nfp_out => Gain_out1_5  -- double
              );

  u_nfp_add_comp_8 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1_5,  -- double
              nfp_in2 => Delay1_out1_11,  -- double
              nfp_out => Sum3_out1_5  -- double
              );

  u_nfp_mul_comp_22 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => psi_1,  -- double
              nfp_in2 => Data_Type_Conversion8_out1,  -- double
              nfp_out => Divide3_out1  -- double
              );

  u_ShiftRegisterRAM_2 : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_20_0 => enb_1_20_0,
              wr_din => std_logic_vector(mergedDelay_regin_1),
              wr_addr => std_logic_vector(mergedDelay_waddr_1),
              wr_en => mergedDelay_wrenb_1,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_1),
              rd_dout => mergedDelay_regout_1
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_1 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => I_d,  -- double
              nfp_out => nfp_out_1_1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_2 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => i_q_3,  -- double
              nfp_out => nfp_out_2_1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_3 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => i_o1,  -- double
              nfp_out => nfp_out_3_1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_4 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => i_o2,  -- double
              nfp_out => nfp_out_4_1_1  -- single
              );

  u_ShiftRegisterRAM_3 : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_20_0 => enb_1_20_0,
              wr_din => std_logic_vector(mergedDelay_regin_2),
              wr_addr => std_logic_vector(mergedDelay_waddr_2),
              wr_en => mergedDelay_wrenb_2,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_2),
              rd_dout => mergedDelay_regout_2
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_14 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => voltage_input_dq(4),  -- single
              nfp_out => nfp_out_5_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_15 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => L_x1,  -- single
              nfp_out => Data_Type_Conversion9_out1  -- double
              );

  u_nfp_mul_comp_23 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide5_out1,  -- double
              nfp_out => Divide4_out1  -- double
              );

  u_nfp_sub_comp_8 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => nfp_out_5_1,  -- double
              nfp_in2 => Divide4_out1,  -- double
              nfp_out => Add2_out1  -- double
              );

  u_nfp_mul_comp_24 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_7,  -- double
              nfp_in2 => Add2_out1,  -- double
              nfp_out => Gain_out1_6  -- double
              );

  u_nfp_add_comp_9 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1_6,  -- double
              nfp_in2 => Delay1_out1_13,  -- double
              nfp_out => Sum3_out1_6  -- double
              );

  u_nfp_mul_comp_25 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => psi_2,  -- double
              nfp_in2 => Data_Type_Conversion9_out1,  -- double
              nfp_out => Divide5_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_16 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => voltage_input_dq(5),  -- single
              nfp_out => nfp_out_6_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_17 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => L_y1,  -- single
              nfp_out => Data_Type_Conversion10_out1  -- double
              );

  u_nfp_mul_comp_26 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide7_out1,  -- double
              nfp_out => Divide6_out1  -- double
              );

  u_nfp_sub_comp_9 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => nfp_out_6_1,  -- double
              nfp_in2 => Divide6_out1,  -- double
              nfp_out => Add3_out1  -- double
              );

  u_nfp_mul_comp_27 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_8,  -- double
              nfp_in2 => Add3_out1,  -- double
              nfp_out => Gain_out1_7  -- double
              );

  u_nfp_add_comp_10 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1_7,  -- double
              nfp_in2 => Delay1_out1_15,  -- double
              nfp_out => Sum3_out1_7  -- double
              );

  u_nfp_mul_comp_28 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => psi_3,  -- double
              nfp_in2 => Data_Type_Conversion10_out1,  -- double
              nfp_out => Divide7_out1  -- double
              );

  u_ShiftRegisterRAM_4 : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_20_0 => enb_1_20_0,
              wr_din => std_logic_vector(mergedDelay_regin_3),
              wr_addr => std_logic_vector(mergedDelay_waddr_3),
              wr_en => mergedDelay_wrenb_3,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_3),
              rd_dout => mergedDelay_regout_3
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_18 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => voltage_input_dq(6),  -- single
              nfp_out => nfp_out_7_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_19 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => L_x2,  -- single
              nfp_out => Data_Type_Conversion11_out1  -- double
              );

  u_nfp_mul_comp_29 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide9_out1,  -- double
              nfp_out => Divide8_out1  -- double
              );

  u_nfp_sub_comp_10 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => nfp_out_7_1,  -- double
              nfp_in2 => Divide8_out1,  -- double
              nfp_out => Add4_out1  -- double
              );

  u_nfp_mul_comp_30 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_9,  -- double
              nfp_in2 => Add4_out1,  -- double
              nfp_out => Gain_out1_8  -- double
              );

  u_nfp_add_comp_11 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1_8,  -- double
              nfp_in2 => Delay1_out1_17,  -- double
              nfp_out => Sum3_out1_8  -- double
              );

  u_nfp_mul_comp_31 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => psi_4,  -- double
              nfp_in2 => Data_Type_Conversion11_out1,  -- double
              nfp_out => Divide9_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_20 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => voltage_input_dq(7),  -- single
              nfp_out => nfp_out_8_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_21 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => L_y2,  -- single
              nfp_out => Data_Type_Conversion12_out1  -- double
              );

  u_nfp_mul_comp_32 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide11_out1,  -- double
              nfp_out => Divide10_out1  -- double
              );

  u_nfp_sub_comp_11 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => nfp_out_8_1,  -- double
              nfp_in2 => Divide10_out1,  -- double
              nfp_out => Add5_out1  -- double
              );

  u_nfp_mul_comp_33 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_10,  -- double
              nfp_in2 => Add5_out1,  -- double
              nfp_out => Gain_out1_9  -- double
              );

  u_nfp_add_comp_12 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1_9,  -- double
              nfp_in2 => Delay1_out1_19,  -- double
              nfp_out => Sum3_out1_9  -- double
              );

  u_nfp_mul_comp_34 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => psi_5,  -- double
              nfp_in2 => Data_Type_Conversion12_out1,  -- double
              nfp_out => Divide11_out1  -- double
              );

  u_ShiftRegisterRAM_5 : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_20_0 => enb_1_20_0,
              wr_din => std_logic_vector(mergedDelay_regin_4),
              wr_addr => std_logic_vector(mergedDelay_waddr_4),
              wr_en => mergedDelay_wrenb_4,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_4),
              rd_dout => mergedDelay_regout_4
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_5 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => i_x1,  -- double
              nfp_out => nfp_out_5_1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_6 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => i_y1,  -- double
              nfp_out => nfp_out_6_1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_7 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => i_x2,  -- double
              nfp_out => nfp_out_7_1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_8 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => i_y2,  -- double
              nfp_out => nfp_out_8_1_1  -- single
              );

  u_ShiftRegisterRAM_6 : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_20_0 => enb_1_20_0,
              wr_din => std_logic_vector(mergedDelay_regin_5),
              wr_addr => std_logic_vector(mergedDelay_waddr_5),
              wr_en => mergedDelay_wrenb_5,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_5),
              rd_dout => mergedDelay_regout_5
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_22 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => voltage_input_dq(8),  -- single
              nfp_out => nfp_out_9_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_23 : uz_pmsm_model_9ph3_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => L_z3,  -- single
              nfp_out => Data_Type_Conversion3_out1  -- double
              );

  u_nfp_mul_comp_35 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide13_out1,  -- double
              nfp_out => Divide12_out1  -- double
              );

  u_nfp_sub_comp_12 : uz_pmsm_model_9ph3_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => nfp_out_9_1,  -- double
              nfp_in2 => Divide12_out1,  -- double
              nfp_out => Add6_out1  -- double
              );

  u_nfp_mul_comp_36 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => kconst_11,  -- double
              nfp_in2 => Add6_out1,  -- double
              nfp_out => Gain_out1_10  -- double
              );

  u_nfp_add_comp_13 : uz_pmsm_model_9ph3_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => Gain_out1_10,  -- double
              nfp_in2 => Delay1_out1_21,  -- double
              nfp_out => Sum3_out1_10  -- double
              );

  u_nfp_mul_comp_37 : uz_pmsm_model_9ph3_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in1 => psi_6,  -- double
              nfp_in2 => Data_Type_Conversion3_out1,  -- double
              nfp_out => Divide13_out1  -- double
              );

  u_ShiftRegisterRAM_generic : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 64
                 )
    PORT MAP( clk => clk,
              enb_1_20_0 => enb_1_20_0,
              wr_din => delayMatch26_regin,
              wr_addr => std_logic_vector(delayMatch26_waddr),
              wr_en => delayMatch26_wrenb,  -- ufix1
              rd_addr => std_logic_vector(delayMatch26_raddr),
              rd_dout => delayMatch26_regout
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_9 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => i_zero,  -- double
              nfp_out => nfp_out_9_1_1  -- single
              );

  u_ShiftRegisterRAM_7 : uz_pmsm_model_9ph3_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb_1_20_0 => enb_1_20_0,
              wr_din => delayMatch508_regin,
              wr_addr => std_logic_vector(delayMatch508_waddr),
              wr_en => delayMatch508_wrenb,  -- ufix1
              rd_addr => std_logic_vector(delayMatch508_raddr),
              rd_dout => delayMatch508_regout
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_10 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => M_Mi_3,  -- double
              nfp_out => Data_Type_Conversion4_out1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_11 : uz_pmsm_model_9ph3_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_20_0 => enb_1_20_0,
              nfp_in => Switch1_out1,  -- double
              nfp_out => Data_Type_Conversion5_out1_1  -- single
              );

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alphareset_integrators_1 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        alphareset_integrators_1 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  kconst <= X"3ec0c6f7a0b5ed8d";

  omega_mech_dtc <= omega_mech;

  delayMatch46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alphareset_integrators_2 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        alphareset_integrators_2 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch46_process;


  kconst_1 <= X"3ec0c6f7a0b5ed8d";

  alpha1_J <= physical_parameters_1_J;

  kconst_2 <= X"4012000000000000";

  delayMatch35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        reset_integrators <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch35_process;


  kconst_3 <= X"3ec0c6f7a0b5ed8d";

  alpha1_L_d <= physical_parameters_1_L_d;

  From10_out1 <= unsigned(Data_Type_Conversion1_out1);

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_1 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        reset_integrators_1 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  kconst_4 <= X"3ec0c6f7a0b5ed8d";

  physical_parameters_polepair_1 <= physical_parameters_polepair;

  polepair <= physical_parameters_polepair_1;

  R_1 <= physical_parameters_R_1;

  Delay1_iv <= X"0000000000000000";

  alpha1_L_q <= physical_parameters_1_L_q;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_waddr <= to_unsigned(16#0#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_waddr <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_raddr <= to_unsigned(16#1#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_raddr <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  psi_pm <= physical_parameters_psi_pm;

  Delay1_iv_1 <= X"0000000000000000";

  polepair_1 <= physical_parameters_polepair_1;

  Delay1_iv_2 <= X"0000000000000000";

  delayMatch45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_1 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch45_process;


  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pmsm_out2 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        pmsm_out2 <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  I_d_1 <= I_d;

  i_d_2 <= I_d_1;

  delayMatch34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_4 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_4 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS delayMatch34_process;


  delayMatch33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_q <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        psi_q <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch33_process;


  omega_el_1 <= omega_el;

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg(0) <= X"0000000000000000";
        delayMatch8_reg(1) <= X"0000000000000000";
        delayMatch8_reg(2) <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
        delayMatch8_reg(2) <= delayMatch8_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  psi_d <= delayMatch8_reg(2);
  delayMatch8_reg_next(0) <= Delay1_out1_3;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);
  delayMatch8_reg_next(2) <= delayMatch8_reg(1);

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_5 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_5 <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  I_q_1 <= I_q;

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_d_1 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        psi_d_1 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch1_out1_1 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Switch1_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  
  Delay1_toDel <= Sum3_out1 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_1 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_1 <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay1_lowered1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered1_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered1_bypass_reg <= Delay1_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay1_lowered1_bypass_process;

  
  Delay1_toDel_2 <= Delay1_toDel_1 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered1_bypass_reg;

  Delay1_delOut <= Delay1_toDel_2;

  
  Delay1_out1_2 <= Delay1_delOut WHEN alphareset_integrators = '0' ELSE
      Delay1_iv;

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg(0) <= X"0000000000000000";
        delayMatch4_reg(1) <= X"0000000000000000";
        delayMatch4_reg(2) <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
        delayMatch4_reg(2) <= delayMatch4_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  psi_q_1 <= delayMatch4_reg(2);
  delayMatch4_reg_next(0) <= Delay1_out1_2;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);
  delayMatch4_reg_next(2) <= delayMatch4_reg(1);

  i_q_2 <= unsigned(I_q);

  mergedInput <= From10_out1 & i_q_2;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_regin <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedOutput <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  slicedInput <= mergedOutput(127 DOWNTO 64);

  From10_out1_1 <= std_logic_vector(resize(slicedInput, 64));

  
  Delay1_toDel_3 <= Sum3_out1_1 WHEN reset_integrators = '0' ELSE
      Delay1_iv_1;

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_4 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_4 <= Delay1_toDel_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Delay1_lowered5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered5_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered5_bypass_reg <= Delay1_toDel_4;
      END IF;
    END IF;
  END PROCESS Delay1_lowered5_bypass_process;

  
  Delay1_toDel_5 <= Delay1_toDel_4 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered5_bypass_reg;

  Delay1_delOut_1 <= Delay1_toDel_5;

  
  Delay1_out1_3 <= Delay1_delOut_1 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_1;

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pmsm_out1 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        pmsm_out1 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  M_Mi_2 <= M_Mi_1;

  M_Mi_4 <= M_Mi_3;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        M_Mi_5 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        M_Mi_5 <= M_Mi_4;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay2_bypass_reg <= M_Mi_5;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  M_Mi_6 <= M_Mi_5 WHEN enb_1_4000_1 = '1' ELSE
      Delay2_bypass_reg;

  Delay_out1 <= M_Mi_6;

  delayMatch44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_1 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay_out1_1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS delayMatch44_process;


  
  Delay1_toDel_6 <= Sum3_out1_3 WHEN alphareset_integrators_2 = '0' ELSE
      Delay1_iv_2;

  crp_out_delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_7 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_7 <= Delay1_toDel_6;
      END IF;
    END IF;
  END PROCESS crp_out_delay13_process;


  Delay1_lowered10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered10_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered10_bypass_reg <= Delay1_toDel_7;
      END IF;
    END IF;
  END PROCESS Delay1_lowered10_bypass_process;

  
  Delay1_toDel_8 <= Delay1_toDel_7 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered10_bypass_reg;

  Delay1_delOut_2 <= Delay1_toDel_8;

  
  Delay1_out1 <= Delay1_delOut_2 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_2;

  
  Switch1_out1 <= omega_mech_dtc WHEN alphasimulate_mechanical = '0' ELSE
      Delay1_out1;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch1_out1_2 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Switch1_out1_2 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  const <= X"400921fb60000000";

  Constant_out1 <= X"401921fb54442d18";

  const_1 <= X"c00921fb60000000";

  Delay1_iv_3 <= X"0000000000000000";

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_7 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_7 <= Delay1_out1_6;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  
  Switch_out1 <= Sum_out1_1 WHEN Compare_To_Constant_out1 = '0' ELSE
      Sum1_out1_2;

  
  Angular_Position <= Switch_out1 WHEN Compare_To_Constant1_out1 = '0' ELSE
      Sum2_out1_1;

  
  Delay1_toDel_9 <= Angular_Position WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_3;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_10 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_10 <= Delay1_toDel_9;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel_10;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_11 <= Delay1_toDel_10 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut_3 <= Delay1_toDel_11;

  
  Delay1_out1_6 <= Delay1_delOut_3 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_3;

  -- Input register for RAM-based shift register delayMatch49
  delayMatch49_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch49_regin <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch49_regin <= Data_Type_Conversion6_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch49_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 126
  -- 
  -- Write address counter for RAM-based shift register delayMatch49
  delayMatch49_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch49_waddr <= to_unsigned(16#00#, 8);
      ELSIF enb_1_20_0 = '1' THEN
        IF delayMatch49_waddr >= to_unsigned(16#7E#, 8) THEN 
          delayMatch49_waddr <= to_unsigned(16#00#, 8);
        ELSE 
          delayMatch49_waddr <= delayMatch49_waddr + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch49_wr_process;


  delayMatch49_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 126
  -- 
  -- Read address counter for RAM-based shift register delayMatch49
  delayMatch49_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch49_raddr <= to_unsigned(16#01#, 8);
      ELSIF enb_1_20_0 = '1' THEN
        IF delayMatch49_raddr >= to_unsigned(16#7E#, 8) THEN 
          delayMatch49_raddr <= to_unsigned(16#00#, 8);
        ELSE 
          delayMatch49_raddr <= delayMatch49_raddr + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch49_rd_process;


  -- Output register for RAM-based shift register delayMatch49
  delayMatch49_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion6_out1_2 <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        Data_Type_Conversion6_out1_2 <= delayMatch49_regout;
      END IF;
    END IF;
  END PROCESS delayMatch49_regoutc_process;


  slicedInput_1 <= mergedOutput(63 DOWNTO 0);

  i_q_3 <= std_logic_vector(resize(slicedInput_1, 64));

  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_2 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        reset_integrators_2 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch30_process;


  kconst_5 <= X"3ec0c6f7a0b5ed8d";

  Delay1_iv_4 <= X"0000000000000000";

  L_z1 <= physical_parameters_L_z1;

  delayMatch29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_9 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_9 <= Delay1_out1_8;
      END IF;
    END IF;
  END PROCESS delayMatch29_process;


  
  Delay1_toDel_12 <= Sum3_out1_4 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_4;

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_13 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_13 <= Delay1_toDel_12;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  Delay1_lowered3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered3_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered3_bypass_reg <= Delay1_toDel_13;
      END IF;
    END IF;
  END PROCESS Delay1_lowered3_bypass_process;

  
  Delay1_toDel_14 <= Delay1_toDel_13 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered3_bypass_reg;

  Delay1_delOut_4 <= Delay1_toDel_14;

  
  Delay1_out1_8 <= Delay1_delOut_4 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_4;

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch12_reg(0) <= X"0000000000000000";
        delayMatch12_reg(1) <= X"0000000000000000";
        delayMatch12_reg(2) <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch12_reg(0) <= delayMatch12_reg_next(0);
        delayMatch12_reg(1) <= delayMatch12_reg_next(1);
        delayMatch12_reg(2) <= delayMatch12_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  psi <= delayMatch12_reg(2);
  delayMatch12_reg_next(0) <= Delay1_out1_8;
  delayMatch12_reg_next(1) <= delayMatch12_reg(0);
  delayMatch12_reg_next(2) <= delayMatch12_reg(1);

  Divide1_out1_1 <= unsigned(Divide1_out1);

  delayMatch28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_3 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        reset_integrators_3 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch28_process;


  kconst_6 <= X"3ec0c6f7a0b5ed8d";

  Delay1_iv_5 <= X"0000000000000000";

  L_z2 <= physical_parameters_L_z2;

  delayMatch27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_11 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_11 <= Delay1_out1_10;
      END IF;
    END IF;
  END PROCESS delayMatch27_process;


  
  Delay1_toDel_15 <= Sum3_out1_5 WHEN reset_integrators_3 = '0' ELSE
      Delay1_iv_5;

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_16 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_16 <= Delay1_toDel_15;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay1_lowered2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered2_bypass_reg <= Delay1_toDel_16;
      END IF;
    END IF;
  END PROCESS Delay1_lowered2_bypass_process;

  
  Delay1_toDel_17 <= Delay1_toDel_16 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered2_bypass_reg;

  Delay1_delOut_5 <= Delay1_toDel_17;

  
  Delay1_out1_10 <= Delay1_delOut_5 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_5;

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_reg(0) <= X"0000000000000000";
        delayMatch13_reg(1) <= X"0000000000000000";
        delayMatch13_reg(2) <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch13_reg(0) <= delayMatch13_reg_next(0);
        delayMatch13_reg(1) <= delayMatch13_reg_next(1);
        delayMatch13_reg(2) <= delayMatch13_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  psi_1 <= delayMatch13_reg(2);
  delayMatch13_reg_next(0) <= Delay1_out1_10;
  delayMatch13_reg_next(1) <= delayMatch13_reg(0);
  delayMatch13_reg_next(2) <= delayMatch13_reg(1);

  Divide3_out1_1 <= unsigned(Divide3_out1);

  mergedInput_1 <= Divide1_out1_1 & Divide3_out1_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_regin_1 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedDelay_regin_1 <= mergedInput_1;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_1_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_waddr_1 <= to_unsigned(16#0#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_waddr_1 >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_waddr_1 <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_waddr_1 <= mergedDelay_waddr_1 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_1_process;


  mergedDelay_wrenb_1 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_raddr_1 <= to_unsigned(16#1#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_raddr_1 >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_raddr_1 <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_raddr_1 <= mergedDelay_raddr_1 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_1_process;


  mergedDelay_regout_unsigned_1 <= unsigned(mergedDelay_regout_1);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedOutput_1 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedOutput_1 <= mergedDelay_regout_unsigned_1;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_1_process;


  slicedInput_2 <= mergedOutput_1(127 DOWNTO 64);

  i_o1 <= std_logic_vector(resize(slicedInput_2, 64));

  slicedInput_3 <= mergedOutput_1(63 DOWNTO 0);

  i_o2 <= std_logic_vector(resize(slicedInput_3, 64));

  delayIn0 <= unsigned(nfp_out_1_1_1);

  delayIn1 <= unsigned(nfp_out_2_1_1);

  delayIn2 <= unsigned(nfp_out_3_1_1);

  delayIn3 <= unsigned(nfp_out_4_1_1);

  mergedInput_2 <= delayIn0 & delayIn1 & delayIn2 & delayIn3;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_regin_2 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedDelay_regin_2 <= mergedInput_2;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_2_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 111
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_waddr_2 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_waddr_2 >= to_unsigned(16#6F#, 7) THEN 
          mergedDelay_waddr_2 <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_waddr_2 <= mergedDelay_waddr_2 + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_2_process;


  mergedDelay_wrenb_2 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 111
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_raddr_2 <= to_unsigned(16#01#, 7);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_raddr_2 >= to_unsigned(16#6F#, 7) THEN 
          mergedDelay_raddr_2 <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_raddr_2 <= mergedDelay_raddr_2 + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_2_process;


  mergedDelay_regout_unsigned_2 <= unsigned(mergedDelay_regout_2);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedOutput_2 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedOutput_2 <= mergedDelay_regout_unsigned_2;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_2_process;


  delayMatch37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_4 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        reset_integrators_4 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch37_process;


  kconst_7 <= X"3ec0c6f7a0b5ed8d";

  Delay1_iv_6 <= X"0000000000000000";

  L_x1 <= physical_parameters_L_x1;

  delayMatch36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_13 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_13 <= Delay1_out1_12;
      END IF;
    END IF;
  END PROCESS delayMatch36_process;


  
  Delay1_toDel_18 <= Sum3_out1_6 WHEN reset_integrators_4 = '0' ELSE
      Delay1_iv_6;

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_19 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_19 <= Delay1_toDel_18;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Delay1_lowered6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered6_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered6_bypass_reg <= Delay1_toDel_19;
      END IF;
    END IF;
  END PROCESS Delay1_lowered6_bypass_process;

  
  Delay1_toDel_20 <= Delay1_toDel_19 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered6_bypass_reg;

  Delay1_delOut_6 <= Delay1_toDel_20;

  
  Delay1_out1_12 <= Delay1_delOut_6 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_6;

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch14_reg(0) <= X"0000000000000000";
        delayMatch14_reg(1) <= X"0000000000000000";
        delayMatch14_reg(2) <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  psi_2 <= delayMatch14_reg(2);
  delayMatch14_reg_next(0) <= Delay1_out1_12;
  delayMatch14_reg_next(1) <= delayMatch14_reg(0);
  delayMatch14_reg_next(2) <= delayMatch14_reg(1);

  Divide5_out1_1 <= unsigned(Divide5_out1);

  delayMatch39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_5 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        reset_integrators_5 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch39_process;


  kconst_8 <= X"3ec0c6f7a0b5ed8d";

  Delay1_iv_7 <= X"0000000000000000";

  L_y1 <= physical_parameters_L_y1;

  delayMatch38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_15 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_15 <= Delay1_out1_14;
      END IF;
    END IF;
  END PROCESS delayMatch38_process;


  
  Delay1_toDel_21 <= Sum3_out1_7 WHEN reset_integrators_5 = '0' ELSE
      Delay1_iv_7;

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_22 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_22 <= Delay1_toDel_21;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Delay1_lowered7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered7_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered7_bypass_reg <= Delay1_toDel_22;
      END IF;
    END IF;
  END PROCESS Delay1_lowered7_bypass_process;

  
  Delay1_toDel_23 <= Delay1_toDel_22 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered7_bypass_reg;

  Delay1_delOut_7 <= Delay1_toDel_23;

  
  Delay1_out1_14 <= Delay1_delOut_7 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_7;

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= X"0000000000000000";
        delayMatch15_reg(1) <= X"0000000000000000";
        delayMatch15_reg(2) <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  psi_3 <= delayMatch15_reg(2);
  delayMatch15_reg_next(0) <= Delay1_out1_14;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);

  Divide7_out1_1 <= unsigned(Divide7_out1);

  mergedInput_3 <= Divide5_out1_1 & Divide7_out1_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_regin_3 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedDelay_regin_3 <= mergedInput_3;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_3_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_waddr_3 <= to_unsigned(16#0#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_waddr_3 >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_waddr_3 <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_waddr_3 <= mergedDelay_waddr_3 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_3_process;


  mergedDelay_wrenb_3 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_raddr_3 <= to_unsigned(16#1#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_raddr_3 >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_raddr_3 <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_raddr_3 <= mergedDelay_raddr_3 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_3_process;


  mergedDelay_regout_unsigned_3 <= unsigned(mergedDelay_regout_3);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedOutput_3 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedOutput_3 <= mergedDelay_regout_unsigned_3;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_3_process;


  slicedInput_4 <= mergedOutput_3(127 DOWNTO 64);

  i_x1 <= std_logic_vector(resize(slicedInput_4, 64));

  slicedInput_5 <= mergedOutput_3(63 DOWNTO 0);

  i_y1 <= std_logic_vector(resize(slicedInput_5, 64));

  delayMatch41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_6 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        reset_integrators_6 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch41_process;


  kconst_9 <= X"3ec0c6f7a0b5ed8d";

  Delay1_iv_8 <= X"0000000000000000";

  L_x2 <= physical_parameters_L_x2;

  delayMatch40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_17 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_17 <= Delay1_out1_16;
      END IF;
    END IF;
  END PROCESS delayMatch40_process;


  
  Delay1_toDel_24 <= Sum3_out1_8 WHEN reset_integrators_6 = '0' ELSE
      Delay1_iv_8;

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_25 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_25 <= Delay1_toDel_24;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Delay1_lowered8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered8_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered8_bypass_reg <= Delay1_toDel_25;
      END IF;
    END IF;
  END PROCESS Delay1_lowered8_bypass_process;

  
  Delay1_toDel_26 <= Delay1_toDel_25 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered8_bypass_reg;

  Delay1_delOut_8 <= Delay1_toDel_26;

  
  Delay1_out1_16 <= Delay1_delOut_8 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_8;

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch16_reg(0) <= X"0000000000000000";
        delayMatch16_reg(1) <= X"0000000000000000";
        delayMatch16_reg(2) <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch16_reg(0) <= delayMatch16_reg_next(0);
        delayMatch16_reg(1) <= delayMatch16_reg_next(1);
        delayMatch16_reg(2) <= delayMatch16_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  psi_4 <= delayMatch16_reg(2);
  delayMatch16_reg_next(0) <= Delay1_out1_16;
  delayMatch16_reg_next(1) <= delayMatch16_reg(0);
  delayMatch16_reg_next(2) <= delayMatch16_reg(1);

  Divide9_out1_1 <= unsigned(Divide9_out1);

  delayMatch43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_7 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        reset_integrators_7 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch43_process;


  kconst_10 <= X"3ec0c6f7a0b5ed8d";

  Delay1_iv_9 <= X"0000000000000000";

  L_y2 <= physical_parameters_L_y2;

  delayMatch42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_19 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_19 <= Delay1_out1_18;
      END IF;
    END IF;
  END PROCESS delayMatch42_process;


  
  Delay1_toDel_27 <= Sum3_out1_9 WHEN reset_integrators_7 = '0' ELSE
      Delay1_iv_9;

  crp_out_delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_28 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_28 <= Delay1_toDel_27;
      END IF;
    END IF;
  END PROCESS crp_out_delay12_process;


  Delay1_lowered9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered9_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered9_bypass_reg <= Delay1_toDel_28;
      END IF;
    END IF;
  END PROCESS Delay1_lowered9_bypass_process;

  
  Delay1_toDel_29 <= Delay1_toDel_28 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered9_bypass_reg;

  Delay1_delOut_9 <= Delay1_toDel_29;

  
  Delay1_out1_18 <= Delay1_delOut_9 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_9;

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch17_reg(0) <= X"0000000000000000";
        delayMatch17_reg(1) <= X"0000000000000000";
        delayMatch17_reg(2) <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch17_reg(0) <= delayMatch17_reg_next(0);
        delayMatch17_reg(1) <= delayMatch17_reg_next(1);
        delayMatch17_reg(2) <= delayMatch17_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  psi_5 <= delayMatch17_reg(2);
  delayMatch17_reg_next(0) <= Delay1_out1_18;
  delayMatch17_reg_next(1) <= delayMatch17_reg(0);
  delayMatch17_reg_next(2) <= delayMatch17_reg(1);

  Divide11_out1_1 <= unsigned(Divide11_out1);

  mergedInput_4 <= Divide9_out1_1 & Divide11_out1_1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_regin_4 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedDelay_regin_4 <= mergedInput_4;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_4_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_waddr_4 <= to_unsigned(16#0#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_waddr_4 >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_waddr_4 <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_waddr_4 <= mergedDelay_waddr_4 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_4_process;


  mergedDelay_wrenb_4 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_raddr_4 <= to_unsigned(16#1#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_raddr_4 >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_raddr_4 <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_raddr_4 <= mergedDelay_raddr_4 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_4_process;


  mergedDelay_regout_unsigned_4 <= unsigned(mergedDelay_regout_4);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedOutput_4 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedOutput_4 <= mergedDelay_regout_unsigned_4;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_4_process;


  slicedInput_6 <= mergedOutput_4(127 DOWNTO 64);

  i_x2 <= std_logic_vector(resize(slicedInput_6, 64));

  slicedInput_7 <= mergedOutput_4(63 DOWNTO 0);

  i_y2 <= std_logic_vector(resize(slicedInput_7, 64));

  delayIn4 <= unsigned(nfp_out_5_1_1);

  delayIn5 <= unsigned(nfp_out_6_1_1);

  delayIn6 <= unsigned(nfp_out_7_1_1);

  delayIn7 <= unsigned(nfp_out_8_1_1);

  mergedInput_5 <= delayIn4 & delayIn5 & delayIn6 & delayIn7;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_regin_5 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedDelay_regin_5 <= mergedInput_5;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_5_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 111
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_waddr_5 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_waddr_5 >= to_unsigned(16#6F#, 7) THEN 
          mergedDelay_waddr_5 <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_waddr_5 <= mergedDelay_waddr_5 + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_5_process;


  mergedDelay_wrenb_5 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 111
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_raddr_5 <= to_unsigned(16#01#, 7);
      ELSIF enb_1_20_0 = '1' THEN
        IF mergedDelay_raddr_5 >= to_unsigned(16#6F#, 7) THEN 
          mergedDelay_raddr_5 <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_raddr_5 <= mergedDelay_raddr_5 + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_5_process;


  mergedDelay_regout_unsigned_5 <= unsigned(mergedDelay_regout_5);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedOutput_5 <= to_unsigned(0, 128);
      ELSIF enb_1_20_0 = '1' THEN
        mergedOutput_5 <= mergedDelay_regout_unsigned_5;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_5_process;


  slicedInput_8 <= mergedOutput_2(127 DOWNTO 96);

  dtcsi0_y <= slicedInput_8;
  delayOut0 <= std_logic_vector(resize(dtcsi0_y, 32));

  slicedInput_9 <= mergedOutput_2(95 DOWNTO 64);

  dtcsi1_y <= slicedInput_9;
  delayOut1 <= std_logic_vector(resize(dtcsi1_y, 32));

  slicedInput_10 <= mergedOutput_2(63 DOWNTO 32);

  dtcsi2_y <= slicedInput_10;
  delayOut2 <= std_logic_vector(resize(dtcsi2_y, 32));

  slicedInput_11 <= mergedOutput_2(31 DOWNTO 0);

  dtcsi3_y <= slicedInput_11;
  delayOut3 <= std_logic_vector(resize(dtcsi3_y, 32));

  slicedInput_12 <= mergedOutput_5(127 DOWNTO 96);

  dtcsi0_y_1 <= slicedInput_12;
  delayOut4 <= std_logic_vector(resize(dtcsi0_y_1, 32));

  slicedInput_13 <= mergedOutput_5(95 DOWNTO 64);

  dtcsi1_y_1 <= slicedInput_13;
  delayOut5 <= std_logic_vector(resize(dtcsi1_y_1, 32));

  slicedInput_14 <= mergedOutput_5(63 DOWNTO 32);

  dtcsi2_y_1 <= slicedInput_14;
  delayOut6 <= std_logic_vector(resize(dtcsi2_y_1, 32));

  slicedInput_15 <= mergedOutput_5(31 DOWNTO 0);

  dtcsi3_y_1 <= slicedInput_15;
  delayOut7 <= std_logic_vector(resize(dtcsi3_y_1, 32));

  delayMatch32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_8 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        reset_integrators_8 <= alphareset_integrators;
      END IF;
    END IF;
  END PROCESS delayMatch32_process;


  kconst_11 <= X"3ec0c6f7a0b5ed8d";

  Delay1_iv_10 <= X"0000000000000000";

  L_z3 <= physical_parameters_L_z3;

  delayMatch31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_21 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_out1_21 <= Delay1_out1_20;
      END IF;
    END IF;
  END PROCESS delayMatch31_process;


  
  Delay1_toDel_30 <= Sum3_out1_10 WHEN reset_integrators_8 = '0' ELSE
      Delay1_iv_10;

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_31 <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_toDel_31 <= Delay1_toDel_30;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  Delay1_lowered4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered4_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_lowered4_bypass_reg <= Delay1_toDel_31;
      END IF;
    END IF;
  END PROCESS Delay1_lowered4_bypass_process;

  
  Delay1_toDel_32 <= Delay1_toDel_31 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_lowered4_bypass_reg;

  Delay1_delOut_10 <= Delay1_toDel_32;

  
  Delay1_out1_20 <= Delay1_delOut_10 WHEN alphareset_integrators = '0' ELSE
      Delay1_iv_10;

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch18_reg(0) <= X"0000000000000000";
        delayMatch18_reg(1) <= X"0000000000000000";
        delayMatch18_reg(2) <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch18_reg(0) <= delayMatch18_reg_next(0);
        delayMatch18_reg(1) <= delayMatch18_reg_next(1);
        delayMatch18_reg(2) <= delayMatch18_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  psi_6 <= delayMatch18_reg(2);
  delayMatch18_reg_next(0) <= Delay1_out1_20;
  delayMatch18_reg_next(1) <= delayMatch18_reg(0);
  delayMatch18_reg_next(2) <= delayMatch18_reg(1);

  -- Input register for RAM-based shift register delayMatch26
  delayMatch26_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_regin <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch26_regin <= Divide13_out1;
      END IF;
    END IF;
  END PROCESS delayMatch26_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Write address counter for RAM-based shift register delayMatch26
  delayMatch26_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_waddr <= to_unsigned(16#0#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF delayMatch26_waddr >= to_unsigned(16#3#, 3) THEN 
          delayMatch26_waddr <= to_unsigned(16#0#, 3);
        ELSE 
          delayMatch26_waddr <= delayMatch26_waddr + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch26_wr_process;


  delayMatch26_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Read address counter for RAM-based shift register delayMatch26
  delayMatch26_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_raddr <= to_unsigned(16#1#, 3);
      ELSIF enb_1_20_0 = '1' THEN
        IF delayMatch26_raddr >= to_unsigned(16#3#, 3) THEN 
          delayMatch26_raddr <= to_unsigned(16#0#, 3);
        ELSE 
          delayMatch26_raddr <= delayMatch26_raddr + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch26_rd_process;


  -- Output register for RAM-based shift register delayMatch26
  delayMatch26_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_zero <= X"0000000000000000";
      ELSIF enb_1_20_0 = '1' THEN
        i_zero <= delayMatch26_regout;
      END IF;
    END IF;
  END PROCESS delayMatch26_regoutc_process;


  -- Input register for RAM-based shift register delayMatch508
  delayMatch508_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch508_regin <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayMatch508_regin <= nfp_out_9_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch508_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 111
  -- 
  -- Write address counter for RAM-based shift register delayMatch508
  delayMatch508_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch508_waddr <= to_unsigned(16#00#, 7);
      ELSIF enb_1_20_0 = '1' THEN
        IF delayMatch508_waddr >= to_unsigned(16#6F#, 7) THEN 
          delayMatch508_waddr <= to_unsigned(16#00#, 7);
        ELSE 
          delayMatch508_waddr <= delayMatch508_waddr + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch508_wr_process;


  delayMatch508_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 111
  -- 
  -- Read address counter for RAM-based shift register delayMatch508
  delayMatch508_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch508_raddr <= to_unsigned(16#01#, 7);
      ELSIF enb_1_20_0 = '1' THEN
        IF delayMatch508_raddr >= to_unsigned(16#6F#, 7) THEN 
          delayMatch508_raddr <= to_unsigned(16#00#, 7);
        ELSE 
          delayMatch508_raddr <= delayMatch508_raddr + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch508_rd_process;


  -- Output register for RAM-based shift register delayMatch508
  delayMatch508_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayOut8 <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        delayOut8 <= delayMatch508_regout;
      END IF;
    END IF;
  END PROCESS delayMatch508_regoutc_process;


  Data_Type_Conversion3_out1_1(0) <= delayOut0;
  Data_Type_Conversion3_out1_1(1) <= delayOut1;
  Data_Type_Conversion3_out1_1(2) <= delayOut2;
  Data_Type_Conversion3_out1_1(3) <= delayOut3;
  Data_Type_Conversion3_out1_1(4) <= delayOut4;
  Data_Type_Conversion3_out1_1(5) <= delayOut5;
  Data_Type_Conversion3_out1_1(6) <= delayOut6;
  Data_Type_Conversion3_out1_1(7) <= delayOut7;
  Data_Type_Conversion3_out1_1(8) <= delayOut8;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion4_out1_2 <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        Data_Type_Conversion4_out1_2 <= Data_Type_Conversion4_out1_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_bypass_reg <= X"00000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay1_bypass_reg <= Data_Type_Conversion4_out1_2;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Data_Type_Conversion4_out1_3 <= Data_Type_Conversion4_out1_2 WHEN enb_1_4000_1 = '1' ELSE
      Delay1_bypass_reg;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion5_out1_2 <= X"00000000";
      ELSIF enb_1_20_0 = '1' THEN
        Data_Type_Conversion5_out1_2 <= Data_Type_Conversion5_out1_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_bypass_reg <= X"00000000";
      ELSIF enb_1_4000_1 = '1' THEN
        Delay_bypass_reg <= Data_Type_Conversion5_out1_2;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Data_Type_Conversion5_out1_3 <= Data_Type_Conversion5_out1_2 WHEN enb_1_4000_1 = '1' ELSE
      Delay_bypass_reg;

  theta_el <= Data_Type_Conversion6_out1_2;

  currents_dq_output <= Data_Type_Conversion3_out1_1;

  M_Mi <= Data_Type_Conversion4_out1_3;

  omega_out <= Data_Type_Conversion5_out1_3;

END rtl;

