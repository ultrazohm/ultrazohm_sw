-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\test_cost_function_only_without_delays\hdlsrc\test_cost_function_only_without_delays\test_cost_function_only_without_delays_src_HDL_DUT1.vhd
-- Created: 2022-10-14 15:57:26
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- done                          ce_out        1e-08
-- J_0                           ce_out        1e-08
-- J_1                           ce_out        1e-08
-- J_2                           ce_out        1e-08
-- J_3                           ce_out        1e-08
-- J_4                           ce_out        1e-08
-- J_5                           ce_out        1e-08
-- J_6                           ce_out        1e-08
-- J_7                           ce_out        1e-08
-- J_8                           ce_out        1e-08
-- J_9                           ce_out        1e-08
-- J_10                          ce_out        1e-08
-- J_11                          ce_out        1e-08
-- J_12                          ce_out        1e-08
-- J_13                          ce_out        1e-08
-- J_14                          ce_out        1e-08
-- J_15                          ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: test_cost_function_only_without_delays_src_HDL_DUT1
-- Source Path: test_cost_function_only_without_delays/HDL_DUT1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.test_cost_function_only_without_delays_src_HDL_DUT1_pkg.ALL;

ENTITY test_cost_function_only_without_delays_src_HDL_DUT1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        Prediction_0                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_1                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_2                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_3                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_4                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_5                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_6                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_7                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_8                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_9                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_10                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_11                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_12                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_13                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_14                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_15                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_16                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_17                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_18                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_19                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_20                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_21                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_22                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_23                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_24                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_25                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_26                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_27                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_28                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_29                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_30                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_31                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_32                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_33                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_34                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_35                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_36                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_37                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_38                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_39                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_40                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_41                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_42                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_43                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_44                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_45                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_46                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_47                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_48                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_49                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_50                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_51                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_52                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_53                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_54                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_55                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_56                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_57                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_58                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_59                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_60                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_61                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_62                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Prediction_63                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        id_ref_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_ref_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_ref_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_ref_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ce_out                            :   OUT   std_logic;
        done                              :   OUT   std_logic;
        J_0                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_1                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_2                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_3                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_4                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_5                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_6                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_7                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_8                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_9                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_10                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_11                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_12                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_13                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_14                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_15                              :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En11
        );
END test_cost_function_only_without_delays_src_HDL_DUT1;


ARCHITECTURE rtl OF test_cost_function_only_without_delays_src_HDL_DUT1 IS

  -- Component Declarations
  COMPONENT test_cost_function_only_without_delays_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT test_cost_function_only_without_delays_src_Subsystem_block
    PORT( Predicton                       :   IN    vector_of_std_logic_vector18(0 TO 63);  -- sfix18_En11 [64]
          id_ref                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          iq_ref                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          ix_ref                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          iy_ref                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          J1                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J2                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J3                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J4                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J5                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J6                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J7                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J8                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J9                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J10                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J11                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J12                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J13                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J14                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J15                             :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
          J16                             :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : test_cost_function_only_without_delays_src_Detect_Rise_Positive
    USE ENTITY work.test_cost_function_only_without_delays_src_Detect_Rise_Positive(rtl);

  FOR ALL : test_cost_function_only_without_delays_src_Subsystem_block
    USE ENTITY work.test_cost_function_only_without_delays_src_Subsystem_block(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Prediction                       : vector_of_signed18(0 TO 63);  -- sfix18_En11 [64]
  SIGNAL Switch_on4_out1                  : vector_of_signed18(0 TO 63);  -- sfix18_En11 [64]
  SIGNAL Delay10_out1                     : vector_of_signed18(0 TO 63);  -- sfix18_En11 [64]
  SIGNAL Switch_on4_out1_1                : vector_of_std_logic_vector18(0 TO 63);  -- ufix18 [64]
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL id_ref_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on3_out1                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay9_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL iq_ref_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on2_out1                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay8_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL ix_ref_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on1_out1                  : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay7_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL iy_ref_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on14_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay33_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL J                                : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_16                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_17                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_18                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_19                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_20                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_21                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_22                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_23                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_24                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_25                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_26                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_27                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_28                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_29                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL J_30                             : std_logic_vector(19 DOWNTO 0);  -- ufix20

BEGIN
  u_Detect_Rise_Positive : test_cost_function_only_without_delays_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => valid_in,
              Y => End_Cycle
              );

  u_Subsystem : test_cost_function_only_without_delays_src_Subsystem_block
    PORT MAP( Predicton => Switch_on4_out1_1,  -- sfix18_En11 [64]
              id_ref => std_logic_vector(Switch_on3_out1),  -- sfix18_En11
              iq_ref => std_logic_vector(Switch_on2_out1),  -- sfix18_En11
              ix_ref => std_logic_vector(Switch_on1_out1),  -- sfix18_En11
              iy_ref => std_logic_vector(Switch_on14_out1),  -- sfix18_En11
              J1 => J,  -- sfix20_En11
              J2 => J_16,  -- sfix20_En11
              J3 => J_17,  -- sfix20_En11
              J4 => J_18,  -- sfix20_En11
              J5 => J_19,  -- sfix20_En11
              J6 => J_20,  -- sfix20_En11
              J7 => J_21,  -- sfix20_En11
              J8 => J_22,  -- sfix20_En11
              J9 => J_23,  -- sfix20_En11
              J10 => J_24,  -- sfix20_En11
              J11 => J_25,  -- sfix20_En11
              J12 => J_26,  -- sfix20_En11
              J13 => J_27,  -- sfix20_En11
              J14 => J_28,  -- sfix20_En11
              J15 => J_29,  -- sfix20_En11
              J16 => J_30  -- sfix20_En11
              );

  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  enb <= clk_enable;

  Prediction(0) <= signed(Prediction_0);
  Prediction(1) <= signed(Prediction_1);
  Prediction(2) <= signed(Prediction_2);
  Prediction(3) <= signed(Prediction_3);
  Prediction(4) <= signed(Prediction_4);
  Prediction(5) <= signed(Prediction_5);
  Prediction(6) <= signed(Prediction_6);
  Prediction(7) <= signed(Prediction_7);
  Prediction(8) <= signed(Prediction_8);
  Prediction(9) <= signed(Prediction_9);
  Prediction(10) <= signed(Prediction_10);
  Prediction(11) <= signed(Prediction_11);
  Prediction(12) <= signed(Prediction_12);
  Prediction(13) <= signed(Prediction_13);
  Prediction(14) <= signed(Prediction_14);
  Prediction(15) <= signed(Prediction_15);
  Prediction(16) <= signed(Prediction_16);
  Prediction(17) <= signed(Prediction_17);
  Prediction(18) <= signed(Prediction_18);
  Prediction(19) <= signed(Prediction_19);
  Prediction(20) <= signed(Prediction_20);
  Prediction(21) <= signed(Prediction_21);
  Prediction(22) <= signed(Prediction_22);
  Prediction(23) <= signed(Prediction_23);
  Prediction(24) <= signed(Prediction_24);
  Prediction(25) <= signed(Prediction_25);
  Prediction(26) <= signed(Prediction_26);
  Prediction(27) <= signed(Prediction_27);
  Prediction(28) <= signed(Prediction_28);
  Prediction(29) <= signed(Prediction_29);
  Prediction(30) <= signed(Prediction_30);
  Prediction(31) <= signed(Prediction_31);
  Prediction(32) <= signed(Prediction_32);
  Prediction(33) <= signed(Prediction_33);
  Prediction(34) <= signed(Prediction_34);
  Prediction(35) <= signed(Prediction_35);
  Prediction(36) <= signed(Prediction_36);
  Prediction(37) <= signed(Prediction_37);
  Prediction(38) <= signed(Prediction_38);
  Prediction(39) <= signed(Prediction_39);
  Prediction(40) <= signed(Prediction_40);
  Prediction(41) <= signed(Prediction_41);
  Prediction(42) <= signed(Prediction_42);
  Prediction(43) <= signed(Prediction_43);
  Prediction(44) <= signed(Prediction_44);
  Prediction(45) <= signed(Prediction_45);
  Prediction(46) <= signed(Prediction_46);
  Prediction(47) <= signed(Prediction_47);
  Prediction(48) <= signed(Prediction_48);
  Prediction(49) <= signed(Prediction_49);
  Prediction(50) <= signed(Prediction_50);
  Prediction(51) <= signed(Prediction_51);
  Prediction(52) <= signed(Prediction_52);
  Prediction(53) <= signed(Prediction_53);
  Prediction(54) <= signed(Prediction_54);
  Prediction(55) <= signed(Prediction_55);
  Prediction(56) <= signed(Prediction_56);
  Prediction(57) <= signed(Prediction_57);
  Prediction(58) <= signed(Prediction_58);
  Prediction(59) <= signed(Prediction_59);
  Prediction(60) <= signed(Prediction_60);
  Prediction(61) <= signed(Prediction_61);
  Prediction(62) <= signed(Prediction_62);
  Prediction(63) <= signed(Prediction_63);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay10_out1 <= Switch_on4_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch_on4_out1 <= Delay10_out1 WHEN switch_compare_1 = '0' ELSE
      Prediction;

  outputgen: FOR k IN 0 TO 63 GENERATE
    Switch_on4_out1_1(k) <= std_logic_vector(Switch_on4_out1(k));
  END GENERATE;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  id_ref_AXI_signed <= signed(id_ref_AXI);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch_on3_out1 <= Delay9_out1 WHEN switch_compare_1_1 = '0' ELSE
      id_ref_AXI_signed;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  iq_ref_AXI_signed <= signed(iq_ref_AXI);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch_on2_out1 <= Delay8_out1 WHEN switch_compare_1_2 = '0' ELSE
      iq_ref_AXI_signed;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  ix_ref_AXI_signed <= signed(ix_ref_AXI);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch_on1_out1 <= Delay7_out1 WHEN switch_compare_1_3 = '0' ELSE
      ix_ref_AXI_signed;

  
  switch_compare_1_4 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  iy_ref_AXI_signed <= signed(iy_ref_AXI);

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay33_out1 <= Switch_on14_out1;
      END IF;
    END IF;
  END PROCESS Delay33_process;


  
  Switch_on14_out1 <= Delay33_out1 WHEN switch_compare_1_4 = '0' ELSE
      iy_ref_AXI_signed;

  ce_out <= clk_enable;

  done <= End_Cycle;

  J_0 <= J;

  J_1 <= J_16;

  J_2 <= J_17;

  J_3 <= J_18;

  J_4 <= J_19;

  J_5 <= J_20;

  J_6 <= J_21;

  J_7 <= J_22;

  J_8 <= J_23;

  J_9 <= J_24;

  J_10 <= J_25;

  J_11 <= J_26;

  J_12 <= J_27;

  J_13 <= J_28;

  J_14 <= J_29;

  J_15 <= J_30;

END rtl;

