-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_computeGradient_float_1u_22 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_currentErrorInput_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_currentErrorInput_empty_n : IN STD_LOGIC;
    p_currentErrorInput_read : OUT STD_LOGIC;
    p_outputPrevLayer_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_outputPrevLayer_empty_n : IN STD_LOGIC;
    p_outputPrevLayer_read : OUT STD_LOGIC;
    p_weightGradient_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_weightGradient_full_n : IN STD_LOGIC;
    p_weightGradient_write : OUT STD_LOGIC;
    p_biasGradient_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_biasGradient_full_n : IN STD_LOGIC;
    p_biasGradient_write : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k_empty_n : IN STD_LOGIC;
    p_k_read : OUT STD_LOGIC;
    p_currentErrorOutput_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_currentErrorOutput_ce0 : OUT STD_LOGIC;
    p_currentErrorOutput_we0 : OUT STD_LOGIC;
    p_currentErrorOutput_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_full_n : IN STD_LOGIC;
    p_n_out_write : OUT STD_LOGIC );
end;


architecture behav of BGD_computeGradient_float_1u_22 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_currentErrorInput_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln366_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_outputPrevLayer_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln371_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_weightGradient_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln371_reg_208_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_biasGradient_blk_n : STD_LOGIC;
    signal p_n_blk_n : STD_LOGIC;
    signal p_k_blk_n : STD_LOGIC;
    signal p_n_out_blk_n : STD_LOGIC;
    signal k_reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_read_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_k_read_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal add_ln366_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln366_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln371_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln371_reg_208_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln371_reg_208_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal n_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln366_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_138_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component BGD_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fmul_32ns_32ns_32_4_max_dsp_1_U38 : component BGD_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_138_p0,
        din1 => tmp_reg_203,
        ce => grp_fu_138_ce,
        dout => grp_fu_138_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln371_fu_163_p2 = ap_const_lv1_0))) then 
                k_reg_127 <= k_1_fu_168_p2;
            elsif ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_127 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    n_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_reg_116 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_reg_116 <= add_ln366_reg_198;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln366_reg_198 <= add_ln366_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln371_reg_208 <= icmp_ln371_fu_163_p2;
                icmp_ln371_reg_208_pp0_iter1_reg <= icmp_ln371_reg_208;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln371_reg_208_pp0_iter2_reg <= icmp_ln371_reg_208_pp0_iter1_reg;
                icmp_ln371_reg_208_pp0_iter3_reg <= icmp_ln371_reg_208_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_k_read_reg_189 <= p_k_dout;
                p_n_read_reg_184 <= p_n_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_203 <= tmp_fu_158_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_currentErrorInput_empty_n, p_biasGradient_full_n, p_n_empty_n, p_k_empty_n, p_n_out_full_n, ap_CS_fsm_state2, icmp_ln366_fu_142_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln371_fu_163_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln371_fu_163_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln371_fu_163_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln366_fu_147_p2 <= std_logic_vector(unsigned(n_reg_116) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_outputPrevLayer_empty_n, p_weightGradient_full_n, ap_enable_reg_pp0_iter1, icmp_ln371_reg_208, ap_enable_reg_pp0_iter4, icmp_ln371_reg_208_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln371_reg_208_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (p_weightGradient_full_n = ap_const_logic_0)) or ((icmp_ln371_reg_208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_outputPrevLayer_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_outputPrevLayer_empty_n, p_weightGradient_full_n, ap_enable_reg_pp0_iter1, icmp_ln371_reg_208, ap_enable_reg_pp0_iter4, icmp_ln371_reg_208_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln371_reg_208_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (p_weightGradient_full_n = ap_const_logic_0)) or ((icmp_ln371_reg_208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_outputPrevLayer_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_outputPrevLayer_empty_n, p_weightGradient_full_n, ap_enable_reg_pp0_iter1, icmp_ln371_reg_208, ap_enable_reg_pp0_iter4, icmp_ln371_reg_208_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln371_reg_208_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (p_weightGradient_full_n = ap_const_logic_0)) or ((icmp_ln371_reg_208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_outputPrevLayer_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_n_empty_n, p_k_empty_n, p_n_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, icmp_ln366_fu_142_p2)
    begin
                ap_block_state2 <= (((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_outputPrevLayer_empty_n, icmp_ln371_reg_208)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln371_reg_208 = ap_const_lv1_0) and (p_outputPrevLayer_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter4_assign_proc : process(p_weightGradient_full_n, icmp_ln371_reg_208_pp0_iter3_reg)
    begin
                ap_block_state7_pp0_stage0_iter4 <= ((icmp_ln371_reg_208_pp0_iter3_reg = ap_const_lv1_0) and (p_weightGradient_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln371_fu_163_p2)
    begin
        if ((icmp_ln371_fu_163_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln366_fu_142_p2)
    begin
        if ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln366_fu_142_p2)
    begin
        if ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_138_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_138_ce <= ap_const_logic_1;
        else 
            grp_fu_138_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_138_p0 <= p_outputPrevLayer_dout;
    icmp_ln366_fu_142_p2 <= "1" when (n_reg_116 = p_n_read_reg_184) else "0";
    icmp_ln371_fu_163_p2 <= "1" when (k_reg_127 = p_k_read_reg_189) else "0";
    k_1_fu_168_p2 <= std_logic_vector(unsigned(k_reg_127) + unsigned(ap_const_lv32_1));

    p_biasGradient_blk_n_assign_proc : process(p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln366_fu_142_p2)
    begin
        if (((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_biasGradient_blk_n <= p_biasGradient_full_n;
        else 
            p_biasGradient_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_biasGradient_din <= p_currentErrorInput_dout;

    p_biasGradient_write_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln366_fu_142_p2)
    begin
        if ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_biasGradient_write <= ap_const_logic_1;
        else 
            p_biasGradient_write <= ap_const_logic_0;
        end if; 
    end process;


    p_currentErrorInput_blk_n_assign_proc : process(p_currentErrorInput_empty_n, ap_CS_fsm_state2, icmp_ln366_fu_142_p2)
    begin
        if (((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_currentErrorInput_blk_n <= p_currentErrorInput_empty_n;
        else 
            p_currentErrorInput_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_currentErrorInput_read_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln366_fu_142_p2)
    begin
        if ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_currentErrorInput_read <= ap_const_logic_1;
        else 
            p_currentErrorInput_read <= ap_const_logic_0;
        end if; 
    end process;

    p_currentErrorOutput_address0 <= zext_ln366_fu_153_p1(7 - 1 downto 0);

    p_currentErrorOutput_ce0_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln366_fu_142_p2)
    begin
        if ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_currentErrorOutput_ce0 <= ap_const_logic_1;
        else 
            p_currentErrorOutput_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_currentErrorOutput_d0 <= p_currentErrorInput_dout;

    p_currentErrorOutput_we0_assign_proc : process(p_currentErrorInput_empty_n, p_biasGradient_full_n, ap_CS_fsm_state2, icmp_ln366_fu_142_p2)
    begin
        if ((not((((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_biasGradient_full_n = ap_const_logic_0)) or ((icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (p_currentErrorInput_empty_n = ap_const_logic_0)))) and (icmp_ln366_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_currentErrorOutput_we0 <= ap_const_logic_1;
        else 
            p_currentErrorOutput_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_k_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_k_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_blk_n <= p_k_empty_n;
        else 
            p_k_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_k_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_read <= ap_const_logic_1;
        else 
            p_k_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_blk_n <= p_n_out_full_n;
        else 
            p_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_n_out_din <= p_n_dout;

    p_n_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_write <= ap_const_logic_1;
        else 
            p_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_outputPrevLayer_blk_n_assign_proc : process(p_outputPrevLayer_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln371_reg_208)
    begin
        if (((icmp_ln371_reg_208 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_outputPrevLayer_blk_n <= p_outputPrevLayer_empty_n;
        else 
            p_outputPrevLayer_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_outputPrevLayer_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln371_reg_208, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln371_reg_208 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_outputPrevLayer_read <= ap_const_logic_1;
        else 
            p_outputPrevLayer_read <= ap_const_logic_0;
        end if; 
    end process;


    p_weightGradient_blk_n_assign_proc : process(p_weightGradient_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln371_reg_208_pp0_iter3_reg)
    begin
        if (((icmp_ln371_reg_208_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_weightGradient_blk_n <= p_weightGradient_full_n;
        else 
            p_weightGradient_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_weightGradient_din <= grp_fu_138_p2;

    p_weightGradient_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln371_reg_208_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln371_reg_208_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_weightGradient_write <= ap_const_logic_1;
        else 
            p_weightGradient_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_158_p1 <= p_currentErrorInput_dout;
    zext_ln366_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_116),64));
end behav;
