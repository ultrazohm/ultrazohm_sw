-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_mpc_delay_comp\delay_com_ip_src_delay_comp.vhd
-- Created: 2022-08-16 17:01:37
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- id_pred_pu                    ce_out        1e-08
-- iq_pred_pu                    ce_out        1e-08
-- ix_pred_pu                    ce_out        1e-08
-- iy_pred_pu                    ce_out        1e-08
-- id_pred_pu_AXI                ce_out        1e-08
-- iq_pred_pu_AXI                ce_out        1e-08
-- ix_pred_pu_AXI                ce_out        1e-08
-- iy_pred_pu_AXI                ce_out        1e-08
-- calc_done                     ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: delay_com_ip_src_delay_comp
-- Source Path: uz_mpc_delay_comp/delay_comp
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.delay_com_ip_src_delay_comp_pkg.ALL;

ENTITY delay_com_ip_src_delay_comp IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        id_pu                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        iq_pu                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        ix_pu                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_pu                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        vd_pu_0                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_1                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_2                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_3                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_4                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_5                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_6                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_7                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_8                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_9                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_10                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_11                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_12                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_13                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_14                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_15                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_16                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_17                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_18                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_19                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_20                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_21                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_22                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_23                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_24                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_25                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_26                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_27                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_28                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_29                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_30                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_31                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_32                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_33                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_34                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_35                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_36                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_37                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_38                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_39                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_40                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_41                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_42                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_43                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_44                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_45                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_46                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_47                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_48                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_49                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_50                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_51                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_52                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_53                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_54                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_55                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_56                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_57                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_58                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_59                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_60                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_61                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_62                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vd_pu_63                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_0                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_1                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_2                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_3                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_4                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_5                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_6                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_7                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_8                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_9                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_10                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_11                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_12                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_13                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_14                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_15                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_16                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_17                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_18                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_19                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_20                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_21                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_22                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_23                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_24                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_25                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_26                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_27                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_28                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_29                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_30                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_31                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_32                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_33                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_34                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_35                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_36                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_37                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_38                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_39                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_40                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_41                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_42                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_43                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_44                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_45                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_46                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_47                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_48                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_49                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_50                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_51                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_52                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_53                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_54                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_55                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_56                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_57                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_58                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_59                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_60                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_61                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_62                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu_63                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_0                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_1                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_2                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_3                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_4                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_5                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_6                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_7                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_8                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_9                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_10                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_11                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_12                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_13                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_14                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_15                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_16                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_17                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_18                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_19                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_20                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_21                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_22                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_23                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_24                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_25                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_26                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_27                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_28                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_29                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_30                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_31                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_32                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_33                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_34                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_35                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_36                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_37                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_38                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_39                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_40                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_41                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_42                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_43                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_44                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_45                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_46                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_47                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_48                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_49                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_50                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_51                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_52                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_53                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_54                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_55                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_56                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_57                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_58                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_59                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_60                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_61                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_62                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu_63                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_0                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_1                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_2                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_3                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_4                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_5                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_6                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_7                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_8                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_9                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_10                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_11                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_12                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_13                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_14                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_15                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_16                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_17                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_18                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_19                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_20                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_21                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_22                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_23                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_24                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_25                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_26                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_27                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_28                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_29                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_30                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_31                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_32                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_33                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_34                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_35                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_36                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_37                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_38                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_39                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_40                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_41                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_42                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_43                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_44                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_45                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_46                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_47                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_48                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_49                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_50                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_51                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_52                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_53                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_54                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_55                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_56                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_57                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_58                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_59                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_60                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_61                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_62                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu_63                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        omega_m_pu                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Rs_over_ZB_AXI                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ts_times_ZB_over_Ld_AXI           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ts_times_ZB_over_Lq_AXI           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ts_times_ZB_over_Lx_AXI           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ts_times_ZB_over_Ly_AXI           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ld_over_LB_AXI                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Lq_over_LB_AXI                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        psi_pm_over_psiB_AXI              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        polepairs_AXI                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        index                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        trigger                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        id_pred_pu                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        iq_pred_pu                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        ix_pred_pu                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        iy_pred_pu                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        id_pred_pu_AXI                    :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        iq_pred_pu_AXI                    :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        ix_pred_pu_AXI                    :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        iy_pred_pu_AXI                    :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        calc_done                         :   OUT   std_logic
        );
END delay_com_ip_src_delay_comp;


ARCHITECTURE rtl OF delay_com_ip_src_delay_comp IS

  -- Component Declarations
  COMPONENT delay_com_ip_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT delay_com_ip_src_delay_compensation
    PORT( vd_pu                           :   IN    vector_of_std_logic_vector27(0 TO 63);  -- sfix27_En24 [64]
          vq_pu                           :   IN    vector_of_std_logic_vector27(0 TO 63);  -- sfix27_En24 [64]
          vx_pu                           :   IN    vector_of_std_logic_vector27(0 TO 63);  -- sfix27_En24 [64]
          vy_pu                           :   IN    vector_of_std_logic_vector27(0 TO 63);  -- sfix27_En24 [64]
          id_k_pu                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          iq_k_pu                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          ix_k_pu                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          iy_k_pu                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          omega_m_pu                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Ts_times_ZB_over_Ld             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Ts_times_ZB_over_Lq             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Ts_times_ZB_over_Lx             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Ts_times_ZB_over_Ly             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Rs_over_ZB                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Ld_over_LB                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Lq_over_LB                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          psi_pm_over_psiB                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          polepairs                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          index                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          id_delay_pu                     :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
          iq_delay_pu                     :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
          ix_delay_pu                     :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
          iy_delay_pu                     :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En24
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : delay_com_ip_src_Detect_Rise_Positive
    USE ENTITY work.delay_com_ip_src_Detect_Rise_Positive(rtl);

  FOR ALL : delay_com_ip_src_delay_compensation
    USE ENTITY work.delay_com_ip_src_delay_compensation(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL vd_pu                            : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Delay59_out1                     : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Switch28_out1                    : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Delay57_out1                     : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL From7_out1                       : vector_of_std_logic_vector27(0 TO 63);  -- ufix27 [64]
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL vq_pu                            : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Delay60_out1                     : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Switch29_out1                    : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Delay58_out1                     : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL From6_out1                       : vector_of_std_logic_vector27(0 TO 63);  -- ufix27 [64]
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL vx_pu                            : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Delay71_out1                     : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Switch30_out1                    : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Delay70_out1                     : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL From5_out1                       : vector_of_std_logic_vector27(0 TO 63);  -- ufix27 [64]
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL vy_pu                            : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Delay73_out1                     : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Switch31_out1                    : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL Delay72_out1                     : vector_of_signed27(0 TO 63);  -- sfix27_En24 [64]
  SIGNAL From4_out1                       : vector_of_std_logic_vector27(0 TO 63);  -- ufix27 [64]
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL id_pu_signed                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay2_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Switch_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay3_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL iq_pu_signed                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay4_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Switch1_out1                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay5_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL ix_pu_signed                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay6_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch2_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay7_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL iy_pu_signed                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay8_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch3_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay9_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL omega_m_pu_signed                : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay12_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch5_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay13_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL Ts_times_ZB_over_Ld_AXI_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay27_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch13_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay28_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL Ts_times_ZB_over_Lq_AXI_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay29_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch14_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay30_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL Ts_times_ZB_over_Lx_AXI_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay31_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch15_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay32_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL Ts_times_ZB_over_Ly_AXI_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay33_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch16_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay34_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL Rs_over_ZB_AXI_signed            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay25_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch12_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay26_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL Ld_over_LB_AXI_signed            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay35_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch17_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay36_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL Lq_over_LB_AXI_signed            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay37_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch18_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay38_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL psi_pm_over_psiB_AXI_signed      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay39_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch19_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay40_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL polepairs_AXI_unsigned           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay43_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch21_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay44_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay75_ctrl_const_out           : std_logic;
  SIGNAL Delay75_ctrl_delay_out           : std_logic;
  SIGNAL Delay75_Initial_Val_out          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL Delay10_ctrl_const_out           : std_logic;
  SIGNAL Delay10_ctrl_delay_out           : std_logic;
  SIGNAL Delay10_Initial_Val_out          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL index_unsigned                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay1_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch4_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay10_out                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay10_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay75_out                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay75_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL id_delay_pu                      : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL iq_delay_pu                      : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL ix_delay_pu                      : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL iy_delay_pu                      : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL id_delay_pu_signed               : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL id_delay_pu_1                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL iq_delay_pu_signed               : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL iq_delay_pu_1                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL ix_delay_pu_signed               : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL ix_delay_pu_1                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL iy_delay_pu_signed               : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL iy_delay_pu_1                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL id_delay_pu_2                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL iq_delay_pu_2                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL ix_delay_pu_2                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL iy_delay_pu_2                    : signed(26 DOWNTO 0);  -- sfix27_En24

BEGIN
  u_Detect_Rise_Positive : delay_com_ip_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay_out1,
              Y => Detect_Rise_Positive_out1
              );

  u_delay_compensation : delay_com_ip_src_delay_compensation
    PORT MAP( vd_pu => From7_out1,  -- sfix27_En24 [64]
              vq_pu => From6_out1,  -- sfix27_En24 [64]
              vx_pu => From5_out1,  -- sfix27_En24 [64]
              vy_pu => From4_out1,  -- sfix27_En24 [64]
              id_k_pu => std_logic_vector(Switch_out1),  -- sfix27_En16
              iq_k_pu => std_logic_vector(Switch1_out1),  -- sfix27_En16
              ix_k_pu => std_logic_vector(Switch2_out1),  -- sfix18_En11
              iy_k_pu => std_logic_vector(Switch3_out1),  -- sfix18_En11
              omega_m_pu => std_logic_vector(Switch5_out1),  -- sfix18_En15
              Ts_times_ZB_over_Ld => std_logic_vector(Switch13_out1),  -- sfix18_En15
              Ts_times_ZB_over_Lq => std_logic_vector(Switch14_out1),  -- sfix18_En15
              Ts_times_ZB_over_Lx => std_logic_vector(Switch15_out1),  -- sfix18_En15
              Ts_times_ZB_over_Ly => std_logic_vector(Switch16_out1),  -- sfix18_En15
              Rs_over_ZB => std_logic_vector(Switch12_out1),  -- sfix18_En15
              Ld_over_LB => std_logic_vector(Switch17_out1),  -- sfix18_En15
              Lq_over_LB => std_logic_vector(Switch18_out1),  -- sfix18_En15
              psi_pm_over_psiB => std_logic_vector(Switch19_out1),  -- sfix18_En15
              polepairs => std_logic_vector(Switch21_out1),  -- uint32
              index => std_logic_vector(Delay75_out1),  -- uint32
              id_delay_pu => id_delay_pu,  -- sfix27_En24
              iq_delay_pu => iq_delay_pu,  -- sfix27_En24
              ix_delay_pu => ix_delay_pu,  -- sfix27_En24
              iy_delay_pu => iy_delay_pu  -- sfix27_En24
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= trigger;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  switch_compare_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  vd_pu(0) <= signed(vd_pu_0);
  vd_pu(1) <= signed(vd_pu_1);
  vd_pu(2) <= signed(vd_pu_2);
  vd_pu(3) <= signed(vd_pu_3);
  vd_pu(4) <= signed(vd_pu_4);
  vd_pu(5) <= signed(vd_pu_5);
  vd_pu(6) <= signed(vd_pu_6);
  vd_pu(7) <= signed(vd_pu_7);
  vd_pu(8) <= signed(vd_pu_8);
  vd_pu(9) <= signed(vd_pu_9);
  vd_pu(10) <= signed(vd_pu_10);
  vd_pu(11) <= signed(vd_pu_11);
  vd_pu(12) <= signed(vd_pu_12);
  vd_pu(13) <= signed(vd_pu_13);
  vd_pu(14) <= signed(vd_pu_14);
  vd_pu(15) <= signed(vd_pu_15);
  vd_pu(16) <= signed(vd_pu_16);
  vd_pu(17) <= signed(vd_pu_17);
  vd_pu(18) <= signed(vd_pu_18);
  vd_pu(19) <= signed(vd_pu_19);
  vd_pu(20) <= signed(vd_pu_20);
  vd_pu(21) <= signed(vd_pu_21);
  vd_pu(22) <= signed(vd_pu_22);
  vd_pu(23) <= signed(vd_pu_23);
  vd_pu(24) <= signed(vd_pu_24);
  vd_pu(25) <= signed(vd_pu_25);
  vd_pu(26) <= signed(vd_pu_26);
  vd_pu(27) <= signed(vd_pu_27);
  vd_pu(28) <= signed(vd_pu_28);
  vd_pu(29) <= signed(vd_pu_29);
  vd_pu(30) <= signed(vd_pu_30);
  vd_pu(31) <= signed(vd_pu_31);
  vd_pu(32) <= signed(vd_pu_32);
  vd_pu(33) <= signed(vd_pu_33);
  vd_pu(34) <= signed(vd_pu_34);
  vd_pu(35) <= signed(vd_pu_35);
  vd_pu(36) <= signed(vd_pu_36);
  vd_pu(37) <= signed(vd_pu_37);
  vd_pu(38) <= signed(vd_pu_38);
  vd_pu(39) <= signed(vd_pu_39);
  vd_pu(40) <= signed(vd_pu_40);
  vd_pu(41) <= signed(vd_pu_41);
  vd_pu(42) <= signed(vd_pu_42);
  vd_pu(43) <= signed(vd_pu_43);
  vd_pu(44) <= signed(vd_pu_44);
  vd_pu(45) <= signed(vd_pu_45);
  vd_pu(46) <= signed(vd_pu_46);
  vd_pu(47) <= signed(vd_pu_47);
  vd_pu(48) <= signed(vd_pu_48);
  vd_pu(49) <= signed(vd_pu_49);
  vd_pu(50) <= signed(vd_pu_50);
  vd_pu(51) <= signed(vd_pu_51);
  vd_pu(52) <= signed(vd_pu_52);
  vd_pu(53) <= signed(vd_pu_53);
  vd_pu(54) <= signed(vd_pu_54);
  vd_pu(55) <= signed(vd_pu_55);
  vd_pu(56) <= signed(vd_pu_56);
  vd_pu(57) <= signed(vd_pu_57);
  vd_pu(58) <= signed(vd_pu_58);
  vd_pu(59) <= signed(vd_pu_59);
  vd_pu(60) <= signed(vd_pu_60);
  vd_pu(61) <= signed(vd_pu_61);
  vd_pu(62) <= signed(vd_pu_62);
  vd_pu(63) <= signed(vd_pu_63);

  Delay59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay59_out1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay59_out1 <= vd_pu;
      END IF;
    END IF;
  END PROCESS Delay59_process;


  Delay57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay57_out1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay57_out1 <= Switch28_out1;
      END IF;
    END IF;
  END PROCESS Delay57_process;


  
  Switch28_out1 <= Delay57_out1 WHEN switch_compare_1 = '0' ELSE
      Delay59_out1;

  outputgen3: FOR k IN 0 TO 63 GENERATE
    From7_out1(k) <= std_logic_vector(Switch28_out1(k));
  END GENERATE;

  
  switch_compare_1_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  vq_pu(0) <= signed(vq_pu_0);
  vq_pu(1) <= signed(vq_pu_1);
  vq_pu(2) <= signed(vq_pu_2);
  vq_pu(3) <= signed(vq_pu_3);
  vq_pu(4) <= signed(vq_pu_4);
  vq_pu(5) <= signed(vq_pu_5);
  vq_pu(6) <= signed(vq_pu_6);
  vq_pu(7) <= signed(vq_pu_7);
  vq_pu(8) <= signed(vq_pu_8);
  vq_pu(9) <= signed(vq_pu_9);
  vq_pu(10) <= signed(vq_pu_10);
  vq_pu(11) <= signed(vq_pu_11);
  vq_pu(12) <= signed(vq_pu_12);
  vq_pu(13) <= signed(vq_pu_13);
  vq_pu(14) <= signed(vq_pu_14);
  vq_pu(15) <= signed(vq_pu_15);
  vq_pu(16) <= signed(vq_pu_16);
  vq_pu(17) <= signed(vq_pu_17);
  vq_pu(18) <= signed(vq_pu_18);
  vq_pu(19) <= signed(vq_pu_19);
  vq_pu(20) <= signed(vq_pu_20);
  vq_pu(21) <= signed(vq_pu_21);
  vq_pu(22) <= signed(vq_pu_22);
  vq_pu(23) <= signed(vq_pu_23);
  vq_pu(24) <= signed(vq_pu_24);
  vq_pu(25) <= signed(vq_pu_25);
  vq_pu(26) <= signed(vq_pu_26);
  vq_pu(27) <= signed(vq_pu_27);
  vq_pu(28) <= signed(vq_pu_28);
  vq_pu(29) <= signed(vq_pu_29);
  vq_pu(30) <= signed(vq_pu_30);
  vq_pu(31) <= signed(vq_pu_31);
  vq_pu(32) <= signed(vq_pu_32);
  vq_pu(33) <= signed(vq_pu_33);
  vq_pu(34) <= signed(vq_pu_34);
  vq_pu(35) <= signed(vq_pu_35);
  vq_pu(36) <= signed(vq_pu_36);
  vq_pu(37) <= signed(vq_pu_37);
  vq_pu(38) <= signed(vq_pu_38);
  vq_pu(39) <= signed(vq_pu_39);
  vq_pu(40) <= signed(vq_pu_40);
  vq_pu(41) <= signed(vq_pu_41);
  vq_pu(42) <= signed(vq_pu_42);
  vq_pu(43) <= signed(vq_pu_43);
  vq_pu(44) <= signed(vq_pu_44);
  vq_pu(45) <= signed(vq_pu_45);
  vq_pu(46) <= signed(vq_pu_46);
  vq_pu(47) <= signed(vq_pu_47);
  vq_pu(48) <= signed(vq_pu_48);
  vq_pu(49) <= signed(vq_pu_49);
  vq_pu(50) <= signed(vq_pu_50);
  vq_pu(51) <= signed(vq_pu_51);
  vq_pu(52) <= signed(vq_pu_52);
  vq_pu(53) <= signed(vq_pu_53);
  vq_pu(54) <= signed(vq_pu_54);
  vq_pu(55) <= signed(vq_pu_55);
  vq_pu(56) <= signed(vq_pu_56);
  vq_pu(57) <= signed(vq_pu_57);
  vq_pu(58) <= signed(vq_pu_58);
  vq_pu(59) <= signed(vq_pu_59);
  vq_pu(60) <= signed(vq_pu_60);
  vq_pu(61) <= signed(vq_pu_61);
  vq_pu(62) <= signed(vq_pu_62);
  vq_pu(63) <= signed(vq_pu_63);

  Delay60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay60_out1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay60_out1 <= vq_pu;
      END IF;
    END IF;
  END PROCESS Delay60_process;


  Delay58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay58_out1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay58_out1 <= Switch29_out1;
      END IF;
    END IF;
  END PROCESS Delay58_process;


  
  Switch29_out1 <= Delay58_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay60_out1;

  outputgen2: FOR k IN 0 TO 63 GENERATE
    From6_out1(k) <= std_logic_vector(Switch29_out1(k));
  END GENERATE;

  
  switch_compare_1_2 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  vx_pu(0) <= signed(vx_pu_0);
  vx_pu(1) <= signed(vx_pu_1);
  vx_pu(2) <= signed(vx_pu_2);
  vx_pu(3) <= signed(vx_pu_3);
  vx_pu(4) <= signed(vx_pu_4);
  vx_pu(5) <= signed(vx_pu_5);
  vx_pu(6) <= signed(vx_pu_6);
  vx_pu(7) <= signed(vx_pu_7);
  vx_pu(8) <= signed(vx_pu_8);
  vx_pu(9) <= signed(vx_pu_9);
  vx_pu(10) <= signed(vx_pu_10);
  vx_pu(11) <= signed(vx_pu_11);
  vx_pu(12) <= signed(vx_pu_12);
  vx_pu(13) <= signed(vx_pu_13);
  vx_pu(14) <= signed(vx_pu_14);
  vx_pu(15) <= signed(vx_pu_15);
  vx_pu(16) <= signed(vx_pu_16);
  vx_pu(17) <= signed(vx_pu_17);
  vx_pu(18) <= signed(vx_pu_18);
  vx_pu(19) <= signed(vx_pu_19);
  vx_pu(20) <= signed(vx_pu_20);
  vx_pu(21) <= signed(vx_pu_21);
  vx_pu(22) <= signed(vx_pu_22);
  vx_pu(23) <= signed(vx_pu_23);
  vx_pu(24) <= signed(vx_pu_24);
  vx_pu(25) <= signed(vx_pu_25);
  vx_pu(26) <= signed(vx_pu_26);
  vx_pu(27) <= signed(vx_pu_27);
  vx_pu(28) <= signed(vx_pu_28);
  vx_pu(29) <= signed(vx_pu_29);
  vx_pu(30) <= signed(vx_pu_30);
  vx_pu(31) <= signed(vx_pu_31);
  vx_pu(32) <= signed(vx_pu_32);
  vx_pu(33) <= signed(vx_pu_33);
  vx_pu(34) <= signed(vx_pu_34);
  vx_pu(35) <= signed(vx_pu_35);
  vx_pu(36) <= signed(vx_pu_36);
  vx_pu(37) <= signed(vx_pu_37);
  vx_pu(38) <= signed(vx_pu_38);
  vx_pu(39) <= signed(vx_pu_39);
  vx_pu(40) <= signed(vx_pu_40);
  vx_pu(41) <= signed(vx_pu_41);
  vx_pu(42) <= signed(vx_pu_42);
  vx_pu(43) <= signed(vx_pu_43);
  vx_pu(44) <= signed(vx_pu_44);
  vx_pu(45) <= signed(vx_pu_45);
  vx_pu(46) <= signed(vx_pu_46);
  vx_pu(47) <= signed(vx_pu_47);
  vx_pu(48) <= signed(vx_pu_48);
  vx_pu(49) <= signed(vx_pu_49);
  vx_pu(50) <= signed(vx_pu_50);
  vx_pu(51) <= signed(vx_pu_51);
  vx_pu(52) <= signed(vx_pu_52);
  vx_pu(53) <= signed(vx_pu_53);
  vx_pu(54) <= signed(vx_pu_54);
  vx_pu(55) <= signed(vx_pu_55);
  vx_pu(56) <= signed(vx_pu_56);
  vx_pu(57) <= signed(vx_pu_57);
  vx_pu(58) <= signed(vx_pu_58);
  vx_pu(59) <= signed(vx_pu_59);
  vx_pu(60) <= signed(vx_pu_60);
  vx_pu(61) <= signed(vx_pu_61);
  vx_pu(62) <= signed(vx_pu_62);
  vx_pu(63) <= signed(vx_pu_63);

  Delay71_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay71_out1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay71_out1 <= vx_pu;
      END IF;
    END IF;
  END PROCESS Delay71_process;


  Delay70_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay70_out1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay70_out1 <= Switch30_out1;
      END IF;
    END IF;
  END PROCESS Delay70_process;


  
  Switch30_out1 <= Delay70_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay71_out1;

  outputgen1: FOR k IN 0 TO 63 GENERATE
    From5_out1(k) <= std_logic_vector(Switch30_out1(k));
  END GENERATE;

  
  switch_compare_1_3 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  vy_pu(0) <= signed(vy_pu_0);
  vy_pu(1) <= signed(vy_pu_1);
  vy_pu(2) <= signed(vy_pu_2);
  vy_pu(3) <= signed(vy_pu_3);
  vy_pu(4) <= signed(vy_pu_4);
  vy_pu(5) <= signed(vy_pu_5);
  vy_pu(6) <= signed(vy_pu_6);
  vy_pu(7) <= signed(vy_pu_7);
  vy_pu(8) <= signed(vy_pu_8);
  vy_pu(9) <= signed(vy_pu_9);
  vy_pu(10) <= signed(vy_pu_10);
  vy_pu(11) <= signed(vy_pu_11);
  vy_pu(12) <= signed(vy_pu_12);
  vy_pu(13) <= signed(vy_pu_13);
  vy_pu(14) <= signed(vy_pu_14);
  vy_pu(15) <= signed(vy_pu_15);
  vy_pu(16) <= signed(vy_pu_16);
  vy_pu(17) <= signed(vy_pu_17);
  vy_pu(18) <= signed(vy_pu_18);
  vy_pu(19) <= signed(vy_pu_19);
  vy_pu(20) <= signed(vy_pu_20);
  vy_pu(21) <= signed(vy_pu_21);
  vy_pu(22) <= signed(vy_pu_22);
  vy_pu(23) <= signed(vy_pu_23);
  vy_pu(24) <= signed(vy_pu_24);
  vy_pu(25) <= signed(vy_pu_25);
  vy_pu(26) <= signed(vy_pu_26);
  vy_pu(27) <= signed(vy_pu_27);
  vy_pu(28) <= signed(vy_pu_28);
  vy_pu(29) <= signed(vy_pu_29);
  vy_pu(30) <= signed(vy_pu_30);
  vy_pu(31) <= signed(vy_pu_31);
  vy_pu(32) <= signed(vy_pu_32);
  vy_pu(33) <= signed(vy_pu_33);
  vy_pu(34) <= signed(vy_pu_34);
  vy_pu(35) <= signed(vy_pu_35);
  vy_pu(36) <= signed(vy_pu_36);
  vy_pu(37) <= signed(vy_pu_37);
  vy_pu(38) <= signed(vy_pu_38);
  vy_pu(39) <= signed(vy_pu_39);
  vy_pu(40) <= signed(vy_pu_40);
  vy_pu(41) <= signed(vy_pu_41);
  vy_pu(42) <= signed(vy_pu_42);
  vy_pu(43) <= signed(vy_pu_43);
  vy_pu(44) <= signed(vy_pu_44);
  vy_pu(45) <= signed(vy_pu_45);
  vy_pu(46) <= signed(vy_pu_46);
  vy_pu(47) <= signed(vy_pu_47);
  vy_pu(48) <= signed(vy_pu_48);
  vy_pu(49) <= signed(vy_pu_49);
  vy_pu(50) <= signed(vy_pu_50);
  vy_pu(51) <= signed(vy_pu_51);
  vy_pu(52) <= signed(vy_pu_52);
  vy_pu(53) <= signed(vy_pu_53);
  vy_pu(54) <= signed(vy_pu_54);
  vy_pu(55) <= signed(vy_pu_55);
  vy_pu(56) <= signed(vy_pu_56);
  vy_pu(57) <= signed(vy_pu_57);
  vy_pu(58) <= signed(vy_pu_58);
  vy_pu(59) <= signed(vy_pu_59);
  vy_pu(60) <= signed(vy_pu_60);
  vy_pu(61) <= signed(vy_pu_61);
  vy_pu(62) <= signed(vy_pu_62);
  vy_pu(63) <= signed(vy_pu_63);

  Delay73_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay73_out1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay73_out1 <= vy_pu;
      END IF;
    END IF;
  END PROCESS Delay73_process;


  Delay72_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay72_out1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay72_out1 <= Switch31_out1;
      END IF;
    END IF;
  END PROCESS Delay72_process;


  
  Switch31_out1 <= Delay72_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay73_out1;

  outputgen: FOR k IN 0 TO 63 GENERATE
    From4_out1(k) <= std_logic_vector(Switch31_out1(k));
  END GENERATE;

  
  switch_compare_1_4 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  id_pu_signed <= signed(id_pu);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay2_out1 <= id_pu_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_out1 <= Delay3_out1 WHEN switch_compare_1_4 = '0' ELSE
      Delay2_out1;

  
  switch_compare_1_5 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  iq_pu_signed <= signed(iq_pu);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay4_out1 <= iq_pu_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch1_out1 <= Delay5_out1 WHEN switch_compare_1_5 = '0' ELSE
      Delay4_out1;

  
  switch_compare_1_6 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  ix_pu_signed <= signed(ix_pu);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay6_out1 <= ix_pu_signed;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch2_out1 <= Delay7_out1 WHEN switch_compare_1_6 = '0' ELSE
      Delay6_out1;

  
  switch_compare_1_7 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  iy_pu_signed <= signed(iy_pu);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay8_out1 <= iy_pu_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch3_out1 <= Delay9_out1 WHEN switch_compare_1_7 = '0' ELSE
      Delay8_out1;

  
  switch_compare_1_8 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  omega_m_pu_signed <= signed(omega_m_pu);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay12_out1 <= omega_m_pu_signed;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch5_out1 <= Delay13_out1 WHEN switch_compare_1_8 = '0' ELSE
      Delay12_out1;

  
  switch_compare_1_9 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ts_times_ZB_over_Ld_AXI_signed <= signed(Ts_times_ZB_over_Ld_AXI);

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay27_out1 <= Ts_times_ZB_over_Ld_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay28_out1 <= Switch13_out1;
      END IF;
    END IF;
  END PROCESS Delay28_process;


  
  Switch13_out1 <= Delay28_out1 WHEN switch_compare_1_9 = '0' ELSE
      Delay27_out1;

  
  switch_compare_1_10 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ts_times_ZB_over_Lq_AXI_signed <= signed(Ts_times_ZB_over_Lq_AXI);

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay29_out1 <= Ts_times_ZB_over_Lq_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay29_process;


  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay30_out1 <= Switch14_out1;
      END IF;
    END IF;
  END PROCESS Delay30_process;


  
  Switch14_out1 <= Delay30_out1 WHEN switch_compare_1_10 = '0' ELSE
      Delay29_out1;

  
  switch_compare_1_11 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ts_times_ZB_over_Lx_AXI_signed <= signed(Ts_times_ZB_over_Lx_AXI);

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay31_out1 <= Ts_times_ZB_over_Lx_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay32_out1 <= Switch15_out1;
      END IF;
    END IF;
  END PROCESS Delay32_process;


  
  Switch15_out1 <= Delay32_out1 WHEN switch_compare_1_11 = '0' ELSE
      Delay31_out1;

  
  switch_compare_1_12 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ts_times_ZB_over_Ly_AXI_signed <= signed(Ts_times_ZB_over_Ly_AXI);

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay33_out1 <= Ts_times_ZB_over_Ly_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay33_process;


  Delay34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay34_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay34_out1 <= Switch16_out1;
      END IF;
    END IF;
  END PROCESS Delay34_process;


  
  Switch16_out1 <= Delay34_out1 WHEN switch_compare_1_12 = '0' ELSE
      Delay33_out1;

  
  switch_compare_1_13 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Rs_over_ZB_AXI_signed <= signed(Rs_over_ZB_AXI);

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay25_out1 <= Rs_over_ZB_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay26_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay26_out1 <= Switch12_out1;
      END IF;
    END IF;
  END PROCESS Delay26_process;


  
  Switch12_out1 <= Delay26_out1 WHEN switch_compare_1_13 = '0' ELSE
      Delay25_out1;

  
  switch_compare_1_14 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ld_over_LB_AXI_signed <= signed(Ld_over_LB_AXI);

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay35_out1 <= Ld_over_LB_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay35_process;


  Delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay36_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay36_out1 <= Switch17_out1;
      END IF;
    END IF;
  END PROCESS Delay36_process;


  
  Switch17_out1 <= Delay36_out1 WHEN switch_compare_1_14 = '0' ELSE
      Delay35_out1;

  
  switch_compare_1_15 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Lq_over_LB_AXI_signed <= signed(Lq_over_LB_AXI);

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay37_out1 <= Lq_over_LB_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay37_process;


  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay38_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay38_out1 <= Switch18_out1;
      END IF;
    END IF;
  END PROCESS Delay38_process;


  
  Switch18_out1 <= Delay38_out1 WHEN switch_compare_1_15 = '0' ELSE
      Delay37_out1;

  
  switch_compare_1_16 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  psi_pm_over_psiB_AXI_signed <= signed(psi_pm_over_psiB_AXI);

  Delay39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay39_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay39_out1 <= psi_pm_over_psiB_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay39_process;


  Delay40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay40_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay40_out1 <= Switch19_out1;
      END IF;
    END IF;
  END PROCESS Delay40_process;


  
  Switch19_out1 <= Delay40_out1 WHEN switch_compare_1_16 = '0' ELSE
      Delay39_out1;

  
  switch_compare_1_17 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  polepairs_AXI_unsigned <= unsigned(polepairs_AXI);

  Delay43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay43_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay43_out1 <= polepairs_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS Delay43_process;


  Delay44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay44_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay44_out1 <= Switch21_out1;
      END IF;
    END IF;
  END PROCESS Delay44_process;


  
  Switch21_out1 <= Delay44_out1 WHEN switch_compare_1_17 = '0' ELSE
      Delay43_out1;

  Delay75_ctrl_const_out <= '1';

  Delay75_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay75_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        Delay75_ctrl_delay_out <= Delay75_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay75_ctrl_delay_process;


  Delay75_Initial_Val_out <= to_unsigned(1, 32);

  
  switch_compare_1_18 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Delay10_ctrl_const_out <= '1';

  Delay10_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        Delay10_ctrl_delay_out <= Delay10_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay10_ctrl_delay_process;


  Delay10_Initial_Val_out <= to_unsigned(1, 32);

  index_unsigned <= unsigned(index);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay1_out1 <= index_unsigned;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay10_out <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Delay10_out1 <= Delay10_Initial_Val_out WHEN Delay10_ctrl_delay_out = '0' ELSE
      Delay10_out;

  
  Switch4_out1 <= Delay10_out1 WHEN switch_compare_1_18 = '0' ELSE
      Delay1_out1;

  Delay75_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay75_out <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay75_out <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay75_process;


  
  Delay75_out1 <= Delay75_Initial_Val_out WHEN Delay75_ctrl_delay_out = '0' ELSE
      Delay75_out;

  id_delay_pu_signed <= signed(id_delay_pu);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        id_delay_pu_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        id_delay_pu_1 <= id_delay_pu_signed;
      END IF;
    END IF;
  END PROCESS reduced_process;


  id_pred_pu <= std_logic_vector(id_delay_pu_1);

  iq_delay_pu_signed <= signed(iq_delay_pu);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        iq_delay_pu_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        iq_delay_pu_1 <= iq_delay_pu_signed;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  iq_pred_pu <= std_logic_vector(iq_delay_pu_1);

  ix_delay_pu_signed <= signed(ix_delay_pu);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ix_delay_pu_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        ix_delay_pu_1 <= ix_delay_pu_signed;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  ix_pred_pu <= std_logic_vector(ix_delay_pu_1);

  iy_delay_pu_signed <= signed(iy_delay_pu);

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        iy_delay_pu_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        iy_delay_pu_1 <= iy_delay_pu_signed;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  iy_pred_pu <= std_logic_vector(iy_delay_pu_1);

  id_pred_pu_AXI <= std_logic_vector(id_delay_pu_1);

  iq_pred_pu_AXI <= std_logic_vector(iq_delay_pu_1);

  ix_pred_pu_AXI <= std_logic_vector(ix_delay_pu_1);

  iy_pred_pu_AXI <= std_logic_vector(iy_delay_pu_1);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_out1 <= Detect_Rise_Positive_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  ce_out <= clk_enable;

  calc_done <= Delay11_out1;

END rtl;

