-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Encoder_Zynq\IncreEncoder_ip_addr_decoder.vhd
-- Created: 2018-10-01 09:32:52
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IncreEncoder_ip_addr_decoder
-- Source Path: IncreEncoder_ip/IncreEncoder_ip_axi_lite/IncreEncoder_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IncreEncoder_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_omega_AXI4                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        read_direction_AXI4               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
        read_theta_el_AXI4                :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        read_theta_mech_AXI4              :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        read_countPerPeriod_AXI4          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_OverSamplFactor_AXI4        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        write_Timer_FPGA_ms_AXI4          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_En26
        write_PI2_Inc_AXI4                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24_En24
        write_IncPerTurn_mech_AXI4        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        write_Inc_PerTurn_mech_2PI_AXI4   :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24_En24
        write_IncrementePerTurn_elek_AXI4 :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        write_OverSamplFactorInv_AXI4     :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16_En15
        );
END IncreEncoder_ip_addr_decoder;


ARCHITECTURE rtl OF IncreEncoder_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp          : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_omega_AXI4_signed           : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL read_direction_AXI4_signed       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL read_theta_el_AXI4_signed        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL read_theta_mech_AXI4_signed      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL read_countPerPeriod_AXI4_signed  : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_countPerPeriod_AXI4   : std_logic;  -- ufix1
  SIGNAL decode_sel_theta_mech_AXI4       : std_logic;  -- ufix1
  SIGNAL decode_sel_theta_el_AXI4         : std_logic;  -- ufix1
  SIGNAL decode_sel_direction_AXI4        : std_logic;  -- ufix1
  SIGNAL decode_sel_omega_AXI4            : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_omega_AXI4              : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_in_omega_AXI4               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_omega_AXI4             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_direction_AXI4          : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL data_in_direction_AXI4           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_direction_AXI4         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_theta_el_AXI4           : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL data_in_theta_el_AXI4            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_theta_el_AXI4          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_theta_mech_AXI4         : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL data_in_theta_mech_AXI4          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_theta_mech_AXI4        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_countPerPeriod_AXI4     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_in_countPerPeriod_AXI4      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_countPerPeriod_AXI4    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL decode_sel_OverSamplFactor_AXI4  : std_logic;  -- ufix1
  SIGNAL reg_enb_OverSamplFactor_AXI4     : std_logic;  -- ufix1
  SIGNAL data_in_OverSamplFactor_AXI4     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL write_reg_OverSamplFactor_AXI4   : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL decode_sel_Timer_FPGA_ms_AXI4    : std_logic;  -- ufix1
  SIGNAL reg_enb_Timer_FPGA_ms_AXI4       : std_logic;  -- ufix1
  SIGNAL data_in_Timer_FPGA_ms_AXI4       : unsigned(31 DOWNTO 0);  -- ufix32_En26
  SIGNAL write_reg_Timer_FPGA_ms_AXI4     : unsigned(31 DOWNTO 0);  -- ufix32_En26
  SIGNAL decode_sel_PI2_Inc_AXI4          : std_logic;  -- ufix1
  SIGNAL reg_enb_PI2_Inc_AXI4             : std_logic;  -- ufix1
  SIGNAL data_in_PI2_Inc_AXI4             : unsigned(23 DOWNTO 0);  -- ufix24_En24
  SIGNAL write_reg_PI2_Inc_AXI4           : unsigned(23 DOWNTO 0);  -- ufix24_En24
  SIGNAL decode_sel_IncPerTurn_mech_AXI4  : std_logic;  -- ufix1
  SIGNAL reg_enb_IncPerTurn_mech_AXI4     : std_logic;  -- ufix1
  SIGNAL data_in_IncPerTurn_mech_AXI4     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL write_reg_IncPerTurn_mech_AXI4   : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL decode_sel_Inc_PerTurn_mech_2PI_AXI4 : std_logic;  -- ufix1
  SIGNAL reg_enb_Inc_PerTurn_mech_2PI_AXI4 : std_logic;  -- ufix1
  SIGNAL data_in_Inc_PerTurn_mech_2PI_AXI4 : unsigned(23 DOWNTO 0);  -- ufix24_En24
  SIGNAL write_reg_Inc_PerTurn_mech_2PI_AXI4 : unsigned(23 DOWNTO 0);  -- ufix24_En24
  SIGNAL decode_sel_IncrementePerTurn_elek_AXI4 : std_logic;  -- ufix1
  SIGNAL reg_enb_IncrementePerTurn_elek_AXI4 : std_logic;  -- ufix1
  SIGNAL data_in_IncrementePerTurn_elek_AXI4 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL write_reg_IncrementePerTurn_elek_AXI4 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL decode_sel_OverSamplFactorInv_AXI4 : std_logic;  -- ufix1
  SIGNAL reg_enb_OverSamplFactorInv_AXI4  : std_logic;  -- ufix1
  SIGNAL data_in_OverSamplFactorInv_AXI4  : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL write_reg_OverSamplFactorInv_AXI4 : unsigned(15 DOWNTO 0);  -- ufix16_En15

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  read_omega_AXI4_signed <= signed(read_omega_AXI4);

  read_direction_AXI4_signed <= signed(read_direction_AXI4);

  read_theta_el_AXI4_signed <= signed(read_theta_el_AXI4);

  read_theta_mech_AXI4_signed <= signed(read_theta_mech_AXI4);

  read_countPerPeriod_AXI4_signed <= signed(read_countPerPeriod_AXI4);

  
  decode_sel_countPerPeriod_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  
  decode_sel_theta_mech_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  
  decode_sel_theta_el_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  
  decode_sel_direction_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  
  decode_sel_omega_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp <= const_0 WHEN decode_sel_ip_timestamp = '0' ELSE
      read_reg_ip_timestamp;

  reg_omega_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_omega_AXI4 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_omega_AXI4 <= read_omega_AXI4_signed;
      END IF;
    END IF;
  END PROCESS reg_omega_AXI4_process;


  data_in_omega_AXI4 <= unsigned(resize(read_reg_omega_AXI4, 32));

  
  decode_rd_omega_AXI4 <= decode_rd_ip_timestamp WHEN decode_sel_omega_AXI4 = '0' ELSE
      data_in_omega_AXI4;

  reg_direction_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_direction_AXI4 <= to_signed(16#0#, 4);
      ELSIF enb = '1' THEN
        read_reg_direction_AXI4 <= read_direction_AXI4_signed;
      END IF;
    END IF;
  END PROCESS reg_direction_AXI4_process;


  data_in_direction_AXI4 <= unsigned(resize(read_reg_direction_AXI4, 32));

  
  decode_rd_direction_AXI4 <= decode_rd_omega_AXI4 WHEN decode_sel_direction_AXI4 = '0' ELSE
      data_in_direction_AXI4;

  reg_theta_el_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_theta_el_AXI4 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_theta_el_AXI4 <= read_theta_el_AXI4_signed;
      END IF;
    END IF;
  END PROCESS reg_theta_el_AXI4_process;


  data_in_theta_el_AXI4 <= unsigned(resize(read_reg_theta_el_AXI4, 32));

  
  decode_rd_theta_el_AXI4 <= decode_rd_direction_AXI4 WHEN decode_sel_theta_el_AXI4 = '0' ELSE
      data_in_theta_el_AXI4;

  reg_theta_mech_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_theta_mech_AXI4 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_theta_mech_AXI4 <= read_theta_mech_AXI4_signed;
      END IF;
    END IF;
  END PROCESS reg_theta_mech_AXI4_process;


  data_in_theta_mech_AXI4 <= unsigned(resize(read_reg_theta_mech_AXI4, 32));

  
  decode_rd_theta_mech_AXI4 <= decode_rd_theta_el_AXI4 WHEN decode_sel_theta_mech_AXI4 = '0' ELSE
      data_in_theta_mech_AXI4;

  reg_countPerPeriod_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_countPerPeriod_AXI4 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        read_reg_countPerPeriod_AXI4 <= read_countPerPeriod_AXI4_signed;
      END IF;
    END IF;
  END PROCESS reg_countPerPeriod_AXI4_process;


  data_in_countPerPeriod_AXI4 <= unsigned(resize(read_reg_countPerPeriod_AXI4, 32));

  
  decode_rd_countPerPeriod_AXI4 <= decode_rd_theta_mech_AXI4 WHEN decode_sel_countPerPeriod_AXI4 = '0' ELSE
      data_in_countPerPeriod_AXI4;

  data_read <= std_logic_vector(decode_rd_countPerPeriod_AXI4);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_axi_enable <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  
  decode_sel_OverSamplFactor_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_OverSamplFactor_AXI4 <= decode_sel_OverSamplFactor_AXI4 AND wr_enb;

  data_in_OverSamplFactor_AXI4 <= data_write_unsigned(15 DOWNTO 0);

  reg_OverSamplFactor_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_OverSamplFactor_AXI4 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_OverSamplFactor_AXI4 = '1' THEN
        write_reg_OverSamplFactor_AXI4 <= data_in_OverSamplFactor_AXI4;
      END IF;
    END IF;
  END PROCESS reg_OverSamplFactor_AXI4_process;


  write_OverSamplFactor_AXI4 <= std_logic_vector(write_reg_OverSamplFactor_AXI4);

  
  decode_sel_Timer_FPGA_ms_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_Timer_FPGA_ms_AXI4 <= decode_sel_Timer_FPGA_ms_AXI4 AND wr_enb;

  data_in_Timer_FPGA_ms_AXI4 <= data_write_unsigned;

  reg_Timer_FPGA_ms_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_Timer_FPGA_ms_AXI4 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Timer_FPGA_ms_AXI4 = '1' THEN
        write_reg_Timer_FPGA_ms_AXI4 <= data_in_Timer_FPGA_ms_AXI4;
      END IF;
    END IF;
  END PROCESS reg_Timer_FPGA_ms_AXI4_process;


  write_Timer_FPGA_ms_AXI4 <= std_logic_vector(write_reg_Timer_FPGA_ms_AXI4);

  
  decode_sel_PI2_Inc_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_PI2_Inc_AXI4 <= decode_sel_PI2_Inc_AXI4 AND wr_enb;

  data_in_PI2_Inc_AXI4 <= data_write_unsigned(23 DOWNTO 0);

  reg_PI2_Inc_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_PI2_Inc_AXI4 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_PI2_Inc_AXI4 = '1' THEN
        write_reg_PI2_Inc_AXI4 <= data_in_PI2_Inc_AXI4;
      END IF;
    END IF;
  END PROCESS reg_PI2_Inc_AXI4_process;


  write_PI2_Inc_AXI4 <= std_logic_vector(write_reg_PI2_Inc_AXI4);

  
  decode_sel_IncPerTurn_mech_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_IncPerTurn_mech_AXI4 <= decode_sel_IncPerTurn_mech_AXI4 AND wr_enb;

  data_in_IncPerTurn_mech_AXI4 <= data_write_unsigned(15 DOWNTO 0);

  reg_IncPerTurn_mech_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_IncPerTurn_mech_AXI4 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_IncPerTurn_mech_AXI4 = '1' THEN
        write_reg_IncPerTurn_mech_AXI4 <= data_in_IncPerTurn_mech_AXI4;
      END IF;
    END IF;
  END PROCESS reg_IncPerTurn_mech_AXI4_process;


  write_IncPerTurn_mech_AXI4 <= std_logic_vector(write_reg_IncPerTurn_mech_AXI4);

  
  decode_sel_Inc_PerTurn_mech_2PI_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_Inc_PerTurn_mech_2PI_AXI4 <= decode_sel_Inc_PerTurn_mech_2PI_AXI4 AND wr_enb;

  data_in_Inc_PerTurn_mech_2PI_AXI4 <= data_write_unsigned(23 DOWNTO 0);

  reg_Inc_PerTurn_mech_2PI_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_Inc_PerTurn_mech_2PI_AXI4 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_Inc_PerTurn_mech_2PI_AXI4 = '1' THEN
        write_reg_Inc_PerTurn_mech_2PI_AXI4 <= data_in_Inc_PerTurn_mech_2PI_AXI4;
      END IF;
    END IF;
  END PROCESS reg_Inc_PerTurn_mech_2PI_AXI4_process;


  write_Inc_PerTurn_mech_2PI_AXI4 <= std_logic_vector(write_reg_Inc_PerTurn_mech_2PI_AXI4);

  
  decode_sel_IncrementePerTurn_elek_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_IncrementePerTurn_elek_AXI4 <= decode_sel_IncrementePerTurn_elek_AXI4 AND wr_enb;

  data_in_IncrementePerTurn_elek_AXI4 <= data_write_unsigned(15 DOWNTO 0);

  reg_IncrementePerTurn_elek_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_IncrementePerTurn_elek_AXI4 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_IncrementePerTurn_elek_AXI4 = '1' THEN
        write_reg_IncrementePerTurn_elek_AXI4 <= data_in_IncrementePerTurn_elek_AXI4;
      END IF;
    END IF;
  END PROCESS reg_IncrementePerTurn_elek_AXI4_process;


  write_IncrementePerTurn_elek_AXI4 <= std_logic_vector(write_reg_IncrementePerTurn_elek_AXI4);

  
  decode_sel_OverSamplFactorInv_AXI4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_OverSamplFactorInv_AXI4 <= decode_sel_OverSamplFactorInv_AXI4 AND wr_enb;

  data_in_OverSamplFactorInv_AXI4 <= data_write_unsigned(15 DOWNTO 0);

  reg_OverSamplFactorInv_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_OverSamplFactorInv_AXI4 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_OverSamplFactorInv_AXI4 = '1' THEN
        write_reg_OverSamplFactorInv_AXI4 <= data_in_OverSamplFactorInv_AXI4;
      END IF;
    END IF;
  END PROCESS reg_OverSamplFactorInv_AXI4_process;


  write_OverSamplFactorInv_AXI4 <= std_logic_vector(write_reg_OverSamplFactorInv_AXI4);

END rtl;

