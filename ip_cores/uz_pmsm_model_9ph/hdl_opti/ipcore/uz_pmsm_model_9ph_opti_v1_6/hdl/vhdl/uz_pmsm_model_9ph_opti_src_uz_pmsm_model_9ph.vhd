-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph.vhd
-- Created: 2022-05-04 08:44:57
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2e-09
-- Target subsystem base rate: 2e-09
-- Explicit user oversample request: 500x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- outputs_0                     ce_out        1e-06
-- outputs_1                     ce_out        1e-06
-- outputs_2                     ce_out        1e-06
-- outputs_3                     ce_out        1e-06
-- outputs_4                     ce_out        1e-06
-- i_dq_ps_0                     ce_out        1e-06
-- i_dq_ps_1                     ce_out        1e-06
-- i_dq_ps_2                     ce_out        1e-06
-- i_dq_ps_3                     ce_out        1e-06
-- i_dq_ps_4                     ce_out        1e-06
-- i_dq_ps_5                     ce_out        1e-06
-- i_dq_ps_6                     ce_out        1e-06
-- i_dq_ps_7                     ce_out        1e-06
-- i_dq_ps_8                     ce_out        1e-06
-- i_abc1_pl_0                   ce_out        1e-06
-- i_abc1_pl_1                   ce_out        1e-06
-- i_abc1_pl_2                   ce_out        1e-06
-- i_abc2_pl_0                   ce_out        1e-06
-- i_abc2_pl_1                   ce_out        1e-06
-- i_abc2_pl_2                   ce_out        1e-06
-- i_abc3_pl_0                   ce_out        1e-06
-- i_abc3_pl_1                   ce_out        1e-06
-- i_abc3_pl_2                   ce_out        1e-06
-- out_theta_el                  ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Model_Parameter_reset_integrators :   IN    std_logic;
        Model_Parameter_simulate_mechanical :   IN    std_logic;
        Model_Parameter_switch_pspl       :   IN    std_logic;
        Model_Parameter_control_dq_abc    :   IN    std_logic;
        physical_parameters_1_J           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_mu            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_M_R0          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_d         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_q         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_R_1           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_polepair      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_psi_pm        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z3          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_0                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_3                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        u_abc1_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        in_theta_el                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        ce_out                            :   OUT   std_logic;
        outputs_0                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_1                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_2                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_3                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_4                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_0                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_1                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_2                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_3                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_4                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_5                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_6                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_7                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_dq_ps_8                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        i_abc1_pl_0                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc1_pl_1                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc1_pl_2                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc2_pl_0                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc2_pl_1                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc2_pl_2                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc3_pl_0                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc3_pl_1                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc3_pl_2                       :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        out_theta_el                      :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
        );
END uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_500_0                     :   OUT   std_logic;
          enb_1_500_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Sine_HDL_Optimized
    PORT( u                               :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
          x                               :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En15
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_17_En15_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En15
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Cosine_HDL_Optimized
    PORT( u                               :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
          x                               :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En15
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Transformation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    vector_of_std_logic_vector25(0 TO 8);  -- sfix25_En12 [9]
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          out_rsvd                        :   OUT   vector_of_std_logic_vector32(0 TO 8)  -- single [9]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Theta_el
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_500_1                     :   IN    std_logic;
          enb                             :   IN    std_logic;
          w_mech                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          polepairs                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          reset_1                         :   IN    std_logic;
          theta_el                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_Transformation1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    vector_of_std_logic_vector32(0 TO 8);  -- single [9]
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          enb_counter                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          out_rsvd                        :   OUT   vector_of_std_logic_vector43(0 TO 8)  -- sfix43_En28 [9]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_tc
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_tc(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Sine_HDL_Optimized
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Sine_HDL_Optimized(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_17_En15_to_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_17_En15_to_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Cosine_HDL_Optimized
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Cosine_HDL_Optimized(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Transformation
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Transformation(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_sub_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_add_double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_add_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_double2single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_add_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_add_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Theta_el
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Theta_el(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_Transformation1
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_Transformation1(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12(rtl);

  -- Signals
  SIGNAL enb_1_500_0                      : std_logic;
  SIGNAL enb_1_500_1                      : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Model_Parameter_reset_integrators_1 : std_logic;
  SIGNAL reset_integrators                : std_logic;
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL switch_pspl                      : std_logic;
  SIGNAL u_abc1_pl_0_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc1_pl_1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc1_pl_2_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_out_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_1_reg                      : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay_out_2                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_out_3                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay_1_reg_1                    : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay_1_reg_2                    : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay_1_reg_next                 : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay_1_reg_next_1               : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay_1_reg_next_2               : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay_out1                       : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay_out1_1                     : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL u_abc2_pl_0_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc2_pl_1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc2_pl_2_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_out_1                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_1_reg                     : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay2_out_2                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_out_3                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay2_1_reg_1                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay2_1_reg_2                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay2_1_reg_next                : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay2_1_reg_next_1              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay2_1_reg_next_2              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay2_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay2_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL u_abc3_pl_0_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc3_pl_1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL u_abc3_pl_2_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_out_1                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_1_reg                     : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay3_out_2                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_out_3                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay3_1_reg_1                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay3_1_reg_2                   : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay3_1_reg_next                : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay3_1_reg_next_1              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay3_1_reg_next_2              : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay3_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Delay3_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Mux4_out1                        : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Data_Type_Conversion9_out1       : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Data_Type_Conversion9_out1_1     : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL in_theta_el_signed               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay1_reg                       : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay1_reg_next                  : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Delay1_out1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay1_out1_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Delay1_out1_2                    : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Sine                             : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Data_Type_Conversion32_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_3                    : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Cosine                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Data_Type_Conversion22_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Transformation_out1              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL input                            : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL input_4                          : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux2_out1                        : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Switch_out1                      : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL alpha1_L_d                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch18_reg                 : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL delayMatch18_reg_next            : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL From10_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL psi_pm                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch17_reg                 : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL delayMatch17_reg_next            : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL From24_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL physical_parameters_R_1_1        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL R_1                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL simulate_mechanical              : std_logic;
  SIGNAL delayMatch14_reg                 : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL delayMatch14_reg_next            : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL simulate_mechanical_1            : std_logic;
  SIGNAL input_1_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch15_reg                 : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL delayMatch15_reg_next            : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL omega_mech                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_integrators_1              : std_logic;
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_J                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL load_torque                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL physical_parameters_polepair_1   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL polepair                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_3                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_L_q                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch16_reg                 : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL delayMatch16_reg_next            : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL From7_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_iv_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL polepair_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch22_reg                 : vector_of_std_logic_vector32(0 TO 32);  -- ufix32 [33]
  SIGNAL delayMatch22_reg_next            : vector_of_std_logic_vector32(0 TO 32);  -- ufix32 [33]
  SIGNAL From_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion13_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch20_reg                 : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch20_reg_next            : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL pmsm_out4                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I_d                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I_d_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL i_d_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I_q                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I_q_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL i_q_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL plus                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion23_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL minus                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_op_stage1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion22_out1_1    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_4                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_q                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay8_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_3                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product11_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_5                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_3                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_4                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered1_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_5                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product8_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_op_stage1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion21_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_6                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_6                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_7                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered2_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_8                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_2                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_d                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch19_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch19_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL pmsm_out3                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch21_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch21_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Product3_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_out1_3                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_4                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_5                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL M_Mi_6                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch30_reg                 : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL delayMatch30_reg_next            : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL torque                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch31_reg                 : vector_of_std_logic_vector32(0 TO 65);  -- ufix32 [66]
  SIGNAL delayMatch31_reg_next            : vector_of_std_logic_vector32(0 TO 65);  -- ufix32 [66]
  SIGNAL omega_mech_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch23_reg                 : vector_of_std_logic_vector32(0 TO 43);  -- ufix32 [44]
  SIGNAL delayMatch23_reg_next            : vector_of_std_logic_vector32(0 TO 43);  -- ufix32 [44]
  SIGNAL From10_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch26_reg                 : vector_of_std_logic_vector32(0 TO 46);  -- ufix32 [47]
  SIGNAL delayMatch26_reg_next            : vector_of_std_logic_vector32(0 TO 46);  -- ufix32 [47]
  SIGNAL From5_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch32_reg                 : std_logic_vector(0 TO 68);  -- ufix1 [69]
  SIGNAL delayMatch32_reg_next            : std_logic_vector(0 TO 68);  -- ufix1 [69]
  SIGNAL reset_integrators_2              : std_logic;
  SIGNAL theta_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL input_2_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch33_reg                 : vector_of_std_logic_vector32(0 TO 68);  -- ufix32 [69]
  SIGNAL delayMatch33_reg_next            : vector_of_std_logic_vector32(0 TO 68);  -- ufix32 [69]
  SIGNAL Data_Type_Conversion24_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL input_3_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch34_reg                 : vector_of_std_logic_vector32(0 TO 68);  -- ufix32 [69]
  SIGNAL delayMatch34_reg_next            : vector_of_std_logic_vector32(0 TO 68);  -- ufix32 [69]
  SIGNAL Data_Type_Conversion25_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux1_out1                        : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL t_bypass_reg                     : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL t_bypass_reg_next                : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Mux1_out1_1                      : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL I_d_3                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_4                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion24_out1_1    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_7                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_9                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_10                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered3_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_11                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_3                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion14_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_5                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide3_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide2_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion25_out1_1    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_8                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_12                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_13                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered4_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_14                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_4                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion15_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_6                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide5_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide4_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion26_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_9                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_15                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_16                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered5_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_17                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_5                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion16_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_7                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide7_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide6_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion27_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_10                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_18                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_19                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered6_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_20                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_6                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_3                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion17_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_8                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide9_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide8_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add4_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion28_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_11                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_21                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_22                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered7_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_23                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_7                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_4                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion18_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_9                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide11_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide10_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add5_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion29_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_12                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_24                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_25                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered8_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_26                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_8                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_5                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion19_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_10                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide13_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide12_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add6_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion30_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_13                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_27                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_28                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered9_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_29                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_9                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_6                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion20_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_out1                         : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Mux_out1_2                       : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t7_bypass_reg                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t7_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Mux_out1_3                       : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL ctr_499_sig                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Transformation1_out1             : vector_of_std_logic_vector43(0 TO 8);  -- ufix43 [9]
  SIGNAL Transformation1_out1_signed      : vector_of_signed43(0 TO 8);  -- sfix43_En28 [9]
  SIGNAL Data_Type_Conversion34_out1      : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Demux1_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out1_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out1_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out1_0                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Demux1_out1_1_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Demux1_out1_2_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch35_out_1               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch35_1_reg               : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch35_out_2               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch35_out_3               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch35_1_reg_1             : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch35_1_reg_2             : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch35_1_reg_next          : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL delayMatch35_1_reg_next_1        : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL delayMatch35_1_reg_next_2        : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Demux1_out2                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2_0                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Demux1_out2_1_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Demux1_out2_2_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch36_out_1               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch36_1_reg               : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch36_out_2               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch36_out_3               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch36_1_reg_1             : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch36_1_reg_2             : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch36_1_reg_next          : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL delayMatch36_1_reg_next_1        : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL delayMatch36_1_reg_next_2        : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Demux1_out3                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3_1                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3_0                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Demux1_out3_1_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Demux1_out3_2_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch37_out_1               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch37_1_reg               : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch37_out_2               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch37_out_3               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch37_1_reg_1             : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch37_1_reg_2             : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch37_1_reg_next          : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL delayMatch37_1_reg_next_1        : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL delayMatch37_1_reg_next_2        : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Data_Type_Conversion1_out1_signed : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Data_Type_Conversion1_out1_2     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Data_Type_Conversion1_out1_3     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL delayMatch38_reg                 : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL delayMatch38_reg_next            : vector_of_signed25(0 TO 1);  -- sfix25_En12 [2]
  SIGNAL Data_Type_Conversion1_out1_4     : signed(24 DOWNTO 0);  -- sfix25_En12

BEGIN
  -- PMSM electric and magentic
  -- 
  -- Mechanical
  -- 
  -- Outputs
  -- 
  -- Inputs
  -- 
  -- R1 Parameter negative!!
  -- 
  -- o1 equation
  -- 
  -- DQ equations
  -- 
  -- o2 equation
  -- 
  -- x1 equation
  -- 
  -- y1 equation
  -- 
  -- x2 equation
  -- 
  -- y2 equation
  -- 
  -- zero equation
  -- 
  -- load torque negative!!!

  u_uz_pmsm_model_9ph_tc : uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_500_0 => enb_1_500_0,
              enb_1_500_1 => enb_1_500_1
              );

  u_Sine_HDL_Optimized : uz_pmsm_model_9ph_opti_src_Sine_HDL_Optimized
    PORT MAP( u => Delay1_out1_2,  -- sfix25_En12
              x => Sine  -- sfix17_En15
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_17_En15_to_single : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_17_En15_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Sine,  -- sfix17_En15
              nfp_out => Data_Type_Conversion32_out1  -- single
              );

  u_Cosine_HDL_Optimized : uz_pmsm_model_9ph_opti_src_Cosine_HDL_Optimized
    PORT MAP( u => Delay1_out1_3,  -- sfix25_En12
              x => Cosine  -- sfix17_En15
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_17_En15_to_single_1 : uz_pmsm_model_9ph_opti_src_nfp_convert_sfix_17_En15_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Cosine,  -- sfix17_En15
              nfp_out => Data_Type_Conversion22_out1  -- single
              );

  u_Transformation : uz_pmsm_model_9ph_opti_src_Transformation
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in_rsvd => Data_Type_Conversion9_out1_1,  -- sfix25_En12 [9]
              sin_theta_el => Data_Type_Conversion32_out1,  -- single
              cos_theta_el => Data_Type_Conversion22_out1,  -- single
              out_rsvd => Transformation_out1  -- single [9]
              );

  u_nfp_mul_comp : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => i_d_2,  -- single
              nfp_in2 => pmsm_out4,  -- single
              nfp_out => Product2_out1  -- single
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion13_out1,  -- single
              nfp_in2 => From7_out1,  -- single
              nfp_out => I_q  -- single
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_q,  -- single
              nfp_in2 => physical_parameters_R_1_1,  -- single
              nfp_out => plus  -- single
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el_1,  -- single
              nfp_in2 => Data_Type_Conversion23_out1,  -- single
              nfp_out => minus  -- single
              );

  u_nfp_sub_comp : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(1),  -- single
              nfp_in2 => minus,  -- single
              nfp_out => Sum1_op_stage1  -- single
              );

  u_nfp_sub_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum1_op_stage1,  -- single
              nfp_in2 => plus,  -- single
              nfp_out => Sum1_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Sum1_out1,  -- single
              nfp_out => Data_Type_Conversion22_out1_1  -- double
              );

  u_nfp_mul_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_3,  -- double
              nfp_in2 => Data_Type_Conversion22_out1_1,  -- double
              nfp_out => Gain_out1  -- double
              );

  u_nfp_add_comp : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1,  -- double
              nfp_in2 => Delay1_out1_4,  -- double
              nfp_out => Sum3_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_q,  -- double
              nfp_out => Data_Type_Conversion13_out1  -- single
              );

  u_nfp_add_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_3,  -- single
              nfp_in2 => load_torque,  -- single
              nfp_out => Sum1_out1_1  -- single
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => alpha1_J,  -- single
              nfp_in2 => Sum1_out1_1,  -- single
              nfp_out => Product11_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_1 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Product11_out1,  -- single
              nfp_out => Data_Type_Conversion1_out1  -- double
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_2,  -- double
              nfp_in2 => Data_Type_Conversion1_out1,  -- double
              nfp_out => Gain_out1_1  -- double
              );

  u_nfp_add_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_1,  -- double
              nfp_in2 => Delay1_out1_5,  -- double
              nfp_out => Sum3_out1_1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_1 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Delay1_out1_5,  -- double
              nfp_out => Data_Type_Conversion8_out1  -- single
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch1_out1,  -- single
              nfp_in2 => polepair,  -- single
              nfp_out => omega_el  -- single
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el,  -- single
              nfp_in2 => Data_Type_Conversion13_out1,  -- single
              nfp_out => Product_out1  -- single
              );

  u_nfp_sub_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion23_out1,  -- single
              nfp_in2 => From24_out1,  -- single
              nfp_out => Sum2_out1  -- single
              );

  u_nfp_mul_comp_9 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => From10_out1,  -- single
              nfp_in2 => Sum2_out1,  -- single
              nfp_out => I_d  -- single
              );

  u_nfp_mul_comp_10 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_d,  -- single
              nfp_in2 => R_1,  -- single
              nfp_out => Product8_out1  -- single
              );

  u_nfp_sub_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(0),  -- single
              nfp_in2 => Product8_out1,  -- single
              nfp_out => Sum_op_stage1  -- single
              );

  u_nfp_add_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_op_stage1,  -- single
              nfp_in2 => Product_out1,  -- single
              nfp_out => Sum_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_2 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Sum_out1,  -- single
              nfp_out => Data_Type_Conversion21_out1  -- double
              );

  u_nfp_mul_comp_11 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_1,  -- double
              nfp_in2 => Data_Type_Conversion21_out1,  -- double
              nfp_out => Gain_out1_2  -- double
              );

  u_nfp_add_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_2,  -- double
              nfp_in2 => Delay1_out1_6,  -- double
              nfp_out => Sum3_out1_2  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_2 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_d,  -- double
              nfp_out => Data_Type_Conversion23_out1  -- single
              );

  u_nfp_mul_comp_12 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => pmsm_out3,  -- single
              nfp_in2 => i_q_2,  -- single
              nfp_out => Product3_out1  -- single
              );

  u_nfp_sub_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product3_out1_1,  -- single
              nfp_in2 => Product2_out1,  -- single
              nfp_out => Sum3_out1_3  -- single
              );

  u_nfp_mul_comp_13 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst,  -- single
              nfp_in2 => Sum3_out1_3,  -- single
              nfp_out => M_Mi_4  -- single
              );

  u_nfp_mul_comp_14 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_5,  -- single
              nfp_in2 => From_out1,  -- single
              nfp_out => M_Mi  -- single
              );

  u_Theta_el : uz_pmsm_model_9ph_opti_src_Theta_el
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_500_1 => enb_1_500_1,
              enb => enb,
              w_mech => From10_out1_1,  -- single
              polepairs => From5_out1,  -- single
              reset_1 => reset_integrators_2,
              theta_el => theta_el  -- single
              );

  u_nfp_mul_comp_15 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => physical_parameters_R_1_1,  -- single
              nfp_in2 => Divide1_out1,  -- single
              nfp_out => Divide_out1  -- single
              );

  u_nfp_sub_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(2),  -- single
              nfp_in2 => Divide_out1,  -- single
              nfp_out => Add_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_3 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add_out1,  -- single
              nfp_out => Data_Type_Conversion24_out1_1  -- double
              );

  u_nfp_mul_comp_16 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_4,  -- double
              nfp_in2 => Data_Type_Conversion24_out1_1,  -- double
              nfp_out => Gain_out1_3  -- double
              );

  u_nfp_add_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_3,  -- double
              nfp_in2 => Delay1_out1_7,  -- double
              nfp_out => Sum3_out1_4  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_3 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi,  -- double
              nfp_out => Data_Type_Conversion14_out1  -- single
              );

  u_nfp_mul_comp_17 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion14_out1,  -- single
              nfp_in2 => L_z1,  -- single
              nfp_out => Divide1_out1  -- single
              );

  u_nfp_mul_comp_18 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => physical_parameters_R_1_1,  -- single
              nfp_in2 => Divide3_out1,  -- single
              nfp_out => Divide2_out1  -- single
              );

  u_nfp_sub_comp_6 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(3),  -- single
              nfp_in2 => Divide2_out1,  -- single
              nfp_out => Add1_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_4 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add1_out1,  -- single
              nfp_out => Data_Type_Conversion25_out1_1  -- double
              );

  u_nfp_mul_comp_19 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_5,  -- double
              nfp_in2 => Data_Type_Conversion25_out1_1,  -- double
              nfp_out => Gain_out1_4  -- double
              );

  u_nfp_add_comp_6 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_4,  -- double
              nfp_in2 => Delay1_out1_8,  -- double
              nfp_out => Sum3_out1_5  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_4 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_1,  -- double
              nfp_out => Data_Type_Conversion15_out1  -- single
              );

  u_nfp_mul_comp_20 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion15_out1,  -- single
              nfp_in2 => L_z2,  -- single
              nfp_out => Divide3_out1  -- single
              );

  u_nfp_mul_comp_21 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => physical_parameters_R_1_1,  -- single
              nfp_in2 => Divide5_out1,  -- single
              nfp_out => Divide4_out1  -- single
              );

  u_nfp_sub_comp_7 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(4),  -- single
              nfp_in2 => Divide4_out1,  -- single
              nfp_out => Add2_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_5 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add2_out1,  -- single
              nfp_out => Data_Type_Conversion26_out1  -- double
              );

  u_nfp_mul_comp_22 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_6,  -- double
              nfp_in2 => Data_Type_Conversion26_out1,  -- double
              nfp_out => Gain_out1_5  -- double
              );

  u_nfp_add_comp_7 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_5,  -- double
              nfp_in2 => Delay1_out1_9,  -- double
              nfp_out => Sum3_out1_6  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_5 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_2,  -- double
              nfp_out => Data_Type_Conversion16_out1  -- single
              );

  u_nfp_mul_comp_23 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion16_out1,  -- single
              nfp_in2 => L_x1,  -- single
              nfp_out => Divide5_out1  -- single
              );

  u_nfp_mul_comp_24 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => physical_parameters_R_1_1,  -- single
              nfp_in2 => Divide7_out1,  -- single
              nfp_out => Divide6_out1  -- single
              );

  u_nfp_sub_comp_8 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(5),  -- single
              nfp_in2 => Divide6_out1,  -- single
              nfp_out => Add3_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_6 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add3_out1,  -- single
              nfp_out => Data_Type_Conversion27_out1  -- double
              );

  u_nfp_mul_comp_25 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_7,  -- double
              nfp_in2 => Data_Type_Conversion27_out1,  -- double
              nfp_out => Gain_out1_6  -- double
              );

  u_nfp_add_comp_8 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_6,  -- double
              nfp_in2 => Delay1_out1_10,  -- double
              nfp_out => Sum3_out1_7  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_6 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_3,  -- double
              nfp_out => Data_Type_Conversion17_out1  -- single
              );

  u_nfp_mul_comp_26 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion17_out1,  -- single
              nfp_in2 => L_y1,  -- single
              nfp_out => Divide7_out1  -- single
              );

  u_nfp_mul_comp_27 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => physical_parameters_R_1_1,  -- single
              nfp_in2 => Divide9_out1,  -- single
              nfp_out => Divide8_out1  -- single
              );

  u_nfp_sub_comp_9 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(6),  -- single
              nfp_in2 => Divide8_out1,  -- single
              nfp_out => Add4_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_7 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add4_out1,  -- single
              nfp_out => Data_Type_Conversion28_out1  -- double
              );

  u_nfp_mul_comp_28 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_8,  -- double
              nfp_in2 => Data_Type_Conversion28_out1,  -- double
              nfp_out => Gain_out1_7  -- double
              );

  u_nfp_add_comp_9 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_7,  -- double
              nfp_in2 => Delay1_out1_11,  -- double
              nfp_out => Sum3_out1_8  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_7 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_4,  -- double
              nfp_out => Data_Type_Conversion18_out1  -- single
              );

  u_nfp_mul_comp_29 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion18_out1,  -- single
              nfp_in2 => L_x2,  -- single
              nfp_out => Divide9_out1  -- single
              );

  u_nfp_mul_comp_30 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => physical_parameters_R_1_1,  -- single
              nfp_in2 => Divide11_out1,  -- single
              nfp_out => Divide10_out1  -- single
              );

  u_nfp_sub_comp_10 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(7),  -- single
              nfp_in2 => Divide10_out1,  -- single
              nfp_out => Add5_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_8 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add5_out1,  -- single
              nfp_out => Data_Type_Conversion29_out1  -- double
              );

  u_nfp_mul_comp_31 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_9,  -- double
              nfp_in2 => Data_Type_Conversion29_out1,  -- double
              nfp_out => Gain_out1_8  -- double
              );

  u_nfp_add_comp_10 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_8,  -- double
              nfp_in2 => Delay1_out1_12,  -- double
              nfp_out => Sum3_out1_9  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_8 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_5,  -- double
              nfp_out => Data_Type_Conversion19_out1  -- single
              );

  u_nfp_mul_comp_32 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion19_out1,  -- single
              nfp_in2 => L_y2,  -- single
              nfp_out => Divide11_out1  -- single
              );

  u_nfp_mul_comp_33 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => physical_parameters_R_1_1,  -- single
              nfp_in2 => Divide13_out1,  -- single
              nfp_out => Divide12_out1  -- single
              );

  u_nfp_sub_comp_11 : uz_pmsm_model_9ph_opti_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1(8),  -- single
              nfp_in2 => Divide12_out1,  -- single
              nfp_out => Add6_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_9 : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Add6_out1,  -- single
              nfp_out => Data_Type_Conversion30_out1  -- double
              );

  u_nfp_mul_comp_34 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_10,  -- double
              nfp_in2 => Data_Type_Conversion30_out1,  -- double
              nfp_out => Gain_out1_9  -- double
              );

  u_nfp_add_comp_11 : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_9,  -- double
              nfp_in2 => Delay1_out1_13,  -- double
              nfp_out => Sum3_out1_10  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_9 : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_6,  -- double
              nfp_out => Data_Type_Conversion20_out1  -- single
              );

  u_nfp_mul_comp_35 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion20_out1,  -- single
              nfp_in2 => L_z3,  -- single
              nfp_out => Divide13_out1  -- single
              );

  u_Transformation1 : uz_pmsm_model_9ph_opti_src_Transformation1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in_rsvd => Mux_out1,  -- single [9]
              sin_theta_el => Data_Type_Conversion32_out1,  -- single
              cos_theta_el => Data_Type_Conversion22_out1,  -- single
              enb_counter => std_logic_vector(ctr_499_sig),  -- ufix16
              out_rsvd => Transformation1_out1  -- sfix43_En28 [9]
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12 : uz_pmsm_model_9ph_opti_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => theta_el,  -- single
              nfp_out => Data_Type_Conversion1_out1_1  -- sfix25_En12
              );

  kconst <= X"40900000";

  Model_Parameter_reset_integrators_1 <= Model_Parameter_reset_integrators;

  reset_integrators <= Model_Parameter_reset_integrators_1;

  kconst_1 <= X"3eb0c6f7a0b5ed8d";

  switch_pspl <= Model_Parameter_switch_pspl;

  u_abc1_pl_0_1 <= signed(u_abc1_pl_0);

  Delay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_1_reg(0) <= to_signed(16#0000000#, 25);
        Delay_1_reg(1) <= to_signed(16#0000000#, 25);
        Delay_1_reg_1(0) <= to_signed(16#0000000#, 25);
        Delay_1_reg_1(1) <= to_signed(16#0000000#, 25);
        Delay_1_reg_2(0) <= to_signed(16#0000000#, 25);
        Delay_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_0 = '1' THEN
        Delay_1_reg(0) <= Delay_1_reg_next(0);
        Delay_1_reg(1) <= Delay_1_reg_next(1);
        Delay_1_reg_1(0) <= Delay_1_reg_next_1(0);
        Delay_1_reg_1(1) <= Delay_1_reg_next_1(1);
        Delay_1_reg_2(0) <= Delay_1_reg_next_2(0);
        Delay_1_reg_2(1) <= Delay_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay_1_process;

  Delay_1_reg_next(0) <= u_abc1_pl_0_1;
  Delay_1_reg_next(1) <= Delay_1_reg(0);
  Delay_out_1 <= Delay_1_reg(1);
  Delay_1_reg_next_1(0) <= u_abc1_pl_1_1;
  Delay_1_reg_next_1(1) <= Delay_1_reg_1(0);
  Delay_out_2 <= Delay_1_reg_1(1);
  Delay_1_reg_next_2(0) <= u_abc1_pl_2_1;
  Delay_1_reg_next_2(1) <= Delay_1_reg_2(0);
  Delay_out_3 <= Delay_1_reg_2(1);

  u_abc1_pl_1_1 <= signed(u_abc1_pl_1);

  u_abc1_pl_2_1 <= signed(u_abc1_pl_2);

  Delay_out1(0) <= Delay_out_1;
  Delay_out1(1) <= Delay_out_2;
  Delay_out1(2) <= Delay_out_3;

  Delay_out1_1 <= Delay_out1;

  u_abc2_pl_0_1 <= signed(u_abc2_pl_0);

  Delay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_1_reg(0) <= to_signed(16#0000000#, 25);
        Delay2_1_reg(1) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_1(0) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_1(1) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_2(0) <= to_signed(16#0000000#, 25);
        Delay2_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_0 = '1' THEN
        Delay2_1_reg(0) <= Delay2_1_reg_next(0);
        Delay2_1_reg(1) <= Delay2_1_reg_next(1);
        Delay2_1_reg_1(0) <= Delay2_1_reg_next_1(0);
        Delay2_1_reg_1(1) <= Delay2_1_reg_next_1(1);
        Delay2_1_reg_2(0) <= Delay2_1_reg_next_2(0);
        Delay2_1_reg_2(1) <= Delay2_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay2_1_process;

  Delay2_1_reg_next(0) <= u_abc2_pl_0_1;
  Delay2_1_reg_next(1) <= Delay2_1_reg(0);
  Delay2_out_1 <= Delay2_1_reg(1);
  Delay2_1_reg_next_1(0) <= u_abc2_pl_1_1;
  Delay2_1_reg_next_1(1) <= Delay2_1_reg_1(0);
  Delay2_out_2 <= Delay2_1_reg_1(1);
  Delay2_1_reg_next_2(0) <= u_abc2_pl_2_1;
  Delay2_1_reg_next_2(1) <= Delay2_1_reg_2(0);
  Delay2_out_3 <= Delay2_1_reg_2(1);

  u_abc2_pl_1_1 <= signed(u_abc2_pl_1);

  u_abc2_pl_2_1 <= signed(u_abc2_pl_2);

  Delay2_out1(0) <= Delay2_out_1;
  Delay2_out1(1) <= Delay2_out_2;
  Delay2_out1(2) <= Delay2_out_3;

  Delay2_out1_1 <= Delay2_out1;

  u_abc3_pl_0_1 <= signed(u_abc3_pl_0);

  Delay3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_1_reg(0) <= to_signed(16#0000000#, 25);
        Delay3_1_reg(1) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_1(0) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_1(1) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_2(0) <= to_signed(16#0000000#, 25);
        Delay3_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_0 = '1' THEN
        Delay3_1_reg(0) <= Delay3_1_reg_next(0);
        Delay3_1_reg(1) <= Delay3_1_reg_next(1);
        Delay3_1_reg_1(0) <= Delay3_1_reg_next_1(0);
        Delay3_1_reg_1(1) <= Delay3_1_reg_next_1(1);
        Delay3_1_reg_2(0) <= Delay3_1_reg_next_2(0);
        Delay3_1_reg_2(1) <= Delay3_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS Delay3_1_process;

  Delay3_1_reg_next(0) <= u_abc3_pl_0_1;
  Delay3_1_reg_next(1) <= Delay3_1_reg(0);
  Delay3_out_1 <= Delay3_1_reg(1);
  Delay3_1_reg_next_1(0) <= u_abc3_pl_1_1;
  Delay3_1_reg_next_1(1) <= Delay3_1_reg_1(0);
  Delay3_out_2 <= Delay3_1_reg_1(1);
  Delay3_1_reg_next_2(0) <= u_abc3_pl_2_1;
  Delay3_1_reg_next_2(1) <= Delay3_1_reg_2(0);
  Delay3_out_3 <= Delay3_1_reg_2(1);

  u_abc3_pl_1_1 <= signed(u_abc3_pl_1);

  u_abc3_pl_2_1 <= signed(u_abc3_pl_2);

  Delay3_out1(0) <= Delay3_out_1;
  Delay3_out1(1) <= Delay3_out_2;
  Delay3_out1(2) <= Delay3_out_3;

  Delay3_out1_1 <= Delay3_out1;

  Mux4_out1(0) <= Delay_out1_1(0);
  Mux4_out1(1) <= Delay_out1_1(1);
  Mux4_out1(2) <= Delay_out1_1(2);
  Mux4_out1(3) <= Delay2_out1_1(0);
  Mux4_out1(4) <= Delay2_out1_1(1);
  Mux4_out1(5) <= Delay2_out1_1(2);
  Mux4_out1(6) <= Delay3_out1_1(0);
  Mux4_out1(7) <= Delay3_out1_1(1);
  Mux4_out1(8) <= Delay3_out1_1(2);

  Data_Type_Conversion9_out1(0) <= Mux4_out1(0);
  Data_Type_Conversion9_out1(1) <= Mux4_out1(1);
  Data_Type_Conversion9_out1(2) <= Mux4_out1(2);
  Data_Type_Conversion9_out1(3) <= Mux4_out1(3);
  Data_Type_Conversion9_out1(4) <= Mux4_out1(4);
  Data_Type_Conversion9_out1(5) <= Mux4_out1(5);
  Data_Type_Conversion9_out1(6) <= Mux4_out1(6);
  Data_Type_Conversion9_out1(7) <= Mux4_out1(7);
  Data_Type_Conversion9_out1(8) <= Mux4_out1(8);

  outputgen1: FOR k IN 0 TO 8 GENERATE
    Data_Type_Conversion9_out1_1(k) <= std_logic_vector(Data_Type_Conversion9_out1(k));
  END GENERATE;

  in_theta_el_signed <= signed(in_theta_el);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg(0) <= to_signed(16#0000000#, 25);
        Delay1_reg(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_0 = '1' THEN
        Delay1_reg(0) <= Delay1_reg_next(0);
        Delay1_reg(1) <= Delay1_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);
  Delay1_reg_next(0) <= in_theta_el_signed;
  Delay1_reg_next(1) <= Delay1_reg(0);

  Delay1_out1_1 <= Delay1_out1;

  Delay1_out1_2 <= std_logic_vector(Delay1_out1_1);

  Delay1_out1_3 <= std_logic_vector(Delay1_out1_1);

  input(0) <= input_0;
  input(1) <= input_1;
  input(2) <= input_2;
  input(3) <= input_3;

  input_4 <= input;

  Constant_out1 <= X"00000000";

  Mux2_out1(0) <= input_4(2);
  Mux2_out1(1) <= input_4(3);
  Mux2_out1(2) <= Constant_out1;
  Mux2_out1(3) <= Constant_out1;
  Mux2_out1(4) <= Constant_out1;
  Mux2_out1(5) <= Constant_out1;
  Mux2_out1(6) <= Constant_out1;
  Mux2_out1(7) <= Constant_out1;
  Mux2_out1(8) <= Constant_out1;

  
  Switch_out1(0) <= Transformation_out1(0) WHEN switch_pspl = '0' ELSE
      Mux2_out1(0);
  
  Switch_out1(1) <= Transformation_out1(1) WHEN switch_pspl = '0' ELSE
      Mux2_out1(1);
  
  Switch_out1(2) <= Transformation_out1(2) WHEN switch_pspl = '0' ELSE
      Mux2_out1(2);
  
  Switch_out1(3) <= Transformation_out1(3) WHEN switch_pspl = '0' ELSE
      Mux2_out1(3);
  
  Switch_out1(4) <= Transformation_out1(4) WHEN switch_pspl = '0' ELSE
      Mux2_out1(4);
  
  Switch_out1(5) <= Transformation_out1(5) WHEN switch_pspl = '0' ELSE
      Mux2_out1(5);
  
  Switch_out1(6) <= Transformation_out1(6) WHEN switch_pspl = '0' ELSE
      Mux2_out1(6);
  
  Switch_out1(7) <= Transformation_out1(7) WHEN switch_pspl = '0' ELSE
      Mux2_out1(7);
  
  Switch_out1(8) <= Transformation_out1(8) WHEN switch_pspl = '0' ELSE
      Mux2_out1(8);

  alpha1_L_d <= physical_parameters_1_L_d;

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch18_reg(0) <= X"00000000";
        delayMatch18_reg(1) <= X"00000000";
        delayMatch18_reg(2) <= X"00000000";
        delayMatch18_reg(3) <= X"00000000";
        delayMatch18_reg(4) <= X"00000000";
        delayMatch18_reg(5) <= X"00000000";
        delayMatch18_reg(6) <= X"00000000";
        delayMatch18_reg(7) <= X"00000000";
        delayMatch18_reg(8) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch18_reg(0) <= delayMatch18_reg_next(0);
        delayMatch18_reg(1) <= delayMatch18_reg_next(1);
        delayMatch18_reg(2) <= delayMatch18_reg_next(2);
        delayMatch18_reg(3) <= delayMatch18_reg_next(3);
        delayMatch18_reg(4) <= delayMatch18_reg_next(4);
        delayMatch18_reg(5) <= delayMatch18_reg_next(5);
        delayMatch18_reg(6) <= delayMatch18_reg_next(6);
        delayMatch18_reg(7) <= delayMatch18_reg_next(7);
        delayMatch18_reg(8) <= delayMatch18_reg_next(8);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  From10_out1 <= delayMatch18_reg(8);
  delayMatch18_reg_next(0) <= alpha1_L_d;
  delayMatch18_reg_next(1) <= delayMatch18_reg(0);
  delayMatch18_reg_next(2) <= delayMatch18_reg(1);
  delayMatch18_reg_next(3) <= delayMatch18_reg(2);
  delayMatch18_reg_next(4) <= delayMatch18_reg(3);
  delayMatch18_reg_next(5) <= delayMatch18_reg(4);
  delayMatch18_reg_next(6) <= delayMatch18_reg(5);
  delayMatch18_reg_next(7) <= delayMatch18_reg(6);
  delayMatch18_reg_next(8) <= delayMatch18_reg(7);

  psi_pm <= physical_parameters_psi_pm;

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch17_reg(0) <= X"00000000";
        delayMatch17_reg(1) <= X"00000000";
        delayMatch17_reg(2) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch17_reg(0) <= delayMatch17_reg_next(0);
        delayMatch17_reg(1) <= delayMatch17_reg_next(1);
        delayMatch17_reg(2) <= delayMatch17_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  From24_out1 <= delayMatch17_reg(2);
  delayMatch17_reg_next(0) <= psi_pm;
  delayMatch17_reg_next(1) <= delayMatch17_reg(0);
  delayMatch17_reg_next(2) <= delayMatch17_reg(1);

  physical_parameters_R_1_1 <= physical_parameters_R_1;

  R_1 <= physical_parameters_R_1_1;

  simulate_mechanical <= Model_Parameter_simulate_mechanical;

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch14_reg(0) <= '0';
        delayMatch14_reg(1) <= '0';
        delayMatch14_reg(2) <= '0';
      ELSIF enb = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  simulate_mechanical_1 <= delayMatch14_reg(2);
  delayMatch14_reg_next(0) <= simulate_mechanical;
  delayMatch14_reg_next(1) <= delayMatch14_reg(0);
  delayMatch14_reg_next(2) <= delayMatch14_reg(1);

  input_1_1 <= input_4(1);

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= X"00000000";
        delayMatch15_reg(1) <= X"00000000";
        delayMatch15_reg(2) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  omega_mech <= delayMatch15_reg(2);
  delayMatch15_reg_next(0) <= input_1_1;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);

  reset_integrators_1 <= Model_Parameter_reset_integrators_1;

  kconst_2 <= X"3eb0c6f7a0b5ed8d";

  alpha1_J <= physical_parameters_1_J;

  load_torque <= input_4(0);

  Delay1_iv <= X"0000000000000000";

  physical_parameters_polepair_1 <= physical_parameters_polepair;

  polepair <= physical_parameters_polepair_1;

  kconst_3 <= X"3eb0c6f7a0b5ed8d";

  alpha1_L_q <= physical_parameters_1_L_q;

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch16_reg(0) <= X"00000000";
        delayMatch16_reg(1) <= X"00000000";
        delayMatch16_reg(2) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch16_reg(0) <= delayMatch16_reg_next(0);
        delayMatch16_reg(1) <= delayMatch16_reg_next(1);
        delayMatch16_reg(2) <= delayMatch16_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  From7_out1 <= delayMatch16_reg(2);
  delayMatch16_reg_next(0) <= alpha1_L_q;
  delayMatch16_reg_next(1) <= delayMatch16_reg(0);
  delayMatch16_reg_next(2) <= delayMatch16_reg(1);

  Delay1_iv_1 <= X"0000000000000000";

  Delay1_iv_2 <= X"0000000000000000";

  polepair_1 <= physical_parameters_polepair_1;

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch22_reg(0) <= X"00000000";
        delayMatch22_reg(1) <= X"00000000";
        delayMatch22_reg(2) <= X"00000000";
        delayMatch22_reg(3) <= X"00000000";
        delayMatch22_reg(4) <= X"00000000";
        delayMatch22_reg(5) <= X"00000000";
        delayMatch22_reg(6) <= X"00000000";
        delayMatch22_reg(7) <= X"00000000";
        delayMatch22_reg(8) <= X"00000000";
        delayMatch22_reg(9) <= X"00000000";
        delayMatch22_reg(10) <= X"00000000";
        delayMatch22_reg(11) <= X"00000000";
        delayMatch22_reg(12) <= X"00000000";
        delayMatch22_reg(13) <= X"00000000";
        delayMatch22_reg(14) <= X"00000000";
        delayMatch22_reg(15) <= X"00000000";
        delayMatch22_reg(16) <= X"00000000";
        delayMatch22_reg(17) <= X"00000000";
        delayMatch22_reg(18) <= X"00000000";
        delayMatch22_reg(19) <= X"00000000";
        delayMatch22_reg(20) <= X"00000000";
        delayMatch22_reg(21) <= X"00000000";
        delayMatch22_reg(22) <= X"00000000";
        delayMatch22_reg(23) <= X"00000000";
        delayMatch22_reg(24) <= X"00000000";
        delayMatch22_reg(25) <= X"00000000";
        delayMatch22_reg(26) <= X"00000000";
        delayMatch22_reg(27) <= X"00000000";
        delayMatch22_reg(28) <= X"00000000";
        delayMatch22_reg(29) <= X"00000000";
        delayMatch22_reg(30) <= X"00000000";
        delayMatch22_reg(31) <= X"00000000";
        delayMatch22_reg(32) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch22_reg(0) <= delayMatch22_reg_next(0);
        delayMatch22_reg(1) <= delayMatch22_reg_next(1);
        delayMatch22_reg(2) <= delayMatch22_reg_next(2);
        delayMatch22_reg(3) <= delayMatch22_reg_next(3);
        delayMatch22_reg(4) <= delayMatch22_reg_next(4);
        delayMatch22_reg(5) <= delayMatch22_reg_next(5);
        delayMatch22_reg(6) <= delayMatch22_reg_next(6);
        delayMatch22_reg(7) <= delayMatch22_reg_next(7);
        delayMatch22_reg(8) <= delayMatch22_reg_next(8);
        delayMatch22_reg(9) <= delayMatch22_reg_next(9);
        delayMatch22_reg(10) <= delayMatch22_reg_next(10);
        delayMatch22_reg(11) <= delayMatch22_reg_next(11);
        delayMatch22_reg(12) <= delayMatch22_reg_next(12);
        delayMatch22_reg(13) <= delayMatch22_reg_next(13);
        delayMatch22_reg(14) <= delayMatch22_reg_next(14);
        delayMatch22_reg(15) <= delayMatch22_reg_next(15);
        delayMatch22_reg(16) <= delayMatch22_reg_next(16);
        delayMatch22_reg(17) <= delayMatch22_reg_next(17);
        delayMatch22_reg(18) <= delayMatch22_reg_next(18);
        delayMatch22_reg(19) <= delayMatch22_reg_next(19);
        delayMatch22_reg(20) <= delayMatch22_reg_next(20);
        delayMatch22_reg(21) <= delayMatch22_reg_next(21);
        delayMatch22_reg(22) <= delayMatch22_reg_next(22);
        delayMatch22_reg(23) <= delayMatch22_reg_next(23);
        delayMatch22_reg(24) <= delayMatch22_reg_next(24);
        delayMatch22_reg(25) <= delayMatch22_reg_next(25);
        delayMatch22_reg(26) <= delayMatch22_reg_next(26);
        delayMatch22_reg(27) <= delayMatch22_reg_next(27);
        delayMatch22_reg(28) <= delayMatch22_reg_next(28);
        delayMatch22_reg(29) <= delayMatch22_reg_next(29);
        delayMatch22_reg(30) <= delayMatch22_reg_next(30);
        delayMatch22_reg(31) <= delayMatch22_reg_next(31);
        delayMatch22_reg(32) <= delayMatch22_reg_next(32);
      END IF;
    END IF;
  END PROCESS delayMatch22_process;

  From_out1 <= delayMatch22_reg(32);
  delayMatch22_reg_next(0) <= polepair_1;
  delayMatch22_reg_next(1) <= delayMatch22_reg(0);
  delayMatch22_reg_next(2) <= delayMatch22_reg(1);
  delayMatch22_reg_next(3) <= delayMatch22_reg(2);
  delayMatch22_reg_next(4) <= delayMatch22_reg(3);
  delayMatch22_reg_next(5) <= delayMatch22_reg(4);
  delayMatch22_reg_next(6) <= delayMatch22_reg(5);
  delayMatch22_reg_next(7) <= delayMatch22_reg(6);
  delayMatch22_reg_next(8) <= delayMatch22_reg(7);
  delayMatch22_reg_next(9) <= delayMatch22_reg(8);
  delayMatch22_reg_next(10) <= delayMatch22_reg(9);
  delayMatch22_reg_next(11) <= delayMatch22_reg(10);
  delayMatch22_reg_next(12) <= delayMatch22_reg(11);
  delayMatch22_reg_next(13) <= delayMatch22_reg(12);
  delayMatch22_reg_next(14) <= delayMatch22_reg(13);
  delayMatch22_reg_next(15) <= delayMatch22_reg(14);
  delayMatch22_reg_next(16) <= delayMatch22_reg(15);
  delayMatch22_reg_next(17) <= delayMatch22_reg(16);
  delayMatch22_reg_next(18) <= delayMatch22_reg(17);
  delayMatch22_reg_next(19) <= delayMatch22_reg(18);
  delayMatch22_reg_next(20) <= delayMatch22_reg(19);
  delayMatch22_reg_next(21) <= delayMatch22_reg(20);
  delayMatch22_reg_next(22) <= delayMatch22_reg(21);
  delayMatch22_reg_next(23) <= delayMatch22_reg(22);
  delayMatch22_reg_next(24) <= delayMatch22_reg(23);
  delayMatch22_reg_next(25) <= delayMatch22_reg(24);
  delayMatch22_reg_next(26) <= delayMatch22_reg(25);
  delayMatch22_reg_next(27) <= delayMatch22_reg(26);
  delayMatch22_reg_next(28) <= delayMatch22_reg(27);
  delayMatch22_reg_next(29) <= delayMatch22_reg(28);
  delayMatch22_reg_next(30) <= delayMatch22_reg(29);
  delayMatch22_reg_next(31) <= delayMatch22_reg(30);
  delayMatch22_reg_next(32) <= delayMatch22_reg(31);

  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch20_reg(0) <= X"00000000";
        delayMatch20_reg(1) <= X"00000000";
        delayMatch20_reg(2) <= X"00000000";
        delayMatch20_reg(3) <= X"00000000";
        delayMatch20_reg(4) <= X"00000000";
        delayMatch20_reg(5) <= X"00000000";
        delayMatch20_reg(6) <= X"00000000";
        delayMatch20_reg(7) <= X"00000000";
        delayMatch20_reg(8) <= X"00000000";
        delayMatch20_reg(9) <= X"00000000";
        delayMatch20_reg(10) <= X"00000000";
        delayMatch20_reg(11) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch20_reg(0) <= delayMatch20_reg_next(0);
        delayMatch20_reg(1) <= delayMatch20_reg_next(1);
        delayMatch20_reg(2) <= delayMatch20_reg_next(2);
        delayMatch20_reg(3) <= delayMatch20_reg_next(3);
        delayMatch20_reg(4) <= delayMatch20_reg_next(4);
        delayMatch20_reg(5) <= delayMatch20_reg_next(5);
        delayMatch20_reg(6) <= delayMatch20_reg_next(6);
        delayMatch20_reg(7) <= delayMatch20_reg_next(7);
        delayMatch20_reg(8) <= delayMatch20_reg_next(8);
        delayMatch20_reg(9) <= delayMatch20_reg_next(9);
        delayMatch20_reg(10) <= delayMatch20_reg_next(10);
        delayMatch20_reg(11) <= delayMatch20_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch20_process;

  pmsm_out4 <= delayMatch20_reg(11);
  delayMatch20_reg_next(0) <= Data_Type_Conversion13_out1;
  delayMatch20_reg_next(1) <= delayMatch20_reg(0);
  delayMatch20_reg_next(2) <= delayMatch20_reg(1);
  delayMatch20_reg_next(3) <= delayMatch20_reg(2);
  delayMatch20_reg_next(4) <= delayMatch20_reg(3);
  delayMatch20_reg_next(5) <= delayMatch20_reg(4);
  delayMatch20_reg_next(6) <= delayMatch20_reg(5);
  delayMatch20_reg_next(7) <= delayMatch20_reg(6);
  delayMatch20_reg_next(8) <= delayMatch20_reg(7);
  delayMatch20_reg_next(9) <= delayMatch20_reg(8);
  delayMatch20_reg_next(10) <= delayMatch20_reg(9);
  delayMatch20_reg_next(11) <= delayMatch20_reg(10);

  I_d_1 <= I_d;

  i_d_2 <= I_d_1;

  I_q_1 <= I_q;

  i_q_2 <= I_q_1;

  omega_el_1 <= omega_el;

  
  Delay1_toDel <= Sum3_out1 WHEN reset_integrators = '0' ELSE
      Delay1_iv_1;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_1 <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_2 <= Delay1_toDel_1 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut <= Delay1_toDel_2;

  
  Delay1_out1_4 <= Delay1_delOut WHEN reset_integrators = '0' ELSE
      Delay1_iv_1;

  psi_q <= Delay1_out1_4;

  M_Mi_1 <= M_Mi;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        M_Mi_2 <= X"00000000";
      ELSIF enb = '1' THEN
        M_Mi_2 <= M_Mi_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_bypass_reg <= X"00000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay8_bypass_reg <= M_Mi_2;
      END IF;
    END IF;
  END PROCESS Delay8_bypass_process;

  
  M_Mi_3 <= M_Mi_2 WHEN enb_1_500_1 = '1' ELSE
      Delay8_bypass_reg;

  
  Delay1_toDel_3 <= Sum3_out1_1 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_4 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_4 <= Delay1_toDel_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay1_lowered1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered1_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered1_bypass_reg <= Delay1_toDel_4;
      END IF;
    END IF;
  END PROCESS Delay1_lowered1_bypass_process;

  
  Delay1_toDel_5 <= Delay1_toDel_4 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered1_bypass_reg;

  Delay1_delOut_1 <= Delay1_toDel_5;

  
  Delay1_out1_5 <= Delay1_delOut_1 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv;

  
  Switch1_out1 <= omega_mech WHEN simulate_mechanical_1 = '0' ELSE
      Data_Type_Conversion8_out1;

  
  Delay1_toDel_6 <= Sum3_out1_2 WHEN reset_integrators = '0' ELSE
      Delay1_iv_2;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_7 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_7 <= Delay1_toDel_6;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay1_lowered2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered2_bypass_reg <= Delay1_toDel_7;
      END IF;
    END IF;
  END PROCESS Delay1_lowered2_bypass_process;

  
  Delay1_toDel_8 <= Delay1_toDel_7 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered2_bypass_reg;

  Delay1_delOut_2 <= Delay1_toDel_8;

  
  Delay1_out1_6 <= Delay1_delOut_2 WHEN reset_integrators = '0' ELSE
      Delay1_iv_2;

  psi_d <= Delay1_out1_6;

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch19_reg(0) <= X"00000000";
        delayMatch19_reg(1) <= X"00000000";
        delayMatch19_reg(2) <= X"00000000";
        delayMatch19_reg(3) <= X"00000000";
        delayMatch19_reg(4) <= X"00000000";
        delayMatch19_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch19_reg(0) <= delayMatch19_reg_next(0);
        delayMatch19_reg(1) <= delayMatch19_reg_next(1);
        delayMatch19_reg(2) <= delayMatch19_reg_next(2);
        delayMatch19_reg(3) <= delayMatch19_reg_next(3);
        delayMatch19_reg(4) <= delayMatch19_reg_next(4);
        delayMatch19_reg(5) <= delayMatch19_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch19_process;

  pmsm_out3 <= delayMatch19_reg(5);
  delayMatch19_reg_next(0) <= Data_Type_Conversion23_out1;
  delayMatch19_reg_next(1) <= delayMatch19_reg(0);
  delayMatch19_reg_next(2) <= delayMatch19_reg(1);
  delayMatch19_reg_next(3) <= delayMatch19_reg(2);
  delayMatch19_reg_next(4) <= delayMatch19_reg(3);
  delayMatch19_reg_next(5) <= delayMatch19_reg(4);

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch21_reg(0) <= X"00000000";
        delayMatch21_reg(1) <= X"00000000";
        delayMatch21_reg(2) <= X"00000000";
        delayMatch21_reg(3) <= X"00000000";
        delayMatch21_reg(4) <= X"00000000";
        delayMatch21_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch21_reg(0) <= delayMatch21_reg_next(0);
        delayMatch21_reg(1) <= delayMatch21_reg_next(1);
        delayMatch21_reg(2) <= delayMatch21_reg_next(2);
        delayMatch21_reg(3) <= delayMatch21_reg_next(3);
        delayMatch21_reg(4) <= delayMatch21_reg_next(4);
        delayMatch21_reg(5) <= delayMatch21_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  Product3_out1_1 <= delayMatch21_reg(5);
  delayMatch21_reg_next(0) <= Product3_out1;
  delayMatch21_reg_next(1) <= delayMatch21_reg(0);
  delayMatch21_reg_next(2) <= delayMatch21_reg(1);
  delayMatch21_reg_next(3) <= delayMatch21_reg(2);
  delayMatch21_reg_next(4) <= delayMatch21_reg(3);
  delayMatch21_reg_next(5) <= delayMatch21_reg(4);

  M_Mi_5 <= M_Mi_4;

  M_Mi_6 <= M_Mi;

  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch30_reg(0) <= X"00000000";
        delayMatch30_reg(1) <= X"00000000";
        delayMatch30_reg(2) <= X"00000000";
        delayMatch30_reg(3) <= X"00000000";
        delayMatch30_reg(4) <= X"00000000";
        delayMatch30_reg(5) <= X"00000000";
        delayMatch30_reg(6) <= X"00000000";
        delayMatch30_reg(7) <= X"00000000";
        delayMatch30_reg(8) <= X"00000000";
        delayMatch30_reg(9) <= X"00000000";
        delayMatch30_reg(10) <= X"00000000";
        delayMatch30_reg(11) <= X"00000000";
        delayMatch30_reg(12) <= X"00000000";
        delayMatch30_reg(13) <= X"00000000";
        delayMatch30_reg(14) <= X"00000000";
        delayMatch30_reg(15) <= X"00000000";
        delayMatch30_reg(16) <= X"00000000";
        delayMatch30_reg(17) <= X"00000000";
        delayMatch30_reg(18) <= X"00000000";
        delayMatch30_reg(19) <= X"00000000";
        delayMatch30_reg(20) <= X"00000000";
        delayMatch30_reg(21) <= X"00000000";
        delayMatch30_reg(22) <= X"00000000";
        delayMatch30_reg(23) <= X"00000000";
        delayMatch30_reg(24) <= X"00000000";
        delayMatch30_reg(25) <= X"00000000";
        delayMatch30_reg(26) <= X"00000000";
        delayMatch30_reg(27) <= X"00000000";
        delayMatch30_reg(28) <= X"00000000";
        delayMatch30_reg(29) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch30_reg(0) <= delayMatch30_reg_next(0);
        delayMatch30_reg(1) <= delayMatch30_reg_next(1);
        delayMatch30_reg(2) <= delayMatch30_reg_next(2);
        delayMatch30_reg(3) <= delayMatch30_reg_next(3);
        delayMatch30_reg(4) <= delayMatch30_reg_next(4);
        delayMatch30_reg(5) <= delayMatch30_reg_next(5);
        delayMatch30_reg(6) <= delayMatch30_reg_next(6);
        delayMatch30_reg(7) <= delayMatch30_reg_next(7);
        delayMatch30_reg(8) <= delayMatch30_reg_next(8);
        delayMatch30_reg(9) <= delayMatch30_reg_next(9);
        delayMatch30_reg(10) <= delayMatch30_reg_next(10);
        delayMatch30_reg(11) <= delayMatch30_reg_next(11);
        delayMatch30_reg(12) <= delayMatch30_reg_next(12);
        delayMatch30_reg(13) <= delayMatch30_reg_next(13);
        delayMatch30_reg(14) <= delayMatch30_reg_next(14);
        delayMatch30_reg(15) <= delayMatch30_reg_next(15);
        delayMatch30_reg(16) <= delayMatch30_reg_next(16);
        delayMatch30_reg(17) <= delayMatch30_reg_next(17);
        delayMatch30_reg(18) <= delayMatch30_reg_next(18);
        delayMatch30_reg(19) <= delayMatch30_reg_next(19);
        delayMatch30_reg(20) <= delayMatch30_reg_next(20);
        delayMatch30_reg(21) <= delayMatch30_reg_next(21);
        delayMatch30_reg(22) <= delayMatch30_reg_next(22);
        delayMatch30_reg(23) <= delayMatch30_reg_next(23);
        delayMatch30_reg(24) <= delayMatch30_reg_next(24);
        delayMatch30_reg(25) <= delayMatch30_reg_next(25);
        delayMatch30_reg(26) <= delayMatch30_reg_next(26);
        delayMatch30_reg(27) <= delayMatch30_reg_next(27);
        delayMatch30_reg(28) <= delayMatch30_reg_next(28);
        delayMatch30_reg(29) <= delayMatch30_reg_next(29);
      END IF;
    END IF;
  END PROCESS delayMatch30_process;

  torque <= delayMatch30_reg(29);
  delayMatch30_reg_next(0) <= M_Mi_6;
  delayMatch30_reg_next(1) <= delayMatch30_reg(0);
  delayMatch30_reg_next(2) <= delayMatch30_reg(1);
  delayMatch30_reg_next(3) <= delayMatch30_reg(2);
  delayMatch30_reg_next(4) <= delayMatch30_reg(3);
  delayMatch30_reg_next(5) <= delayMatch30_reg(4);
  delayMatch30_reg_next(6) <= delayMatch30_reg(5);
  delayMatch30_reg_next(7) <= delayMatch30_reg(6);
  delayMatch30_reg_next(8) <= delayMatch30_reg(7);
  delayMatch30_reg_next(9) <= delayMatch30_reg(8);
  delayMatch30_reg_next(10) <= delayMatch30_reg(9);
  delayMatch30_reg_next(11) <= delayMatch30_reg(10);
  delayMatch30_reg_next(12) <= delayMatch30_reg(11);
  delayMatch30_reg_next(13) <= delayMatch30_reg(12);
  delayMatch30_reg_next(14) <= delayMatch30_reg(13);
  delayMatch30_reg_next(15) <= delayMatch30_reg(14);
  delayMatch30_reg_next(16) <= delayMatch30_reg(15);
  delayMatch30_reg_next(17) <= delayMatch30_reg(16);
  delayMatch30_reg_next(18) <= delayMatch30_reg(17);
  delayMatch30_reg_next(19) <= delayMatch30_reg(18);
  delayMatch30_reg_next(20) <= delayMatch30_reg(19);
  delayMatch30_reg_next(21) <= delayMatch30_reg(20);
  delayMatch30_reg_next(22) <= delayMatch30_reg(21);
  delayMatch30_reg_next(23) <= delayMatch30_reg(22);
  delayMatch30_reg_next(24) <= delayMatch30_reg(23);
  delayMatch30_reg_next(25) <= delayMatch30_reg(24);
  delayMatch30_reg_next(26) <= delayMatch30_reg(25);
  delayMatch30_reg_next(27) <= delayMatch30_reg(26);
  delayMatch30_reg_next(28) <= delayMatch30_reg(27);
  delayMatch30_reg_next(29) <= delayMatch30_reg(28);

  delayMatch31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch31_reg(0) <= X"00000000";
        delayMatch31_reg(1) <= X"00000000";
        delayMatch31_reg(2) <= X"00000000";
        delayMatch31_reg(3) <= X"00000000";
        delayMatch31_reg(4) <= X"00000000";
        delayMatch31_reg(5) <= X"00000000";
        delayMatch31_reg(6) <= X"00000000";
        delayMatch31_reg(7) <= X"00000000";
        delayMatch31_reg(8) <= X"00000000";
        delayMatch31_reg(9) <= X"00000000";
        delayMatch31_reg(10) <= X"00000000";
        delayMatch31_reg(11) <= X"00000000";
        delayMatch31_reg(12) <= X"00000000";
        delayMatch31_reg(13) <= X"00000000";
        delayMatch31_reg(14) <= X"00000000";
        delayMatch31_reg(15) <= X"00000000";
        delayMatch31_reg(16) <= X"00000000";
        delayMatch31_reg(17) <= X"00000000";
        delayMatch31_reg(18) <= X"00000000";
        delayMatch31_reg(19) <= X"00000000";
        delayMatch31_reg(20) <= X"00000000";
        delayMatch31_reg(21) <= X"00000000";
        delayMatch31_reg(22) <= X"00000000";
        delayMatch31_reg(23) <= X"00000000";
        delayMatch31_reg(24) <= X"00000000";
        delayMatch31_reg(25) <= X"00000000";
        delayMatch31_reg(26) <= X"00000000";
        delayMatch31_reg(27) <= X"00000000";
        delayMatch31_reg(28) <= X"00000000";
        delayMatch31_reg(29) <= X"00000000";
        delayMatch31_reg(30) <= X"00000000";
        delayMatch31_reg(31) <= X"00000000";
        delayMatch31_reg(32) <= X"00000000";
        delayMatch31_reg(33) <= X"00000000";
        delayMatch31_reg(34) <= X"00000000";
        delayMatch31_reg(35) <= X"00000000";
        delayMatch31_reg(36) <= X"00000000";
        delayMatch31_reg(37) <= X"00000000";
        delayMatch31_reg(38) <= X"00000000";
        delayMatch31_reg(39) <= X"00000000";
        delayMatch31_reg(40) <= X"00000000";
        delayMatch31_reg(41) <= X"00000000";
        delayMatch31_reg(42) <= X"00000000";
        delayMatch31_reg(43) <= X"00000000";
        delayMatch31_reg(44) <= X"00000000";
        delayMatch31_reg(45) <= X"00000000";
        delayMatch31_reg(46) <= X"00000000";
        delayMatch31_reg(47) <= X"00000000";
        delayMatch31_reg(48) <= X"00000000";
        delayMatch31_reg(49) <= X"00000000";
        delayMatch31_reg(50) <= X"00000000";
        delayMatch31_reg(51) <= X"00000000";
        delayMatch31_reg(52) <= X"00000000";
        delayMatch31_reg(53) <= X"00000000";
        delayMatch31_reg(54) <= X"00000000";
        delayMatch31_reg(55) <= X"00000000";
        delayMatch31_reg(56) <= X"00000000";
        delayMatch31_reg(57) <= X"00000000";
        delayMatch31_reg(58) <= X"00000000";
        delayMatch31_reg(59) <= X"00000000";
        delayMatch31_reg(60) <= X"00000000";
        delayMatch31_reg(61) <= X"00000000";
        delayMatch31_reg(62) <= X"00000000";
        delayMatch31_reg(63) <= X"00000000";
        delayMatch31_reg(64) <= X"00000000";
        delayMatch31_reg(65) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch31_reg(0) <= delayMatch31_reg_next(0);
        delayMatch31_reg(1) <= delayMatch31_reg_next(1);
        delayMatch31_reg(2) <= delayMatch31_reg_next(2);
        delayMatch31_reg(3) <= delayMatch31_reg_next(3);
        delayMatch31_reg(4) <= delayMatch31_reg_next(4);
        delayMatch31_reg(5) <= delayMatch31_reg_next(5);
        delayMatch31_reg(6) <= delayMatch31_reg_next(6);
        delayMatch31_reg(7) <= delayMatch31_reg_next(7);
        delayMatch31_reg(8) <= delayMatch31_reg_next(8);
        delayMatch31_reg(9) <= delayMatch31_reg_next(9);
        delayMatch31_reg(10) <= delayMatch31_reg_next(10);
        delayMatch31_reg(11) <= delayMatch31_reg_next(11);
        delayMatch31_reg(12) <= delayMatch31_reg_next(12);
        delayMatch31_reg(13) <= delayMatch31_reg_next(13);
        delayMatch31_reg(14) <= delayMatch31_reg_next(14);
        delayMatch31_reg(15) <= delayMatch31_reg_next(15);
        delayMatch31_reg(16) <= delayMatch31_reg_next(16);
        delayMatch31_reg(17) <= delayMatch31_reg_next(17);
        delayMatch31_reg(18) <= delayMatch31_reg_next(18);
        delayMatch31_reg(19) <= delayMatch31_reg_next(19);
        delayMatch31_reg(20) <= delayMatch31_reg_next(20);
        delayMatch31_reg(21) <= delayMatch31_reg_next(21);
        delayMatch31_reg(22) <= delayMatch31_reg_next(22);
        delayMatch31_reg(23) <= delayMatch31_reg_next(23);
        delayMatch31_reg(24) <= delayMatch31_reg_next(24);
        delayMatch31_reg(25) <= delayMatch31_reg_next(25);
        delayMatch31_reg(26) <= delayMatch31_reg_next(26);
        delayMatch31_reg(27) <= delayMatch31_reg_next(27);
        delayMatch31_reg(28) <= delayMatch31_reg_next(28);
        delayMatch31_reg(29) <= delayMatch31_reg_next(29);
        delayMatch31_reg(30) <= delayMatch31_reg_next(30);
        delayMatch31_reg(31) <= delayMatch31_reg_next(31);
        delayMatch31_reg(32) <= delayMatch31_reg_next(32);
        delayMatch31_reg(33) <= delayMatch31_reg_next(33);
        delayMatch31_reg(34) <= delayMatch31_reg_next(34);
        delayMatch31_reg(35) <= delayMatch31_reg_next(35);
        delayMatch31_reg(36) <= delayMatch31_reg_next(36);
        delayMatch31_reg(37) <= delayMatch31_reg_next(37);
        delayMatch31_reg(38) <= delayMatch31_reg_next(38);
        delayMatch31_reg(39) <= delayMatch31_reg_next(39);
        delayMatch31_reg(40) <= delayMatch31_reg_next(40);
        delayMatch31_reg(41) <= delayMatch31_reg_next(41);
        delayMatch31_reg(42) <= delayMatch31_reg_next(42);
        delayMatch31_reg(43) <= delayMatch31_reg_next(43);
        delayMatch31_reg(44) <= delayMatch31_reg_next(44);
        delayMatch31_reg(45) <= delayMatch31_reg_next(45);
        delayMatch31_reg(46) <= delayMatch31_reg_next(46);
        delayMatch31_reg(47) <= delayMatch31_reg_next(47);
        delayMatch31_reg(48) <= delayMatch31_reg_next(48);
        delayMatch31_reg(49) <= delayMatch31_reg_next(49);
        delayMatch31_reg(50) <= delayMatch31_reg_next(50);
        delayMatch31_reg(51) <= delayMatch31_reg_next(51);
        delayMatch31_reg(52) <= delayMatch31_reg_next(52);
        delayMatch31_reg(53) <= delayMatch31_reg_next(53);
        delayMatch31_reg(54) <= delayMatch31_reg_next(54);
        delayMatch31_reg(55) <= delayMatch31_reg_next(55);
        delayMatch31_reg(56) <= delayMatch31_reg_next(56);
        delayMatch31_reg(57) <= delayMatch31_reg_next(57);
        delayMatch31_reg(58) <= delayMatch31_reg_next(58);
        delayMatch31_reg(59) <= delayMatch31_reg_next(59);
        delayMatch31_reg(60) <= delayMatch31_reg_next(60);
        delayMatch31_reg(61) <= delayMatch31_reg_next(61);
        delayMatch31_reg(62) <= delayMatch31_reg_next(62);
        delayMatch31_reg(63) <= delayMatch31_reg_next(63);
        delayMatch31_reg(64) <= delayMatch31_reg_next(64);
        delayMatch31_reg(65) <= delayMatch31_reg_next(65);
      END IF;
    END IF;
  END PROCESS delayMatch31_process;

  omega_mech_1 <= delayMatch31_reg(65);
  delayMatch31_reg_next(0) <= Switch1_out1;
  delayMatch31_reg_next(1) <= delayMatch31_reg(0);
  delayMatch31_reg_next(2) <= delayMatch31_reg(1);
  delayMatch31_reg_next(3) <= delayMatch31_reg(2);
  delayMatch31_reg_next(4) <= delayMatch31_reg(3);
  delayMatch31_reg_next(5) <= delayMatch31_reg(4);
  delayMatch31_reg_next(6) <= delayMatch31_reg(5);
  delayMatch31_reg_next(7) <= delayMatch31_reg(6);
  delayMatch31_reg_next(8) <= delayMatch31_reg(7);
  delayMatch31_reg_next(9) <= delayMatch31_reg(8);
  delayMatch31_reg_next(10) <= delayMatch31_reg(9);
  delayMatch31_reg_next(11) <= delayMatch31_reg(10);
  delayMatch31_reg_next(12) <= delayMatch31_reg(11);
  delayMatch31_reg_next(13) <= delayMatch31_reg(12);
  delayMatch31_reg_next(14) <= delayMatch31_reg(13);
  delayMatch31_reg_next(15) <= delayMatch31_reg(14);
  delayMatch31_reg_next(16) <= delayMatch31_reg(15);
  delayMatch31_reg_next(17) <= delayMatch31_reg(16);
  delayMatch31_reg_next(18) <= delayMatch31_reg(17);
  delayMatch31_reg_next(19) <= delayMatch31_reg(18);
  delayMatch31_reg_next(20) <= delayMatch31_reg(19);
  delayMatch31_reg_next(21) <= delayMatch31_reg(20);
  delayMatch31_reg_next(22) <= delayMatch31_reg(21);
  delayMatch31_reg_next(23) <= delayMatch31_reg(22);
  delayMatch31_reg_next(24) <= delayMatch31_reg(23);
  delayMatch31_reg_next(25) <= delayMatch31_reg(24);
  delayMatch31_reg_next(26) <= delayMatch31_reg(25);
  delayMatch31_reg_next(27) <= delayMatch31_reg(26);
  delayMatch31_reg_next(28) <= delayMatch31_reg(27);
  delayMatch31_reg_next(29) <= delayMatch31_reg(28);
  delayMatch31_reg_next(30) <= delayMatch31_reg(29);
  delayMatch31_reg_next(31) <= delayMatch31_reg(30);
  delayMatch31_reg_next(32) <= delayMatch31_reg(31);
  delayMatch31_reg_next(33) <= delayMatch31_reg(32);
  delayMatch31_reg_next(34) <= delayMatch31_reg(33);
  delayMatch31_reg_next(35) <= delayMatch31_reg(34);
  delayMatch31_reg_next(36) <= delayMatch31_reg(35);
  delayMatch31_reg_next(37) <= delayMatch31_reg(36);
  delayMatch31_reg_next(38) <= delayMatch31_reg(37);
  delayMatch31_reg_next(39) <= delayMatch31_reg(38);
  delayMatch31_reg_next(40) <= delayMatch31_reg(39);
  delayMatch31_reg_next(41) <= delayMatch31_reg(40);
  delayMatch31_reg_next(42) <= delayMatch31_reg(41);
  delayMatch31_reg_next(43) <= delayMatch31_reg(42);
  delayMatch31_reg_next(44) <= delayMatch31_reg(43);
  delayMatch31_reg_next(45) <= delayMatch31_reg(44);
  delayMatch31_reg_next(46) <= delayMatch31_reg(45);
  delayMatch31_reg_next(47) <= delayMatch31_reg(46);
  delayMatch31_reg_next(48) <= delayMatch31_reg(47);
  delayMatch31_reg_next(49) <= delayMatch31_reg(48);
  delayMatch31_reg_next(50) <= delayMatch31_reg(49);
  delayMatch31_reg_next(51) <= delayMatch31_reg(50);
  delayMatch31_reg_next(52) <= delayMatch31_reg(51);
  delayMatch31_reg_next(53) <= delayMatch31_reg(52);
  delayMatch31_reg_next(54) <= delayMatch31_reg(53);
  delayMatch31_reg_next(55) <= delayMatch31_reg(54);
  delayMatch31_reg_next(56) <= delayMatch31_reg(55);
  delayMatch31_reg_next(57) <= delayMatch31_reg(56);
  delayMatch31_reg_next(58) <= delayMatch31_reg(57);
  delayMatch31_reg_next(59) <= delayMatch31_reg(58);
  delayMatch31_reg_next(60) <= delayMatch31_reg(59);
  delayMatch31_reg_next(61) <= delayMatch31_reg(60);
  delayMatch31_reg_next(62) <= delayMatch31_reg(61);
  delayMatch31_reg_next(63) <= delayMatch31_reg(62);
  delayMatch31_reg_next(64) <= delayMatch31_reg(63);
  delayMatch31_reg_next(65) <= delayMatch31_reg(64);

  delayMatch23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch23_reg(0) <= X"00000000";
        delayMatch23_reg(1) <= X"00000000";
        delayMatch23_reg(2) <= X"00000000";
        delayMatch23_reg(3) <= X"00000000";
        delayMatch23_reg(4) <= X"00000000";
        delayMatch23_reg(5) <= X"00000000";
        delayMatch23_reg(6) <= X"00000000";
        delayMatch23_reg(7) <= X"00000000";
        delayMatch23_reg(8) <= X"00000000";
        delayMatch23_reg(9) <= X"00000000";
        delayMatch23_reg(10) <= X"00000000";
        delayMatch23_reg(11) <= X"00000000";
        delayMatch23_reg(12) <= X"00000000";
        delayMatch23_reg(13) <= X"00000000";
        delayMatch23_reg(14) <= X"00000000";
        delayMatch23_reg(15) <= X"00000000";
        delayMatch23_reg(16) <= X"00000000";
        delayMatch23_reg(17) <= X"00000000";
        delayMatch23_reg(18) <= X"00000000";
        delayMatch23_reg(19) <= X"00000000";
        delayMatch23_reg(20) <= X"00000000";
        delayMatch23_reg(21) <= X"00000000";
        delayMatch23_reg(22) <= X"00000000";
        delayMatch23_reg(23) <= X"00000000";
        delayMatch23_reg(24) <= X"00000000";
        delayMatch23_reg(25) <= X"00000000";
        delayMatch23_reg(26) <= X"00000000";
        delayMatch23_reg(27) <= X"00000000";
        delayMatch23_reg(28) <= X"00000000";
        delayMatch23_reg(29) <= X"00000000";
        delayMatch23_reg(30) <= X"00000000";
        delayMatch23_reg(31) <= X"00000000";
        delayMatch23_reg(32) <= X"00000000";
        delayMatch23_reg(33) <= X"00000000";
        delayMatch23_reg(34) <= X"00000000";
        delayMatch23_reg(35) <= X"00000000";
        delayMatch23_reg(36) <= X"00000000";
        delayMatch23_reg(37) <= X"00000000";
        delayMatch23_reg(38) <= X"00000000";
        delayMatch23_reg(39) <= X"00000000";
        delayMatch23_reg(40) <= X"00000000";
        delayMatch23_reg(41) <= X"00000000";
        delayMatch23_reg(42) <= X"00000000";
        delayMatch23_reg(43) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch23_reg(0) <= delayMatch23_reg_next(0);
        delayMatch23_reg(1) <= delayMatch23_reg_next(1);
        delayMatch23_reg(2) <= delayMatch23_reg_next(2);
        delayMatch23_reg(3) <= delayMatch23_reg_next(3);
        delayMatch23_reg(4) <= delayMatch23_reg_next(4);
        delayMatch23_reg(5) <= delayMatch23_reg_next(5);
        delayMatch23_reg(6) <= delayMatch23_reg_next(6);
        delayMatch23_reg(7) <= delayMatch23_reg_next(7);
        delayMatch23_reg(8) <= delayMatch23_reg_next(8);
        delayMatch23_reg(9) <= delayMatch23_reg_next(9);
        delayMatch23_reg(10) <= delayMatch23_reg_next(10);
        delayMatch23_reg(11) <= delayMatch23_reg_next(11);
        delayMatch23_reg(12) <= delayMatch23_reg_next(12);
        delayMatch23_reg(13) <= delayMatch23_reg_next(13);
        delayMatch23_reg(14) <= delayMatch23_reg_next(14);
        delayMatch23_reg(15) <= delayMatch23_reg_next(15);
        delayMatch23_reg(16) <= delayMatch23_reg_next(16);
        delayMatch23_reg(17) <= delayMatch23_reg_next(17);
        delayMatch23_reg(18) <= delayMatch23_reg_next(18);
        delayMatch23_reg(19) <= delayMatch23_reg_next(19);
        delayMatch23_reg(20) <= delayMatch23_reg_next(20);
        delayMatch23_reg(21) <= delayMatch23_reg_next(21);
        delayMatch23_reg(22) <= delayMatch23_reg_next(22);
        delayMatch23_reg(23) <= delayMatch23_reg_next(23);
        delayMatch23_reg(24) <= delayMatch23_reg_next(24);
        delayMatch23_reg(25) <= delayMatch23_reg_next(25);
        delayMatch23_reg(26) <= delayMatch23_reg_next(26);
        delayMatch23_reg(27) <= delayMatch23_reg_next(27);
        delayMatch23_reg(28) <= delayMatch23_reg_next(28);
        delayMatch23_reg(29) <= delayMatch23_reg_next(29);
        delayMatch23_reg(30) <= delayMatch23_reg_next(30);
        delayMatch23_reg(31) <= delayMatch23_reg_next(31);
        delayMatch23_reg(32) <= delayMatch23_reg_next(32);
        delayMatch23_reg(33) <= delayMatch23_reg_next(33);
        delayMatch23_reg(34) <= delayMatch23_reg_next(34);
        delayMatch23_reg(35) <= delayMatch23_reg_next(35);
        delayMatch23_reg(36) <= delayMatch23_reg_next(36);
        delayMatch23_reg(37) <= delayMatch23_reg_next(37);
        delayMatch23_reg(38) <= delayMatch23_reg_next(38);
        delayMatch23_reg(39) <= delayMatch23_reg_next(39);
        delayMatch23_reg(40) <= delayMatch23_reg_next(40);
        delayMatch23_reg(41) <= delayMatch23_reg_next(41);
        delayMatch23_reg(42) <= delayMatch23_reg_next(42);
        delayMatch23_reg(43) <= delayMatch23_reg_next(43);
      END IF;
    END IF;
  END PROCESS delayMatch23_process;

  From10_out1_1 <= delayMatch23_reg(43);
  delayMatch23_reg_next(0) <= Switch1_out1;
  delayMatch23_reg_next(1) <= delayMatch23_reg(0);
  delayMatch23_reg_next(2) <= delayMatch23_reg(1);
  delayMatch23_reg_next(3) <= delayMatch23_reg(2);
  delayMatch23_reg_next(4) <= delayMatch23_reg(3);
  delayMatch23_reg_next(5) <= delayMatch23_reg(4);
  delayMatch23_reg_next(6) <= delayMatch23_reg(5);
  delayMatch23_reg_next(7) <= delayMatch23_reg(6);
  delayMatch23_reg_next(8) <= delayMatch23_reg(7);
  delayMatch23_reg_next(9) <= delayMatch23_reg(8);
  delayMatch23_reg_next(10) <= delayMatch23_reg(9);
  delayMatch23_reg_next(11) <= delayMatch23_reg(10);
  delayMatch23_reg_next(12) <= delayMatch23_reg(11);
  delayMatch23_reg_next(13) <= delayMatch23_reg(12);
  delayMatch23_reg_next(14) <= delayMatch23_reg(13);
  delayMatch23_reg_next(15) <= delayMatch23_reg(14);
  delayMatch23_reg_next(16) <= delayMatch23_reg(15);
  delayMatch23_reg_next(17) <= delayMatch23_reg(16);
  delayMatch23_reg_next(18) <= delayMatch23_reg(17);
  delayMatch23_reg_next(19) <= delayMatch23_reg(18);
  delayMatch23_reg_next(20) <= delayMatch23_reg(19);
  delayMatch23_reg_next(21) <= delayMatch23_reg(20);
  delayMatch23_reg_next(22) <= delayMatch23_reg(21);
  delayMatch23_reg_next(23) <= delayMatch23_reg(22);
  delayMatch23_reg_next(24) <= delayMatch23_reg(23);
  delayMatch23_reg_next(25) <= delayMatch23_reg(24);
  delayMatch23_reg_next(26) <= delayMatch23_reg(25);
  delayMatch23_reg_next(27) <= delayMatch23_reg(26);
  delayMatch23_reg_next(28) <= delayMatch23_reg(27);
  delayMatch23_reg_next(29) <= delayMatch23_reg(28);
  delayMatch23_reg_next(30) <= delayMatch23_reg(29);
  delayMatch23_reg_next(31) <= delayMatch23_reg(30);
  delayMatch23_reg_next(32) <= delayMatch23_reg(31);
  delayMatch23_reg_next(33) <= delayMatch23_reg(32);
  delayMatch23_reg_next(34) <= delayMatch23_reg(33);
  delayMatch23_reg_next(35) <= delayMatch23_reg(34);
  delayMatch23_reg_next(36) <= delayMatch23_reg(35);
  delayMatch23_reg_next(37) <= delayMatch23_reg(36);
  delayMatch23_reg_next(38) <= delayMatch23_reg(37);
  delayMatch23_reg_next(39) <= delayMatch23_reg(38);
  delayMatch23_reg_next(40) <= delayMatch23_reg(39);
  delayMatch23_reg_next(41) <= delayMatch23_reg(40);
  delayMatch23_reg_next(42) <= delayMatch23_reg(41);
  delayMatch23_reg_next(43) <= delayMatch23_reg(42);

  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_reg(0) <= X"00000000";
        delayMatch26_reg(1) <= X"00000000";
        delayMatch26_reg(2) <= X"00000000";
        delayMatch26_reg(3) <= X"00000000";
        delayMatch26_reg(4) <= X"00000000";
        delayMatch26_reg(5) <= X"00000000";
        delayMatch26_reg(6) <= X"00000000";
        delayMatch26_reg(7) <= X"00000000";
        delayMatch26_reg(8) <= X"00000000";
        delayMatch26_reg(9) <= X"00000000";
        delayMatch26_reg(10) <= X"00000000";
        delayMatch26_reg(11) <= X"00000000";
        delayMatch26_reg(12) <= X"00000000";
        delayMatch26_reg(13) <= X"00000000";
        delayMatch26_reg(14) <= X"00000000";
        delayMatch26_reg(15) <= X"00000000";
        delayMatch26_reg(16) <= X"00000000";
        delayMatch26_reg(17) <= X"00000000";
        delayMatch26_reg(18) <= X"00000000";
        delayMatch26_reg(19) <= X"00000000";
        delayMatch26_reg(20) <= X"00000000";
        delayMatch26_reg(21) <= X"00000000";
        delayMatch26_reg(22) <= X"00000000";
        delayMatch26_reg(23) <= X"00000000";
        delayMatch26_reg(24) <= X"00000000";
        delayMatch26_reg(25) <= X"00000000";
        delayMatch26_reg(26) <= X"00000000";
        delayMatch26_reg(27) <= X"00000000";
        delayMatch26_reg(28) <= X"00000000";
        delayMatch26_reg(29) <= X"00000000";
        delayMatch26_reg(30) <= X"00000000";
        delayMatch26_reg(31) <= X"00000000";
        delayMatch26_reg(32) <= X"00000000";
        delayMatch26_reg(33) <= X"00000000";
        delayMatch26_reg(34) <= X"00000000";
        delayMatch26_reg(35) <= X"00000000";
        delayMatch26_reg(36) <= X"00000000";
        delayMatch26_reg(37) <= X"00000000";
        delayMatch26_reg(38) <= X"00000000";
        delayMatch26_reg(39) <= X"00000000";
        delayMatch26_reg(40) <= X"00000000";
        delayMatch26_reg(41) <= X"00000000";
        delayMatch26_reg(42) <= X"00000000";
        delayMatch26_reg(43) <= X"00000000";
        delayMatch26_reg(44) <= X"00000000";
        delayMatch26_reg(45) <= X"00000000";
        delayMatch26_reg(46) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch26_reg(0) <= delayMatch26_reg_next(0);
        delayMatch26_reg(1) <= delayMatch26_reg_next(1);
        delayMatch26_reg(2) <= delayMatch26_reg_next(2);
        delayMatch26_reg(3) <= delayMatch26_reg_next(3);
        delayMatch26_reg(4) <= delayMatch26_reg_next(4);
        delayMatch26_reg(5) <= delayMatch26_reg_next(5);
        delayMatch26_reg(6) <= delayMatch26_reg_next(6);
        delayMatch26_reg(7) <= delayMatch26_reg_next(7);
        delayMatch26_reg(8) <= delayMatch26_reg_next(8);
        delayMatch26_reg(9) <= delayMatch26_reg_next(9);
        delayMatch26_reg(10) <= delayMatch26_reg_next(10);
        delayMatch26_reg(11) <= delayMatch26_reg_next(11);
        delayMatch26_reg(12) <= delayMatch26_reg_next(12);
        delayMatch26_reg(13) <= delayMatch26_reg_next(13);
        delayMatch26_reg(14) <= delayMatch26_reg_next(14);
        delayMatch26_reg(15) <= delayMatch26_reg_next(15);
        delayMatch26_reg(16) <= delayMatch26_reg_next(16);
        delayMatch26_reg(17) <= delayMatch26_reg_next(17);
        delayMatch26_reg(18) <= delayMatch26_reg_next(18);
        delayMatch26_reg(19) <= delayMatch26_reg_next(19);
        delayMatch26_reg(20) <= delayMatch26_reg_next(20);
        delayMatch26_reg(21) <= delayMatch26_reg_next(21);
        delayMatch26_reg(22) <= delayMatch26_reg_next(22);
        delayMatch26_reg(23) <= delayMatch26_reg_next(23);
        delayMatch26_reg(24) <= delayMatch26_reg_next(24);
        delayMatch26_reg(25) <= delayMatch26_reg_next(25);
        delayMatch26_reg(26) <= delayMatch26_reg_next(26);
        delayMatch26_reg(27) <= delayMatch26_reg_next(27);
        delayMatch26_reg(28) <= delayMatch26_reg_next(28);
        delayMatch26_reg(29) <= delayMatch26_reg_next(29);
        delayMatch26_reg(30) <= delayMatch26_reg_next(30);
        delayMatch26_reg(31) <= delayMatch26_reg_next(31);
        delayMatch26_reg(32) <= delayMatch26_reg_next(32);
        delayMatch26_reg(33) <= delayMatch26_reg_next(33);
        delayMatch26_reg(34) <= delayMatch26_reg_next(34);
        delayMatch26_reg(35) <= delayMatch26_reg_next(35);
        delayMatch26_reg(36) <= delayMatch26_reg_next(36);
        delayMatch26_reg(37) <= delayMatch26_reg_next(37);
        delayMatch26_reg(38) <= delayMatch26_reg_next(38);
        delayMatch26_reg(39) <= delayMatch26_reg_next(39);
        delayMatch26_reg(40) <= delayMatch26_reg_next(40);
        delayMatch26_reg(41) <= delayMatch26_reg_next(41);
        delayMatch26_reg(42) <= delayMatch26_reg_next(42);
        delayMatch26_reg(43) <= delayMatch26_reg_next(43);
        delayMatch26_reg(44) <= delayMatch26_reg_next(44);
        delayMatch26_reg(45) <= delayMatch26_reg_next(45);
        delayMatch26_reg(46) <= delayMatch26_reg_next(46);
      END IF;
    END IF;
  END PROCESS delayMatch26_process;

  From5_out1 <= delayMatch26_reg(46);
  delayMatch26_reg_next(0) <= polepair_1;
  delayMatch26_reg_next(1) <= delayMatch26_reg(0);
  delayMatch26_reg_next(2) <= delayMatch26_reg(1);
  delayMatch26_reg_next(3) <= delayMatch26_reg(2);
  delayMatch26_reg_next(4) <= delayMatch26_reg(3);
  delayMatch26_reg_next(5) <= delayMatch26_reg(4);
  delayMatch26_reg_next(6) <= delayMatch26_reg(5);
  delayMatch26_reg_next(7) <= delayMatch26_reg(6);
  delayMatch26_reg_next(8) <= delayMatch26_reg(7);
  delayMatch26_reg_next(9) <= delayMatch26_reg(8);
  delayMatch26_reg_next(10) <= delayMatch26_reg(9);
  delayMatch26_reg_next(11) <= delayMatch26_reg(10);
  delayMatch26_reg_next(12) <= delayMatch26_reg(11);
  delayMatch26_reg_next(13) <= delayMatch26_reg(12);
  delayMatch26_reg_next(14) <= delayMatch26_reg(13);
  delayMatch26_reg_next(15) <= delayMatch26_reg(14);
  delayMatch26_reg_next(16) <= delayMatch26_reg(15);
  delayMatch26_reg_next(17) <= delayMatch26_reg(16);
  delayMatch26_reg_next(18) <= delayMatch26_reg(17);
  delayMatch26_reg_next(19) <= delayMatch26_reg(18);
  delayMatch26_reg_next(20) <= delayMatch26_reg(19);
  delayMatch26_reg_next(21) <= delayMatch26_reg(20);
  delayMatch26_reg_next(22) <= delayMatch26_reg(21);
  delayMatch26_reg_next(23) <= delayMatch26_reg(22);
  delayMatch26_reg_next(24) <= delayMatch26_reg(23);
  delayMatch26_reg_next(25) <= delayMatch26_reg(24);
  delayMatch26_reg_next(26) <= delayMatch26_reg(25);
  delayMatch26_reg_next(27) <= delayMatch26_reg(26);
  delayMatch26_reg_next(28) <= delayMatch26_reg(27);
  delayMatch26_reg_next(29) <= delayMatch26_reg(28);
  delayMatch26_reg_next(30) <= delayMatch26_reg(29);
  delayMatch26_reg_next(31) <= delayMatch26_reg(30);
  delayMatch26_reg_next(32) <= delayMatch26_reg(31);
  delayMatch26_reg_next(33) <= delayMatch26_reg(32);
  delayMatch26_reg_next(34) <= delayMatch26_reg(33);
  delayMatch26_reg_next(35) <= delayMatch26_reg(34);
  delayMatch26_reg_next(36) <= delayMatch26_reg(35);
  delayMatch26_reg_next(37) <= delayMatch26_reg(36);
  delayMatch26_reg_next(38) <= delayMatch26_reg(37);
  delayMatch26_reg_next(39) <= delayMatch26_reg(38);
  delayMatch26_reg_next(40) <= delayMatch26_reg(39);
  delayMatch26_reg_next(41) <= delayMatch26_reg(40);
  delayMatch26_reg_next(42) <= delayMatch26_reg(41);
  delayMatch26_reg_next(43) <= delayMatch26_reg(42);
  delayMatch26_reg_next(44) <= delayMatch26_reg(43);
  delayMatch26_reg_next(45) <= delayMatch26_reg(44);
  delayMatch26_reg_next(46) <= delayMatch26_reg(45);

  delayMatch32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch32_reg(0) <= '0';
        delayMatch32_reg(1) <= '0';
        delayMatch32_reg(2) <= '0';
        delayMatch32_reg(3) <= '0';
        delayMatch32_reg(4) <= '0';
        delayMatch32_reg(5) <= '0';
        delayMatch32_reg(6) <= '0';
        delayMatch32_reg(7) <= '0';
        delayMatch32_reg(8) <= '0';
        delayMatch32_reg(9) <= '0';
        delayMatch32_reg(10) <= '0';
        delayMatch32_reg(11) <= '0';
        delayMatch32_reg(12) <= '0';
        delayMatch32_reg(13) <= '0';
        delayMatch32_reg(14) <= '0';
        delayMatch32_reg(15) <= '0';
        delayMatch32_reg(16) <= '0';
        delayMatch32_reg(17) <= '0';
        delayMatch32_reg(18) <= '0';
        delayMatch32_reg(19) <= '0';
        delayMatch32_reg(20) <= '0';
        delayMatch32_reg(21) <= '0';
        delayMatch32_reg(22) <= '0';
        delayMatch32_reg(23) <= '0';
        delayMatch32_reg(24) <= '0';
        delayMatch32_reg(25) <= '0';
        delayMatch32_reg(26) <= '0';
        delayMatch32_reg(27) <= '0';
        delayMatch32_reg(28) <= '0';
        delayMatch32_reg(29) <= '0';
        delayMatch32_reg(30) <= '0';
        delayMatch32_reg(31) <= '0';
        delayMatch32_reg(32) <= '0';
        delayMatch32_reg(33) <= '0';
        delayMatch32_reg(34) <= '0';
        delayMatch32_reg(35) <= '0';
        delayMatch32_reg(36) <= '0';
        delayMatch32_reg(37) <= '0';
        delayMatch32_reg(38) <= '0';
        delayMatch32_reg(39) <= '0';
        delayMatch32_reg(40) <= '0';
        delayMatch32_reg(41) <= '0';
        delayMatch32_reg(42) <= '0';
        delayMatch32_reg(43) <= '0';
        delayMatch32_reg(44) <= '0';
        delayMatch32_reg(45) <= '0';
        delayMatch32_reg(46) <= '0';
        delayMatch32_reg(47) <= '0';
        delayMatch32_reg(48) <= '0';
        delayMatch32_reg(49) <= '0';
        delayMatch32_reg(50) <= '0';
        delayMatch32_reg(51) <= '0';
        delayMatch32_reg(52) <= '0';
        delayMatch32_reg(53) <= '0';
        delayMatch32_reg(54) <= '0';
        delayMatch32_reg(55) <= '0';
        delayMatch32_reg(56) <= '0';
        delayMatch32_reg(57) <= '0';
        delayMatch32_reg(58) <= '0';
        delayMatch32_reg(59) <= '0';
        delayMatch32_reg(60) <= '0';
        delayMatch32_reg(61) <= '0';
        delayMatch32_reg(62) <= '0';
        delayMatch32_reg(63) <= '0';
        delayMatch32_reg(64) <= '0';
        delayMatch32_reg(65) <= '0';
        delayMatch32_reg(66) <= '0';
        delayMatch32_reg(67) <= '0';
        delayMatch32_reg(68) <= '0';
      ELSIF enb = '1' THEN
        delayMatch32_reg(0) <= delayMatch32_reg_next(0);
        delayMatch32_reg(1) <= delayMatch32_reg_next(1);
        delayMatch32_reg(2) <= delayMatch32_reg_next(2);
        delayMatch32_reg(3) <= delayMatch32_reg_next(3);
        delayMatch32_reg(4) <= delayMatch32_reg_next(4);
        delayMatch32_reg(5) <= delayMatch32_reg_next(5);
        delayMatch32_reg(6) <= delayMatch32_reg_next(6);
        delayMatch32_reg(7) <= delayMatch32_reg_next(7);
        delayMatch32_reg(8) <= delayMatch32_reg_next(8);
        delayMatch32_reg(9) <= delayMatch32_reg_next(9);
        delayMatch32_reg(10) <= delayMatch32_reg_next(10);
        delayMatch32_reg(11) <= delayMatch32_reg_next(11);
        delayMatch32_reg(12) <= delayMatch32_reg_next(12);
        delayMatch32_reg(13) <= delayMatch32_reg_next(13);
        delayMatch32_reg(14) <= delayMatch32_reg_next(14);
        delayMatch32_reg(15) <= delayMatch32_reg_next(15);
        delayMatch32_reg(16) <= delayMatch32_reg_next(16);
        delayMatch32_reg(17) <= delayMatch32_reg_next(17);
        delayMatch32_reg(18) <= delayMatch32_reg_next(18);
        delayMatch32_reg(19) <= delayMatch32_reg_next(19);
        delayMatch32_reg(20) <= delayMatch32_reg_next(20);
        delayMatch32_reg(21) <= delayMatch32_reg_next(21);
        delayMatch32_reg(22) <= delayMatch32_reg_next(22);
        delayMatch32_reg(23) <= delayMatch32_reg_next(23);
        delayMatch32_reg(24) <= delayMatch32_reg_next(24);
        delayMatch32_reg(25) <= delayMatch32_reg_next(25);
        delayMatch32_reg(26) <= delayMatch32_reg_next(26);
        delayMatch32_reg(27) <= delayMatch32_reg_next(27);
        delayMatch32_reg(28) <= delayMatch32_reg_next(28);
        delayMatch32_reg(29) <= delayMatch32_reg_next(29);
        delayMatch32_reg(30) <= delayMatch32_reg_next(30);
        delayMatch32_reg(31) <= delayMatch32_reg_next(31);
        delayMatch32_reg(32) <= delayMatch32_reg_next(32);
        delayMatch32_reg(33) <= delayMatch32_reg_next(33);
        delayMatch32_reg(34) <= delayMatch32_reg_next(34);
        delayMatch32_reg(35) <= delayMatch32_reg_next(35);
        delayMatch32_reg(36) <= delayMatch32_reg_next(36);
        delayMatch32_reg(37) <= delayMatch32_reg_next(37);
        delayMatch32_reg(38) <= delayMatch32_reg_next(38);
        delayMatch32_reg(39) <= delayMatch32_reg_next(39);
        delayMatch32_reg(40) <= delayMatch32_reg_next(40);
        delayMatch32_reg(41) <= delayMatch32_reg_next(41);
        delayMatch32_reg(42) <= delayMatch32_reg_next(42);
        delayMatch32_reg(43) <= delayMatch32_reg_next(43);
        delayMatch32_reg(44) <= delayMatch32_reg_next(44);
        delayMatch32_reg(45) <= delayMatch32_reg_next(45);
        delayMatch32_reg(46) <= delayMatch32_reg_next(46);
        delayMatch32_reg(47) <= delayMatch32_reg_next(47);
        delayMatch32_reg(48) <= delayMatch32_reg_next(48);
        delayMatch32_reg(49) <= delayMatch32_reg_next(49);
        delayMatch32_reg(50) <= delayMatch32_reg_next(50);
        delayMatch32_reg(51) <= delayMatch32_reg_next(51);
        delayMatch32_reg(52) <= delayMatch32_reg_next(52);
        delayMatch32_reg(53) <= delayMatch32_reg_next(53);
        delayMatch32_reg(54) <= delayMatch32_reg_next(54);
        delayMatch32_reg(55) <= delayMatch32_reg_next(55);
        delayMatch32_reg(56) <= delayMatch32_reg_next(56);
        delayMatch32_reg(57) <= delayMatch32_reg_next(57);
        delayMatch32_reg(58) <= delayMatch32_reg_next(58);
        delayMatch32_reg(59) <= delayMatch32_reg_next(59);
        delayMatch32_reg(60) <= delayMatch32_reg_next(60);
        delayMatch32_reg(61) <= delayMatch32_reg_next(61);
        delayMatch32_reg(62) <= delayMatch32_reg_next(62);
        delayMatch32_reg(63) <= delayMatch32_reg_next(63);
        delayMatch32_reg(64) <= delayMatch32_reg_next(64);
        delayMatch32_reg(65) <= delayMatch32_reg_next(65);
        delayMatch32_reg(66) <= delayMatch32_reg_next(66);
        delayMatch32_reg(67) <= delayMatch32_reg_next(67);
        delayMatch32_reg(68) <= delayMatch32_reg_next(68);
      END IF;
    END IF;
  END PROCESS delayMatch32_process;

  reset_integrators_2 <= delayMatch32_reg(68);
  delayMatch32_reg_next(0) <= reset_integrators_1;
  delayMatch32_reg_next(1) <= delayMatch32_reg(0);
  delayMatch32_reg_next(2) <= delayMatch32_reg(1);
  delayMatch32_reg_next(3) <= delayMatch32_reg(2);
  delayMatch32_reg_next(4) <= delayMatch32_reg(3);
  delayMatch32_reg_next(5) <= delayMatch32_reg(4);
  delayMatch32_reg_next(6) <= delayMatch32_reg(5);
  delayMatch32_reg_next(7) <= delayMatch32_reg(6);
  delayMatch32_reg_next(8) <= delayMatch32_reg(7);
  delayMatch32_reg_next(9) <= delayMatch32_reg(8);
  delayMatch32_reg_next(10) <= delayMatch32_reg(9);
  delayMatch32_reg_next(11) <= delayMatch32_reg(10);
  delayMatch32_reg_next(12) <= delayMatch32_reg(11);
  delayMatch32_reg_next(13) <= delayMatch32_reg(12);
  delayMatch32_reg_next(14) <= delayMatch32_reg(13);
  delayMatch32_reg_next(15) <= delayMatch32_reg(14);
  delayMatch32_reg_next(16) <= delayMatch32_reg(15);
  delayMatch32_reg_next(17) <= delayMatch32_reg(16);
  delayMatch32_reg_next(18) <= delayMatch32_reg(17);
  delayMatch32_reg_next(19) <= delayMatch32_reg(18);
  delayMatch32_reg_next(20) <= delayMatch32_reg(19);
  delayMatch32_reg_next(21) <= delayMatch32_reg(20);
  delayMatch32_reg_next(22) <= delayMatch32_reg(21);
  delayMatch32_reg_next(23) <= delayMatch32_reg(22);
  delayMatch32_reg_next(24) <= delayMatch32_reg(23);
  delayMatch32_reg_next(25) <= delayMatch32_reg(24);
  delayMatch32_reg_next(26) <= delayMatch32_reg(25);
  delayMatch32_reg_next(27) <= delayMatch32_reg(26);
  delayMatch32_reg_next(28) <= delayMatch32_reg(27);
  delayMatch32_reg_next(29) <= delayMatch32_reg(28);
  delayMatch32_reg_next(30) <= delayMatch32_reg(29);
  delayMatch32_reg_next(31) <= delayMatch32_reg(30);
  delayMatch32_reg_next(32) <= delayMatch32_reg(31);
  delayMatch32_reg_next(33) <= delayMatch32_reg(32);
  delayMatch32_reg_next(34) <= delayMatch32_reg(33);
  delayMatch32_reg_next(35) <= delayMatch32_reg(34);
  delayMatch32_reg_next(36) <= delayMatch32_reg(35);
  delayMatch32_reg_next(37) <= delayMatch32_reg(36);
  delayMatch32_reg_next(38) <= delayMatch32_reg(37);
  delayMatch32_reg_next(39) <= delayMatch32_reg(38);
  delayMatch32_reg_next(40) <= delayMatch32_reg(39);
  delayMatch32_reg_next(41) <= delayMatch32_reg(40);
  delayMatch32_reg_next(42) <= delayMatch32_reg(41);
  delayMatch32_reg_next(43) <= delayMatch32_reg(42);
  delayMatch32_reg_next(44) <= delayMatch32_reg(43);
  delayMatch32_reg_next(45) <= delayMatch32_reg(44);
  delayMatch32_reg_next(46) <= delayMatch32_reg(45);
  delayMatch32_reg_next(47) <= delayMatch32_reg(46);
  delayMatch32_reg_next(48) <= delayMatch32_reg(47);
  delayMatch32_reg_next(49) <= delayMatch32_reg(48);
  delayMatch32_reg_next(50) <= delayMatch32_reg(49);
  delayMatch32_reg_next(51) <= delayMatch32_reg(50);
  delayMatch32_reg_next(52) <= delayMatch32_reg(51);
  delayMatch32_reg_next(53) <= delayMatch32_reg(52);
  delayMatch32_reg_next(54) <= delayMatch32_reg(53);
  delayMatch32_reg_next(55) <= delayMatch32_reg(54);
  delayMatch32_reg_next(56) <= delayMatch32_reg(55);
  delayMatch32_reg_next(57) <= delayMatch32_reg(56);
  delayMatch32_reg_next(58) <= delayMatch32_reg(57);
  delayMatch32_reg_next(59) <= delayMatch32_reg(58);
  delayMatch32_reg_next(60) <= delayMatch32_reg(59);
  delayMatch32_reg_next(61) <= delayMatch32_reg(60);
  delayMatch32_reg_next(62) <= delayMatch32_reg(61);
  delayMatch32_reg_next(63) <= delayMatch32_reg(62);
  delayMatch32_reg_next(64) <= delayMatch32_reg(63);
  delayMatch32_reg_next(65) <= delayMatch32_reg(64);
  delayMatch32_reg_next(66) <= delayMatch32_reg(65);
  delayMatch32_reg_next(67) <= delayMatch32_reg(66);
  delayMatch32_reg_next(68) <= delayMatch32_reg(67);

  input_2_1 <= input_4(2);

  delayMatch33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch33_reg(0) <= X"00000000";
        delayMatch33_reg(1) <= X"00000000";
        delayMatch33_reg(2) <= X"00000000";
        delayMatch33_reg(3) <= X"00000000";
        delayMatch33_reg(4) <= X"00000000";
        delayMatch33_reg(5) <= X"00000000";
        delayMatch33_reg(6) <= X"00000000";
        delayMatch33_reg(7) <= X"00000000";
        delayMatch33_reg(8) <= X"00000000";
        delayMatch33_reg(9) <= X"00000000";
        delayMatch33_reg(10) <= X"00000000";
        delayMatch33_reg(11) <= X"00000000";
        delayMatch33_reg(12) <= X"00000000";
        delayMatch33_reg(13) <= X"00000000";
        delayMatch33_reg(14) <= X"00000000";
        delayMatch33_reg(15) <= X"00000000";
        delayMatch33_reg(16) <= X"00000000";
        delayMatch33_reg(17) <= X"00000000";
        delayMatch33_reg(18) <= X"00000000";
        delayMatch33_reg(19) <= X"00000000";
        delayMatch33_reg(20) <= X"00000000";
        delayMatch33_reg(21) <= X"00000000";
        delayMatch33_reg(22) <= X"00000000";
        delayMatch33_reg(23) <= X"00000000";
        delayMatch33_reg(24) <= X"00000000";
        delayMatch33_reg(25) <= X"00000000";
        delayMatch33_reg(26) <= X"00000000";
        delayMatch33_reg(27) <= X"00000000";
        delayMatch33_reg(28) <= X"00000000";
        delayMatch33_reg(29) <= X"00000000";
        delayMatch33_reg(30) <= X"00000000";
        delayMatch33_reg(31) <= X"00000000";
        delayMatch33_reg(32) <= X"00000000";
        delayMatch33_reg(33) <= X"00000000";
        delayMatch33_reg(34) <= X"00000000";
        delayMatch33_reg(35) <= X"00000000";
        delayMatch33_reg(36) <= X"00000000";
        delayMatch33_reg(37) <= X"00000000";
        delayMatch33_reg(38) <= X"00000000";
        delayMatch33_reg(39) <= X"00000000";
        delayMatch33_reg(40) <= X"00000000";
        delayMatch33_reg(41) <= X"00000000";
        delayMatch33_reg(42) <= X"00000000";
        delayMatch33_reg(43) <= X"00000000";
        delayMatch33_reg(44) <= X"00000000";
        delayMatch33_reg(45) <= X"00000000";
        delayMatch33_reg(46) <= X"00000000";
        delayMatch33_reg(47) <= X"00000000";
        delayMatch33_reg(48) <= X"00000000";
        delayMatch33_reg(49) <= X"00000000";
        delayMatch33_reg(50) <= X"00000000";
        delayMatch33_reg(51) <= X"00000000";
        delayMatch33_reg(52) <= X"00000000";
        delayMatch33_reg(53) <= X"00000000";
        delayMatch33_reg(54) <= X"00000000";
        delayMatch33_reg(55) <= X"00000000";
        delayMatch33_reg(56) <= X"00000000";
        delayMatch33_reg(57) <= X"00000000";
        delayMatch33_reg(58) <= X"00000000";
        delayMatch33_reg(59) <= X"00000000";
        delayMatch33_reg(60) <= X"00000000";
        delayMatch33_reg(61) <= X"00000000";
        delayMatch33_reg(62) <= X"00000000";
        delayMatch33_reg(63) <= X"00000000";
        delayMatch33_reg(64) <= X"00000000";
        delayMatch33_reg(65) <= X"00000000";
        delayMatch33_reg(66) <= X"00000000";
        delayMatch33_reg(67) <= X"00000000";
        delayMatch33_reg(68) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch33_reg(0) <= delayMatch33_reg_next(0);
        delayMatch33_reg(1) <= delayMatch33_reg_next(1);
        delayMatch33_reg(2) <= delayMatch33_reg_next(2);
        delayMatch33_reg(3) <= delayMatch33_reg_next(3);
        delayMatch33_reg(4) <= delayMatch33_reg_next(4);
        delayMatch33_reg(5) <= delayMatch33_reg_next(5);
        delayMatch33_reg(6) <= delayMatch33_reg_next(6);
        delayMatch33_reg(7) <= delayMatch33_reg_next(7);
        delayMatch33_reg(8) <= delayMatch33_reg_next(8);
        delayMatch33_reg(9) <= delayMatch33_reg_next(9);
        delayMatch33_reg(10) <= delayMatch33_reg_next(10);
        delayMatch33_reg(11) <= delayMatch33_reg_next(11);
        delayMatch33_reg(12) <= delayMatch33_reg_next(12);
        delayMatch33_reg(13) <= delayMatch33_reg_next(13);
        delayMatch33_reg(14) <= delayMatch33_reg_next(14);
        delayMatch33_reg(15) <= delayMatch33_reg_next(15);
        delayMatch33_reg(16) <= delayMatch33_reg_next(16);
        delayMatch33_reg(17) <= delayMatch33_reg_next(17);
        delayMatch33_reg(18) <= delayMatch33_reg_next(18);
        delayMatch33_reg(19) <= delayMatch33_reg_next(19);
        delayMatch33_reg(20) <= delayMatch33_reg_next(20);
        delayMatch33_reg(21) <= delayMatch33_reg_next(21);
        delayMatch33_reg(22) <= delayMatch33_reg_next(22);
        delayMatch33_reg(23) <= delayMatch33_reg_next(23);
        delayMatch33_reg(24) <= delayMatch33_reg_next(24);
        delayMatch33_reg(25) <= delayMatch33_reg_next(25);
        delayMatch33_reg(26) <= delayMatch33_reg_next(26);
        delayMatch33_reg(27) <= delayMatch33_reg_next(27);
        delayMatch33_reg(28) <= delayMatch33_reg_next(28);
        delayMatch33_reg(29) <= delayMatch33_reg_next(29);
        delayMatch33_reg(30) <= delayMatch33_reg_next(30);
        delayMatch33_reg(31) <= delayMatch33_reg_next(31);
        delayMatch33_reg(32) <= delayMatch33_reg_next(32);
        delayMatch33_reg(33) <= delayMatch33_reg_next(33);
        delayMatch33_reg(34) <= delayMatch33_reg_next(34);
        delayMatch33_reg(35) <= delayMatch33_reg_next(35);
        delayMatch33_reg(36) <= delayMatch33_reg_next(36);
        delayMatch33_reg(37) <= delayMatch33_reg_next(37);
        delayMatch33_reg(38) <= delayMatch33_reg_next(38);
        delayMatch33_reg(39) <= delayMatch33_reg_next(39);
        delayMatch33_reg(40) <= delayMatch33_reg_next(40);
        delayMatch33_reg(41) <= delayMatch33_reg_next(41);
        delayMatch33_reg(42) <= delayMatch33_reg_next(42);
        delayMatch33_reg(43) <= delayMatch33_reg_next(43);
        delayMatch33_reg(44) <= delayMatch33_reg_next(44);
        delayMatch33_reg(45) <= delayMatch33_reg_next(45);
        delayMatch33_reg(46) <= delayMatch33_reg_next(46);
        delayMatch33_reg(47) <= delayMatch33_reg_next(47);
        delayMatch33_reg(48) <= delayMatch33_reg_next(48);
        delayMatch33_reg(49) <= delayMatch33_reg_next(49);
        delayMatch33_reg(50) <= delayMatch33_reg_next(50);
        delayMatch33_reg(51) <= delayMatch33_reg_next(51);
        delayMatch33_reg(52) <= delayMatch33_reg_next(52);
        delayMatch33_reg(53) <= delayMatch33_reg_next(53);
        delayMatch33_reg(54) <= delayMatch33_reg_next(54);
        delayMatch33_reg(55) <= delayMatch33_reg_next(55);
        delayMatch33_reg(56) <= delayMatch33_reg_next(56);
        delayMatch33_reg(57) <= delayMatch33_reg_next(57);
        delayMatch33_reg(58) <= delayMatch33_reg_next(58);
        delayMatch33_reg(59) <= delayMatch33_reg_next(59);
        delayMatch33_reg(60) <= delayMatch33_reg_next(60);
        delayMatch33_reg(61) <= delayMatch33_reg_next(61);
        delayMatch33_reg(62) <= delayMatch33_reg_next(62);
        delayMatch33_reg(63) <= delayMatch33_reg_next(63);
        delayMatch33_reg(64) <= delayMatch33_reg_next(64);
        delayMatch33_reg(65) <= delayMatch33_reg_next(65);
        delayMatch33_reg(66) <= delayMatch33_reg_next(66);
        delayMatch33_reg(67) <= delayMatch33_reg_next(67);
        delayMatch33_reg(68) <= delayMatch33_reg_next(68);
      END IF;
    END IF;
  END PROCESS delayMatch33_process;

  Data_Type_Conversion24_out1 <= delayMatch33_reg(68);
  delayMatch33_reg_next(0) <= input_2_1;
  delayMatch33_reg_next(1) <= delayMatch33_reg(0);
  delayMatch33_reg_next(2) <= delayMatch33_reg(1);
  delayMatch33_reg_next(3) <= delayMatch33_reg(2);
  delayMatch33_reg_next(4) <= delayMatch33_reg(3);
  delayMatch33_reg_next(5) <= delayMatch33_reg(4);
  delayMatch33_reg_next(6) <= delayMatch33_reg(5);
  delayMatch33_reg_next(7) <= delayMatch33_reg(6);
  delayMatch33_reg_next(8) <= delayMatch33_reg(7);
  delayMatch33_reg_next(9) <= delayMatch33_reg(8);
  delayMatch33_reg_next(10) <= delayMatch33_reg(9);
  delayMatch33_reg_next(11) <= delayMatch33_reg(10);
  delayMatch33_reg_next(12) <= delayMatch33_reg(11);
  delayMatch33_reg_next(13) <= delayMatch33_reg(12);
  delayMatch33_reg_next(14) <= delayMatch33_reg(13);
  delayMatch33_reg_next(15) <= delayMatch33_reg(14);
  delayMatch33_reg_next(16) <= delayMatch33_reg(15);
  delayMatch33_reg_next(17) <= delayMatch33_reg(16);
  delayMatch33_reg_next(18) <= delayMatch33_reg(17);
  delayMatch33_reg_next(19) <= delayMatch33_reg(18);
  delayMatch33_reg_next(20) <= delayMatch33_reg(19);
  delayMatch33_reg_next(21) <= delayMatch33_reg(20);
  delayMatch33_reg_next(22) <= delayMatch33_reg(21);
  delayMatch33_reg_next(23) <= delayMatch33_reg(22);
  delayMatch33_reg_next(24) <= delayMatch33_reg(23);
  delayMatch33_reg_next(25) <= delayMatch33_reg(24);
  delayMatch33_reg_next(26) <= delayMatch33_reg(25);
  delayMatch33_reg_next(27) <= delayMatch33_reg(26);
  delayMatch33_reg_next(28) <= delayMatch33_reg(27);
  delayMatch33_reg_next(29) <= delayMatch33_reg(28);
  delayMatch33_reg_next(30) <= delayMatch33_reg(29);
  delayMatch33_reg_next(31) <= delayMatch33_reg(30);
  delayMatch33_reg_next(32) <= delayMatch33_reg(31);
  delayMatch33_reg_next(33) <= delayMatch33_reg(32);
  delayMatch33_reg_next(34) <= delayMatch33_reg(33);
  delayMatch33_reg_next(35) <= delayMatch33_reg(34);
  delayMatch33_reg_next(36) <= delayMatch33_reg(35);
  delayMatch33_reg_next(37) <= delayMatch33_reg(36);
  delayMatch33_reg_next(38) <= delayMatch33_reg(37);
  delayMatch33_reg_next(39) <= delayMatch33_reg(38);
  delayMatch33_reg_next(40) <= delayMatch33_reg(39);
  delayMatch33_reg_next(41) <= delayMatch33_reg(40);
  delayMatch33_reg_next(42) <= delayMatch33_reg(41);
  delayMatch33_reg_next(43) <= delayMatch33_reg(42);
  delayMatch33_reg_next(44) <= delayMatch33_reg(43);
  delayMatch33_reg_next(45) <= delayMatch33_reg(44);
  delayMatch33_reg_next(46) <= delayMatch33_reg(45);
  delayMatch33_reg_next(47) <= delayMatch33_reg(46);
  delayMatch33_reg_next(48) <= delayMatch33_reg(47);
  delayMatch33_reg_next(49) <= delayMatch33_reg(48);
  delayMatch33_reg_next(50) <= delayMatch33_reg(49);
  delayMatch33_reg_next(51) <= delayMatch33_reg(50);
  delayMatch33_reg_next(52) <= delayMatch33_reg(51);
  delayMatch33_reg_next(53) <= delayMatch33_reg(52);
  delayMatch33_reg_next(54) <= delayMatch33_reg(53);
  delayMatch33_reg_next(55) <= delayMatch33_reg(54);
  delayMatch33_reg_next(56) <= delayMatch33_reg(55);
  delayMatch33_reg_next(57) <= delayMatch33_reg(56);
  delayMatch33_reg_next(58) <= delayMatch33_reg(57);
  delayMatch33_reg_next(59) <= delayMatch33_reg(58);
  delayMatch33_reg_next(60) <= delayMatch33_reg(59);
  delayMatch33_reg_next(61) <= delayMatch33_reg(60);
  delayMatch33_reg_next(62) <= delayMatch33_reg(61);
  delayMatch33_reg_next(63) <= delayMatch33_reg(62);
  delayMatch33_reg_next(64) <= delayMatch33_reg(63);
  delayMatch33_reg_next(65) <= delayMatch33_reg(64);
  delayMatch33_reg_next(66) <= delayMatch33_reg(65);
  delayMatch33_reg_next(67) <= delayMatch33_reg(66);
  delayMatch33_reg_next(68) <= delayMatch33_reg(67);

  input_3_1 <= input_4(3);

  delayMatch34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch34_reg(0) <= X"00000000";
        delayMatch34_reg(1) <= X"00000000";
        delayMatch34_reg(2) <= X"00000000";
        delayMatch34_reg(3) <= X"00000000";
        delayMatch34_reg(4) <= X"00000000";
        delayMatch34_reg(5) <= X"00000000";
        delayMatch34_reg(6) <= X"00000000";
        delayMatch34_reg(7) <= X"00000000";
        delayMatch34_reg(8) <= X"00000000";
        delayMatch34_reg(9) <= X"00000000";
        delayMatch34_reg(10) <= X"00000000";
        delayMatch34_reg(11) <= X"00000000";
        delayMatch34_reg(12) <= X"00000000";
        delayMatch34_reg(13) <= X"00000000";
        delayMatch34_reg(14) <= X"00000000";
        delayMatch34_reg(15) <= X"00000000";
        delayMatch34_reg(16) <= X"00000000";
        delayMatch34_reg(17) <= X"00000000";
        delayMatch34_reg(18) <= X"00000000";
        delayMatch34_reg(19) <= X"00000000";
        delayMatch34_reg(20) <= X"00000000";
        delayMatch34_reg(21) <= X"00000000";
        delayMatch34_reg(22) <= X"00000000";
        delayMatch34_reg(23) <= X"00000000";
        delayMatch34_reg(24) <= X"00000000";
        delayMatch34_reg(25) <= X"00000000";
        delayMatch34_reg(26) <= X"00000000";
        delayMatch34_reg(27) <= X"00000000";
        delayMatch34_reg(28) <= X"00000000";
        delayMatch34_reg(29) <= X"00000000";
        delayMatch34_reg(30) <= X"00000000";
        delayMatch34_reg(31) <= X"00000000";
        delayMatch34_reg(32) <= X"00000000";
        delayMatch34_reg(33) <= X"00000000";
        delayMatch34_reg(34) <= X"00000000";
        delayMatch34_reg(35) <= X"00000000";
        delayMatch34_reg(36) <= X"00000000";
        delayMatch34_reg(37) <= X"00000000";
        delayMatch34_reg(38) <= X"00000000";
        delayMatch34_reg(39) <= X"00000000";
        delayMatch34_reg(40) <= X"00000000";
        delayMatch34_reg(41) <= X"00000000";
        delayMatch34_reg(42) <= X"00000000";
        delayMatch34_reg(43) <= X"00000000";
        delayMatch34_reg(44) <= X"00000000";
        delayMatch34_reg(45) <= X"00000000";
        delayMatch34_reg(46) <= X"00000000";
        delayMatch34_reg(47) <= X"00000000";
        delayMatch34_reg(48) <= X"00000000";
        delayMatch34_reg(49) <= X"00000000";
        delayMatch34_reg(50) <= X"00000000";
        delayMatch34_reg(51) <= X"00000000";
        delayMatch34_reg(52) <= X"00000000";
        delayMatch34_reg(53) <= X"00000000";
        delayMatch34_reg(54) <= X"00000000";
        delayMatch34_reg(55) <= X"00000000";
        delayMatch34_reg(56) <= X"00000000";
        delayMatch34_reg(57) <= X"00000000";
        delayMatch34_reg(58) <= X"00000000";
        delayMatch34_reg(59) <= X"00000000";
        delayMatch34_reg(60) <= X"00000000";
        delayMatch34_reg(61) <= X"00000000";
        delayMatch34_reg(62) <= X"00000000";
        delayMatch34_reg(63) <= X"00000000";
        delayMatch34_reg(64) <= X"00000000";
        delayMatch34_reg(65) <= X"00000000";
        delayMatch34_reg(66) <= X"00000000";
        delayMatch34_reg(67) <= X"00000000";
        delayMatch34_reg(68) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch34_reg(0) <= delayMatch34_reg_next(0);
        delayMatch34_reg(1) <= delayMatch34_reg_next(1);
        delayMatch34_reg(2) <= delayMatch34_reg_next(2);
        delayMatch34_reg(3) <= delayMatch34_reg_next(3);
        delayMatch34_reg(4) <= delayMatch34_reg_next(4);
        delayMatch34_reg(5) <= delayMatch34_reg_next(5);
        delayMatch34_reg(6) <= delayMatch34_reg_next(6);
        delayMatch34_reg(7) <= delayMatch34_reg_next(7);
        delayMatch34_reg(8) <= delayMatch34_reg_next(8);
        delayMatch34_reg(9) <= delayMatch34_reg_next(9);
        delayMatch34_reg(10) <= delayMatch34_reg_next(10);
        delayMatch34_reg(11) <= delayMatch34_reg_next(11);
        delayMatch34_reg(12) <= delayMatch34_reg_next(12);
        delayMatch34_reg(13) <= delayMatch34_reg_next(13);
        delayMatch34_reg(14) <= delayMatch34_reg_next(14);
        delayMatch34_reg(15) <= delayMatch34_reg_next(15);
        delayMatch34_reg(16) <= delayMatch34_reg_next(16);
        delayMatch34_reg(17) <= delayMatch34_reg_next(17);
        delayMatch34_reg(18) <= delayMatch34_reg_next(18);
        delayMatch34_reg(19) <= delayMatch34_reg_next(19);
        delayMatch34_reg(20) <= delayMatch34_reg_next(20);
        delayMatch34_reg(21) <= delayMatch34_reg_next(21);
        delayMatch34_reg(22) <= delayMatch34_reg_next(22);
        delayMatch34_reg(23) <= delayMatch34_reg_next(23);
        delayMatch34_reg(24) <= delayMatch34_reg_next(24);
        delayMatch34_reg(25) <= delayMatch34_reg_next(25);
        delayMatch34_reg(26) <= delayMatch34_reg_next(26);
        delayMatch34_reg(27) <= delayMatch34_reg_next(27);
        delayMatch34_reg(28) <= delayMatch34_reg_next(28);
        delayMatch34_reg(29) <= delayMatch34_reg_next(29);
        delayMatch34_reg(30) <= delayMatch34_reg_next(30);
        delayMatch34_reg(31) <= delayMatch34_reg_next(31);
        delayMatch34_reg(32) <= delayMatch34_reg_next(32);
        delayMatch34_reg(33) <= delayMatch34_reg_next(33);
        delayMatch34_reg(34) <= delayMatch34_reg_next(34);
        delayMatch34_reg(35) <= delayMatch34_reg_next(35);
        delayMatch34_reg(36) <= delayMatch34_reg_next(36);
        delayMatch34_reg(37) <= delayMatch34_reg_next(37);
        delayMatch34_reg(38) <= delayMatch34_reg_next(38);
        delayMatch34_reg(39) <= delayMatch34_reg_next(39);
        delayMatch34_reg(40) <= delayMatch34_reg_next(40);
        delayMatch34_reg(41) <= delayMatch34_reg_next(41);
        delayMatch34_reg(42) <= delayMatch34_reg_next(42);
        delayMatch34_reg(43) <= delayMatch34_reg_next(43);
        delayMatch34_reg(44) <= delayMatch34_reg_next(44);
        delayMatch34_reg(45) <= delayMatch34_reg_next(45);
        delayMatch34_reg(46) <= delayMatch34_reg_next(46);
        delayMatch34_reg(47) <= delayMatch34_reg_next(47);
        delayMatch34_reg(48) <= delayMatch34_reg_next(48);
        delayMatch34_reg(49) <= delayMatch34_reg_next(49);
        delayMatch34_reg(50) <= delayMatch34_reg_next(50);
        delayMatch34_reg(51) <= delayMatch34_reg_next(51);
        delayMatch34_reg(52) <= delayMatch34_reg_next(52);
        delayMatch34_reg(53) <= delayMatch34_reg_next(53);
        delayMatch34_reg(54) <= delayMatch34_reg_next(54);
        delayMatch34_reg(55) <= delayMatch34_reg_next(55);
        delayMatch34_reg(56) <= delayMatch34_reg_next(56);
        delayMatch34_reg(57) <= delayMatch34_reg_next(57);
        delayMatch34_reg(58) <= delayMatch34_reg_next(58);
        delayMatch34_reg(59) <= delayMatch34_reg_next(59);
        delayMatch34_reg(60) <= delayMatch34_reg_next(60);
        delayMatch34_reg(61) <= delayMatch34_reg_next(61);
        delayMatch34_reg(62) <= delayMatch34_reg_next(62);
        delayMatch34_reg(63) <= delayMatch34_reg_next(63);
        delayMatch34_reg(64) <= delayMatch34_reg_next(64);
        delayMatch34_reg(65) <= delayMatch34_reg_next(65);
        delayMatch34_reg(66) <= delayMatch34_reg_next(66);
        delayMatch34_reg(67) <= delayMatch34_reg_next(67);
        delayMatch34_reg(68) <= delayMatch34_reg_next(68);
      END IF;
    END IF;
  END PROCESS delayMatch34_process;

  Data_Type_Conversion25_out1 <= delayMatch34_reg(68);
  delayMatch34_reg_next(0) <= input_3_1;
  delayMatch34_reg_next(1) <= delayMatch34_reg(0);
  delayMatch34_reg_next(2) <= delayMatch34_reg(1);
  delayMatch34_reg_next(3) <= delayMatch34_reg(2);
  delayMatch34_reg_next(4) <= delayMatch34_reg(3);
  delayMatch34_reg_next(5) <= delayMatch34_reg(4);
  delayMatch34_reg_next(6) <= delayMatch34_reg(5);
  delayMatch34_reg_next(7) <= delayMatch34_reg(6);
  delayMatch34_reg_next(8) <= delayMatch34_reg(7);
  delayMatch34_reg_next(9) <= delayMatch34_reg(8);
  delayMatch34_reg_next(10) <= delayMatch34_reg(9);
  delayMatch34_reg_next(11) <= delayMatch34_reg(10);
  delayMatch34_reg_next(12) <= delayMatch34_reg(11);
  delayMatch34_reg_next(13) <= delayMatch34_reg(12);
  delayMatch34_reg_next(14) <= delayMatch34_reg(13);
  delayMatch34_reg_next(15) <= delayMatch34_reg(14);
  delayMatch34_reg_next(16) <= delayMatch34_reg(15);
  delayMatch34_reg_next(17) <= delayMatch34_reg(16);
  delayMatch34_reg_next(18) <= delayMatch34_reg(17);
  delayMatch34_reg_next(19) <= delayMatch34_reg(18);
  delayMatch34_reg_next(20) <= delayMatch34_reg(19);
  delayMatch34_reg_next(21) <= delayMatch34_reg(20);
  delayMatch34_reg_next(22) <= delayMatch34_reg(21);
  delayMatch34_reg_next(23) <= delayMatch34_reg(22);
  delayMatch34_reg_next(24) <= delayMatch34_reg(23);
  delayMatch34_reg_next(25) <= delayMatch34_reg(24);
  delayMatch34_reg_next(26) <= delayMatch34_reg(25);
  delayMatch34_reg_next(27) <= delayMatch34_reg(26);
  delayMatch34_reg_next(28) <= delayMatch34_reg(27);
  delayMatch34_reg_next(29) <= delayMatch34_reg(28);
  delayMatch34_reg_next(30) <= delayMatch34_reg(29);
  delayMatch34_reg_next(31) <= delayMatch34_reg(30);
  delayMatch34_reg_next(32) <= delayMatch34_reg(31);
  delayMatch34_reg_next(33) <= delayMatch34_reg(32);
  delayMatch34_reg_next(34) <= delayMatch34_reg(33);
  delayMatch34_reg_next(35) <= delayMatch34_reg(34);
  delayMatch34_reg_next(36) <= delayMatch34_reg(35);
  delayMatch34_reg_next(37) <= delayMatch34_reg(36);
  delayMatch34_reg_next(38) <= delayMatch34_reg(37);
  delayMatch34_reg_next(39) <= delayMatch34_reg(38);
  delayMatch34_reg_next(40) <= delayMatch34_reg(39);
  delayMatch34_reg_next(41) <= delayMatch34_reg(40);
  delayMatch34_reg_next(42) <= delayMatch34_reg(41);
  delayMatch34_reg_next(43) <= delayMatch34_reg(42);
  delayMatch34_reg_next(44) <= delayMatch34_reg(43);
  delayMatch34_reg_next(45) <= delayMatch34_reg(44);
  delayMatch34_reg_next(46) <= delayMatch34_reg(45);
  delayMatch34_reg_next(47) <= delayMatch34_reg(46);
  delayMatch34_reg_next(48) <= delayMatch34_reg(47);
  delayMatch34_reg_next(49) <= delayMatch34_reg(48);
  delayMatch34_reg_next(50) <= delayMatch34_reg(49);
  delayMatch34_reg_next(51) <= delayMatch34_reg(50);
  delayMatch34_reg_next(52) <= delayMatch34_reg(51);
  delayMatch34_reg_next(53) <= delayMatch34_reg(52);
  delayMatch34_reg_next(54) <= delayMatch34_reg(53);
  delayMatch34_reg_next(55) <= delayMatch34_reg(54);
  delayMatch34_reg_next(56) <= delayMatch34_reg(55);
  delayMatch34_reg_next(57) <= delayMatch34_reg(56);
  delayMatch34_reg_next(58) <= delayMatch34_reg(57);
  delayMatch34_reg_next(59) <= delayMatch34_reg(58);
  delayMatch34_reg_next(60) <= delayMatch34_reg(59);
  delayMatch34_reg_next(61) <= delayMatch34_reg(60);
  delayMatch34_reg_next(62) <= delayMatch34_reg(61);
  delayMatch34_reg_next(63) <= delayMatch34_reg(62);
  delayMatch34_reg_next(64) <= delayMatch34_reg(63);
  delayMatch34_reg_next(65) <= delayMatch34_reg(64);
  delayMatch34_reg_next(66) <= delayMatch34_reg(65);
  delayMatch34_reg_next(67) <= delayMatch34_reg(66);
  delayMatch34_reg_next(68) <= delayMatch34_reg(67);

  Mux1_out1(0) <= torque;
  Mux1_out1(1) <= omega_mech_1;
  Mux1_out1(2) <= theta_el;
  Mux1_out1(3) <= Data_Type_Conversion24_out1;
  Mux1_out1(4) <= Data_Type_Conversion25_out1;

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t_bypass_reg(0) <= X"00000000";
        t_bypass_reg(1) <= X"00000000";
        t_bypass_reg(2) <= X"00000000";
        t_bypass_reg(3) <= X"00000000";
        t_bypass_reg(4) <= X"00000000";
      ELSIF enb_1_500_1 = '1' THEN
        t_bypass_reg(0) <= t_bypass_reg_next(0);
        t_bypass_reg(1) <= t_bypass_reg_next(1);
        t_bypass_reg(2) <= t_bypass_reg_next(2);
        t_bypass_reg(3) <= t_bypass_reg_next(3);
        t_bypass_reg(4) <= t_bypass_reg_next(4);
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Mux1_out1_1(0) <= Mux1_out1(0) WHEN enb_1_500_1 = '1' ELSE
      t_bypass_reg(0);
  
  Mux1_out1_1(1) <= Mux1_out1(1) WHEN enb_1_500_1 = '1' ELSE
      t_bypass_reg(1);
  
  Mux1_out1_1(2) <= Mux1_out1(2) WHEN enb_1_500_1 = '1' ELSE
      t_bypass_reg(2);
  
  Mux1_out1_1(3) <= Mux1_out1(3) WHEN enb_1_500_1 = '1' ELSE
      t_bypass_reg(3);
  
  Mux1_out1_1(4) <= Mux1_out1(4) WHEN enb_1_500_1 = '1' ELSE
      t_bypass_reg(4);
  t_bypass_reg_next(0) <= Mux1_out1(0);
  t_bypass_reg_next(1) <= Mux1_out1(1);
  t_bypass_reg_next(2) <= Mux1_out1(2);
  t_bypass_reg_next(3) <= Mux1_out1(3);
  t_bypass_reg_next(4) <= Mux1_out1(4);

  I_d_3 <= I_d;

  kconst_4 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_3 <= X"0000000000000000";

  L_z1 <= physical_parameters_L_z1;

  
  Delay1_toDel_9 <= Sum3_out1_4 WHEN reset_integrators = '0' ELSE
      Delay1_iv_3;

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_10 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_10 <= Delay1_toDel_9;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay1_lowered3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered3_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered3_bypass_reg <= Delay1_toDel_10;
      END IF;
    END IF;
  END PROCESS Delay1_lowered3_bypass_process;

  
  Delay1_toDel_11 <= Delay1_toDel_10 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered3_bypass_reg;

  Delay1_delOut_3 <= Delay1_toDel_11;

  
  Delay1_out1_7 <= Delay1_delOut_3 WHEN reset_integrators = '0' ELSE
      Delay1_iv_3;

  psi <= Delay1_out1_7;

  kconst_5 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_4 <= X"0000000000000000";

  L_z2 <= physical_parameters_L_z2;

  
  Delay1_toDel_12 <= Sum3_out1_5 WHEN reset_integrators = '0' ELSE
      Delay1_iv_4;

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_13 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_13 <= Delay1_toDel_12;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  Delay1_lowered4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered4_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered4_bypass_reg <= Delay1_toDel_13;
      END IF;
    END IF;
  END PROCESS Delay1_lowered4_bypass_process;

  
  Delay1_toDel_14 <= Delay1_toDel_13 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered4_bypass_reg;

  Delay1_delOut_4 <= Delay1_toDel_14;

  
  Delay1_out1_8 <= Delay1_delOut_4 WHEN reset_integrators = '0' ELSE
      Delay1_iv_4;

  psi_1 <= Delay1_out1_8;

  kconst_6 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_5 <= X"0000000000000000";

  L_x1 <= physical_parameters_L_x1;

  
  Delay1_toDel_15 <= Sum3_out1_6 WHEN reset_integrators = '0' ELSE
      Delay1_iv_5;

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_16 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_16 <= Delay1_toDel_15;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  Delay1_lowered5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered5_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered5_bypass_reg <= Delay1_toDel_16;
      END IF;
    END IF;
  END PROCESS Delay1_lowered5_bypass_process;

  
  Delay1_toDel_17 <= Delay1_toDel_16 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered5_bypass_reg;

  Delay1_delOut_5 <= Delay1_toDel_17;

  
  Delay1_out1_9 <= Delay1_delOut_5 WHEN reset_integrators = '0' ELSE
      Delay1_iv_5;

  psi_2 <= Delay1_out1_9;

  kconst_7 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_6 <= X"0000000000000000";

  L_y1 <= physical_parameters_L_y1;

  
  Delay1_toDel_18 <= Sum3_out1_7 WHEN reset_integrators = '0' ELSE
      Delay1_iv_6;

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_19 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_19 <= Delay1_toDel_18;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Delay1_lowered6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered6_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered6_bypass_reg <= Delay1_toDel_19;
      END IF;
    END IF;
  END PROCESS Delay1_lowered6_bypass_process;

  
  Delay1_toDel_20 <= Delay1_toDel_19 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered6_bypass_reg;

  Delay1_delOut_6 <= Delay1_toDel_20;

  
  Delay1_out1_10 <= Delay1_delOut_6 WHEN reset_integrators = '0' ELSE
      Delay1_iv_6;

  psi_3 <= Delay1_out1_10;

  kconst_8 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_7 <= X"0000000000000000";

  L_x2 <= physical_parameters_L_x2;

  
  Delay1_toDel_21 <= Sum3_out1_8 WHEN reset_integrators = '0' ELSE
      Delay1_iv_7;

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_22 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_22 <= Delay1_toDel_21;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Delay1_lowered7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered7_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered7_bypass_reg <= Delay1_toDel_22;
      END IF;
    END IF;
  END PROCESS Delay1_lowered7_bypass_process;

  
  Delay1_toDel_23 <= Delay1_toDel_22 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered7_bypass_reg;

  Delay1_delOut_7 <= Delay1_toDel_23;

  
  Delay1_out1_11 <= Delay1_delOut_7 WHEN reset_integrators = '0' ELSE
      Delay1_iv_7;

  psi_4 <= Delay1_out1_11;

  kconst_9 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_8 <= X"0000000000000000";

  L_y2 <= physical_parameters_L_y2;

  
  Delay1_toDel_24 <= Sum3_out1_9 WHEN reset_integrators = '0' ELSE
      Delay1_iv_8;

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_25 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_25 <= Delay1_toDel_24;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Delay1_lowered8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered8_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered8_bypass_reg <= Delay1_toDel_25;
      END IF;
    END IF;
  END PROCESS Delay1_lowered8_bypass_process;

  
  Delay1_toDel_26 <= Delay1_toDel_25 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered8_bypass_reg;

  Delay1_delOut_8 <= Delay1_toDel_26;

  
  Delay1_out1_12 <= Delay1_delOut_8 WHEN reset_integrators = '0' ELSE
      Delay1_iv_8;

  psi_5 <= Delay1_out1_12;

  kconst_10 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_9 <= X"0000000000000000";

  L_z3 <= physical_parameters_L_z3;

  
  Delay1_toDel_27 <= Sum3_out1_10 WHEN reset_integrators = '0' ELSE
      Delay1_iv_9;

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_28 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_28 <= Delay1_toDel_27;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Delay1_lowered9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered9_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered9_bypass_reg <= Delay1_toDel_28;
      END IF;
    END IF;
  END PROCESS Delay1_lowered9_bypass_process;

  
  Delay1_toDel_29 <= Delay1_toDel_28 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered9_bypass_reg;

  Delay1_delOut_9 <= Delay1_toDel_29;

  
  Delay1_out1_13 <= Delay1_delOut_9 WHEN reset_integrators = '0' ELSE
      Delay1_iv_9;

  psi_6 <= Delay1_out1_13;

  Mux_out1(0) <= I_d_3;
  Mux_out1(1) <= I_q;
  Mux_out1(2) <= Divide1_out1;
  Mux_out1(3) <= Divide3_out1;
  Mux_out1(4) <= Divide5_out1;
  Mux_out1(5) <= Divide7_out1;
  Mux_out1(6) <= Divide9_out1;
  Mux_out1(7) <= Divide11_out1;
  Mux_out1(8) <= Divide13_out1;

  Mux_out1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux_out1_2(0) <= X"00000000";
        Mux_out1_2(1) <= X"00000000";
        Mux_out1_2(2) <= X"00000000";
        Mux_out1_2(3) <= X"00000000";
        Mux_out1_2(4) <= X"00000000";
        Mux_out1_2(5) <= X"00000000";
        Mux_out1_2(6) <= X"00000000";
        Mux_out1_2(7) <= X"00000000";
        Mux_out1_2(8) <= X"00000000";
      ELSIF enb = '1' THEN
        Mux_out1_2(0) <= Mux_out1(0);
        Mux_out1_2(1) <= Mux_out1(1);
        Mux_out1_2(2) <= Mux_out1(2);
        Mux_out1_2(3) <= Mux_out1(3);
        Mux_out1_2(4) <= Mux_out1(4);
        Mux_out1_2(5) <= Mux_out1(5);
        Mux_out1_2(6) <= Mux_out1(6);
        Mux_out1_2(7) <= Mux_out1(7);
        Mux_out1_2(8) <= Mux_out1(8);
      END IF;
    END IF;
  END PROCESS Mux_out1_1_process;


  t7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t7_bypass_reg(0) <= X"00000000";
        t7_bypass_reg(1) <= X"00000000";
        t7_bypass_reg(2) <= X"00000000";
        t7_bypass_reg(3) <= X"00000000";
        t7_bypass_reg(4) <= X"00000000";
        t7_bypass_reg(5) <= X"00000000";
        t7_bypass_reg(6) <= X"00000000";
        t7_bypass_reg(7) <= X"00000000";
        t7_bypass_reg(8) <= X"00000000";
      ELSIF enb_1_500_1 = '1' THEN
        t7_bypass_reg(0) <= t7_bypass_reg_next(0);
        t7_bypass_reg(1) <= t7_bypass_reg_next(1);
        t7_bypass_reg(2) <= t7_bypass_reg_next(2);
        t7_bypass_reg(3) <= t7_bypass_reg_next(3);
        t7_bypass_reg(4) <= t7_bypass_reg_next(4);
        t7_bypass_reg(5) <= t7_bypass_reg_next(5);
        t7_bypass_reg(6) <= t7_bypass_reg_next(6);
        t7_bypass_reg(7) <= t7_bypass_reg_next(7);
        t7_bypass_reg(8) <= t7_bypass_reg_next(8);
      END IF;
    END IF;
  END PROCESS t7_bypass_process;

  
  Mux_out1_3(0) <= Mux_out1_2(0) WHEN enb_1_500_1 = '1' ELSE
      t7_bypass_reg(0);
  
  Mux_out1_3(1) <= Mux_out1_2(1) WHEN enb_1_500_1 = '1' ELSE
      t7_bypass_reg(1);
  
  Mux_out1_3(2) <= Mux_out1_2(2) WHEN enb_1_500_1 = '1' ELSE
      t7_bypass_reg(2);
  
  Mux_out1_3(3) <= Mux_out1_2(3) WHEN enb_1_500_1 = '1' ELSE
      t7_bypass_reg(3);
  
  Mux_out1_3(4) <= Mux_out1_2(4) WHEN enb_1_500_1 = '1' ELSE
      t7_bypass_reg(4);
  
  Mux_out1_3(5) <= Mux_out1_2(5) WHEN enb_1_500_1 = '1' ELSE
      t7_bypass_reg(5);
  
  Mux_out1_3(6) <= Mux_out1_2(6) WHEN enb_1_500_1 = '1' ELSE
      t7_bypass_reg(6);
  
  Mux_out1_3(7) <= Mux_out1_2(7) WHEN enb_1_500_1 = '1' ELSE
      t7_bypass_reg(7);
  
  Mux_out1_3(8) <= Mux_out1_2(8) WHEN enb_1_500_1 = '1' ELSE
      t7_bypass_reg(8);
  t7_bypass_reg_next(0) <= Mux_out1_2(0);
  t7_bypass_reg_next(1) <= Mux_out1_2(1);
  t7_bypass_reg_next(2) <= Mux_out1_2(2);
  t7_bypass_reg_next(3) <= Mux_out1_2(3);
  t7_bypass_reg_next(4) <= Mux_out1_2(4);
  t7_bypass_reg_next(5) <= Mux_out1_2(5);
  t7_bypass_reg_next(6) <= Mux_out1_2(6);
  t7_bypass_reg_next(7) <= Mux_out1_2(7);
  t7_bypass_reg_next(8) <= Mux_out1_2(8);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 499
  ctr_499_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ctr_499_sig <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF ctr_499_sig >= to_unsigned(16#01F3#, 16) THEN 
          ctr_499_sig <= to_unsigned(16#0000#, 16);
        ELSE 
          ctr_499_sig <= ctr_499_sig + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS ctr_499_process;


  outputgen: FOR k IN 0 TO 8 GENERATE
    Transformation1_out1_signed(k) <= signed(Transformation1_out1(k));
  END GENERATE;

  Data_Type_Conversion34_out1(0) <= Transformation1_out1_signed(0)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(0)(15));
  Data_Type_Conversion34_out1(1) <= Transformation1_out1_signed(1)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(1)(15));
  Data_Type_Conversion34_out1(2) <= Transformation1_out1_signed(2)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(2)(15));
  Data_Type_Conversion34_out1(3) <= Transformation1_out1_signed(3)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(3)(15));
  Data_Type_Conversion34_out1(4) <= Transformation1_out1_signed(4)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(4)(15));
  Data_Type_Conversion34_out1(5) <= Transformation1_out1_signed(5)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(5)(15));
  Data_Type_Conversion34_out1(6) <= Transformation1_out1_signed(6)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(6)(15));
  Data_Type_Conversion34_out1(7) <= Transformation1_out1_signed(7)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(7)(15));
  Data_Type_Conversion34_out1(8) <= Transformation1_out1_signed(8)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(8)(15));

  Demux1_out1(0) <= Data_Type_Conversion34_out1(0);
  Demux1_out1(1) <= Data_Type_Conversion34_out1(1);
  Demux1_out1(2) <= Data_Type_Conversion34_out1(2);

  crp_out_delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out1_1(0) <= to_signed(16#0000000#, 25);
        Demux1_out1_1(1) <= to_signed(16#0000000#, 25);
        Demux1_out1_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Demux1_out1_1(0) <= Demux1_out1(0);
        Demux1_out1_1(1) <= Demux1_out1(1);
        Demux1_out1_1(2) <= Demux1_out1(2);
      END IF;
    END IF;
  END PROCESS crp_out_delay12_process;


  Delay41_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out1_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out1_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out1_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_1 = '1' THEN
        Demux1_out1_2(0) <= Demux1_out1_1(0);
        Demux1_out1_2(1) <= Demux1_out1_1(1);
        Demux1_out1_2(2) <= Demux1_out1_1(2);
      END IF;
    END IF;
  END PROCESS Delay41_output_process;


  Demux1_out1_0 <= Demux1_out1_2(0);

  delayMatch35_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch35_1_reg(0) <= to_signed(16#0000000#, 25);
        delayMatch35_1_reg(1) <= to_signed(16#0000000#, 25);
        delayMatch35_1_reg_1(0) <= to_signed(16#0000000#, 25);
        delayMatch35_1_reg_1(1) <= to_signed(16#0000000#, 25);
        delayMatch35_1_reg_2(0) <= to_signed(16#0000000#, 25);
        delayMatch35_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_0 = '1' THEN
        delayMatch35_1_reg(0) <= delayMatch35_1_reg_next(0);
        delayMatch35_1_reg(1) <= delayMatch35_1_reg_next(1);
        delayMatch35_1_reg_1(0) <= delayMatch35_1_reg_next_1(0);
        delayMatch35_1_reg_1(1) <= delayMatch35_1_reg_next_1(1);
        delayMatch35_1_reg_2(0) <= delayMatch35_1_reg_next_2(0);
        delayMatch35_1_reg_2(1) <= delayMatch35_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS delayMatch35_1_process;

  delayMatch35_1_reg_next(0) <= Demux1_out1_0;
  delayMatch35_1_reg_next(1) <= delayMatch35_1_reg(0);
  delayMatch35_out_1 <= delayMatch35_1_reg(1);
  delayMatch35_1_reg_next_1(0) <= Demux1_out1_1_1;
  delayMatch35_1_reg_next_1(1) <= delayMatch35_1_reg_1(0);
  delayMatch35_out_2 <= delayMatch35_1_reg_1(1);
  delayMatch35_1_reg_next_2(0) <= Demux1_out1_2_1;
  delayMatch35_1_reg_next_2(1) <= delayMatch35_1_reg_2(0);
  delayMatch35_out_3 <= delayMatch35_1_reg_2(1);

  i_abc1_pl_0 <= std_logic_vector(delayMatch35_out_1);

  Demux1_out1_1_1 <= Demux1_out1_2(1);

  i_abc1_pl_1 <= std_logic_vector(delayMatch35_out_2);

  Demux1_out1_2_1 <= Demux1_out1_2(2);

  i_abc1_pl_2 <= std_logic_vector(delayMatch35_out_3);

  Demux1_out2(0) <= Data_Type_Conversion34_out1(3);
  Demux1_out2(1) <= Data_Type_Conversion34_out1(4);
  Demux1_out2(2) <= Data_Type_Conversion34_out1(5);

  crp_out_delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out2_1(0) <= to_signed(16#0000000#, 25);
        Demux1_out2_1(1) <= to_signed(16#0000000#, 25);
        Demux1_out2_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Demux1_out2_1(0) <= Demux1_out2(0);
        Demux1_out2_1(1) <= Demux1_out2(1);
        Demux1_out2_1(2) <= Demux1_out2(2);
      END IF;
    END IF;
  END PROCESS crp_out_delay13_process;


  Delay51_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out2_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out2_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out2_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_1 = '1' THEN
        Demux1_out2_2(0) <= Demux1_out2_1(0);
        Demux1_out2_2(1) <= Demux1_out2_1(1);
        Demux1_out2_2(2) <= Demux1_out2_1(2);
      END IF;
    END IF;
  END PROCESS Delay51_output_process;


  Demux1_out2_0 <= Demux1_out2_2(0);

  delayMatch36_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch36_1_reg(0) <= to_signed(16#0000000#, 25);
        delayMatch36_1_reg(1) <= to_signed(16#0000000#, 25);
        delayMatch36_1_reg_1(0) <= to_signed(16#0000000#, 25);
        delayMatch36_1_reg_1(1) <= to_signed(16#0000000#, 25);
        delayMatch36_1_reg_2(0) <= to_signed(16#0000000#, 25);
        delayMatch36_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_0 = '1' THEN
        delayMatch36_1_reg(0) <= delayMatch36_1_reg_next(0);
        delayMatch36_1_reg(1) <= delayMatch36_1_reg_next(1);
        delayMatch36_1_reg_1(0) <= delayMatch36_1_reg_next_1(0);
        delayMatch36_1_reg_1(1) <= delayMatch36_1_reg_next_1(1);
        delayMatch36_1_reg_2(0) <= delayMatch36_1_reg_next_2(0);
        delayMatch36_1_reg_2(1) <= delayMatch36_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS delayMatch36_1_process;

  delayMatch36_1_reg_next(0) <= Demux1_out2_0;
  delayMatch36_1_reg_next(1) <= delayMatch36_1_reg(0);
  delayMatch36_out_1 <= delayMatch36_1_reg(1);
  delayMatch36_1_reg_next_1(0) <= Demux1_out2_1_1;
  delayMatch36_1_reg_next_1(1) <= delayMatch36_1_reg_1(0);
  delayMatch36_out_2 <= delayMatch36_1_reg_1(1);
  delayMatch36_1_reg_next_2(0) <= Demux1_out2_2_1;
  delayMatch36_1_reg_next_2(1) <= delayMatch36_1_reg_2(0);
  delayMatch36_out_3 <= delayMatch36_1_reg_2(1);

  i_abc2_pl_0 <= std_logic_vector(delayMatch36_out_1);

  Demux1_out2_1_1 <= Demux1_out2_2(1);

  i_abc2_pl_1 <= std_logic_vector(delayMatch36_out_2);

  Demux1_out2_2_1 <= Demux1_out2_2(2);

  i_abc2_pl_2 <= std_logic_vector(delayMatch36_out_3);

  Demux1_out3(0) <= Data_Type_Conversion34_out1(6);
  Demux1_out3(1) <= Data_Type_Conversion34_out1(7);
  Demux1_out3(2) <= Data_Type_Conversion34_out1(8);

  crp_out_delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out3_1(0) <= to_signed(16#0000000#, 25);
        Demux1_out3_1(1) <= to_signed(16#0000000#, 25);
        Demux1_out3_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Demux1_out3_1(0) <= Demux1_out3(0);
        Demux1_out3_1(1) <= Demux1_out3(1);
        Demux1_out3_1(2) <= Demux1_out3(2);
      END IF;
    END IF;
  END PROCESS crp_out_delay14_process;


  Delay61_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out3_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out3_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out3_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_1 = '1' THEN
        Demux1_out3_2(0) <= Demux1_out3_1(0);
        Demux1_out3_2(1) <= Demux1_out3_1(1);
        Demux1_out3_2(2) <= Demux1_out3_1(2);
      END IF;
    END IF;
  END PROCESS Delay61_output_process;


  Demux1_out3_0 <= Demux1_out3_2(0);

  delayMatch37_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch37_1_reg(0) <= to_signed(16#0000000#, 25);
        delayMatch37_1_reg(1) <= to_signed(16#0000000#, 25);
        delayMatch37_1_reg_1(0) <= to_signed(16#0000000#, 25);
        delayMatch37_1_reg_1(1) <= to_signed(16#0000000#, 25);
        delayMatch37_1_reg_2(0) <= to_signed(16#0000000#, 25);
        delayMatch37_1_reg_2(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_0 = '1' THEN
        delayMatch37_1_reg(0) <= delayMatch37_1_reg_next(0);
        delayMatch37_1_reg(1) <= delayMatch37_1_reg_next(1);
        delayMatch37_1_reg_1(0) <= delayMatch37_1_reg_next_1(0);
        delayMatch37_1_reg_1(1) <= delayMatch37_1_reg_next_1(1);
        delayMatch37_1_reg_2(0) <= delayMatch37_1_reg_next_2(0);
        delayMatch37_1_reg_2(1) <= delayMatch37_1_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS delayMatch37_1_process;

  delayMatch37_1_reg_next(0) <= Demux1_out3_0;
  delayMatch37_1_reg_next(1) <= delayMatch37_1_reg(0);
  delayMatch37_out_1 <= delayMatch37_1_reg(1);
  delayMatch37_1_reg_next_1(0) <= Demux1_out3_1_1;
  delayMatch37_1_reg_next_1(1) <= delayMatch37_1_reg_1(0);
  delayMatch37_out_2 <= delayMatch37_1_reg_1(1);
  delayMatch37_1_reg_next_2(0) <= Demux1_out3_2_1;
  delayMatch37_1_reg_next_2(1) <= delayMatch37_1_reg_2(0);
  delayMatch37_out_3 <= delayMatch37_1_reg_2(1);

  i_abc3_pl_0 <= std_logic_vector(delayMatch37_out_1);

  Demux1_out3_1_1 <= Demux1_out3_2(1);

  i_abc3_pl_1 <= std_logic_vector(delayMatch37_out_2);

  Demux1_out3_2_1 <= Demux1_out3_2(2);

  i_abc3_pl_2 <= std_logic_vector(delayMatch37_out_3);

  Data_Type_Conversion1_out1_signed <= signed(Data_Type_Conversion1_out1_1);

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion1_out1_2 <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Data_Type_Conversion1_out1_2 <= Data_Type_Conversion1_out1_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay7_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion1_out1_3 <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_1 = '1' THEN
        Data_Type_Conversion1_out1_3 <= Data_Type_Conversion1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay7_output_process;


  delayMatch38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch38_reg(0) <= to_signed(16#0000000#, 25);
        delayMatch38_reg(1) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_500_0 = '1' THEN
        delayMatch38_reg(0) <= delayMatch38_reg_next(0);
        delayMatch38_reg(1) <= delayMatch38_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch38_process;

  Data_Type_Conversion1_out1_4 <= delayMatch38_reg(1);
  delayMatch38_reg_next(0) <= Data_Type_Conversion1_out1_3;
  delayMatch38_reg_next(1) <= delayMatch38_reg(0);

  out_theta_el <= std_logic_vector(Data_Type_Conversion1_out1_4);

  ce_out <= enb_1_500_1;

  outputs_0 <= Mux1_out1_1(0);

  outputs_1 <= Mux1_out1_1(1);

  outputs_2 <= Mux1_out1_1(2);

  outputs_3 <= Mux1_out1_1(3);

  outputs_4 <= Mux1_out1_1(4);

  i_dq_ps_0 <= Mux_out1_3(0);

  i_dq_ps_1 <= Mux_out1_3(1);

  i_dq_ps_2 <= Mux_out1_3(2);

  i_dq_ps_3 <= Mux_out1_3(3);

  i_dq_ps_4 <= Mux_out1_3(4);

  i_dq_ps_5 <= Mux_out1_3(5);

  i_dq_ps_6 <= Mux_out1_3(6);

  i_dq_ps_7 <= Mux_out1_3(7);

  i_dq_ps_8 <= Mux_out1_3(8);

END rtl;

