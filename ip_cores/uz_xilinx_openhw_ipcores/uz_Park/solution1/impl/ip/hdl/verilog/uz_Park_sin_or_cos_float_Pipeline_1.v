// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uz_Park_sin_or_cos_float_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_Result_24,
        p_Result_23,
        c_0_023_out,
        c_0_023_out_ap_vld,
        c_1_022_out,
        c_1_022_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_Result_24;
input  [31:0] p_Result_23;
output  [31:0] c_0_023_out;
output   c_0_023_out_ap_vld;
output  [31:0] c_1_022_out;
output   c_1_022_out_ap_vld;

reg ap_idle;
reg c_0_023_out_ap_vld;
reg c_1_022_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln311_fu_86_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] i_fu_40;
wire   [1:0] add_ln311_fu_92_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_2;
reg   [31:0] c_1_fu_44;
wire   [31:0] c_1_6_fu_142_p3;
reg   [31:0] c_1_3_fu_48;
wire   [31:0] c_1_5_fu_134_p3;
wire   [0:0] trunc_ln553_fu_104_p1;
wire   [31:0] p_Val2_s_fu_108_p3;
reg   [31:0] p_Result_s_fu_116_p4;
reg   [31:0] c_0_fu_126_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

uz_Park_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln311_fu_86_p2 == 1'd0)) begin
            i_fu_40 <= add_ln311_fu_92_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln311_fu_86_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        c_1_3_fu_48 <= c_1_5_fu_134_p3;
        c_1_fu_44 <= c_1_6_fu_142_p3;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln311_fu_86_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_40;
    end
end

always @ (*) begin
    if (((icmp_ln311_fu_86_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        c_0_023_out_ap_vld = 1'b1;
    end else begin
        c_0_023_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln311_fu_86_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        c_1_022_out_ap_vld = 1'b1;
    end else begin
        c_1_022_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln311_fu_92_p2 = (ap_sig_allocacmp_i_2 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign c_0_023_out = c_1_3_fu_48;


always @ (p_Result_s_fu_116_p4) begin
    if (p_Result_s_fu_116_p4[0] == 1'b1) begin
        c_0_fu_126_p3 = 32'd0;
    end else if (p_Result_s_fu_116_p4[1] == 1'b1) begin
        c_0_fu_126_p3 = 32'd1;
    end else if (p_Result_s_fu_116_p4[2] == 1'b1) begin
        c_0_fu_126_p3 = 32'd2;
    end else if (p_Result_s_fu_116_p4[3] == 1'b1) begin
        c_0_fu_126_p3 = 32'd3;
    end else if (p_Result_s_fu_116_p4[4] == 1'b1) begin
        c_0_fu_126_p3 = 32'd4;
    end else if (p_Result_s_fu_116_p4[5] == 1'b1) begin
        c_0_fu_126_p3 = 32'd5;
    end else if (p_Result_s_fu_116_p4[6] == 1'b1) begin
        c_0_fu_126_p3 = 32'd6;
    end else if (p_Result_s_fu_116_p4[7] == 1'b1) begin
        c_0_fu_126_p3 = 32'd7;
    end else if (p_Result_s_fu_116_p4[8] == 1'b1) begin
        c_0_fu_126_p3 = 32'd8;
    end else if (p_Result_s_fu_116_p4[9] == 1'b1) begin
        c_0_fu_126_p3 = 32'd9;
    end else if (p_Result_s_fu_116_p4[10] == 1'b1) begin
        c_0_fu_126_p3 = 32'd10;
    end else if (p_Result_s_fu_116_p4[11] == 1'b1) begin
        c_0_fu_126_p3 = 32'd11;
    end else if (p_Result_s_fu_116_p4[12] == 1'b1) begin
        c_0_fu_126_p3 = 32'd12;
    end else if (p_Result_s_fu_116_p4[13] == 1'b1) begin
        c_0_fu_126_p3 = 32'd13;
    end else if (p_Result_s_fu_116_p4[14] == 1'b1) begin
        c_0_fu_126_p3 = 32'd14;
    end else if (p_Result_s_fu_116_p4[15] == 1'b1) begin
        c_0_fu_126_p3 = 32'd15;
    end else if (p_Result_s_fu_116_p4[16] == 1'b1) begin
        c_0_fu_126_p3 = 32'd16;
    end else if (p_Result_s_fu_116_p4[17] == 1'b1) begin
        c_0_fu_126_p3 = 32'd17;
    end else if (p_Result_s_fu_116_p4[18] == 1'b1) begin
        c_0_fu_126_p3 = 32'd18;
    end else if (p_Result_s_fu_116_p4[19] == 1'b1) begin
        c_0_fu_126_p3 = 32'd19;
    end else if (p_Result_s_fu_116_p4[20] == 1'b1) begin
        c_0_fu_126_p3 = 32'd20;
    end else if (p_Result_s_fu_116_p4[21] == 1'b1) begin
        c_0_fu_126_p3 = 32'd21;
    end else if (p_Result_s_fu_116_p4[22] == 1'b1) begin
        c_0_fu_126_p3 = 32'd22;
    end else if (p_Result_s_fu_116_p4[23] == 1'b1) begin
        c_0_fu_126_p3 = 32'd23;
    end else if (p_Result_s_fu_116_p4[24] == 1'b1) begin
        c_0_fu_126_p3 = 32'd24;
    end else if (p_Result_s_fu_116_p4[25] == 1'b1) begin
        c_0_fu_126_p3 = 32'd25;
    end else if (p_Result_s_fu_116_p4[26] == 1'b1) begin
        c_0_fu_126_p3 = 32'd26;
    end else if (p_Result_s_fu_116_p4[27] == 1'b1) begin
        c_0_fu_126_p3 = 32'd27;
    end else if (p_Result_s_fu_116_p4[28] == 1'b1) begin
        c_0_fu_126_p3 = 32'd28;
    end else if (p_Result_s_fu_116_p4[29] == 1'b1) begin
        c_0_fu_126_p3 = 32'd29;
    end else if (p_Result_s_fu_116_p4[30] == 1'b1) begin
        c_0_fu_126_p3 = 32'd30;
    end else if (p_Result_s_fu_116_p4[31] == 1'b1) begin
        c_0_fu_126_p3 = 32'd31;
    end else begin
        c_0_fu_126_p3 = 32'd32;
    end
end

assign c_1_022_out = c_1_fu_44;

assign c_1_5_fu_134_p3 = ((trunc_ln553_fu_104_p1[0:0] == 1'b1) ? c_1_3_fu_48 : c_0_fu_126_p3);

assign c_1_6_fu_142_p3 = ((trunc_ln553_fu_104_p1[0:0] == 1'b1) ? c_0_fu_126_p3 : c_1_fu_44);

assign icmp_ln311_fu_86_p2 = ((ap_sig_allocacmp_i_2 == 2'd2) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_108_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_s_fu_116_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_116_p4[ap_tvar_int_0] = p_Val2_s_fu_108_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Val2_s_fu_108_p3 = ((trunc_ln553_fu_104_p1[0:0] == 1'b1) ? p_Result_24 : p_Result_23);

assign trunc_ln553_fu_104_p1 = ap_sig_allocacmp_i_2[0:0];

endmodule //uz_Park_sin_or_cos_float_Pipeline_1
