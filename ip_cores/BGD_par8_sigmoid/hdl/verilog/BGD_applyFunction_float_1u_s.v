// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_applyFunction_float_1u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_strOutputCurLayer10_dout,
        l_strOutputCurLayer10_empty_n,
        l_strOutputCurLayer10_read,
        l_strActivDeriv11_din,
        l_strActivDeriv11_full_n,
        l_strActivDeriv11_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state13 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l_strOutputCurLayer10_dout;
input   l_strOutputCurLayer10_empty_n;
output   l_strOutputCurLayer10_read;
output  [31:0] l_strActivDeriv11_din;
input   l_strActivDeriv11_full_n;
output   l_strActivDeriv11_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg l_strOutputCurLayer10_read;
reg l_strActivDeriv11_write;
reg p_n_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    l_strOutputCurLayer10_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln53_reg_106;
reg    l_strActivDeriv11_blk_n;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] icmp_ln53_reg_106_pp0_iter9_reg;
reg    p_n_blk_n;
reg   [31:0] i_reg_61;
reg   [31:0] l_parBlocks_reg_101;
reg    ap_block_state1;
wire   [0:0] icmp_ln53_fu_81_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
reg    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln53_reg_106_pp0_iter1_reg;
reg   [0:0] icmp_ln53_reg_106_pp0_iter2_reg;
reg   [0:0] icmp_ln53_reg_106_pp0_iter3_reg;
reg   [0:0] icmp_ln53_reg_106_pp0_iter4_reg;
reg   [0:0] icmp_ln53_reg_106_pp0_iter5_reg;
reg   [0:0] icmp_ln53_reg_106_pp0_iter6_reg;
reg   [0:0] icmp_ln53_reg_106_pp0_iter7_reg;
reg   [0:0] icmp_ln53_reg_106_pp0_iter8_reg;
wire   [31:0] i_8_fu_86_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] l_strOutputCurLayer10_read_reg_115;
wire   [31:0] tmp_fu_92_p1;
reg   [31:0] tmp_reg_120;
reg   [31:0] tmp_reg_120_pp0_iter3_reg;
reg   [31:0] tmp_reg_120_pp0_iter4_reg;
reg   [31:0] tmp_reg_120_pp0_iter5_reg;
reg   [31:0] tmp_reg_120_pp0_iter6_reg;
wire   [31:0] grp_fu_72_p2;
reg   [31:0] sub_i_i_reg_126;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_72_p1;
wire   [31:0] grp_fu_77_p2;
reg    grp_fu_72_ce;
reg    grp_fu_77_ce;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

BGD_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U294(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(grp_fu_72_p1),
    .ce(grp_fu_72_ce),
    .dout(grp_fu_72_p2)
);

BGD_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U295(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_120_pp0_iter6_reg),
    .din1(sub_i_i_reg_126),
    .ce(grp_fu_77_ce),
    .dout(grp_fu_77_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((~((ap_start == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_81_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_61 <= i_8_fu_86_p2;
    end else if ((~((ap_start == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_61 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln53_reg_106 <= icmp_ln53_fu_81_p2;
        icmp_ln53_reg_106_pp0_iter1_reg <= icmp_ln53_reg_106;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln53_reg_106_pp0_iter2_reg <= icmp_ln53_reg_106_pp0_iter1_reg;
        icmp_ln53_reg_106_pp0_iter3_reg <= icmp_ln53_reg_106_pp0_iter2_reg;
        icmp_ln53_reg_106_pp0_iter4_reg <= icmp_ln53_reg_106_pp0_iter3_reg;
        icmp_ln53_reg_106_pp0_iter5_reg <= icmp_ln53_reg_106_pp0_iter4_reg;
        icmp_ln53_reg_106_pp0_iter6_reg <= icmp_ln53_reg_106_pp0_iter5_reg;
        icmp_ln53_reg_106_pp0_iter7_reg <= icmp_ln53_reg_106_pp0_iter6_reg;
        icmp_ln53_reg_106_pp0_iter8_reg <= icmp_ln53_reg_106_pp0_iter7_reg;
        icmp_ln53_reg_106_pp0_iter9_reg <= icmp_ln53_reg_106_pp0_iter8_reg;
        tmp_reg_120_pp0_iter3_reg <= tmp_reg_120;
        tmp_reg_120_pp0_iter4_reg <= tmp_reg_120_pp0_iter3_reg;
        tmp_reg_120_pp0_iter5_reg <= tmp_reg_120_pp0_iter4_reg;
        tmp_reg_120_pp0_iter6_reg <= tmp_reg_120_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_parBlocks_reg_101 <= p_n_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_reg_106 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_strOutputCurLayer10_read_reg_115 <= l_strOutputCurLayer10_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_106_pp0_iter5_reg == 1'd0))) begin
        sub_i_i_reg_126 <= grp_fu_72_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_106_pp0_iter1_reg == 1'd0))) begin
        tmp_reg_120 <= tmp_fu_92_p1;
    end
end

always @ (*) begin
    if ((icmp_ln53_fu_81_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_72_ce = 1'b1;
    end else begin
        grp_fu_72_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_77_ce = 1'b1;
    end else begin
        grp_fu_77_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_106_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        l_strActivDeriv11_blk_n = l_strActivDeriv11_full_n;
    end else begin
        l_strActivDeriv11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_106_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        l_strActivDeriv11_write = 1'b1;
    end else begin
        l_strActivDeriv11_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_106 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_strOutputCurLayer10_blk_n = l_strOutputCurLayer10_empty_n;
    end else begin
        l_strOutputCurLayer10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_106 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_strOutputCurLayer10_read = 1'b1;
    end else begin
        l_strOutputCurLayer10_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln53_fu_81_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b0)) | ((icmp_ln53_fu_81_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln53_reg_106_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (l_strActivDeriv11_full_n == 1'b0)) | ((icmp_ln53_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (l_strOutputCurLayer10_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln53_reg_106_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (l_strActivDeriv11_full_n == 1'b0)) | ((icmp_ln53_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (l_strOutputCurLayer10_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln53_reg_106_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (l_strActivDeriv11_full_n == 1'b0)) | ((icmp_ln53_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (l_strOutputCurLayer10_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter10 = ((icmp_ln53_reg_106_pp0_iter9_reg == 1'd0) & (l_strActivDeriv11_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln53_reg_106 == 1'd0) & (l_strOutputCurLayer10_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_72_p1 = l_strOutputCurLayer10_read_reg_115;

assign i_8_fu_86_p2 = (i_reg_61 + 32'd1);

assign icmp_ln53_fu_81_p2 = ((i_reg_61 == l_parBlocks_reg_101) ? 1'b1 : 1'b0);

assign l_strActivDeriv11_din = grp_fu_77_p2;

assign tmp_fu_92_p1 = l_strOutputCurLayer10_read_reg_115;

endmodule //BGD_applyFunction_float_1u_s
