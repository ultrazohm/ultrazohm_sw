// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_computeGradient_float_1u_22 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_currentErrorInput_dout,
        p_currentErrorInput_empty_n,
        p_currentErrorInput_read,
        p_outputPrevLayer_dout,
        p_outputPrevLayer_empty_n,
        p_outputPrevLayer_read,
        p_weightGradient_din,
        p_weightGradient_full_n,
        p_weightGradient_write,
        p_biasGradient_din,
        p_biasGradient_full_n,
        p_biasGradient_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_k_dout,
        p_k_empty_n,
        p_k_read,
        p_currentErrorOutput_address0,
        p_currentErrorOutput_ce0,
        p_currentErrorOutput_we0,
        p_currentErrorOutput_d0,
        p_n_out_din,
        p_n_out_full_n,
        p_n_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_currentErrorInput_dout;
input   p_currentErrorInput_empty_n;
output   p_currentErrorInput_read;
input  [31:0] p_outputPrevLayer_dout;
input   p_outputPrevLayer_empty_n;
output   p_outputPrevLayer_read;
output  [31:0] p_weightGradient_din;
input   p_weightGradient_full_n;
output   p_weightGradient_write;
output  [31:0] p_biasGradient_din;
input   p_biasGradient_full_n;
output   p_biasGradient_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
input  [31:0] p_k_dout;
input   p_k_empty_n;
output   p_k_read;
output  [5:0] p_currentErrorOutput_address0;
output   p_currentErrorOutput_ce0;
output   p_currentErrorOutput_we0;
output  [31:0] p_currentErrorOutput_d0;
output  [31:0] p_n_out_din;
input   p_n_out_full_n;
output   p_n_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_currentErrorInput_read;
reg p_outputPrevLayer_read;
reg p_weightGradient_write;
reg p_biasGradient_write;
reg p_n_read;
reg p_k_read;
reg p_currentErrorOutput_ce0;
reg p_currentErrorOutput_we0;
reg p_n_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_currentErrorInput_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln366_fu_142_p2;
reg    p_outputPrevLayer_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln371_reg_208;
reg    p_weightGradient_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln371_reg_208_pp0_iter3_reg;
reg    p_biasGradient_blk_n;
reg    p_n_blk_n;
reg    p_k_blk_n;
reg    p_n_out_blk_n;
reg   [31:0] k_reg_127;
reg   [31:0] p_n_read_reg_184;
reg    ap_block_state1;
reg   [31:0] p_k_read_reg_189;
reg    ap_block_state2;
wire   [31:0] add_ln366_fu_147_p2;
reg   [31:0] add_ln366_reg_198;
wire   [31:0] tmp_fu_158_p1;
reg   [31:0] tmp_reg_203;
wire   [0:0] icmp_ln371_fu_163_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln371_reg_208_pp0_iter1_reg;
reg   [0:0] icmp_ln371_reg_208_pp0_iter2_reg;
wire   [31:0] k_1_fu_168_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] n_reg_116;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln366_fu_153_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_138_p0;
wire   [31:0] grp_fu_138_p2;
reg    grp_fu_138_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

BGD_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_138_p0),
    .din1(tmp_reg_203),
    .ce(grp_fu_138_ce),
    .dout(grp_fu_138_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln371_fu_163_p2 == 1'd0))) begin
        k_reg_127 <= k_1_fu_168_p2;
    end else if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_127 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_reg_116 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        n_reg_116 <= add_ln366_reg_198;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln366_reg_198 <= add_ln366_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln371_reg_208 <= icmp_ln371_fu_163_p2;
        icmp_ln371_reg_208_pp0_iter1_reg <= icmp_ln371_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln371_reg_208_pp0_iter2_reg <= icmp_ln371_reg_208_pp0_iter1_reg;
        icmp_ln371_reg_208_pp0_iter3_reg <= icmp_ln371_reg_208_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_read_reg_189 <= p_k_dout;
        p_n_read_reg_184 <= p_n_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_203 <= tmp_fu_158_p1;
    end
end

always @ (*) begin
    if ((icmp_ln371_fu_163_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_138_ce = 1'b1;
    end else begin
        grp_fu_138_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_biasGradient_blk_n = p_biasGradient_full_n;
    end else begin
        p_biasGradient_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_biasGradient_write = 1'b1;
    end else begin
        p_biasGradient_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_currentErrorInput_blk_n = p_currentErrorInput_empty_n;
    end else begin
        p_currentErrorInput_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_currentErrorInput_read = 1'b1;
    end else begin
        p_currentErrorInput_read = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        p_currentErrorOutput_ce0 = 1'b1;
    end else begin
        p_currentErrorOutput_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_currentErrorOutput_we0 = 1'b1;
    end else begin
        p_currentErrorOutput_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_blk_n = p_k_empty_n;
    end else begin
        p_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_read = 1'b1;
    end else begin
        p_k_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_blk_n = p_n_out_full_n;
    end else begin
        p_n_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_write = 1'b1;
    end else begin
        p_n_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln371_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_outputPrevLayer_blk_n = p_outputPrevLayer_empty_n;
    end else begin
        p_outputPrevLayer_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln371_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_outputPrevLayer_read = 1'b1;
    end else begin
        p_outputPrevLayer_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln371_reg_208_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        p_weightGradient_blk_n = p_weightGradient_full_n;
    end else begin
        p_weightGradient_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln371_reg_208_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_weightGradient_write = 1'b1;
    end else begin
        p_weightGradient_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0))) & (icmp_ln366_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln371_fu_163_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln371_fu_163_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln366_fu_147_p2 = (n_reg_116 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln371_reg_208_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (p_weightGradient_full_n == 1'b0)) | ((icmp_ln371_reg_208 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_outputPrevLayer_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln371_reg_208_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (p_weightGradient_full_n == 1'b0)) | ((icmp_ln371_reg_208 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_outputPrevLayer_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln371_reg_208_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (p_weightGradient_full_n == 1'b0)) | ((icmp_ln371_reg_208 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_outputPrevLayer_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_n_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((icmp_ln366_fu_142_p2 == 1'd0) & (p_biasGradient_full_n == 1'b0)) | ((icmp_ln366_fu_142_p2 == 1'd0) & (p_currentErrorInput_empty_n == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln371_reg_208 == 1'd0) & (p_outputPrevLayer_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((icmp_ln371_reg_208_pp0_iter3_reg == 1'd0) & (p_weightGradient_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_138_p0 = p_outputPrevLayer_dout;

assign icmp_ln366_fu_142_p2 = ((n_reg_116 == p_n_read_reg_184) ? 1'b1 : 1'b0);

assign icmp_ln371_fu_163_p2 = ((k_reg_127 == p_k_read_reg_189) ? 1'b1 : 1'b0);

assign k_1_fu_168_p2 = (k_reg_127 + 32'd1);

assign p_biasGradient_din = p_currentErrorInput_dout;

assign p_currentErrorOutput_address0 = zext_ln366_fu_153_p1;

assign p_currentErrorOutput_d0 = p_currentErrorInput_dout;

assign p_n_out_din = p_n_dout;

assign p_weightGradient_din = grp_fu_138_p2;

assign tmp_fu_158_p1 = p_currentErrorInput_dout;

assign zext_ln366_fu_153_p1 = n_reg_116;

endmodule //BGD_computeGradient_float_1u_22
