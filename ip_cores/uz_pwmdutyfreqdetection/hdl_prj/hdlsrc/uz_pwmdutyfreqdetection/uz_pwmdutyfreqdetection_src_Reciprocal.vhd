-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pwmdutyfreqdetection\uz_pwmdutyfreqdetection_src_Reciprocal.vhd
-- Created: 2022-05-25 10:12:21
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pwmdutyfreqdetection_src_Reciprocal
-- Source Path: uz_pwmdutyfreqdetection/uz_pwmdutyfreqdetection/Reciprocal
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pwmdutyfreqdetection_src_uz_pwmdutyfreqdetection_pkg.ALL;

ENTITY uz_pwmdutyfreqdetection_src_Reciprocal IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_23_0                        :   IN    std_logic;
        din                               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        dout                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
        );
END uz_pwmdutyfreqdetection_src_Reciprocal;


ARCHITECTURE rtl OF uz_pwmdutyfreqdetection_src_Reciprocal IS

  -- Component Declarations
  COMPONENT uz_pwmdutyfreqdetection_src_Reciprocal_iv
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_23_0                      :   IN    std_logic;
          ain                             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En32
          xinit                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          inzero                          :   OUT   std_logic;  -- ufix1
          aout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En32
          );
  END COMPONENT;

  COMPONENT uz_pwmdutyfreqdetection_src_Reciprocal_core
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_23_0                      :   IN    std_logic;
          xin                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          ain                             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En32
          xout                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          aout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pwmdutyfreqdetection_src_Reciprocal_iv
    USE ENTITY work.uz_pwmdutyfreqdetection_src_Reciprocal_iv(rtl);

  FOR ALL : uz_pwmdutyfreqdetection_src_Reciprocal_core
    USE ENTITY work.uz_pwmdutyfreqdetection_src_Reciprocal_core(rtl);

  -- Signals
  SIGNAL din_unsigned                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL in_norm_out1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL in_norm_in0                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_2                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_3                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_cast                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL in_norm_in0_4                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_5                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_6                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_7                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_8                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_9                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_10                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_11                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_12                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_13                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in_norm_in0_14                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL anorm                            : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL dynamicshift                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL anorm_p                          : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL xinit                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL inzero                           : std_logic;  -- ufix1
  SIGNAL anorm_p2to3                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL inzero_reg_reg                   : std_logic_vector(0 TO 15);  -- ufix1 [16]
  SIGNAL inzero_p                         : std_logic;  -- ufix1
  SIGNAL anorm_p2to3_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL anorm_reg4to5_reg                : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL anorm_p4to5                      : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL xstage1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL astage1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL xstage2                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL astage2                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL xstage3                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL astage3deadOut                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL xstage3_signed                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL constInf                         : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL ds_reg_reg                       : vector_of_unsigned5(0 TO 16);  -- ufix5 [17]
  SIGNAL dynamicshift_p                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL out_denorm_cast                  : unsigned(46 DOWNTO 0);  -- ufix47_En28
  SIGNAL out_denorm_cast_1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL out_denorm_cast_2                : unsigned(46 DOWNTO 0);  -- ufix47_En44
  SIGNAL denormout                        : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL rsqrt_out                        : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL rsqrt_outp                       : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL mul_mul_temp                     : unsigned(63 DOWNTO 0);  -- ufix64_En64
  SIGNAL mul_out                          : unsigned(31 DOWNTO 0);  -- ufix32_En31

BEGIN
  -- Reciprocal Implementation using RecipSqrt Newton Method

  u_iv_stage_inst : uz_pwmdutyfreqdetection_src_Reciprocal_iv
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => enb_1_23_0,
              ain => std_logic_vector(anorm_p),  -- ufix32_En32
              xinit => xinit,  -- sfix32_En28
              inzero => inzero,  -- ufix1
              aout => anorm_p2to3  -- ufix32_En32
              );

  u_core_stage1_inst : uz_pwmdutyfreqdetection_src_Reciprocal_core
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => enb_1_23_0,
              xin => xinit,  -- sfix32_En28
              ain => std_logic_vector(anorm_p4to5),  -- ufix32_En32
              xout => xstage1,  -- sfix32_En28
              aout => astage1  -- ufix32_En32
              );

  u_core_stage2_inst : uz_pwmdutyfreqdetection_src_Reciprocal_core
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => enb_1_23_0,
              xin => xstage1,  -- sfix32_En28
              ain => astage1,  -- ufix32_En32
              xout => xstage2,  -- sfix32_En28
              aout => astage2  -- ufix32_En32
              );

  u_core_stage3_inst : uz_pwmdutyfreqdetection_src_Reciprocal_core
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_23_0 => enb_1_23_0,
              xin => xstage2,  -- sfix32_En28
              ain => astage2,  -- ufix32_En32
              xout => xstage3,  -- sfix32_En28
              aout => astage3deadOut  -- ufix32_En32
              );

  din_unsigned <= unsigned(din);

  -- Input Normalization
  in_norm_in0 <= din_unsigned(31 DOWNTO 30);
  in_norm_in0_1 <= din_unsigned(29 DOWNTO 28);
  in_norm_in0_2 <= din_unsigned(27 DOWNTO 26);
  in_norm_in0_3 <= din_unsigned(25 DOWNTO 24);
  in_norm_in0_4 <= din_unsigned(23 DOWNTO 22);
  in_norm_in0_5 <= din_unsigned(21 DOWNTO 20);
  in_norm_in0_6 <= din_unsigned(19 DOWNTO 18);
  in_norm_in0_7 <= din_unsigned(17 DOWNTO 16);
  in_norm_in0_8 <= din_unsigned(15 DOWNTO 14);
  in_norm_in0_9 <= din_unsigned(13 DOWNTO 12);
  in_norm_in0_10 <= din_unsigned(11 DOWNTO 10);
  in_norm_in0_11 <= din_unsigned(9 DOWNTO 8);
  in_norm_in0_12 <= din_unsigned(7 DOWNTO 6);
  in_norm_in0_13 <= din_unsigned(5 DOWNTO 4);
  in_norm_in0_14 <= din_unsigned(3 DOWNTO 2);
  
  in_norm_out1 <= to_unsigned(16#00#, 5) WHEN (in_norm_in0(1) OR in_norm_in0(0)) = '1' ELSE
      to_unsigned(16#01#, 5) WHEN (in_norm_in0_1(1) OR in_norm_in0_1(0)) = '1' ELSE
      to_unsigned(16#02#, 5) WHEN (in_norm_in0_2(1) OR in_norm_in0_2(0)) = '1' ELSE
      to_unsigned(16#03#, 5) WHEN (in_norm_in0_3(1) OR in_norm_in0_3(0)) = '1' ELSE
      to_unsigned(16#04#, 5) WHEN (in_norm_in0_4(1) OR in_norm_in0_4(0)) = '1' ELSE
      to_unsigned(16#05#, 5) WHEN (in_norm_in0_5(1) OR in_norm_in0_5(0)) = '1' ELSE
      to_unsigned(16#06#, 5) WHEN (in_norm_in0_6(1) OR in_norm_in0_6(0)) = '1' ELSE
      to_unsigned(16#07#, 5) WHEN (in_norm_in0_7(1) OR in_norm_in0_7(0)) = '1' ELSE
      to_unsigned(16#08#, 5) WHEN (in_norm_in0_8(1) OR in_norm_in0_8(0)) = '1' ELSE
      to_unsigned(16#09#, 5) WHEN (in_norm_in0_9(1) OR in_norm_in0_9(0)) = '1' ELSE
      to_unsigned(16#0A#, 5) WHEN (in_norm_in0_10(1) OR in_norm_in0_10(0)) = '1' ELSE
      to_unsigned(16#0B#, 5) WHEN (in_norm_in0_11(1) OR in_norm_in0_11(0)) = '1' ELSE
      to_unsigned(16#0C#, 5) WHEN (in_norm_in0_12(1) OR in_norm_in0_12(0)) = '1' ELSE
      to_unsigned(16#0D#, 5) WHEN (in_norm_in0_13(1) OR in_norm_in0_13(0)) = '1' ELSE
      to_unsigned(16#0E#, 5) WHEN (in_norm_in0_14(1) OR in_norm_in0_14(0)) = '1' ELSE
      to_unsigned(16#0F#, 5);
  in_norm_cast <= resize(in_norm_out1 sll 1, 8);
  anorm <= din_unsigned sll to_integer(in_norm_cast);
  dynamicshift <= in_norm_out1;

  -- Pipeline register
  anorm_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        anorm_p <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        anorm_p <= anorm;
      END IF;
    END IF;
  END PROCESS anorm_reg_process;


  -- Pipeline registers
  inzero_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        inzero_reg_reg <= (OTHERS => '0');
      ELSIF enb_1_23_0 = '1' THEN
        inzero_reg_reg(0) <= inzero;
        inzero_reg_reg(1 TO 15) <= inzero_reg_reg(0 TO 14);
      END IF;
    END IF;
  END PROCESS inzero_reg_process;

  inzero_p <= inzero_reg_reg(15);

  anorm_p2to3_unsigned <= unsigned(anorm_p2to3);

  -- Pipeline registers
  anorm_reg4to5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        anorm_reg4to5_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb_1_23_0 = '1' THEN
        anorm_reg4to5_reg(0) <= anorm_p2to3_unsigned;
        anorm_reg4to5_reg(1) <= anorm_reg4to5_reg(0);
      END IF;
    END IF;
  END PROCESS anorm_reg4to5_process;

  anorm_p4to5 <= anorm_reg4to5_reg(1);

  xstage3_signed <= signed(xstage3);

  constInf <= unsigned'(X"FFFFFFFF");

  -- Pipeline registers
  ds_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ds_reg_reg <= (OTHERS => to_unsigned(16#00#, 5));
      ELSIF enb_1_23_0 = '1' THEN
        ds_reg_reg(0) <= dynamicshift;
        ds_reg_reg(1 TO 16) <= ds_reg_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS ds_reg_process;

  dynamicshift_p <= ds_reg_reg(16);

  -- Output Denormalization
  out_denorm_cast <= unsigned(resize(xstage3_signed, 47));
  out_denorm_cast_1 <= resize(dynamicshift_p, 8);
  out_denorm_cast_2 <= out_denorm_cast sll to_integer(out_denorm_cast_1);
  
  denormout <= X"FFFFFFFF" WHEN (out_denorm_cast_2(46 DOWNTO 44) /= "000") OR (out_denorm_cast_2(43 DOWNTO 12) = X"FFFFFFFF") ELSE
      out_denorm_cast_2(43 DOWNTO 12) + ('0' & out_denorm_cast_2(11));

  -- Zero input logic
  
  rsqrt_out <= constInf WHEN inzero_p = '1' ELSE
      denormout;

  -- Pipeline register
  rsqrt_out_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rsqrt_outp <= to_unsigned(0, 32);
      ELSIF enb_1_23_0 = '1' THEN
        rsqrt_outp <= rsqrt_out;
      END IF;
    END IF;
  END PROCESS rsqrt_out_reg_process;


  -- Multiply RecipSqrt result by itself
  mul_mul_temp <= rsqrt_outp * rsqrt_outp;
  mul_out <= (resize(mul_mul_temp(63 DOWNTO 33), 32)) + ('0' & mul_mul_temp(32));

  dout <= std_logic_vector(mul_out);

END rtl;

