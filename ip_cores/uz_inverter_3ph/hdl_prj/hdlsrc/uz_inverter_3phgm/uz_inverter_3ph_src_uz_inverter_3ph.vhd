-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_inverter_3phgm\uz_inverter_3ph_src_uz_inverter_3ph.vhd
-- Created: 2022-05-05 14:18:29
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 50x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- u_abc_ps_0                    ce_out        5e-07
-- u_abc_ps_1                    ce_out        5e-07
-- u_abc_ps_2                    ce_out        5e-07
-- u_abc_pl_0                    ce_out        5e-07
-- u_abc_pl_1                    ce_out        5e-07
-- u_abc_pl_2                    ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_inverter_3ph_src_uz_inverter_3ph
-- Source Path: uz_inverter_3phgm/uz_inverter_3ph
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_inverter_3ph_src_uz_inverter_3ph_pkg.ALL;

ENTITY uz_inverter_3ph_src_uz_inverter_3ph IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        switch_pspl_abc                   :   IN    std_logic;
        switch_pspl_gate                  :   IN    std_logic;
        i_abc_ps_0                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_1                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_2                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_pl_0                        :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc_pl_1                        :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc_pl_2                        :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        gate_ps_0                         :   IN    std_logic;  -- ufix1
        gate_ps_1                         :   IN    std_logic;  -- ufix1
        gate_ps_2                         :   IN    std_logic;  -- ufix1
        gate_ps_3                         :   IN    std_logic;  -- ufix1
        gate_ps_4                         :   IN    std_logic;  -- ufix1
        gate_ps_5                         :   IN    std_logic;  -- ufix1
        gate_pl_0                         :   IN    std_logic;  -- ufix1
        gate_pl_1                         :   IN    std_logic;  -- ufix1
        gate_pl_2                         :   IN    std_logic;  -- ufix1
        gate_pl_3                         :   IN    std_logic;  -- ufix1
        gate_pl_4                         :   IN    std_logic;  -- ufix1
        gate_pl_5                         :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        u_abc_ps_0                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc_ps_1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc_ps_2                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc_pl_0                        :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc_pl_1                        :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc_pl_2                        :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
        );
END uz_inverter_3ph_src_uz_inverter_3ph;


ARCHITECTURE rtl OF uz_inverter_3ph_src_uz_inverter_3ph IS

  -- Component Declarations
  COMPONENT uz_inverter_3ph_src_uz_inverter_3ph_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_50_0                      :   OUT   std_logic;
          enb_1_50_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_dot_product_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          in2                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_dot_product_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in1                             :   IN    vector_of_std_logic_vector32(0 TO 1);  -- single [2]
          in2                             :   IN    vector_of_std_logic_vector32(0 TO 1);  -- single [2]
          out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_inverter_3ph_src_uz_inverter_3ph_tc
    USE ENTITY work.uz_inverter_3ph_src_uz_inverter_3ph_tc(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    USE ENTITY work.uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_convert_single2double
    USE ENTITY work.uz_inverter_3ph_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_convert_double2single
    USE ENTITY work.uz_inverter_3ph_src_nfp_convert_double2single(rtl);

  FOR ALL : uz_inverter_3ph_src_dot_product_1
    USE ENTITY work.uz_inverter_3ph_src_dot_product_1(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_add_single
    USE ENTITY work.uz_inverter_3ph_src_nfp_add_single(rtl);

  FOR ALL : uz_inverter_3ph_src_dot_product_2
    USE ENTITY work.uz_inverter_3ph_src_dot_product_2(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    USE ENTITY work.uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12(rtl);

  -- Signals
  SIGNAL enb_1_50_0                       : std_logic;
  SIGNAL enb_1_50_1                       : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL configuration1                   : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Valid_Out_out1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Valid_Out_out1_1                 : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL State_Delay_ctrl_const_out       : std_logic;
  SIGNAL State_Delay_ctrl_const_out_1     : std_logic;
  SIGNAL State_Delay_ctrl_delay_out       : std_logic;
  SIGNAL configuration1_1                 : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Iabc_PL                          : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Iabc_PL_1                        : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Iabc_PL_2                        : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Iabc                             : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Iabc_1                           : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL switch_pspl_abc_1                : std_logic;
  SIGNAL Data_Type_Conversion4_out1       : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Data_Type_Conversion3_out1       : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Switch_out1                      : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Iab                              : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL Ia                               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Bias_out1                        : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Ib                               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL row3                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL col3                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL dot_product3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product4                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product5                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL row6                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL col6                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL dot_product6                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL row7                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL col7                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL dot_product7                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product8                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product9                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product10                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL row11                            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL col11                            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL dot_product11                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product12                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Output_Sum_out1                  : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL X0_out1                          : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Delay_Initial_Val_out      : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Delay_bypass_reg           : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Delay_bypass_reg_next      : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Update_out1                : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Delay_out                  : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Delay_out1                 : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Switch_out1_1                    : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL dot_product1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL dot_product2_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL dot_product3_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion_out1        : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL t5_bypass_reg                    : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL t5_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Data_Type_Conversion_out1_1      : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Data_Type_Conversion1_out1       : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Data_Type_Conversion1_out1_1     : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL t6_bypass_reg                    : vector_of_signed25(0 TO 2);  -- sfix25 [3]
  SIGNAL t6_bypass_reg_next               : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Data_Type_Conversion1_out1_2     : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]

BEGIN
  -- Interface System

  u_uz_inverter_3ph_tc : uz_inverter_3ph_src_uz_inverter_3ph_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_50_0 => enb_1_50_0,
              enb_1_50_1 => enb_1_50_1
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_sfix_25_En12_to_double : uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Iabc_PL_2(0)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion4_out1(0)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_sfix_25_En12_to_double_1 : uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Iabc_PL_2(1)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion4_out1(1)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iabc_1(0),  -- single
              nfp_out => Data_Type_Conversion3_out1(0)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_1 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iabc_1(1),  -- single
              nfp_out => Data_Type_Conversion3_out1(1)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_sfix_25_En12_to_double_2 : uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Iabc_PL_2(2)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion4_out1(2)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_2 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iabc_1(2),  -- single
              nfp_out => Data_Type_Conversion3_out1(2)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iab(0),  -- double
              nfp_out => Ia  -- single
              );

  u_dot_product_1 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1_1(0),  -- single
              in2 => Ia,  -- single
              out1 => dot_product1  -- single
              );

  u_nfp_add_comp : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product1,  -- single
              nfp_in2 => Bias_out1(0),  -- single
              nfp_out => Output_Sum_out1(0)  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_1 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iab(1),  -- double
              nfp_out => Ib  -- single
              );

  u_dot_product_1_1 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1_1(8),  -- single
              in2 => Ib,  -- single
              out1 => dot_product2  -- single
              );

  u_nfp_add_comp_1 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product2,  -- single
              nfp_in2 => Bias_out1(1),  -- single
              nfp_out => Output_Sum_out1(1)  -- single
              );

  u_dot_product_2 : uz_inverter_3ph_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row3,  -- single [2]
              in2 => col3,  -- single [2]
              out1 => dot_product3  -- single
              );

  u_nfp_add_comp_2 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product3,  -- single
              nfp_in2 => Bias_out1(2),  -- single
              nfp_out => Output_Sum_out1(2)  -- single
              );

  u_dot_product_1_2 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1_1(2),  -- single
              in2 => Ia,  -- single
              out1 => dot_product4  -- single
              );

  u_nfp_add_comp_3 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product4,  -- single
              nfp_in2 => Bias_out1(3),  -- single
              nfp_out => Output_Sum_out1(3)  -- single
              );

  u_dot_product_1_3 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1_1(3),  -- single
              in2 => Ia,  -- single
              out1 => dot_product5  -- single
              );

  u_nfp_add_comp_4 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product5,  -- single
              nfp_in2 => Bias_out1(4),  -- single
              nfp_out => Output_Sum_out1(4)  -- single
              );

  u_dot_product_2_1 : uz_inverter_3ph_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row6,  -- single [2]
              in2 => col6,  -- single [2]
              out1 => dot_product6  -- single
              );

  u_nfp_add_comp_5 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product6,  -- single
              nfp_in2 => Bias_out1(5),  -- single
              nfp_out => Output_Sum_out1(5)  -- single
              );

  u_dot_product_2_2 : uz_inverter_3ph_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row7,  -- single [2]
              in2 => col7,  -- single [2]
              out1 => dot_product7  -- single
              );

  u_nfp_add_comp_6 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product7,  -- single
              nfp_in2 => Bias_out1(6),  -- single
              nfp_out => Output_Sum_out1(6)  -- single
              );

  u_dot_product_1_4 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1_1(12),  -- single
              in2 => Ib,  -- single
              out1 => dot_product8  -- single
              );

  u_nfp_add_comp_7 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product8,  -- single
              nfp_in2 => Bias_out1(7),  -- single
              nfp_out => Output_Sum_out1(7)  -- single
              );

  u_dot_product_1_5 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1_1(13),  -- single
              in2 => Ib,  -- single
              out1 => dot_product9  -- single
              );

  u_nfp_add_comp_8 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product9,  -- single
              nfp_in2 => Bias_out1(8),  -- single
              nfp_out => Output_Sum_out1(8)  -- single
              );

  u_dot_product_1_6 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1_1(6),  -- single
              in2 => Ia,  -- single
              out1 => dot_product10  -- single
              );

  u_nfp_add_comp_9 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product10,  -- single
              nfp_in2 => Bias_out1(9),  -- single
              nfp_out => Output_Sum_out1(9)  -- single
              );

  u_dot_product_2_3 : uz_inverter_3ph_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row11,  -- single [2]
              in2 => col11,  -- single [2]
              out1 => dot_product11  -- single
              );

  u_nfp_add_comp_10 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product11,  -- single
              nfp_in2 => Bias_out1(10),  -- single
              nfp_out => Output_Sum_out1(10)  -- single
              );

  u_dot_product_1_7 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1_1(15),  -- single
              in2 => Ib,  -- single
              out1 => dot_product12  -- single
              );

  u_nfp_add_comp_11 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product12,  -- single
              nfp_in2 => Bias_out1(11),  -- single
              nfp_out => Output_Sum_out1(11)  -- single
              );

  u_dot_product_1_8 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1(0),  -- single
              in2 => Switch_out1_1(0),  -- single
              out1 => dot_product1_1  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_3 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => dot_product1_1,  -- single
              nfp_out => Data_Type_Conversion6_out1  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_2 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion6_out1,  -- double
              nfp_out => Data_Type_Conversion_out1(0)  -- single
              );

  u_dot_product_1_9 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1(2),  -- single
              in2 => Switch_out1_1(1),  -- single
              out1 => dot_product2_1  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_4 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => dot_product2_1,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_3 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion8_out1,  -- double
              nfp_out => Data_Type_Conversion_out1(1)  -- single
              );

  u_dot_product_1_10 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1(1),  -- single
              in2 => Switch_out1_1(0),  -- single
              out1 => dot_product3_1  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_5 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => dot_product3_1,  -- single
              nfp_out => Data_Type_Conversion7_out1  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_4 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion7_out1,  -- double
              nfp_out => Data_Type_Conversion_out1(2)  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double_to_fixed_25_En12 : uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion6_out1,  -- double
              nfp_out => Data_Type_Conversion1_out1(0)  -- sfix25_En12
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double_to_fixed_25_En12_1 : uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion8_out1,  -- double
              nfp_out => Data_Type_Conversion1_out1(1)  -- sfix25_En12
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double_to_fixed_25_En12_2 : uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion7_out1,  -- double
              nfp_out => Data_Type_Conversion1_out1(2)  -- sfix25_En12
              );

  configuration1(0) <= X"3f800000";
  configuration1(1) <= X"bf800000";
  configuration1(2) <= X"3f800000";

  Valid_Out_out1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg(0) <= '0';
        delayMatch_reg(1) <= '0';
      ELSIF enb_1_50_0 = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Valid_Out_out1_1 <= delayMatch_reg(1);
  delayMatch_reg_next(0) <= Valid_Out_out1;
  delayMatch_reg_next(1) <= delayMatch_reg(0);

  Delay2_out1 <= Valid_Out_out1_1;

  State_Delay_ctrl_const_out <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        State_Delay_ctrl_const_out_1 <= '0';
      ELSIF enb_1_50_0 = '1' THEN
        State_Delay_ctrl_const_out_1 <= State_Delay_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  State_Delay_ctrl_delay_out <= State_Delay_ctrl_const_out_1;

  configuration1_1(0) <= X"bc23d708";
  configuration1_1(1) <= X"47318e8c";
  configuration1_1(2) <= X"33d6bf92";
  configuration1_1(3) <= X"b22bcc75";
  configuration1_1(4) <= X"3ee8ba2f";
  configuration1_1(5) <= X"bd3a2e8c";
  configuration1_1(6) <= X"3f7ffffc";
  configuration1_1(7) <= X"3d3a2e8c";
  configuration1_1(8) <= X"bc23d708";
  configuration1_1(9) <= X"47318e8c";
  configuration1_1(10) <= X"3ee8ba2f";
  configuration1_1(11) <= X"bd3a2e8c";
  configuration1_1(12) <= X"33d6bf92";
  configuration1_1(13) <= X"bf7ffffc";
  configuration1_1(14) <= X"3d3a2e8c";
  configuration1_1(15) <= X"322bcc75";

  Iabc_PL(0) <= i_abc_pl_0;
  Iabc_PL(1) <= i_abc_pl_1;
  Iabc_PL(2) <= i_abc_pl_2;

  outputgen1: FOR k IN 0 TO 2 GENERATE
    Iabc_PL_1(k) <= signed(Iabc_PL(k));
  END GENERATE;

  Iabc_PL_2 <= Iabc_PL_1;

  Iabc(0) <= i_abc_ps_0;
  Iabc(1) <= i_abc_ps_1;
  Iabc(2) <= i_abc_ps_2;

  Iabc_1 <= Iabc;

  switch_pspl_abc_1 <= switch_pspl_abc;



  
  Switch_out1(0) <= Data_Type_Conversion4_out1(0) WHEN switch_pspl_abc_1 = '0' ELSE
      Data_Type_Conversion3_out1(0);
  
  Switch_out1(1) <= Data_Type_Conversion4_out1(1) WHEN switch_pspl_abc_1 = '0' ELSE
      Data_Type_Conversion3_out1(1);
  
  Switch_out1(2) <= Data_Type_Conversion4_out1(2) WHEN switch_pspl_abc_1 = '0' ELSE
      Data_Type_Conversion3_out1(2);

  Iab(0) <= Switch_out1(0);
  Iab(1) <= Switch_out1(1);

  Bias_out1(0) <= X"413ffffd";
  Bias_out1(1) <= X"c13ffffd";
  Bias_out1(2) <= X"80000000";
  Bias_out1(3) <= X"b97ba881";
  Bias_out1(4) <= X"37c9539a";
  Bias_out1(5) <= X"b8fba882";
  Bias_out1(6) <= X"3749539c";
  Bias_out1(7) <= X"ade83781";
  Bias_out1(8) <= X"398a6979";
  Bias_out1(9) <= X"398a6979";
  Bias_out1(10) <= X"3749539c";
  Bias_out1(11) <= X"37c9539a";

  row3(0) <= configuration1_1(1);
  row3(1) <= configuration1_1(9);

  col3(0) <= Ia;
  col3(1) <= Ib;

  row6(0) <= configuration1_1(4);
  row6(1) <= configuration1_1(10);

  col6(0) <= Ia;
  col6(1) <= Ib;

  row7(0) <= configuration1_1(5);
  row7(1) <= configuration1_1(11);

  col7(0) <= Ia;
  col7(1) <= Ib;

  row11(0) <= configuration1_1(7);
  row11(1) <= configuration1_1(14);

  col11(0) <= Ia;
  col11(1) <= Ib;


  X0_out1(0) <= X"413ffffd";
  X0_out1(1) <= X"c13ffffd";
  X0_out1(2) <= X"263c9746";
  X0_out1(3) <= X"b97ba881";
  X0_out1(4) <= X"37c9539a";
  X0_out1(5) <= X"b8fba882";
  X0_out1(6) <= X"3749539c";
  X0_out1(7) <= X"ade83781";
  X0_out1(8) <= X"398a6979";
  X0_out1(9) <= X"398a6979";
  X0_out1(10) <= X"3749539c";
  X0_out1(11) <= X"37c9539a";

  State_Delay_Initial_Val_out(0) <= X"413ffffd";
  State_Delay_Initial_Val_out(1) <= X"c13ffffd";
  State_Delay_Initial_Val_out(2) <= X"263c9746";
  State_Delay_Initial_Val_out(3) <= X"b97ba881";
  State_Delay_Initial_Val_out(4) <= X"37c9539a";
  State_Delay_Initial_Val_out(5) <= X"b8fba882";
  State_Delay_Initial_Val_out(6) <= X"3749539c";
  State_Delay_Initial_Val_out(7) <= X"ade83781";
  State_Delay_Initial_Val_out(8) <= X"398a6979";
  State_Delay_Initial_Val_out(9) <= X"398a6979";
  State_Delay_Initial_Val_out(10) <= X"3749539c";
  State_Delay_Initial_Val_out(11) <= X"37c9539a";

  State_Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        State_Delay_bypass_reg(0) <= X"00000000";
        State_Delay_bypass_reg(1) <= X"00000000";
        State_Delay_bypass_reg(2) <= X"00000000";
        State_Delay_bypass_reg(3) <= X"00000000";
        State_Delay_bypass_reg(4) <= X"00000000";
        State_Delay_bypass_reg(5) <= X"00000000";
        State_Delay_bypass_reg(6) <= X"00000000";
        State_Delay_bypass_reg(7) <= X"00000000";
        State_Delay_bypass_reg(8) <= X"00000000";
        State_Delay_bypass_reg(9) <= X"00000000";
        State_Delay_bypass_reg(10) <= X"00000000";
        State_Delay_bypass_reg(11) <= X"00000000";
      ELSIF enb_1_50_1 = '1' THEN
        State_Delay_bypass_reg(0) <= State_Delay_bypass_reg_next(0);
        State_Delay_bypass_reg(1) <= State_Delay_bypass_reg_next(1);
        State_Delay_bypass_reg(2) <= State_Delay_bypass_reg_next(2);
        State_Delay_bypass_reg(3) <= State_Delay_bypass_reg_next(3);
        State_Delay_bypass_reg(4) <= State_Delay_bypass_reg_next(4);
        State_Delay_bypass_reg(5) <= State_Delay_bypass_reg_next(5);
        State_Delay_bypass_reg(6) <= State_Delay_bypass_reg_next(6);
        State_Delay_bypass_reg(7) <= State_Delay_bypass_reg_next(7);
        State_Delay_bypass_reg(8) <= State_Delay_bypass_reg_next(8);
        State_Delay_bypass_reg(9) <= State_Delay_bypass_reg_next(9);
        State_Delay_bypass_reg(10) <= State_Delay_bypass_reg_next(10);
        State_Delay_bypass_reg(11) <= State_Delay_bypass_reg_next(11);
      END IF;
    END IF;
  END PROCESS State_Delay_bypass_process;

  
  State_Update_out1(0) <= Output_Sum_out1(0) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(0);
  
  State_Update_out1(1) <= Output_Sum_out1(1) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(1);
  
  State_Update_out1(2) <= Output_Sum_out1(2) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(2);
  
  State_Update_out1(3) <= Output_Sum_out1(3) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(3);
  
  State_Update_out1(4) <= Output_Sum_out1(4) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(4);
  
  State_Update_out1(5) <= Output_Sum_out1(5) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(5);
  
  State_Update_out1(6) <= Output_Sum_out1(6) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(6);
  
  State_Update_out1(7) <= Output_Sum_out1(7) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(7);
  
  State_Update_out1(8) <= Output_Sum_out1(8) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(8);
  
  State_Update_out1(9) <= Output_Sum_out1(9) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(9);
  
  State_Update_out1(10) <= Output_Sum_out1(10) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(10);
  
  State_Update_out1(11) <= Output_Sum_out1(11) WHEN enb_1_50_1 = '1' ELSE
      State_Delay_bypass_reg(11);
  State_Delay_bypass_reg_next(0) <= Output_Sum_out1(0);
  State_Delay_bypass_reg_next(1) <= Output_Sum_out1(1);
  State_Delay_bypass_reg_next(2) <= Output_Sum_out1(2);
  State_Delay_bypass_reg_next(3) <= Output_Sum_out1(3);
  State_Delay_bypass_reg_next(4) <= Output_Sum_out1(4);
  State_Delay_bypass_reg_next(5) <= Output_Sum_out1(5);
  State_Delay_bypass_reg_next(6) <= Output_Sum_out1(6);
  State_Delay_bypass_reg_next(7) <= Output_Sum_out1(7);
  State_Delay_bypass_reg_next(8) <= Output_Sum_out1(8);
  State_Delay_bypass_reg_next(9) <= Output_Sum_out1(9);
  State_Delay_bypass_reg_next(10) <= Output_Sum_out1(10);
  State_Delay_bypass_reg_next(11) <= Output_Sum_out1(11);

  State_Delay_out <= State_Update_out1;

  
  State_Delay_out1(0) <= State_Delay_Initial_Val_out(0) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(0);
  
  State_Delay_out1(1) <= State_Delay_Initial_Val_out(1) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(1);
  
  State_Delay_out1(2) <= State_Delay_Initial_Val_out(2) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(2);
  
  State_Delay_out1(3) <= State_Delay_Initial_Val_out(3) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(3);
  
  State_Delay_out1(4) <= State_Delay_Initial_Val_out(4) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(4);
  
  State_Delay_out1(5) <= State_Delay_Initial_Val_out(5) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(5);
  
  State_Delay_out1(6) <= State_Delay_Initial_Val_out(6) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(6);
  
  State_Delay_out1(7) <= State_Delay_Initial_Val_out(7) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(7);
  
  State_Delay_out1(8) <= State_Delay_Initial_Val_out(8) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(8);
  
  State_Delay_out1(9) <= State_Delay_Initial_Val_out(9) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(9);
  
  State_Delay_out1(10) <= State_Delay_Initial_Val_out(10) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(10);
  
  State_Delay_out1(11) <= State_Delay_Initial_Val_out(11) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(11);

  
  Switch_out1_1(0) <= X0_out1(0) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(0);
  
  Switch_out1_1(1) <= X0_out1(1) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(1);
  
  Switch_out1_1(2) <= X0_out1(2) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(2);
  
  Switch_out1_1(3) <= X0_out1(3) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(3);
  
  Switch_out1_1(4) <= X0_out1(4) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(4);
  
  Switch_out1_1(5) <= X0_out1(5) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(5);
  
  Switch_out1_1(6) <= X0_out1(6) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(6);
  
  Switch_out1_1(7) <= X0_out1(7) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(7);
  
  Switch_out1_1(8) <= X0_out1(8) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(8);
  
  Switch_out1_1(9) <= X0_out1(9) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(9);
  
  Switch_out1_1(10) <= X0_out1(10) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(10);
  
  Switch_out1_1(11) <= X0_out1(11) WHEN Delay2_out1 = '0' ELSE
      State_Delay_out1(11);


  t5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t5_bypass_reg(0) <= X"00000000";
        t5_bypass_reg(1) <= X"00000000";
        t5_bypass_reg(2) <= X"00000000";
      ELSIF enb_1_50_1 = '1' THEN
        t5_bypass_reg(0) <= t5_bypass_reg_next(0);
        t5_bypass_reg(1) <= t5_bypass_reg_next(1);
        t5_bypass_reg(2) <= t5_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t5_bypass_process;

  
  Data_Type_Conversion_out1_1(0) <= Data_Type_Conversion_out1(0) WHEN enb_1_50_1 = '1' ELSE
      t5_bypass_reg(0);
  
  Data_Type_Conversion_out1_1(1) <= Data_Type_Conversion_out1(1) WHEN enb_1_50_1 = '1' ELSE
      t5_bypass_reg(1);
  
  Data_Type_Conversion_out1_1(2) <= Data_Type_Conversion_out1(2) WHEN enb_1_50_1 = '1' ELSE
      t5_bypass_reg(2);
  t5_bypass_reg_next(0) <= Data_Type_Conversion_out1(0);
  t5_bypass_reg_next(1) <= Data_Type_Conversion_out1(1);
  t5_bypass_reg_next(2) <= Data_Type_Conversion_out1(2);


  outputgen: FOR k IN 0 TO 2 GENERATE
    Data_Type_Conversion1_out1_1(k) <= signed(Data_Type_Conversion1_out1(k));
  END GENERATE;

  t6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t6_bypass_reg(0) <= to_signed(16#0000000#, 25);
        t6_bypass_reg(1) <= to_signed(16#0000000#, 25);
        t6_bypass_reg(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_50_1 = '1' THEN
        t6_bypass_reg(0) <= t6_bypass_reg_next(0);
        t6_bypass_reg(1) <= t6_bypass_reg_next(1);
        t6_bypass_reg(2) <= t6_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t6_bypass_process;

  
  Data_Type_Conversion1_out1_2(0) <= Data_Type_Conversion1_out1_1(0) WHEN enb_1_50_1 = '1' ELSE
      t6_bypass_reg(0);
  
  Data_Type_Conversion1_out1_2(1) <= Data_Type_Conversion1_out1_1(1) WHEN enb_1_50_1 = '1' ELSE
      t6_bypass_reg(1);
  
  Data_Type_Conversion1_out1_2(2) <= Data_Type_Conversion1_out1_1(2) WHEN enb_1_50_1 = '1' ELSE
      t6_bypass_reg(2);
  t6_bypass_reg_next(0) <= Data_Type_Conversion1_out1_1(0);
  t6_bypass_reg_next(1) <= Data_Type_Conversion1_out1_1(1);
  t6_bypass_reg_next(2) <= Data_Type_Conversion1_out1_1(2);

  u_abc_pl_0 <= std_logic_vector(Data_Type_Conversion1_out1_2(0));

  u_abc_pl_1 <= std_logic_vector(Data_Type_Conversion1_out1_2(1));

  u_abc_pl_2 <= std_logic_vector(Data_Type_Conversion1_out1_2(2));

  ce_out <= enb_1_50_1;

  u_abc_ps_0 <= Data_Type_Conversion_out1_1(0);

  u_abc_ps_1 <= Data_Type_Conversion_out1_1(1);

  u_abc_ps_2 <= Data_Type_Conversion_out1_1(2);

END rtl;

