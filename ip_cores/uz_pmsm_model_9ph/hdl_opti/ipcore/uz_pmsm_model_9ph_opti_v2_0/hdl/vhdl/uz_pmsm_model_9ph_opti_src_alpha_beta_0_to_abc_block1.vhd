-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block1.vhd
-- Created: 2022-05-18 16:47:48
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block1
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph/Line-Line to Phase voltage2/alpha_beta_0   to   abc
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        alpha_beta_0                      :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
        a_b_c                             :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
        );
END uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block1;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_src_alpha_beta_0_to_abc_block1 IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_add_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_add_single(rtl);

  -- Signals
  SIGNAL c5_kconst                        : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL kconst                           : matrix_of_std_logic_vector32(0 TO 2, 0 TO 2);  -- ufix32 [3x3]
  SIGNAL s                                : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL selector_out                     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL s_1                              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL selector_out_1                   : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL s_2                              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL MMul_dot_product_out             : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL reshape_out                      : matrix_of_std_logic_vector32(0 TO 2, 0 TO 2);  -- ufix32 [3x3]
  SIGNAL selector_out_2                   : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL selector_out_3                   : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL nfp_out_1_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL selector_out_4                   : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL nfp_out_2_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_3_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_3                              : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Gain4_out1                       : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]

BEGIN
  u_nfp_mul_comp : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(0),  -- single
              nfp_in2 => s_2(0),  -- single
              nfp_out => MMul_dot_product_out(0)  -- single
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(1),  -- single
              nfp_in2 => s_2(1),  -- single
              nfp_out => MMul_dot_product_out(1)  -- single
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(2),  -- single
              nfp_in2 => s_2(2),  -- single
              nfp_out => MMul_dot_product_out(2)  -- single
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(3),  -- single
              nfp_in2 => s_2(3),  -- single
              nfp_out => MMul_dot_product_out(3)  -- single
              );

  u_nfp_mul_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(4),  -- single
              nfp_in2 => s_2(4),  -- single
              nfp_out => MMul_dot_product_out(4)  -- single
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(5),  -- single
              nfp_in2 => s_2(5),  -- single
              nfp_out => MMul_dot_product_out(5)  -- single
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(6),  -- single
              nfp_in2 => s_2(6),  -- single
              nfp_out => MMul_dot_product_out(6)  -- single
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(7),  -- single
              nfp_in2 => s_2(7),  -- single
              nfp_out => MMul_dot_product_out(7)  -- single
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(8),  -- single
              nfp_in2 => s_2(8),  -- single
              nfp_out => MMul_dot_product_out(8)  -- single
              );

  u_nfp_add_comp : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => selector_out_2(0),  -- single
              nfp_in2 => selector_out_3(0),  -- single
              nfp_out => nfp_out_1_1_1  -- single
              );

  u_nfp_add_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => nfp_out_1_1_1,  -- single
              nfp_in2 => selector_out_4(0),  -- single
              nfp_out => s_3(0)  -- single
              );

  u_nfp_add_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => selector_out_2(1),  -- single
              nfp_in2 => selector_out_3(1),  -- single
              nfp_out => nfp_out_2_1_1  -- single
              );

  u_nfp_add_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => nfp_out_2_1_1,  -- single
              nfp_in2 => selector_out_4(1),  -- single
              nfp_out => s_3(1)  -- single
              );

  u_nfp_add_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => selector_out_2(2),  -- single
              nfp_in2 => selector_out_3(2),  -- single
              nfp_out => nfp_out_3_1_1  -- single
              );

  u_nfp_add_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => nfp_out_3_1_1,  -- single
              nfp_in2 => selector_out_4(2),  -- single
              nfp_out => s_3(2)  -- single
              );

  c5_kconst(0) <= X"3f800000";
  c5_kconst(1) <= X"bf000000";
  c5_kconst(2) <= X"bf000000";
  c5_kconst(3) <= X"00000000";
  c5_kconst(4) <= X"3f5db3d7";
  c5_kconst(5) <= X"bf5db3d7";
  c5_kconst(6) <= X"3f800000";
  c5_kconst(7) <= X"3f800000";
  c5_kconst(8) <= X"3f800000";

  kconstGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    kconstGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      kconst(d0, d1) <= c5_kconst(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  sGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    sGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      s(d0 + (d1 * 3)) <= kconst(d0, d1);
    END GENERATE;
  END GENERATE;

  selector_out(0) <= s(0);
  selector_out(1) <= s(3);
  selector_out(2) <= s(6);
  selector_out(3) <= s(1);
  selector_out(4) <= s(4);
  selector_out(5) <= s(7);
  selector_out(6) <= s(2);
  selector_out(7) <= s(5);
  selector_out(8) <= s(8);

  s_1GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_1(d0) <= selector_out(d0);
  END GENERATE;

  selector_out_1(0) <= alpha_beta_0(0);
  selector_out_1(1) <= alpha_beta_0(1);
  selector_out_1(2) <= alpha_beta_0(2);
  selector_out_1(3) <= alpha_beta_0(0);
  selector_out_1(4) <= alpha_beta_0(1);
  selector_out_1(5) <= alpha_beta_0(2);
  selector_out_1(6) <= alpha_beta_0(0);
  selector_out_1(7) <= alpha_beta_0(1);
  selector_out_1(8) <= alpha_beta_0(2);

  s_2GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_2(d0) <= selector_out_1(d0);
  END GENERATE;


  reshape_outGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    reshape_outGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      reshape_out(d0, d1) <= MMul_dot_product_out(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  select_0_output : PROCESS (reshape_out)
  BEGIN
    selector_out_2(0) <= reshape_out(0, 0);
    selector_out_2(1) <= reshape_out(0, 1);
    selector_out_2(2) <= reshape_out(0, 2);
  END PROCESS select_0_output;


  select_1_output : PROCESS (reshape_out)
  BEGIN
    selector_out_3(0) <= reshape_out(1, 0);
    selector_out_3(1) <= reshape_out(1, 1);
    selector_out_3(2) <= reshape_out(1, 2);
  END PROCESS select_1_output;


  select_2_output : PROCESS (reshape_out)
  BEGIN
    selector_out_4(0) <= reshape_out(2, 0);
    selector_out_4(1) <= reshape_out(2, 1);
    selector_out_4(2) <= reshape_out(2, 2);
  END PROCESS select_2_output;



  Gain4_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
    Gain4_out1(d0) <= s_3(d0);
  END GENERATE;

  a_b_c <= Gain4_out1;

END rtl;

