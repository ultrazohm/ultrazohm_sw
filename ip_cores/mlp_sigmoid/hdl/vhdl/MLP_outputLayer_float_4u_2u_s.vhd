-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_outputLayer_float_4u_2u_s is
port (
    p_weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_weights_ce0 : OUT STD_LOGIC;
    p_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_weights_we0 : OUT STD_LOGIC;
    p_weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_weights_ce1 : OUT STD_LOGIC;
    p_weights_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_weights_we1 : OUT STD_LOGIC;
    p_weights_offset : IN STD_LOGIC_VECTOR (13 downto 0);
    p_input_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_input_ce0 : OUT STD_LOGIC;
    p_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_input_we0 : OUT STD_LOGIC;
    p_input_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_input_ce1 : OUT STD_LOGIC;
    p_input_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_input_we1 : OUT STD_LOGIC;
    p_bias_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_bias_ce0 : OUT STD_LOGIC;
    p_bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_bias_we0 : OUT STD_LOGIC;
    p_bias_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_bias_ce1 : OUT STD_LOGIC;
    p_bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_bias_we1 : OUT STD_LOGIC;
    p_bias_offset : IN STD_LOGIC_VECTOR (8 downto 0);
    p_output_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_output_ce0 : OUT STD_LOGIC;
    p_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_output_we0 : OUT STD_LOGIC;
    p_output_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_output_ce1 : OUT STD_LOGIC;
    p_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_output_we1 : OUT STD_LOGIC;
    p_n : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_weights_offset_ap_vld : IN STD_LOGIC;
    p_bias_offset_ap_vld : IN STD_LOGIC;
    p_n_ap_vld : IN STD_LOGIC;
    p_k_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of MLP_outputLayer_float_4u_2u_s is 
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal outputLayer_float_4u_2u_entry115_U0_ap_start : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_ap_done : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_ap_continue : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_ap_idle : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_ap_ready : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_p_weights_offset_out_din : STD_LOGIC_VECTOR (13 downto 0);
    signal outputLayer_float_4u_2u_entry115_U0_p_weights_offset_out_write : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_p_bias_offset_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal outputLayer_float_4u_2u_entry115_U0_p_bias_offset_out_write : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_p_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal outputLayer_float_4u_2u_entry115_U0_p_n_out_write : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_p_n_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal outputLayer_float_4u_2u_entry115_U0_p_n_out1_write : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_p_n_out2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal outputLayer_float_4u_2u_entry115_U0_p_n_out2_write : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_p_k_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal outputLayer_float_4u_2u_entry115_U0_p_k_out_write : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_p_k_out3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal outputLayer_float_4u_2u_entry115_U0_p_k_out3_write : STD_LOGIC;
    signal gem2Stream_float_4u_U0_ap_start : STD_LOGIC;
    signal gem2Stream_float_4u_U0_ap_done : STD_LOGIC;
    signal gem2Stream_float_4u_U0_ap_continue : STD_LOGIC;
    signal gem2Stream_float_4u_U0_ap_idle : STD_LOGIC;
    signal gem2Stream_float_4u_U0_ap_ready : STD_LOGIC;
    signal gem2Stream_float_4u_U0_start_out : STD_LOGIC;
    signal gem2Stream_float_4u_U0_start_write : STD_LOGIC;
    signal gem2Stream_float_4u_U0_p_out_din : STD_LOGIC_VECTOR (127 downto 0);
    signal gem2Stream_float_4u_U0_p_out_write : STD_LOGIC;
    signal gem2Stream_float_4u_U0_p_m_read : STD_LOGIC;
    signal gem2Stream_float_4u_U0_p_n_read : STD_LOGIC;
    signal gem2Stream_float_4u_U0_p_in_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal gem2Stream_float_4u_U0_p_in_ce0 : STD_LOGIC;
    signal gem2Stream_float_4u_U0_p_in_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal gem2Stream_float_4u_U0_p_in_ce1 : STD_LOGIC;
    signal gem2Stream_float_4u_U0_p_in_offset_read : STD_LOGIC;
    signal gem2Stream_float_4u_U0_p_m_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gem2Stream_float_4u_U0_p_m_out_write : STD_LOGIC;
    signal gem2Stream_float_4u_U0_p_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gem2Stream_float_4u_U0_p_n_out_write : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_ap_start : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_ap_done : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_ap_continue : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_ap_idle : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_ap_ready : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_p_out_din : STD_LOGIC_VECTOR (127 downto 0);
    signal vec2GemStream_float_4u_1_U0_p_out_write : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_p_m_read : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_p_n_read : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_p_in_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal vec2GemStream_float_4u_1_U0_p_in_ce0 : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_p_in_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal vec2GemStream_float_4u_1_U0_p_in_ce1 : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_start : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_done : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_continue : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_idle : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_ready : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_p_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readVec2Stream_float_1u_U0_p_out_write : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_p_in_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal readVec2Stream_float_1u_U0_p_in_ce0 : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_p_in_offset_read : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_p_n_read : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_ap_start : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_start_out : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_start_write : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_l_strWeights4_read : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_l_strInput5_read : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_l_strBias7_read : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_l_strMv6_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_2u_unsigned_int_U0_l_strMv6_write : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_p_m_read : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_p_n_read : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_p_m_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_2u_unsigned_int_U0_p_m_out_write : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_ap_done : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_ap_ready : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_ap_idle : STD_LOGIC;
    signal gemv_float_2u_unsigned_int_U0_ap_continue : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_start : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_done : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_continue : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_idle : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_ready : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_in_read : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_n_read : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_out_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal writeStream2Vec_float_1u_U0_p_out_ce0 : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_out_we0 : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal p_weights_offset_c_full_n : STD_LOGIC;
    signal p_weights_offset_c_dout : STD_LOGIC_VECTOR (13 downto 0);
    signal p_weights_offset_c_empty_n : STD_LOGIC;
    signal p_bias_offset_c_full_n : STD_LOGIC;
    signal p_bias_offset_c_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal p_bias_offset_c_empty_n : STD_LOGIC;
    signal p_n_c_full_n : STD_LOGIC;
    signal p_n_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c_empty_n : STD_LOGIC;
    signal p_n_c13_full_n : STD_LOGIC;
    signal p_n_c13_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c13_empty_n : STD_LOGIC;
    signal p_n_c14_full_n : STD_LOGIC;
    signal p_n_c14_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c14_empty_n : STD_LOGIC;
    signal p_k_c_full_n : STD_LOGIC;
    signal p_k_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_c_empty_n : STD_LOGIC;
    signal p_k_c15_full_n : STD_LOGIC;
    signal p_k_c15_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_c15_empty_n : STD_LOGIC;
    signal l_strWeights_full_n : STD_LOGIC;
    signal l_strWeights_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal l_strWeights_empty_n : STD_LOGIC;
    signal p_n_c16_full_n : STD_LOGIC;
    signal p_n_c16_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c16_empty_n : STD_LOGIC;
    signal p_k_c17_full_n : STD_LOGIC;
    signal p_k_c17_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_c17_empty_n : STD_LOGIC;
    signal l_strInput_full_n : STD_LOGIC;
    signal l_strInput_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal l_strInput_empty_n : STD_LOGIC;
    signal l_strBias_full_n : STD_LOGIC;
    signal l_strBias_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal l_strBias_empty_n : STD_LOGIC;
    signal l_strMv_full_n : STD_LOGIC;
    signal l_strMv_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal l_strMv_empty_n : STD_LOGIC;
    signal p_n_c18_full_n : STD_LOGIC;
    signal p_n_c18_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c18_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_outputLayer_float_4u_2u_entry115_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_outputLayer_float_4u_2u_entry115_U0_ap_ready : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_gem2Stream_float_4u_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_gem2Stream_float_4u_U0_ap_ready : STD_LOGIC;
    signal gem2Stream_float_4u_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_vec2GemStream_float_4u_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_vec2GemStream_float_4u_1_U0_ap_ready : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readVec2Stream_float_1u_U0_ap_ready : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outputLayer_float_4u_2u_entry115_U0_start_full_n : STD_LOGIC;
    signal outputLayer_float_4u_2u_entry115_U0_start_write : STD_LOGIC;
    signal start_for_gemv_float_2u_unsigned_int_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gemv_float_2u_unsigned_int_U0_full_n : STD_LOGIC;
    signal start_for_gemv_float_2u_unsigned_int_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gemv_float_2u_unsigned_int_U0_empty_n : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_start_full_n : STD_LOGIC;
    signal vec2GemStream_float_4u_1_U0_start_write : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_start_full_n : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_start_write : STD_LOGIC;
    signal start_for_writeStream2Vec_float_1u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeStream2Vec_float_1u_U0_full_n : STD_LOGIC;
    signal start_for_writeStream2Vec_float_1u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeStream2Vec_float_1u_U0_empty_n : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_start_full_n : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_start_write : STD_LOGIC;

    component MLP_outputLayer_float_4u_2u_entry115 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_weights_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_bias_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_offset_out_din : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weights_offset_out_full_n : IN STD_LOGIC;
        p_weights_offset_out_write : OUT STD_LOGIC;
        p_bias_offset_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_bias_offset_out_full_n : IN STD_LOGIC;
        p_bias_offset_out_write : OUT STD_LOGIC;
        p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out_full_n : IN STD_LOGIC;
        p_n_out_write : OUT STD_LOGIC;
        p_n_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out1_full_n : IN STD_LOGIC;
        p_n_out1_write : OUT STD_LOGIC;
        p_n_out2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out2_full_n : IN STD_LOGIC;
        p_n_out2_write : OUT STD_LOGIC;
        p_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_k_out_full_n : IN STD_LOGIC;
        p_k_out_write : OUT STD_LOGIC;
        p_k_out3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_k_out3_full_n : IN STD_LOGIC;
        p_k_out3_write : OUT STD_LOGIC );
    end component;


    component MLP_gem2Stream_float_4u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_out_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        p_out_full_n : IN STD_LOGIC;
        p_out_write : OUT STD_LOGIC;
        p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_empty_n : IN STD_LOGIC;
        p_m_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_in_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_in_ce0 : OUT STD_LOGIC;
        p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_in_ce1 : OUT STD_LOGIC;
        p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_offset_dout : IN STD_LOGIC_VECTOR (13 downto 0);
        p_in_offset_empty_n : IN STD_LOGIC;
        p_in_offset_read : OUT STD_LOGIC;
        p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_full_n : IN STD_LOGIC;
        p_m_out_write : OUT STD_LOGIC;
        p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out_full_n : IN STD_LOGIC;
        p_n_out_write : OUT STD_LOGIC );
    end component;


    component MLP_vec2GemStream_float_4u_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_out_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        p_out_full_n : IN STD_LOGIC;
        p_out_write : OUT STD_LOGIC;
        p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_empty_n : IN STD_LOGIC;
        p_m_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_in_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_in_ce0 : OUT STD_LOGIC;
        p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_in_ce1 : OUT STD_LOGIC;
        p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_readVec2Stream_float_1u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_out_full_n : IN STD_LOGIC;
        p_out_write : OUT STD_LOGIC;
        p_in_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_in_ce0 : OUT STD_LOGIC;
        p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_offset_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        p_in_offset_empty_n : IN STD_LOGIC;
        p_in_offset_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC );
    end component;


    component MLP_gemv_float_2u_unsigned_int_s IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        l_strWeights4_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        l_strWeights4_empty_n : IN STD_LOGIC;
        l_strWeights4_read : OUT STD_LOGIC;
        l_strInput5_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        l_strInput5_empty_n : IN STD_LOGIC;
        l_strInput5_read : OUT STD_LOGIC;
        l_strBias7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        l_strBias7_empty_n : IN STD_LOGIC;
        l_strBias7_read : OUT STD_LOGIC;
        l_strMv6_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        l_strMv6_full_n : IN STD_LOGIC;
        l_strMv6_write : OUT STD_LOGIC;
        p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_empty_n : IN STD_LOGIC;
        p_m_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_full_n : IN STD_LOGIC;
        p_m_out_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MLP_writeStream2Vec_float_1u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_in_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_empty_n : IN STD_LOGIC;
        p_in_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_out_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_out_ce0 : OUT STD_LOGIC;
        p_out_we0 : OUT STD_LOGIC;
        p_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_fifo_w14_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (13 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (13 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MLP_fifo_w9_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MLP_fifo_w32_d2_S_x9 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MLP_fifo_w128_d2_S_x3 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MLP_start_for_gemv_float_2u_unsigned_int_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MLP_start_for_writeStream2Vec_float_1u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    outputLayer_float_4u_2u_entry115_U0 : component MLP_outputLayer_float_4u_2u_entry115
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => outputLayer_float_4u_2u_entry115_U0_ap_start,
        ap_done => outputLayer_float_4u_2u_entry115_U0_ap_done,
        ap_continue => outputLayer_float_4u_2u_entry115_U0_ap_continue,
        ap_idle => outputLayer_float_4u_2u_entry115_U0_ap_idle,
        ap_ready => outputLayer_float_4u_2u_entry115_U0_ap_ready,
        p_weights_offset => p_weights_offset,
        p_bias_offset => p_bias_offset,
        p_n => p_n,
        p_k => p_k,
        p_weights_offset_out_din => outputLayer_float_4u_2u_entry115_U0_p_weights_offset_out_din,
        p_weights_offset_out_full_n => p_weights_offset_c_full_n,
        p_weights_offset_out_write => outputLayer_float_4u_2u_entry115_U0_p_weights_offset_out_write,
        p_bias_offset_out_din => outputLayer_float_4u_2u_entry115_U0_p_bias_offset_out_din,
        p_bias_offset_out_full_n => p_bias_offset_c_full_n,
        p_bias_offset_out_write => outputLayer_float_4u_2u_entry115_U0_p_bias_offset_out_write,
        p_n_out_din => outputLayer_float_4u_2u_entry115_U0_p_n_out_din,
        p_n_out_full_n => p_n_c_full_n,
        p_n_out_write => outputLayer_float_4u_2u_entry115_U0_p_n_out_write,
        p_n_out1_din => outputLayer_float_4u_2u_entry115_U0_p_n_out1_din,
        p_n_out1_full_n => p_n_c13_full_n,
        p_n_out1_write => outputLayer_float_4u_2u_entry115_U0_p_n_out1_write,
        p_n_out2_din => outputLayer_float_4u_2u_entry115_U0_p_n_out2_din,
        p_n_out2_full_n => p_n_c14_full_n,
        p_n_out2_write => outputLayer_float_4u_2u_entry115_U0_p_n_out2_write,
        p_k_out_din => outputLayer_float_4u_2u_entry115_U0_p_k_out_din,
        p_k_out_full_n => p_k_c_full_n,
        p_k_out_write => outputLayer_float_4u_2u_entry115_U0_p_k_out_write,
        p_k_out3_din => outputLayer_float_4u_2u_entry115_U0_p_k_out3_din,
        p_k_out3_full_n => p_k_c15_full_n,
        p_k_out3_write => outputLayer_float_4u_2u_entry115_U0_p_k_out3_write);

    gem2Stream_float_4u_U0 : component MLP_gem2Stream_float_4u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gem2Stream_float_4u_U0_ap_start,
        start_full_n => start_for_gemv_float_2u_unsigned_int_U0_full_n,
        ap_done => gem2Stream_float_4u_U0_ap_done,
        ap_continue => gem2Stream_float_4u_U0_ap_continue,
        ap_idle => gem2Stream_float_4u_U0_ap_idle,
        ap_ready => gem2Stream_float_4u_U0_ap_ready,
        start_out => gem2Stream_float_4u_U0_start_out,
        start_write => gem2Stream_float_4u_U0_start_write,
        p_out_din => gem2Stream_float_4u_U0_p_out_din,
        p_out_full_n => l_strWeights_full_n,
        p_out_write => gem2Stream_float_4u_U0_p_out_write,
        p_m_dout => p_n_c_dout,
        p_m_empty_n => p_n_c_empty_n,
        p_m_read => gem2Stream_float_4u_U0_p_m_read,
        p_n_dout => p_k_c_dout,
        p_n_empty_n => p_k_c_empty_n,
        p_n_read => gem2Stream_float_4u_U0_p_n_read,
        p_in_address0 => gem2Stream_float_4u_U0_p_in_address0,
        p_in_ce0 => gem2Stream_float_4u_U0_p_in_ce0,
        p_in_q0 => p_weights_q0,
        p_in_address1 => gem2Stream_float_4u_U0_p_in_address1,
        p_in_ce1 => gem2Stream_float_4u_U0_p_in_ce1,
        p_in_q1 => p_weights_q1,
        p_in_offset_dout => p_weights_offset_c_dout,
        p_in_offset_empty_n => p_weights_offset_c_empty_n,
        p_in_offset_read => gem2Stream_float_4u_U0_p_in_offset_read,
        p_m_out_din => gem2Stream_float_4u_U0_p_m_out_din,
        p_m_out_full_n => p_n_c16_full_n,
        p_m_out_write => gem2Stream_float_4u_U0_p_m_out_write,
        p_n_out_din => gem2Stream_float_4u_U0_p_n_out_din,
        p_n_out_full_n => p_k_c17_full_n,
        p_n_out_write => gem2Stream_float_4u_U0_p_n_out_write);

    vec2GemStream_float_4u_1_U0 : component MLP_vec2GemStream_float_4u_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => vec2GemStream_float_4u_1_U0_ap_start,
        ap_done => vec2GemStream_float_4u_1_U0_ap_done,
        ap_continue => vec2GemStream_float_4u_1_U0_ap_continue,
        ap_idle => vec2GemStream_float_4u_1_U0_ap_idle,
        ap_ready => vec2GemStream_float_4u_1_U0_ap_ready,
        p_out_din => vec2GemStream_float_4u_1_U0_p_out_din,
        p_out_full_n => l_strInput_full_n,
        p_out_write => vec2GemStream_float_4u_1_U0_p_out_write,
        p_m_dout => p_n_c13_dout,
        p_m_empty_n => p_n_c13_empty_n,
        p_m_read => vec2GemStream_float_4u_1_U0_p_m_read,
        p_n_dout => p_k_c15_dout,
        p_n_empty_n => p_k_c15_empty_n,
        p_n_read => vec2GemStream_float_4u_1_U0_p_n_read,
        p_in_address0 => vec2GemStream_float_4u_1_U0_p_in_address0,
        p_in_ce0 => vec2GemStream_float_4u_1_U0_p_in_ce0,
        p_in_q0 => p_input_q0,
        p_in_address1 => vec2GemStream_float_4u_1_U0_p_in_address1,
        p_in_ce1 => vec2GemStream_float_4u_1_U0_p_in_ce1,
        p_in_q1 => p_input_q1);

    readVec2Stream_float_1u_U0 : component MLP_readVec2Stream_float_1u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readVec2Stream_float_1u_U0_ap_start,
        ap_done => readVec2Stream_float_1u_U0_ap_done,
        ap_continue => readVec2Stream_float_1u_U0_ap_continue,
        ap_idle => readVec2Stream_float_1u_U0_ap_idle,
        ap_ready => readVec2Stream_float_1u_U0_ap_ready,
        p_out_din => readVec2Stream_float_1u_U0_p_out_din,
        p_out_full_n => l_strBias_full_n,
        p_out_write => readVec2Stream_float_1u_U0_p_out_write,
        p_in_address0 => readVec2Stream_float_1u_U0_p_in_address0,
        p_in_ce0 => readVec2Stream_float_1u_U0_p_in_ce0,
        p_in_q0 => p_bias_q0,
        p_in_offset_dout => p_bias_offset_c_dout,
        p_in_offset_empty_n => p_bias_offset_c_empty_n,
        p_in_offset_read => readVec2Stream_float_1u_U0_p_in_offset_read,
        p_n_dout => p_n_c14_dout,
        p_n_empty_n => p_n_c14_empty_n,
        p_n_read => readVec2Stream_float_1u_U0_p_n_read);

    gemv_float_2u_unsigned_int_U0 : component MLP_gemv_float_2u_unsigned_int_s
    port map (
        ap_start => gemv_float_2u_unsigned_int_U0_ap_start,
        start_full_n => start_for_writeStream2Vec_float_1u_U0_full_n,
        start_out => gemv_float_2u_unsigned_int_U0_start_out,
        start_write => gemv_float_2u_unsigned_int_U0_start_write,
        l_strWeights4_dout => l_strWeights_dout,
        l_strWeights4_empty_n => l_strWeights_empty_n,
        l_strWeights4_read => gemv_float_2u_unsigned_int_U0_l_strWeights4_read,
        l_strInput5_dout => l_strInput_dout,
        l_strInput5_empty_n => l_strInput_empty_n,
        l_strInput5_read => gemv_float_2u_unsigned_int_U0_l_strInput5_read,
        l_strBias7_dout => l_strBias_dout,
        l_strBias7_empty_n => l_strBias_empty_n,
        l_strBias7_read => gemv_float_2u_unsigned_int_U0_l_strBias7_read,
        l_strMv6_din => gemv_float_2u_unsigned_int_U0_l_strMv6_din,
        l_strMv6_full_n => l_strMv_full_n,
        l_strMv6_write => gemv_float_2u_unsigned_int_U0_l_strMv6_write,
        p_m_dout => p_n_c16_dout,
        p_m_empty_n => p_n_c16_empty_n,
        p_m_read => gemv_float_2u_unsigned_int_U0_p_m_read,
        p_n_dout => p_k_c17_dout,
        p_n_empty_n => p_k_c17_empty_n,
        p_n_read => gemv_float_2u_unsigned_int_U0_p_n_read,
        p_m_out_din => gemv_float_2u_unsigned_int_U0_p_m_out_din,
        p_m_out_full_n => p_n_c18_full_n,
        p_m_out_write => gemv_float_2u_unsigned_int_U0_p_m_out_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => gemv_float_2u_unsigned_int_U0_ap_done,
        ap_ready => gemv_float_2u_unsigned_int_U0_ap_ready,
        ap_idle => gemv_float_2u_unsigned_int_U0_ap_idle,
        ap_continue => gemv_float_2u_unsigned_int_U0_ap_continue);

    writeStream2Vec_float_1u_U0 : component MLP_writeStream2Vec_float_1u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writeStream2Vec_float_1u_U0_ap_start,
        ap_done => writeStream2Vec_float_1u_U0_ap_done,
        ap_continue => writeStream2Vec_float_1u_U0_ap_continue,
        ap_idle => writeStream2Vec_float_1u_U0_ap_idle,
        ap_ready => writeStream2Vec_float_1u_U0_ap_ready,
        p_in_dout => l_strMv_dout,
        p_in_empty_n => l_strMv_empty_n,
        p_in_read => writeStream2Vec_float_1u_U0_p_in_read,
        p_n_dout => p_n_c18_dout,
        p_n_empty_n => p_n_c18_empty_n,
        p_n_read => writeStream2Vec_float_1u_U0_p_n_read,
        p_out_address0 => writeStream2Vec_float_1u_U0_p_out_address0,
        p_out_ce0 => writeStream2Vec_float_1u_U0_p_out_ce0,
        p_out_we0 => writeStream2Vec_float_1u_U0_p_out_we0,
        p_out_d0 => writeStream2Vec_float_1u_U0_p_out_d0);

    p_weights_offset_c_U : component MLP_fifo_w14_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outputLayer_float_4u_2u_entry115_U0_p_weights_offset_out_din,
        if_full_n => p_weights_offset_c_full_n,
        if_write => outputLayer_float_4u_2u_entry115_U0_p_weights_offset_out_write,
        if_dout => p_weights_offset_c_dout,
        if_empty_n => p_weights_offset_c_empty_n,
        if_read => gem2Stream_float_4u_U0_p_in_offset_read);

    p_bias_offset_c_U : component MLP_fifo_w9_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outputLayer_float_4u_2u_entry115_U0_p_bias_offset_out_din,
        if_full_n => p_bias_offset_c_full_n,
        if_write => outputLayer_float_4u_2u_entry115_U0_p_bias_offset_out_write,
        if_dout => p_bias_offset_c_dout,
        if_empty_n => p_bias_offset_c_empty_n,
        if_read => readVec2Stream_float_1u_U0_p_in_offset_read);

    p_n_c_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outputLayer_float_4u_2u_entry115_U0_p_n_out_din,
        if_full_n => p_n_c_full_n,
        if_write => outputLayer_float_4u_2u_entry115_U0_p_n_out_write,
        if_dout => p_n_c_dout,
        if_empty_n => p_n_c_empty_n,
        if_read => gem2Stream_float_4u_U0_p_m_read);

    p_n_c13_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outputLayer_float_4u_2u_entry115_U0_p_n_out1_din,
        if_full_n => p_n_c13_full_n,
        if_write => outputLayer_float_4u_2u_entry115_U0_p_n_out1_write,
        if_dout => p_n_c13_dout,
        if_empty_n => p_n_c13_empty_n,
        if_read => vec2GemStream_float_4u_1_U0_p_m_read);

    p_n_c14_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outputLayer_float_4u_2u_entry115_U0_p_n_out2_din,
        if_full_n => p_n_c14_full_n,
        if_write => outputLayer_float_4u_2u_entry115_U0_p_n_out2_write,
        if_dout => p_n_c14_dout,
        if_empty_n => p_n_c14_empty_n,
        if_read => readVec2Stream_float_1u_U0_p_n_read);

    p_k_c_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outputLayer_float_4u_2u_entry115_U0_p_k_out_din,
        if_full_n => p_k_c_full_n,
        if_write => outputLayer_float_4u_2u_entry115_U0_p_k_out_write,
        if_dout => p_k_c_dout,
        if_empty_n => p_k_c_empty_n,
        if_read => gem2Stream_float_4u_U0_p_n_read);

    p_k_c15_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outputLayer_float_4u_2u_entry115_U0_p_k_out3_din,
        if_full_n => p_k_c15_full_n,
        if_write => outputLayer_float_4u_2u_entry115_U0_p_k_out3_write,
        if_dout => p_k_c15_dout,
        if_empty_n => p_k_c15_empty_n,
        if_read => vec2GemStream_float_4u_1_U0_p_n_read);

    l_strWeights_U : component MLP_fifo_w128_d2_S_x3
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gem2Stream_float_4u_U0_p_out_din,
        if_full_n => l_strWeights_full_n,
        if_write => gem2Stream_float_4u_U0_p_out_write,
        if_dout => l_strWeights_dout,
        if_empty_n => l_strWeights_empty_n,
        if_read => gemv_float_2u_unsigned_int_U0_l_strWeights4_read);

    p_n_c16_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gem2Stream_float_4u_U0_p_m_out_din,
        if_full_n => p_n_c16_full_n,
        if_write => gem2Stream_float_4u_U0_p_m_out_write,
        if_dout => p_n_c16_dout,
        if_empty_n => p_n_c16_empty_n,
        if_read => gemv_float_2u_unsigned_int_U0_p_m_read);

    p_k_c17_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gem2Stream_float_4u_U0_p_n_out_din,
        if_full_n => p_k_c17_full_n,
        if_write => gem2Stream_float_4u_U0_p_n_out_write,
        if_dout => p_k_c17_dout,
        if_empty_n => p_k_c17_empty_n,
        if_read => gemv_float_2u_unsigned_int_U0_p_n_read);

    l_strInput_U : component MLP_fifo_w128_d2_S_x3
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => vec2GemStream_float_4u_1_U0_p_out_din,
        if_full_n => l_strInput_full_n,
        if_write => vec2GemStream_float_4u_1_U0_p_out_write,
        if_dout => l_strInput_dout,
        if_empty_n => l_strInput_empty_n,
        if_read => gemv_float_2u_unsigned_int_U0_l_strInput5_read);

    l_strBias_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readVec2Stream_float_1u_U0_p_out_din,
        if_full_n => l_strBias_full_n,
        if_write => readVec2Stream_float_1u_U0_p_out_write,
        if_dout => l_strBias_dout,
        if_empty_n => l_strBias_empty_n,
        if_read => gemv_float_2u_unsigned_int_U0_l_strBias7_read);

    l_strMv_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemv_float_2u_unsigned_int_U0_l_strMv6_din,
        if_full_n => l_strMv_full_n,
        if_write => gemv_float_2u_unsigned_int_U0_l_strMv6_write,
        if_dout => l_strMv_dout,
        if_empty_n => l_strMv_empty_n,
        if_read => writeStream2Vec_float_1u_U0_p_in_read);

    p_n_c18_U : component MLP_fifo_w32_d2_S_x9
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemv_float_2u_unsigned_int_U0_p_m_out_din,
        if_full_n => p_n_c18_full_n,
        if_write => gemv_float_2u_unsigned_int_U0_p_m_out_write,
        if_dout => p_n_c18_dout,
        if_empty_n => p_n_c18_empty_n,
        if_read => writeStream2Vec_float_1u_U0_p_n_read);

    start_for_gemv_float_2u_unsigned_int_U0_U : component MLP_start_for_gemv_float_2u_unsigned_int_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gemv_float_2u_unsigned_int_U0_din,
        if_full_n => start_for_gemv_float_2u_unsigned_int_U0_full_n,
        if_write => gem2Stream_float_4u_U0_start_write,
        if_dout => start_for_gemv_float_2u_unsigned_int_U0_dout,
        if_empty_n => start_for_gemv_float_2u_unsigned_int_U0_empty_n,
        if_read => gemv_float_2u_unsigned_int_U0_ap_ready);

    start_for_writeStream2Vec_float_1u_U0_U : component MLP_start_for_writeStream2Vec_float_1u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_writeStream2Vec_float_1u_U0_din,
        if_full_n => start_for_writeStream2Vec_float_1u_U0_full_n,
        if_write => gemv_float_2u_unsigned_int_U0_start_write,
        if_dout => start_for_writeStream2Vec_float_1u_U0_dout,
        if_empty_n => start_for_writeStream2Vec_float_1u_U0_empty_n,
        if_read => writeStream2Vec_float_1u_U0_ap_ready);





    ap_sync_reg_gem2Stream_float_4u_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_gem2Stream_float_4u_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_gem2Stream_float_4u_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_gem2Stream_float_4u_U0_ap_ready <= ap_sync_gem2Stream_float_4u_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_outputLayer_float_4u_2u_entry115_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_outputLayer_float_4u_2u_entry115_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_outputLayer_float_4u_2u_entry115_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_outputLayer_float_4u_2u_entry115_U0_ap_ready <= ap_sync_outputLayer_float_4u_2u_entry115_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready <= ap_sync_readVec2Stream_float_1u_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_vec2GemStream_float_4u_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_vec2GemStream_float_4u_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_vec2GemStream_float_4u_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_vec2GemStream_float_4u_1_U0_ap_ready <= ap_sync_vec2GemStream_float_4u_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    gem2Stream_float_4u_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gem2Stream_float_4u_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                gem2Stream_float_4u_U0_ap_ready_count <= std_logic_vector(unsigned(gem2Stream_float_4u_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((gem2Stream_float_4u_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                gem2Stream_float_4u_U0_ap_ready_count <= std_logic_vector(unsigned(gem2Stream_float_4u_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    outputLayer_float_4u_2u_entry115_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((outputLayer_float_4u_2u_entry115_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                outputLayer_float_4u_2u_entry115_U0_ap_ready_count <= std_logic_vector(unsigned(outputLayer_float_4u_2u_entry115_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((outputLayer_float_4u_2u_entry115_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                outputLayer_float_4u_2u_entry115_U0_ap_ready_count <= std_logic_vector(unsigned(outputLayer_float_4u_2u_entry115_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    readVec2Stream_float_1u_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (readVec2Stream_float_1u_U0_ap_ready = ap_const_logic_0))) then 
                readVec2Stream_float_1u_U0_ap_ready_count <= std_logic_vector(unsigned(readVec2Stream_float_1u_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (readVec2Stream_float_1u_U0_ap_ready = ap_const_logic_1))) then 
                readVec2Stream_float_1u_U0_ap_ready_count <= std_logic_vector(unsigned(readVec2Stream_float_1u_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    vec2GemStream_float_4u_1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (vec2GemStream_float_4u_1_U0_ap_ready = ap_const_logic_0))) then 
                vec2GemStream_float_4u_1_U0_ap_ready_count <= std_logic_vector(unsigned(vec2GemStream_float_4u_1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (vec2GemStream_float_4u_1_U0_ap_ready = ap_const_logic_1))) then 
                vec2GemStream_float_4u_1_U0_ap_ready_count <= std_logic_vector(unsigned(vec2GemStream_float_4u_1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= writeStream2Vec_float_1u_U0_ap_done;
    ap_idle <= (writeStream2Vec_float_1u_U0_ap_idle and vec2GemStream_float_4u_1_U0_ap_idle and readVec2Stream_float_1u_U0_ap_idle and outputLayer_float_4u_2u_entry115_U0_ap_idle and gemv_float_2u_unsigned_int_U0_ap_idle and gem2Stream_float_4u_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= writeStream2Vec_float_1u_U0_ap_done;
    ap_sync_gem2Stream_float_4u_U0_ap_ready <= (gem2Stream_float_4u_U0_ap_ready or ap_sync_reg_gem2Stream_float_4u_U0_ap_ready);
    ap_sync_outputLayer_float_4u_2u_entry115_U0_ap_ready <= (outputLayer_float_4u_2u_entry115_U0_ap_ready or ap_sync_reg_outputLayer_float_4u_2u_entry115_U0_ap_ready);
    ap_sync_readVec2Stream_float_1u_U0_ap_ready <= (readVec2Stream_float_1u_U0_ap_ready or ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready);
    ap_sync_ready <= (ap_sync_vec2GemStream_float_4u_1_U0_ap_ready and ap_sync_readVec2Stream_float_1u_U0_ap_ready and ap_sync_outputLayer_float_4u_2u_entry115_U0_ap_ready and ap_sync_gem2Stream_float_4u_U0_ap_ready);
    ap_sync_vec2GemStream_float_4u_1_U0_ap_ready <= (vec2GemStream_float_4u_1_U0_ap_ready or ap_sync_reg_vec2GemStream_float_4u_1_U0_ap_ready);
    gem2Stream_float_4u_U0_ap_continue <= ap_const_logic_1;
    gem2Stream_float_4u_U0_ap_start <= ((ap_sync_reg_gem2Stream_float_4u_U0_ap_ready xor ap_const_logic_1) and ap_start);
    gemv_float_2u_unsigned_int_U0_ap_continue <= ap_const_logic_1;
    gemv_float_2u_unsigned_int_U0_ap_start <= start_for_gemv_float_2u_unsigned_int_U0_empty_n;
    outputLayer_float_4u_2u_entry115_U0_ap_continue <= ap_const_logic_1;
    outputLayer_float_4u_2u_entry115_U0_ap_start <= ((ap_sync_reg_outputLayer_float_4u_2u_entry115_U0_ap_ready xor ap_const_logic_1) and ap_start);
    outputLayer_float_4u_2u_entry115_U0_start_full_n <= ap_const_logic_1;
    outputLayer_float_4u_2u_entry115_U0_start_write <= ap_const_logic_0;
    p_bias_address0 <= readVec2Stream_float_1u_U0_p_in_address0;
    p_bias_address1 <= ap_const_lv9_0;
    p_bias_ce0 <= readVec2Stream_float_1u_U0_p_in_ce0;
    p_bias_ce1 <= ap_const_logic_0;
    p_bias_d0 <= ap_const_lv32_0;
    p_bias_d1 <= ap_const_lv32_0;
    p_bias_we0 <= ap_const_logic_0;
    p_bias_we1 <= ap_const_logic_0;
    p_input_address0 <= vec2GemStream_float_4u_1_U0_p_in_address0;
    p_input_address1 <= vec2GemStream_float_4u_1_U0_p_in_address1;
    p_input_ce0 <= vec2GemStream_float_4u_1_U0_p_in_ce0;
    p_input_ce1 <= vec2GemStream_float_4u_1_U0_p_in_ce1;
    p_input_d0 <= ap_const_lv32_0;
    p_input_d1 <= ap_const_lv32_0;
    p_input_we0 <= ap_const_logic_0;
    p_input_we1 <= ap_const_logic_0;
    p_output_address0 <= writeStream2Vec_float_1u_U0_p_out_address0;
    p_output_address1 <= ap_const_lv6_0;
    p_output_ce0 <= writeStream2Vec_float_1u_U0_p_out_ce0;
    p_output_ce1 <= ap_const_logic_0;
    p_output_d0 <= writeStream2Vec_float_1u_U0_p_out_d0;
    p_output_d1 <= ap_const_lv32_0;
    p_output_we0 <= writeStream2Vec_float_1u_U0_p_out_we0;
    p_output_we1 <= ap_const_logic_0;
    p_weights_address0 <= gem2Stream_float_4u_U0_p_in_address0;
    p_weights_address1 <= gem2Stream_float_4u_U0_p_in_address1;
    p_weights_ce0 <= gem2Stream_float_4u_U0_p_in_ce0;
    p_weights_ce1 <= gem2Stream_float_4u_U0_p_in_ce1;
    p_weights_d0 <= ap_const_lv32_0;
    p_weights_d1 <= ap_const_lv32_0;
    p_weights_we0 <= ap_const_logic_0;
    p_weights_we1 <= ap_const_logic_0;
    readVec2Stream_float_1u_U0_ap_continue <= ap_const_logic_1;
    readVec2Stream_float_1u_U0_ap_start <= ((ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready xor ap_const_logic_1) and ap_start);
    readVec2Stream_float_1u_U0_start_full_n <= ap_const_logic_1;
    readVec2Stream_float_1u_U0_start_write <= ap_const_logic_0;
    start_for_gemv_float_2u_unsigned_int_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_writeStream2Vec_float_1u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    vec2GemStream_float_4u_1_U0_ap_continue <= ap_const_logic_1;
    vec2GemStream_float_4u_1_U0_ap_start <= ((ap_sync_reg_vec2GemStream_float_4u_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    vec2GemStream_float_4u_1_U0_start_full_n <= ap_const_logic_1;
    vec2GemStream_float_4u_1_U0_start_write <= ap_const_logic_0;
    writeStream2Vec_float_1u_U0_ap_continue <= ap_continue;
    writeStream2Vec_float_1u_U0_ap_start <= start_for_writeStream2Vec_float_1u_U0_empty_n;
    writeStream2Vec_float_1u_U0_start_full_n <= ap_const_logic_1;
    writeStream2Vec_float_1u_U0_start_write <= ap_const_logic_0;
end behav;
