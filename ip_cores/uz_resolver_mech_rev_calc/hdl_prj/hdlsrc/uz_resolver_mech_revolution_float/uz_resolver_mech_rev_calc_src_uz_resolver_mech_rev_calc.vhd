-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_resolver_mech_revolution_float\uz_resolver_mech_rev_calc_src_uz_resolver_mech_rev_calc.vhd
-- Created: 2023-01-23 17:21:53
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- position_mech_raw             ce_out        1e-08
-- position_mech_2pi             ce_out        1e-08
-- position_el_2pi               ce_out        1e-08
-- omega_mech                    ce_out        1e-08
-- rpm_mech                      ce_out        1e-08
-- cnt_AXI                       ce_out        1e-08
-- done                          ce_out        1e-08
-- position_mech_2pi_AXI         ce_out        1e-08
-- position_el_2pi_AXI           ce_out        1e-08
-- omega_mech_AXI                ce_out        1e-08
-- rpm_mech_AXI                  ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_resolver_mech_rev_calc_src_uz_resolver_mech_rev_calc
-- Source Path: uz_resolver_mech_revolution_float/uz_resolver_mech_rev_calc
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_resolver_mech_rev_calc_src_uz_resolver_mech_rev_calc_pkg.ALL;

ENTITY uz_resolver_mech_rev_calc_src_uz_resolver_mech_rev_calc IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        position_raw                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        resolver_polepairs_AXI            :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        cnt_reset_AXI                     :   IN    std_logic;
        position_intmax_AXI               :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        machine_polepairs_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        velocity_raw                      :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        bitToRPS_Factor_AXI               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        theta_el_offset_AXI               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        trigger                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        position_mech_raw                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        position_mech_2pi                 :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
        position_el_2pi                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
        omega_mech                        :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        rpm_mech                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        cnt_AXI                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        done                              :   OUT   std_logic;
        position_mech_2pi_AXI             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
        position_el_2pi_AXI               :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
        omega_mech_AXI                    :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        rpm_mech_AXI                      :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
        );
END uz_resolver_mech_rev_calc_src_uz_resolver_mech_rev_calc;


ARCHITECTURE rtl OF uz_resolver_mech_rev_calc_src_uz_resolver_mech_rev_calc IS

  -- Component Declarations
  COMPONENT uz_resolver_mech_rev_calc_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_revolution_counter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          position_raw                    :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          resolver_polepairs              :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          cnt_reset                       :   IN    std_logic;
          cnt_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- int32
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_convert_fix_16_En0_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_convert_sfix_32_En0_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_div_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_convert_single_to_fix_16_En0
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_mod_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_27_En20
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En20
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_convert_sfix_16_En0_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_24_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_resolver_mech_rev_calc_src_Detect_Rise_Positive
    USE ENTITY work.uz_resolver_mech_rev_calc_src_Detect_Rise_Positive(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_revolution_counter
    USE ENTITY work.uz_resolver_mech_rev_calc_src_revolution_counter(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_convert_fix_16_En0_to_single
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_convert_fix_16_En0_to_single(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_convert_sfix_32_En0_to_single
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_convert_sfix_32_En0_to_single(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_add_single
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_add_single(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_mul_single
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_mul_single(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_div_single
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_div_single(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_convert_single_to_fix_16_En0
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_convert_single_to_fix_16_En0(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_mod_single
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_mod_single(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_27_En20
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_27_En20(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_convert_sfix_16_En0_to_single
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_convert_sfix_16_En0_to_single(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_24_En11
    USE ENTITY work.uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_24_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL position_raw_unsigned            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay10_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL position_raw_1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay4_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay5_ctrl_const_out            : std_logic;
  SIGNAL Delay5_ctrl_delay_out            : std_logic;
  SIGNAL Delay5_Initial_Val_out           : signed(31 DOWNTO 0);  -- int32
  SIGNAL resolver_polepairs_AXI_signed    : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay11_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL resolver_polepairs               : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay5_out                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay5_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL cnt_out                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL cnt_out_signed                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL Constant2_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Relational_Operator5_relop1      : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 35);  -- ufix1 [36]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 35);  -- ufix1 [36]
  SIGNAL Relational_Operator5_out1        : std_logic;
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg                      : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL reduced_reg_next                 : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Data_Type_Conversion2_out1_1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_1                    : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL reduced_reg_next_1               : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL Data_Type_Conversion2_out1_2     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_2                    : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL reduced_reg_next_2               : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL Detect_Rise_Positive_out1_1      : std_logic;
  SIGNAL Delay12_ctrl_const_out           : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL Delay12_ctrl_delay_out           : std_logic;
  SIGNAL Delay12_Initial_Val_out          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL position_intmax_AXI_signed       : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay13_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Data_Type_Conversion_out1        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch4_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_out                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch3_reg                  : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL delayMatch3_reg_next             : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL Switch4_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add5_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch5_reg                  : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL delayMatch5_reg_next             : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL Add_out1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch3_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_3                    : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL reduced_reg_next_3               : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_4                    : vector_of_std_logic_vector32(0 TO 13);  -- ufix32 [14]
  SIGNAL reduced_reg_next_4               : vector_of_std_logic_vector32(0 TO 13);  -- ufix32 [14]
  SIGNAL Data_Type_Conversion1_out1_2     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Data_Type_Conversion5_out1_unsigned : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL delayMatch17_reg                 : vector_of_unsigned16(0 TO 53);  -- ufix16 [54]
  SIGNAL delayMatch17_reg_next            : vector_of_unsigned16(0 TO 53);  -- ufix16 [54]
  SIGNAL Data_Type_Conversion5_out1_1     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide2_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch8_reg                  : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL delayMatch8_reg_next             : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL Divide2_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay27_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL velocity_raw_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL velocity_raw_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_5                    : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL reduced_reg_next_5               : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL velocity_raw_3                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_6                    : vector_of_std_logic_vector32(0 TO 69);  -- ufix32 [70]
  SIGNAL reduced_reg_next_6               : vector_of_std_logic_vector32(0 TO 69);  -- ufix32 [70]
  SIGNAL velocity_raw_4                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mod1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Data_Type_Conversion6_out1_signed : signed(26 DOWNTO 0);  -- sfix27_En20
  SIGNAL reduced_reg_7                    : vector_of_signed27(0 TO 8);  -- sfix27 [9]
  SIGNAL reduced_reg_next_7               : vector_of_signed27(0 TO 8);  -- sfix27_En20 [9]
  SIGNAL Data_Type_Conversion6_out1_1     : signed(26 DOWNTO 0);  -- sfix27_En20
  SIGNAL machine_polepairs_AXI_signed     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay15_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch5_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay16_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch11_reg                 : vector_of_std_logic_vector32(0 TO 69);  -- ufix32 [70]
  SIGNAL delayMatch11_reg_next            : vector_of_std_logic_vector32(0 TO 69);  -- ufix32 [70]
  SIGNAL Switch5_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product7_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch13_reg                 : vector_of_std_logic_vector32(0 TO 69);  -- ufix32 [70]
  SIGNAL delayMatch13_reg_next            : vector_of_std_logic_vector32(0 TO 69);  -- ufix32 [70]
  SIGNAL Product7_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mod_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Data_Type_Conversion8_out1_signed : signed(26 DOWNTO 0);  -- sfix27_En20
  SIGNAL Data_Type_Conversion8_out1_1     : signed(26 DOWNTO 0);  -- sfix27_En20
  SIGNAL velocity_raw_signed              : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay17_out1                     : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL velocity_raw_5                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay18_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay19_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL velocity_raw_6                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL velocity_raw_7                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_8                    : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL reduced_reg_next_8               : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL velocity_raw_8                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL RPStoRPM                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product5_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL RPM                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rpmToomega                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product6_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion11_out1      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion11_out1_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL reduced_reg_9                    : vector_of_signed24(0 TO 59);  -- sfix24 [60]
  SIGNAL reduced_reg_next_9               : vector_of_signed24(0 TO 59);  -- sfix24_En11 [60]
  SIGNAL Data_Type_Conversion11_out1_1    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL RPM_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion12_out1_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL reduced_reg_10                   : vector_of_signed24(0 TO 67);  -- sfix24 [68]
  SIGNAL reduced_reg_next_10              : vector_of_signed24(0 TO 67);  -- sfix24_En11 [68]
  SIGNAL Data_Type_Conversion12_out1_1    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL delayMatch21_reg                 : vector_of_signed32(0 TO 127);  -- sfix32 [128]
  SIGNAL delayMatch21_reg_next            : vector_of_signed32(0 TO 127);  -- sfix32 [128]
  SIGNAL Delay6_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL reduced_reg_11                   : std_logic_vector(0 TO 121);  -- ufix1 [122]
  SIGNAL reduced_reg_next_11              : std_logic_vector(0 TO 121);  -- ufix1 [122]
  SIGNAL Detect_Rise_Positive_out1_2      : std_logic;

BEGIN
  u_Detect_Rise_Positive : uz_resolver_mech_rev_calc_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay1_out1,
              Y => Detect_Rise_Positive_out1
              );

  u_revolution_counter : uz_resolver_mech_rev_calc_src_revolution_counter
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              position_raw => std_logic_vector(position_raw_1),  -- uint16
              resolver_polepairs => std_logic_vector(resolver_polepairs),  -- int32
              cnt_reset => Switch_out1,
              cnt_out => cnt_out  -- int32
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_fix_16_En0_to_single : uz_resolver_mech_rev_calc_src_nfp_convert_fix_16_En0_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(position_raw_1),  -- uint16
              nfp_out => Data_Type_Conversion2_out1  -- single
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_sfix_32_En0_to_single : uz_resolver_mech_rev_calc_src_nfp_convert_sfix_32_En0_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay13_out1),  -- int32
              nfp_out => Data_Type_Conversion_out1  -- single
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_sfix_32_En0_to_single_1 : uz_resolver_mech_rev_calc_src_nfp_convert_sfix_32_En0_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => cnt_out,  -- int32
              nfp_out => Data_Type_Conversion3_out1  -- single
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_sfix_32_En0_to_single_2 : uz_resolver_mech_rev_calc_src_nfp_convert_sfix_32_En0_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(resolver_polepairs),  -- int32
              nfp_out => Data_Type_Conversion1_out1  -- single
              );

  u_nfp_add_comp : uz_resolver_mech_rev_calc_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion3_out1,  -- single
              nfp_in2 => Data_Type_Conversion1_out1,  -- single
              nfp_out => Add5_out1  -- single
              );

  u_nfp_mul_comp : uz_resolver_mech_rev_calc_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch4_out1_1,  -- single
              nfp_in2 => Add5_out1,  -- single
              nfp_out => Product1_out1  -- single
              );

  u_nfp_add_comp_1 : uz_resolver_mech_rev_calc_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion2_out1_2,  -- single
              nfp_in2 => Product1_out1,  -- single
              nfp_out => Add1_out1  -- single
              );

  u_nfp_mul_comp_1 : uz_resolver_mech_rev_calc_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion3_out1,  -- single
              nfp_in2 => Switch4_out1,  -- single
              nfp_out => Product_out1  -- single
              );

  u_nfp_add_comp_2 : uz_resolver_mech_rev_calc_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion2_out1_1,  -- single
              nfp_in2 => Product_out1,  -- single
              nfp_out => Add_out1  -- single
              );

  u_nfp_div_comp : uz_resolver_mech_rev_calc_src_nfp_div_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch3_out1,  -- single
              nfp_in2 => Data_Type_Conversion1_out1_2,  -- single
              nfp_out => Divide_out1  -- single
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_single_to_fix_16_En0 : uz_resolver_mech_rev_calc_src_nfp_convert_single_to_fix_16_En0
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Divide_out1,  -- single
              nfp_out => Data_Type_Conversion5_out1  -- uint16
              );

  u_nfp_div_comp_1 : uz_resolver_mech_rev_calc_src_nfp_div_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Constant1_out1,  -- single
              nfp_in2 => Switch4_out1,  -- single
              nfp_out => Divide2_out1  -- single
              );

  u_nfp_mul_comp_2 : uz_resolver_mech_rev_calc_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Divide_out1,  -- single
              nfp_in2 => Divide2_out1_1,  -- single
              nfp_out => Product2_out1  -- single
              );

  u_nfp_add_comp_3 : uz_resolver_mech_rev_calc_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product2_out1,  -- single
              nfp_in2 => velocity_raw_4,  -- single
              nfp_out => Add3_out1  -- single
              );

  u_nfp_mod_comp : uz_resolver_mech_rev_calc_src_nfp_mod_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add3_out1,  -- single
              nfp_in2 => Constant3_out1,  -- single
              nfp_out => Mod1_out1  -- single
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_single_to_sfix_27_En20 : uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_27_En20
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Mod1_out1,  -- single
              nfp_out => Data_Type_Conversion6_out1  -- sfix27_En20
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_sfix_32_En0_to_single_3 : uz_resolver_mech_rev_calc_src_nfp_convert_sfix_32_En0_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay15_out1),  -- int32
              nfp_out => Data_Type_Conversion7_out1  -- single
              );

  u_nfp_mul_comp_3 : uz_resolver_mech_rev_calc_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product2_out1,  -- single
              nfp_in2 => Switch5_out1_1,  -- single
              nfp_out => Product3_out1  -- single
              );

  u_nfp_mul_comp_4 : uz_resolver_mech_rev_calc_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => velocity_raw_3,  -- single
              nfp_in2 => Switch5_out1,  -- single
              nfp_out => Product7_out1  -- single
              );

  u_nfp_add_comp_4 : uz_resolver_mech_rev_calc_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product3_out1,  -- single
              nfp_in2 => Product7_out1_1,  -- single
              nfp_out => Add2_out1  -- single
              );

  u_nfp_mod_comp_1 : uz_resolver_mech_rev_calc_src_nfp_mod_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add2_out1,  -- single
              nfp_in2 => Constant3_out1,  -- single
              nfp_out => Mod_out1  -- single
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_single_to_sfix_27_En20_1 : uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_27_En20
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Mod_out1,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- sfix27_En20
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_sfix_16_En0_to_single : uz_resolver_mech_rev_calc_src_nfp_convert_sfix_16_En0_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay17_out1),  -- int16
              nfp_out => Data_Type_Conversion9_out1  -- single
              );

  u_nfp_mul_comp_5 : uz_resolver_mech_rev_calc_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => velocity_raw_5,  -- single
              nfp_in2 => velocity_raw_8,  -- single
              nfp_out => Product4_out1  -- single
              );

  u_nfp_mul_comp_6 : uz_resolver_mech_rev_calc_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product4_out1,  -- single
              nfp_in2 => RPStoRPM,  -- single
              nfp_out => Product5_out1  -- single
              );

  u_nfp_div_comp_2 : uz_resolver_mech_rev_calc_src_nfp_div_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product5_out1,  -- single
              nfp_in2 => Data_Type_Conversion1_out1_1,  -- single
              nfp_out => RPM  -- single
              );

  u_nfp_mul_comp_7 : uz_resolver_mech_rev_calc_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => RPM,  -- single
              nfp_in2 => rpmToomega,  -- single
              nfp_out => Product6_out1  -- single
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_single_to_sfix_24_En11 : uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Product6_out1,  -- single
              nfp_out => Data_Type_Conversion11_out1  -- sfix24_En11
              );

  u_uz_resolver_mech_revolution_float_uz_resolver_mech_rev_calc_nfp_convert_single_to_sfix_24_En11_1 : uz_resolver_mech_rev_calc_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => RPM_1,  -- single
              nfp_out => Data_Type_Conversion12_out1  -- sfix24_En11
              );

  enb <= clk_enable;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= trigger;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  position_raw_unsigned <= unsigned(position_raw);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay10_out1 <= position_raw_unsigned;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay4_out1 <= position_raw_1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  position_raw_1 <= Delay4_out1 WHEN Detect_Rise_Positive_out1 = '0' ELSE
      Delay10_out1;

  Delay5_ctrl_const_out <= '1';

  Delay5_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        Delay5_ctrl_delay_out <= Delay5_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay5_ctrl_delay_process;


  Delay5_Initial_Val_out <= to_signed(3, 32);

  resolver_polepairs_AXI_signed <= signed(resolver_polepairs_AXI);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay11_out1 <= resolver_polepairs_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay5_out <= resolver_polepairs;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Delay5_out1 <= Delay5_Initial_Val_out WHEN Delay5_ctrl_delay_out = '0' ELSE
      Delay5_out;

  
  resolver_polepairs <= Delay5_out1 WHEN Detect_Rise_Positive_out1 = '0' ELSE
      Delay11_out1;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1 <= cnt_reset_AXI;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_out1 <= Delay3_out1 WHEN Detect_Rise_Positive_out1 = '0' ELSE
      Delay9_out1;

  cnt_out_signed <= signed(cnt_out);

  Constant2_out1 <= to_signed(16#0000#, 16);

  
  Relational_Operator5_relop1 <= '1' WHEN cnt_out_signed >= resize(Constant2_out1, 32) ELSE
      '0';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= '0';
        delayMatch6_reg(1) <= '0';
        delayMatch6_reg(2) <= '0';
        delayMatch6_reg(3) <= '0';
        delayMatch6_reg(4) <= '0';
        delayMatch6_reg(5) <= '0';
        delayMatch6_reg(6) <= '0';
        delayMatch6_reg(7) <= '0';
        delayMatch6_reg(8) <= '0';
        delayMatch6_reg(9) <= '0';
        delayMatch6_reg(10) <= '0';
        delayMatch6_reg(11) <= '0';
        delayMatch6_reg(12) <= '0';
        delayMatch6_reg(13) <= '0';
        delayMatch6_reg(14) <= '0';
        delayMatch6_reg(15) <= '0';
        delayMatch6_reg(16) <= '0';
        delayMatch6_reg(17) <= '0';
        delayMatch6_reg(18) <= '0';
        delayMatch6_reg(19) <= '0';
        delayMatch6_reg(20) <= '0';
        delayMatch6_reg(21) <= '0';
        delayMatch6_reg(22) <= '0';
        delayMatch6_reg(23) <= '0';
        delayMatch6_reg(24) <= '0';
        delayMatch6_reg(25) <= '0';
        delayMatch6_reg(26) <= '0';
        delayMatch6_reg(27) <= '0';
        delayMatch6_reg(28) <= '0';
        delayMatch6_reg(29) <= '0';
        delayMatch6_reg(30) <= '0';
        delayMatch6_reg(31) <= '0';
        delayMatch6_reg(32) <= '0';
        delayMatch6_reg(33) <= '0';
        delayMatch6_reg(34) <= '0';
        delayMatch6_reg(35) <= '0';
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
        delayMatch6_reg(6) <= delayMatch6_reg_next(6);
        delayMatch6_reg(7) <= delayMatch6_reg_next(7);
        delayMatch6_reg(8) <= delayMatch6_reg_next(8);
        delayMatch6_reg(9) <= delayMatch6_reg_next(9);
        delayMatch6_reg(10) <= delayMatch6_reg_next(10);
        delayMatch6_reg(11) <= delayMatch6_reg_next(11);
        delayMatch6_reg(12) <= delayMatch6_reg_next(12);
        delayMatch6_reg(13) <= delayMatch6_reg_next(13);
        delayMatch6_reg(14) <= delayMatch6_reg_next(14);
        delayMatch6_reg(15) <= delayMatch6_reg_next(15);
        delayMatch6_reg(16) <= delayMatch6_reg_next(16);
        delayMatch6_reg(17) <= delayMatch6_reg_next(17);
        delayMatch6_reg(18) <= delayMatch6_reg_next(18);
        delayMatch6_reg(19) <= delayMatch6_reg_next(19);
        delayMatch6_reg(20) <= delayMatch6_reg_next(20);
        delayMatch6_reg(21) <= delayMatch6_reg_next(21);
        delayMatch6_reg(22) <= delayMatch6_reg_next(22);
        delayMatch6_reg(23) <= delayMatch6_reg_next(23);
        delayMatch6_reg(24) <= delayMatch6_reg_next(24);
        delayMatch6_reg(25) <= delayMatch6_reg_next(25);
        delayMatch6_reg(26) <= delayMatch6_reg_next(26);
        delayMatch6_reg(27) <= delayMatch6_reg_next(27);
        delayMatch6_reg(28) <= delayMatch6_reg_next(28);
        delayMatch6_reg(29) <= delayMatch6_reg_next(29);
        delayMatch6_reg(30) <= delayMatch6_reg_next(30);
        delayMatch6_reg(31) <= delayMatch6_reg_next(31);
        delayMatch6_reg(32) <= delayMatch6_reg_next(32);
        delayMatch6_reg(33) <= delayMatch6_reg_next(33);
        delayMatch6_reg(34) <= delayMatch6_reg_next(34);
        delayMatch6_reg(35) <= delayMatch6_reg_next(35);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  Relational_Operator5_out1 <= delayMatch6_reg(35);
  delayMatch6_reg_next(0) <= Relational_Operator5_relop1;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);
  delayMatch6_reg_next(5) <= delayMatch6_reg(4);
  delayMatch6_reg_next(6) <= delayMatch6_reg(5);
  delayMatch6_reg_next(7) <= delayMatch6_reg(6);
  delayMatch6_reg_next(8) <= delayMatch6_reg(7);
  delayMatch6_reg_next(9) <= delayMatch6_reg(8);
  delayMatch6_reg_next(10) <= delayMatch6_reg(9);
  delayMatch6_reg_next(11) <= delayMatch6_reg(10);
  delayMatch6_reg_next(12) <= delayMatch6_reg(11);
  delayMatch6_reg_next(13) <= delayMatch6_reg(12);
  delayMatch6_reg_next(14) <= delayMatch6_reg(13);
  delayMatch6_reg_next(15) <= delayMatch6_reg(14);
  delayMatch6_reg_next(16) <= delayMatch6_reg(15);
  delayMatch6_reg_next(17) <= delayMatch6_reg(16);
  delayMatch6_reg_next(18) <= delayMatch6_reg(17);
  delayMatch6_reg_next(19) <= delayMatch6_reg(18);
  delayMatch6_reg_next(20) <= delayMatch6_reg(19);
  delayMatch6_reg_next(21) <= delayMatch6_reg(20);
  delayMatch6_reg_next(22) <= delayMatch6_reg(21);
  delayMatch6_reg_next(23) <= delayMatch6_reg(22);
  delayMatch6_reg_next(24) <= delayMatch6_reg(23);
  delayMatch6_reg_next(25) <= delayMatch6_reg(24);
  delayMatch6_reg_next(26) <= delayMatch6_reg(25);
  delayMatch6_reg_next(27) <= delayMatch6_reg(26);
  delayMatch6_reg_next(28) <= delayMatch6_reg(27);
  delayMatch6_reg_next(29) <= delayMatch6_reg(28);
  delayMatch6_reg_next(30) <= delayMatch6_reg(29);
  delayMatch6_reg_next(31) <= delayMatch6_reg(30);
  delayMatch6_reg_next(32) <= delayMatch6_reg(31);
  delayMatch6_reg_next(33) <= delayMatch6_reg(32);
  delayMatch6_reg_next(34) <= delayMatch6_reg(33);
  delayMatch6_reg_next(35) <= delayMatch6_reg(34);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= X"00000000";
        reduced_reg(1) <= X"00000000";
        reduced_reg(2) <= X"00000000";
        reduced_reg(3) <= X"00000000";
        reduced_reg(4) <= X"00000000";
        reduced_reg(5) <= X"00000000";
        reduced_reg(6) <= X"00000000";
        reduced_reg(7) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
        reduced_reg(6) <= reduced_reg_next(6);
        reduced_reg(7) <= reduced_reg_next(7);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Data_Type_Conversion2_out1_1 <= reduced_reg(7);
  reduced_reg_next(0) <= Data_Type_Conversion2_out1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);
  reduced_reg_next(6) <= reduced_reg(5);
  reduced_reg_next(7) <= reduced_reg(6);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= X"00000000";
        reduced_reg_1(1) <= X"00000000";
        reduced_reg_1(2) <= X"00000000";
        reduced_reg_1(3) <= X"00000000";
        reduced_reg_1(4) <= X"00000000";
        reduced_reg_1(5) <= X"00000000";
        reduced_reg_1(6) <= X"00000000";
        reduced_reg_1(7) <= X"00000000";
        reduced_reg_1(8) <= X"00000000";
        reduced_reg_1(9) <= X"00000000";
        reduced_reg_1(10) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
        reduced_reg_1(4) <= reduced_reg_next_1(4);
        reduced_reg_1(5) <= reduced_reg_next_1(5);
        reduced_reg_1(6) <= reduced_reg_next_1(6);
        reduced_reg_1(7) <= reduced_reg_next_1(7);
        reduced_reg_1(8) <= reduced_reg_next_1(8);
        reduced_reg_1(9) <= reduced_reg_next_1(9);
        reduced_reg_1(10) <= reduced_reg_next_1(10);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Data_Type_Conversion2_out1_2 <= reduced_reg_1(10);
  reduced_reg_next_1(0) <= Data_Type_Conversion2_out1_1;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);
  reduced_reg_next_1(4) <= reduced_reg_1(3);
  reduced_reg_next_1(5) <= reduced_reg_1(4);
  reduced_reg_next_1(6) <= reduced_reg_1(5);
  reduced_reg_next_1(7) <= reduced_reg_1(6);
  reduced_reg_next_1(8) <= reduced_reg_1(7);
  reduced_reg_next_1(9) <= reduced_reg_1(8);
  reduced_reg_next_1(10) <= reduced_reg_1(9);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2(0) <= '0';
        reduced_reg_2(1) <= '0';
        reduced_reg_2(2) <= '0';
        reduced_reg_2(3) <= '0';
        reduced_reg_2(4) <= '0';
        reduced_reg_2(5) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= reduced_reg_next_2(0);
        reduced_reg_2(1) <= reduced_reg_next_2(1);
        reduced_reg_2(2) <= reduced_reg_next_2(2);
        reduced_reg_2(3) <= reduced_reg_next_2(3);
        reduced_reg_2(4) <= reduced_reg_next_2(4);
        reduced_reg_2(5) <= reduced_reg_next_2(5);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  Detect_Rise_Positive_out1_1 <= reduced_reg_2(5);
  reduced_reg_next_2(0) <= Detect_Rise_Positive_out1;
  reduced_reg_next_2(1) <= reduced_reg_2(0);
  reduced_reg_next_2(2) <= reduced_reg_2(1);
  reduced_reg_next_2(3) <= reduced_reg_2(2);
  reduced_reg_next_2(4) <= reduced_reg_2(3);
  reduced_reg_next_2(5) <= reduced_reg_2(4);

  Delay12_ctrl_const_out <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg(0) <= '0';
        delayMatch_reg(1) <= '0';
        delayMatch_reg(2) <= '0';
        delayMatch_reg(3) <= '0';
        delayMatch_reg(4) <= '0';
        delayMatch_reg(5) <= '0';
        delayMatch_reg(6) <= '0';
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
        delayMatch_reg(6) <= delayMatch_reg_next(6);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Delay12_ctrl_delay_out <= delayMatch_reg(6);
  delayMatch_reg_next(0) <= Delay12_ctrl_const_out;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);
  delayMatch_reg_next(6) <= delayMatch_reg(5);

  Delay12_Initial_Val_out <= X"477fff00";

  position_intmax_AXI_signed <= signed(position_intmax_AXI);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay13_out1 <= position_intmax_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out <= X"00000000";
      ELSIF enb = '1' THEN
        Delay12_out <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  Delay12_out1 <= Delay12_Initial_Val_out WHEN Delay12_ctrl_delay_out = '0' ELSE
      Delay12_out;

  
  Switch4_out1 <= Delay12_out1 WHEN Detect_Rise_Positive_out1_1 = '0' ELSE
      Data_Type_Conversion_out1;

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg(0) <= X"00000000";
        delayMatch3_reg(1) <= X"00000000";
        delayMatch3_reg(2) <= X"00000000";
        delayMatch3_reg(3) <= X"00000000";
        delayMatch3_reg(4) <= X"00000000";
        delayMatch3_reg(5) <= X"00000000";
        delayMatch3_reg(6) <= X"00000000";
        delayMatch3_reg(7) <= X"00000000";
        delayMatch3_reg(8) <= X"00000000";
        delayMatch3_reg(9) <= X"00000000";
        delayMatch3_reg(10) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
        delayMatch3_reg(3) <= delayMatch3_reg_next(3);
        delayMatch3_reg(4) <= delayMatch3_reg_next(4);
        delayMatch3_reg(5) <= delayMatch3_reg_next(5);
        delayMatch3_reg(6) <= delayMatch3_reg_next(6);
        delayMatch3_reg(7) <= delayMatch3_reg_next(7);
        delayMatch3_reg(8) <= delayMatch3_reg_next(8);
        delayMatch3_reg(9) <= delayMatch3_reg_next(9);
        delayMatch3_reg(10) <= delayMatch3_reg_next(10);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Switch4_out1_1 <= delayMatch3_reg(10);
  delayMatch3_reg_next(0) <= Switch4_out1;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);
  delayMatch3_reg_next(3) <= delayMatch3_reg(2);
  delayMatch3_reg_next(4) <= delayMatch3_reg(3);
  delayMatch3_reg_next(5) <= delayMatch3_reg(4);
  delayMatch3_reg_next(6) <= delayMatch3_reg(5);
  delayMatch3_reg_next(7) <= delayMatch3_reg(6);
  delayMatch3_reg_next(8) <= delayMatch3_reg(7);
  delayMatch3_reg_next(9) <= delayMatch3_reg(8);
  delayMatch3_reg_next(10) <= delayMatch3_reg(9);

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch5_reg(0) <= X"00000000";
        delayMatch5_reg(1) <= X"00000000";
        delayMatch5_reg(2) <= X"00000000";
        delayMatch5_reg(3) <= X"00000000";
        delayMatch5_reg(4) <= X"00000000";
        delayMatch5_reg(5) <= X"00000000";
        delayMatch5_reg(6) <= X"00000000";
        delayMatch5_reg(7) <= X"00000000";
        delayMatch5_reg(8) <= X"00000000";
        delayMatch5_reg(9) <= X"00000000";
        delayMatch5_reg(10) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= delayMatch5_reg_next(0);
        delayMatch5_reg(1) <= delayMatch5_reg_next(1);
        delayMatch5_reg(2) <= delayMatch5_reg_next(2);
        delayMatch5_reg(3) <= delayMatch5_reg_next(3);
        delayMatch5_reg(4) <= delayMatch5_reg_next(4);
        delayMatch5_reg(5) <= delayMatch5_reg_next(5);
        delayMatch5_reg(6) <= delayMatch5_reg_next(6);
        delayMatch5_reg(7) <= delayMatch5_reg_next(7);
        delayMatch5_reg(8) <= delayMatch5_reg_next(8);
        delayMatch5_reg(9) <= delayMatch5_reg_next(9);
        delayMatch5_reg(10) <= delayMatch5_reg_next(10);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  Add_out1_1 <= delayMatch5_reg(10);
  delayMatch5_reg_next(0) <= Add_out1;
  delayMatch5_reg_next(1) <= delayMatch5_reg(0);
  delayMatch5_reg_next(2) <= delayMatch5_reg(1);
  delayMatch5_reg_next(3) <= delayMatch5_reg(2);
  delayMatch5_reg_next(4) <= delayMatch5_reg(3);
  delayMatch5_reg_next(5) <= delayMatch5_reg(4);
  delayMatch5_reg_next(6) <= delayMatch5_reg(5);
  delayMatch5_reg_next(7) <= delayMatch5_reg(6);
  delayMatch5_reg_next(8) <= delayMatch5_reg(7);
  delayMatch5_reg_next(9) <= delayMatch5_reg(8);
  delayMatch5_reg_next(10) <= delayMatch5_reg(9);

  
  Switch3_out1 <= Add1_out1 WHEN Relational_Operator5_out1 = '0' ELSE
      Add_out1_1;

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_3(0) <= X"00000000";
        reduced_reg_3(1) <= X"00000000";
        reduced_reg_3(2) <= X"00000000";
        reduced_reg_3(3) <= X"00000000";
        reduced_reg_3(4) <= X"00000000";
        reduced_reg_3(5) <= X"00000000";
        reduced_reg_3(6) <= X"00000000";
        reduced_reg_3(7) <= X"00000000";
        reduced_reg_3(8) <= X"00000000";
        reduced_reg_3(9) <= X"00000000";
        reduced_reg_3(10) <= X"00000000";
        reduced_reg_3(11) <= X"00000000";
        reduced_reg_3(12) <= X"00000000";
        reduced_reg_3(13) <= X"00000000";
        reduced_reg_3(14) <= X"00000000";
        reduced_reg_3(15) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_3(0) <= reduced_reg_next_3(0);
        reduced_reg_3(1) <= reduced_reg_next_3(1);
        reduced_reg_3(2) <= reduced_reg_next_3(2);
        reduced_reg_3(3) <= reduced_reg_next_3(3);
        reduced_reg_3(4) <= reduced_reg_next_3(4);
        reduced_reg_3(5) <= reduced_reg_next_3(5);
        reduced_reg_3(6) <= reduced_reg_next_3(6);
        reduced_reg_3(7) <= reduced_reg_next_3(7);
        reduced_reg_3(8) <= reduced_reg_next_3(8);
        reduced_reg_3(9) <= reduced_reg_next_3(9);
        reduced_reg_3(10) <= reduced_reg_next_3(10);
        reduced_reg_3(11) <= reduced_reg_next_3(11);
        reduced_reg_3(12) <= reduced_reg_next_3(12);
        reduced_reg_3(13) <= reduced_reg_next_3(13);
        reduced_reg_3(14) <= reduced_reg_next_3(14);
        reduced_reg_3(15) <= reduced_reg_next_3(15);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  Data_Type_Conversion1_out1_1 <= reduced_reg_3(15);
  reduced_reg_next_3(0) <= Data_Type_Conversion1_out1;
  reduced_reg_next_3(1) <= reduced_reg_3(0);
  reduced_reg_next_3(2) <= reduced_reg_3(1);
  reduced_reg_next_3(3) <= reduced_reg_3(2);
  reduced_reg_next_3(4) <= reduced_reg_3(3);
  reduced_reg_next_3(5) <= reduced_reg_3(4);
  reduced_reg_next_3(6) <= reduced_reg_3(5);
  reduced_reg_next_3(7) <= reduced_reg_3(6);
  reduced_reg_next_3(8) <= reduced_reg_3(7);
  reduced_reg_next_3(9) <= reduced_reg_3(8);
  reduced_reg_next_3(10) <= reduced_reg_3(9);
  reduced_reg_next_3(11) <= reduced_reg_3(10);
  reduced_reg_next_3(12) <= reduced_reg_3(11);
  reduced_reg_next_3(13) <= reduced_reg_3(12);
  reduced_reg_next_3(14) <= reduced_reg_3(13);
  reduced_reg_next_3(15) <= reduced_reg_3(14);

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_4(0) <= X"00000000";
        reduced_reg_4(1) <= X"00000000";
        reduced_reg_4(2) <= X"00000000";
        reduced_reg_4(3) <= X"00000000";
        reduced_reg_4(4) <= X"00000000";
        reduced_reg_4(5) <= X"00000000";
        reduced_reg_4(6) <= X"00000000";
        reduced_reg_4(7) <= X"00000000";
        reduced_reg_4(8) <= X"00000000";
        reduced_reg_4(9) <= X"00000000";
        reduced_reg_4(10) <= X"00000000";
        reduced_reg_4(11) <= X"00000000";
        reduced_reg_4(12) <= X"00000000";
        reduced_reg_4(13) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_4(0) <= reduced_reg_next_4(0);
        reduced_reg_4(1) <= reduced_reg_next_4(1);
        reduced_reg_4(2) <= reduced_reg_next_4(2);
        reduced_reg_4(3) <= reduced_reg_next_4(3);
        reduced_reg_4(4) <= reduced_reg_next_4(4);
        reduced_reg_4(5) <= reduced_reg_next_4(5);
        reduced_reg_4(6) <= reduced_reg_next_4(6);
        reduced_reg_4(7) <= reduced_reg_next_4(7);
        reduced_reg_4(8) <= reduced_reg_next_4(8);
        reduced_reg_4(9) <= reduced_reg_next_4(9);
        reduced_reg_4(10) <= reduced_reg_next_4(10);
        reduced_reg_4(11) <= reduced_reg_next_4(11);
        reduced_reg_4(12) <= reduced_reg_next_4(12);
        reduced_reg_4(13) <= reduced_reg_next_4(13);
      END IF;
    END IF;
  END PROCESS reduced_4_process;

  Data_Type_Conversion1_out1_2 <= reduced_reg_4(13);
  reduced_reg_next_4(0) <= Data_Type_Conversion1_out1_1;
  reduced_reg_next_4(1) <= reduced_reg_4(0);
  reduced_reg_next_4(2) <= reduced_reg_4(1);
  reduced_reg_next_4(3) <= reduced_reg_4(2);
  reduced_reg_next_4(4) <= reduced_reg_4(3);
  reduced_reg_next_4(5) <= reduced_reg_4(4);
  reduced_reg_next_4(6) <= reduced_reg_4(5);
  reduced_reg_next_4(7) <= reduced_reg_4(6);
  reduced_reg_next_4(8) <= reduced_reg_4(7);
  reduced_reg_next_4(9) <= reduced_reg_4(8);
  reduced_reg_next_4(10) <= reduced_reg_4(9);
  reduced_reg_next_4(11) <= reduced_reg_4(10);
  reduced_reg_next_4(12) <= reduced_reg_4(11);
  reduced_reg_next_4(13) <= reduced_reg_4(12);

  Data_Type_Conversion5_out1_unsigned <= unsigned(Data_Type_Conversion5_out1);

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch17_reg(0) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(1) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(2) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(3) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(4) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(5) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(6) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(7) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(8) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(9) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(10) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(11) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(12) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(13) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(14) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(15) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(16) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(17) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(18) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(19) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(20) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(21) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(22) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(23) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(24) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(25) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(26) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(27) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(28) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(29) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(30) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(31) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(32) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(33) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(34) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(35) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(36) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(37) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(38) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(39) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(40) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(41) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(42) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(43) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(44) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(45) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(46) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(47) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(48) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(49) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(50) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(51) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(52) <= to_unsigned(16#0000#, 16);
        delayMatch17_reg(53) <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayMatch17_reg(0) <= delayMatch17_reg_next(0);
        delayMatch17_reg(1) <= delayMatch17_reg_next(1);
        delayMatch17_reg(2) <= delayMatch17_reg_next(2);
        delayMatch17_reg(3) <= delayMatch17_reg_next(3);
        delayMatch17_reg(4) <= delayMatch17_reg_next(4);
        delayMatch17_reg(5) <= delayMatch17_reg_next(5);
        delayMatch17_reg(6) <= delayMatch17_reg_next(6);
        delayMatch17_reg(7) <= delayMatch17_reg_next(7);
        delayMatch17_reg(8) <= delayMatch17_reg_next(8);
        delayMatch17_reg(9) <= delayMatch17_reg_next(9);
        delayMatch17_reg(10) <= delayMatch17_reg_next(10);
        delayMatch17_reg(11) <= delayMatch17_reg_next(11);
        delayMatch17_reg(12) <= delayMatch17_reg_next(12);
        delayMatch17_reg(13) <= delayMatch17_reg_next(13);
        delayMatch17_reg(14) <= delayMatch17_reg_next(14);
        delayMatch17_reg(15) <= delayMatch17_reg_next(15);
        delayMatch17_reg(16) <= delayMatch17_reg_next(16);
        delayMatch17_reg(17) <= delayMatch17_reg_next(17);
        delayMatch17_reg(18) <= delayMatch17_reg_next(18);
        delayMatch17_reg(19) <= delayMatch17_reg_next(19);
        delayMatch17_reg(20) <= delayMatch17_reg_next(20);
        delayMatch17_reg(21) <= delayMatch17_reg_next(21);
        delayMatch17_reg(22) <= delayMatch17_reg_next(22);
        delayMatch17_reg(23) <= delayMatch17_reg_next(23);
        delayMatch17_reg(24) <= delayMatch17_reg_next(24);
        delayMatch17_reg(25) <= delayMatch17_reg_next(25);
        delayMatch17_reg(26) <= delayMatch17_reg_next(26);
        delayMatch17_reg(27) <= delayMatch17_reg_next(27);
        delayMatch17_reg(28) <= delayMatch17_reg_next(28);
        delayMatch17_reg(29) <= delayMatch17_reg_next(29);
        delayMatch17_reg(30) <= delayMatch17_reg_next(30);
        delayMatch17_reg(31) <= delayMatch17_reg_next(31);
        delayMatch17_reg(32) <= delayMatch17_reg_next(32);
        delayMatch17_reg(33) <= delayMatch17_reg_next(33);
        delayMatch17_reg(34) <= delayMatch17_reg_next(34);
        delayMatch17_reg(35) <= delayMatch17_reg_next(35);
        delayMatch17_reg(36) <= delayMatch17_reg_next(36);
        delayMatch17_reg(37) <= delayMatch17_reg_next(37);
        delayMatch17_reg(38) <= delayMatch17_reg_next(38);
        delayMatch17_reg(39) <= delayMatch17_reg_next(39);
        delayMatch17_reg(40) <= delayMatch17_reg_next(40);
        delayMatch17_reg(41) <= delayMatch17_reg_next(41);
        delayMatch17_reg(42) <= delayMatch17_reg_next(42);
        delayMatch17_reg(43) <= delayMatch17_reg_next(43);
        delayMatch17_reg(44) <= delayMatch17_reg_next(44);
        delayMatch17_reg(45) <= delayMatch17_reg_next(45);
        delayMatch17_reg(46) <= delayMatch17_reg_next(46);
        delayMatch17_reg(47) <= delayMatch17_reg_next(47);
        delayMatch17_reg(48) <= delayMatch17_reg_next(48);
        delayMatch17_reg(49) <= delayMatch17_reg_next(49);
        delayMatch17_reg(50) <= delayMatch17_reg_next(50);
        delayMatch17_reg(51) <= delayMatch17_reg_next(51);
        delayMatch17_reg(52) <= delayMatch17_reg_next(52);
        delayMatch17_reg(53) <= delayMatch17_reg_next(53);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  Data_Type_Conversion5_out1_1 <= delayMatch17_reg(53);
  delayMatch17_reg_next(0) <= Data_Type_Conversion5_out1_unsigned;
  delayMatch17_reg_next(1) <= delayMatch17_reg(0);
  delayMatch17_reg_next(2) <= delayMatch17_reg(1);
  delayMatch17_reg_next(3) <= delayMatch17_reg(2);
  delayMatch17_reg_next(4) <= delayMatch17_reg(3);
  delayMatch17_reg_next(5) <= delayMatch17_reg(4);
  delayMatch17_reg_next(6) <= delayMatch17_reg(5);
  delayMatch17_reg_next(7) <= delayMatch17_reg(6);
  delayMatch17_reg_next(8) <= delayMatch17_reg(7);
  delayMatch17_reg_next(9) <= delayMatch17_reg(8);
  delayMatch17_reg_next(10) <= delayMatch17_reg(9);
  delayMatch17_reg_next(11) <= delayMatch17_reg(10);
  delayMatch17_reg_next(12) <= delayMatch17_reg(11);
  delayMatch17_reg_next(13) <= delayMatch17_reg(12);
  delayMatch17_reg_next(14) <= delayMatch17_reg(13);
  delayMatch17_reg_next(15) <= delayMatch17_reg(14);
  delayMatch17_reg_next(16) <= delayMatch17_reg(15);
  delayMatch17_reg_next(17) <= delayMatch17_reg(16);
  delayMatch17_reg_next(18) <= delayMatch17_reg(17);
  delayMatch17_reg_next(19) <= delayMatch17_reg(18);
  delayMatch17_reg_next(20) <= delayMatch17_reg(19);
  delayMatch17_reg_next(21) <= delayMatch17_reg(20);
  delayMatch17_reg_next(22) <= delayMatch17_reg(21);
  delayMatch17_reg_next(23) <= delayMatch17_reg(22);
  delayMatch17_reg_next(24) <= delayMatch17_reg(23);
  delayMatch17_reg_next(25) <= delayMatch17_reg(24);
  delayMatch17_reg_next(26) <= delayMatch17_reg(25);
  delayMatch17_reg_next(27) <= delayMatch17_reg(26);
  delayMatch17_reg_next(28) <= delayMatch17_reg(27);
  delayMatch17_reg_next(29) <= delayMatch17_reg(28);
  delayMatch17_reg_next(30) <= delayMatch17_reg(29);
  delayMatch17_reg_next(31) <= delayMatch17_reg(30);
  delayMatch17_reg_next(32) <= delayMatch17_reg(31);
  delayMatch17_reg_next(33) <= delayMatch17_reg(32);
  delayMatch17_reg_next(34) <= delayMatch17_reg(33);
  delayMatch17_reg_next(35) <= delayMatch17_reg(34);
  delayMatch17_reg_next(36) <= delayMatch17_reg(35);
  delayMatch17_reg_next(37) <= delayMatch17_reg(36);
  delayMatch17_reg_next(38) <= delayMatch17_reg(37);
  delayMatch17_reg_next(39) <= delayMatch17_reg(38);
  delayMatch17_reg_next(40) <= delayMatch17_reg(39);
  delayMatch17_reg_next(41) <= delayMatch17_reg(40);
  delayMatch17_reg_next(42) <= delayMatch17_reg(41);
  delayMatch17_reg_next(43) <= delayMatch17_reg(42);
  delayMatch17_reg_next(44) <= delayMatch17_reg(43);
  delayMatch17_reg_next(45) <= delayMatch17_reg(44);
  delayMatch17_reg_next(46) <= delayMatch17_reg(45);
  delayMatch17_reg_next(47) <= delayMatch17_reg(46);
  delayMatch17_reg_next(48) <= delayMatch17_reg(47);
  delayMatch17_reg_next(49) <= delayMatch17_reg(48);
  delayMatch17_reg_next(50) <= delayMatch17_reg(49);
  delayMatch17_reg_next(51) <= delayMatch17_reg(50);
  delayMatch17_reg_next(52) <= delayMatch17_reg(51);
  delayMatch17_reg_next(53) <= delayMatch17_reg(52);

  position_mech_raw <= std_logic_vector(Data_Type_Conversion5_out1_1);

  Constant1_out1 <= X"40c90fdb";

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg(0) <= X"00000000";
        delayMatch8_reg(1) <= X"00000000";
        delayMatch8_reg(2) <= X"00000000";
        delayMatch8_reg(3) <= X"00000000";
        delayMatch8_reg(4) <= X"00000000";
        delayMatch8_reg(5) <= X"00000000";
        delayMatch8_reg(6) <= X"00000000";
        delayMatch8_reg(7) <= X"00000000";
        delayMatch8_reg(8) <= X"00000000";
        delayMatch8_reg(9) <= X"00000000";
        delayMatch8_reg(10) <= X"00000000";
        delayMatch8_reg(11) <= X"00000000";
        delayMatch8_reg(12) <= X"00000000";
        delayMatch8_reg(13) <= X"00000000";
        delayMatch8_reg(14) <= X"00000000";
        delayMatch8_reg(15) <= X"00000000";
        delayMatch8_reg(16) <= X"00000000";
        delayMatch8_reg(17) <= X"00000000";
        delayMatch8_reg(18) <= X"00000000";
        delayMatch8_reg(19) <= X"00000000";
        delayMatch8_reg(20) <= X"00000000";
        delayMatch8_reg(21) <= X"00000000";
        delayMatch8_reg(22) <= X"00000000";
        delayMatch8_reg(23) <= X"00000000";
        delayMatch8_reg(24) <= X"00000000";
        delayMatch8_reg(25) <= X"00000000";
        delayMatch8_reg(26) <= X"00000000";
        delayMatch8_reg(27) <= X"00000000";
        delayMatch8_reg(28) <= X"00000000";
        delayMatch8_reg(29) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
        delayMatch8_reg(2) <= delayMatch8_reg_next(2);
        delayMatch8_reg(3) <= delayMatch8_reg_next(3);
        delayMatch8_reg(4) <= delayMatch8_reg_next(4);
        delayMatch8_reg(5) <= delayMatch8_reg_next(5);
        delayMatch8_reg(6) <= delayMatch8_reg_next(6);
        delayMatch8_reg(7) <= delayMatch8_reg_next(7);
        delayMatch8_reg(8) <= delayMatch8_reg_next(8);
        delayMatch8_reg(9) <= delayMatch8_reg_next(9);
        delayMatch8_reg(10) <= delayMatch8_reg_next(10);
        delayMatch8_reg(11) <= delayMatch8_reg_next(11);
        delayMatch8_reg(12) <= delayMatch8_reg_next(12);
        delayMatch8_reg(13) <= delayMatch8_reg_next(13);
        delayMatch8_reg(14) <= delayMatch8_reg_next(14);
        delayMatch8_reg(15) <= delayMatch8_reg_next(15);
        delayMatch8_reg(16) <= delayMatch8_reg_next(16);
        delayMatch8_reg(17) <= delayMatch8_reg_next(17);
        delayMatch8_reg(18) <= delayMatch8_reg_next(18);
        delayMatch8_reg(19) <= delayMatch8_reg_next(19);
        delayMatch8_reg(20) <= delayMatch8_reg_next(20);
        delayMatch8_reg(21) <= delayMatch8_reg_next(21);
        delayMatch8_reg(22) <= delayMatch8_reg_next(22);
        delayMatch8_reg(23) <= delayMatch8_reg_next(23);
        delayMatch8_reg(24) <= delayMatch8_reg_next(24);
        delayMatch8_reg(25) <= delayMatch8_reg_next(25);
        delayMatch8_reg(26) <= delayMatch8_reg_next(26);
        delayMatch8_reg(27) <= delayMatch8_reg_next(27);
        delayMatch8_reg(28) <= delayMatch8_reg_next(28);
        delayMatch8_reg(29) <= delayMatch8_reg_next(29);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  Divide2_out1_1 <= delayMatch8_reg(29);
  delayMatch8_reg_next(0) <= Divide2_out1;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);
  delayMatch8_reg_next(2) <= delayMatch8_reg(1);
  delayMatch8_reg_next(3) <= delayMatch8_reg(2);
  delayMatch8_reg_next(4) <= delayMatch8_reg(3);
  delayMatch8_reg_next(5) <= delayMatch8_reg(4);
  delayMatch8_reg_next(6) <= delayMatch8_reg(5);
  delayMatch8_reg_next(7) <= delayMatch8_reg(6);
  delayMatch8_reg_next(8) <= delayMatch8_reg(7);
  delayMatch8_reg_next(9) <= delayMatch8_reg(8);
  delayMatch8_reg_next(10) <= delayMatch8_reg(9);
  delayMatch8_reg_next(11) <= delayMatch8_reg(10);
  delayMatch8_reg_next(12) <= delayMatch8_reg(11);
  delayMatch8_reg_next(13) <= delayMatch8_reg(12);
  delayMatch8_reg_next(14) <= delayMatch8_reg(13);
  delayMatch8_reg_next(15) <= delayMatch8_reg(14);
  delayMatch8_reg_next(16) <= delayMatch8_reg(15);
  delayMatch8_reg_next(17) <= delayMatch8_reg(16);
  delayMatch8_reg_next(18) <= delayMatch8_reg(17);
  delayMatch8_reg_next(19) <= delayMatch8_reg(18);
  delayMatch8_reg_next(20) <= delayMatch8_reg(19);
  delayMatch8_reg_next(21) <= delayMatch8_reg(20);
  delayMatch8_reg_next(22) <= delayMatch8_reg(21);
  delayMatch8_reg_next(23) <= delayMatch8_reg(22);
  delayMatch8_reg_next(24) <= delayMatch8_reg(23);
  delayMatch8_reg_next(25) <= delayMatch8_reg(24);
  delayMatch8_reg_next(26) <= delayMatch8_reg(25);
  delayMatch8_reg_next(27) <= delayMatch8_reg(26);
  delayMatch8_reg_next(28) <= delayMatch8_reg(27);
  delayMatch8_reg_next(29) <= delayMatch8_reg(28);

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay27_out1 <= theta_el_offset_AXI;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  
  velocity_raw_2 <= velocity_raw_1 WHEN Detect_Rise_Positive_out1 = '0' ELSE
      Delay27_out1;

  reduced_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        velocity_raw_1 <= X"00000000";
      ELSIF enb = '1' THEN
        velocity_raw_1 <= velocity_raw_2;
      END IF;
    END IF;
  END PROCESS reduced_5_process;


  reduced_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_5(0) <= X"00000000";
        reduced_reg_5(1) <= X"00000000";
        reduced_reg_5(2) <= X"00000000";
        reduced_reg_5(3) <= X"00000000";
        reduced_reg_5(4) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_5(0) <= reduced_reg_next_5(0);
        reduced_reg_5(1) <= reduced_reg_next_5(1);
        reduced_reg_5(2) <= reduced_reg_next_5(2);
        reduced_reg_5(3) <= reduced_reg_next_5(3);
        reduced_reg_5(4) <= reduced_reg_next_5(4);
      END IF;
    END IF;
  END PROCESS reduced_6_process;

  velocity_raw_3 <= reduced_reg_5(4);
  reduced_reg_next_5(0) <= velocity_raw_1;
  reduced_reg_next_5(1) <= reduced_reg_5(0);
  reduced_reg_next_5(2) <= reduced_reg_5(1);
  reduced_reg_next_5(3) <= reduced_reg_5(2);
  reduced_reg_next_5(4) <= reduced_reg_5(3);

  reduced_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_6(0) <= X"00000000";
        reduced_reg_6(1) <= X"00000000";
        reduced_reg_6(2) <= X"00000000";
        reduced_reg_6(3) <= X"00000000";
        reduced_reg_6(4) <= X"00000000";
        reduced_reg_6(5) <= X"00000000";
        reduced_reg_6(6) <= X"00000000";
        reduced_reg_6(7) <= X"00000000";
        reduced_reg_6(8) <= X"00000000";
        reduced_reg_6(9) <= X"00000000";
        reduced_reg_6(10) <= X"00000000";
        reduced_reg_6(11) <= X"00000000";
        reduced_reg_6(12) <= X"00000000";
        reduced_reg_6(13) <= X"00000000";
        reduced_reg_6(14) <= X"00000000";
        reduced_reg_6(15) <= X"00000000";
        reduced_reg_6(16) <= X"00000000";
        reduced_reg_6(17) <= X"00000000";
        reduced_reg_6(18) <= X"00000000";
        reduced_reg_6(19) <= X"00000000";
        reduced_reg_6(20) <= X"00000000";
        reduced_reg_6(21) <= X"00000000";
        reduced_reg_6(22) <= X"00000000";
        reduced_reg_6(23) <= X"00000000";
        reduced_reg_6(24) <= X"00000000";
        reduced_reg_6(25) <= X"00000000";
        reduced_reg_6(26) <= X"00000000";
        reduced_reg_6(27) <= X"00000000";
        reduced_reg_6(28) <= X"00000000";
        reduced_reg_6(29) <= X"00000000";
        reduced_reg_6(30) <= X"00000000";
        reduced_reg_6(31) <= X"00000000";
        reduced_reg_6(32) <= X"00000000";
        reduced_reg_6(33) <= X"00000000";
        reduced_reg_6(34) <= X"00000000";
        reduced_reg_6(35) <= X"00000000";
        reduced_reg_6(36) <= X"00000000";
        reduced_reg_6(37) <= X"00000000";
        reduced_reg_6(38) <= X"00000000";
        reduced_reg_6(39) <= X"00000000";
        reduced_reg_6(40) <= X"00000000";
        reduced_reg_6(41) <= X"00000000";
        reduced_reg_6(42) <= X"00000000";
        reduced_reg_6(43) <= X"00000000";
        reduced_reg_6(44) <= X"00000000";
        reduced_reg_6(45) <= X"00000000";
        reduced_reg_6(46) <= X"00000000";
        reduced_reg_6(47) <= X"00000000";
        reduced_reg_6(48) <= X"00000000";
        reduced_reg_6(49) <= X"00000000";
        reduced_reg_6(50) <= X"00000000";
        reduced_reg_6(51) <= X"00000000";
        reduced_reg_6(52) <= X"00000000";
        reduced_reg_6(53) <= X"00000000";
        reduced_reg_6(54) <= X"00000000";
        reduced_reg_6(55) <= X"00000000";
        reduced_reg_6(56) <= X"00000000";
        reduced_reg_6(57) <= X"00000000";
        reduced_reg_6(58) <= X"00000000";
        reduced_reg_6(59) <= X"00000000";
        reduced_reg_6(60) <= X"00000000";
        reduced_reg_6(61) <= X"00000000";
        reduced_reg_6(62) <= X"00000000";
        reduced_reg_6(63) <= X"00000000";
        reduced_reg_6(64) <= X"00000000";
        reduced_reg_6(65) <= X"00000000";
        reduced_reg_6(66) <= X"00000000";
        reduced_reg_6(67) <= X"00000000";
        reduced_reg_6(68) <= X"00000000";
        reduced_reg_6(69) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_6(0) <= reduced_reg_next_6(0);
        reduced_reg_6(1) <= reduced_reg_next_6(1);
        reduced_reg_6(2) <= reduced_reg_next_6(2);
        reduced_reg_6(3) <= reduced_reg_next_6(3);
        reduced_reg_6(4) <= reduced_reg_next_6(4);
        reduced_reg_6(5) <= reduced_reg_next_6(5);
        reduced_reg_6(6) <= reduced_reg_next_6(6);
        reduced_reg_6(7) <= reduced_reg_next_6(7);
        reduced_reg_6(8) <= reduced_reg_next_6(8);
        reduced_reg_6(9) <= reduced_reg_next_6(9);
        reduced_reg_6(10) <= reduced_reg_next_6(10);
        reduced_reg_6(11) <= reduced_reg_next_6(11);
        reduced_reg_6(12) <= reduced_reg_next_6(12);
        reduced_reg_6(13) <= reduced_reg_next_6(13);
        reduced_reg_6(14) <= reduced_reg_next_6(14);
        reduced_reg_6(15) <= reduced_reg_next_6(15);
        reduced_reg_6(16) <= reduced_reg_next_6(16);
        reduced_reg_6(17) <= reduced_reg_next_6(17);
        reduced_reg_6(18) <= reduced_reg_next_6(18);
        reduced_reg_6(19) <= reduced_reg_next_6(19);
        reduced_reg_6(20) <= reduced_reg_next_6(20);
        reduced_reg_6(21) <= reduced_reg_next_6(21);
        reduced_reg_6(22) <= reduced_reg_next_6(22);
        reduced_reg_6(23) <= reduced_reg_next_6(23);
        reduced_reg_6(24) <= reduced_reg_next_6(24);
        reduced_reg_6(25) <= reduced_reg_next_6(25);
        reduced_reg_6(26) <= reduced_reg_next_6(26);
        reduced_reg_6(27) <= reduced_reg_next_6(27);
        reduced_reg_6(28) <= reduced_reg_next_6(28);
        reduced_reg_6(29) <= reduced_reg_next_6(29);
        reduced_reg_6(30) <= reduced_reg_next_6(30);
        reduced_reg_6(31) <= reduced_reg_next_6(31);
        reduced_reg_6(32) <= reduced_reg_next_6(32);
        reduced_reg_6(33) <= reduced_reg_next_6(33);
        reduced_reg_6(34) <= reduced_reg_next_6(34);
        reduced_reg_6(35) <= reduced_reg_next_6(35);
        reduced_reg_6(36) <= reduced_reg_next_6(36);
        reduced_reg_6(37) <= reduced_reg_next_6(37);
        reduced_reg_6(38) <= reduced_reg_next_6(38);
        reduced_reg_6(39) <= reduced_reg_next_6(39);
        reduced_reg_6(40) <= reduced_reg_next_6(40);
        reduced_reg_6(41) <= reduced_reg_next_6(41);
        reduced_reg_6(42) <= reduced_reg_next_6(42);
        reduced_reg_6(43) <= reduced_reg_next_6(43);
        reduced_reg_6(44) <= reduced_reg_next_6(44);
        reduced_reg_6(45) <= reduced_reg_next_6(45);
        reduced_reg_6(46) <= reduced_reg_next_6(46);
        reduced_reg_6(47) <= reduced_reg_next_6(47);
        reduced_reg_6(48) <= reduced_reg_next_6(48);
        reduced_reg_6(49) <= reduced_reg_next_6(49);
        reduced_reg_6(50) <= reduced_reg_next_6(50);
        reduced_reg_6(51) <= reduced_reg_next_6(51);
        reduced_reg_6(52) <= reduced_reg_next_6(52);
        reduced_reg_6(53) <= reduced_reg_next_6(53);
        reduced_reg_6(54) <= reduced_reg_next_6(54);
        reduced_reg_6(55) <= reduced_reg_next_6(55);
        reduced_reg_6(56) <= reduced_reg_next_6(56);
        reduced_reg_6(57) <= reduced_reg_next_6(57);
        reduced_reg_6(58) <= reduced_reg_next_6(58);
        reduced_reg_6(59) <= reduced_reg_next_6(59);
        reduced_reg_6(60) <= reduced_reg_next_6(60);
        reduced_reg_6(61) <= reduced_reg_next_6(61);
        reduced_reg_6(62) <= reduced_reg_next_6(62);
        reduced_reg_6(63) <= reduced_reg_next_6(63);
        reduced_reg_6(64) <= reduced_reg_next_6(64);
        reduced_reg_6(65) <= reduced_reg_next_6(65);
        reduced_reg_6(66) <= reduced_reg_next_6(66);
        reduced_reg_6(67) <= reduced_reg_next_6(67);
        reduced_reg_6(68) <= reduced_reg_next_6(68);
        reduced_reg_6(69) <= reduced_reg_next_6(69);
      END IF;
    END IF;
  END PROCESS reduced_7_process;

  velocity_raw_4 <= reduced_reg_6(69);
  reduced_reg_next_6(0) <= velocity_raw_3;
  reduced_reg_next_6(1) <= reduced_reg_6(0);
  reduced_reg_next_6(2) <= reduced_reg_6(1);
  reduced_reg_next_6(3) <= reduced_reg_6(2);
  reduced_reg_next_6(4) <= reduced_reg_6(3);
  reduced_reg_next_6(5) <= reduced_reg_6(4);
  reduced_reg_next_6(6) <= reduced_reg_6(5);
  reduced_reg_next_6(7) <= reduced_reg_6(6);
  reduced_reg_next_6(8) <= reduced_reg_6(7);
  reduced_reg_next_6(9) <= reduced_reg_6(8);
  reduced_reg_next_6(10) <= reduced_reg_6(9);
  reduced_reg_next_6(11) <= reduced_reg_6(10);
  reduced_reg_next_6(12) <= reduced_reg_6(11);
  reduced_reg_next_6(13) <= reduced_reg_6(12);
  reduced_reg_next_6(14) <= reduced_reg_6(13);
  reduced_reg_next_6(15) <= reduced_reg_6(14);
  reduced_reg_next_6(16) <= reduced_reg_6(15);
  reduced_reg_next_6(17) <= reduced_reg_6(16);
  reduced_reg_next_6(18) <= reduced_reg_6(17);
  reduced_reg_next_6(19) <= reduced_reg_6(18);
  reduced_reg_next_6(20) <= reduced_reg_6(19);
  reduced_reg_next_6(21) <= reduced_reg_6(20);
  reduced_reg_next_6(22) <= reduced_reg_6(21);
  reduced_reg_next_6(23) <= reduced_reg_6(22);
  reduced_reg_next_6(24) <= reduced_reg_6(23);
  reduced_reg_next_6(25) <= reduced_reg_6(24);
  reduced_reg_next_6(26) <= reduced_reg_6(25);
  reduced_reg_next_6(27) <= reduced_reg_6(26);
  reduced_reg_next_6(28) <= reduced_reg_6(27);
  reduced_reg_next_6(29) <= reduced_reg_6(28);
  reduced_reg_next_6(30) <= reduced_reg_6(29);
  reduced_reg_next_6(31) <= reduced_reg_6(30);
  reduced_reg_next_6(32) <= reduced_reg_6(31);
  reduced_reg_next_6(33) <= reduced_reg_6(32);
  reduced_reg_next_6(34) <= reduced_reg_6(33);
  reduced_reg_next_6(35) <= reduced_reg_6(34);
  reduced_reg_next_6(36) <= reduced_reg_6(35);
  reduced_reg_next_6(37) <= reduced_reg_6(36);
  reduced_reg_next_6(38) <= reduced_reg_6(37);
  reduced_reg_next_6(39) <= reduced_reg_6(38);
  reduced_reg_next_6(40) <= reduced_reg_6(39);
  reduced_reg_next_6(41) <= reduced_reg_6(40);
  reduced_reg_next_6(42) <= reduced_reg_6(41);
  reduced_reg_next_6(43) <= reduced_reg_6(42);
  reduced_reg_next_6(44) <= reduced_reg_6(43);
  reduced_reg_next_6(45) <= reduced_reg_6(44);
  reduced_reg_next_6(46) <= reduced_reg_6(45);
  reduced_reg_next_6(47) <= reduced_reg_6(46);
  reduced_reg_next_6(48) <= reduced_reg_6(47);
  reduced_reg_next_6(49) <= reduced_reg_6(48);
  reduced_reg_next_6(50) <= reduced_reg_6(49);
  reduced_reg_next_6(51) <= reduced_reg_6(50);
  reduced_reg_next_6(52) <= reduced_reg_6(51);
  reduced_reg_next_6(53) <= reduced_reg_6(52);
  reduced_reg_next_6(54) <= reduced_reg_6(53);
  reduced_reg_next_6(55) <= reduced_reg_6(54);
  reduced_reg_next_6(56) <= reduced_reg_6(55);
  reduced_reg_next_6(57) <= reduced_reg_6(56);
  reduced_reg_next_6(58) <= reduced_reg_6(57);
  reduced_reg_next_6(59) <= reduced_reg_6(58);
  reduced_reg_next_6(60) <= reduced_reg_6(59);
  reduced_reg_next_6(61) <= reduced_reg_6(60);
  reduced_reg_next_6(62) <= reduced_reg_6(61);
  reduced_reg_next_6(63) <= reduced_reg_6(62);
  reduced_reg_next_6(64) <= reduced_reg_6(63);
  reduced_reg_next_6(65) <= reduced_reg_6(64);
  reduced_reg_next_6(66) <= reduced_reg_6(65);
  reduced_reg_next_6(67) <= reduced_reg_6(66);
  reduced_reg_next_6(68) <= reduced_reg_6(67);
  reduced_reg_next_6(69) <= reduced_reg_6(68);

  Constant3_out1 <= X"40c90fdb";

  Data_Type_Conversion6_out1_signed <= signed(Data_Type_Conversion6_out1);

  reduced_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_7(0) <= to_signed(16#0000000#, 27);
        reduced_reg_7(1) <= to_signed(16#0000000#, 27);
        reduced_reg_7(2) <= to_signed(16#0000000#, 27);
        reduced_reg_7(3) <= to_signed(16#0000000#, 27);
        reduced_reg_7(4) <= to_signed(16#0000000#, 27);
        reduced_reg_7(5) <= to_signed(16#0000000#, 27);
        reduced_reg_7(6) <= to_signed(16#0000000#, 27);
        reduced_reg_7(7) <= to_signed(16#0000000#, 27);
        reduced_reg_7(8) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        reduced_reg_7(0) <= reduced_reg_next_7(0);
        reduced_reg_7(1) <= reduced_reg_next_7(1);
        reduced_reg_7(2) <= reduced_reg_next_7(2);
        reduced_reg_7(3) <= reduced_reg_next_7(3);
        reduced_reg_7(4) <= reduced_reg_next_7(4);
        reduced_reg_7(5) <= reduced_reg_next_7(5);
        reduced_reg_7(6) <= reduced_reg_next_7(6);
        reduced_reg_7(7) <= reduced_reg_next_7(7);
        reduced_reg_7(8) <= reduced_reg_next_7(8);
      END IF;
    END IF;
  END PROCESS reduced_8_process;

  Data_Type_Conversion6_out1_1 <= reduced_reg_7(8);
  reduced_reg_next_7(0) <= Data_Type_Conversion6_out1_signed;
  reduced_reg_next_7(1) <= reduced_reg_7(0);
  reduced_reg_next_7(2) <= reduced_reg_7(1);
  reduced_reg_next_7(3) <= reduced_reg_7(2);
  reduced_reg_next_7(4) <= reduced_reg_7(3);
  reduced_reg_next_7(5) <= reduced_reg_7(4);
  reduced_reg_next_7(6) <= reduced_reg_7(5);
  reduced_reg_next_7(7) <= reduced_reg_7(6);
  reduced_reg_next_7(8) <= reduced_reg_7(7);

  position_mech_2pi <= std_logic_vector(Data_Type_Conversion6_out1_1);

  machine_polepairs_AXI_signed <= signed(machine_polepairs_AXI);

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay15_out1 <= machine_polepairs_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay16_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Switch5_out1 <= Delay16_out1 WHEN Detect_Rise_Positive_out1_1 = '0' ELSE
      Data_Type_Conversion7_out1;

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch11_reg(0) <= X"00000000";
        delayMatch11_reg(1) <= X"00000000";
        delayMatch11_reg(2) <= X"00000000";
        delayMatch11_reg(3) <= X"00000000";
        delayMatch11_reg(4) <= X"00000000";
        delayMatch11_reg(5) <= X"00000000";
        delayMatch11_reg(6) <= X"00000000";
        delayMatch11_reg(7) <= X"00000000";
        delayMatch11_reg(8) <= X"00000000";
        delayMatch11_reg(9) <= X"00000000";
        delayMatch11_reg(10) <= X"00000000";
        delayMatch11_reg(11) <= X"00000000";
        delayMatch11_reg(12) <= X"00000000";
        delayMatch11_reg(13) <= X"00000000";
        delayMatch11_reg(14) <= X"00000000";
        delayMatch11_reg(15) <= X"00000000";
        delayMatch11_reg(16) <= X"00000000";
        delayMatch11_reg(17) <= X"00000000";
        delayMatch11_reg(18) <= X"00000000";
        delayMatch11_reg(19) <= X"00000000";
        delayMatch11_reg(20) <= X"00000000";
        delayMatch11_reg(21) <= X"00000000";
        delayMatch11_reg(22) <= X"00000000";
        delayMatch11_reg(23) <= X"00000000";
        delayMatch11_reg(24) <= X"00000000";
        delayMatch11_reg(25) <= X"00000000";
        delayMatch11_reg(26) <= X"00000000";
        delayMatch11_reg(27) <= X"00000000";
        delayMatch11_reg(28) <= X"00000000";
        delayMatch11_reg(29) <= X"00000000";
        delayMatch11_reg(30) <= X"00000000";
        delayMatch11_reg(31) <= X"00000000";
        delayMatch11_reg(32) <= X"00000000";
        delayMatch11_reg(33) <= X"00000000";
        delayMatch11_reg(34) <= X"00000000";
        delayMatch11_reg(35) <= X"00000000";
        delayMatch11_reg(36) <= X"00000000";
        delayMatch11_reg(37) <= X"00000000";
        delayMatch11_reg(38) <= X"00000000";
        delayMatch11_reg(39) <= X"00000000";
        delayMatch11_reg(40) <= X"00000000";
        delayMatch11_reg(41) <= X"00000000";
        delayMatch11_reg(42) <= X"00000000";
        delayMatch11_reg(43) <= X"00000000";
        delayMatch11_reg(44) <= X"00000000";
        delayMatch11_reg(45) <= X"00000000";
        delayMatch11_reg(46) <= X"00000000";
        delayMatch11_reg(47) <= X"00000000";
        delayMatch11_reg(48) <= X"00000000";
        delayMatch11_reg(49) <= X"00000000";
        delayMatch11_reg(50) <= X"00000000";
        delayMatch11_reg(51) <= X"00000000";
        delayMatch11_reg(52) <= X"00000000";
        delayMatch11_reg(53) <= X"00000000";
        delayMatch11_reg(54) <= X"00000000";
        delayMatch11_reg(55) <= X"00000000";
        delayMatch11_reg(56) <= X"00000000";
        delayMatch11_reg(57) <= X"00000000";
        delayMatch11_reg(58) <= X"00000000";
        delayMatch11_reg(59) <= X"00000000";
        delayMatch11_reg(60) <= X"00000000";
        delayMatch11_reg(61) <= X"00000000";
        delayMatch11_reg(62) <= X"00000000";
        delayMatch11_reg(63) <= X"00000000";
        delayMatch11_reg(64) <= X"00000000";
        delayMatch11_reg(65) <= X"00000000";
        delayMatch11_reg(66) <= X"00000000";
        delayMatch11_reg(67) <= X"00000000";
        delayMatch11_reg(68) <= X"00000000";
        delayMatch11_reg(69) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
        delayMatch11_reg(2) <= delayMatch11_reg_next(2);
        delayMatch11_reg(3) <= delayMatch11_reg_next(3);
        delayMatch11_reg(4) <= delayMatch11_reg_next(4);
        delayMatch11_reg(5) <= delayMatch11_reg_next(5);
        delayMatch11_reg(6) <= delayMatch11_reg_next(6);
        delayMatch11_reg(7) <= delayMatch11_reg_next(7);
        delayMatch11_reg(8) <= delayMatch11_reg_next(8);
        delayMatch11_reg(9) <= delayMatch11_reg_next(9);
        delayMatch11_reg(10) <= delayMatch11_reg_next(10);
        delayMatch11_reg(11) <= delayMatch11_reg_next(11);
        delayMatch11_reg(12) <= delayMatch11_reg_next(12);
        delayMatch11_reg(13) <= delayMatch11_reg_next(13);
        delayMatch11_reg(14) <= delayMatch11_reg_next(14);
        delayMatch11_reg(15) <= delayMatch11_reg_next(15);
        delayMatch11_reg(16) <= delayMatch11_reg_next(16);
        delayMatch11_reg(17) <= delayMatch11_reg_next(17);
        delayMatch11_reg(18) <= delayMatch11_reg_next(18);
        delayMatch11_reg(19) <= delayMatch11_reg_next(19);
        delayMatch11_reg(20) <= delayMatch11_reg_next(20);
        delayMatch11_reg(21) <= delayMatch11_reg_next(21);
        delayMatch11_reg(22) <= delayMatch11_reg_next(22);
        delayMatch11_reg(23) <= delayMatch11_reg_next(23);
        delayMatch11_reg(24) <= delayMatch11_reg_next(24);
        delayMatch11_reg(25) <= delayMatch11_reg_next(25);
        delayMatch11_reg(26) <= delayMatch11_reg_next(26);
        delayMatch11_reg(27) <= delayMatch11_reg_next(27);
        delayMatch11_reg(28) <= delayMatch11_reg_next(28);
        delayMatch11_reg(29) <= delayMatch11_reg_next(29);
        delayMatch11_reg(30) <= delayMatch11_reg_next(30);
        delayMatch11_reg(31) <= delayMatch11_reg_next(31);
        delayMatch11_reg(32) <= delayMatch11_reg_next(32);
        delayMatch11_reg(33) <= delayMatch11_reg_next(33);
        delayMatch11_reg(34) <= delayMatch11_reg_next(34);
        delayMatch11_reg(35) <= delayMatch11_reg_next(35);
        delayMatch11_reg(36) <= delayMatch11_reg_next(36);
        delayMatch11_reg(37) <= delayMatch11_reg_next(37);
        delayMatch11_reg(38) <= delayMatch11_reg_next(38);
        delayMatch11_reg(39) <= delayMatch11_reg_next(39);
        delayMatch11_reg(40) <= delayMatch11_reg_next(40);
        delayMatch11_reg(41) <= delayMatch11_reg_next(41);
        delayMatch11_reg(42) <= delayMatch11_reg_next(42);
        delayMatch11_reg(43) <= delayMatch11_reg_next(43);
        delayMatch11_reg(44) <= delayMatch11_reg_next(44);
        delayMatch11_reg(45) <= delayMatch11_reg_next(45);
        delayMatch11_reg(46) <= delayMatch11_reg_next(46);
        delayMatch11_reg(47) <= delayMatch11_reg_next(47);
        delayMatch11_reg(48) <= delayMatch11_reg_next(48);
        delayMatch11_reg(49) <= delayMatch11_reg_next(49);
        delayMatch11_reg(50) <= delayMatch11_reg_next(50);
        delayMatch11_reg(51) <= delayMatch11_reg_next(51);
        delayMatch11_reg(52) <= delayMatch11_reg_next(52);
        delayMatch11_reg(53) <= delayMatch11_reg_next(53);
        delayMatch11_reg(54) <= delayMatch11_reg_next(54);
        delayMatch11_reg(55) <= delayMatch11_reg_next(55);
        delayMatch11_reg(56) <= delayMatch11_reg_next(56);
        delayMatch11_reg(57) <= delayMatch11_reg_next(57);
        delayMatch11_reg(58) <= delayMatch11_reg_next(58);
        delayMatch11_reg(59) <= delayMatch11_reg_next(59);
        delayMatch11_reg(60) <= delayMatch11_reg_next(60);
        delayMatch11_reg(61) <= delayMatch11_reg_next(61);
        delayMatch11_reg(62) <= delayMatch11_reg_next(62);
        delayMatch11_reg(63) <= delayMatch11_reg_next(63);
        delayMatch11_reg(64) <= delayMatch11_reg_next(64);
        delayMatch11_reg(65) <= delayMatch11_reg_next(65);
        delayMatch11_reg(66) <= delayMatch11_reg_next(66);
        delayMatch11_reg(67) <= delayMatch11_reg_next(67);
        delayMatch11_reg(68) <= delayMatch11_reg_next(68);
        delayMatch11_reg(69) <= delayMatch11_reg_next(69);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Switch5_out1_1 <= delayMatch11_reg(69);
  delayMatch11_reg_next(0) <= Switch5_out1;
  delayMatch11_reg_next(1) <= delayMatch11_reg(0);
  delayMatch11_reg_next(2) <= delayMatch11_reg(1);
  delayMatch11_reg_next(3) <= delayMatch11_reg(2);
  delayMatch11_reg_next(4) <= delayMatch11_reg(3);
  delayMatch11_reg_next(5) <= delayMatch11_reg(4);
  delayMatch11_reg_next(6) <= delayMatch11_reg(5);
  delayMatch11_reg_next(7) <= delayMatch11_reg(6);
  delayMatch11_reg_next(8) <= delayMatch11_reg(7);
  delayMatch11_reg_next(9) <= delayMatch11_reg(8);
  delayMatch11_reg_next(10) <= delayMatch11_reg(9);
  delayMatch11_reg_next(11) <= delayMatch11_reg(10);
  delayMatch11_reg_next(12) <= delayMatch11_reg(11);
  delayMatch11_reg_next(13) <= delayMatch11_reg(12);
  delayMatch11_reg_next(14) <= delayMatch11_reg(13);
  delayMatch11_reg_next(15) <= delayMatch11_reg(14);
  delayMatch11_reg_next(16) <= delayMatch11_reg(15);
  delayMatch11_reg_next(17) <= delayMatch11_reg(16);
  delayMatch11_reg_next(18) <= delayMatch11_reg(17);
  delayMatch11_reg_next(19) <= delayMatch11_reg(18);
  delayMatch11_reg_next(20) <= delayMatch11_reg(19);
  delayMatch11_reg_next(21) <= delayMatch11_reg(20);
  delayMatch11_reg_next(22) <= delayMatch11_reg(21);
  delayMatch11_reg_next(23) <= delayMatch11_reg(22);
  delayMatch11_reg_next(24) <= delayMatch11_reg(23);
  delayMatch11_reg_next(25) <= delayMatch11_reg(24);
  delayMatch11_reg_next(26) <= delayMatch11_reg(25);
  delayMatch11_reg_next(27) <= delayMatch11_reg(26);
  delayMatch11_reg_next(28) <= delayMatch11_reg(27);
  delayMatch11_reg_next(29) <= delayMatch11_reg(28);
  delayMatch11_reg_next(30) <= delayMatch11_reg(29);
  delayMatch11_reg_next(31) <= delayMatch11_reg(30);
  delayMatch11_reg_next(32) <= delayMatch11_reg(31);
  delayMatch11_reg_next(33) <= delayMatch11_reg(32);
  delayMatch11_reg_next(34) <= delayMatch11_reg(33);
  delayMatch11_reg_next(35) <= delayMatch11_reg(34);
  delayMatch11_reg_next(36) <= delayMatch11_reg(35);
  delayMatch11_reg_next(37) <= delayMatch11_reg(36);
  delayMatch11_reg_next(38) <= delayMatch11_reg(37);
  delayMatch11_reg_next(39) <= delayMatch11_reg(38);
  delayMatch11_reg_next(40) <= delayMatch11_reg(39);
  delayMatch11_reg_next(41) <= delayMatch11_reg(40);
  delayMatch11_reg_next(42) <= delayMatch11_reg(41);
  delayMatch11_reg_next(43) <= delayMatch11_reg(42);
  delayMatch11_reg_next(44) <= delayMatch11_reg(43);
  delayMatch11_reg_next(45) <= delayMatch11_reg(44);
  delayMatch11_reg_next(46) <= delayMatch11_reg(45);
  delayMatch11_reg_next(47) <= delayMatch11_reg(46);
  delayMatch11_reg_next(48) <= delayMatch11_reg(47);
  delayMatch11_reg_next(49) <= delayMatch11_reg(48);
  delayMatch11_reg_next(50) <= delayMatch11_reg(49);
  delayMatch11_reg_next(51) <= delayMatch11_reg(50);
  delayMatch11_reg_next(52) <= delayMatch11_reg(51);
  delayMatch11_reg_next(53) <= delayMatch11_reg(52);
  delayMatch11_reg_next(54) <= delayMatch11_reg(53);
  delayMatch11_reg_next(55) <= delayMatch11_reg(54);
  delayMatch11_reg_next(56) <= delayMatch11_reg(55);
  delayMatch11_reg_next(57) <= delayMatch11_reg(56);
  delayMatch11_reg_next(58) <= delayMatch11_reg(57);
  delayMatch11_reg_next(59) <= delayMatch11_reg(58);
  delayMatch11_reg_next(60) <= delayMatch11_reg(59);
  delayMatch11_reg_next(61) <= delayMatch11_reg(60);
  delayMatch11_reg_next(62) <= delayMatch11_reg(61);
  delayMatch11_reg_next(63) <= delayMatch11_reg(62);
  delayMatch11_reg_next(64) <= delayMatch11_reg(63);
  delayMatch11_reg_next(65) <= delayMatch11_reg(64);
  delayMatch11_reg_next(66) <= delayMatch11_reg(65);
  delayMatch11_reg_next(67) <= delayMatch11_reg(66);
  delayMatch11_reg_next(68) <= delayMatch11_reg(67);
  delayMatch11_reg_next(69) <= delayMatch11_reg(68);

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_reg(0) <= X"00000000";
        delayMatch13_reg(1) <= X"00000000";
        delayMatch13_reg(2) <= X"00000000";
        delayMatch13_reg(3) <= X"00000000";
        delayMatch13_reg(4) <= X"00000000";
        delayMatch13_reg(5) <= X"00000000";
        delayMatch13_reg(6) <= X"00000000";
        delayMatch13_reg(7) <= X"00000000";
        delayMatch13_reg(8) <= X"00000000";
        delayMatch13_reg(9) <= X"00000000";
        delayMatch13_reg(10) <= X"00000000";
        delayMatch13_reg(11) <= X"00000000";
        delayMatch13_reg(12) <= X"00000000";
        delayMatch13_reg(13) <= X"00000000";
        delayMatch13_reg(14) <= X"00000000";
        delayMatch13_reg(15) <= X"00000000";
        delayMatch13_reg(16) <= X"00000000";
        delayMatch13_reg(17) <= X"00000000";
        delayMatch13_reg(18) <= X"00000000";
        delayMatch13_reg(19) <= X"00000000";
        delayMatch13_reg(20) <= X"00000000";
        delayMatch13_reg(21) <= X"00000000";
        delayMatch13_reg(22) <= X"00000000";
        delayMatch13_reg(23) <= X"00000000";
        delayMatch13_reg(24) <= X"00000000";
        delayMatch13_reg(25) <= X"00000000";
        delayMatch13_reg(26) <= X"00000000";
        delayMatch13_reg(27) <= X"00000000";
        delayMatch13_reg(28) <= X"00000000";
        delayMatch13_reg(29) <= X"00000000";
        delayMatch13_reg(30) <= X"00000000";
        delayMatch13_reg(31) <= X"00000000";
        delayMatch13_reg(32) <= X"00000000";
        delayMatch13_reg(33) <= X"00000000";
        delayMatch13_reg(34) <= X"00000000";
        delayMatch13_reg(35) <= X"00000000";
        delayMatch13_reg(36) <= X"00000000";
        delayMatch13_reg(37) <= X"00000000";
        delayMatch13_reg(38) <= X"00000000";
        delayMatch13_reg(39) <= X"00000000";
        delayMatch13_reg(40) <= X"00000000";
        delayMatch13_reg(41) <= X"00000000";
        delayMatch13_reg(42) <= X"00000000";
        delayMatch13_reg(43) <= X"00000000";
        delayMatch13_reg(44) <= X"00000000";
        delayMatch13_reg(45) <= X"00000000";
        delayMatch13_reg(46) <= X"00000000";
        delayMatch13_reg(47) <= X"00000000";
        delayMatch13_reg(48) <= X"00000000";
        delayMatch13_reg(49) <= X"00000000";
        delayMatch13_reg(50) <= X"00000000";
        delayMatch13_reg(51) <= X"00000000";
        delayMatch13_reg(52) <= X"00000000";
        delayMatch13_reg(53) <= X"00000000";
        delayMatch13_reg(54) <= X"00000000";
        delayMatch13_reg(55) <= X"00000000";
        delayMatch13_reg(56) <= X"00000000";
        delayMatch13_reg(57) <= X"00000000";
        delayMatch13_reg(58) <= X"00000000";
        delayMatch13_reg(59) <= X"00000000";
        delayMatch13_reg(60) <= X"00000000";
        delayMatch13_reg(61) <= X"00000000";
        delayMatch13_reg(62) <= X"00000000";
        delayMatch13_reg(63) <= X"00000000";
        delayMatch13_reg(64) <= X"00000000";
        delayMatch13_reg(65) <= X"00000000";
        delayMatch13_reg(66) <= X"00000000";
        delayMatch13_reg(67) <= X"00000000";
        delayMatch13_reg(68) <= X"00000000";
        delayMatch13_reg(69) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch13_reg(0) <= delayMatch13_reg_next(0);
        delayMatch13_reg(1) <= delayMatch13_reg_next(1);
        delayMatch13_reg(2) <= delayMatch13_reg_next(2);
        delayMatch13_reg(3) <= delayMatch13_reg_next(3);
        delayMatch13_reg(4) <= delayMatch13_reg_next(4);
        delayMatch13_reg(5) <= delayMatch13_reg_next(5);
        delayMatch13_reg(6) <= delayMatch13_reg_next(6);
        delayMatch13_reg(7) <= delayMatch13_reg_next(7);
        delayMatch13_reg(8) <= delayMatch13_reg_next(8);
        delayMatch13_reg(9) <= delayMatch13_reg_next(9);
        delayMatch13_reg(10) <= delayMatch13_reg_next(10);
        delayMatch13_reg(11) <= delayMatch13_reg_next(11);
        delayMatch13_reg(12) <= delayMatch13_reg_next(12);
        delayMatch13_reg(13) <= delayMatch13_reg_next(13);
        delayMatch13_reg(14) <= delayMatch13_reg_next(14);
        delayMatch13_reg(15) <= delayMatch13_reg_next(15);
        delayMatch13_reg(16) <= delayMatch13_reg_next(16);
        delayMatch13_reg(17) <= delayMatch13_reg_next(17);
        delayMatch13_reg(18) <= delayMatch13_reg_next(18);
        delayMatch13_reg(19) <= delayMatch13_reg_next(19);
        delayMatch13_reg(20) <= delayMatch13_reg_next(20);
        delayMatch13_reg(21) <= delayMatch13_reg_next(21);
        delayMatch13_reg(22) <= delayMatch13_reg_next(22);
        delayMatch13_reg(23) <= delayMatch13_reg_next(23);
        delayMatch13_reg(24) <= delayMatch13_reg_next(24);
        delayMatch13_reg(25) <= delayMatch13_reg_next(25);
        delayMatch13_reg(26) <= delayMatch13_reg_next(26);
        delayMatch13_reg(27) <= delayMatch13_reg_next(27);
        delayMatch13_reg(28) <= delayMatch13_reg_next(28);
        delayMatch13_reg(29) <= delayMatch13_reg_next(29);
        delayMatch13_reg(30) <= delayMatch13_reg_next(30);
        delayMatch13_reg(31) <= delayMatch13_reg_next(31);
        delayMatch13_reg(32) <= delayMatch13_reg_next(32);
        delayMatch13_reg(33) <= delayMatch13_reg_next(33);
        delayMatch13_reg(34) <= delayMatch13_reg_next(34);
        delayMatch13_reg(35) <= delayMatch13_reg_next(35);
        delayMatch13_reg(36) <= delayMatch13_reg_next(36);
        delayMatch13_reg(37) <= delayMatch13_reg_next(37);
        delayMatch13_reg(38) <= delayMatch13_reg_next(38);
        delayMatch13_reg(39) <= delayMatch13_reg_next(39);
        delayMatch13_reg(40) <= delayMatch13_reg_next(40);
        delayMatch13_reg(41) <= delayMatch13_reg_next(41);
        delayMatch13_reg(42) <= delayMatch13_reg_next(42);
        delayMatch13_reg(43) <= delayMatch13_reg_next(43);
        delayMatch13_reg(44) <= delayMatch13_reg_next(44);
        delayMatch13_reg(45) <= delayMatch13_reg_next(45);
        delayMatch13_reg(46) <= delayMatch13_reg_next(46);
        delayMatch13_reg(47) <= delayMatch13_reg_next(47);
        delayMatch13_reg(48) <= delayMatch13_reg_next(48);
        delayMatch13_reg(49) <= delayMatch13_reg_next(49);
        delayMatch13_reg(50) <= delayMatch13_reg_next(50);
        delayMatch13_reg(51) <= delayMatch13_reg_next(51);
        delayMatch13_reg(52) <= delayMatch13_reg_next(52);
        delayMatch13_reg(53) <= delayMatch13_reg_next(53);
        delayMatch13_reg(54) <= delayMatch13_reg_next(54);
        delayMatch13_reg(55) <= delayMatch13_reg_next(55);
        delayMatch13_reg(56) <= delayMatch13_reg_next(56);
        delayMatch13_reg(57) <= delayMatch13_reg_next(57);
        delayMatch13_reg(58) <= delayMatch13_reg_next(58);
        delayMatch13_reg(59) <= delayMatch13_reg_next(59);
        delayMatch13_reg(60) <= delayMatch13_reg_next(60);
        delayMatch13_reg(61) <= delayMatch13_reg_next(61);
        delayMatch13_reg(62) <= delayMatch13_reg_next(62);
        delayMatch13_reg(63) <= delayMatch13_reg_next(63);
        delayMatch13_reg(64) <= delayMatch13_reg_next(64);
        delayMatch13_reg(65) <= delayMatch13_reg_next(65);
        delayMatch13_reg(66) <= delayMatch13_reg_next(66);
        delayMatch13_reg(67) <= delayMatch13_reg_next(67);
        delayMatch13_reg(68) <= delayMatch13_reg_next(68);
        delayMatch13_reg(69) <= delayMatch13_reg_next(69);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  Product7_out1_1 <= delayMatch13_reg(69);
  delayMatch13_reg_next(0) <= Product7_out1;
  delayMatch13_reg_next(1) <= delayMatch13_reg(0);
  delayMatch13_reg_next(2) <= delayMatch13_reg(1);
  delayMatch13_reg_next(3) <= delayMatch13_reg(2);
  delayMatch13_reg_next(4) <= delayMatch13_reg(3);
  delayMatch13_reg_next(5) <= delayMatch13_reg(4);
  delayMatch13_reg_next(6) <= delayMatch13_reg(5);
  delayMatch13_reg_next(7) <= delayMatch13_reg(6);
  delayMatch13_reg_next(8) <= delayMatch13_reg(7);
  delayMatch13_reg_next(9) <= delayMatch13_reg(8);
  delayMatch13_reg_next(10) <= delayMatch13_reg(9);
  delayMatch13_reg_next(11) <= delayMatch13_reg(10);
  delayMatch13_reg_next(12) <= delayMatch13_reg(11);
  delayMatch13_reg_next(13) <= delayMatch13_reg(12);
  delayMatch13_reg_next(14) <= delayMatch13_reg(13);
  delayMatch13_reg_next(15) <= delayMatch13_reg(14);
  delayMatch13_reg_next(16) <= delayMatch13_reg(15);
  delayMatch13_reg_next(17) <= delayMatch13_reg(16);
  delayMatch13_reg_next(18) <= delayMatch13_reg(17);
  delayMatch13_reg_next(19) <= delayMatch13_reg(18);
  delayMatch13_reg_next(20) <= delayMatch13_reg(19);
  delayMatch13_reg_next(21) <= delayMatch13_reg(20);
  delayMatch13_reg_next(22) <= delayMatch13_reg(21);
  delayMatch13_reg_next(23) <= delayMatch13_reg(22);
  delayMatch13_reg_next(24) <= delayMatch13_reg(23);
  delayMatch13_reg_next(25) <= delayMatch13_reg(24);
  delayMatch13_reg_next(26) <= delayMatch13_reg(25);
  delayMatch13_reg_next(27) <= delayMatch13_reg(26);
  delayMatch13_reg_next(28) <= delayMatch13_reg(27);
  delayMatch13_reg_next(29) <= delayMatch13_reg(28);
  delayMatch13_reg_next(30) <= delayMatch13_reg(29);
  delayMatch13_reg_next(31) <= delayMatch13_reg(30);
  delayMatch13_reg_next(32) <= delayMatch13_reg(31);
  delayMatch13_reg_next(33) <= delayMatch13_reg(32);
  delayMatch13_reg_next(34) <= delayMatch13_reg(33);
  delayMatch13_reg_next(35) <= delayMatch13_reg(34);
  delayMatch13_reg_next(36) <= delayMatch13_reg(35);
  delayMatch13_reg_next(37) <= delayMatch13_reg(36);
  delayMatch13_reg_next(38) <= delayMatch13_reg(37);
  delayMatch13_reg_next(39) <= delayMatch13_reg(38);
  delayMatch13_reg_next(40) <= delayMatch13_reg(39);
  delayMatch13_reg_next(41) <= delayMatch13_reg(40);
  delayMatch13_reg_next(42) <= delayMatch13_reg(41);
  delayMatch13_reg_next(43) <= delayMatch13_reg(42);
  delayMatch13_reg_next(44) <= delayMatch13_reg(43);
  delayMatch13_reg_next(45) <= delayMatch13_reg(44);
  delayMatch13_reg_next(46) <= delayMatch13_reg(45);
  delayMatch13_reg_next(47) <= delayMatch13_reg(46);
  delayMatch13_reg_next(48) <= delayMatch13_reg(47);
  delayMatch13_reg_next(49) <= delayMatch13_reg(48);
  delayMatch13_reg_next(50) <= delayMatch13_reg(49);
  delayMatch13_reg_next(51) <= delayMatch13_reg(50);
  delayMatch13_reg_next(52) <= delayMatch13_reg(51);
  delayMatch13_reg_next(53) <= delayMatch13_reg(52);
  delayMatch13_reg_next(54) <= delayMatch13_reg(53);
  delayMatch13_reg_next(55) <= delayMatch13_reg(54);
  delayMatch13_reg_next(56) <= delayMatch13_reg(55);
  delayMatch13_reg_next(57) <= delayMatch13_reg(56);
  delayMatch13_reg_next(58) <= delayMatch13_reg(57);
  delayMatch13_reg_next(59) <= delayMatch13_reg(58);
  delayMatch13_reg_next(60) <= delayMatch13_reg(59);
  delayMatch13_reg_next(61) <= delayMatch13_reg(60);
  delayMatch13_reg_next(62) <= delayMatch13_reg(61);
  delayMatch13_reg_next(63) <= delayMatch13_reg(62);
  delayMatch13_reg_next(64) <= delayMatch13_reg(63);
  delayMatch13_reg_next(65) <= delayMatch13_reg(64);
  delayMatch13_reg_next(66) <= delayMatch13_reg(65);
  delayMatch13_reg_next(67) <= delayMatch13_reg(66);
  delayMatch13_reg_next(68) <= delayMatch13_reg(67);
  delayMatch13_reg_next(69) <= delayMatch13_reg(68);

  Data_Type_Conversion8_out1_signed <= signed(Data_Type_Conversion8_out1);

  reduced_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion8_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Data_Type_Conversion8_out1_1 <= Data_Type_Conversion8_out1_signed;
      END IF;
    END IF;
  END PROCESS reduced_9_process;


  position_el_2pi <= std_logic_vector(Data_Type_Conversion8_out1_1);

  velocity_raw_signed <= signed(velocity_raw);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay17_out1 <= velocity_raw_signed;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay18_out1 <= velocity_raw_5;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  velocity_raw_5 <= Delay18_out1 WHEN Detect_Rise_Positive_out1_1 = '0' ELSE
      Data_Type_Conversion9_out1;

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay19_out1 <= bitToRPS_Factor_AXI;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  velocity_raw_7 <= velocity_raw_6 WHEN Detect_Rise_Positive_out1 = '0' ELSE
      Delay19_out1;

  reduced_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        velocity_raw_6 <= X"00000000";
      ELSIF enb = '1' THEN
        velocity_raw_6 <= velocity_raw_7;
      END IF;
    END IF;
  END PROCESS reduced_10_process;


  reduced_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_8(0) <= X"00000000";
        reduced_reg_8(1) <= X"00000000";
        reduced_reg_8(2) <= X"00000000";
        reduced_reg_8(3) <= X"00000000";
        reduced_reg_8(4) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_8(0) <= reduced_reg_next_8(0);
        reduced_reg_8(1) <= reduced_reg_next_8(1);
        reduced_reg_8(2) <= reduced_reg_next_8(2);
        reduced_reg_8(3) <= reduced_reg_next_8(3);
        reduced_reg_8(4) <= reduced_reg_next_8(4);
      END IF;
    END IF;
  END PROCESS reduced_11_process;

  velocity_raw_8 <= reduced_reg_8(4);
  reduced_reg_next_8(0) <= velocity_raw_6;
  reduced_reg_next_8(1) <= reduced_reg_8(0);
  reduced_reg_next_8(2) <= reduced_reg_8(1);
  reduced_reg_next_8(3) <= reduced_reg_8(2);
  reduced_reg_next_8(4) <= reduced_reg_8(3);

  RPStoRPM <= X"42700000";

  rpmToomega <= X"3dd67750";

  Data_Type_Conversion11_out1_signed <= signed(Data_Type_Conversion11_out1);

  reduced_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_9(0) <= to_signed(16#000000#, 24);
        reduced_reg_9(1) <= to_signed(16#000000#, 24);
        reduced_reg_9(2) <= to_signed(16#000000#, 24);
        reduced_reg_9(3) <= to_signed(16#000000#, 24);
        reduced_reg_9(4) <= to_signed(16#000000#, 24);
        reduced_reg_9(5) <= to_signed(16#000000#, 24);
        reduced_reg_9(6) <= to_signed(16#000000#, 24);
        reduced_reg_9(7) <= to_signed(16#000000#, 24);
        reduced_reg_9(8) <= to_signed(16#000000#, 24);
        reduced_reg_9(9) <= to_signed(16#000000#, 24);
        reduced_reg_9(10) <= to_signed(16#000000#, 24);
        reduced_reg_9(11) <= to_signed(16#000000#, 24);
        reduced_reg_9(12) <= to_signed(16#000000#, 24);
        reduced_reg_9(13) <= to_signed(16#000000#, 24);
        reduced_reg_9(14) <= to_signed(16#000000#, 24);
        reduced_reg_9(15) <= to_signed(16#000000#, 24);
        reduced_reg_9(16) <= to_signed(16#000000#, 24);
        reduced_reg_9(17) <= to_signed(16#000000#, 24);
        reduced_reg_9(18) <= to_signed(16#000000#, 24);
        reduced_reg_9(19) <= to_signed(16#000000#, 24);
        reduced_reg_9(20) <= to_signed(16#000000#, 24);
        reduced_reg_9(21) <= to_signed(16#000000#, 24);
        reduced_reg_9(22) <= to_signed(16#000000#, 24);
        reduced_reg_9(23) <= to_signed(16#000000#, 24);
        reduced_reg_9(24) <= to_signed(16#000000#, 24);
        reduced_reg_9(25) <= to_signed(16#000000#, 24);
        reduced_reg_9(26) <= to_signed(16#000000#, 24);
        reduced_reg_9(27) <= to_signed(16#000000#, 24);
        reduced_reg_9(28) <= to_signed(16#000000#, 24);
        reduced_reg_9(29) <= to_signed(16#000000#, 24);
        reduced_reg_9(30) <= to_signed(16#000000#, 24);
        reduced_reg_9(31) <= to_signed(16#000000#, 24);
        reduced_reg_9(32) <= to_signed(16#000000#, 24);
        reduced_reg_9(33) <= to_signed(16#000000#, 24);
        reduced_reg_9(34) <= to_signed(16#000000#, 24);
        reduced_reg_9(35) <= to_signed(16#000000#, 24);
        reduced_reg_9(36) <= to_signed(16#000000#, 24);
        reduced_reg_9(37) <= to_signed(16#000000#, 24);
        reduced_reg_9(38) <= to_signed(16#000000#, 24);
        reduced_reg_9(39) <= to_signed(16#000000#, 24);
        reduced_reg_9(40) <= to_signed(16#000000#, 24);
        reduced_reg_9(41) <= to_signed(16#000000#, 24);
        reduced_reg_9(42) <= to_signed(16#000000#, 24);
        reduced_reg_9(43) <= to_signed(16#000000#, 24);
        reduced_reg_9(44) <= to_signed(16#000000#, 24);
        reduced_reg_9(45) <= to_signed(16#000000#, 24);
        reduced_reg_9(46) <= to_signed(16#000000#, 24);
        reduced_reg_9(47) <= to_signed(16#000000#, 24);
        reduced_reg_9(48) <= to_signed(16#000000#, 24);
        reduced_reg_9(49) <= to_signed(16#000000#, 24);
        reduced_reg_9(50) <= to_signed(16#000000#, 24);
        reduced_reg_9(51) <= to_signed(16#000000#, 24);
        reduced_reg_9(52) <= to_signed(16#000000#, 24);
        reduced_reg_9(53) <= to_signed(16#000000#, 24);
        reduced_reg_9(54) <= to_signed(16#000000#, 24);
        reduced_reg_9(55) <= to_signed(16#000000#, 24);
        reduced_reg_9(56) <= to_signed(16#000000#, 24);
        reduced_reg_9(57) <= to_signed(16#000000#, 24);
        reduced_reg_9(58) <= to_signed(16#000000#, 24);
        reduced_reg_9(59) <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        reduced_reg_9(0) <= reduced_reg_next_9(0);
        reduced_reg_9(1) <= reduced_reg_next_9(1);
        reduced_reg_9(2) <= reduced_reg_next_9(2);
        reduced_reg_9(3) <= reduced_reg_next_9(3);
        reduced_reg_9(4) <= reduced_reg_next_9(4);
        reduced_reg_9(5) <= reduced_reg_next_9(5);
        reduced_reg_9(6) <= reduced_reg_next_9(6);
        reduced_reg_9(7) <= reduced_reg_next_9(7);
        reduced_reg_9(8) <= reduced_reg_next_9(8);
        reduced_reg_9(9) <= reduced_reg_next_9(9);
        reduced_reg_9(10) <= reduced_reg_next_9(10);
        reduced_reg_9(11) <= reduced_reg_next_9(11);
        reduced_reg_9(12) <= reduced_reg_next_9(12);
        reduced_reg_9(13) <= reduced_reg_next_9(13);
        reduced_reg_9(14) <= reduced_reg_next_9(14);
        reduced_reg_9(15) <= reduced_reg_next_9(15);
        reduced_reg_9(16) <= reduced_reg_next_9(16);
        reduced_reg_9(17) <= reduced_reg_next_9(17);
        reduced_reg_9(18) <= reduced_reg_next_9(18);
        reduced_reg_9(19) <= reduced_reg_next_9(19);
        reduced_reg_9(20) <= reduced_reg_next_9(20);
        reduced_reg_9(21) <= reduced_reg_next_9(21);
        reduced_reg_9(22) <= reduced_reg_next_9(22);
        reduced_reg_9(23) <= reduced_reg_next_9(23);
        reduced_reg_9(24) <= reduced_reg_next_9(24);
        reduced_reg_9(25) <= reduced_reg_next_9(25);
        reduced_reg_9(26) <= reduced_reg_next_9(26);
        reduced_reg_9(27) <= reduced_reg_next_9(27);
        reduced_reg_9(28) <= reduced_reg_next_9(28);
        reduced_reg_9(29) <= reduced_reg_next_9(29);
        reduced_reg_9(30) <= reduced_reg_next_9(30);
        reduced_reg_9(31) <= reduced_reg_next_9(31);
        reduced_reg_9(32) <= reduced_reg_next_9(32);
        reduced_reg_9(33) <= reduced_reg_next_9(33);
        reduced_reg_9(34) <= reduced_reg_next_9(34);
        reduced_reg_9(35) <= reduced_reg_next_9(35);
        reduced_reg_9(36) <= reduced_reg_next_9(36);
        reduced_reg_9(37) <= reduced_reg_next_9(37);
        reduced_reg_9(38) <= reduced_reg_next_9(38);
        reduced_reg_9(39) <= reduced_reg_next_9(39);
        reduced_reg_9(40) <= reduced_reg_next_9(40);
        reduced_reg_9(41) <= reduced_reg_next_9(41);
        reduced_reg_9(42) <= reduced_reg_next_9(42);
        reduced_reg_9(43) <= reduced_reg_next_9(43);
        reduced_reg_9(44) <= reduced_reg_next_9(44);
        reduced_reg_9(45) <= reduced_reg_next_9(45);
        reduced_reg_9(46) <= reduced_reg_next_9(46);
        reduced_reg_9(47) <= reduced_reg_next_9(47);
        reduced_reg_9(48) <= reduced_reg_next_9(48);
        reduced_reg_9(49) <= reduced_reg_next_9(49);
        reduced_reg_9(50) <= reduced_reg_next_9(50);
        reduced_reg_9(51) <= reduced_reg_next_9(51);
        reduced_reg_9(52) <= reduced_reg_next_9(52);
        reduced_reg_9(53) <= reduced_reg_next_9(53);
        reduced_reg_9(54) <= reduced_reg_next_9(54);
        reduced_reg_9(55) <= reduced_reg_next_9(55);
        reduced_reg_9(56) <= reduced_reg_next_9(56);
        reduced_reg_9(57) <= reduced_reg_next_9(57);
        reduced_reg_9(58) <= reduced_reg_next_9(58);
        reduced_reg_9(59) <= reduced_reg_next_9(59);
      END IF;
    END IF;
  END PROCESS reduced_12_process;

  Data_Type_Conversion11_out1_1 <= reduced_reg_9(59);
  reduced_reg_next_9(0) <= Data_Type_Conversion11_out1_signed;
  reduced_reg_next_9(1) <= reduced_reg_9(0);
  reduced_reg_next_9(2) <= reduced_reg_9(1);
  reduced_reg_next_9(3) <= reduced_reg_9(2);
  reduced_reg_next_9(4) <= reduced_reg_9(3);
  reduced_reg_next_9(5) <= reduced_reg_9(4);
  reduced_reg_next_9(6) <= reduced_reg_9(5);
  reduced_reg_next_9(7) <= reduced_reg_9(6);
  reduced_reg_next_9(8) <= reduced_reg_9(7);
  reduced_reg_next_9(9) <= reduced_reg_9(8);
  reduced_reg_next_9(10) <= reduced_reg_9(9);
  reduced_reg_next_9(11) <= reduced_reg_9(10);
  reduced_reg_next_9(12) <= reduced_reg_9(11);
  reduced_reg_next_9(13) <= reduced_reg_9(12);
  reduced_reg_next_9(14) <= reduced_reg_9(13);
  reduced_reg_next_9(15) <= reduced_reg_9(14);
  reduced_reg_next_9(16) <= reduced_reg_9(15);
  reduced_reg_next_9(17) <= reduced_reg_9(16);
  reduced_reg_next_9(18) <= reduced_reg_9(17);
  reduced_reg_next_9(19) <= reduced_reg_9(18);
  reduced_reg_next_9(20) <= reduced_reg_9(19);
  reduced_reg_next_9(21) <= reduced_reg_9(20);
  reduced_reg_next_9(22) <= reduced_reg_9(21);
  reduced_reg_next_9(23) <= reduced_reg_9(22);
  reduced_reg_next_9(24) <= reduced_reg_9(23);
  reduced_reg_next_9(25) <= reduced_reg_9(24);
  reduced_reg_next_9(26) <= reduced_reg_9(25);
  reduced_reg_next_9(27) <= reduced_reg_9(26);
  reduced_reg_next_9(28) <= reduced_reg_9(27);
  reduced_reg_next_9(29) <= reduced_reg_9(28);
  reduced_reg_next_9(30) <= reduced_reg_9(29);
  reduced_reg_next_9(31) <= reduced_reg_9(30);
  reduced_reg_next_9(32) <= reduced_reg_9(31);
  reduced_reg_next_9(33) <= reduced_reg_9(32);
  reduced_reg_next_9(34) <= reduced_reg_9(33);
  reduced_reg_next_9(35) <= reduced_reg_9(34);
  reduced_reg_next_9(36) <= reduced_reg_9(35);
  reduced_reg_next_9(37) <= reduced_reg_9(36);
  reduced_reg_next_9(38) <= reduced_reg_9(37);
  reduced_reg_next_9(39) <= reduced_reg_9(38);
  reduced_reg_next_9(40) <= reduced_reg_9(39);
  reduced_reg_next_9(41) <= reduced_reg_9(40);
  reduced_reg_next_9(42) <= reduced_reg_9(41);
  reduced_reg_next_9(43) <= reduced_reg_9(42);
  reduced_reg_next_9(44) <= reduced_reg_9(43);
  reduced_reg_next_9(45) <= reduced_reg_9(44);
  reduced_reg_next_9(46) <= reduced_reg_9(45);
  reduced_reg_next_9(47) <= reduced_reg_9(46);
  reduced_reg_next_9(48) <= reduced_reg_9(47);
  reduced_reg_next_9(49) <= reduced_reg_9(48);
  reduced_reg_next_9(50) <= reduced_reg_9(49);
  reduced_reg_next_9(51) <= reduced_reg_9(50);
  reduced_reg_next_9(52) <= reduced_reg_9(51);
  reduced_reg_next_9(53) <= reduced_reg_9(52);
  reduced_reg_next_9(54) <= reduced_reg_9(53);
  reduced_reg_next_9(55) <= reduced_reg_9(54);
  reduced_reg_next_9(56) <= reduced_reg_9(55);
  reduced_reg_next_9(57) <= reduced_reg_9(56);
  reduced_reg_next_9(58) <= reduced_reg_9(57);
  reduced_reg_next_9(59) <= reduced_reg_9(58);

  omega_mech <= std_logic_vector(Data_Type_Conversion11_out1_1);

  RPM_1 <= RPM;

  Data_Type_Conversion12_out1_signed <= signed(Data_Type_Conversion12_out1);

  reduced_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_10(0) <= to_signed(16#000000#, 24);
        reduced_reg_10(1) <= to_signed(16#000000#, 24);
        reduced_reg_10(2) <= to_signed(16#000000#, 24);
        reduced_reg_10(3) <= to_signed(16#000000#, 24);
        reduced_reg_10(4) <= to_signed(16#000000#, 24);
        reduced_reg_10(5) <= to_signed(16#000000#, 24);
        reduced_reg_10(6) <= to_signed(16#000000#, 24);
        reduced_reg_10(7) <= to_signed(16#000000#, 24);
        reduced_reg_10(8) <= to_signed(16#000000#, 24);
        reduced_reg_10(9) <= to_signed(16#000000#, 24);
        reduced_reg_10(10) <= to_signed(16#000000#, 24);
        reduced_reg_10(11) <= to_signed(16#000000#, 24);
        reduced_reg_10(12) <= to_signed(16#000000#, 24);
        reduced_reg_10(13) <= to_signed(16#000000#, 24);
        reduced_reg_10(14) <= to_signed(16#000000#, 24);
        reduced_reg_10(15) <= to_signed(16#000000#, 24);
        reduced_reg_10(16) <= to_signed(16#000000#, 24);
        reduced_reg_10(17) <= to_signed(16#000000#, 24);
        reduced_reg_10(18) <= to_signed(16#000000#, 24);
        reduced_reg_10(19) <= to_signed(16#000000#, 24);
        reduced_reg_10(20) <= to_signed(16#000000#, 24);
        reduced_reg_10(21) <= to_signed(16#000000#, 24);
        reduced_reg_10(22) <= to_signed(16#000000#, 24);
        reduced_reg_10(23) <= to_signed(16#000000#, 24);
        reduced_reg_10(24) <= to_signed(16#000000#, 24);
        reduced_reg_10(25) <= to_signed(16#000000#, 24);
        reduced_reg_10(26) <= to_signed(16#000000#, 24);
        reduced_reg_10(27) <= to_signed(16#000000#, 24);
        reduced_reg_10(28) <= to_signed(16#000000#, 24);
        reduced_reg_10(29) <= to_signed(16#000000#, 24);
        reduced_reg_10(30) <= to_signed(16#000000#, 24);
        reduced_reg_10(31) <= to_signed(16#000000#, 24);
        reduced_reg_10(32) <= to_signed(16#000000#, 24);
        reduced_reg_10(33) <= to_signed(16#000000#, 24);
        reduced_reg_10(34) <= to_signed(16#000000#, 24);
        reduced_reg_10(35) <= to_signed(16#000000#, 24);
        reduced_reg_10(36) <= to_signed(16#000000#, 24);
        reduced_reg_10(37) <= to_signed(16#000000#, 24);
        reduced_reg_10(38) <= to_signed(16#000000#, 24);
        reduced_reg_10(39) <= to_signed(16#000000#, 24);
        reduced_reg_10(40) <= to_signed(16#000000#, 24);
        reduced_reg_10(41) <= to_signed(16#000000#, 24);
        reduced_reg_10(42) <= to_signed(16#000000#, 24);
        reduced_reg_10(43) <= to_signed(16#000000#, 24);
        reduced_reg_10(44) <= to_signed(16#000000#, 24);
        reduced_reg_10(45) <= to_signed(16#000000#, 24);
        reduced_reg_10(46) <= to_signed(16#000000#, 24);
        reduced_reg_10(47) <= to_signed(16#000000#, 24);
        reduced_reg_10(48) <= to_signed(16#000000#, 24);
        reduced_reg_10(49) <= to_signed(16#000000#, 24);
        reduced_reg_10(50) <= to_signed(16#000000#, 24);
        reduced_reg_10(51) <= to_signed(16#000000#, 24);
        reduced_reg_10(52) <= to_signed(16#000000#, 24);
        reduced_reg_10(53) <= to_signed(16#000000#, 24);
        reduced_reg_10(54) <= to_signed(16#000000#, 24);
        reduced_reg_10(55) <= to_signed(16#000000#, 24);
        reduced_reg_10(56) <= to_signed(16#000000#, 24);
        reduced_reg_10(57) <= to_signed(16#000000#, 24);
        reduced_reg_10(58) <= to_signed(16#000000#, 24);
        reduced_reg_10(59) <= to_signed(16#000000#, 24);
        reduced_reg_10(60) <= to_signed(16#000000#, 24);
        reduced_reg_10(61) <= to_signed(16#000000#, 24);
        reduced_reg_10(62) <= to_signed(16#000000#, 24);
        reduced_reg_10(63) <= to_signed(16#000000#, 24);
        reduced_reg_10(64) <= to_signed(16#000000#, 24);
        reduced_reg_10(65) <= to_signed(16#000000#, 24);
        reduced_reg_10(66) <= to_signed(16#000000#, 24);
        reduced_reg_10(67) <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        reduced_reg_10(0) <= reduced_reg_next_10(0);
        reduced_reg_10(1) <= reduced_reg_next_10(1);
        reduced_reg_10(2) <= reduced_reg_next_10(2);
        reduced_reg_10(3) <= reduced_reg_next_10(3);
        reduced_reg_10(4) <= reduced_reg_next_10(4);
        reduced_reg_10(5) <= reduced_reg_next_10(5);
        reduced_reg_10(6) <= reduced_reg_next_10(6);
        reduced_reg_10(7) <= reduced_reg_next_10(7);
        reduced_reg_10(8) <= reduced_reg_next_10(8);
        reduced_reg_10(9) <= reduced_reg_next_10(9);
        reduced_reg_10(10) <= reduced_reg_next_10(10);
        reduced_reg_10(11) <= reduced_reg_next_10(11);
        reduced_reg_10(12) <= reduced_reg_next_10(12);
        reduced_reg_10(13) <= reduced_reg_next_10(13);
        reduced_reg_10(14) <= reduced_reg_next_10(14);
        reduced_reg_10(15) <= reduced_reg_next_10(15);
        reduced_reg_10(16) <= reduced_reg_next_10(16);
        reduced_reg_10(17) <= reduced_reg_next_10(17);
        reduced_reg_10(18) <= reduced_reg_next_10(18);
        reduced_reg_10(19) <= reduced_reg_next_10(19);
        reduced_reg_10(20) <= reduced_reg_next_10(20);
        reduced_reg_10(21) <= reduced_reg_next_10(21);
        reduced_reg_10(22) <= reduced_reg_next_10(22);
        reduced_reg_10(23) <= reduced_reg_next_10(23);
        reduced_reg_10(24) <= reduced_reg_next_10(24);
        reduced_reg_10(25) <= reduced_reg_next_10(25);
        reduced_reg_10(26) <= reduced_reg_next_10(26);
        reduced_reg_10(27) <= reduced_reg_next_10(27);
        reduced_reg_10(28) <= reduced_reg_next_10(28);
        reduced_reg_10(29) <= reduced_reg_next_10(29);
        reduced_reg_10(30) <= reduced_reg_next_10(30);
        reduced_reg_10(31) <= reduced_reg_next_10(31);
        reduced_reg_10(32) <= reduced_reg_next_10(32);
        reduced_reg_10(33) <= reduced_reg_next_10(33);
        reduced_reg_10(34) <= reduced_reg_next_10(34);
        reduced_reg_10(35) <= reduced_reg_next_10(35);
        reduced_reg_10(36) <= reduced_reg_next_10(36);
        reduced_reg_10(37) <= reduced_reg_next_10(37);
        reduced_reg_10(38) <= reduced_reg_next_10(38);
        reduced_reg_10(39) <= reduced_reg_next_10(39);
        reduced_reg_10(40) <= reduced_reg_next_10(40);
        reduced_reg_10(41) <= reduced_reg_next_10(41);
        reduced_reg_10(42) <= reduced_reg_next_10(42);
        reduced_reg_10(43) <= reduced_reg_next_10(43);
        reduced_reg_10(44) <= reduced_reg_next_10(44);
        reduced_reg_10(45) <= reduced_reg_next_10(45);
        reduced_reg_10(46) <= reduced_reg_next_10(46);
        reduced_reg_10(47) <= reduced_reg_next_10(47);
        reduced_reg_10(48) <= reduced_reg_next_10(48);
        reduced_reg_10(49) <= reduced_reg_next_10(49);
        reduced_reg_10(50) <= reduced_reg_next_10(50);
        reduced_reg_10(51) <= reduced_reg_next_10(51);
        reduced_reg_10(52) <= reduced_reg_next_10(52);
        reduced_reg_10(53) <= reduced_reg_next_10(53);
        reduced_reg_10(54) <= reduced_reg_next_10(54);
        reduced_reg_10(55) <= reduced_reg_next_10(55);
        reduced_reg_10(56) <= reduced_reg_next_10(56);
        reduced_reg_10(57) <= reduced_reg_next_10(57);
        reduced_reg_10(58) <= reduced_reg_next_10(58);
        reduced_reg_10(59) <= reduced_reg_next_10(59);
        reduced_reg_10(60) <= reduced_reg_next_10(60);
        reduced_reg_10(61) <= reduced_reg_next_10(61);
        reduced_reg_10(62) <= reduced_reg_next_10(62);
        reduced_reg_10(63) <= reduced_reg_next_10(63);
        reduced_reg_10(64) <= reduced_reg_next_10(64);
        reduced_reg_10(65) <= reduced_reg_next_10(65);
        reduced_reg_10(66) <= reduced_reg_next_10(66);
        reduced_reg_10(67) <= reduced_reg_next_10(67);
      END IF;
    END IF;
  END PROCESS reduced_13_process;

  Data_Type_Conversion12_out1_1 <= reduced_reg_10(67);
  reduced_reg_next_10(0) <= Data_Type_Conversion12_out1_signed;
  reduced_reg_next_10(1) <= reduced_reg_10(0);
  reduced_reg_next_10(2) <= reduced_reg_10(1);
  reduced_reg_next_10(3) <= reduced_reg_10(2);
  reduced_reg_next_10(4) <= reduced_reg_10(3);
  reduced_reg_next_10(5) <= reduced_reg_10(4);
  reduced_reg_next_10(6) <= reduced_reg_10(5);
  reduced_reg_next_10(7) <= reduced_reg_10(6);
  reduced_reg_next_10(8) <= reduced_reg_10(7);
  reduced_reg_next_10(9) <= reduced_reg_10(8);
  reduced_reg_next_10(10) <= reduced_reg_10(9);
  reduced_reg_next_10(11) <= reduced_reg_10(10);
  reduced_reg_next_10(12) <= reduced_reg_10(11);
  reduced_reg_next_10(13) <= reduced_reg_10(12);
  reduced_reg_next_10(14) <= reduced_reg_10(13);
  reduced_reg_next_10(15) <= reduced_reg_10(14);
  reduced_reg_next_10(16) <= reduced_reg_10(15);
  reduced_reg_next_10(17) <= reduced_reg_10(16);
  reduced_reg_next_10(18) <= reduced_reg_10(17);
  reduced_reg_next_10(19) <= reduced_reg_10(18);
  reduced_reg_next_10(20) <= reduced_reg_10(19);
  reduced_reg_next_10(21) <= reduced_reg_10(20);
  reduced_reg_next_10(22) <= reduced_reg_10(21);
  reduced_reg_next_10(23) <= reduced_reg_10(22);
  reduced_reg_next_10(24) <= reduced_reg_10(23);
  reduced_reg_next_10(25) <= reduced_reg_10(24);
  reduced_reg_next_10(26) <= reduced_reg_10(25);
  reduced_reg_next_10(27) <= reduced_reg_10(26);
  reduced_reg_next_10(28) <= reduced_reg_10(27);
  reduced_reg_next_10(29) <= reduced_reg_10(28);
  reduced_reg_next_10(30) <= reduced_reg_10(29);
  reduced_reg_next_10(31) <= reduced_reg_10(30);
  reduced_reg_next_10(32) <= reduced_reg_10(31);
  reduced_reg_next_10(33) <= reduced_reg_10(32);
  reduced_reg_next_10(34) <= reduced_reg_10(33);
  reduced_reg_next_10(35) <= reduced_reg_10(34);
  reduced_reg_next_10(36) <= reduced_reg_10(35);
  reduced_reg_next_10(37) <= reduced_reg_10(36);
  reduced_reg_next_10(38) <= reduced_reg_10(37);
  reduced_reg_next_10(39) <= reduced_reg_10(38);
  reduced_reg_next_10(40) <= reduced_reg_10(39);
  reduced_reg_next_10(41) <= reduced_reg_10(40);
  reduced_reg_next_10(42) <= reduced_reg_10(41);
  reduced_reg_next_10(43) <= reduced_reg_10(42);
  reduced_reg_next_10(44) <= reduced_reg_10(43);
  reduced_reg_next_10(45) <= reduced_reg_10(44);
  reduced_reg_next_10(46) <= reduced_reg_10(45);
  reduced_reg_next_10(47) <= reduced_reg_10(46);
  reduced_reg_next_10(48) <= reduced_reg_10(47);
  reduced_reg_next_10(49) <= reduced_reg_10(48);
  reduced_reg_next_10(50) <= reduced_reg_10(49);
  reduced_reg_next_10(51) <= reduced_reg_10(50);
  reduced_reg_next_10(52) <= reduced_reg_10(51);
  reduced_reg_next_10(53) <= reduced_reg_10(52);
  reduced_reg_next_10(54) <= reduced_reg_10(53);
  reduced_reg_next_10(55) <= reduced_reg_10(54);
  reduced_reg_next_10(56) <= reduced_reg_10(55);
  reduced_reg_next_10(57) <= reduced_reg_10(56);
  reduced_reg_next_10(58) <= reduced_reg_10(57);
  reduced_reg_next_10(59) <= reduced_reg_10(58);
  reduced_reg_next_10(60) <= reduced_reg_10(59);
  reduced_reg_next_10(61) <= reduced_reg_10(60);
  reduced_reg_next_10(62) <= reduced_reg_10(61);
  reduced_reg_next_10(63) <= reduced_reg_10(62);
  reduced_reg_next_10(64) <= reduced_reg_10(63);
  reduced_reg_next_10(65) <= reduced_reg_10(64);
  reduced_reg_next_10(66) <= reduced_reg_10(65);
  reduced_reg_next_10(67) <= reduced_reg_10(66);

  rpm_mech <= std_logic_vector(Data_Type_Conversion12_out1_1);

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch21_reg(0) <= to_signed(0, 32);
        delayMatch21_reg(1) <= to_signed(0, 32);
        delayMatch21_reg(2) <= to_signed(0, 32);
        delayMatch21_reg(3) <= to_signed(0, 32);
        delayMatch21_reg(4) <= to_signed(0, 32);
        delayMatch21_reg(5) <= to_signed(0, 32);
        delayMatch21_reg(6) <= to_signed(0, 32);
        delayMatch21_reg(7) <= to_signed(0, 32);
        delayMatch21_reg(8) <= to_signed(0, 32);
        delayMatch21_reg(9) <= to_signed(0, 32);
        delayMatch21_reg(10) <= to_signed(0, 32);
        delayMatch21_reg(11) <= to_signed(0, 32);
        delayMatch21_reg(12) <= to_signed(0, 32);
        delayMatch21_reg(13) <= to_signed(0, 32);
        delayMatch21_reg(14) <= to_signed(0, 32);
        delayMatch21_reg(15) <= to_signed(0, 32);
        delayMatch21_reg(16) <= to_signed(0, 32);
        delayMatch21_reg(17) <= to_signed(0, 32);
        delayMatch21_reg(18) <= to_signed(0, 32);
        delayMatch21_reg(19) <= to_signed(0, 32);
        delayMatch21_reg(20) <= to_signed(0, 32);
        delayMatch21_reg(21) <= to_signed(0, 32);
        delayMatch21_reg(22) <= to_signed(0, 32);
        delayMatch21_reg(23) <= to_signed(0, 32);
        delayMatch21_reg(24) <= to_signed(0, 32);
        delayMatch21_reg(25) <= to_signed(0, 32);
        delayMatch21_reg(26) <= to_signed(0, 32);
        delayMatch21_reg(27) <= to_signed(0, 32);
        delayMatch21_reg(28) <= to_signed(0, 32);
        delayMatch21_reg(29) <= to_signed(0, 32);
        delayMatch21_reg(30) <= to_signed(0, 32);
        delayMatch21_reg(31) <= to_signed(0, 32);
        delayMatch21_reg(32) <= to_signed(0, 32);
        delayMatch21_reg(33) <= to_signed(0, 32);
        delayMatch21_reg(34) <= to_signed(0, 32);
        delayMatch21_reg(35) <= to_signed(0, 32);
        delayMatch21_reg(36) <= to_signed(0, 32);
        delayMatch21_reg(37) <= to_signed(0, 32);
        delayMatch21_reg(38) <= to_signed(0, 32);
        delayMatch21_reg(39) <= to_signed(0, 32);
        delayMatch21_reg(40) <= to_signed(0, 32);
        delayMatch21_reg(41) <= to_signed(0, 32);
        delayMatch21_reg(42) <= to_signed(0, 32);
        delayMatch21_reg(43) <= to_signed(0, 32);
        delayMatch21_reg(44) <= to_signed(0, 32);
        delayMatch21_reg(45) <= to_signed(0, 32);
        delayMatch21_reg(46) <= to_signed(0, 32);
        delayMatch21_reg(47) <= to_signed(0, 32);
        delayMatch21_reg(48) <= to_signed(0, 32);
        delayMatch21_reg(49) <= to_signed(0, 32);
        delayMatch21_reg(50) <= to_signed(0, 32);
        delayMatch21_reg(51) <= to_signed(0, 32);
        delayMatch21_reg(52) <= to_signed(0, 32);
        delayMatch21_reg(53) <= to_signed(0, 32);
        delayMatch21_reg(54) <= to_signed(0, 32);
        delayMatch21_reg(55) <= to_signed(0, 32);
        delayMatch21_reg(56) <= to_signed(0, 32);
        delayMatch21_reg(57) <= to_signed(0, 32);
        delayMatch21_reg(58) <= to_signed(0, 32);
        delayMatch21_reg(59) <= to_signed(0, 32);
        delayMatch21_reg(60) <= to_signed(0, 32);
        delayMatch21_reg(61) <= to_signed(0, 32);
        delayMatch21_reg(62) <= to_signed(0, 32);
        delayMatch21_reg(63) <= to_signed(0, 32);
        delayMatch21_reg(64) <= to_signed(0, 32);
        delayMatch21_reg(65) <= to_signed(0, 32);
        delayMatch21_reg(66) <= to_signed(0, 32);
        delayMatch21_reg(67) <= to_signed(0, 32);
        delayMatch21_reg(68) <= to_signed(0, 32);
        delayMatch21_reg(69) <= to_signed(0, 32);
        delayMatch21_reg(70) <= to_signed(0, 32);
        delayMatch21_reg(71) <= to_signed(0, 32);
        delayMatch21_reg(72) <= to_signed(0, 32);
        delayMatch21_reg(73) <= to_signed(0, 32);
        delayMatch21_reg(74) <= to_signed(0, 32);
        delayMatch21_reg(75) <= to_signed(0, 32);
        delayMatch21_reg(76) <= to_signed(0, 32);
        delayMatch21_reg(77) <= to_signed(0, 32);
        delayMatch21_reg(78) <= to_signed(0, 32);
        delayMatch21_reg(79) <= to_signed(0, 32);
        delayMatch21_reg(80) <= to_signed(0, 32);
        delayMatch21_reg(81) <= to_signed(0, 32);
        delayMatch21_reg(82) <= to_signed(0, 32);
        delayMatch21_reg(83) <= to_signed(0, 32);
        delayMatch21_reg(84) <= to_signed(0, 32);
        delayMatch21_reg(85) <= to_signed(0, 32);
        delayMatch21_reg(86) <= to_signed(0, 32);
        delayMatch21_reg(87) <= to_signed(0, 32);
        delayMatch21_reg(88) <= to_signed(0, 32);
        delayMatch21_reg(89) <= to_signed(0, 32);
        delayMatch21_reg(90) <= to_signed(0, 32);
        delayMatch21_reg(91) <= to_signed(0, 32);
        delayMatch21_reg(92) <= to_signed(0, 32);
        delayMatch21_reg(93) <= to_signed(0, 32);
        delayMatch21_reg(94) <= to_signed(0, 32);
        delayMatch21_reg(95) <= to_signed(0, 32);
        delayMatch21_reg(96) <= to_signed(0, 32);
        delayMatch21_reg(97) <= to_signed(0, 32);
        delayMatch21_reg(98) <= to_signed(0, 32);
        delayMatch21_reg(99) <= to_signed(0, 32);
        delayMatch21_reg(100) <= to_signed(0, 32);
        delayMatch21_reg(101) <= to_signed(0, 32);
        delayMatch21_reg(102) <= to_signed(0, 32);
        delayMatch21_reg(103) <= to_signed(0, 32);
        delayMatch21_reg(104) <= to_signed(0, 32);
        delayMatch21_reg(105) <= to_signed(0, 32);
        delayMatch21_reg(106) <= to_signed(0, 32);
        delayMatch21_reg(107) <= to_signed(0, 32);
        delayMatch21_reg(108) <= to_signed(0, 32);
        delayMatch21_reg(109) <= to_signed(0, 32);
        delayMatch21_reg(110) <= to_signed(0, 32);
        delayMatch21_reg(111) <= to_signed(0, 32);
        delayMatch21_reg(112) <= to_signed(0, 32);
        delayMatch21_reg(113) <= to_signed(0, 32);
        delayMatch21_reg(114) <= to_signed(0, 32);
        delayMatch21_reg(115) <= to_signed(0, 32);
        delayMatch21_reg(116) <= to_signed(0, 32);
        delayMatch21_reg(117) <= to_signed(0, 32);
        delayMatch21_reg(118) <= to_signed(0, 32);
        delayMatch21_reg(119) <= to_signed(0, 32);
        delayMatch21_reg(120) <= to_signed(0, 32);
        delayMatch21_reg(121) <= to_signed(0, 32);
        delayMatch21_reg(122) <= to_signed(0, 32);
        delayMatch21_reg(123) <= to_signed(0, 32);
        delayMatch21_reg(124) <= to_signed(0, 32);
        delayMatch21_reg(125) <= to_signed(0, 32);
        delayMatch21_reg(126) <= to_signed(0, 32);
        delayMatch21_reg(127) <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        delayMatch21_reg(0) <= delayMatch21_reg_next(0);
        delayMatch21_reg(1) <= delayMatch21_reg_next(1);
        delayMatch21_reg(2) <= delayMatch21_reg_next(2);
        delayMatch21_reg(3) <= delayMatch21_reg_next(3);
        delayMatch21_reg(4) <= delayMatch21_reg_next(4);
        delayMatch21_reg(5) <= delayMatch21_reg_next(5);
        delayMatch21_reg(6) <= delayMatch21_reg_next(6);
        delayMatch21_reg(7) <= delayMatch21_reg_next(7);
        delayMatch21_reg(8) <= delayMatch21_reg_next(8);
        delayMatch21_reg(9) <= delayMatch21_reg_next(9);
        delayMatch21_reg(10) <= delayMatch21_reg_next(10);
        delayMatch21_reg(11) <= delayMatch21_reg_next(11);
        delayMatch21_reg(12) <= delayMatch21_reg_next(12);
        delayMatch21_reg(13) <= delayMatch21_reg_next(13);
        delayMatch21_reg(14) <= delayMatch21_reg_next(14);
        delayMatch21_reg(15) <= delayMatch21_reg_next(15);
        delayMatch21_reg(16) <= delayMatch21_reg_next(16);
        delayMatch21_reg(17) <= delayMatch21_reg_next(17);
        delayMatch21_reg(18) <= delayMatch21_reg_next(18);
        delayMatch21_reg(19) <= delayMatch21_reg_next(19);
        delayMatch21_reg(20) <= delayMatch21_reg_next(20);
        delayMatch21_reg(21) <= delayMatch21_reg_next(21);
        delayMatch21_reg(22) <= delayMatch21_reg_next(22);
        delayMatch21_reg(23) <= delayMatch21_reg_next(23);
        delayMatch21_reg(24) <= delayMatch21_reg_next(24);
        delayMatch21_reg(25) <= delayMatch21_reg_next(25);
        delayMatch21_reg(26) <= delayMatch21_reg_next(26);
        delayMatch21_reg(27) <= delayMatch21_reg_next(27);
        delayMatch21_reg(28) <= delayMatch21_reg_next(28);
        delayMatch21_reg(29) <= delayMatch21_reg_next(29);
        delayMatch21_reg(30) <= delayMatch21_reg_next(30);
        delayMatch21_reg(31) <= delayMatch21_reg_next(31);
        delayMatch21_reg(32) <= delayMatch21_reg_next(32);
        delayMatch21_reg(33) <= delayMatch21_reg_next(33);
        delayMatch21_reg(34) <= delayMatch21_reg_next(34);
        delayMatch21_reg(35) <= delayMatch21_reg_next(35);
        delayMatch21_reg(36) <= delayMatch21_reg_next(36);
        delayMatch21_reg(37) <= delayMatch21_reg_next(37);
        delayMatch21_reg(38) <= delayMatch21_reg_next(38);
        delayMatch21_reg(39) <= delayMatch21_reg_next(39);
        delayMatch21_reg(40) <= delayMatch21_reg_next(40);
        delayMatch21_reg(41) <= delayMatch21_reg_next(41);
        delayMatch21_reg(42) <= delayMatch21_reg_next(42);
        delayMatch21_reg(43) <= delayMatch21_reg_next(43);
        delayMatch21_reg(44) <= delayMatch21_reg_next(44);
        delayMatch21_reg(45) <= delayMatch21_reg_next(45);
        delayMatch21_reg(46) <= delayMatch21_reg_next(46);
        delayMatch21_reg(47) <= delayMatch21_reg_next(47);
        delayMatch21_reg(48) <= delayMatch21_reg_next(48);
        delayMatch21_reg(49) <= delayMatch21_reg_next(49);
        delayMatch21_reg(50) <= delayMatch21_reg_next(50);
        delayMatch21_reg(51) <= delayMatch21_reg_next(51);
        delayMatch21_reg(52) <= delayMatch21_reg_next(52);
        delayMatch21_reg(53) <= delayMatch21_reg_next(53);
        delayMatch21_reg(54) <= delayMatch21_reg_next(54);
        delayMatch21_reg(55) <= delayMatch21_reg_next(55);
        delayMatch21_reg(56) <= delayMatch21_reg_next(56);
        delayMatch21_reg(57) <= delayMatch21_reg_next(57);
        delayMatch21_reg(58) <= delayMatch21_reg_next(58);
        delayMatch21_reg(59) <= delayMatch21_reg_next(59);
        delayMatch21_reg(60) <= delayMatch21_reg_next(60);
        delayMatch21_reg(61) <= delayMatch21_reg_next(61);
        delayMatch21_reg(62) <= delayMatch21_reg_next(62);
        delayMatch21_reg(63) <= delayMatch21_reg_next(63);
        delayMatch21_reg(64) <= delayMatch21_reg_next(64);
        delayMatch21_reg(65) <= delayMatch21_reg_next(65);
        delayMatch21_reg(66) <= delayMatch21_reg_next(66);
        delayMatch21_reg(67) <= delayMatch21_reg_next(67);
        delayMatch21_reg(68) <= delayMatch21_reg_next(68);
        delayMatch21_reg(69) <= delayMatch21_reg_next(69);
        delayMatch21_reg(70) <= delayMatch21_reg_next(70);
        delayMatch21_reg(71) <= delayMatch21_reg_next(71);
        delayMatch21_reg(72) <= delayMatch21_reg_next(72);
        delayMatch21_reg(73) <= delayMatch21_reg_next(73);
        delayMatch21_reg(74) <= delayMatch21_reg_next(74);
        delayMatch21_reg(75) <= delayMatch21_reg_next(75);
        delayMatch21_reg(76) <= delayMatch21_reg_next(76);
        delayMatch21_reg(77) <= delayMatch21_reg_next(77);
        delayMatch21_reg(78) <= delayMatch21_reg_next(78);
        delayMatch21_reg(79) <= delayMatch21_reg_next(79);
        delayMatch21_reg(80) <= delayMatch21_reg_next(80);
        delayMatch21_reg(81) <= delayMatch21_reg_next(81);
        delayMatch21_reg(82) <= delayMatch21_reg_next(82);
        delayMatch21_reg(83) <= delayMatch21_reg_next(83);
        delayMatch21_reg(84) <= delayMatch21_reg_next(84);
        delayMatch21_reg(85) <= delayMatch21_reg_next(85);
        delayMatch21_reg(86) <= delayMatch21_reg_next(86);
        delayMatch21_reg(87) <= delayMatch21_reg_next(87);
        delayMatch21_reg(88) <= delayMatch21_reg_next(88);
        delayMatch21_reg(89) <= delayMatch21_reg_next(89);
        delayMatch21_reg(90) <= delayMatch21_reg_next(90);
        delayMatch21_reg(91) <= delayMatch21_reg_next(91);
        delayMatch21_reg(92) <= delayMatch21_reg_next(92);
        delayMatch21_reg(93) <= delayMatch21_reg_next(93);
        delayMatch21_reg(94) <= delayMatch21_reg_next(94);
        delayMatch21_reg(95) <= delayMatch21_reg_next(95);
        delayMatch21_reg(96) <= delayMatch21_reg_next(96);
        delayMatch21_reg(97) <= delayMatch21_reg_next(97);
        delayMatch21_reg(98) <= delayMatch21_reg_next(98);
        delayMatch21_reg(99) <= delayMatch21_reg_next(99);
        delayMatch21_reg(100) <= delayMatch21_reg_next(100);
        delayMatch21_reg(101) <= delayMatch21_reg_next(101);
        delayMatch21_reg(102) <= delayMatch21_reg_next(102);
        delayMatch21_reg(103) <= delayMatch21_reg_next(103);
        delayMatch21_reg(104) <= delayMatch21_reg_next(104);
        delayMatch21_reg(105) <= delayMatch21_reg_next(105);
        delayMatch21_reg(106) <= delayMatch21_reg_next(106);
        delayMatch21_reg(107) <= delayMatch21_reg_next(107);
        delayMatch21_reg(108) <= delayMatch21_reg_next(108);
        delayMatch21_reg(109) <= delayMatch21_reg_next(109);
        delayMatch21_reg(110) <= delayMatch21_reg_next(110);
        delayMatch21_reg(111) <= delayMatch21_reg_next(111);
        delayMatch21_reg(112) <= delayMatch21_reg_next(112);
        delayMatch21_reg(113) <= delayMatch21_reg_next(113);
        delayMatch21_reg(114) <= delayMatch21_reg_next(114);
        delayMatch21_reg(115) <= delayMatch21_reg_next(115);
        delayMatch21_reg(116) <= delayMatch21_reg_next(116);
        delayMatch21_reg(117) <= delayMatch21_reg_next(117);
        delayMatch21_reg(118) <= delayMatch21_reg_next(118);
        delayMatch21_reg(119) <= delayMatch21_reg_next(119);
        delayMatch21_reg(120) <= delayMatch21_reg_next(120);
        delayMatch21_reg(121) <= delayMatch21_reg_next(121);
        delayMatch21_reg(122) <= delayMatch21_reg_next(122);
        delayMatch21_reg(123) <= delayMatch21_reg_next(123);
        delayMatch21_reg(124) <= delayMatch21_reg_next(124);
        delayMatch21_reg(125) <= delayMatch21_reg_next(125);
        delayMatch21_reg(126) <= delayMatch21_reg_next(126);
        delayMatch21_reg(127) <= delayMatch21_reg_next(127);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  Delay6_out1 <= delayMatch21_reg(127);
  delayMatch21_reg_next(0) <= cnt_out_signed;
  delayMatch21_reg_next(1) <= delayMatch21_reg(0);
  delayMatch21_reg_next(2) <= delayMatch21_reg(1);
  delayMatch21_reg_next(3) <= delayMatch21_reg(2);
  delayMatch21_reg_next(4) <= delayMatch21_reg(3);
  delayMatch21_reg_next(5) <= delayMatch21_reg(4);
  delayMatch21_reg_next(6) <= delayMatch21_reg(5);
  delayMatch21_reg_next(7) <= delayMatch21_reg(6);
  delayMatch21_reg_next(8) <= delayMatch21_reg(7);
  delayMatch21_reg_next(9) <= delayMatch21_reg(8);
  delayMatch21_reg_next(10) <= delayMatch21_reg(9);
  delayMatch21_reg_next(11) <= delayMatch21_reg(10);
  delayMatch21_reg_next(12) <= delayMatch21_reg(11);
  delayMatch21_reg_next(13) <= delayMatch21_reg(12);
  delayMatch21_reg_next(14) <= delayMatch21_reg(13);
  delayMatch21_reg_next(15) <= delayMatch21_reg(14);
  delayMatch21_reg_next(16) <= delayMatch21_reg(15);
  delayMatch21_reg_next(17) <= delayMatch21_reg(16);
  delayMatch21_reg_next(18) <= delayMatch21_reg(17);
  delayMatch21_reg_next(19) <= delayMatch21_reg(18);
  delayMatch21_reg_next(20) <= delayMatch21_reg(19);
  delayMatch21_reg_next(21) <= delayMatch21_reg(20);
  delayMatch21_reg_next(22) <= delayMatch21_reg(21);
  delayMatch21_reg_next(23) <= delayMatch21_reg(22);
  delayMatch21_reg_next(24) <= delayMatch21_reg(23);
  delayMatch21_reg_next(25) <= delayMatch21_reg(24);
  delayMatch21_reg_next(26) <= delayMatch21_reg(25);
  delayMatch21_reg_next(27) <= delayMatch21_reg(26);
  delayMatch21_reg_next(28) <= delayMatch21_reg(27);
  delayMatch21_reg_next(29) <= delayMatch21_reg(28);
  delayMatch21_reg_next(30) <= delayMatch21_reg(29);
  delayMatch21_reg_next(31) <= delayMatch21_reg(30);
  delayMatch21_reg_next(32) <= delayMatch21_reg(31);
  delayMatch21_reg_next(33) <= delayMatch21_reg(32);
  delayMatch21_reg_next(34) <= delayMatch21_reg(33);
  delayMatch21_reg_next(35) <= delayMatch21_reg(34);
  delayMatch21_reg_next(36) <= delayMatch21_reg(35);
  delayMatch21_reg_next(37) <= delayMatch21_reg(36);
  delayMatch21_reg_next(38) <= delayMatch21_reg(37);
  delayMatch21_reg_next(39) <= delayMatch21_reg(38);
  delayMatch21_reg_next(40) <= delayMatch21_reg(39);
  delayMatch21_reg_next(41) <= delayMatch21_reg(40);
  delayMatch21_reg_next(42) <= delayMatch21_reg(41);
  delayMatch21_reg_next(43) <= delayMatch21_reg(42);
  delayMatch21_reg_next(44) <= delayMatch21_reg(43);
  delayMatch21_reg_next(45) <= delayMatch21_reg(44);
  delayMatch21_reg_next(46) <= delayMatch21_reg(45);
  delayMatch21_reg_next(47) <= delayMatch21_reg(46);
  delayMatch21_reg_next(48) <= delayMatch21_reg(47);
  delayMatch21_reg_next(49) <= delayMatch21_reg(48);
  delayMatch21_reg_next(50) <= delayMatch21_reg(49);
  delayMatch21_reg_next(51) <= delayMatch21_reg(50);
  delayMatch21_reg_next(52) <= delayMatch21_reg(51);
  delayMatch21_reg_next(53) <= delayMatch21_reg(52);
  delayMatch21_reg_next(54) <= delayMatch21_reg(53);
  delayMatch21_reg_next(55) <= delayMatch21_reg(54);
  delayMatch21_reg_next(56) <= delayMatch21_reg(55);
  delayMatch21_reg_next(57) <= delayMatch21_reg(56);
  delayMatch21_reg_next(58) <= delayMatch21_reg(57);
  delayMatch21_reg_next(59) <= delayMatch21_reg(58);
  delayMatch21_reg_next(60) <= delayMatch21_reg(59);
  delayMatch21_reg_next(61) <= delayMatch21_reg(60);
  delayMatch21_reg_next(62) <= delayMatch21_reg(61);
  delayMatch21_reg_next(63) <= delayMatch21_reg(62);
  delayMatch21_reg_next(64) <= delayMatch21_reg(63);
  delayMatch21_reg_next(65) <= delayMatch21_reg(64);
  delayMatch21_reg_next(66) <= delayMatch21_reg(65);
  delayMatch21_reg_next(67) <= delayMatch21_reg(66);
  delayMatch21_reg_next(68) <= delayMatch21_reg(67);
  delayMatch21_reg_next(69) <= delayMatch21_reg(68);
  delayMatch21_reg_next(70) <= delayMatch21_reg(69);
  delayMatch21_reg_next(71) <= delayMatch21_reg(70);
  delayMatch21_reg_next(72) <= delayMatch21_reg(71);
  delayMatch21_reg_next(73) <= delayMatch21_reg(72);
  delayMatch21_reg_next(74) <= delayMatch21_reg(73);
  delayMatch21_reg_next(75) <= delayMatch21_reg(74);
  delayMatch21_reg_next(76) <= delayMatch21_reg(75);
  delayMatch21_reg_next(77) <= delayMatch21_reg(76);
  delayMatch21_reg_next(78) <= delayMatch21_reg(77);
  delayMatch21_reg_next(79) <= delayMatch21_reg(78);
  delayMatch21_reg_next(80) <= delayMatch21_reg(79);
  delayMatch21_reg_next(81) <= delayMatch21_reg(80);
  delayMatch21_reg_next(82) <= delayMatch21_reg(81);
  delayMatch21_reg_next(83) <= delayMatch21_reg(82);
  delayMatch21_reg_next(84) <= delayMatch21_reg(83);
  delayMatch21_reg_next(85) <= delayMatch21_reg(84);
  delayMatch21_reg_next(86) <= delayMatch21_reg(85);
  delayMatch21_reg_next(87) <= delayMatch21_reg(86);
  delayMatch21_reg_next(88) <= delayMatch21_reg(87);
  delayMatch21_reg_next(89) <= delayMatch21_reg(88);
  delayMatch21_reg_next(90) <= delayMatch21_reg(89);
  delayMatch21_reg_next(91) <= delayMatch21_reg(90);
  delayMatch21_reg_next(92) <= delayMatch21_reg(91);
  delayMatch21_reg_next(93) <= delayMatch21_reg(92);
  delayMatch21_reg_next(94) <= delayMatch21_reg(93);
  delayMatch21_reg_next(95) <= delayMatch21_reg(94);
  delayMatch21_reg_next(96) <= delayMatch21_reg(95);
  delayMatch21_reg_next(97) <= delayMatch21_reg(96);
  delayMatch21_reg_next(98) <= delayMatch21_reg(97);
  delayMatch21_reg_next(99) <= delayMatch21_reg(98);
  delayMatch21_reg_next(100) <= delayMatch21_reg(99);
  delayMatch21_reg_next(101) <= delayMatch21_reg(100);
  delayMatch21_reg_next(102) <= delayMatch21_reg(101);
  delayMatch21_reg_next(103) <= delayMatch21_reg(102);
  delayMatch21_reg_next(104) <= delayMatch21_reg(103);
  delayMatch21_reg_next(105) <= delayMatch21_reg(104);
  delayMatch21_reg_next(106) <= delayMatch21_reg(105);
  delayMatch21_reg_next(107) <= delayMatch21_reg(106);
  delayMatch21_reg_next(108) <= delayMatch21_reg(107);
  delayMatch21_reg_next(109) <= delayMatch21_reg(108);
  delayMatch21_reg_next(110) <= delayMatch21_reg(109);
  delayMatch21_reg_next(111) <= delayMatch21_reg(110);
  delayMatch21_reg_next(112) <= delayMatch21_reg(111);
  delayMatch21_reg_next(113) <= delayMatch21_reg(112);
  delayMatch21_reg_next(114) <= delayMatch21_reg(113);
  delayMatch21_reg_next(115) <= delayMatch21_reg(114);
  delayMatch21_reg_next(116) <= delayMatch21_reg(115);
  delayMatch21_reg_next(117) <= delayMatch21_reg(116);
  delayMatch21_reg_next(118) <= delayMatch21_reg(117);
  delayMatch21_reg_next(119) <= delayMatch21_reg(118);
  delayMatch21_reg_next(120) <= delayMatch21_reg(119);
  delayMatch21_reg_next(121) <= delayMatch21_reg(120);
  delayMatch21_reg_next(122) <= delayMatch21_reg(121);
  delayMatch21_reg_next(123) <= delayMatch21_reg(122);
  delayMatch21_reg_next(124) <= delayMatch21_reg(123);
  delayMatch21_reg_next(125) <= delayMatch21_reg(124);
  delayMatch21_reg_next(126) <= delayMatch21_reg(125);
  delayMatch21_reg_next(127) <= delayMatch21_reg(126);

  cnt_AXI <= std_logic_vector(Delay6_out1);

  reduced_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_11(0) <= '0';
        reduced_reg_11(1) <= '0';
        reduced_reg_11(2) <= '0';
        reduced_reg_11(3) <= '0';
        reduced_reg_11(4) <= '0';
        reduced_reg_11(5) <= '0';
        reduced_reg_11(6) <= '0';
        reduced_reg_11(7) <= '0';
        reduced_reg_11(8) <= '0';
        reduced_reg_11(9) <= '0';
        reduced_reg_11(10) <= '0';
        reduced_reg_11(11) <= '0';
        reduced_reg_11(12) <= '0';
        reduced_reg_11(13) <= '0';
        reduced_reg_11(14) <= '0';
        reduced_reg_11(15) <= '0';
        reduced_reg_11(16) <= '0';
        reduced_reg_11(17) <= '0';
        reduced_reg_11(18) <= '0';
        reduced_reg_11(19) <= '0';
        reduced_reg_11(20) <= '0';
        reduced_reg_11(21) <= '0';
        reduced_reg_11(22) <= '0';
        reduced_reg_11(23) <= '0';
        reduced_reg_11(24) <= '0';
        reduced_reg_11(25) <= '0';
        reduced_reg_11(26) <= '0';
        reduced_reg_11(27) <= '0';
        reduced_reg_11(28) <= '0';
        reduced_reg_11(29) <= '0';
        reduced_reg_11(30) <= '0';
        reduced_reg_11(31) <= '0';
        reduced_reg_11(32) <= '0';
        reduced_reg_11(33) <= '0';
        reduced_reg_11(34) <= '0';
        reduced_reg_11(35) <= '0';
        reduced_reg_11(36) <= '0';
        reduced_reg_11(37) <= '0';
        reduced_reg_11(38) <= '0';
        reduced_reg_11(39) <= '0';
        reduced_reg_11(40) <= '0';
        reduced_reg_11(41) <= '0';
        reduced_reg_11(42) <= '0';
        reduced_reg_11(43) <= '0';
        reduced_reg_11(44) <= '0';
        reduced_reg_11(45) <= '0';
        reduced_reg_11(46) <= '0';
        reduced_reg_11(47) <= '0';
        reduced_reg_11(48) <= '0';
        reduced_reg_11(49) <= '0';
        reduced_reg_11(50) <= '0';
        reduced_reg_11(51) <= '0';
        reduced_reg_11(52) <= '0';
        reduced_reg_11(53) <= '0';
        reduced_reg_11(54) <= '0';
        reduced_reg_11(55) <= '0';
        reduced_reg_11(56) <= '0';
        reduced_reg_11(57) <= '0';
        reduced_reg_11(58) <= '0';
        reduced_reg_11(59) <= '0';
        reduced_reg_11(60) <= '0';
        reduced_reg_11(61) <= '0';
        reduced_reg_11(62) <= '0';
        reduced_reg_11(63) <= '0';
        reduced_reg_11(64) <= '0';
        reduced_reg_11(65) <= '0';
        reduced_reg_11(66) <= '0';
        reduced_reg_11(67) <= '0';
        reduced_reg_11(68) <= '0';
        reduced_reg_11(69) <= '0';
        reduced_reg_11(70) <= '0';
        reduced_reg_11(71) <= '0';
        reduced_reg_11(72) <= '0';
        reduced_reg_11(73) <= '0';
        reduced_reg_11(74) <= '0';
        reduced_reg_11(75) <= '0';
        reduced_reg_11(76) <= '0';
        reduced_reg_11(77) <= '0';
        reduced_reg_11(78) <= '0';
        reduced_reg_11(79) <= '0';
        reduced_reg_11(80) <= '0';
        reduced_reg_11(81) <= '0';
        reduced_reg_11(82) <= '0';
        reduced_reg_11(83) <= '0';
        reduced_reg_11(84) <= '0';
        reduced_reg_11(85) <= '0';
        reduced_reg_11(86) <= '0';
        reduced_reg_11(87) <= '0';
        reduced_reg_11(88) <= '0';
        reduced_reg_11(89) <= '0';
        reduced_reg_11(90) <= '0';
        reduced_reg_11(91) <= '0';
        reduced_reg_11(92) <= '0';
        reduced_reg_11(93) <= '0';
        reduced_reg_11(94) <= '0';
        reduced_reg_11(95) <= '0';
        reduced_reg_11(96) <= '0';
        reduced_reg_11(97) <= '0';
        reduced_reg_11(98) <= '0';
        reduced_reg_11(99) <= '0';
        reduced_reg_11(100) <= '0';
        reduced_reg_11(101) <= '0';
        reduced_reg_11(102) <= '0';
        reduced_reg_11(103) <= '0';
        reduced_reg_11(104) <= '0';
        reduced_reg_11(105) <= '0';
        reduced_reg_11(106) <= '0';
        reduced_reg_11(107) <= '0';
        reduced_reg_11(108) <= '0';
        reduced_reg_11(109) <= '0';
        reduced_reg_11(110) <= '0';
        reduced_reg_11(111) <= '0';
        reduced_reg_11(112) <= '0';
        reduced_reg_11(113) <= '0';
        reduced_reg_11(114) <= '0';
        reduced_reg_11(115) <= '0';
        reduced_reg_11(116) <= '0';
        reduced_reg_11(117) <= '0';
        reduced_reg_11(118) <= '0';
        reduced_reg_11(119) <= '0';
        reduced_reg_11(120) <= '0';
        reduced_reg_11(121) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg_11(0) <= reduced_reg_next_11(0);
        reduced_reg_11(1) <= reduced_reg_next_11(1);
        reduced_reg_11(2) <= reduced_reg_next_11(2);
        reduced_reg_11(3) <= reduced_reg_next_11(3);
        reduced_reg_11(4) <= reduced_reg_next_11(4);
        reduced_reg_11(5) <= reduced_reg_next_11(5);
        reduced_reg_11(6) <= reduced_reg_next_11(6);
        reduced_reg_11(7) <= reduced_reg_next_11(7);
        reduced_reg_11(8) <= reduced_reg_next_11(8);
        reduced_reg_11(9) <= reduced_reg_next_11(9);
        reduced_reg_11(10) <= reduced_reg_next_11(10);
        reduced_reg_11(11) <= reduced_reg_next_11(11);
        reduced_reg_11(12) <= reduced_reg_next_11(12);
        reduced_reg_11(13) <= reduced_reg_next_11(13);
        reduced_reg_11(14) <= reduced_reg_next_11(14);
        reduced_reg_11(15) <= reduced_reg_next_11(15);
        reduced_reg_11(16) <= reduced_reg_next_11(16);
        reduced_reg_11(17) <= reduced_reg_next_11(17);
        reduced_reg_11(18) <= reduced_reg_next_11(18);
        reduced_reg_11(19) <= reduced_reg_next_11(19);
        reduced_reg_11(20) <= reduced_reg_next_11(20);
        reduced_reg_11(21) <= reduced_reg_next_11(21);
        reduced_reg_11(22) <= reduced_reg_next_11(22);
        reduced_reg_11(23) <= reduced_reg_next_11(23);
        reduced_reg_11(24) <= reduced_reg_next_11(24);
        reduced_reg_11(25) <= reduced_reg_next_11(25);
        reduced_reg_11(26) <= reduced_reg_next_11(26);
        reduced_reg_11(27) <= reduced_reg_next_11(27);
        reduced_reg_11(28) <= reduced_reg_next_11(28);
        reduced_reg_11(29) <= reduced_reg_next_11(29);
        reduced_reg_11(30) <= reduced_reg_next_11(30);
        reduced_reg_11(31) <= reduced_reg_next_11(31);
        reduced_reg_11(32) <= reduced_reg_next_11(32);
        reduced_reg_11(33) <= reduced_reg_next_11(33);
        reduced_reg_11(34) <= reduced_reg_next_11(34);
        reduced_reg_11(35) <= reduced_reg_next_11(35);
        reduced_reg_11(36) <= reduced_reg_next_11(36);
        reduced_reg_11(37) <= reduced_reg_next_11(37);
        reduced_reg_11(38) <= reduced_reg_next_11(38);
        reduced_reg_11(39) <= reduced_reg_next_11(39);
        reduced_reg_11(40) <= reduced_reg_next_11(40);
        reduced_reg_11(41) <= reduced_reg_next_11(41);
        reduced_reg_11(42) <= reduced_reg_next_11(42);
        reduced_reg_11(43) <= reduced_reg_next_11(43);
        reduced_reg_11(44) <= reduced_reg_next_11(44);
        reduced_reg_11(45) <= reduced_reg_next_11(45);
        reduced_reg_11(46) <= reduced_reg_next_11(46);
        reduced_reg_11(47) <= reduced_reg_next_11(47);
        reduced_reg_11(48) <= reduced_reg_next_11(48);
        reduced_reg_11(49) <= reduced_reg_next_11(49);
        reduced_reg_11(50) <= reduced_reg_next_11(50);
        reduced_reg_11(51) <= reduced_reg_next_11(51);
        reduced_reg_11(52) <= reduced_reg_next_11(52);
        reduced_reg_11(53) <= reduced_reg_next_11(53);
        reduced_reg_11(54) <= reduced_reg_next_11(54);
        reduced_reg_11(55) <= reduced_reg_next_11(55);
        reduced_reg_11(56) <= reduced_reg_next_11(56);
        reduced_reg_11(57) <= reduced_reg_next_11(57);
        reduced_reg_11(58) <= reduced_reg_next_11(58);
        reduced_reg_11(59) <= reduced_reg_next_11(59);
        reduced_reg_11(60) <= reduced_reg_next_11(60);
        reduced_reg_11(61) <= reduced_reg_next_11(61);
        reduced_reg_11(62) <= reduced_reg_next_11(62);
        reduced_reg_11(63) <= reduced_reg_next_11(63);
        reduced_reg_11(64) <= reduced_reg_next_11(64);
        reduced_reg_11(65) <= reduced_reg_next_11(65);
        reduced_reg_11(66) <= reduced_reg_next_11(66);
        reduced_reg_11(67) <= reduced_reg_next_11(67);
        reduced_reg_11(68) <= reduced_reg_next_11(68);
        reduced_reg_11(69) <= reduced_reg_next_11(69);
        reduced_reg_11(70) <= reduced_reg_next_11(70);
        reduced_reg_11(71) <= reduced_reg_next_11(71);
        reduced_reg_11(72) <= reduced_reg_next_11(72);
        reduced_reg_11(73) <= reduced_reg_next_11(73);
        reduced_reg_11(74) <= reduced_reg_next_11(74);
        reduced_reg_11(75) <= reduced_reg_next_11(75);
        reduced_reg_11(76) <= reduced_reg_next_11(76);
        reduced_reg_11(77) <= reduced_reg_next_11(77);
        reduced_reg_11(78) <= reduced_reg_next_11(78);
        reduced_reg_11(79) <= reduced_reg_next_11(79);
        reduced_reg_11(80) <= reduced_reg_next_11(80);
        reduced_reg_11(81) <= reduced_reg_next_11(81);
        reduced_reg_11(82) <= reduced_reg_next_11(82);
        reduced_reg_11(83) <= reduced_reg_next_11(83);
        reduced_reg_11(84) <= reduced_reg_next_11(84);
        reduced_reg_11(85) <= reduced_reg_next_11(85);
        reduced_reg_11(86) <= reduced_reg_next_11(86);
        reduced_reg_11(87) <= reduced_reg_next_11(87);
        reduced_reg_11(88) <= reduced_reg_next_11(88);
        reduced_reg_11(89) <= reduced_reg_next_11(89);
        reduced_reg_11(90) <= reduced_reg_next_11(90);
        reduced_reg_11(91) <= reduced_reg_next_11(91);
        reduced_reg_11(92) <= reduced_reg_next_11(92);
        reduced_reg_11(93) <= reduced_reg_next_11(93);
        reduced_reg_11(94) <= reduced_reg_next_11(94);
        reduced_reg_11(95) <= reduced_reg_next_11(95);
        reduced_reg_11(96) <= reduced_reg_next_11(96);
        reduced_reg_11(97) <= reduced_reg_next_11(97);
        reduced_reg_11(98) <= reduced_reg_next_11(98);
        reduced_reg_11(99) <= reduced_reg_next_11(99);
        reduced_reg_11(100) <= reduced_reg_next_11(100);
        reduced_reg_11(101) <= reduced_reg_next_11(101);
        reduced_reg_11(102) <= reduced_reg_next_11(102);
        reduced_reg_11(103) <= reduced_reg_next_11(103);
        reduced_reg_11(104) <= reduced_reg_next_11(104);
        reduced_reg_11(105) <= reduced_reg_next_11(105);
        reduced_reg_11(106) <= reduced_reg_next_11(106);
        reduced_reg_11(107) <= reduced_reg_next_11(107);
        reduced_reg_11(108) <= reduced_reg_next_11(108);
        reduced_reg_11(109) <= reduced_reg_next_11(109);
        reduced_reg_11(110) <= reduced_reg_next_11(110);
        reduced_reg_11(111) <= reduced_reg_next_11(111);
        reduced_reg_11(112) <= reduced_reg_next_11(112);
        reduced_reg_11(113) <= reduced_reg_next_11(113);
        reduced_reg_11(114) <= reduced_reg_next_11(114);
        reduced_reg_11(115) <= reduced_reg_next_11(115);
        reduced_reg_11(116) <= reduced_reg_next_11(116);
        reduced_reg_11(117) <= reduced_reg_next_11(117);
        reduced_reg_11(118) <= reduced_reg_next_11(118);
        reduced_reg_11(119) <= reduced_reg_next_11(119);
        reduced_reg_11(120) <= reduced_reg_next_11(120);
        reduced_reg_11(121) <= reduced_reg_next_11(121);
      END IF;
    END IF;
  END PROCESS reduced_14_process;

  Detect_Rise_Positive_out1_2 <= reduced_reg_11(121);
  reduced_reg_next_11(0) <= Detect_Rise_Positive_out1_1;
  reduced_reg_next_11(1) <= reduced_reg_11(0);
  reduced_reg_next_11(2) <= reduced_reg_11(1);
  reduced_reg_next_11(3) <= reduced_reg_11(2);
  reduced_reg_next_11(4) <= reduced_reg_11(3);
  reduced_reg_next_11(5) <= reduced_reg_11(4);
  reduced_reg_next_11(6) <= reduced_reg_11(5);
  reduced_reg_next_11(7) <= reduced_reg_11(6);
  reduced_reg_next_11(8) <= reduced_reg_11(7);
  reduced_reg_next_11(9) <= reduced_reg_11(8);
  reduced_reg_next_11(10) <= reduced_reg_11(9);
  reduced_reg_next_11(11) <= reduced_reg_11(10);
  reduced_reg_next_11(12) <= reduced_reg_11(11);
  reduced_reg_next_11(13) <= reduced_reg_11(12);
  reduced_reg_next_11(14) <= reduced_reg_11(13);
  reduced_reg_next_11(15) <= reduced_reg_11(14);
  reduced_reg_next_11(16) <= reduced_reg_11(15);
  reduced_reg_next_11(17) <= reduced_reg_11(16);
  reduced_reg_next_11(18) <= reduced_reg_11(17);
  reduced_reg_next_11(19) <= reduced_reg_11(18);
  reduced_reg_next_11(20) <= reduced_reg_11(19);
  reduced_reg_next_11(21) <= reduced_reg_11(20);
  reduced_reg_next_11(22) <= reduced_reg_11(21);
  reduced_reg_next_11(23) <= reduced_reg_11(22);
  reduced_reg_next_11(24) <= reduced_reg_11(23);
  reduced_reg_next_11(25) <= reduced_reg_11(24);
  reduced_reg_next_11(26) <= reduced_reg_11(25);
  reduced_reg_next_11(27) <= reduced_reg_11(26);
  reduced_reg_next_11(28) <= reduced_reg_11(27);
  reduced_reg_next_11(29) <= reduced_reg_11(28);
  reduced_reg_next_11(30) <= reduced_reg_11(29);
  reduced_reg_next_11(31) <= reduced_reg_11(30);
  reduced_reg_next_11(32) <= reduced_reg_11(31);
  reduced_reg_next_11(33) <= reduced_reg_11(32);
  reduced_reg_next_11(34) <= reduced_reg_11(33);
  reduced_reg_next_11(35) <= reduced_reg_11(34);
  reduced_reg_next_11(36) <= reduced_reg_11(35);
  reduced_reg_next_11(37) <= reduced_reg_11(36);
  reduced_reg_next_11(38) <= reduced_reg_11(37);
  reduced_reg_next_11(39) <= reduced_reg_11(38);
  reduced_reg_next_11(40) <= reduced_reg_11(39);
  reduced_reg_next_11(41) <= reduced_reg_11(40);
  reduced_reg_next_11(42) <= reduced_reg_11(41);
  reduced_reg_next_11(43) <= reduced_reg_11(42);
  reduced_reg_next_11(44) <= reduced_reg_11(43);
  reduced_reg_next_11(45) <= reduced_reg_11(44);
  reduced_reg_next_11(46) <= reduced_reg_11(45);
  reduced_reg_next_11(47) <= reduced_reg_11(46);
  reduced_reg_next_11(48) <= reduced_reg_11(47);
  reduced_reg_next_11(49) <= reduced_reg_11(48);
  reduced_reg_next_11(50) <= reduced_reg_11(49);
  reduced_reg_next_11(51) <= reduced_reg_11(50);
  reduced_reg_next_11(52) <= reduced_reg_11(51);
  reduced_reg_next_11(53) <= reduced_reg_11(52);
  reduced_reg_next_11(54) <= reduced_reg_11(53);
  reduced_reg_next_11(55) <= reduced_reg_11(54);
  reduced_reg_next_11(56) <= reduced_reg_11(55);
  reduced_reg_next_11(57) <= reduced_reg_11(56);
  reduced_reg_next_11(58) <= reduced_reg_11(57);
  reduced_reg_next_11(59) <= reduced_reg_11(58);
  reduced_reg_next_11(60) <= reduced_reg_11(59);
  reduced_reg_next_11(61) <= reduced_reg_11(60);
  reduced_reg_next_11(62) <= reduced_reg_11(61);
  reduced_reg_next_11(63) <= reduced_reg_11(62);
  reduced_reg_next_11(64) <= reduced_reg_11(63);
  reduced_reg_next_11(65) <= reduced_reg_11(64);
  reduced_reg_next_11(66) <= reduced_reg_11(65);
  reduced_reg_next_11(67) <= reduced_reg_11(66);
  reduced_reg_next_11(68) <= reduced_reg_11(67);
  reduced_reg_next_11(69) <= reduced_reg_11(68);
  reduced_reg_next_11(70) <= reduced_reg_11(69);
  reduced_reg_next_11(71) <= reduced_reg_11(70);
  reduced_reg_next_11(72) <= reduced_reg_11(71);
  reduced_reg_next_11(73) <= reduced_reg_11(72);
  reduced_reg_next_11(74) <= reduced_reg_11(73);
  reduced_reg_next_11(75) <= reduced_reg_11(74);
  reduced_reg_next_11(76) <= reduced_reg_11(75);
  reduced_reg_next_11(77) <= reduced_reg_11(76);
  reduced_reg_next_11(78) <= reduced_reg_11(77);
  reduced_reg_next_11(79) <= reduced_reg_11(78);
  reduced_reg_next_11(80) <= reduced_reg_11(79);
  reduced_reg_next_11(81) <= reduced_reg_11(80);
  reduced_reg_next_11(82) <= reduced_reg_11(81);
  reduced_reg_next_11(83) <= reduced_reg_11(82);
  reduced_reg_next_11(84) <= reduced_reg_11(83);
  reduced_reg_next_11(85) <= reduced_reg_11(84);
  reduced_reg_next_11(86) <= reduced_reg_11(85);
  reduced_reg_next_11(87) <= reduced_reg_11(86);
  reduced_reg_next_11(88) <= reduced_reg_11(87);
  reduced_reg_next_11(89) <= reduced_reg_11(88);
  reduced_reg_next_11(90) <= reduced_reg_11(89);
  reduced_reg_next_11(91) <= reduced_reg_11(90);
  reduced_reg_next_11(92) <= reduced_reg_11(91);
  reduced_reg_next_11(93) <= reduced_reg_11(92);
  reduced_reg_next_11(94) <= reduced_reg_11(93);
  reduced_reg_next_11(95) <= reduced_reg_11(94);
  reduced_reg_next_11(96) <= reduced_reg_11(95);
  reduced_reg_next_11(97) <= reduced_reg_11(96);
  reduced_reg_next_11(98) <= reduced_reg_11(97);
  reduced_reg_next_11(99) <= reduced_reg_11(98);
  reduced_reg_next_11(100) <= reduced_reg_11(99);
  reduced_reg_next_11(101) <= reduced_reg_11(100);
  reduced_reg_next_11(102) <= reduced_reg_11(101);
  reduced_reg_next_11(103) <= reduced_reg_11(102);
  reduced_reg_next_11(104) <= reduced_reg_11(103);
  reduced_reg_next_11(105) <= reduced_reg_11(104);
  reduced_reg_next_11(106) <= reduced_reg_11(105);
  reduced_reg_next_11(107) <= reduced_reg_11(106);
  reduced_reg_next_11(108) <= reduced_reg_11(107);
  reduced_reg_next_11(109) <= reduced_reg_11(108);
  reduced_reg_next_11(110) <= reduced_reg_11(109);
  reduced_reg_next_11(111) <= reduced_reg_11(110);
  reduced_reg_next_11(112) <= reduced_reg_11(111);
  reduced_reg_next_11(113) <= reduced_reg_11(112);
  reduced_reg_next_11(114) <= reduced_reg_11(113);
  reduced_reg_next_11(115) <= reduced_reg_11(114);
  reduced_reg_next_11(116) <= reduced_reg_11(115);
  reduced_reg_next_11(117) <= reduced_reg_11(116);
  reduced_reg_next_11(118) <= reduced_reg_11(117);
  reduced_reg_next_11(119) <= reduced_reg_11(118);
  reduced_reg_next_11(120) <= reduced_reg_11(119);
  reduced_reg_next_11(121) <= reduced_reg_11(120);

  done <= Detect_Rise_Positive_out1_2;

  position_mech_2pi_AXI <= std_logic_vector(Data_Type_Conversion6_out1_1);

  position_el_2pi_AXI <= std_logic_vector(Data_Type_Conversion8_out1_1);

  omega_mech_AXI <= std_logic_vector(Data_Type_Conversion11_out1_1);

  rpm_mech_AXI <= std_logic_vector(Data_Type_Conversion12_out1_1);

  ce_out <= clk_enable;

END rtl;

