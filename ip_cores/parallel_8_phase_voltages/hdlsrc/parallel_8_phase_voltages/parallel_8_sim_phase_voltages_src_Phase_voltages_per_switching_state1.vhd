-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_phase_voltages\hdlsrc\parallel_8_phase_voltages\parallel_8_sim_phase_voltages_src_Phase_voltages_per_switching_state1.vhd
-- Created: 2022-11-08 12:05:26
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- done_phase_voltages           ce_out        1e-08
-- phase_voltages_per_switching_state_0ce_out        1e-08
-- phase_voltages_per_switching_state_1ce_out        1e-08
-- phase_voltages_per_switching_state_2ce_out        1e-08
-- phase_voltages_per_switching_state_3ce_out        1e-08
-- phase_voltages_per_switching_state_4ce_out        1e-08
-- phase_voltages_per_switching_state_5ce_out        1e-08
-- phase_voltages_per_switching_state_6ce_out        1e-08
-- phase_voltages_per_switching_state_7ce_out        1e-08
-- phase_voltages_per_switching_state_8ce_out        1e-08
-- phase_voltages_per_switching_state_9ce_out        1e-08
-- phase_voltages_per_switching_state_10ce_out        1e-08
-- phase_voltages_per_switching_state_11ce_out        1e-08
-- phase_voltages_per_switching_state_12ce_out        1e-08
-- phase_voltages_per_switching_state_13ce_out        1e-08
-- phase_voltages_per_switching_state_14ce_out        1e-08
-- phase_voltages_per_switching_state_15ce_out        1e-08
-- phase_voltages_per_switching_state_16ce_out        1e-08
-- phase_voltages_per_switching_state_17ce_out        1e-08
-- phase_voltages_per_switching_state_18ce_out        1e-08
-- phase_voltages_per_switching_state_19ce_out        1e-08
-- phase_voltages_per_switching_state_20ce_out        1e-08
-- phase_voltages_per_switching_state_21ce_out        1e-08
-- phase_voltages_per_switching_state_22ce_out        1e-08
-- phase_voltages_per_switching_state_23ce_out        1e-08
-- phase_voltages_per_switching_state_24ce_out        1e-08
-- phase_voltages_per_switching_state_25ce_out        1e-08
-- phase_voltages_per_switching_state_26ce_out        1e-08
-- phase_voltages_per_switching_state_27ce_out        1e-08
-- phase_voltages_per_switching_state_28ce_out        1e-08
-- phase_voltages_per_switching_state_29ce_out        1e-08
-- phase_voltages_per_switching_state_30ce_out        1e-08
-- phase_voltages_per_switching_state_31ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_sim_phase_voltages_src_Phase_voltages_per_switching_state1
-- Source Path: parallel_8_phase_voltages/Phase_voltages_per_switching_state1
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_8_sim_phase_voltages_src_Phase_voltages_per_switching_state1_pkg.ALL;

ENTITY parallel_8_sim_phase_voltages_src_Phase_voltages_per_switching_state1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        theta_el                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        theta_el_offset_AXI               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        u_dc_link_voltage_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Index                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        done_delay_compensation           :   IN    std_logic;
        done_min_cost_function_and_vopt   :   IN    std_logic;
        current_valid_in                  :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        done_phase_voltages               :   OUT   std_logic;
        phase_voltages_per_switching_state_0 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_1 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_2 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_3 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_4 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_5 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_6 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_7 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_8 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_9 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_10 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_11 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_12 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_13 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_14 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_15 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_16 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_17 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_18 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_19 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_20 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_21 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_22 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_23 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_24 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_25 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_26 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_27 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_28 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_29 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_30 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_31 :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
        );
END parallel_8_sim_phase_voltages_src_Phase_voltages_per_switching_state1;


ARCHITECTURE rtl OF parallel_8_sim_phase_voltages_src_Phase_voltages_per_switching_state1 IS

  -- Component Declarations
  COMPONENT parallel_8_sim_phase_voltages_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_phase_voltages_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_phase_voltages_src_Sine_HDL_Optimized2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          x                               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          y                               :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_phase_voltages_src_nfp_convert_sfix_16_En14_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_phase_voltages_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u_dc_link_voltage15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Index_15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_sim_phase_voltages_src_Detect_Rise_Positive1
    USE ENTITY work.parallel_8_sim_phase_voltages_src_Detect_Rise_Positive1(rtl);

  FOR ALL : parallel_8_sim_phase_voltages_src_Detect_Rise_Positive
    USE ENTITY work.parallel_8_sim_phase_voltages_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_8_sim_phase_voltages_src_Sine_HDL_Optimized2
    USE ENTITY work.parallel_8_sim_phase_voltages_src_Sine_HDL_Optimized2(rtl);

  FOR ALL : parallel_8_sim_phase_voltages_src_nfp_convert_sfix_16_En14_to_single
    USE ENTITY work.parallel_8_sim_phase_voltages_src_nfp_convert_sfix_16_En14_to_single(rtl);

  FOR ALL : parallel_8_sim_phase_voltages_src_Subsystem
    USE ENTITY work.parallel_8_sim_phase_voltages_src_Subsystem(rtl);

  FOR ALL : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    USE ENTITY work.parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL delayMatch1_reg_next             : std_logic_vector(0 TO 20);  -- ufix1 [21]
  SIGNAL Delay10_out1_1                   : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Delay8_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Index_signed                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay9_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Switch_on3_out1                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay14_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL theta_el_signed                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay3_out1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_on2_out1                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay2_out1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL theta_el_offset_AXI_signed       : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay4_out1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_on13_out1                 : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay13_out1                     : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add4_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add4_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Compare_Limit_Low1_out1          : std_logic;
  SIGNAL Compare_Limit_High1_out1         : std_logic;
  SIGNAL Compare_Limit_High1_out1_1       : std_logic;
  SIGNAL Add4_out1_2                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Constant2_out1                   : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add5_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Compare_Limit_Low1_out1_1        : std_logic;
  SIGNAL Add5_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_Limit_High1_out1          : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Constant3_out1                   : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add6_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add6_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL End_Cycle_2                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Gain1_mul_temp                   : signed(47 DOWNTO 0);  -- sfix48_En40
  SIGNAL Gain1_out1                       : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay12_out1                     : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Sine                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Cosine                           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux16_out1                       : vector_of_std_logic_vector24(0 TO 31);  -- ufix24 [32]
  SIGNAL Mux16_out1_1                     : vector_of_signed24(0 TO 31);  -- sfix24_En11 [32]
  SIGNAL Delay11_out1                     : vector_of_signed24(0 TO 31);  -- sfix24_En11 [32]

BEGIN
  u_Detect_Rise_Positive1 : parallel_8_sim_phase_voltages_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Logical_Operator_out1,
              Y => End_Cycle
              );

  u_Detect_Rise_Positive : parallel_8_sim_phase_voltages_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay5_out1,
              Y => End_Cycle_1
              );

  u_Sine_HDL_Optimized2 : parallel_8_sim_phase_voltages_src_Sine_HDL_Optimized2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              u => std_logic_vector(Delay12_out1),  -- sfix24_En20
              x => Sine,  -- sfix16_En14
              y => Cosine  -- sfix16_En14
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_sfix_16_En14_to_single : parallel_8_sim_phase_voltages_src_nfp_convert_sfix_16_En14_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Sine,  -- sfix16_En14
              nfp_out => Data_Type_Conversion1_out1  -- single
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_sfix_16_En14_to_single_1 : parallel_8_sim_phase_voltages_src_nfp_convert_sfix_16_En14_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Cosine,  -- sfix16_En14
              nfp_out => Data_Type_Conversion2_out1  -- single
              );

  u_Subsystem : parallel_8_sim_phase_voltages_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              u_dc_link_voltage15 => Switch_on1_out1,  -- single
              Index_15 => std_logic_vector(Switch_on3_out1),  -- int32
              sin_theta_el => Data_Type_Conversion1_out1,  -- single
              cos_theta_el => Data_Type_Conversion2_out1,  -- single
              d_voltage_per_switching_state => d_voltage_per_switching_state,  -- single
              q_voltage_per_switching_state => q_voltage_per_switching_state,  -- single
              x_voltage_per_switching_state => x_voltage_per_switching_state,  -- single
              y_voltage_per_switching_state => y_voltage_per_switching_state,  -- single
              d_voltage_per_switching_state1 => d_voltage_per_switching_state_1,  -- single
              q_voltage_per_switching_state1 => q_voltage_per_switching_state_1,  -- single
              x_voltage_per_switching_state1 => x_voltage_per_switching_state_1,  -- single
              y_voltage_per_switching_state1 => y_voltage_per_switching_state_1,  -- single
              d_voltage_per_switching_state2 => d_voltage_per_switching_state_2,  -- single
              q_voltage_per_switching_state2 => q_voltage_per_switching_state_2,  -- single
              x_voltage_per_switching_state2 => x_voltage_per_switching_state_2,  -- single
              y_voltage_per_switching_state2 => y_voltage_per_switching_state_2,  -- single
              d_voltage_per_switching_state3 => d_voltage_per_switching_state_3,  -- single
              q_voltage_per_switching_state3 => q_voltage_per_switching_state_3,  -- single
              x_voltage_per_switching_state3 => x_voltage_per_switching_state_3,  -- single
              y_voltage_per_switching_state3 => y_voltage_per_switching_state_3,  -- single
              d_voltage_per_switching_state4 => d_voltage_per_switching_state_4,  -- single
              q_voltage_per_switching_state4 => q_voltage_per_switching_state_4,  -- single
              x_voltage_per_switching_state4 => x_voltage_per_switching_state_4,  -- single
              y_voltage_per_switching_state4 => y_voltage_per_switching_state_4,  -- single
              d_voltage_per_switching_state5 => d_voltage_per_switching_state_5,  -- single
              q_voltage_per_switching_state5 => q_voltage_per_switching_state_5,  -- single
              x_voltage_per_switching_state5 => x_voltage_per_switching_state_5,  -- single
              y_voltage_per_switching_state5 => y_voltage_per_switching_state_5,  -- single
              d_voltage_per_switching_state6 => d_voltage_per_switching_state_6,  -- single
              q_voltage_per_switching_state6 => q_voltage_per_switching_state_6,  -- single
              x_voltage_per_switching_state6 => x_voltage_per_switching_state_6,  -- single
              y_voltage_per_switching_state6 => y_voltage_per_switching_state_6,  -- single
              d_voltage_per_switching_state7 => d_voltage_per_switching_state_7,  -- single
              q_voltage_per_switching_state7 => q_voltage_per_switching_state_7,  -- single
              x_voltage_per_switching_state7 => x_voltage_per_switching_state_7,  -- single
              y_voltage_per_switching_state7 => y_voltage_per_switching_state_7  -- single
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state,  -- single
              nfp_out => Mux16_out1(0)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_1 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state,  -- single
              nfp_out => Mux16_out1(1)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_2 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state,  -- single
              nfp_out => Mux16_out1(2)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_3 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state,  -- single
              nfp_out => Mux16_out1(3)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_4 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_1,  -- single
              nfp_out => Mux16_out1(4)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_5 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_1,  -- single
              nfp_out => Mux16_out1(5)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_6 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_1,  -- single
              nfp_out => Mux16_out1(6)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_7 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_1,  -- single
              nfp_out => Mux16_out1(7)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_8 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_2,  -- single
              nfp_out => Mux16_out1(8)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_9 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_2,  -- single
              nfp_out => Mux16_out1(9)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_10 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_2,  -- single
              nfp_out => Mux16_out1(10)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_11 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_2,  -- single
              nfp_out => Mux16_out1(11)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_12 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_3,  -- single
              nfp_out => Mux16_out1(12)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_13 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_3,  -- single
              nfp_out => Mux16_out1(13)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_14 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_3,  -- single
              nfp_out => Mux16_out1(14)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_15 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_3,  -- single
              nfp_out => Mux16_out1(15)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_16 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_4,  -- single
              nfp_out => Mux16_out1(16)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_17 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_4,  -- single
              nfp_out => Mux16_out1(17)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_18 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_4,  -- single
              nfp_out => Mux16_out1(18)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_19 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_4,  -- single
              nfp_out => Mux16_out1(19)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_20 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_5,  -- single
              nfp_out => Mux16_out1(20)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_21 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_5,  -- single
              nfp_out => Mux16_out1(21)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_22 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_5,  -- single
              nfp_out => Mux16_out1(22)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_23 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_5,  -- single
              nfp_out => Mux16_out1(23)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_24 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_6,  -- single
              nfp_out => Mux16_out1(24)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_25 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_6,  -- single
              nfp_out => Mux16_out1(25)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_26 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_6,  -- single
              nfp_out => Mux16_out1(26)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_27 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_6,  -- single
              nfp_out => Mux16_out1(27)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_28 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_7,  -- single
              nfp_out => Mux16_out1(28)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_29 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_7,  -- single
              nfp_out => Mux16_out1(29)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_30 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_7,  -- single
              nfp_out => Mux16_out1(30)  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state1_nfp_convert_single_to_sfix_24_En11_31 : parallel_8_sim_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_7,  -- single
              nfp_out => Mux16_out1(31)  -- sfix24_En11
              );

  enb <= clk_enable;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= done_delay_compensation;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= done_min_cost_function_and_vopt;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Logical_Operator_out1 <= Delay6_out1 OR Delay7_out1;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_out1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg(0) <= '0';
        delayMatch1_reg(1) <= '0';
        delayMatch1_reg(2) <= '0';
        delayMatch1_reg(3) <= '0';
        delayMatch1_reg(4) <= '0';
        delayMatch1_reg(5) <= '0';
        delayMatch1_reg(6) <= '0';
        delayMatch1_reg(7) <= '0';
        delayMatch1_reg(8) <= '0';
        delayMatch1_reg(9) <= '0';
        delayMatch1_reg(10) <= '0';
        delayMatch1_reg(11) <= '0';
        delayMatch1_reg(12) <= '0';
        delayMatch1_reg(13) <= '0';
        delayMatch1_reg(14) <= '0';
        delayMatch1_reg(15) <= '0';
        delayMatch1_reg(16) <= '0';
        delayMatch1_reg(17) <= '0';
        delayMatch1_reg(18) <= '0';
        delayMatch1_reg(19) <= '0';
        delayMatch1_reg(20) <= '0';
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
        delayMatch1_reg(5) <= delayMatch1_reg_next(5);
        delayMatch1_reg(6) <= delayMatch1_reg_next(6);
        delayMatch1_reg(7) <= delayMatch1_reg_next(7);
        delayMatch1_reg(8) <= delayMatch1_reg_next(8);
        delayMatch1_reg(9) <= delayMatch1_reg_next(9);
        delayMatch1_reg(10) <= delayMatch1_reg_next(10);
        delayMatch1_reg(11) <= delayMatch1_reg_next(11);
        delayMatch1_reg(12) <= delayMatch1_reg_next(12);
        delayMatch1_reg(13) <= delayMatch1_reg_next(13);
        delayMatch1_reg(14) <= delayMatch1_reg_next(14);
        delayMatch1_reg(15) <= delayMatch1_reg_next(15);
        delayMatch1_reg(16) <= delayMatch1_reg_next(16);
        delayMatch1_reg(17) <= delayMatch1_reg_next(17);
        delayMatch1_reg(18) <= delayMatch1_reg_next(18);
        delayMatch1_reg(19) <= delayMatch1_reg_next(19);
        delayMatch1_reg(20) <= delayMatch1_reg_next(20);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Delay10_out1_1 <= delayMatch1_reg(20);
  delayMatch1_reg_next(0) <= Delay10_out1;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);
  delayMatch1_reg_next(6) <= delayMatch1_reg(5);
  delayMatch1_reg_next(7) <= delayMatch1_reg(6);
  delayMatch1_reg_next(8) <= delayMatch1_reg(7);
  delayMatch1_reg_next(9) <= delayMatch1_reg(8);
  delayMatch1_reg_next(10) <= delayMatch1_reg(9);
  delayMatch1_reg_next(11) <= delayMatch1_reg(10);
  delayMatch1_reg_next(12) <= delayMatch1_reg(11);
  delayMatch1_reg_next(13) <= delayMatch1_reg(12);
  delayMatch1_reg_next(14) <= delayMatch1_reg(13);
  delayMatch1_reg_next(15) <= delayMatch1_reg(14);
  delayMatch1_reg_next(16) <= delayMatch1_reg(15);
  delayMatch1_reg_next(17) <= delayMatch1_reg(16);
  delayMatch1_reg_next(18) <= delayMatch1_reg(17);
  delayMatch1_reg_next(19) <= delayMatch1_reg(18);
  delayMatch1_reg_next(20) <= delayMatch1_reg(19);

  done_phase_voltages <= Delay10_out1_1;

  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay8_out1 <= u_dc_link_voltage_AXI;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1 = '0' ELSE
      Delay8_out1;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Index_signed <= signed(Index);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay9_out1 <= Index_signed;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch_on3_out1 <= Delay14_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay9_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= current_valid_in;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  switch_compare_1_2 <= '1' WHEN End_Cycle_1 = '1' ELSE
      '0';

  theta_el_signed <= signed(theta_el);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay3_out1 <= theta_el_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_on2_out1 <= Delay2_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay3_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle_1 = '1' ELSE
      '0';

  theta_el_offset_AXI_signed <= signed(theta_el_offset_AXI);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay4_out1 <= theta_el_offset_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch_on13_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch_on13_out1 <= Delay13_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay4_out1;

  Add4_out1 <= Switch_on2_out1 - Switch_on13_out1;

  Add4_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add4_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add4_out1_1 <= Add4_out1;
      END IF;
    END IF;
  END PROCESS Add4_out_pipe_process;


  
  Compare_Limit_Low1_out1 <= '1' WHEN Add4_out1_1 < to_signed(16#000000#, 24) ELSE
      '0';

  
  Compare_Limit_High1_out1 <= '1' WHEN Add4_out1_1 >= to_signed(16#6487ED#, 24) ELSE
      '0';

  Compare_Limit_High1_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Compare_Limit_High1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Compare_Limit_High1_out1_1 <= Compare_Limit_High1_out1;
      END IF;
    END IF;
  END PROCESS Compare_Limit_High1_out_pipe_process;


  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add4_out1_2 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add4_out1_2 <= Add4_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Constant2_out1 <= to_signed(16#6487ED#, 24);

  Add5_out1 <= Add4_out1_1 - Constant2_out1;

  Compare_Limit_Low1_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Compare_Limit_Low1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Compare_Limit_Low1_out1_1 <= Compare_Limit_Low1_out1;
      END IF;
    END IF;
  END PROCESS Compare_Limit_Low1_out_pipe_process;


  Add5_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add5_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add5_out1_1 <= Add5_out1;
      END IF;
    END IF;
  END PROCESS Add5_out_pipe_process;


  
  Switch_Limit_High1_out1 <= Add4_out1_2 WHEN Compare_Limit_High1_out1_1 = '0' ELSE
      Add5_out1_1;

  Constant3_out1 <= to_signed(16#6487ED#, 24);

  Add6_out1 <= Add4_out1_1 + Constant3_out1;

  Add6_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add6_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add6_out1_1 <= Add6_out1;
      END IF;
    END IF;
  END PROCESS Add6_out_pipe_process;


  
  End_Cycle_2 <= Switch_Limit_High1_out1 WHEN Compare_Limit_Low1_out1_1 = '0' ELSE
      Add6_out1_1;

  Gain1_mul_temp <= to_signed(16#028BE6#, 24) * End_Cycle_2;
  Gain1_out1 <= Gain1_mul_temp(43 DOWNTO 20);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay12_out1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;



  outputgen: FOR k IN 0 TO 31 GENERATE
    Mux16_out1_1(k) <= signed(Mux16_out1(k));
  END GENERATE;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1(0) <= to_signed(16#000000#, 24);
        Delay11_out1(1) <= to_signed(16#000000#, 24);
        Delay11_out1(2) <= to_signed(16#000000#, 24);
        Delay11_out1(3) <= to_signed(16#000000#, 24);
        Delay11_out1(4) <= to_signed(16#000000#, 24);
        Delay11_out1(5) <= to_signed(16#000000#, 24);
        Delay11_out1(6) <= to_signed(16#000000#, 24);
        Delay11_out1(7) <= to_signed(16#000000#, 24);
        Delay11_out1(8) <= to_signed(16#000000#, 24);
        Delay11_out1(9) <= to_signed(16#000000#, 24);
        Delay11_out1(10) <= to_signed(16#000000#, 24);
        Delay11_out1(11) <= to_signed(16#000000#, 24);
        Delay11_out1(12) <= to_signed(16#000000#, 24);
        Delay11_out1(13) <= to_signed(16#000000#, 24);
        Delay11_out1(14) <= to_signed(16#000000#, 24);
        Delay11_out1(15) <= to_signed(16#000000#, 24);
        Delay11_out1(16) <= to_signed(16#000000#, 24);
        Delay11_out1(17) <= to_signed(16#000000#, 24);
        Delay11_out1(18) <= to_signed(16#000000#, 24);
        Delay11_out1(19) <= to_signed(16#000000#, 24);
        Delay11_out1(20) <= to_signed(16#000000#, 24);
        Delay11_out1(21) <= to_signed(16#000000#, 24);
        Delay11_out1(22) <= to_signed(16#000000#, 24);
        Delay11_out1(23) <= to_signed(16#000000#, 24);
        Delay11_out1(24) <= to_signed(16#000000#, 24);
        Delay11_out1(25) <= to_signed(16#000000#, 24);
        Delay11_out1(26) <= to_signed(16#000000#, 24);
        Delay11_out1(27) <= to_signed(16#000000#, 24);
        Delay11_out1(28) <= to_signed(16#000000#, 24);
        Delay11_out1(29) <= to_signed(16#000000#, 24);
        Delay11_out1(30) <= to_signed(16#000000#, 24);
        Delay11_out1(31) <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay11_out1(0) <= Mux16_out1_1(0);
        Delay11_out1(1) <= Mux16_out1_1(1);
        Delay11_out1(2) <= Mux16_out1_1(2);
        Delay11_out1(3) <= Mux16_out1_1(3);
        Delay11_out1(4) <= Mux16_out1_1(4);
        Delay11_out1(5) <= Mux16_out1_1(5);
        Delay11_out1(6) <= Mux16_out1_1(6);
        Delay11_out1(7) <= Mux16_out1_1(7);
        Delay11_out1(8) <= Mux16_out1_1(8);
        Delay11_out1(9) <= Mux16_out1_1(9);
        Delay11_out1(10) <= Mux16_out1_1(10);
        Delay11_out1(11) <= Mux16_out1_1(11);
        Delay11_out1(12) <= Mux16_out1_1(12);
        Delay11_out1(13) <= Mux16_out1_1(13);
        Delay11_out1(14) <= Mux16_out1_1(14);
        Delay11_out1(15) <= Mux16_out1_1(15);
        Delay11_out1(16) <= Mux16_out1_1(16);
        Delay11_out1(17) <= Mux16_out1_1(17);
        Delay11_out1(18) <= Mux16_out1_1(18);
        Delay11_out1(19) <= Mux16_out1_1(19);
        Delay11_out1(20) <= Mux16_out1_1(20);
        Delay11_out1(21) <= Mux16_out1_1(21);
        Delay11_out1(22) <= Mux16_out1_1(22);
        Delay11_out1(23) <= Mux16_out1_1(23);
        Delay11_out1(24) <= Mux16_out1_1(24);
        Delay11_out1(25) <= Mux16_out1_1(25);
        Delay11_out1(26) <= Mux16_out1_1(26);
        Delay11_out1(27) <= Mux16_out1_1(27);
        Delay11_out1(28) <= Mux16_out1_1(28);
        Delay11_out1(29) <= Mux16_out1_1(29);
        Delay11_out1(30) <= Mux16_out1_1(30);
        Delay11_out1(31) <= Mux16_out1_1(31);
      END IF;
    END IF;
  END PROCESS Delay11_process;


  phase_voltages_per_switching_state_0 <= std_logic_vector(Delay11_out1(0));

  phase_voltages_per_switching_state_1 <= std_logic_vector(Delay11_out1(1));

  phase_voltages_per_switching_state_2 <= std_logic_vector(Delay11_out1(2));

  phase_voltages_per_switching_state_3 <= std_logic_vector(Delay11_out1(3));

  phase_voltages_per_switching_state_4 <= std_logic_vector(Delay11_out1(4));

  phase_voltages_per_switching_state_5 <= std_logic_vector(Delay11_out1(5));

  phase_voltages_per_switching_state_6 <= std_logic_vector(Delay11_out1(6));

  phase_voltages_per_switching_state_7 <= std_logic_vector(Delay11_out1(7));

  phase_voltages_per_switching_state_8 <= std_logic_vector(Delay11_out1(8));

  phase_voltages_per_switching_state_9 <= std_logic_vector(Delay11_out1(9));

  phase_voltages_per_switching_state_10 <= std_logic_vector(Delay11_out1(10));

  phase_voltages_per_switching_state_11 <= std_logic_vector(Delay11_out1(11));

  phase_voltages_per_switching_state_12 <= std_logic_vector(Delay11_out1(12));

  phase_voltages_per_switching_state_13 <= std_logic_vector(Delay11_out1(13));

  phase_voltages_per_switching_state_14 <= std_logic_vector(Delay11_out1(14));

  phase_voltages_per_switching_state_15 <= std_logic_vector(Delay11_out1(15));

  phase_voltages_per_switching_state_16 <= std_logic_vector(Delay11_out1(16));

  phase_voltages_per_switching_state_17 <= std_logic_vector(Delay11_out1(17));

  phase_voltages_per_switching_state_18 <= std_logic_vector(Delay11_out1(18));

  phase_voltages_per_switching_state_19 <= std_logic_vector(Delay11_out1(19));

  phase_voltages_per_switching_state_20 <= std_logic_vector(Delay11_out1(20));

  phase_voltages_per_switching_state_21 <= std_logic_vector(Delay11_out1(21));

  phase_voltages_per_switching_state_22 <= std_logic_vector(Delay11_out1(22));

  phase_voltages_per_switching_state_23 <= std_logic_vector(Delay11_out1(23));

  phase_voltages_per_switching_state_24 <= std_logic_vector(Delay11_out1(24));

  phase_voltages_per_switching_state_25 <= std_logic_vector(Delay11_out1(25));

  phase_voltages_per_switching_state_26 <= std_logic_vector(Delay11_out1(26));

  phase_voltages_per_switching_state_27 <= std_logic_vector(Delay11_out1(27));

  phase_voltages_per_switching_state_28 <= std_logic_vector(Delay11_out1(28));

  phase_voltages_per_switching_state_29 <= std_logic_vector(Delay11_out1(29));

  phase_voltages_per_switching_state_30 <= std_logic_vector(Delay11_out1(30));

  phase_voltages_per_switching_state_31 <= std_logic_vector(Delay11_out1(31));

  ce_out <= clk_enable;

END rtl;

