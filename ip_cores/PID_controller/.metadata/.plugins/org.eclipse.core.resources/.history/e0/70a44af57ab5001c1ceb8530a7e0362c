/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/


#include "platform.h"
#include "xbasic_types.h"
#include "xparameters.h" // Contains definitions for all peripherals
#include "xuz_pi_controller_sample.h" // Contains hls example (axilite) IP macros and functions
#include "stdbool.h"
#include "stdio.h"

// Define global values for HLS example IP
XUz_pi_controller_sample pi;
XUz_pi_controller_sample_Config *pi_cfg;
typedef struct uz_PI_Controller_config {
	float Kp; /**< Proportional gain for PI-Controller. Must be greater or equal than 0.0f */
	float Ki; /**< Integral gain for PI-Controller. Must be greater or equal than 0.0f */
	float samplingTime_sec; /**< SamplingTime of the PI-Controller in seconds. Must be greater than 0.0f */
	float upper_limit; /**< Upper limit for the output limitation. Must be greater than lower limit */
	float lower_limit; /**< Lower limit for the output limitation */
}uz_PI_Controller_config;

// Initialize the HLS example IP
void init_pi_controller(){

		int status;
		// Create HLS example IP pointer
		pi_cfg = XUz_pi_controller_sample_LookupConfig(
		XPAR_UZ_PI_CONTROLLER_SAM_0_DEVICE_ID);

		if (!pi_cfg) {
			xil_printf(
					"Error loading configuration for pi_cfg \n\r");
		}


		status = XUz_pi_controller_sample_CfgInitialize(&pi,
				pi_cfg);
		if (status != XST_SUCCESS) {
			xil_printf("Error initializing for pi \n\r");
		}

		XUz_pi_controller_sample_Initialize(&pi,
		XPAR_UZ_PI_CONTROLLER_SAM_0_DEVICE_ID);
}
// Function that adds using HLS example IP
// The functions used here are defined in xexample.h
void pi_controller_hls(XUz_pi_controller_sample_Self self,  bool I_rst, float referenceValue, float actualValue, bool ext_clamping) {
	float output;
	output = 0.0f; // result output from HLS IP

	// Write inputs
	XUz_pi_controller_sample_Set_self(&pi, self );
	XUz_pi_controller_sample_Set_I_rst(&pi, I_rst );
	XUz_pi_controller_sample_Set_referenceValue(&pi, referenceValue);
	XUz_pi_controller_sample_Set_actualValue(&pi, actualValue);
	XUz_pi_controller_sample_Set_ext_clamping(&pi, ext_clamping);
	xil_printf("Write self: ox%x \n\r", self);
	xil_printf("Write I_rst: %b \n\r", I_rst);
	printf("Write referenceValue: %f \n\r", referenceValue);
	printf("Write actualValue: %f \n\r", actualValue);
	xil_printf("Write ext_clamping: %b \n\r", ext_clamping);

	// Start HLS IP
	XUz_pi_controller_sample_Start(&pi);
	print("Started HLS pi controller IP \n\r");

	// Wait until it is finished
	while (!XUz_pi_controller_sample_IsDone(&pi))
		;

	// Get hls_multiplier returned value
	output = XUz_pi_controller_sample_Get_output_r(&pi);

	printf("HLS IP Return Value: %f\n\r", output);
	print("End of test\n\n\r");
}

int main() {
	// setup
	init_platform();
	init_pi_controller();
	uz_PI_Controller_config sconfig;
	int I_rst_int = 0;
	bool I_rst;
	config.Ki = 1.0f;
	config.Kp = 11.54f;
	config.upper_limit = 20.0f;
	config.lower_limit = -20.0f;
	config.samplingTime_sec = 1.0f;
	float referenceValue[13] = {2.54f, 5.0f, -1.45f, -1.23f, 5.54f, 10.32f, -9.45f, -15.23f, 2.0f, 1.0f, 12.0f, 12.0f, 2.0f};
	float actualValue[13]    = {1.62f, 6.5f, -3.25f, 2.54f, 1.62f, 6.5f, -3.25f, 2.54f, 1.0f, 2.0f, 2.0f, 12.1f, 12.0f};
	int ext_clamping_int = 0;
	bool ext_clamping;
	XUz_pi_controller_sample_Self self;

	I_rst = I_rst_int;
	ext_clamping = ext_clamping_int;
    self.word_0 = config.Kp;
    self.word_1 = config.Ki;
    self.word_2 = config.samplingTime_sec;
    self.word_3 = config.upper_limit;
    self.word_4 = config.lower_limit;
	print("Hello, The code is executed\n ");

		for(int j=0;j<13;j++){
		xil_printf("Performing HLS operation... \n\r");

		// perform pi controller in HLS IP
		pi_controller_hls(self,I_rst,referenceValue[j],actualValue[j],ext_clamping);
	}
		print("Test success\n ");
	cleanup_platform();
	return 0;
}


