// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_accumulate_float_4u_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_values_dout,
        p_values_empty_n,
        p_values_read,
        p_accumulator_address0,
        p_accumulator_ce0,
        p_accumulator_we0,
        p_accumulator_d0,
        p_accumulator_q0,
        p_accumulator_address1,
        p_accumulator_ce1,
        p_accumulator_we1,
        p_accumulator_d1,
        p_accumulator_q1,
        p_weightGradientAvg_offset_dout,
        p_weightGradientAvg_offset_empty_n,
        p_weightGradientAvg_offset_read,
        mul_ln559_loc_dout,
        mul_ln559_loc_empty_n,
        mul_ln559_loc_read,
        p_initZero_dout,
        p_initZero_empty_n,
        p_initZero_read
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] p_values_dout;
input   p_values_empty_n;
output   p_values_read;
output  [13:0] p_accumulator_address0;
output   p_accumulator_ce0;
output   p_accumulator_we0;
output  [31:0] p_accumulator_d0;
input  [31:0] p_accumulator_q0;
output  [13:0] p_accumulator_address1;
output   p_accumulator_ce1;
output   p_accumulator_we1;
output  [31:0] p_accumulator_d1;
input  [31:0] p_accumulator_q1;
input  [13:0] p_weightGradientAvg_offset_dout;
input   p_weightGradientAvg_offset_empty_n;
output   p_weightGradientAvg_offset_read;
input  [31:0] mul_ln559_loc_dout;
input   mul_ln559_loc_empty_n;
output   mul_ln559_loc_read;
input  [0:0] p_initZero_dout;
input   p_initZero_empty_n;
output   p_initZero_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_values_read;
reg[13:0] p_accumulator_address0;
reg p_accumulator_ce0;
reg p_accumulator_we0;
reg[13:0] p_accumulator_address1;
reg p_accumulator_ce1;
reg p_accumulator_we1;
reg[31:0] p_accumulator_d1;
reg p_weightGradientAvg_offset_read;
reg mul_ln559_loc_read;
reg p_initZero_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_values_blk_n;
wire    ap_CS_fsm_state3;
reg    p_weightGradientAvg_offset_blk_n;
reg    mul_ln559_loc_blk_n;
reg    p_initZero_blk_n;
reg   [31:0] reg_166;
reg   [0:0] p_initZero_read_reg_342;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_158_p2;
reg   [31:0] reg_171;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state4;
reg   [13:0] p_weightGradientAvg_offset_read_reg_334;
reg    ap_block_state1;
reg   [29:0] trunc_ln_reg_348;
wire   [29:0] add_ln410_fu_205_p2;
reg   [29:0] add_ln410_reg_356;
wire    ap_CS_fsm_state2;
wire   [13:0] tmp_s_fu_215_p3;
reg   [13:0] tmp_s_reg_361;
wire   [0:0] icmp_ln410_fu_200_p2;
reg   [13:0] p_accumulator_addr_reg_368;
wire   [31:0] trunc_ln674_fu_233_p1;
reg   [31:0] trunc_ln674_reg_373;
reg   [31:0] p_Result_i_i_reg_378;
reg   [31:0] p_Result_20_i_i_reg_383;
reg   [31:0] p_Result_21_i_i_reg_388;
wire   [31:0] bitcast_ln101_fu_267_p1;
reg   [13:0] p_accumulator_addr_7_reg_398;
wire    ap_CS_fsm_state10;
reg   [13:0] p_accumulator_addr_8_reg_404;
wire   [13:0] add_ln417_6_fu_306_p2;
reg   [13:0] add_ln417_6_reg_410;
reg   [31:0] p_accumulator_load_8_reg_415;
reg   [13:0] p_accumulator_addr_9_reg_420;
wire   [31:0] bitcast_ln101_26_fu_315_p1;
wire   [31:0] bitcast_ln101_28_fu_330_p1;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_162_p2;
reg   [31:0] add3_2_i_i_reg_450;
reg   [29:0] i_reg_147;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln417_fu_228_p1;
wire   [63:0] zext_ln417_7_fu_281_p1;
wire   [63:0] zext_ln417_8_fu_296_p1;
wire   [63:0] zext_ln417_9_fu_311_p1;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_158_p0;
reg   [31:0] grp_fu_158_p1;
wire   [31:0] grp_fu_162_p0;
wire   [31:0] grp_fu_162_p1;
wire   [11:0] empty_fu_211_p1;
wire   [13:0] add_ln417_fu_223_p2;
wire   [13:0] or_ln417_fu_271_p2;
wire   [13:0] add_ln417_4_fu_276_p2;
wire   [13:0] or_ln417_5_fu_286_p2;
wire   [13:0] add_ln417_5_fu_291_p2;
wire   [13:0] or_ln417_6_fu_301_p2;
wire    ap_CS_fsm_state19;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 19'd1;
end

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U342(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_158_p0),
    .din1(grp_fu_158_p1),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U343(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_162_p0),
    .din1(grp_fu_162_p1),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_147 <= 30'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_reg_147 <= add_ln410_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if ((((p_initZero_read_reg_342 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((p_initZero_read_reg_342 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        reg_166 <= p_accumulator_q1;
    end else if (((p_initZero_read_reg_342 == 1'd0) & (p_values_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        reg_166 <= p_accumulator_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add3_2_i_i_reg_450 <= grp_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln410_reg_356 <= add_ln410_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln417_6_reg_410 <= add_ln417_6_fu_306_p2;
        p_accumulator_addr_7_reg_398 <= zext_ln417_7_fu_281_p1;
        p_accumulator_addr_8_reg_404 <= zext_ln417_8_fu_296_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((p_values_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Result_20_i_i_reg_383 <= {{p_values_dout[95:64]}};
        p_Result_21_i_i_reg_388 <= {{p_values_dout[127:96]}};
        p_Result_i_i_reg_378 <= {{p_values_dout[63:32]}};
        trunc_ln674_reg_373 <= trunc_ln674_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_accumulator_addr_9_reg_420 <= zext_ln417_9_fu_311_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln410_fu_200_p2 == 1'd0))) begin
        p_accumulator_addr_reg_368 <= zext_ln417_fu_228_p1;
        tmp_s_reg_361[13 : 2] <= tmp_s_fu_215_p3[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((p_initZero_read_reg_342 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        p_accumulator_load_8_reg_415 <= p_accumulator_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_initZero_read_reg_342 <= p_initZero_dout;
        p_weightGradientAvg_offset_read_reg_334 <= p_weightGradientAvg_offset_dout;
        trunc_ln_reg_348 <= {{mul_ln559_loc_dout[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_171 <= grp_fu_158_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_158_p1 = bitcast_ln101_28_fu_330_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_158_p1 = bitcast_ln101_26_fu_315_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_158_p1 = bitcast_ln101_fu_267_p1;
    end else begin
        grp_fu_158_p1 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln559_loc_blk_n = mul_ln559_loc_empty_n;
    end else begin
        mul_ln559_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln559_loc_read = 1'b1;
    end else begin
        mul_ln559_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_accumulator_address0 = p_accumulator_addr_7_reg_398;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_accumulator_address0 = zext_ln417_8_fu_296_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_accumulator_address0 = p_accumulator_addr_reg_368;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_accumulator_address0 = zext_ln417_fu_228_p1;
    end else begin
        p_accumulator_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        p_accumulator_address1 = p_accumulator_addr_9_reg_420;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        p_accumulator_address1 = p_accumulator_addr_8_reg_404;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_accumulator_address1 = zext_ln417_9_fu_311_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_accumulator_address1 = zext_ln417_7_fu_281_p1;
    end else begin
        p_accumulator_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17))) begin
        p_accumulator_ce0 = 1'b1;
    end else begin
        p_accumulator_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state17))) begin
        p_accumulator_ce1 = 1'b1;
    end else begin
        p_accumulator_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        p_accumulator_d1 = reg_171;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        p_accumulator_d1 = add3_2_i_i_reg_450;
    end else begin
        p_accumulator_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state17))) begin
        p_accumulator_we0 = 1'b1;
    end else begin
        p_accumulator_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        p_accumulator_we1 = 1'b1;
    end else begin
        p_accumulator_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_initZero_blk_n = p_initZero_empty_n;
    end else begin
        p_initZero_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_initZero_read = 1'b1;
    end else begin
        p_initZero_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_values_blk_n = p_values_empty_n;
    end else begin
        p_values_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_values_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_values_read = 1'b1;
    end else begin
        p_values_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weightGradientAvg_offset_blk_n = p_weightGradientAvg_offset_empty_n;
    end else begin
        p_weightGradientAvg_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weightGradientAvg_offset_read = 1'b1;
    end else begin
        p_weightGradientAvg_offset_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln410_fu_200_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((p_values_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln410_fu_205_p2 = (i_reg_147 + 30'd1);

assign add_ln417_4_fu_276_p2 = (p_weightGradientAvg_offset_read_reg_334 + or_ln417_fu_271_p2);

assign add_ln417_5_fu_291_p2 = (p_weightGradientAvg_offset_read_reg_334 + or_ln417_5_fu_286_p2);

assign add_ln417_6_fu_306_p2 = (p_weightGradientAvg_offset_read_reg_334 + or_ln417_6_fu_301_p2);

assign add_ln417_fu_223_p2 = (p_weightGradientAvg_offset_read_reg_334 + tmp_s_fu_215_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bitcast_ln101_26_fu_315_p1 = p_Result_i_i_reg_378;

assign bitcast_ln101_28_fu_330_p1 = p_Result_21_i_i_reg_388;

assign bitcast_ln101_fu_267_p1 = trunc_ln674_reg_373;

assign empty_fu_211_p1 = i_reg_147[11:0];

assign grp_fu_158_p0 = ((p_initZero_read_reg_342[0:0] === 1'b1) ? 32'd0 : reg_166);

assign grp_fu_162_p0 = ((p_initZero_read_reg_342[0:0] === 1'b1) ? 32'd0 : p_accumulator_load_8_reg_415);

assign grp_fu_162_p1 = p_Result_20_i_i_reg_383;

assign icmp_ln410_fu_200_p2 = ((i_reg_147 == trunc_ln_reg_348) ? 1'b1 : 1'b0);

assign or_ln417_5_fu_286_p2 = (tmp_s_reg_361 | 14'd2);

assign or_ln417_6_fu_301_p2 = (tmp_s_reg_361 | 14'd3);

assign or_ln417_fu_271_p2 = (tmp_s_reg_361 | 14'd1);

assign p_accumulator_d0 = reg_171;

assign tmp_s_fu_215_p3 = {{empty_fu_211_p1}, {2'd0}};

assign trunc_ln674_fu_233_p1 = p_values_dout[31:0];

assign zext_ln417_7_fu_281_p1 = add_ln417_4_fu_276_p2;

assign zext_ln417_8_fu_296_p1 = add_ln417_5_fu_291_p2;

assign zext_ln417_9_fu_311_p1 = add_ln417_6_reg_410;

assign zext_ln417_fu_228_p1 = add_ln417_fu_223_p2;

always @ (posedge ap_clk) begin
    tmp_s_reg_361[1:0] <= 2'b00;
end

endmodule //BGD_accumulate_float_4u_2
