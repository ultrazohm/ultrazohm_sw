-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/gmStateSpaceHDL_uz_inverter_3ph/uz_invert_ip_src_dot_product_3.vhd
-- Created: 2022-06-09 09:27:23
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_invert_ip_src_dot_product_3
-- Source Path: dot_product_3
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_invert_ip_src_uz_inverter_3ph_pkg.ALL;

ENTITY uz_invert_ip_src_dot_product_3 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        in1                               :   IN    vector_of_std_logic_vector64(0 TO 2);  -- double [3]
        in2                               :   IN    vector_of_std_logic_vector64(0 TO 2);  -- double [3]
        out1                              :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
        );
END uz_invert_ip_src_dot_product_3;


ARCHITECTURE rtl OF uz_invert_ip_src_dot_product_3 IS

  -- Component Declarations
  COMPONENT uz_invert_ip_src_nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_invert_ip_src_nfp_mul_double
    USE ENTITY work.uz_invert_ip_src_nfp_mul_double(rtl);

  FOR ALL : uz_invert_ip_src_nfp_add_double
    USE ENTITY work.uz_invert_ip_src_nfp_add_double(rtl);

  -- Signals
  SIGNAL nfp_out_1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_2_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL sum_stage1_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_3_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL intdelay_reg                     : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL intdelay_reg_next                : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL sum_stage1_2                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL sum_stage2_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  u_nfp_mul_comp : uz_invert_ip_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => in1(0),  -- double
              nfp_in2 => in2(0),  -- double
              nfp_out => nfp_out_1_1  -- double
              );

  u_nfp_mul_comp_1 : uz_invert_ip_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => in1(1),  -- double
              nfp_in2 => in2(1),  -- double
              nfp_out => nfp_out_2_1  -- double
              );

  u_nfp_add_comp : uz_invert_ip_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => nfp_out_1_1,  -- double
              nfp_in2 => nfp_out_2_1,  -- double
              nfp_out => sum_stage1_1  -- double
              );

  u_nfp_mul_comp_2 : uz_invert_ip_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => in1(2),  -- double
              nfp_in2 => in2(2),  -- double
              nfp_out => nfp_out_3_1  -- double
              );

  u_nfp_add_comp_1 : uz_invert_ip_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => sum_stage1_1,  -- double
              nfp_in2 => sum_stage1_2,  -- double
              nfp_out => sum_stage2_1  -- double
              );

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        intdelay_reg(0) <= X"0000000000000000";
        intdelay_reg(1) <= X"0000000000000000";
        intdelay_reg(2) <= X"0000000000000000";
        intdelay_reg(3) <= X"0000000000000000";
        intdelay_reg(4) <= X"0000000000000000";
        intdelay_reg(5) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        intdelay_reg(0) <= intdelay_reg_next(0);
        intdelay_reg(1) <= intdelay_reg_next(1);
        intdelay_reg(2) <= intdelay_reg_next(2);
        intdelay_reg(3) <= intdelay_reg_next(3);
        intdelay_reg(4) <= intdelay_reg_next(4);
        intdelay_reg(5) <= intdelay_reg_next(5);
      END IF;
    END IF;
  END PROCESS intdelay_process;

  sum_stage1_2 <= intdelay_reg(5);
  intdelay_reg_next(0) <= nfp_out_3_1;
  intdelay_reg_next(1) <= intdelay_reg(0);
  intdelay_reg_next(2) <= intdelay_reg(1);
  intdelay_reg_next(3) <= intdelay_reg(2);
  intdelay_reg_next(4) <= intdelay_reg(3);
  intdelay_reg_next(5) <= intdelay_reg(4);

  out1 <= sum_stage2_1;

END rtl;

