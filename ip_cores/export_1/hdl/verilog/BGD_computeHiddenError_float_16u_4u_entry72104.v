// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_computeHiddenError_float_16u_4u_entry72104 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_k_dout,
        p_k_empty_n,
        p_k_read,
        p_k_out_din,
        p_k_out_full_n,
        p_k_out_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_weights_offset_dout,
        p_weights_offset_empty_n,
        p_weights_offset_read,
        p_outputCurrentLayer_offset_dout,
        p_outputCurrentLayer_offset_empty_n,
        p_outputCurrentLayer_offset_read,
        p_n_c_i_din,
        p_n_c_i_full_n,
        p_n_c_i_write,
        p_n_c17_i_din,
        p_n_c17_i_full_n,
        p_n_c17_i_write,
        p_k_c_i_din,
        p_k_c_i_full_n,
        p_k_c_i_write,
        p_k_c18_i_din,
        p_k_c18_i_full_n,
        p_k_c18_i_write,
        p_k_c19_i_din,
        p_k_c19_i_full_n,
        p_k_c19_i_write,
        p_k_c20_i_din,
        p_k_c20_i_full_n,
        p_k_c20_i_write,
        p_weights_offset_c_i_din,
        p_weights_offset_c_i_full_n,
        p_weights_offset_c_i_write,
        p_outputCurrentLayer_offset_c_i_din,
        p_outputCurrentLayer_offset_c_i_full_n,
        p_outputCurrentLayer_offset_c_i_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] p_k_dout;
input   p_k_empty_n;
output   p_k_read;
output  [31:0] p_k_out_din;
input   p_k_out_full_n;
output   p_k_out_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
input  [13:0] p_weights_offset_dout;
input   p_weights_offset_empty_n;
output   p_weights_offset_read;
input  [14:0] p_outputCurrentLayer_offset_dout;
input   p_outputCurrentLayer_offset_empty_n;
output   p_outputCurrentLayer_offset_read;
output  [31:0] p_n_c_i_din;
input   p_n_c_i_full_n;
output   p_n_c_i_write;
output  [31:0] p_n_c17_i_din;
input   p_n_c17_i_full_n;
output   p_n_c17_i_write;
output  [31:0] p_k_c_i_din;
input   p_k_c_i_full_n;
output   p_k_c_i_write;
output  [31:0] p_k_c18_i_din;
input   p_k_c18_i_full_n;
output   p_k_c18_i_write;
output  [31:0] p_k_c19_i_din;
input   p_k_c19_i_full_n;
output   p_k_c19_i_write;
output  [31:0] p_k_c20_i_din;
input   p_k_c20_i_full_n;
output   p_k_c20_i_write;
output  [13:0] p_weights_offset_c_i_din;
input   p_weights_offset_c_i_full_n;
output   p_weights_offset_c_i_write;
output  [14:0] p_outputCurrentLayer_offset_c_i_din;
input   p_outputCurrentLayer_offset_c_i_full_n;
output   p_outputCurrentLayer_offset_c_i_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_k_read;
reg p_k_out_write;
reg p_n_read;
reg p_weights_offset_read;
reg p_outputCurrentLayer_offset_read;
reg p_n_c_i_write;
reg p_n_c17_i_write;
reg p_k_c_i_write;
reg p_k_c18_i_write;
reg p_k_c19_i_write;
reg p_k_c20_i_write;
reg p_weights_offset_c_i_write;
reg p_outputCurrentLayer_offset_c_i_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_k_blk_n;
reg    p_k_out_blk_n;
reg    p_n_blk_n;
reg    p_weights_offset_blk_n;
reg    p_outputCurrentLayer_offset_blk_n;
reg    p_n_c_i_blk_n;
reg    p_n_c17_i_blk_n;
reg    p_k_c_i_blk_n;
reg    p_k_c18_i_blk_n;
reg    p_k_c19_i_blk_n;
reg    p_k_c20_i_blk_n;
reg    p_weights_offset_c_i_blk_n;
reg    p_outputCurrentLayer_offset_c_i_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_blk_n = p_k_empty_n;
    end else begin
        p_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_c18_i_blk_n = p_k_c18_i_full_n;
    end else begin
        p_k_c18_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_c18_i_write = 1'b1;
    end else begin
        p_k_c18_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_c19_i_blk_n = p_k_c19_i_full_n;
    end else begin
        p_k_c19_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_c19_i_write = 1'b1;
    end else begin
        p_k_c19_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_c20_i_blk_n = p_k_c20_i_full_n;
    end else begin
        p_k_c20_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_c20_i_write = 1'b1;
    end else begin
        p_k_c20_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_c_i_blk_n = p_k_c_i_full_n;
    end else begin
        p_k_c_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_c_i_write = 1'b1;
    end else begin
        p_k_c_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_blk_n = p_k_out_full_n;
    end else begin
        p_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_write = 1'b1;
    end else begin
        p_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_read = 1'b1;
    end else begin
        p_k_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_c17_i_blk_n = p_n_c17_i_full_n;
    end else begin
        p_n_c17_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_c17_i_write = 1'b1;
    end else begin
        p_n_c17_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_c_i_blk_n = p_n_c_i_full_n;
    end else begin
        p_n_c_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_c_i_write = 1'b1;
    end else begin
        p_n_c_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_outputCurrentLayer_offset_blk_n = p_outputCurrentLayer_offset_empty_n;
    end else begin
        p_outputCurrentLayer_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_outputCurrentLayer_offset_c_i_blk_n = p_outputCurrentLayer_offset_c_i_full_n;
    end else begin
        p_outputCurrentLayer_offset_c_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_outputCurrentLayer_offset_c_i_write = 1'b1;
    end else begin
        p_outputCurrentLayer_offset_c_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_outputCurrentLayer_offset_read = 1'b1;
    end else begin
        p_outputCurrentLayer_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weights_offset_blk_n = p_weights_offset_empty_n;
    end else begin
        p_weights_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weights_offset_c_i_blk_n = p_weights_offset_c_i_full_n;
    end else begin
        p_weights_offset_c_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weights_offset_c_i_write = 1'b1;
    end else begin
        p_weights_offset_c_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weights_offset_read = 1'b1;
    end else begin
        p_weights_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((p_outputCurrentLayer_offset_c_i_full_n == 1'b0) | (p_weights_offset_c_i_full_n == 1'b0) | (real_start == 1'b0) | (p_k_c20_i_full_n == 1'b0) | (p_k_c19_i_full_n == 1'b0) | (p_k_c18_i_full_n == 1'b0) | (p_k_c_i_full_n == 1'b0) | (p_n_c17_i_full_n == 1'b0) | (p_n_c_i_full_n == 1'b0) | (p_outputCurrentLayer_offset_empty_n == 1'b0) | (p_weights_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_k_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign p_k_c18_i_din = p_k_dout;

assign p_k_c19_i_din = p_k_dout;

assign p_k_c20_i_din = p_k_dout;

assign p_k_c_i_din = p_k_dout;

assign p_k_out_din = p_k_dout;

assign p_n_c17_i_din = p_n_dout;

assign p_n_c_i_din = p_n_dout;

assign p_outputCurrentLayer_offset_c_i_din = p_outputCurrentLayer_offset_dout;

assign p_weights_offset_c_i_din = p_weights_offset_dout;

assign start_out = real_start;

endmodule //BGD_computeHiddenError_float_16u_4u_entry72104
