-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_resolver_pl_interface\uz_resolver_pl_interface_src_nfp_mod_single.vhd
-- Created: 2023-01-24 16:42:37
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_resolver_pl_interface_src_nfp_mod_single
-- Source Path: uz_resolver_pl_interface/uz_resolver_pl_interface/nfp_mod_single
-- Hierarchy Level: 1
-- 
-- {Latency Strategy = "Max", Denormal Handling = "off"}
-- {CheckResetToZero = "on"}
-- {MaxIterations = "32"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_resolver_pl_interface_src_uz_resolver_pl_interface_pkg.ALL;

ENTITY uz_resolver_pl_interface_src_nfp_mod_single IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        nfp_in1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_in2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_resolver_pl_interface_src_nfp_mod_single;


ARCHITECTURE rtl OF uz_resolver_pl_interface_src_nfp_mod_single IS

  -- Signals
  SIGNAL nfp_in2_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL bSign                            : std_logic;  -- ufix1
  SIGNAL bExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL bMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay17_out1                     : std_logic;  -- ufix1
  SIGNAL Delay17_reg                      : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL Delay17_reg_next                 : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL Delay17_out1_1                   : std_logic;  -- ufix1
  SIGNAL Delay5_out1                      : std_logic;  -- ufix1
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay4_out1                      : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay3_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Add_add_cast                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant3_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL nfp_in1_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL Delay2_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant_out1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL reduced_reg                      : vector_of_unsigned23(0 TO 11);  -- ufix23 [12]
  SIGNAL reduced_reg_next                 : vector_of_unsigned23(0 TO 11);  -- ufix23 [12]
  SIGNAL checkDenormal_out2               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL reduced_reg_1                    : vector_of_unsigned8(0 TO 11);  -- ufix8 [12]
  SIGNAL reduced_reg_next_1               : vector_of_unsigned8(0 TO 11);  -- ufix8 [12]
  SIGNAL checkDenormal_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL Delay3_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL reduced_reg_2                    : vector_of_unsigned8(0 TO 11);  -- ufix8 [12]
  SIGNAL reduced_reg_next_2               : vector_of_unsigned8(0 TO 11);  -- ufix8 [12]
  SIGNAL checkDenormal1_out1              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL bExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1_1           : std_logic;  -- ufix1
  SIGNAL Delay4_out1_1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant_out1_1                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1_1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL reduced_reg_3                    : vector_of_unsigned23(0 TO 11);  -- ufix23 [12]
  SIGNAL reduced_reg_next_3               : vector_of_unsigned23(0 TO 11);  -- ufix23 [12]
  SIGNAL checkDenormal1_out2              : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_0_aMantissa_out1  : std_logic;  -- ufix1
  SIGNAL bExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1_1 : std_logic;  -- ufix1
  SIGNAL bMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphabExponent_0_bMantissa_out1  : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1_2 : std_logic;  -- ufix1
  SIGNAL Delay20_reg                      : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL Delay20_reg_next                 : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL Delay20_out1                     : std_logic;  -- ufix1
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL Exponent_0_out1                  : std_logic;  -- ufix1
  SIGNAL C_out1                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay3_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC_out1                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay7_out1                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Exponent_0_out1_1                : std_logic;  -- ufix1
  SIGNAL C_out1_1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1_1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay_out1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC1_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay4_out1_2                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_a_norm_exp_b_norm_sub_temp   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_a_norm_exp_b_norm_out1       : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC1_out1_1                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL modrem_Prep_out1                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL reduced_reg_4                    : vector_of_signed10(0 TO 12);  -- sfix10 [13]
  SIGNAL reduced_reg_next_4               : vector_of_signed10(0 TO 12);  -- sfix10 [13]
  SIGNAL modrem_Prep_out1_1               : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Compare_To_Constant1_out1        : std_logic;  -- ufix1
  SIGNAL modrem_Normalize_Exp_Mant_out3   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha1_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL cfType_Exponent_Inf_or_NaN_out1  : std_logic;  -- ufix1
  SIGNAL alphaExponent_0_cfType_Exp_out1  : std_logic;  -- ufix1
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay1_out1_1                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat1_out1                 : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay5_out1_1                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL modrem_Normalize_Exp_Mant_out4   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice2_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1          : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_1        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_1        : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_2               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_2               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_2                : std_logic;  -- ufix1
  SIGNAL Constant_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator4_out1_2         : std_logic;  -- ufix1
  SIGNAL Constant10_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator6_out1_2         : std_logic;  -- ufix1
  SIGNAL Switch15_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator12_out1          : std_logic;  -- ufix1
  SIGNAL Switch21_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch13_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant10_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch15_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch21_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator12_out1_1        : std_logic;  -- ufix1
  SIGNAL Switch13_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch33_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1_2                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant10_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch15_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch21_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch13_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch34_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL exp_norm_p_sub_cast              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_norm_p_sub_temp              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_norm_p_out1                  : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bit_Slice1_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 12);  -- ufix1 [13]
  SIGNAL Delay_reg_next                   : std_logic_vector(0 TO 12);  -- ufix1 [13]
  SIGNAL Delay_out1_1                     : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1_2           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL alpha24_out1                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice4_out1_1                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1                    : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL C2_out1                          : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_2                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL exp_diff_2_add_temp              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_2_out1                  : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_1_add_temp              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_1_out1                  : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC_out1_1                       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_exp_diff_0_1_out1             : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay1_out1_2                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_3                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1               : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_1                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay6_out1                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_4                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_1         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_1             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_2                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay11_out1                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_5                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_2         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_2             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_3                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay16_out1                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_6                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_3         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_3             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_4                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay1_out1_3                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_7                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_4         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_4             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_5                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay6_out1_1                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_8                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_5         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_5             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_6                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay11_out1_1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_9                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_6         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_6             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_7                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay16_out1_1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_10                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_7         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_7             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_8                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay1_out1_4                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_11                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_8         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_8             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_9                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay6_out1_2                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_12                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_9         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_9             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_10                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay11_out1_2                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_13                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_10        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_10            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_11                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay16_out1_2                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_14                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_11        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_11            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_12                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL modrem_12_Iterations_out2        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Compare_To_Constant_out1         : std_logic;  -- ufix1
  SIGNAL alpha1_out1_2                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Switch_out1_2                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_max_exp_2diff_1_sub_temp : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_max_exp_2diff_1_out1    : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC1_out1_2                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha24_pos_sub_temp             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL alpha24_pos_out1                 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC2_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay5_out1_2                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL alpha0_out1_2                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL cfType_Exponent_Inf_or_NaN_out1_1 : std_logic;  -- ufix1
  SIGNAL alphaExponent_0_cfType_Exp_out1_1 : std_logic;  -- ufix1
  SIGNAL alpha1_out1_3                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_3                    : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1_1  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay2_out1_1                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_2                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay6_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL modrem_Normalize_Exp_Mant_out2   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL alphamant_b_norm_in0             : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL alphamant_b_norm_out1            : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_out1_2                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL mant_a_norm_mB_add_temp          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mant_a_norm_mB_out1              : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC2_out1_1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL if_tmp_0_out1                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_mant_a_norm_1_out1        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_mant_b_norm_1_out1        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL alphatmp1_in0                    : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL alphatmp1_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay3_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL tmp1_m2B_add_temp                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp1_m2B_out1                    : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC5_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_2                : std_logic;  -- ufix1
  SIGNAL tmp1_mant_b_norm_add_temp        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp1_mant_b_norm_out1            : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC_out1_2                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL alphatmp2_in0                    : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL alphatmp2_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay4_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL tmp1_m3B_add_temp                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp1_m3B_out1                    : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC6_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL if_tmp4_0_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL tmp1_mB_add_temp                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp1_mB_out1                     : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC4_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_1                : std_logic;  -- ufix1
  SIGNAL if_tmp2_0_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_tmp3_0_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_bitget_exp_diff_1_0_out1      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_0_out1               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_out1_2                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay3_out1_4                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_3                : std_logic;  -- ufix1
  SIGNAL Delay4_out1_4                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_2                : std_logic;  -- ufix1
  SIGNAL Switch1_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_1                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Switch_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1            : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay5_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay8_out1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_4                : std_logic;  -- ufix1
  SIGNAL Delay9_out1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_3                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay7_out1_1                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_1                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_2                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_2                : std_logic;  -- ufix1
  SIGNAL Switch_out1_4                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_1          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay10_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_2                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay13_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_2                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_2                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_5                : std_logic;  -- ufix1
  SIGNAL Delay14_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_2                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_2                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_4                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay12_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_2                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_3                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_3                : std_logic;  -- ufix1
  SIGNAL Switch_out1_5                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_2          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay15_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_3                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay18_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_3                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_3                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_6                : std_logic;  -- ufix1
  SIGNAL Delay19_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_3                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_3                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_5                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_3                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay17_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_3                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_4                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_4                : std_logic;  -- ufix1
  SIGNAL Switch_out1_6                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_3                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_3          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_out1_3                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_4                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay3_out1_5                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_4                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_4                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_7                : std_logic;  -- ufix1
  SIGNAL Delay4_out1_5                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_4                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_4                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_6                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_4                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_out1_4                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_4                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_5                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_5                : std_logic;  -- ufix1
  SIGNAL Switch_out1_7                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_4                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_4          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay5_out1_4                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_5                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay8_out1_1                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_5                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_5                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_8                : std_logic;  -- ufix1
  SIGNAL Delay9_out1_1                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_5                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_5                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_7                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_5                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay7_out1_2                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_5                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_6                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_6                : std_logic;  -- ufix1
  SIGNAL Switch_out1_8                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_5                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_5          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay10_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_6                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay13_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_6                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_6                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_9                : std_logic;  -- ufix1
  SIGNAL Delay14_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_6                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_6                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_8                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_6                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay12_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_6                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_7                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_7                : std_logic;  -- ufix1
  SIGNAL Switch_out1_9                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_6                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_6          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay15_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_7                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay18_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_7                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_7                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_10               : std_logic;  -- ufix1
  SIGNAL Delay19_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_7                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_7                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_9                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_7                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay17_out1_3                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_7                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_8                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_8                : std_logic;  -- ufix1
  SIGNAL Switch_out1_10                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_7                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_7          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_out1_4                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_8                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay3_out1_6                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_8                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_8                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_11               : std_logic;  -- ufix1
  SIGNAL Delay4_out1_6                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_8                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_8                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_10               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_8                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_out1_5                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_8                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_9                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_9                : std_logic;  -- ufix1
  SIGNAL Switch_out1_11                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_8                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_8          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay5_out1_5                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_9                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay8_out1_2                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_9                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_9                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_12               : std_logic;  -- ufix1
  SIGNAL Delay9_out1_2                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_9                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_9                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_11               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_9                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay7_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_9                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_10                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_10               : std_logic;  -- ufix1
  SIGNAL Switch_out1_12                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_9                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_9          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay10_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_10                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay13_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_10                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_10                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_13               : std_logic;  -- ufix1
  SIGNAL Delay14_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_10                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_10                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_12               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_10                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay12_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_10                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_11                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_11               : std_logic;  -- ufix1
  SIGNAL Switch_out1_13                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_10                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_10         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay15_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_11                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay18_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_11                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_11                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_14               : std_logic;  -- ufix1
  SIGNAL Delay19_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_11                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_11                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_13               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_11                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay17_out1_4                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_11                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_12                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_14                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_12               : std_logic;  -- ufix1
  SIGNAL Switch_out1_14                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_11                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_11         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL modrem_12_Iterations_out1        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL reduced_reg_5                    : vector_of_signed28(0 TO 12);  -- sfix28 [13]
  SIGNAL reduced_reg_next_5               : vector_of_signed28(0 TO 12);  -- sfix28 [13]
  SIGNAL modrem_Normalize_Exp_Mant_out4_1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_mant_b_norm_relop1    : std_logic;
  SIGNAL mant_b_norm_R_sub_temp           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mant_b_norm_R_out1               : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC_out1_3                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_bitsll_R_1_mant_b_norm_out1   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay15_out1_3                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay14_out1_3                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL shift_arithmetic_zerosig         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL shift_arithmetic_selsig          : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_zerosig            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_selsig             : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Shift_Arithmetic_out1            : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsrl_x_pos_0_out1              : std_logic;  -- ufix1
  SIGNAL bitsll_x_shift_length_zerosig    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsll_x_shift_length_selsig     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_zerosig_1          : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_selsig_1           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsll_x_shift_length_out1       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL BitSlice_out1_1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL reduced_reg_6                    : vector_of_signed28(0 TO 12);  -- sfix28 [13]
  SIGNAL reduced_reg_next_6               : vector_of_signed28(0 TO 12);  -- sfix28 [13]
  SIGNAL modrem_Normalize_Exp_Mant_out2_1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL BitSlice1_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay12_out1_3                   : std_logic;  -- ufix1
  SIGNAL Delay4_out1_7                    : std_logic;  -- ufix1
  SIGNAL x_0_out1                         : std_logic;  -- ufix1
  SIGNAL pos_0_out1                       : std_logic;  -- ufix1
  SIGNAL Delay10_out1_3                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp2_tmp3_relop1                 : std_logic;
  SIGNAL Logical_Operator2_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_3         : std_logic;  -- ufix1
  SIGNAL Delay32_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay32_reg_next                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay32_out1                     : std_logic;  -- ufix1
  SIGNAL Delay6_reg                       : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay6_reg_next                  : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay6_out1_4                    : std_logic;  -- ufix1
  SIGNAL Delay_out1_5                     : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_4          : std_logic;  -- ufix1
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 18);  -- ufix1 [19]
  SIGNAL Delay2_reg_next                  : std_logic_vector(0 TO 18);  -- ufix1 [19]
  SIGNAL Delay2_out1_6                    : std_logic;  -- ufix1
  SIGNAL C_out1_15                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_12        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_12            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_13                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay6_out1_5                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_16                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_13        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_13            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_14                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Shift_out1_12                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay3_out1_7                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_12                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_12                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_15               : std_logic;  -- ufix1
  SIGNAL Delay4_out1_8                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_12                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_12                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_14               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_12                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_out1_7                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_12                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_13                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_13               : std_logic;  -- ufix1
  SIGNAL Switch_out1_15                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_12                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_12         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay5_out1_6                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_13                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay8_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_13                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_13                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_16               : std_logic;  -- ufix1
  SIGNAL Delay9_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_13                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_13                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_15               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_13                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay7_out1_4                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_13                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_14                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_16                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_14               : std_logic;  -- ufix1
  SIGNAL Switch_out1_16                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_13                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_13         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay10_out1_4                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_14                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay13_out1_3                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_14                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_14                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_17               : std_logic;  -- ufix1
  SIGNAL Delay14_out1_4                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add2_add_temp_14                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_14                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_16               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_14                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay12_out1_4                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_14                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_15                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_17                : std_logic;  -- ufix1
  SIGNAL Delay11_out1_3                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice3_out1_15               : std_logic;  -- ufix1
  SIGNAL Switch_out1_17                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_14                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_14         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay15_out1_4                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL R_in_0_out1                      : std_logic;  -- ufix1
  SIGNAL alphasign_diff_1_R_in_0_out1     : std_logic;  -- ufix1
  SIGNAL Delay18_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay18_reg_next                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay18_out1_3                   : std_logic;  -- ufix1
  SIGNAL alpha0_out1_4                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_3                : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL reinterpretcast_bitconcat_R_in_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL Delay25_reg                      : vector_of_signed30(0 TO 1);  -- sfix30 [2]
  SIGNAL Delay25_reg_next                 : vector_of_signed30(0 TO 1);  -- sfix30 [2]
  SIGNAL Delay25_out1                     : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL reduced_reg_7                    : vector_of_signed10(0 TO 15);  -- sfix10 [16]
  SIGNAL reduced_reg_next_7               : vector_of_signed10(0 TO 15);  -- sfix10 [16]
  SIGNAL modrem_Normalize_Exp_Mant_out3_1 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay24_reg                      : vector_of_signed10(0 TO 16);  -- sfix10 [17]
  SIGNAL Delay24_reg_next                 : vector_of_signed10(0 TO 16);  -- sfix10 [17]
  SIGNAL Delay24_out1                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_b_norm_exp_a_norm_sub_temp   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_b_norm_exp_a_norm_out1       : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC_out1_4                       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL shift_length_0_out1              : std_logic;  -- ufix1
  SIGNAL Delay12_out1_5                   : std_logic;  -- ufix1
  SIGNAL alphaR_ext_in0                   : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL alphaR_ext_out1                  : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL Delay10_out1_5                   : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL shift_length_cfType_Mantiss_out1 : std_logic;  -- ufix1
  SIGNAL Delay5_out1_7                    : std_logic;  -- ufix1
  SIGNAL Delay11_out1_4                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsra_r_ext_shift_length_zerosig : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsra_r_ext_shift_length_selsig : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_zerosig_2          : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_selsig_2           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsra_R_ext_shift_length_out1   : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL C_out1_17                        : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL if_shift_length_cfType_Mantis_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL if_shift_length_0_out1           : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL Delay23_out1                     : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL Delay16_out1_3                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL alphamB1_in0                     : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL alphamB1_out1                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL alpha1_out1_4                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat1_out1_1               : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL reinterpretcast_bitconcat_mB1_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL Delay24_reg_1                    : vector_of_signed30(0 TO 1);  -- sfix30 [2]
  SIGNAL Delay24_reg_next_1               : vector_of_signed30(0 TO 1);  -- sfix30 [2]
  SIGNAL Delay24_out1_1                   : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL mB1_ext_R_ext_add_temp           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mB1_ext_R_ext_out1               : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL BitSlice_out1_2                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_1         : std_logic;  -- ufix1
  SIGNAL BitSlice1_out1_1                 : std_logic;  -- ufix1
  SIGNAL alphabitget_R_ext_cfType_Mantissa_out1 : std_logic;  -- ufix1
  SIGNAL bitsll_R_ext_1_out1              : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL if_bitget_R_ext_cfType_Mantissa_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL if_sign_diff_1_R_in_0_out1       : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL BitSlice3_out1                   : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Delay9_out1_4                    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL R_0_out1                         : std_logic;  -- ufix1
  SIGNAL reset_to_zero_R_0_out1           : std_logic;  -- ufix1
  SIGNAL Delay3_out1_8                    : std_logic;  -- ufix1
  SIGNAL Delay12_out1_6                   : std_logic;  -- ufix1
  SIGNAL Delay17_reg_1                    : vector_of_signed10(0 TO 1);  -- sfix10 [2]
  SIGNAL Delay17_reg_next_1               : vector_of_signed10(0 TO 1);  -- sfix10 [2]
  SIGNAL Delay17_out1_5                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay19_reg                      : vector_of_signed10(0 TO 1);  -- sfix10 [2]
  SIGNAL Delay19_reg_next                 : vector_of_signed10(0 TO 1);  -- sfix10 [2]
  SIGNAL Delay19_out1_3                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_exp_a_norm_exp_b_norm_out1    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cast_1_like_exp_R_out1           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_R_cast_1_like_exp_R_sub_temp : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_R_cast_1_like_exp_R_out1     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_bitget_R_ext_cfType_Mantissa_1_out1 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_sign_diff_1_R_in_0_1_out1     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay7_out1_5                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay4_out1_9                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL BitSlice_out1_3                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice2_out1_17               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_2        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_2        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_18               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_4               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_4               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_4               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_3        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_3        : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice8_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_16               : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_18               : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_19               : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_18                : std_logic;  -- ufix1
  SIGNAL Constant_out1_5                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch_out1_18                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator_out1_5          : std_logic;  -- ufix1
  SIGNAL Constant2_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch1_out1_15                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant3_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch2_out1_15                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant4_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator2_out1_2         : std_logic;  -- ufix1
  SIGNAL Switch3_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch4_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant5_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch5_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant6_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant7_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch7_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant8_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch8_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator12_out1_2        : std_logic;  -- ufix1
  SIGNAL Switch9_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch10_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_6                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1_3                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant10_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch15_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch21_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator12_out1_3        : std_logic;  -- ufix1
  SIGNAL Switch13_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch33_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_7                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1_4                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant10_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch15_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch21_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch13_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch34_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Data_Type_Conversion_out1        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay2_out1_8                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL exp_R_shift1_sub_cast            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_R_shift1_sub_temp            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_R_shift1_out1                : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL DTC1_out1_3                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_rem_0_out1                   : std_logic;  -- ufix1
  SIGNAL shift1_cfType_MantissaLength_out1 : std_logic;  -- ufix1
  SIGNAL Delay1_out1_5                    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL bitsll_tmp2_shift1_out1          : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL C_out1_18                        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_shift1_cfType_MantissaLengt_out1 : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL exp_rem_0_out1_1                 : std_logic;  -- ufix1
  SIGNAL bitsrl_tmp3_1_out1               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice3_out1_1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL C1_out1                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_exp_rem_0_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_exp_rem_0_1_out1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL C4_out1                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_reset_to_zero_R_0_1_out1      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay1_out1_6                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_4                : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice1_out1_2                 : std_logic;  -- ufix1
  SIGNAL cast_R_ext_WordLength_like_out1  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cast_R_ext_WordLength_like_sub_temp : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL cast_R_ext_WordLength_like_out1_1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Delay4_out1_10                   : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL bitsll_r_ext_cast_r_ext_wordl_zerosig : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL bitsll_r_ext_cast_r_ext_wordl_selsig : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL dynamic_shift_zerosig_3          : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL dynamic_shift_selsig_3           : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL bitsll_R_ext_cast_R_ext_WordL_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL tmp1_0_out1                      : std_logic;  -- ufix1
  SIGNAL Delay21_out1                     : std_logic;  -- ufix1
  SIGNAL Delay22_out1                     : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_6          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_3         : std_logic;  -- ufix1
  SIGNAL BitSlice2_out1_1                 : std_logic;  -- ufix1
  SIGNAL sticky_bitget_R_ext_1_out1       : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_3         : std_logic;  -- ufix1
  SIGNAL Delay8_out1_4                    : std_logic;  -- ufix1
  SIGNAL Delay_out1_6                     : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_4                  : std_logic;  -- ufix1
  SIGNAL Delay2_out1_9                    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL cast_2_like_Mant_tmp_out1        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Mant_tmp_cast_2_like_Man_out1    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1_2                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_7          : std_logic;  -- ufix1
  SIGNAL DTC2_out1_2                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C3_out1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_reset_to_zero_R_0_out1        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay_out1_7                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_1_like_Exp_out1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_cast_1_like_Exp_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Compare_To_Zero_out1_3           : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero1_out1            : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_8          : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant_out1_1       : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_4         : std_logic;  -- ufix1
  SIGNAL Constant_out1_8                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant2_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch2_out1_16                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch_out1_19                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay18_reg_1                    : vector_of_unsigned8(0 TO 11);  -- ufix8 [12]
  SIGNAL Delay18_reg_next_1               : vector_of_unsigned8(0 TO 11);  -- ufix8 [12]
  SIGNAL Delay18_out1_4                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_rem_Exceptional_Check_cfType_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay6_out1_6                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant2_out1_2                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Zero_out1_4           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_9          : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1_2                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_19                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant1_out1_1                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant3_out1_2                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch3_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch1_out1_16                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay19_reg_1                    : vector_of_unsigned23(0 TO 11);  -- ufix23 [12]
  SIGNAL Delay19_reg_next_1               : vector_of_unsigned23(0 TO 11);  -- ufix23 [12]
  SIGNAL Delay19_out1_4                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_rem_Exceptional_Check_cfType_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch5_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay7_out1_6                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Subsystem

  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 32 bit word into FP sign, exponent, mantissa
  bSign <= nfp_in2_unsigned(31);
  bExponent <= nfp_in2_unsigned(30 DOWNTO 23);
  bMantissa <= nfp_in2_unsigned(22 DOWNTO 0);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay17_out1 <= bSign;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  Delay17_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_reg(0) <= '0';
        Delay17_reg(1) <= '0';
        Delay17_reg(2) <= '0';
        Delay17_reg(3) <= '0';
        Delay17_reg(4) <= '0';
        Delay17_reg(5) <= '0';
        Delay17_reg(6) <= '0';
        Delay17_reg(7) <= '0';
        Delay17_reg(8) <= '0';
        Delay17_reg(9) <= '0';
        Delay17_reg(10) <= '0';
        Delay17_reg(11) <= '0';
        Delay17_reg(12) <= '0';
        Delay17_reg(13) <= '0';
        Delay17_reg(14) <= '0';
        Delay17_reg(15) <= '0';
        Delay17_reg(16) <= '0';
        Delay17_reg(17) <= '0';
        Delay17_reg(18) <= '0';
        Delay17_reg(19) <= '0';
        Delay17_reg(20) <= '0';
        Delay17_reg(21) <= '0';
        Delay17_reg(22) <= '0';
        Delay17_reg(23) <= '0';
      ELSIF enb = '1' THEN
        Delay17_reg(0) <= Delay17_reg_next(0);
        Delay17_reg(1) <= Delay17_reg_next(1);
        Delay17_reg(2) <= Delay17_reg_next(2);
        Delay17_reg(3) <= Delay17_reg_next(3);
        Delay17_reg(4) <= Delay17_reg_next(4);
        Delay17_reg(5) <= Delay17_reg_next(5);
        Delay17_reg(6) <= Delay17_reg_next(6);
        Delay17_reg(7) <= Delay17_reg_next(7);
        Delay17_reg(8) <= Delay17_reg_next(8);
        Delay17_reg(9) <= Delay17_reg_next(9);
        Delay17_reg(10) <= Delay17_reg_next(10);
        Delay17_reg(11) <= Delay17_reg_next(11);
        Delay17_reg(12) <= Delay17_reg_next(12);
        Delay17_reg(13) <= Delay17_reg_next(13);
        Delay17_reg(14) <= Delay17_reg_next(14);
        Delay17_reg(15) <= Delay17_reg_next(15);
        Delay17_reg(16) <= Delay17_reg_next(16);
        Delay17_reg(17) <= Delay17_reg_next(17);
        Delay17_reg(18) <= Delay17_reg_next(18);
        Delay17_reg(19) <= Delay17_reg_next(19);
        Delay17_reg(20) <= Delay17_reg_next(20);
        Delay17_reg(21) <= Delay17_reg_next(21);
        Delay17_reg(22) <= Delay17_reg_next(22);
        Delay17_reg(23) <= Delay17_reg_next(23);
      END IF;
    END IF;
  END PROCESS Delay17_1_process;

  Delay17_out1_1 <= Delay17_reg(23);
  Delay17_reg_next(0) <= Delay17_out1;
  Delay17_reg_next(1) <= Delay17_reg(0);
  Delay17_reg_next(2) <= Delay17_reg(1);
  Delay17_reg_next(3) <= Delay17_reg(2);
  Delay17_reg_next(4) <= Delay17_reg(3);
  Delay17_reg_next(5) <= Delay17_reg(4);
  Delay17_reg_next(6) <= Delay17_reg(5);
  Delay17_reg_next(7) <= Delay17_reg(6);
  Delay17_reg_next(8) <= Delay17_reg(7);
  Delay17_reg_next(9) <= Delay17_reg(8);
  Delay17_reg_next(10) <= Delay17_reg(9);
  Delay17_reg_next(11) <= Delay17_reg(10);
  Delay17_reg_next(12) <= Delay17_reg(11);
  Delay17_reg_next(13) <= Delay17_reg(12);
  Delay17_reg_next(14) <= Delay17_reg(13);
  Delay17_reg_next(15) <= Delay17_reg(14);
  Delay17_reg_next(16) <= Delay17_reg(15);
  Delay17_reg_next(17) <= Delay17_reg(16);
  Delay17_reg_next(18) <= Delay17_reg(17);
  Delay17_reg_next(19) <= Delay17_reg(18);
  Delay17_reg_next(20) <= Delay17_reg(19);
  Delay17_reg_next(21) <= Delay17_reg(20);
  Delay17_reg_next(22) <= Delay17_reg(21);
  Delay17_reg_next(23) <= Delay17_reg(22);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= Delay17_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Constant8_out1 <= '1';

  Constant7_out1 <= to_unsigned(16#19#, 8);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator2_out1 <=  NOT Delay4_out1;

  Logical_Operator_out1 <= Constant8_out1 AND Logical_Operator2_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1;
  Add_out1 <= Delay3_out1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 > Constant7_out1 ELSE
      '0';

  Constant3_out1 <= to_unsigned(16#00#, 8);

  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in1_unsigned(31);
  aExponent <= nfp_in1_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in1_unsigned(22 DOWNTO 0);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay1_out1 <= aExponent;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Compare_To_Zero_out1 <= '1' WHEN Delay1_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay2_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Constant_out1 <= to_unsigned(16#000000#, 23);

  
  Switch_out1 <= Delay2_out1 WHEN Compare_To_Zero_out1 = '0' ELSE
      Constant_out1;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= to_unsigned(16#000000#, 23);
        reduced_reg(1) <= to_unsigned(16#000000#, 23);
        reduced_reg(2) <= to_unsigned(16#000000#, 23);
        reduced_reg(3) <= to_unsigned(16#000000#, 23);
        reduced_reg(4) <= to_unsigned(16#000000#, 23);
        reduced_reg(5) <= to_unsigned(16#000000#, 23);
        reduced_reg(6) <= to_unsigned(16#000000#, 23);
        reduced_reg(7) <= to_unsigned(16#000000#, 23);
        reduced_reg(8) <= to_unsigned(16#000000#, 23);
        reduced_reg(9) <= to_unsigned(16#000000#, 23);
        reduced_reg(10) <= to_unsigned(16#000000#, 23);
        reduced_reg(11) <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
        reduced_reg(6) <= reduced_reg_next(6);
        reduced_reg(7) <= reduced_reg_next(7);
        reduced_reg(8) <= reduced_reg_next(8);
        reduced_reg(9) <= reduced_reg_next(9);
        reduced_reg(10) <= reduced_reg_next(10);
        reduced_reg(11) <= reduced_reg_next(11);
      END IF;
    END IF;
  END PROCESS reduced_process;

  checkDenormal_out2 <= reduced_reg(11);
  reduced_reg_next(0) <= Switch_out1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);
  reduced_reg_next(6) <= reduced_reg(5);
  reduced_reg_next(7) <= reduced_reg(6);
  reduced_reg_next(8) <= reduced_reg(7);
  reduced_reg_next(9) <= reduced_reg(8);
  reduced_reg_next(10) <= reduced_reg(9);
  reduced_reg_next(11) <= reduced_reg(10);

  
  aMantissa_0_out1 <= '1' WHEN checkDenormal_out2 = to_unsigned(16#000000#, 23) ELSE
      '0';

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= to_unsigned(16#00#, 8);
        reduced_reg_1(1) <= to_unsigned(16#00#, 8);
        reduced_reg_1(2) <= to_unsigned(16#00#, 8);
        reduced_reg_1(3) <= to_unsigned(16#00#, 8);
        reduced_reg_1(4) <= to_unsigned(16#00#, 8);
        reduced_reg_1(5) <= to_unsigned(16#00#, 8);
        reduced_reg_1(6) <= to_unsigned(16#00#, 8);
        reduced_reg_1(7) <= to_unsigned(16#00#, 8);
        reduced_reg_1(8) <= to_unsigned(16#00#, 8);
        reduced_reg_1(9) <= to_unsigned(16#00#, 8);
        reduced_reg_1(10) <= to_unsigned(16#00#, 8);
        reduced_reg_1(11) <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
        reduced_reg_1(4) <= reduced_reg_next_1(4);
        reduced_reg_1(5) <= reduced_reg_next_1(5);
        reduced_reg_1(6) <= reduced_reg_next_1(6);
        reduced_reg_1(7) <= reduced_reg_next_1(7);
        reduced_reg_1(8) <= reduced_reg_next_1(8);
        reduced_reg_1(9) <= reduced_reg_next_1(9);
        reduced_reg_1(10) <= reduced_reg_next_1(10);
        reduced_reg_1(11) <= reduced_reg_next_1(11);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  checkDenormal_out1 <= reduced_reg_1(11);
  reduced_reg_next_1(0) <= Delay1_out1;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);
  reduced_reg_next_1(4) <= reduced_reg_1(3);
  reduced_reg_next_1(5) <= reduced_reg_1(4);
  reduced_reg_next_1(6) <= reduced_reg_1(5);
  reduced_reg_next_1(7) <= reduced_reg_1(6);
  reduced_reg_next_1(8) <= reduced_reg_1(7);
  reduced_reg_next_1(9) <= reduced_reg_1(8);
  reduced_reg_next_1(10) <= reduced_reg_1(9);
  reduced_reg_next_1(11) <= reduced_reg_1(10);

  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN checkDenormal_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  Delay3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1_1 <= bExponent;
      END IF;
    END IF;
  END PROCESS Delay3_1_process;


  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2(0) <= to_unsigned(16#00#, 8);
        reduced_reg_2(1) <= to_unsigned(16#00#, 8);
        reduced_reg_2(2) <= to_unsigned(16#00#, 8);
        reduced_reg_2(3) <= to_unsigned(16#00#, 8);
        reduced_reg_2(4) <= to_unsigned(16#00#, 8);
        reduced_reg_2(5) <= to_unsigned(16#00#, 8);
        reduced_reg_2(6) <= to_unsigned(16#00#, 8);
        reduced_reg_2(7) <= to_unsigned(16#00#, 8);
        reduced_reg_2(8) <= to_unsigned(16#00#, 8);
        reduced_reg_2(9) <= to_unsigned(16#00#, 8);
        reduced_reg_2(10) <= to_unsigned(16#00#, 8);
        reduced_reg_2(11) <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= reduced_reg_next_2(0);
        reduced_reg_2(1) <= reduced_reg_next_2(1);
        reduced_reg_2(2) <= reduced_reg_next_2(2);
        reduced_reg_2(3) <= reduced_reg_next_2(3);
        reduced_reg_2(4) <= reduced_reg_next_2(4);
        reduced_reg_2(5) <= reduced_reg_next_2(5);
        reduced_reg_2(6) <= reduced_reg_next_2(6);
        reduced_reg_2(7) <= reduced_reg_next_2(7);
        reduced_reg_2(8) <= reduced_reg_next_2(8);
        reduced_reg_2(9) <= reduced_reg_next_2(9);
        reduced_reg_2(10) <= reduced_reg_next_2(10);
        reduced_reg_2(11) <= reduced_reg_next_2(11);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  checkDenormal1_out1 <= reduced_reg_2(11);
  reduced_reg_next_2(0) <= Delay3_out1_1;
  reduced_reg_next_2(1) <= reduced_reg_2(0);
  reduced_reg_next_2(2) <= reduced_reg_2(1);
  reduced_reg_next_2(3) <= reduced_reg_2(2);
  reduced_reg_next_2(4) <= reduced_reg_2(3);
  reduced_reg_next_2(5) <= reduced_reg_2(4);
  reduced_reg_next_2(6) <= reduced_reg_2(5);
  reduced_reg_next_2(7) <= reduced_reg_2(6);
  reduced_reg_next_2(8) <= reduced_reg_2(7);
  reduced_reg_next_2(9) <= reduced_reg_2(8);
  reduced_reg_next_2(10) <= reduced_reg_2(9);
  reduced_reg_next_2(11) <= reduced_reg_2(10);

  
  bExponent_0_out1 <= '1' WHEN checkDenormal1_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  
  Compare_To_Zero_out1_1 <= '1' WHEN Delay3_out1_1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Delay4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay4_out1_1 <= bMantissa;
      END IF;
    END IF;
  END PROCESS Delay4_1_process;


  Constant_out1_1 <= to_unsigned(16#000000#, 23);

  
  Switch_out1_1 <= Delay4_out1_1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      Constant_out1_1;

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_3(0) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(1) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(2) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(3) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(4) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(5) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(6) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(7) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(8) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(9) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(10) <= to_unsigned(16#000000#, 23);
        reduced_reg_3(11) <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        reduced_reg_3(0) <= reduced_reg_next_3(0);
        reduced_reg_3(1) <= reduced_reg_next_3(1);
        reduced_reg_3(2) <= reduced_reg_next_3(2);
        reduced_reg_3(3) <= reduced_reg_next_3(3);
        reduced_reg_3(4) <= reduced_reg_next_3(4);
        reduced_reg_3(5) <= reduced_reg_next_3(5);
        reduced_reg_3(6) <= reduced_reg_next_3(6);
        reduced_reg_3(7) <= reduced_reg_next_3(7);
        reduced_reg_3(8) <= reduced_reg_next_3(8);
        reduced_reg_3(9) <= reduced_reg_next_3(9);
        reduced_reg_3(10) <= reduced_reg_next_3(10);
        reduced_reg_3(11) <= reduced_reg_next_3(11);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  checkDenormal1_out2 <= reduced_reg_3(11);
  reduced_reg_next_3(0) <= Switch_out1_1;
  reduced_reg_next_3(1) <= reduced_reg_3(0);
  reduced_reg_next_3(2) <= reduced_reg_3(1);
  reduced_reg_next_3(3) <= reduced_reg_3(2);
  reduced_reg_next_3(4) <= reduced_reg_3(3);
  reduced_reg_next_3(5) <= reduced_reg_3(4);
  reduced_reg_next_3(6) <= reduced_reg_3(5);
  reduced_reg_next_3(7) <= reduced_reg_3(6);
  reduced_reg_next_3(8) <= reduced_reg_3(7);
  reduced_reg_next_3(9) <= reduced_reg_3(8);
  reduced_reg_next_3(10) <= reduced_reg_3(9);
  reduced_reg_next_3(11) <= reduced_reg_3(10);

  
  aExponent_0_out1 <= '1' WHEN checkDenormal_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  alphaaExponent_0_aMantissa_out1 <= aMantissa_0_out1 AND aExponent_0_out1;

  
  bExponent_cfType_Exponent_I_out1 <= '1' WHEN checkDenormal1_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaaExponent_cfType_Exponent_out1 <= aExponent_cfType_Exponent_I_out1 OR bExponent_cfType_Exponent_I_out1;

  alphaaExponent_cfType_Exponent_out1_1 <= alphaaExponent_0_aMantissa_out1 OR alphaaExponent_cfType_Exponent_out1;

  
  bMantissa_0_out1 <= '1' WHEN checkDenormal1_out2 = to_unsigned(16#000000#, 23) ELSE
      '0';

  alphabExponent_0_bMantissa_out1 <= bExponent_0_out1 AND bMantissa_0_out1;

  alphaaExponent_cfType_Exponent_out1_2 <= alphaaExponent_cfType_Exponent_out1_1 OR alphabExponent_0_bMantissa_out1;

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_reg(0) <= '0';
        Delay20_reg(1) <= '0';
        Delay20_reg(2) <= '0';
        Delay20_reg(3) <= '0';
        Delay20_reg(4) <= '0';
        Delay20_reg(5) <= '0';
        Delay20_reg(6) <= '0';
        Delay20_reg(7) <= '0';
        Delay20_reg(8) <= '0';
        Delay20_reg(9) <= '0';
        Delay20_reg(10) <= '0';
        Delay20_reg(11) <= '0';
      ELSIF enb = '1' THEN
        Delay20_reg(0) <= Delay20_reg_next(0);
        Delay20_reg(1) <= Delay20_reg_next(1);
        Delay20_reg(2) <= Delay20_reg_next(2);
        Delay20_reg(3) <= Delay20_reg_next(3);
        Delay20_reg(4) <= Delay20_reg_next(4);
        Delay20_reg(5) <= Delay20_reg_next(5);
        Delay20_reg(6) <= Delay20_reg_next(6);
        Delay20_reg(7) <= Delay20_reg_next(7);
        Delay20_reg(8) <= Delay20_reg_next(8);
        Delay20_reg(9) <= Delay20_reg_next(9);
        Delay20_reg(10) <= Delay20_reg_next(10);
        Delay20_reg(11) <= Delay20_reg_next(11);
      END IF;
    END IF;
  END PROCESS Delay20_process;

  Delay20_out1 <= Delay20_reg(11);
  Delay20_reg_next(0) <= alphaaExponent_cfType_Exponent_out1_2;
  Delay20_reg_next(1) <= Delay20_reg(0);
  Delay20_reg_next(2) <= Delay20_reg(1);
  Delay20_reg_next(3) <= Delay20_reg(2);
  Delay20_reg_next(4) <= Delay20_reg(3);
  Delay20_reg_next(5) <= Delay20_reg(4);
  Delay20_reg_next(6) <= Delay20_reg(5);
  Delay20_reg_next(7) <= Delay20_reg(6);
  Delay20_reg_next(8) <= Delay20_reg(7);
  Delay20_reg_next(9) <= Delay20_reg(8);
  Delay20_reg_next(10) <= Delay20_reg(9);
  Delay20_reg_next(11) <= Delay20_reg(10);

  alpha0_out1 <= '0';

  
  Exponent_0_out1 <= '1' WHEN Delay1_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  C_out1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= Delay1_out1 WHEN Exponent_0_out1 = '0' ELSE
      C_out1;

  Delay3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= if_Exponent_0_out1;
      END IF;
    END IF;
  END PROCESS Delay3_2_process;


  DTC_out1 <= signed(resize(Delay3_out1_2, 10));

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay7_out1 <= DTC_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Exponent_0_out1_1 <= '1' WHEN Delay3_out1_1 = to_unsigned(16#00#, 8) ELSE
      '0';

  C_out1_1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1_1 <= Delay3_out1_1 WHEN Exponent_0_out1_1 = '0' ELSE
      C_out1_1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay_out1 <= if_Exponent_0_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  DTC1_out1 <= signed(resize(Delay_out1, 10));

  Delay4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_2 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay4_out1_2 <= DTC1_out1;
      END IF;
    END IF;
  END PROCESS Delay4_2_process;


  exp_a_norm_exp_b_norm_sub_temp <= resize(Delay7_out1, 32) - resize(Delay4_out1_2, 32);
  exp_a_norm_exp_b_norm_out1 <= exp_a_norm_exp_b_norm_sub_temp(10 DOWNTO 0);

  DTC1_out1_1 <= exp_a_norm_exp_b_norm_out1(9 DOWNTO 0);

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        modrem_Prep_out1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        modrem_Prep_out1 <= DTC1_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_4_process;


  reduced_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_4(0) <= to_signed(16#000#, 10);
        reduced_reg_4(1) <= to_signed(16#000#, 10);
        reduced_reg_4(2) <= to_signed(16#000#, 10);
        reduced_reg_4(3) <= to_signed(16#000#, 10);
        reduced_reg_4(4) <= to_signed(16#000#, 10);
        reduced_reg_4(5) <= to_signed(16#000#, 10);
        reduced_reg_4(6) <= to_signed(16#000#, 10);
        reduced_reg_4(7) <= to_signed(16#000#, 10);
        reduced_reg_4(8) <= to_signed(16#000#, 10);
        reduced_reg_4(9) <= to_signed(16#000#, 10);
        reduced_reg_4(10) <= to_signed(16#000#, 10);
        reduced_reg_4(11) <= to_signed(16#000#, 10);
        reduced_reg_4(12) <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        reduced_reg_4(0) <= reduced_reg_next_4(0);
        reduced_reg_4(1) <= reduced_reg_next_4(1);
        reduced_reg_4(2) <= reduced_reg_next_4(2);
        reduced_reg_4(3) <= reduced_reg_next_4(3);
        reduced_reg_4(4) <= reduced_reg_next_4(4);
        reduced_reg_4(5) <= reduced_reg_next_4(5);
        reduced_reg_4(6) <= reduced_reg_next_4(6);
        reduced_reg_4(7) <= reduced_reg_next_4(7);
        reduced_reg_4(8) <= reduced_reg_next_4(8);
        reduced_reg_4(9) <= reduced_reg_next_4(9);
        reduced_reg_4(10) <= reduced_reg_next_4(10);
        reduced_reg_4(11) <= reduced_reg_next_4(11);
        reduced_reg_4(12) <= reduced_reg_next_4(12);
      END IF;
    END IF;
  END PROCESS reduced_5_process;

  modrem_Prep_out1_1 <= reduced_reg_4(12);
  reduced_reg_next_4(0) <= modrem_Prep_out1;
  reduced_reg_next_4(1) <= reduced_reg_4(0);
  reduced_reg_next_4(2) <= reduced_reg_4(1);
  reduced_reg_next_4(3) <= reduced_reg_4(2);
  reduced_reg_next_4(4) <= reduced_reg_4(3);
  reduced_reg_next_4(5) <= reduced_reg_4(4);
  reduced_reg_next_4(6) <= reduced_reg_4(5);
  reduced_reg_next_4(7) <= reduced_reg_4(6);
  reduced_reg_next_4(8) <= reduced_reg_4(7);
  reduced_reg_next_4(9) <= reduced_reg_4(8);
  reduced_reg_next_4(10) <= reduced_reg_4(9);
  reduced_reg_next_4(11) <= reduced_reg_4(10);
  reduced_reg_next_4(12) <= reduced_reg_4(11);

  
  Compare_To_Constant1_out1 <= '1' WHEN modrem_Prep_out1_1 > to_signed(16#020#, 10) ELSE
      '0';

  reduced_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        modrem_Normalize_Exp_Mant_out3 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        modrem_Normalize_Exp_Mant_out3 <= Delay4_out1_2;
      END IF;
    END IF;
  END PROCESS reduced_6_process;


  alpha1_out1 <= to_unsigned(16#0#, 4);

  
  cfType_Exponent_Inf_or_NaN_out1 <= '1' WHEN Delay3_out1_1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaExponent_0_cfType_Exp_out1 <= cfType_Exponent_Inf_or_NaN_out1 OR Exponent_0_out1_1;

  alpha1_out1_1 <= '1';

  alpha0_out1_1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1 <= alpha1_out1_1 WHEN alphaExponent_0_cfType_Exp_out1 = '0' ELSE
      alpha0_out1_1;

  Bit_Concat_out1 <= if_Exponent_0_cfType_Exp_out1 & Switch_out1_1;

  Delay1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay1_out1_1 <= Bit_Concat_out1;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  Bit_Concat1_out1 <= alpha1_out1 & Delay1_out1_1;

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat1_out1);

  Delay5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay5_out1_1 <= reinterpretcast_bitconcat_fi_0_out1;
      END IF;
    END IF;
  END PROCESS Delay5_1_process;


  reduced_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        modrem_Normalize_Exp_Mant_out4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        modrem_Normalize_Exp_Mant_out4 <= Delay5_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_7_process;


  Bit_Slice_out1 <= unsigned(modrem_Normalize_Exp_Mant_out4(23 DOWNTO 0));

  Bit_Slice2_out1 <= Bit_Slice_out1(7 DOWNTO 0);

  Bit_Slice16_out1 <= Bit_Slice2_out1(0);

  Bit_Slice15_out1 <= Bit_Slice2_out1(1);

  Logical_Operator5_out1 <= Bit_Slice16_out1 OR Bit_Slice15_out1;

  Bit_Slice14_out1 <= Bit_Slice2_out1(2);

  Bit_Slice13_out1 <= Bit_Slice2_out1(3);

  Logical_Operator7_out1 <= Bit_Slice14_out1 OR Bit_Slice13_out1;

  Logical_Operator6_out1 <= Logical_Operator5_out1 OR Logical_Operator7_out1;

  Bit_Slice12_out1 <= Bit_Slice2_out1(4);

  Bit_Slice11_out1 <= Bit_Slice2_out1(5);

  Logical_Operator4_out1 <= Bit_Slice12_out1 OR Bit_Slice11_out1;

  Bit_Slice10_out1 <= Bit_Slice2_out1(6);

  Bit_Slice9_out1 <= Bit_Slice2_out1(7);

  Logical_Operator14_out1 <= Bit_Slice10_out1 OR Bit_Slice9_out1;

  Logical_Operator13_out1 <= Logical_Operator4_out1 OR Logical_Operator14_out1;

  Bit_Slice1_out1 <= Bit_Slice_out1(15 DOWNTO 8);

  Bit_Slice16_out1_1 <= Bit_Slice1_out1(0);

  Bit_Slice15_out1_1 <= Bit_Slice1_out1(1);

  Logical_Operator5_out1_1 <= Bit_Slice16_out1_1 OR Bit_Slice15_out1_1;

  Bit_Slice14_out1_1 <= Bit_Slice1_out1(2);

  Bit_Slice13_out1_1 <= Bit_Slice1_out1(3);

  Logical_Operator7_out1_1 <= Bit_Slice14_out1_1 OR Bit_Slice13_out1_1;

  Logical_Operator6_out1_1 <= Logical_Operator5_out1_1 OR Logical_Operator7_out1_1;

  Bit_Slice12_out1_1 <= Bit_Slice1_out1(4);

  Bit_Slice11_out1_1 <= Bit_Slice1_out1(5);

  Logical_Operator4_out1_1 <= Bit_Slice12_out1_1 OR Bit_Slice11_out1_1;

  Bit_Slice10_out1_1 <= Bit_Slice1_out1(6);

  Bit_Slice9_out1_1 <= Bit_Slice1_out1(7);

  Logical_Operator14_out1_1 <= Bit_Slice10_out1_1 OR Bit_Slice9_out1_1;

  Logical_Operator13_out1_1 <= Logical_Operator4_out1_1 OR Logical_Operator14_out1_1;

  Bit_Slice4_out1 <= Bit_Slice_out1(23 DOWNTO 16);

  Bit_Slice16_out1_2 <= Bit_Slice4_out1(0);

  Bit_Slice15_out1_2 <= Bit_Slice4_out1(1);

  Logical_Operator5_out1_2 <= Bit_Slice16_out1_2 OR Bit_Slice15_out1_2;

  Bit_Slice14_out1_2 <= Bit_Slice4_out1(2);

  Bit_Slice13_out1_2 <= Bit_Slice4_out1(3);

  Logical_Operator7_out1_2 <= Bit_Slice14_out1_2 OR Bit_Slice13_out1_2;

  Bit_Slice12_out1_2 <= Bit_Slice4_out1(4);

  Bit_Slice11_out1_2 <= Bit_Slice4_out1(5);

  Bit_Slice10_out1_2 <= Bit_Slice4_out1(6);

  Bit_Slice9_out1_2 <= Bit_Slice4_out1(7);

  Constant_out1_2 <= to_unsigned(16#18#, 8);

  Constant9_out1 <= to_unsigned(16#7F#, 8);

  
  Switch11_out1 <= Constant_out1_2 WHEN Bit_Slice9_out1_2 = '0' ELSE
      Constant9_out1;

  Logical_Operator4_out1_2 <= Bit_Slice12_out1_2 OR Bit_Slice11_out1_2;

  Constant10_out1 <= to_unsigned(16#80#, 8);

  
  Switch12_out1 <= Switch11_out1 WHEN Bit_Slice10_out1_2 = '0' ELSE
      Constant10_out1;

  Constant11_out1 <= to_unsigned(16#81#, 8);

  
  Switch14_out1 <= Constant_out1_2 WHEN Bit_Slice11_out1_2 = '0' ELSE
      Constant11_out1;

  Constant12_out1 <= to_unsigned(16#82#, 8);

  Logical_Operator6_out1_2 <= Logical_Operator5_out1_2 OR Logical_Operator7_out1_2;

  
  Switch15_out1 <= Switch14_out1 WHEN Bit_Slice12_out1_2 = '0' ELSE
      Constant12_out1;

  
  Switch16_out1 <= Switch12_out1 WHEN Logical_Operator4_out1_2 = '0' ELSE
      Switch15_out1;

  Constant13_out1 <= to_unsigned(16#83#, 8);

  
  Switch17_out1 <= Constant_out1_2 WHEN Bit_Slice13_out1_2 = '0' ELSE
      Constant13_out1;

  Constant14_out1 <= to_unsigned(16#84#, 8);

  
  Switch18_out1 <= Switch17_out1 WHEN Bit_Slice14_out1_2 = '0' ELSE
      Constant14_out1;

  Constant15_out1 <= to_unsigned(16#85#, 8);

  
  Switch19_out1 <= Constant_out1_2 WHEN Bit_Slice15_out1_2 = '0' ELSE
      Constant15_out1;

  Constant16_out1 <= to_unsigned(16#86#, 8);

  
  Switch20_out1 <= Switch19_out1 WHEN Bit_Slice16_out1_2 = '0' ELSE
      Constant16_out1;

  Logical_Operator12_out1 <= Logical_Operator6_out1_1 OR Logical_Operator13_out1_1;

  
  Switch21_out1 <= Switch18_out1 WHEN Logical_Operator5_out1_2 = '0' ELSE
      Switch20_out1;

  
  Switch13_out1 <= Switch16_out1 WHEN Logical_Operator6_out1_2 = '0' ELSE
      Switch21_out1;

  Constant_out1_3 <= to_unsigned(16#18#, 8);

  Constant9_out1_1 <= to_unsigned(16#87#, 8);

  
  Switch11_out1_1 <= Constant_out1_3 WHEN Bit_Slice9_out1_1 = '0' ELSE
      Constant9_out1_1;

  Constant10_out1_1 <= to_unsigned(16#88#, 8);

  
  Switch12_out1_1 <= Switch11_out1_1 WHEN Bit_Slice10_out1_1 = '0' ELSE
      Constant10_out1_1;

  Constant11_out1_1 <= to_unsigned(16#89#, 8);

  
  Switch14_out1_1 <= Constant_out1_3 WHEN Bit_Slice11_out1_1 = '0' ELSE
      Constant11_out1_1;

  Constant12_out1_1 <= to_unsigned(16#8A#, 8);

  
  Switch15_out1_1 <= Switch14_out1_1 WHEN Bit_Slice12_out1_1 = '0' ELSE
      Constant12_out1_1;

  
  Switch16_out1_1 <= Switch12_out1_1 WHEN Logical_Operator4_out1_1 = '0' ELSE
      Switch15_out1_1;

  Constant13_out1_1 <= to_unsigned(16#8B#, 8);

  
  Switch17_out1_1 <= Constant_out1_3 WHEN Bit_Slice13_out1_1 = '0' ELSE
      Constant13_out1_1;

  Constant14_out1_1 <= to_unsigned(16#8C#, 8);

  
  Switch18_out1_1 <= Switch17_out1_1 WHEN Bit_Slice14_out1_1 = '0' ELSE
      Constant14_out1_1;

  Constant15_out1_1 <= to_unsigned(16#8D#, 8);

  
  Switch19_out1_1 <= Constant_out1_3 WHEN Bit_Slice15_out1_1 = '0' ELSE
      Constant15_out1_1;

  Constant16_out1_1 <= to_unsigned(16#8E#, 8);

  
  Switch20_out1_1 <= Switch19_out1_1 WHEN Bit_Slice16_out1_1 = '0' ELSE
      Constant16_out1_1;

  
  Switch21_out1_1 <= Switch18_out1_1 WHEN Logical_Operator5_out1_1 = '0' ELSE
      Switch20_out1_1;

  Logical_Operator12_out1_1 <= Logical_Operator6_out1 OR Logical_Operator13_out1;

  
  Switch13_out1_1 <= Switch16_out1_1 WHEN Logical_Operator6_out1_1 = '0' ELSE
      Switch21_out1_1;

  
  Switch33_out1 <= Switch13_out1 WHEN Logical_Operator12_out1 = '0' ELSE
      Switch13_out1_1;

  Constant_out1_4 <= to_unsigned(16#18#, 8);

  Constant9_out1_2 <= to_unsigned(16#8F#, 8);

  
  Switch11_out1_2 <= Constant_out1_4 WHEN Bit_Slice9_out1 = '0' ELSE
      Constant9_out1_2;

  Constant10_out1_2 <= to_unsigned(16#90#, 8);

  
  Switch12_out1_2 <= Switch11_out1_2 WHEN Bit_Slice10_out1 = '0' ELSE
      Constant10_out1_2;

  Constant11_out1_2 <= to_unsigned(16#91#, 8);

  
  Switch14_out1_2 <= Constant_out1_4 WHEN Bit_Slice11_out1 = '0' ELSE
      Constant11_out1_2;

  Constant12_out1_2 <= to_unsigned(16#92#, 8);

  
  Switch15_out1_2 <= Switch14_out1_2 WHEN Bit_Slice12_out1 = '0' ELSE
      Constant12_out1_2;

  
  Switch16_out1_2 <= Switch12_out1_2 WHEN Logical_Operator4_out1 = '0' ELSE
      Switch15_out1_2;

  Constant13_out1_2 <= to_unsigned(16#93#, 8);

  
  Switch17_out1_2 <= Constant_out1_4 WHEN Bit_Slice13_out1 = '0' ELSE
      Constant13_out1_2;

  Constant14_out1_2 <= to_unsigned(16#94#, 8);

  
  Switch18_out1_2 <= Switch17_out1_2 WHEN Bit_Slice14_out1 = '0' ELSE
      Constant14_out1_2;

  Constant15_out1_2 <= to_unsigned(16#95#, 8);

  
  Switch19_out1_2 <= Constant_out1_4 WHEN Bit_Slice15_out1 = '0' ELSE
      Constant15_out1_2;

  Constant16_out1_2 <= to_unsigned(16#96#, 8);

  
  Switch20_out1_2 <= Switch19_out1_2 WHEN Bit_Slice16_out1 = '0' ELSE
      Constant16_out1_2;

  
  Switch21_out1_2 <= Switch18_out1_2 WHEN Logical_Operator5_out1 = '0' ELSE
      Switch20_out1_2;

  
  Switch13_out1_2 <= Switch16_out1_2 WHEN Logical_Operator6_out1 = '0' ELSE
      Switch21_out1_2;

  
  Switch34_out1 <= Switch33_out1 WHEN Logical_Operator12_out1_1 = '0' ELSE
      Switch13_out1_2;

  exp_norm_p_sub_cast <= signed(resize(Switch34_out1, 32));
  exp_norm_p_sub_temp <= resize(modrem_Normalize_Exp_Mant_out3, 32) - exp_norm_p_sub_cast;
  exp_norm_p_out1 <= exp_norm_p_sub_temp(11 DOWNTO 0);

  Bit_Slice1_out1_1 <= exp_norm_p_out1(11);

  Logical_Operator_out1_1 <=  NOT Bit_Slice1_out1_1;

  Delay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg(0) <= '0';
        Delay_reg(1) <= '0';
        Delay_reg(2) <= '0';
        Delay_reg(3) <= '0';
        Delay_reg(4) <= '0';
        Delay_reg(5) <= '0';
        Delay_reg(6) <= '0';
        Delay_reg(7) <= '0';
        Delay_reg(8) <= '0';
        Delay_reg(9) <= '0';
        Delay_reg(10) <= '0';
        Delay_reg(11) <= '0';
        Delay_reg(12) <= '0';
      ELSIF enb = '1' THEN
        Delay_reg(0) <= Delay_reg_next(0);
        Delay_reg(1) <= Delay_reg_next(1);
        Delay_reg(2) <= Delay_reg_next(2);
        Delay_reg(3) <= Delay_reg_next(3);
        Delay_reg(4) <= Delay_reg_next(4);
        Delay_reg(5) <= Delay_reg_next(5);
        Delay_reg(6) <= Delay_reg_next(6);
        Delay_reg(7) <= Delay_reg_next(7);
        Delay_reg(8) <= Delay_reg_next(8);
        Delay_reg(9) <= Delay_reg_next(9);
        Delay_reg(10) <= Delay_reg_next(10);
        Delay_reg(11) <= Delay_reg_next(11);
        Delay_reg(12) <= Delay_reg_next(12);
      END IF;
    END IF;
  END PROCESS Delay_1_process;

  Delay_out1_1 <= Delay_reg(12);
  Delay_reg_next(0) <= Logical_Operator_out1_1;
  Delay_reg_next(1) <= Delay_reg(0);
  Delay_reg_next(2) <= Delay_reg(1);
  Delay_reg_next(3) <= Delay_reg(2);
  Delay_reg_next(4) <= Delay_reg(3);
  Delay_reg_next(5) <= Delay_reg(4);
  Delay_reg_next(6) <= Delay_reg(5);
  Delay_reg_next(7) <= Delay_reg(6);
  Delay_reg_next(8) <= Delay_reg(7);
  Delay_reg_next(9) <= Delay_reg(8);
  Delay_reg_next(10) <= Delay_reg(9);
  Delay_reg_next(11) <= Delay_reg(10);
  Delay_reg_next(12) <= Delay_reg(11);

  
  Compare_To_Zero_out1_2 <= '1' WHEN modrem_Prep_out1_1 < to_signed(16#000#, 10) ELSE
      '0';

  Logical_Operator_out1_2 <=  NOT (Delay_out1_1 OR Compare_To_Zero_out1_2);

  alpha24_out1 <= to_signed(16#018#, 10);

  Bit_Slice4_out1_1 <= modrem_Prep_out1(9);

  BitSlice_out1 <= modrem_Prep_out1(0);

  Logical_Operator1_out1 <=  NOT BitSlice_out1;

  C2_out1 <= to_signed(-16#002#, 10);

  C_out1_2 <= to_signed(-16#001#, 10);

  Logical_Operator_out1_3 <= Bit_Slice4_out1_1 OR Logical_Operator1_out1;

  exp_diff_2_add_temp <= resize(modrem_Prep_out1, 32) + resize(C2_out1, 32);
  exp_diff_2_out1 <= exp_diff_2_add_temp(10 DOWNTO 0);

  DTC3_out1 <= exp_diff_2_out1(9 DOWNTO 0);

  exp_diff_1_add_temp <= resize(modrem_Prep_out1, 32) + resize(C_out1_2, 32);
  exp_diff_1_out1 <= exp_diff_1_add_temp(10 DOWNTO 0);

  DTC_out1_1 <= exp_diff_1_out1(9 DOWNTO 0);

  
  if_exp_diff_0_1_out1 <= DTC3_out1 WHEN Logical_Operator_out1_3 = '0' ELSE
      DTC_out1_1;

  Delay1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_2 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= if_exp_diff_0_1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_2_process;


  C_out1_3 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp <= resize(Delay1_out1_2, 32) + resize(C_out1_3, 32);
  exp_diff_in_2_out1 <= exp_diff_in_2_add_temp(10 DOWNTO 0);

  DTC3_out1_1 <= exp_diff_in_2_out1(9 DOWNTO 0);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay6_out1 <= DTC3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  C_out1_4 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_1 <= resize(Delay6_out1, 32) + resize(C_out1_4, 32);
  exp_diff_in_2_out1_1 <= exp_diff_in_2_add_temp_1(10 DOWNTO 0);

  DTC3_out1_2 <= exp_diff_in_2_out1_1(9 DOWNTO 0);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay11_out1 <= DTC3_out1_2;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  C_out1_5 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_2 <= resize(Delay11_out1, 32) + resize(C_out1_5, 32);
  exp_diff_in_2_out1_2 <= exp_diff_in_2_add_temp_2(10 DOWNTO 0);

  DTC3_out1_3 <= exp_diff_in_2_out1_2(9 DOWNTO 0);

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay16_out1 <= DTC3_out1_3;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  C_out1_6 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_3 <= resize(Delay16_out1, 32) + resize(C_out1_6, 32);
  exp_diff_in_2_out1_3 <= exp_diff_in_2_add_temp_3(10 DOWNTO 0);

  DTC3_out1_4 <= exp_diff_in_2_out1_3(9 DOWNTO 0);

  Delay1_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_3 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay1_out1_3 <= DTC3_out1_4;
      END IF;
    END IF;
  END PROCESS Delay1_3_process;


  C_out1_7 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_4 <= resize(Delay1_out1_3, 32) + resize(C_out1_7, 32);
  exp_diff_in_2_out1_4 <= exp_diff_in_2_add_temp_4(10 DOWNTO 0);

  DTC3_out1_5 <= exp_diff_in_2_out1_4(9 DOWNTO 0);

  Delay6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay6_out1_1 <= DTC3_out1_5;
      END IF;
    END IF;
  END PROCESS Delay6_1_process;


  C_out1_8 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_5 <= resize(Delay6_out1_1, 32) + resize(C_out1_8, 32);
  exp_diff_in_2_out1_5 <= exp_diff_in_2_add_temp_5(10 DOWNTO 0);

  DTC3_out1_6 <= exp_diff_in_2_out1_5(9 DOWNTO 0);

  Delay11_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay11_out1_1 <= DTC3_out1_6;
      END IF;
    END IF;
  END PROCESS Delay11_1_process;


  C_out1_9 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_6 <= resize(Delay11_out1_1, 32) + resize(C_out1_9, 32);
  exp_diff_in_2_out1_6 <= exp_diff_in_2_add_temp_6(10 DOWNTO 0);

  DTC3_out1_7 <= exp_diff_in_2_out1_6(9 DOWNTO 0);

  Delay16_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1_1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay16_out1_1 <= DTC3_out1_7;
      END IF;
    END IF;
  END PROCESS Delay16_1_process;


  C_out1_10 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_7 <= resize(Delay16_out1_1, 32) + resize(C_out1_10, 32);
  exp_diff_in_2_out1_7 <= exp_diff_in_2_add_temp_7(10 DOWNTO 0);

  DTC3_out1_8 <= exp_diff_in_2_out1_7(9 DOWNTO 0);

  Delay1_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_4 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay1_out1_4 <= DTC3_out1_8;
      END IF;
    END IF;
  END PROCESS Delay1_4_process;


  C_out1_11 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_8 <= resize(Delay1_out1_4, 32) + resize(C_out1_11, 32);
  exp_diff_in_2_out1_8 <= exp_diff_in_2_add_temp_8(10 DOWNTO 0);

  DTC3_out1_9 <= exp_diff_in_2_out1_8(9 DOWNTO 0);

  Delay6_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_2 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay6_out1_2 <= DTC3_out1_9;
      END IF;
    END IF;
  END PROCESS Delay6_2_process;


  C_out1_12 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_9 <= resize(Delay6_out1_2, 32) + resize(C_out1_12, 32);
  exp_diff_in_2_out1_9 <= exp_diff_in_2_add_temp_9(10 DOWNTO 0);

  DTC3_out1_10 <= exp_diff_in_2_out1_9(9 DOWNTO 0);

  Delay11_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_2 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay11_out1_2 <= DTC3_out1_10;
      END IF;
    END IF;
  END PROCESS Delay11_2_process;


  C_out1_13 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_10 <= resize(Delay11_out1_2, 32) + resize(C_out1_13, 32);
  exp_diff_in_2_out1_10 <= exp_diff_in_2_add_temp_10(10 DOWNTO 0);

  DTC3_out1_11 <= exp_diff_in_2_out1_10(9 DOWNTO 0);

  Delay16_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1_2 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay16_out1_2 <= DTC3_out1_11;
      END IF;
    END IF;
  END PROCESS Delay16_2_process;


  C_out1_14 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_11 <= resize(Delay16_out1_2, 32) + resize(C_out1_14, 32);
  exp_diff_in_2_out1_11 <= exp_diff_in_2_add_temp_11(10 DOWNTO 0);

  DTC3_out1_12 <= exp_diff_in_2_out1_11(9 DOWNTO 0);

  reduced_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        modrem_12_Iterations_out2 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        modrem_12_Iterations_out2 <= DTC3_out1_12;
      END IF;
    END IF;
  END PROCESS reduced_8_process;


  
  Compare_To_Constant_out1 <= '1' WHEN modrem_12_Iterations_out2 >= to_signed(-16#001#, 10) ELSE
      '0';

  alpha1_out1_2 <= to_signed(-16#001#, 10);

  
  Switch_out1_2 <= alpha1_out1_2 WHEN Compare_To_Constant_out1 = '0' ELSE
      modrem_12_Iterations_out2;

  exp_diff_max_exp_2diff_1_sub_temp <= resize(modrem_Prep_out1_1, 32) - resize(Switch_out1_2, 32);
  exp_diff_max_exp_2diff_1_out1 <= exp_diff_max_exp_2diff_1_sub_temp(10 DOWNTO 0);

  DTC1_out1_2 <= exp_diff_max_exp_2diff_1_out1(9 DOWNTO 0);

  alpha24_pos_sub_temp <= resize(alpha24_out1, 32) - resize(DTC1_out1_2, 32);
  alpha24_pos_out1 <= alpha24_pos_sub_temp(10 DOWNTO 0);

  DTC2_out1 <= alpha24_pos_out1(9 DOWNTO 0);

  Delay5_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_2 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay5_out1_2 <= DTC2_out1;
      END IF;
    END IF;
  END PROCESS Delay5_2_process;


  Bit_Slice_out1_1 <= Delay5_out1_2(9);

  alpha0_out1_2 <= to_unsigned(16#0#, 4);

  
  cfType_Exponent_Inf_or_NaN_out1_1 <= '1' WHEN Delay1_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaExponent_0_cfType_Exp_out1_1 <= cfType_Exponent_Inf_or_NaN_out1_1 OR Exponent_0_out1;

  alpha1_out1_3 <= '1';

  alpha0_out1_3 <= '0';

  
  if_Exponent_0_cfType_Exp_out1_1 <= alpha1_out1_3 WHEN alphaExponent_0_cfType_Exp_out1_1 = '0' ELSE
      alpha0_out1_3;

  Bit_Concat_out1_1 <= if_Exponent_0_cfType_Exp_out1_1 & Switch_out1;

  Delay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay2_out1_1 <= Bit_Concat_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_1_process;


  Bit_Concat_out1_2 <= alpha0_out1_2 & Delay2_out1_1;

  reinterpretcast_bitconcat_fi_0_out1_1 <= signed(Bit_Concat_out1_2);

  Delay6_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay6_out1_3 <= reinterpretcast_bitconcat_fi_0_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_3_process;


  reduced_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        modrem_Normalize_Exp_Mant_out2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        modrem_Normalize_Exp_Mant_out2 <= Delay6_out1_3;
      END IF;
    END IF;
  END PROCESS reduced_9_process;


  alphamant_b_norm_in0 <=  - (resize(Delay5_out1_1, 29));
  alphamant_b_norm_out1 <= alphamant_b_norm_in0(27 DOWNTO 0);

  Delay2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay2_out1_2 <= alphamant_b_norm_out1;
      END IF;
    END IF;
  END PROCESS Delay2_2_process;


  mant_a_norm_mB_add_temp <= resize(modrem_Normalize_Exp_Mant_out2, 32) + resize(Delay2_out1_2, 32);
  mant_a_norm_mB_out1 <= mant_a_norm_mB_add_temp(28 DOWNTO 0);

  DTC2_out1_1 <= mant_a_norm_mB_out1(27 DOWNTO 0);

  Bit_Slice3_out1 <= DTC2_out1_1(27);

  
  if_tmp_0_out1 <= DTC2_out1_1 WHEN Bit_Slice3_out1 = '0' ELSE
      modrem_Normalize_Exp_Mant_out2;

  bitsll_mant_a_norm_1_out1 <= modrem_Normalize_Exp_Mant_out2 sll 1;

  bitsll_mant_b_norm_1_out1 <= Delay5_out1_1 sll 1;

  alphatmp1_in0 <=  - (resize(bitsll_mant_b_norm_1_out1, 29));
  alphatmp1_out1 <= alphatmp1_in0(27 DOWNTO 0);

  Delay3_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay3_out1_3 <= alphatmp1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_3_process;


  tmp1_m2B_add_temp <= resize(bitsll_mant_a_norm_1_out1, 32) + resize(Delay3_out1_3, 32);
  tmp1_m2B_out1 <= tmp1_m2B_add_temp(28 DOWNTO 0);

  DTC5_out1 <= tmp1_m2B_out1(27 DOWNTO 0);

  Bit_Slice1_out1_2 <= DTC5_out1(27);

  tmp1_mant_b_norm_add_temp <= resize(bitsll_mant_b_norm_1_out1, 32) + resize(Delay5_out1_1, 32);
  tmp1_mant_b_norm_out1 <= tmp1_mant_b_norm_add_temp(28 DOWNTO 0);

  DTC_out1_2 <= tmp1_mant_b_norm_out1(27 DOWNTO 0);

  alphatmp2_in0 <=  - (resize(DTC_out1_2, 29));
  alphatmp2_out1 <= alphatmp2_in0(27 DOWNTO 0);

  Delay4_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay4_out1_3 <= alphatmp2_out1;
      END IF;
    END IF;
  END PROCESS Delay4_3_process;


  tmp1_m3B_add_temp <= resize(bitsll_mant_a_norm_1_out1, 32) + resize(Delay4_out1_3, 32);
  tmp1_m3B_out1 <= tmp1_m3B_add_temp(28 DOWNTO 0);

  DTC6_out1 <= tmp1_m3B_out1(27 DOWNTO 0);

  Bit_Slice_out1_2 <= DTC6_out1(27);

  
  if_tmp4_0_out1 <= DTC6_out1 WHEN Bit_Slice_out1_2 = '0' ELSE
      DTC5_out1;

  tmp1_mB_add_temp <= resize(bitsll_mant_a_norm_1_out1, 32) + resize(Delay2_out1_2, 32);
  tmp1_mB_out1 <= tmp1_mB_add_temp(28 DOWNTO 0);

  DTC4_out1 <= tmp1_mB_out1(27 DOWNTO 0);

  Bit_Slice2_out1_1 <= DTC4_out1(27);

  
  if_tmp2_0_out1 <= DTC4_out1 WHEN Bit_Slice2_out1_1 = '0' ELSE
      bitsll_mant_a_norm_1_out1;

  
  if_tmp3_0_out1 <= if_tmp4_0_out1 WHEN Bit_Slice1_out1_2 = '0' ELSE
      if_tmp2_0_out1;

  
  if_bitget_exp_diff_1_0_out1 <= if_tmp_0_out1 WHEN BitSlice_out1 = '0' ELSE
      if_tmp3_0_out1;

  
  if_exp_diff_0_out1 <= if_bitget_exp_diff_1_0_out1 WHEN Bit_Slice4_out1_1 = '0' ELSE
      modrem_Normalize_Exp_Mant_out2;

  Delay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay_out1_2 <= if_exp_diff_0_out1;
      END IF;
    END IF;
  END PROCESS Delay_2_process;


  Bit_Shift_out1 <= Delay_out1_2 sll 2;

  Delay3_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay3_out1_4 <= Delay3_out1_3;
      END IF;
    END IF;
  END PROCESS Delay3_4_process;


  Add1_add_temp <= resize(Bit_Shift_out1, 32) + resize(Delay3_out1_4, 32);
  Add1_out1 <= Add1_add_temp(27 DOWNTO 0);

  Bit_Slice1_out1_3 <= Add1_out1(27);

  Delay4_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay4_out1_4 <= Delay4_out1_3;
      END IF;
    END IF;
  END PROCESS Delay4_4_process;


  Add2_add_temp <= resize(Bit_Shift_out1, 32) + resize(Delay4_out1_4, 32);
  Add2_out1 <= Add2_add_temp(27 DOWNTO 0);

  Bit_Slice2_out1_2 <= Add2_out1(27);

  
  Switch1_out1 <= Add2_out1 WHEN Bit_Slice2_out1_2 = '0' ELSE
      Add1_out1;

  Delay2_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay2_out1_3 <= Delay2_out1_2;
      END IF;
    END IF;
  END PROCESS Delay2_3_process;


  Add_add_temp <= resize(Bit_Shift_out1, 32) + resize(Delay2_out1_3, 32);
  Add_out1_1 <= Add_add_temp(27 DOWNTO 0);

  Bit_Slice_out1_3 <= Add_out1_1(27);

  Bit_Slice3_out1_1 <= Delay1_out1_2(9);

  
  Switch_out1_3 <= Add_out1_1 WHEN Bit_Slice_out1_3 = '0' ELSE
      Bit_Shift_out1;

  
  Switch2_out1 <= Switch1_out1 WHEN Bit_Slice1_out1_3 = '0' ELSE
      Switch_out1_3;

  
  if_exp_diff_in_0_out1 <= Switch2_out1 WHEN Bit_Slice3_out1_1 = '0' ELSE
      Delay_out1_2;

  Delay5_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay5_out1_3 <= if_exp_diff_in_0_out1;
      END IF;
    END IF;
  END PROCESS Delay5_3_process;


  Bit_Shift_out1_1 <= Delay5_out1_3 sll 2;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Delay3_out1_4;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Add1_add_temp_1 <= resize(Bit_Shift_out1_1, 32) + resize(Delay8_out1, 32);
  Add1_out1_1 <= Add1_add_temp_1(27 DOWNTO 0);

  Bit_Slice1_out1_4 <= Add1_out1_1(27);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay9_out1 <= Delay4_out1_4;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Add2_add_temp_1 <= resize(Bit_Shift_out1_1, 32) + resize(Delay9_out1, 32);
  Add2_out1_1 <= Add2_add_temp_1(27 DOWNTO 0);

  Bit_Slice2_out1_3 <= Add2_out1_1(27);

  
  Switch1_out1_1 <= Add2_out1_1 WHEN Bit_Slice2_out1_3 = '0' ELSE
      Add1_out1_1;

  Delay7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay7_out1_1 <= Delay2_out1_3;
      END IF;
    END IF;
  END PROCESS Delay7_1_process;


  Add_add_temp_1 <= resize(Bit_Shift_out1_1, 32) + resize(Delay7_out1_1, 32);
  Add_out1_2 <= Add_add_temp_1(27 DOWNTO 0);

  Bit_Slice_out1_4 <= Add_out1_2(27);

  Bit_Slice3_out1_2 <= Delay6_out1(9);

  
  Switch_out1_4 <= Add_out1_2 WHEN Bit_Slice_out1_4 = '0' ELSE
      Bit_Shift_out1_1;

  
  Switch2_out1_1 <= Switch1_out1_1 WHEN Bit_Slice1_out1_4 = '0' ELSE
      Switch_out1_4;

  
  if_exp_diff_in_0_out1_1 <= Switch2_out1_1 WHEN Bit_Slice3_out1_2 = '0' ELSE
      Delay5_out1_3;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay10_out1 <= if_exp_diff_in_0_out1_1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Bit_Shift_out1_2 <= Delay10_out1 sll 2;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay13_out1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  Add1_add_temp_2 <= resize(Bit_Shift_out1_2, 32) + resize(Delay13_out1, 32);
  Add1_out1_2 <= Add1_add_temp_2(27 DOWNTO 0);

  Bit_Slice1_out1_5 <= Add1_out1_2(27);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay14_out1 <= Delay9_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Add2_add_temp_2 <= resize(Bit_Shift_out1_2, 32) + resize(Delay14_out1, 32);
  Add2_out1_2 <= Add2_add_temp_2(27 DOWNTO 0);

  Bit_Slice2_out1_4 <= Add2_out1_2(27);

  
  Switch1_out1_2 <= Add2_out1_2 WHEN Bit_Slice2_out1_4 = '0' ELSE
      Add1_out1_2;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay12_out1 <= Delay7_out1_1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Add_add_temp_2 <= resize(Bit_Shift_out1_2, 32) + resize(Delay12_out1, 32);
  Add_out1_3 <= Add_add_temp_2(27 DOWNTO 0);

  Bit_Slice_out1_5 <= Add_out1_3(27);

  Bit_Slice3_out1_3 <= Delay11_out1(9);

  
  Switch_out1_5 <= Add_out1_3 WHEN Bit_Slice_out1_5 = '0' ELSE
      Bit_Shift_out1_2;

  
  Switch2_out1_2 <= Switch1_out1_2 WHEN Bit_Slice1_out1_5 = '0' ELSE
      Switch_out1_5;

  
  if_exp_diff_in_0_out1_2 <= Switch2_out1_2 WHEN Bit_Slice3_out1_3 = '0' ELSE
      Delay10_out1;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay15_out1 <= if_exp_diff_in_0_out1_2;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  Bit_Shift_out1_3 <= Delay15_out1 sll 2;

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay18_out1 <= Delay13_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  Add1_add_temp_3 <= resize(Bit_Shift_out1_3, 32) + resize(Delay18_out1, 32);
  Add1_out1_3 <= Add1_add_temp_3(27 DOWNTO 0);

  Bit_Slice1_out1_6 <= Add1_out1_3(27);

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay19_out1 <= Delay14_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  Add2_add_temp_3 <= resize(Bit_Shift_out1_3, 32) + resize(Delay19_out1, 32);
  Add2_out1_3 <= Add2_add_temp_3(27 DOWNTO 0);

  Bit_Slice2_out1_5 <= Add2_out1_3(27);

  
  Switch1_out1_3 <= Add2_out1_3 WHEN Bit_Slice2_out1_5 = '0' ELSE
      Add1_out1_3;

  Delay17_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay17_out1_2 <= Delay12_out1;
      END IF;
    END IF;
  END PROCESS Delay17_2_process;


  Add_add_temp_3 <= resize(Bit_Shift_out1_3, 32) + resize(Delay17_out1_2, 32);
  Add_out1_4 <= Add_add_temp_3(27 DOWNTO 0);

  Bit_Slice_out1_6 <= Add_out1_4(27);

  Bit_Slice3_out1_4 <= Delay16_out1(9);

  
  Switch_out1_6 <= Add_out1_4 WHEN Bit_Slice_out1_6 = '0' ELSE
      Bit_Shift_out1_3;

  
  Switch2_out1_3 <= Switch1_out1_3 WHEN Bit_Slice1_out1_6 = '0' ELSE
      Switch_out1_6;

  
  if_exp_diff_in_0_out1_3 <= Switch2_out1_3 WHEN Bit_Slice3_out1_4 = '0' ELSE
      Delay15_out1;

  Delay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay_out1_3 <= if_exp_diff_in_0_out1_3;
      END IF;
    END IF;
  END PROCESS Delay_3_process;


  Bit_Shift_out1_4 <= Delay_out1_3 sll 2;

  Delay3_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_5 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay3_out1_5 <= Delay18_out1;
      END IF;
    END IF;
  END PROCESS Delay3_5_process;


  Add1_add_temp_4 <= resize(Bit_Shift_out1_4, 32) + resize(Delay3_out1_5, 32);
  Add1_out1_4 <= Add1_add_temp_4(27 DOWNTO 0);

  Bit_Slice1_out1_7 <= Add1_out1_4(27);

  Delay4_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_5 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay4_out1_5 <= Delay19_out1;
      END IF;
    END IF;
  END PROCESS Delay4_5_process;


  Add2_add_temp_4 <= resize(Bit_Shift_out1_4, 32) + resize(Delay4_out1_5, 32);
  Add2_out1_4 <= Add2_add_temp_4(27 DOWNTO 0);

  Bit_Slice2_out1_6 <= Add2_out1_4(27);

  
  Switch1_out1_4 <= Add2_out1_4 WHEN Bit_Slice2_out1_6 = '0' ELSE
      Add1_out1_4;

  Delay2_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay2_out1_4 <= Delay17_out1_2;
      END IF;
    END IF;
  END PROCESS Delay2_4_process;


  Add_add_temp_4 <= resize(Bit_Shift_out1_4, 32) + resize(Delay2_out1_4, 32);
  Add_out1_5 <= Add_add_temp_4(27 DOWNTO 0);

  Bit_Slice_out1_7 <= Add_out1_5(27);

  Bit_Slice3_out1_5 <= Delay1_out1_3(9);

  
  Switch_out1_7 <= Add_out1_5 WHEN Bit_Slice_out1_7 = '0' ELSE
      Bit_Shift_out1_4;

  
  Switch2_out1_4 <= Switch1_out1_4 WHEN Bit_Slice1_out1_7 = '0' ELSE
      Switch_out1_7;

  
  if_exp_diff_in_0_out1_4 <= Switch2_out1_4 WHEN Bit_Slice3_out1_5 = '0' ELSE
      Delay_out1_3;

  Delay5_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay5_out1_4 <= if_exp_diff_in_0_out1_4;
      END IF;
    END IF;
  END PROCESS Delay5_4_process;


  Bit_Shift_out1_5 <= Delay5_out1_4 sll 2;

  Delay8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay8_out1_1 <= Delay3_out1_5;
      END IF;
    END IF;
  END PROCESS Delay8_1_process;


  Add1_add_temp_5 <= resize(Bit_Shift_out1_5, 32) + resize(Delay8_out1_1, 32);
  Add1_out1_5 <= Add1_add_temp_5(27 DOWNTO 0);

  Bit_Slice1_out1_8 <= Add1_out1_5(27);

  Delay9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay9_out1_1 <= Delay4_out1_5;
      END IF;
    END IF;
  END PROCESS Delay9_1_process;


  Add2_add_temp_5 <= resize(Bit_Shift_out1_5, 32) + resize(Delay9_out1_1, 32);
  Add2_out1_5 <= Add2_add_temp_5(27 DOWNTO 0);

  Bit_Slice2_out1_7 <= Add2_out1_5(27);

  
  Switch1_out1_5 <= Add2_out1_5 WHEN Bit_Slice2_out1_7 = '0' ELSE
      Add1_out1_5;

  Delay7_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay7_out1_2 <= Delay2_out1_4;
      END IF;
    END IF;
  END PROCESS Delay7_2_process;


  Add_add_temp_5 <= resize(Bit_Shift_out1_5, 32) + resize(Delay7_out1_2, 32);
  Add_out1_6 <= Add_add_temp_5(27 DOWNTO 0);

  Bit_Slice_out1_8 <= Add_out1_6(27);

  Bit_Slice3_out1_6 <= Delay6_out1_1(9);

  
  Switch_out1_8 <= Add_out1_6 WHEN Bit_Slice_out1_8 = '0' ELSE
      Bit_Shift_out1_5;

  
  Switch2_out1_5 <= Switch1_out1_5 WHEN Bit_Slice1_out1_8 = '0' ELSE
      Switch_out1_8;

  
  if_exp_diff_in_0_out1_5 <= Switch2_out1_5 WHEN Bit_Slice3_out1_6 = '0' ELSE
      Delay5_out1_4;

  Delay10_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay10_out1_1 <= if_exp_diff_in_0_out1_5;
      END IF;
    END IF;
  END PROCESS Delay10_1_process;


  Bit_Shift_out1_6 <= Delay10_out1_1 sll 2;

  Delay13_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay13_out1_1 <= Delay8_out1_1;
      END IF;
    END IF;
  END PROCESS Delay13_1_process;


  Add1_add_temp_6 <= resize(Bit_Shift_out1_6, 32) + resize(Delay13_out1_1, 32);
  Add1_out1_6 <= Add1_add_temp_6(27 DOWNTO 0);

  Bit_Slice1_out1_9 <= Add1_out1_6(27);

  Delay14_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay14_out1_1 <= Delay9_out1_1;
      END IF;
    END IF;
  END PROCESS Delay14_1_process;


  Add2_add_temp_6 <= resize(Bit_Shift_out1_6, 32) + resize(Delay14_out1_1, 32);
  Add2_out1_6 <= Add2_add_temp_6(27 DOWNTO 0);

  Bit_Slice2_out1_8 <= Add2_out1_6(27);

  
  Switch1_out1_6 <= Add2_out1_6 WHEN Bit_Slice2_out1_8 = '0' ELSE
      Add1_out1_6;

  Delay12_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay12_out1_1 <= Delay7_out1_2;
      END IF;
    END IF;
  END PROCESS Delay12_1_process;


  Add_add_temp_6 <= resize(Bit_Shift_out1_6, 32) + resize(Delay12_out1_1, 32);
  Add_out1_7 <= Add_add_temp_6(27 DOWNTO 0);

  Bit_Slice_out1_9 <= Add_out1_7(27);

  Bit_Slice3_out1_7 <= Delay11_out1_1(9);

  
  Switch_out1_9 <= Add_out1_7 WHEN Bit_Slice_out1_9 = '0' ELSE
      Bit_Shift_out1_6;

  
  Switch2_out1_6 <= Switch1_out1_6 WHEN Bit_Slice1_out1_9 = '0' ELSE
      Switch_out1_9;

  
  if_exp_diff_in_0_out1_6 <= Switch2_out1_6 WHEN Bit_Slice3_out1_7 = '0' ELSE
      Delay10_out1_1;

  Delay15_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay15_out1_1 <= if_exp_diff_in_0_out1_6;
      END IF;
    END IF;
  END PROCESS Delay15_1_process;


  Bit_Shift_out1_7 <= Delay15_out1_1 sll 2;

  Delay18_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay18_out1_1 <= Delay13_out1_1;
      END IF;
    END IF;
  END PROCESS Delay18_1_process;


  Add1_add_temp_7 <= resize(Bit_Shift_out1_7, 32) + resize(Delay18_out1_1, 32);
  Add1_out1_7 <= Add1_add_temp_7(27 DOWNTO 0);

  Bit_Slice1_out1_10 <= Add1_out1_7(27);

  Delay19_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1_1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay19_out1_1 <= Delay14_out1_1;
      END IF;
    END IF;
  END PROCESS Delay19_1_process;


  Add2_add_temp_7 <= resize(Bit_Shift_out1_7, 32) + resize(Delay19_out1_1, 32);
  Add2_out1_7 <= Add2_add_temp_7(27 DOWNTO 0);

  Bit_Slice2_out1_9 <= Add2_out1_7(27);

  
  Switch1_out1_7 <= Add2_out1_7 WHEN Bit_Slice2_out1_9 = '0' ELSE
      Add1_out1_7;

  Delay17_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay17_out1_3 <= Delay12_out1_1;
      END IF;
    END IF;
  END PROCESS Delay17_3_process;


  Add_add_temp_7 <= resize(Bit_Shift_out1_7, 32) + resize(Delay17_out1_3, 32);
  Add_out1_8 <= Add_add_temp_7(27 DOWNTO 0);

  Bit_Slice_out1_10 <= Add_out1_8(27);

  Bit_Slice3_out1_8 <= Delay16_out1_1(9);

  
  Switch_out1_10 <= Add_out1_8 WHEN Bit_Slice_out1_10 = '0' ELSE
      Bit_Shift_out1_7;

  
  Switch2_out1_7 <= Switch1_out1_7 WHEN Bit_Slice1_out1_10 = '0' ELSE
      Switch_out1_10;

  
  if_exp_diff_in_0_out1_7 <= Switch2_out1_7 WHEN Bit_Slice3_out1_8 = '0' ELSE
      Delay15_out1_1;

  Delay_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay_out1_4 <= if_exp_diff_in_0_out1_7;
      END IF;
    END IF;
  END PROCESS Delay_4_process;


  Bit_Shift_out1_8 <= Delay_out1_4 sll 2;

  Delay3_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_6 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay3_out1_6 <= Delay18_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_6_process;


  Add1_add_temp_8 <= resize(Bit_Shift_out1_8, 32) + resize(Delay3_out1_6, 32);
  Add1_out1_8 <= Add1_add_temp_8(27 DOWNTO 0);

  Bit_Slice1_out1_11 <= Add1_out1_8(27);

  Delay4_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_6 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay4_out1_6 <= Delay19_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_6_process;


  Add2_add_temp_8 <= resize(Bit_Shift_out1_8, 32) + resize(Delay4_out1_6, 32);
  Add2_out1_8 <= Add2_add_temp_8(27 DOWNTO 0);

  Bit_Slice2_out1_10 <= Add2_out1_8(27);

  
  Switch1_out1_8 <= Add2_out1_8 WHEN Bit_Slice2_out1_10 = '0' ELSE
      Add1_out1_8;

  Delay2_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_5 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay2_out1_5 <= Delay17_out1_3;
      END IF;
    END IF;
  END PROCESS Delay2_5_process;


  Add_add_temp_8 <= resize(Bit_Shift_out1_8, 32) + resize(Delay2_out1_5, 32);
  Add_out1_9 <= Add_add_temp_8(27 DOWNTO 0);

  Bit_Slice_out1_11 <= Add_out1_9(27);

  Bit_Slice3_out1_9 <= Delay1_out1_4(9);

  
  Switch_out1_11 <= Add_out1_9 WHEN Bit_Slice_out1_11 = '0' ELSE
      Bit_Shift_out1_8;

  
  Switch2_out1_8 <= Switch1_out1_8 WHEN Bit_Slice1_out1_11 = '0' ELSE
      Switch_out1_11;

  
  if_exp_diff_in_0_out1_8 <= Switch2_out1_8 WHEN Bit_Slice3_out1_9 = '0' ELSE
      Delay_out1_4;

  Delay5_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_5 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay5_out1_5 <= if_exp_diff_in_0_out1_8;
      END IF;
    END IF;
  END PROCESS Delay5_5_process;


  Bit_Shift_out1_9 <= Delay5_out1_5 sll 2;

  Delay8_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay8_out1_2 <= Delay3_out1_6;
      END IF;
    END IF;
  END PROCESS Delay8_2_process;


  Add1_add_temp_9 <= resize(Bit_Shift_out1_9, 32) + resize(Delay8_out1_2, 32);
  Add1_out1_9 <= Add1_add_temp_9(27 DOWNTO 0);

  Bit_Slice1_out1_12 <= Add1_out1_9(27);

  Delay9_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay9_out1_2 <= Delay4_out1_6;
      END IF;
    END IF;
  END PROCESS Delay9_2_process;


  Add2_add_temp_9 <= resize(Bit_Shift_out1_9, 32) + resize(Delay9_out1_2, 32);
  Add2_out1_9 <= Add2_add_temp_9(27 DOWNTO 0);

  Bit_Slice2_out1_11 <= Add2_out1_9(27);

  
  Switch1_out1_9 <= Add2_out1_9 WHEN Bit_Slice2_out1_11 = '0' ELSE
      Add1_out1_9;

  Delay7_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay7_out1_3 <= Delay2_out1_5;
      END IF;
    END IF;
  END PROCESS Delay7_3_process;


  Add_add_temp_9 <= resize(Bit_Shift_out1_9, 32) + resize(Delay7_out1_3, 32);
  Add_out1_10 <= Add_add_temp_9(27 DOWNTO 0);

  Bit_Slice_out1_12 <= Add_out1_10(27);

  Bit_Slice3_out1_10 <= Delay6_out1_2(9);

  
  Switch_out1_12 <= Add_out1_10 WHEN Bit_Slice_out1_12 = '0' ELSE
      Bit_Shift_out1_9;

  
  Switch2_out1_9 <= Switch1_out1_9 WHEN Bit_Slice1_out1_12 = '0' ELSE
      Switch_out1_12;

  
  if_exp_diff_in_0_out1_9 <= Switch2_out1_9 WHEN Bit_Slice3_out1_10 = '0' ELSE
      Delay5_out1_5;

  Delay10_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay10_out1_2 <= if_exp_diff_in_0_out1_9;
      END IF;
    END IF;
  END PROCESS Delay10_2_process;


  Bit_Shift_out1_10 <= Delay10_out1_2 sll 2;

  Delay13_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay13_out1_2 <= Delay8_out1_2;
      END IF;
    END IF;
  END PROCESS Delay13_2_process;


  Add1_add_temp_10 <= resize(Bit_Shift_out1_10, 32) + resize(Delay13_out1_2, 32);
  Add1_out1_10 <= Add1_add_temp_10(27 DOWNTO 0);

  Bit_Slice1_out1_13 <= Add1_out1_10(27);

  Delay14_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay14_out1_2 <= Delay9_out1_2;
      END IF;
    END IF;
  END PROCESS Delay14_2_process;


  Add2_add_temp_10 <= resize(Bit_Shift_out1_10, 32) + resize(Delay14_out1_2, 32);
  Add2_out1_10 <= Add2_add_temp_10(27 DOWNTO 0);

  Bit_Slice2_out1_12 <= Add2_out1_10(27);

  
  Switch1_out1_10 <= Add2_out1_10 WHEN Bit_Slice2_out1_12 = '0' ELSE
      Add1_out1_10;

  Delay12_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay12_out1_2 <= Delay7_out1_3;
      END IF;
    END IF;
  END PROCESS Delay12_2_process;


  Add_add_temp_10 <= resize(Bit_Shift_out1_10, 32) + resize(Delay12_out1_2, 32);
  Add_out1_11 <= Add_add_temp_10(27 DOWNTO 0);

  Bit_Slice_out1_13 <= Add_out1_11(27);

  Bit_Slice3_out1_11 <= Delay11_out1_2(9);

  
  Switch_out1_13 <= Add_out1_11 WHEN Bit_Slice_out1_13 = '0' ELSE
      Bit_Shift_out1_10;

  
  Switch2_out1_10 <= Switch1_out1_10 WHEN Bit_Slice1_out1_13 = '0' ELSE
      Switch_out1_13;

  
  if_exp_diff_in_0_out1_10 <= Switch2_out1_10 WHEN Bit_Slice3_out1_11 = '0' ELSE
      Delay10_out1_2;

  Delay15_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay15_out1_2 <= if_exp_diff_in_0_out1_10;
      END IF;
    END IF;
  END PROCESS Delay15_2_process;


  Bit_Shift_out1_11 <= Delay15_out1_2 sll 2;

  Delay18_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay18_out1_2 <= Delay13_out1_2;
      END IF;
    END IF;
  END PROCESS Delay18_2_process;


  Add1_add_temp_11 <= resize(Bit_Shift_out1_11, 32) + resize(Delay18_out1_2, 32);
  Add1_out1_11 <= Add1_add_temp_11(27 DOWNTO 0);

  Bit_Slice1_out1_14 <= Add1_out1_11(27);

  Delay19_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1_2 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay19_out1_2 <= Delay14_out1_2;
      END IF;
    END IF;
  END PROCESS Delay19_2_process;


  Add2_add_temp_11 <= resize(Bit_Shift_out1_11, 32) + resize(Delay19_out1_2, 32);
  Add2_out1_11 <= Add2_add_temp_11(27 DOWNTO 0);

  Bit_Slice2_out1_13 <= Add2_out1_11(27);

  
  Switch1_out1_11 <= Add2_out1_11 WHEN Bit_Slice2_out1_13 = '0' ELSE
      Add1_out1_11;

  Delay17_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay17_out1_4 <= Delay12_out1_2;
      END IF;
    END IF;
  END PROCESS Delay17_4_process;


  Add_add_temp_11 <= resize(Bit_Shift_out1_11, 32) + resize(Delay17_out1_4, 32);
  Add_out1_12 <= Add_add_temp_11(27 DOWNTO 0);

  Bit_Slice_out1_14 <= Add_out1_12(27);

  Bit_Slice3_out1_12 <= Delay16_out1_2(9);

  
  Switch_out1_14 <= Add_out1_12 WHEN Bit_Slice_out1_14 = '0' ELSE
      Bit_Shift_out1_11;

  
  Switch2_out1_11 <= Switch1_out1_11 WHEN Bit_Slice1_out1_14 = '0' ELSE
      Switch_out1_14;

  
  if_exp_diff_in_0_out1_11 <= Switch2_out1_11 WHEN Bit_Slice3_out1_12 = '0' ELSE
      Delay15_out1_2;

  reduced_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        modrem_12_Iterations_out1 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        modrem_12_Iterations_out1 <= if_exp_diff_in_0_out1_11;
      END IF;
    END IF;
  END PROCESS reduced_10_process;


  bitsll_R_1_out1 <= modrem_12_Iterations_out1 sll 1;

  reduced_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_5(0) <= to_signed(16#0000000#, 28);
        reduced_reg_5(1) <= to_signed(16#0000000#, 28);
        reduced_reg_5(2) <= to_signed(16#0000000#, 28);
        reduced_reg_5(3) <= to_signed(16#0000000#, 28);
        reduced_reg_5(4) <= to_signed(16#0000000#, 28);
        reduced_reg_5(5) <= to_signed(16#0000000#, 28);
        reduced_reg_5(6) <= to_signed(16#0000000#, 28);
        reduced_reg_5(7) <= to_signed(16#0000000#, 28);
        reduced_reg_5(8) <= to_signed(16#0000000#, 28);
        reduced_reg_5(9) <= to_signed(16#0000000#, 28);
        reduced_reg_5(10) <= to_signed(16#0000000#, 28);
        reduced_reg_5(11) <= to_signed(16#0000000#, 28);
        reduced_reg_5(12) <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        reduced_reg_5(0) <= reduced_reg_next_5(0);
        reduced_reg_5(1) <= reduced_reg_next_5(1);
        reduced_reg_5(2) <= reduced_reg_next_5(2);
        reduced_reg_5(3) <= reduced_reg_next_5(3);
        reduced_reg_5(4) <= reduced_reg_next_5(4);
        reduced_reg_5(5) <= reduced_reg_next_5(5);
        reduced_reg_5(6) <= reduced_reg_next_5(6);
        reduced_reg_5(7) <= reduced_reg_next_5(7);
        reduced_reg_5(8) <= reduced_reg_next_5(8);
        reduced_reg_5(9) <= reduced_reg_next_5(9);
        reduced_reg_5(10) <= reduced_reg_next_5(10);
        reduced_reg_5(11) <= reduced_reg_next_5(11);
        reduced_reg_5(12) <= reduced_reg_next_5(12);
      END IF;
    END IF;
  END PROCESS reduced_11_process;

  modrem_Normalize_Exp_Mant_out4_1 <= reduced_reg_5(12);
  reduced_reg_next_5(0) <= modrem_Normalize_Exp_Mant_out4;
  reduced_reg_next_5(1) <= reduced_reg_5(0);
  reduced_reg_next_5(2) <= reduced_reg_5(1);
  reduced_reg_next_5(3) <= reduced_reg_5(2);
  reduced_reg_next_5(4) <= reduced_reg_5(3);
  reduced_reg_next_5(5) <= reduced_reg_5(4);
  reduced_reg_next_5(6) <= reduced_reg_5(5);
  reduced_reg_next_5(7) <= reduced_reg_5(6);
  reduced_reg_next_5(8) <= reduced_reg_5(7);
  reduced_reg_next_5(9) <= reduced_reg_5(8);
  reduced_reg_next_5(10) <= reduced_reg_5(9);
  reduced_reg_next_5(11) <= reduced_reg_5(10);
  reduced_reg_next_5(12) <= reduced_reg_5(11);

  
  bitsll_R_1_mant_b_norm_relop1 <= '1' WHEN bitsll_R_1_out1 >= modrem_Normalize_Exp_Mant_out4_1 ELSE
      '0';

  mant_b_norm_R_sub_temp <= resize(modrem_Normalize_Exp_Mant_out4_1, 32) - resize(modrem_12_Iterations_out1, 32);
  mant_b_norm_R_out1 <= mant_b_norm_R_sub_temp(28 DOWNTO 0);

  DTC_out1_3 <= mant_b_norm_R_out1(27 DOWNTO 0);

  
  if_bitsll_R_1_mant_b_norm_out1 <= modrem_12_Iterations_out1 WHEN bitsll_R_1_mant_b_norm_relop1 = '0' ELSE
      DTC_out1_3;

  Delay15_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay15_out1_3 <= if_bitsll_R_1_mant_b_norm_out1;
      END IF;
    END IF;
  END PROCESS Delay15_3_process;


  Delay14_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1_3 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay14_out1_3 <= DTC1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay14_3_process;


  shift_arithmetic_zerosig <= to_signed(16#000#, 10);

  
  shift_arithmetic_selsig <= Delay14_out1_3 WHEN Delay14_out1_3 >= shift_arithmetic_zerosig ELSE
      shift_arithmetic_zerosig;

  dynamic_shift_zerosig <= to_signed(16#000#, 10);

  
  dynamic_shift_selsig <= shift_arithmetic_selsig WHEN shift_arithmetic_selsig >= dynamic_shift_zerosig ELSE
      dynamic_shift_zerosig;

  Shift_Arithmetic_out1 <= SHIFT_RIGHT(Delay15_out1_3, to_integer(dynamic_shift_selsig));

  
  bitsrl_x_pos_0_out1 <= '1' WHEN Shift_Arithmetic_out1 = to_signed(16#0000000#, 28) ELSE
      '0';

  bitsll_x_shift_length_zerosig <= to_signed(16#000#, 10);

  
  bitsll_x_shift_length_selsig <= Delay5_out1_2 WHEN Delay5_out1_2 >= bitsll_x_shift_length_zerosig ELSE
      bitsll_x_shift_length_zerosig;

  dynamic_shift_zerosig_1 <= to_signed(16#000#, 10);

  
  dynamic_shift_selsig_1 <= bitsll_x_shift_length_selsig WHEN bitsll_x_shift_length_selsig >= dynamic_shift_zerosig_1 ELSE
      dynamic_shift_zerosig_1;

  bitsll_x_shift_length_out1 <= Delay15_out1_3 sll to_integer(dynamic_shift_selsig_1);

  BitSlice_out1_1 <= unsigned(bitsll_x_shift_length_out1(23 DOWNTO 0));

  reduced_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_6(0) <= to_signed(16#0000000#, 28);
        reduced_reg_6(1) <= to_signed(16#0000000#, 28);
        reduced_reg_6(2) <= to_signed(16#0000000#, 28);
        reduced_reg_6(3) <= to_signed(16#0000000#, 28);
        reduced_reg_6(4) <= to_signed(16#0000000#, 28);
        reduced_reg_6(5) <= to_signed(16#0000000#, 28);
        reduced_reg_6(6) <= to_signed(16#0000000#, 28);
        reduced_reg_6(7) <= to_signed(16#0000000#, 28);
        reduced_reg_6(8) <= to_signed(16#0000000#, 28);
        reduced_reg_6(9) <= to_signed(16#0000000#, 28);
        reduced_reg_6(10) <= to_signed(16#0000000#, 28);
        reduced_reg_6(11) <= to_signed(16#0000000#, 28);
        reduced_reg_6(12) <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        reduced_reg_6(0) <= reduced_reg_next_6(0);
        reduced_reg_6(1) <= reduced_reg_next_6(1);
        reduced_reg_6(2) <= reduced_reg_next_6(2);
        reduced_reg_6(3) <= reduced_reg_next_6(3);
        reduced_reg_6(4) <= reduced_reg_next_6(4);
        reduced_reg_6(5) <= reduced_reg_next_6(5);
        reduced_reg_6(6) <= reduced_reg_next_6(6);
        reduced_reg_6(7) <= reduced_reg_next_6(7);
        reduced_reg_6(8) <= reduced_reg_next_6(8);
        reduced_reg_6(9) <= reduced_reg_next_6(9);
        reduced_reg_6(10) <= reduced_reg_next_6(10);
        reduced_reg_6(11) <= reduced_reg_next_6(11);
        reduced_reg_6(12) <= reduced_reg_next_6(12);
      END IF;
    END IF;
  END PROCESS reduced_12_process;

  modrem_Normalize_Exp_Mant_out2_1 <= reduced_reg_6(12);
  reduced_reg_next_6(0) <= modrem_Normalize_Exp_Mant_out2;
  reduced_reg_next_6(1) <= reduced_reg_6(0);
  reduced_reg_next_6(2) <= reduced_reg_6(1);
  reduced_reg_next_6(3) <= reduced_reg_6(2);
  reduced_reg_next_6(4) <= reduced_reg_6(3);
  reduced_reg_next_6(5) <= reduced_reg_6(4);
  reduced_reg_next_6(6) <= reduced_reg_6(5);
  reduced_reg_next_6(7) <= reduced_reg_6(6);
  reduced_reg_next_6(8) <= reduced_reg_6(7);
  reduced_reg_next_6(9) <= reduced_reg_6(8);
  reduced_reg_next_6(10) <= reduced_reg_6(9);
  reduced_reg_next_6(11) <= reduced_reg_6(10);
  reduced_reg_next_6(12) <= reduced_reg_6(11);

  BitSlice1_out1 <= unsigned(modrem_Normalize_Exp_Mant_out2_1(23 DOWNTO 0));

  Delay12_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_3 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1_3 <= Compare_To_Constant1_out1;
      END IF;
    END IF;
  END PROCESS Delay12_3_process;


  Delay4_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_7 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1_7 <= Logical_Operator_out1_2;
      END IF;
    END IF;
  END PROCESS Delay4_7_process;


  
  x_0_out1 <= '1' WHEN Delay15_out1_3 = to_signed(16#0000000#, 28) ELSE
      '0';

  
  pos_0_out1 <= '1' WHEN Delay14_out1_3 > to_signed(16#000#, 10) ELSE
      '0';

  Delay10_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_3 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay10_out1_3 <= BitSlice1_out1;
      END IF;
    END IF;
  END PROCESS Delay10_3_process;


  
  tmp2_tmp3_relop1 <= '1' WHEN BitSlice_out1_1 < Delay10_out1_3 ELSE
      '0';

  Logical_Operator2_out1_1 <= tmp2_tmp3_relop1 AND (bitsrl_x_pos_0_out1 AND pos_0_out1);

  Logical_Operator3_out1 <= Logical_Operator2_out1_1 OR (Bit_Slice_out1_1 OR x_0_out1);

  Logical_Operator1_out1_1 <= Delay4_out1_7 AND Logical_Operator3_out1;

  Logical_Operator4_out1_3 <= Delay12_out1_3 OR Logical_Operator1_out1_1;

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_reg(0) <= '0';
        Delay32_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay32_reg(0) <= Delay32_reg_next(0);
        Delay32_reg(1) <= Delay32_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay32_process;

  Delay32_out1 <= Delay32_reg(1);
  Delay32_reg_next(0) <= Logical_Operator4_out1_3;
  Delay32_reg_next(1) <= Delay32_reg(0);

  Delay6_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_reg(0) <= '0';
        Delay6_reg(1) <= '0';
        Delay6_reg(2) <= '0';
      ELSIF enb = '1' THEN
        Delay6_reg(0) <= Delay6_reg_next(0);
        Delay6_reg(1) <= Delay6_reg_next(1);
        Delay6_reg(2) <= Delay6_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay6_4_process;

  Delay6_out1_4 <= Delay6_reg(2);
  Delay6_reg_next(0) <= Delay32_out1;
  Delay6_reg_next(1) <= Delay6_reg(0);
  Delay6_reg_next(2) <= Delay6_reg(1);

  Delay_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_5 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1_5 <= aSign;
      END IF;
    END IF;
  END PROCESS Delay_5_process;


  Logical_Operator_out1_4 <= Delay_out1_5 XOR Delay17_out1;

  Delay2_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg(0) <= '0';
        Delay2_reg(1) <= '0';
        Delay2_reg(2) <= '0';
        Delay2_reg(3) <= '0';
        Delay2_reg(4) <= '0';
        Delay2_reg(5) <= '0';
        Delay2_reg(6) <= '0';
        Delay2_reg(7) <= '0';
        Delay2_reg(8) <= '0';
        Delay2_reg(9) <= '0';
        Delay2_reg(10) <= '0';
        Delay2_reg(11) <= '0';
        Delay2_reg(12) <= '0';
        Delay2_reg(13) <= '0';
        Delay2_reg(14) <= '0';
        Delay2_reg(15) <= '0';
        Delay2_reg(16) <= '0';
        Delay2_reg(17) <= '0';
        Delay2_reg(18) <= '0';
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= Delay2_reg_next(0);
        Delay2_reg(1) <= Delay2_reg_next(1);
        Delay2_reg(2) <= Delay2_reg_next(2);
        Delay2_reg(3) <= Delay2_reg_next(3);
        Delay2_reg(4) <= Delay2_reg_next(4);
        Delay2_reg(5) <= Delay2_reg_next(5);
        Delay2_reg(6) <= Delay2_reg_next(6);
        Delay2_reg(7) <= Delay2_reg_next(7);
        Delay2_reg(8) <= Delay2_reg_next(8);
        Delay2_reg(9) <= Delay2_reg_next(9);
        Delay2_reg(10) <= Delay2_reg_next(10);
        Delay2_reg(11) <= Delay2_reg_next(11);
        Delay2_reg(12) <= Delay2_reg_next(12);
        Delay2_reg(13) <= Delay2_reg_next(13);
        Delay2_reg(14) <= Delay2_reg_next(14);
        Delay2_reg(15) <= Delay2_reg_next(15);
        Delay2_reg(16) <= Delay2_reg_next(16);
        Delay2_reg(17) <= Delay2_reg_next(17);
        Delay2_reg(18) <= Delay2_reg_next(18);
      END IF;
    END IF;
  END PROCESS Delay2_6_process;

  Delay2_out1_6 <= Delay2_reg(18);
  Delay2_reg_next(0) <= Logical_Operator_out1_4;
  Delay2_reg_next(1) <= Delay2_reg(0);
  Delay2_reg_next(2) <= Delay2_reg(1);
  Delay2_reg_next(3) <= Delay2_reg(2);
  Delay2_reg_next(4) <= Delay2_reg(3);
  Delay2_reg_next(5) <= Delay2_reg(4);
  Delay2_reg_next(6) <= Delay2_reg(5);
  Delay2_reg_next(7) <= Delay2_reg(6);
  Delay2_reg_next(8) <= Delay2_reg(7);
  Delay2_reg_next(9) <= Delay2_reg(8);
  Delay2_reg_next(10) <= Delay2_reg(9);
  Delay2_reg_next(11) <= Delay2_reg(10);
  Delay2_reg_next(12) <= Delay2_reg(11);
  Delay2_reg_next(13) <= Delay2_reg(12);
  Delay2_reg_next(14) <= Delay2_reg(13);
  Delay2_reg_next(15) <= Delay2_reg(14);
  Delay2_reg_next(16) <= Delay2_reg(15);
  Delay2_reg_next(17) <= Delay2_reg(16);
  Delay2_reg_next(18) <= Delay2_reg(17);

  C_out1_15 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_12 <= resize(modrem_12_Iterations_out2, 32) + resize(C_out1_15, 32);
  exp_diff_in_2_out1_12 <= exp_diff_in_2_add_temp_12(10 DOWNTO 0);

  DTC3_out1_13 <= exp_diff_in_2_out1_12(9 DOWNTO 0);

  Delay6_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_5 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay6_out1_5 <= DTC3_out1_13;
      END IF;
    END IF;
  END PROCESS Delay6_5_process;


  C_out1_16 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_13 <= resize(Delay6_out1_5, 32) + resize(C_out1_16, 32);
  exp_diff_in_2_out1_13 <= exp_diff_in_2_add_temp_13(10 DOWNTO 0);

  DTC3_out1_14 <= exp_diff_in_2_out1_13(9 DOWNTO 0);

  Bit_Shift_out1_12 <= modrem_12_Iterations_out1 sll 2;

  Delay3_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_7 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay3_out1_7 <= Delay18_out1_2;
      END IF;
    END IF;
  END PROCESS Delay3_7_process;


  Add1_add_temp_12 <= resize(Bit_Shift_out1_12, 32) + resize(Delay3_out1_7, 32);
  Add1_out1_12 <= Add1_add_temp_12(27 DOWNTO 0);

  Bit_Slice1_out1_15 <= Add1_out1_12(27);

  Delay4_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_8 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay4_out1_8 <= Delay19_out1_2;
      END IF;
    END IF;
  END PROCESS Delay4_8_process;


  Add2_add_temp_12 <= resize(Bit_Shift_out1_12, 32) + resize(Delay4_out1_8, 32);
  Add2_out1_12 <= Add2_add_temp_12(27 DOWNTO 0);

  Bit_Slice2_out1_14 <= Add2_out1_12(27);

  
  Switch1_out1_12 <= Add2_out1_12 WHEN Bit_Slice2_out1_14 = '0' ELSE
      Add1_out1_12;

  Delay2_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_7 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay2_out1_7 <= Delay17_out1_4;
      END IF;
    END IF;
  END PROCESS Delay2_7_process;


  Add_add_temp_12 <= resize(Bit_Shift_out1_12, 32) + resize(Delay2_out1_7, 32);
  Add_out1_13 <= Add_add_temp_12(27 DOWNTO 0);

  Bit_Slice_out1_15 <= Add_out1_13(27);

  Bit_Slice3_out1_13 <= modrem_12_Iterations_out2(9);

  
  Switch_out1_15 <= Add_out1_13 WHEN Bit_Slice_out1_15 = '0' ELSE
      Bit_Shift_out1_12;

  
  Switch2_out1_12 <= Switch1_out1_12 WHEN Bit_Slice1_out1_15 = '0' ELSE
      Switch_out1_15;

  
  if_exp_diff_in_0_out1_12 <= Switch2_out1_12 WHEN Bit_Slice3_out1_13 = '0' ELSE
      modrem_12_Iterations_out1;

  Delay5_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_6 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay5_out1_6 <= if_exp_diff_in_0_out1_12;
      END IF;
    END IF;
  END PROCESS Delay5_6_process;


  Bit_Shift_out1_13 <= Delay5_out1_6 sll 2;

  Delay8_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay8_out1_3 <= Delay3_out1_7;
      END IF;
    END IF;
  END PROCESS Delay8_3_process;


  Add1_add_temp_13 <= resize(Bit_Shift_out1_13, 32) + resize(Delay8_out1_3, 32);
  Add1_out1_13 <= Add1_add_temp_13(27 DOWNTO 0);

  Bit_Slice1_out1_16 <= Add1_out1_13(27);

  Delay9_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay9_out1_3 <= Delay4_out1_8;
      END IF;
    END IF;
  END PROCESS Delay9_3_process;


  Add2_add_temp_13 <= resize(Bit_Shift_out1_13, 32) + resize(Delay9_out1_3, 32);
  Add2_out1_13 <= Add2_add_temp_13(27 DOWNTO 0);

  Bit_Slice2_out1_15 <= Add2_out1_13(27);

  
  Switch1_out1_13 <= Add2_out1_13 WHEN Bit_Slice2_out1_15 = '0' ELSE
      Add1_out1_13;

  Delay7_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay7_out1_4 <= Delay2_out1_7;
      END IF;
    END IF;
  END PROCESS Delay7_4_process;


  Add_add_temp_13 <= resize(Bit_Shift_out1_13, 32) + resize(Delay7_out1_4, 32);
  Add_out1_14 <= Add_add_temp_13(27 DOWNTO 0);

  Bit_Slice_out1_16 <= Add_out1_14(27);

  Bit_Slice3_out1_14 <= Delay6_out1_5(9);

  
  Switch_out1_16 <= Add_out1_14 WHEN Bit_Slice_out1_16 = '0' ELSE
      Bit_Shift_out1_13;

  
  Switch2_out1_13 <= Switch1_out1_13 WHEN Bit_Slice1_out1_16 = '0' ELSE
      Switch_out1_16;

  
  if_exp_diff_in_0_out1_13 <= Switch2_out1_13 WHEN Bit_Slice3_out1_14 = '0' ELSE
      Delay5_out1_6;

  Delay10_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay10_out1_4 <= if_exp_diff_in_0_out1_13;
      END IF;
    END IF;
  END PROCESS Delay10_4_process;


  Bit_Shift_out1_14 <= Delay10_out1_4 sll 2;

  Delay13_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay13_out1_3 <= Delay8_out1_3;
      END IF;
    END IF;
  END PROCESS Delay13_3_process;


  Add1_add_temp_14 <= resize(Bit_Shift_out1_14, 32) + resize(Delay13_out1_3, 32);
  Add1_out1_14 <= Add1_add_temp_14(27 DOWNTO 0);

  Bit_Slice1_out1_17 <= Add1_out1_14(27);

  Delay14_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay14_out1_4 <= Delay9_out1_3;
      END IF;
    END IF;
  END PROCESS Delay14_4_process;


  Add2_add_temp_14 <= resize(Bit_Shift_out1_14, 32) + resize(Delay14_out1_4, 32);
  Add2_out1_14 <= Add2_add_temp_14(27 DOWNTO 0);

  Bit_Slice2_out1_16 <= Add2_out1_14(27);

  
  Switch1_out1_14 <= Add2_out1_14 WHEN Bit_Slice2_out1_16 = '0' ELSE
      Add1_out1_14;

  Delay12_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay12_out1_4 <= Delay7_out1_4;
      END IF;
    END IF;
  END PROCESS Delay12_4_process;


  Add_add_temp_14 <= resize(Bit_Shift_out1_14, 32) + resize(Delay12_out1_4, 32);
  Add_out1_15 <= Add_add_temp_14(27 DOWNTO 0);

  Bit_Slice_out1_17 <= Add_out1_15(27);

  Delay11_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_3 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay11_out1_3 <= DTC3_out1_14;
      END IF;
    END IF;
  END PROCESS Delay11_3_process;


  Bit_Slice3_out1_15 <= Delay11_out1_3(9);

  
  Switch_out1_17 <= Add_out1_15 WHEN Bit_Slice_out1_17 = '0' ELSE
      Bit_Shift_out1_14;

  
  Switch2_out1_14 <= Switch1_out1_14 WHEN Bit_Slice1_out1_17 = '0' ELSE
      Switch_out1_17;

  
  if_exp_diff_in_0_out1_14 <= Switch2_out1_14 WHEN Bit_Slice3_out1_15 = '0' ELSE
      Delay10_out1_4;

  Delay15_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1_4 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay15_out1_4 <= if_exp_diff_in_0_out1_14;
      END IF;
    END IF;
  END PROCESS Delay15_4_process;


  
  R_in_0_out1 <= '1' WHEN Delay15_out1_4 /= to_signed(16#0000000#, 28) ELSE
      '0';

  alphasign_diff_1_R_in_0_out1 <= Delay2_out1_6 AND R_in_0_out1;

  Delay18_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_reg(0) <= '0';
        Delay18_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay18_reg(0) <= Delay18_reg_next(0);
        Delay18_reg(1) <= Delay18_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay18_3_process;

  Delay18_out1_3 <= Delay18_reg(1);
  Delay18_reg_next(0) <= alphasign_diff_1_R_in_0_out1;
  Delay18_reg_next(1) <= Delay18_reg(0);

  alpha0_out1_4 <= to_unsigned(16#0#, 2);

  Bit_Concat_out1_3 <= unsigned(Delay15_out1_4) & alpha0_out1_4;

  reinterpretcast_bitconcat_R_in_out1 <= signed(Bit_Concat_out1_3);

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_reg(0) <= to_signed(16#00000000#, 30);
        Delay25_reg(1) <= to_signed(16#00000000#, 30);
      ELSIF enb = '1' THEN
        Delay25_reg(0) <= Delay25_reg_next(0);
        Delay25_reg(1) <= Delay25_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay25_process;

  Delay25_out1 <= Delay25_reg(1);
  Delay25_reg_next(0) <= reinterpretcast_bitconcat_R_in_out1;
  Delay25_reg_next(1) <= Delay25_reg(0);

  reduced_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_7(0) <= to_signed(16#000#, 10);
        reduced_reg_7(1) <= to_signed(16#000#, 10);
        reduced_reg_7(2) <= to_signed(16#000#, 10);
        reduced_reg_7(3) <= to_signed(16#000#, 10);
        reduced_reg_7(4) <= to_signed(16#000#, 10);
        reduced_reg_7(5) <= to_signed(16#000#, 10);
        reduced_reg_7(6) <= to_signed(16#000#, 10);
        reduced_reg_7(7) <= to_signed(16#000#, 10);
        reduced_reg_7(8) <= to_signed(16#000#, 10);
        reduced_reg_7(9) <= to_signed(16#000#, 10);
        reduced_reg_7(10) <= to_signed(16#000#, 10);
        reduced_reg_7(11) <= to_signed(16#000#, 10);
        reduced_reg_7(12) <= to_signed(16#000#, 10);
        reduced_reg_7(13) <= to_signed(16#000#, 10);
        reduced_reg_7(14) <= to_signed(16#000#, 10);
        reduced_reg_7(15) <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        reduced_reg_7(0) <= reduced_reg_next_7(0);
        reduced_reg_7(1) <= reduced_reg_next_7(1);
        reduced_reg_7(2) <= reduced_reg_next_7(2);
        reduced_reg_7(3) <= reduced_reg_next_7(3);
        reduced_reg_7(4) <= reduced_reg_next_7(4);
        reduced_reg_7(5) <= reduced_reg_next_7(5);
        reduced_reg_7(6) <= reduced_reg_next_7(6);
        reduced_reg_7(7) <= reduced_reg_next_7(7);
        reduced_reg_7(8) <= reduced_reg_next_7(8);
        reduced_reg_7(9) <= reduced_reg_next_7(9);
        reduced_reg_7(10) <= reduced_reg_next_7(10);
        reduced_reg_7(11) <= reduced_reg_next_7(11);
        reduced_reg_7(12) <= reduced_reg_next_7(12);
        reduced_reg_7(13) <= reduced_reg_next_7(13);
        reduced_reg_7(14) <= reduced_reg_next_7(14);
        reduced_reg_7(15) <= reduced_reg_next_7(15);
      END IF;
    END IF;
  END PROCESS reduced_13_process;

  modrem_Normalize_Exp_Mant_out3_1 <= reduced_reg_7(15);
  reduced_reg_next_7(0) <= modrem_Normalize_Exp_Mant_out3;
  reduced_reg_next_7(1) <= reduced_reg_7(0);
  reduced_reg_next_7(2) <= reduced_reg_7(1);
  reduced_reg_next_7(3) <= reduced_reg_7(2);
  reduced_reg_next_7(4) <= reduced_reg_7(3);
  reduced_reg_next_7(5) <= reduced_reg_7(4);
  reduced_reg_next_7(6) <= reduced_reg_7(5);
  reduced_reg_next_7(7) <= reduced_reg_7(6);
  reduced_reg_next_7(8) <= reduced_reg_7(7);
  reduced_reg_next_7(9) <= reduced_reg_7(8);
  reduced_reg_next_7(10) <= reduced_reg_7(9);
  reduced_reg_next_7(11) <= reduced_reg_7(10);
  reduced_reg_next_7(12) <= reduced_reg_7(11);
  reduced_reg_next_7(13) <= reduced_reg_7(12);
  reduced_reg_next_7(14) <= reduced_reg_7(13);
  reduced_reg_next_7(15) <= reduced_reg_7(14);

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_reg(0) <= to_signed(16#000#, 10);
        Delay24_reg(1) <= to_signed(16#000#, 10);
        Delay24_reg(2) <= to_signed(16#000#, 10);
        Delay24_reg(3) <= to_signed(16#000#, 10);
        Delay24_reg(4) <= to_signed(16#000#, 10);
        Delay24_reg(5) <= to_signed(16#000#, 10);
        Delay24_reg(6) <= to_signed(16#000#, 10);
        Delay24_reg(7) <= to_signed(16#000#, 10);
        Delay24_reg(8) <= to_signed(16#000#, 10);
        Delay24_reg(9) <= to_signed(16#000#, 10);
        Delay24_reg(10) <= to_signed(16#000#, 10);
        Delay24_reg(11) <= to_signed(16#000#, 10);
        Delay24_reg(12) <= to_signed(16#000#, 10);
        Delay24_reg(13) <= to_signed(16#000#, 10);
        Delay24_reg(14) <= to_signed(16#000#, 10);
        Delay24_reg(15) <= to_signed(16#000#, 10);
        Delay24_reg(16) <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay24_reg(0) <= Delay24_reg_next(0);
        Delay24_reg(1) <= Delay24_reg_next(1);
        Delay24_reg(2) <= Delay24_reg_next(2);
        Delay24_reg(3) <= Delay24_reg_next(3);
        Delay24_reg(4) <= Delay24_reg_next(4);
        Delay24_reg(5) <= Delay24_reg_next(5);
        Delay24_reg(6) <= Delay24_reg_next(6);
        Delay24_reg(7) <= Delay24_reg_next(7);
        Delay24_reg(8) <= Delay24_reg_next(8);
        Delay24_reg(9) <= Delay24_reg_next(9);
        Delay24_reg(10) <= Delay24_reg_next(10);
        Delay24_reg(11) <= Delay24_reg_next(11);
        Delay24_reg(12) <= Delay24_reg_next(12);
        Delay24_reg(13) <= Delay24_reg_next(13);
        Delay24_reg(14) <= Delay24_reg_next(14);
        Delay24_reg(15) <= Delay24_reg_next(15);
        Delay24_reg(16) <= Delay24_reg_next(16);
      END IF;
    END IF;
  END PROCESS Delay24_process;

  Delay24_out1 <= Delay24_reg(16);
  Delay24_reg_next(0) <= Delay7_out1;
  Delay24_reg_next(1) <= Delay24_reg(0);
  Delay24_reg_next(2) <= Delay24_reg(1);
  Delay24_reg_next(3) <= Delay24_reg(2);
  Delay24_reg_next(4) <= Delay24_reg(3);
  Delay24_reg_next(5) <= Delay24_reg(4);
  Delay24_reg_next(6) <= Delay24_reg(5);
  Delay24_reg_next(7) <= Delay24_reg(6);
  Delay24_reg_next(8) <= Delay24_reg(7);
  Delay24_reg_next(9) <= Delay24_reg(8);
  Delay24_reg_next(10) <= Delay24_reg(9);
  Delay24_reg_next(11) <= Delay24_reg(10);
  Delay24_reg_next(12) <= Delay24_reg(11);
  Delay24_reg_next(13) <= Delay24_reg(12);
  Delay24_reg_next(14) <= Delay24_reg(13);
  Delay24_reg_next(15) <= Delay24_reg(14);
  Delay24_reg_next(16) <= Delay24_reg(15);

  exp_b_norm_exp_a_norm_sub_temp <= resize(modrem_Normalize_Exp_Mant_out3_1, 32) - resize(Delay24_out1, 32);
  exp_b_norm_exp_a_norm_out1 <= exp_b_norm_exp_a_norm_sub_temp(10 DOWNTO 0);

  DTC_out1_4 <= exp_b_norm_exp_a_norm_out1(9 DOWNTO 0);

  
  shift_length_0_out1 <= '1' WHEN DTC_out1_4 > to_signed(16#000#, 10) ELSE
      '0';

  Delay12_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_5 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1_5 <= shift_length_0_out1;
      END IF;
    END IF;
  END PROCESS Delay12_5_process;


  alphaR_ext_in0 <=  - (resize(reinterpretcast_bitconcat_R_in_out1, 31));
  alphaR_ext_out1 <= alphaR_ext_in0(29 DOWNTO 0);

  Delay10_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_5 <= to_signed(16#00000000#, 30);
      ELSIF enb = '1' THEN
        Delay10_out1_5 <= alphaR_ext_out1;
      END IF;
    END IF;
  END PROCESS Delay10_5_process;


  
  shift_length_cfType_Mantiss_out1 <= '1' WHEN DTC_out1_4 >= to_signed(16#01A#, 10) ELSE
      '0';

  Delay5_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_7 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1_7 <= shift_length_cfType_Mantiss_out1;
      END IF;
    END IF;
  END PROCESS Delay5_7_process;


  Delay11_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_4 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay11_out1_4 <= DTC_out1_4;
      END IF;
    END IF;
  END PROCESS Delay11_4_process;


  bitsra_r_ext_shift_length_zerosig <= to_signed(16#000#, 10);

  
  bitsra_r_ext_shift_length_selsig <= Delay11_out1_4 WHEN Delay11_out1_4 >= bitsra_r_ext_shift_length_zerosig ELSE
      bitsra_r_ext_shift_length_zerosig;

  dynamic_shift_zerosig_2 <= to_signed(16#000#, 10);

  
  dynamic_shift_selsig_2 <= bitsra_r_ext_shift_length_selsig WHEN bitsra_r_ext_shift_length_selsig >= dynamic_shift_zerosig_2 ELSE
      dynamic_shift_zerosig_2;

  bitsra_R_ext_shift_length_out1 <= SHIFT_RIGHT(Delay10_out1_5, to_integer(dynamic_shift_selsig_2));

  C_out1_17 <= to_signed(-16#00000001#, 30);

  
  if_shift_length_cfType_Mantis_out1 <= bitsra_R_ext_shift_length_out1 WHEN Delay5_out1_7 = '0' ELSE
      C_out1_17;

  
  if_shift_length_0_out1 <= Delay10_out1_5 WHEN Delay12_out1_5 = '0' ELSE
      if_shift_length_cfType_Mantis_out1;

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_out1 <= to_signed(16#00000000#, 30);
      ELSIF enb = '1' THEN
        Delay23_out1 <= if_shift_length_0_out1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  Delay16_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1_3 <= to_signed(16#0000000#, 28);
      ELSIF enb = '1' THEN
        Delay16_out1_3 <= Delay12_out1_4;
      END IF;
    END IF;
  END PROCESS Delay16_3_process;


  alphamB1_in0 <=  - (resize(Delay16_out1_3, 29));
  alphamB1_out1 <= alphamB1_in0(27 DOWNTO 0);

  alpha1_out1_4 <= to_unsigned(16#0#, 2);

  Bit_Concat1_out1_1 <= unsigned(alphamB1_out1) & alpha1_out1_4;

  reinterpretcast_bitconcat_mB1_out1 <= signed(Bit_Concat1_out1_1);

  Delay24_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_reg_1(0) <= to_signed(16#00000000#, 30);
        Delay24_reg_1(1) <= to_signed(16#00000000#, 30);
      ELSIF enb = '1' THEN
        Delay24_reg_1(0) <= Delay24_reg_next_1(0);
        Delay24_reg_1(1) <= Delay24_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay24_1_process;

  Delay24_out1_1 <= Delay24_reg_1(1);
  Delay24_reg_next_1(0) <= reinterpretcast_bitconcat_mB1_out1;
  Delay24_reg_next_1(1) <= Delay24_reg_1(0);

  mB1_ext_R_ext_add_temp <= resize(Delay23_out1, 32) + resize(Delay24_out1_1, 32);
  mB1_ext_R_ext_out1 <= mB1_ext_R_ext_add_temp(29 DOWNTO 0);

  BitSlice_out1_2 <= mB1_ext_R_ext_out1(25);

  Logical_Operator3_out1_1 <=  NOT BitSlice_out1_2;

  BitSlice1_out1_1 <= mB1_ext_R_ext_out1(24);

  alphabitget_R_ext_cfType_Mantissa_out1 <= Logical_Operator3_out1_1 AND BitSlice1_out1_1;

  bitsll_R_ext_1_out1 <= mB1_ext_R_ext_out1 sll 1;

  
  if_bitget_R_ext_cfType_Mantissa_out1 <= mB1_ext_R_ext_out1 WHEN alphabitget_R_ext_cfType_Mantissa_out1 = '0' ELSE
      bitsll_R_ext_1_out1;

  
  if_sign_diff_1_R_in_0_out1 <= Delay25_out1 WHEN Delay18_out1_3 = '0' ELSE
      if_bitget_R_ext_cfType_Mantissa_out1;

  BitSlice3_out1 <= unsigned(if_sign_diff_1_R_in_0_out1(25 DOWNTO 1));

  Delay9_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_4 <= to_unsigned(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Delay9_out1_4 <= BitSlice3_out1;
      END IF;
    END IF;
  END PROCESS Delay9_4_process;


  
  R_0_out1 <= '1' WHEN Delay9_out1_4 = to_unsigned(16#0000000#, 25) ELSE
      '0';

  reset_to_zero_R_0_out1 <= Delay6_out1_4 OR R_0_out1;

  Delay3_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_8 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_8 <= reset_to_zero_R_0_out1;
      END IF;
    END IF;
  END PROCESS Delay3_8_process;


  reduced_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_6 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1_6 <= Delay12_out1_5;
      END IF;
    END IF;
  END PROCESS reduced_14_process;


  Delay17_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_reg_1(0) <= to_signed(16#000#, 10);
        Delay17_reg_1(1) <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay17_reg_1(0) <= Delay17_reg_next_1(0);
        Delay17_reg_1(1) <= Delay17_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay17_5_process;

  Delay17_out1_5 <= Delay17_reg_1(1);
  Delay17_reg_next_1(0) <= modrem_Normalize_Exp_Mant_out3_1;
  Delay17_reg_next_1(1) <= Delay17_reg_1(0);

  Delay19_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_reg(0) <= to_signed(16#000#, 10);
        Delay19_reg(1) <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay19_reg(0) <= Delay19_reg_next(0);
        Delay19_reg(1) <= Delay19_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay19_3_process;

  Delay19_out1_3 <= Delay19_reg(1);
  Delay19_reg_next(0) <= Delay24_out1;
  Delay19_reg_next(1) <= Delay19_reg(0);

  
  if_exp_a_norm_exp_b_norm_out1 <= Delay17_out1_5 WHEN Delay12_out1_6 = '0' ELSE
      Delay19_out1_3;

  cast_1_like_exp_R_out1 <= to_signed(16#001#, 10);

  exp_R_cast_1_like_exp_R_sub_temp <= resize(Delay17_out1_5, 32) - resize(cast_1_like_exp_R_out1, 32);
  exp_R_cast_1_like_exp_R_out1 <= exp_R_cast_1_like_exp_R_sub_temp(9 DOWNTO 0);

  
  if_bitget_R_ext_cfType_Mantissa_1_out1 <= Delay17_out1_5 WHEN alphabitget_R_ext_cfType_Mantissa_out1 = '0' ELSE
      exp_R_cast_1_like_exp_R_out1;

  
  if_sign_diff_1_R_in_0_1_out1 <= if_exp_a_norm_exp_b_norm_out1 WHEN Delay18_out1_3 = '0' ELSE
      if_bitget_R_ext_cfType_Mantissa_1_out1;

  Delay7_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1_5 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay7_out1_5 <= if_sign_diff_1_R_in_0_1_out1;
      END IF;
    END IF;
  END PROCESS Delay7_5_process;


  Delay4_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_9 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay4_out1_9 <= Delay7_out1_5;
      END IF;
    END IF;
  END PROCESS Delay4_9_process;


  BitSlice_out1_3 <= Delay9_out1_4(24 DOWNTO 1);

  Bit_Slice2_out1_17 <= BitSlice_out1_3(23 DOWNTO 16);

  Bit_Slice16_out1_3 <= Bit_Slice2_out1_17(7);

  Bit_Slice15_out1_3 <= Bit_Slice2_out1_17(6);

  Logical_Operator5_out1_3 <= Bit_Slice16_out1_3 OR Bit_Slice15_out1_3;

  Bit_Slice14_out1_3 <= Bit_Slice2_out1_17(5);

  Bit_Slice13_out1_3 <= Bit_Slice2_out1_17(4);

  Logical_Operator7_out1_3 <= Bit_Slice14_out1_3 OR Bit_Slice13_out1_3;

  Logical_Operator6_out1_3 <= Logical_Operator5_out1_3 OR Logical_Operator7_out1_3;

  Bit_Slice12_out1_3 <= Bit_Slice2_out1_17(3);

  Bit_Slice11_out1_3 <= Bit_Slice2_out1_17(2);

  Logical_Operator4_out1_4 <= Bit_Slice12_out1_3 OR Bit_Slice11_out1_3;

  Bit_Slice10_out1_3 <= Bit_Slice2_out1_17(1);

  Bit_Slice9_out1_3 <= Bit_Slice2_out1_17(0);

  Logical_Operator14_out1_2 <= Bit_Slice10_out1_3 OR Bit_Slice9_out1_3;

  Logical_Operator13_out1_2 <= Logical_Operator4_out1_4 OR Logical_Operator14_out1_2;

  Bit_Slice1_out1_18 <= BitSlice_out1_3(15 DOWNTO 8);

  Bit_Slice16_out1_4 <= Bit_Slice1_out1_18(7);

  Bit_Slice15_out1_4 <= Bit_Slice1_out1_18(6);

  Logical_Operator5_out1_4 <= Bit_Slice16_out1_4 OR Bit_Slice15_out1_4;

  Bit_Slice14_out1_4 <= Bit_Slice1_out1_18(5);

  Bit_Slice13_out1_4 <= Bit_Slice1_out1_18(4);

  Logical_Operator7_out1_4 <= Bit_Slice14_out1_4 OR Bit_Slice13_out1_4;

  Logical_Operator6_out1_4 <= Logical_Operator5_out1_4 OR Logical_Operator7_out1_4;

  Bit_Slice12_out1_4 <= Bit_Slice1_out1_18(3);

  Bit_Slice11_out1_4 <= Bit_Slice1_out1_18(2);

  Logical_Operator4_out1_5 <= Bit_Slice12_out1_4 OR Bit_Slice11_out1_4;

  Bit_Slice10_out1_4 <= Bit_Slice1_out1_18(1);

  Bit_Slice9_out1_4 <= Bit_Slice1_out1_18(0);

  Logical_Operator14_out1_3 <= Bit_Slice10_out1_4 OR Bit_Slice9_out1_4;

  Logical_Operator13_out1_3 <= Logical_Operator4_out1_5 OR Logical_Operator14_out1_3;

  Bit_Slice4_out1_2 <= BitSlice_out1_3(7 DOWNTO 0);

  Bit_Slice8_out1 <= Bit_Slice4_out1_2(7);

  Bit_Slice7_out1 <= Bit_Slice4_out1_2(6);

  Logical_Operator1_out1_2 <= Bit_Slice8_out1 OR Bit_Slice7_out1;

  Bit_Slice6_out1 <= Bit_Slice4_out1_2(5);

  Bit_Slice5_out1 <= Bit_Slice4_out1_2(4);

  Logical_Operator3_out1_2 <= Bit_Slice6_out1 OR Bit_Slice5_out1;

  Bit_Slice3_out1_16 <= Bit_Slice4_out1_2(3);

  Bit_Slice2_out1_18 <= Bit_Slice4_out1_2(2);

  Bit_Slice1_out1_19 <= Bit_Slice4_out1_2(1);

  Bit_Slice_out1_18 <= Bit_Slice4_out1_2(0);

  Constant_out1_5 <= to_unsigned(16#18#, 8);

  Constant1_out1 <= to_unsigned(16#17#, 8);

  
  Switch_out1_18 <= Constant_out1_5 WHEN Bit_Slice_out1_18 = '0' ELSE
      Constant1_out1;

  Logical_Operator_out1_5 <= Bit_Slice3_out1_16 OR Bit_Slice2_out1_18;

  Constant2_out1 <= to_unsigned(16#16#, 8);

  
  Switch1_out1_15 <= Switch_out1_18 WHEN Bit_Slice1_out1_19 = '0' ELSE
      Constant2_out1;

  Constant3_out1_1 <= to_unsigned(16#15#, 8);

  
  Switch2_out1_15 <= Constant_out1_5 WHEN Bit_Slice2_out1_18 = '0' ELSE
      Constant3_out1_1;

  Constant4_out1 <= to_unsigned(16#14#, 8);

  Logical_Operator2_out1_2 <= Logical_Operator1_out1_2 OR Logical_Operator3_out1_2;

  
  Switch3_out1 <= Switch2_out1_15 WHEN Bit_Slice3_out1_16 = '0' ELSE
      Constant4_out1;

  
  Switch4_out1 <= Switch1_out1_15 WHEN Logical_Operator_out1_5 = '0' ELSE
      Switch3_out1;

  Constant5_out1 <= to_unsigned(16#13#, 8);

  
  Switch5_out1 <= Constant_out1_5 WHEN Bit_Slice5_out1 = '0' ELSE
      Constant5_out1;

  Constant6_out1 <= to_unsigned(16#12#, 8);

  
  Switch6_out1 <= Switch5_out1 WHEN Bit_Slice6_out1 = '0' ELSE
      Constant6_out1;

  Constant7_out1_1 <= to_unsigned(16#11#, 8);

  
  Switch7_out1 <= Constant_out1_5 WHEN Bit_Slice7_out1 = '0' ELSE
      Constant7_out1_1;

  Constant8_out1_1 <= to_unsigned(16#10#, 8);

  
  Switch8_out1 <= Switch7_out1 WHEN Bit_Slice8_out1 = '0' ELSE
      Constant8_out1_1;

  Logical_Operator12_out1_2 <= Logical_Operator6_out1_4 OR Logical_Operator13_out1_3;

  
  Switch9_out1 <= Switch6_out1 WHEN Logical_Operator1_out1_2 = '0' ELSE
      Switch8_out1;

  
  Switch10_out1 <= Switch4_out1 WHEN Logical_Operator2_out1_2 = '0' ELSE
      Switch9_out1;

  Constant_out1_6 <= to_unsigned(16#18#, 8);

  Constant9_out1_3 <= to_unsigned(16#0F#, 8);

  
  Switch11_out1_3 <= Constant_out1_6 WHEN Bit_Slice9_out1_4 = '0' ELSE
      Constant9_out1_3;

  Constant10_out1_3 <= to_unsigned(16#0E#, 8);

  
  Switch12_out1_3 <= Switch11_out1_3 WHEN Bit_Slice10_out1_4 = '0' ELSE
      Constant10_out1_3;

  Constant11_out1_3 <= to_unsigned(16#0D#, 8);

  
  Switch14_out1_3 <= Constant_out1_6 WHEN Bit_Slice11_out1_4 = '0' ELSE
      Constant11_out1_3;

  Constant12_out1_3 <= to_unsigned(16#0C#, 8);

  
  Switch15_out1_3 <= Switch14_out1_3 WHEN Bit_Slice12_out1_4 = '0' ELSE
      Constant12_out1_3;

  
  Switch16_out1_3 <= Switch12_out1_3 WHEN Logical_Operator4_out1_5 = '0' ELSE
      Switch15_out1_3;

  Constant13_out1_3 <= to_unsigned(16#0B#, 8);

  
  Switch17_out1_3 <= Constant_out1_6 WHEN Bit_Slice13_out1_4 = '0' ELSE
      Constant13_out1_3;

  Constant14_out1_3 <= to_unsigned(16#0A#, 8);

  
  Switch18_out1_3 <= Switch17_out1_3 WHEN Bit_Slice14_out1_4 = '0' ELSE
      Constant14_out1_3;

  Constant15_out1_3 <= to_unsigned(16#09#, 8);

  
  Switch19_out1_3 <= Constant_out1_6 WHEN Bit_Slice15_out1_4 = '0' ELSE
      Constant15_out1_3;

  Constant16_out1_3 <= to_unsigned(16#08#, 8);

  
  Switch20_out1_3 <= Switch19_out1_3 WHEN Bit_Slice16_out1_4 = '0' ELSE
      Constant16_out1_3;

  
  Switch21_out1_3 <= Switch18_out1_3 WHEN Logical_Operator5_out1_4 = '0' ELSE
      Switch20_out1_3;

  Logical_Operator12_out1_3 <= Logical_Operator6_out1_3 OR Logical_Operator13_out1_2;

  
  Switch13_out1_3 <= Switch16_out1_3 WHEN Logical_Operator6_out1_4 = '0' ELSE
      Switch21_out1_3;

  
  Switch33_out1_1 <= Switch10_out1 WHEN Logical_Operator12_out1_2 = '0' ELSE
      Switch13_out1_3;

  Constant_out1_7 <= to_unsigned(16#18#, 8);

  Constant9_out1_4 <= to_unsigned(16#07#, 8);

  
  Switch11_out1_4 <= Constant_out1_7 WHEN Bit_Slice9_out1_3 = '0' ELSE
      Constant9_out1_4;

  Constant10_out1_4 <= to_unsigned(16#06#, 8);

  
  Switch12_out1_4 <= Switch11_out1_4 WHEN Bit_Slice10_out1_3 = '0' ELSE
      Constant10_out1_4;

  Constant11_out1_4 <= to_unsigned(16#05#, 8);

  
  Switch14_out1_4 <= Constant_out1_7 WHEN Bit_Slice11_out1_3 = '0' ELSE
      Constant11_out1_4;

  Constant12_out1_4 <= to_unsigned(16#04#, 8);

  
  Switch15_out1_4 <= Switch14_out1_4 WHEN Bit_Slice12_out1_3 = '0' ELSE
      Constant12_out1_4;

  
  Switch16_out1_4 <= Switch12_out1_4 WHEN Logical_Operator4_out1_4 = '0' ELSE
      Switch15_out1_4;

  Constant13_out1_4 <= to_unsigned(16#03#, 8);

  
  Switch17_out1_4 <= Constant_out1_7 WHEN Bit_Slice13_out1_3 = '0' ELSE
      Constant13_out1_4;

  Constant14_out1_4 <= to_unsigned(16#02#, 8);

  
  Switch18_out1_4 <= Switch17_out1_4 WHEN Bit_Slice14_out1_3 = '0' ELSE
      Constant14_out1_4;

  Constant15_out1_4 <= to_unsigned(16#01#, 8);

  
  Switch19_out1_4 <= Constant_out1_7 WHEN Bit_Slice15_out1_3 = '0' ELSE
      Constant15_out1_4;

  Constant16_out1_4 <= to_unsigned(16#00#, 8);

  
  Switch20_out1_4 <= Switch19_out1_4 WHEN Bit_Slice16_out1_3 = '0' ELSE
      Constant16_out1_4;

  
  Switch21_out1_4 <= Switch18_out1_4 WHEN Logical_Operator5_out1_3 = '0' ELSE
      Switch20_out1_4;

  
  Switch13_out1_4 <= Switch16_out1_4 WHEN Logical_Operator6_out1_3 = '0' ELSE
      Switch21_out1_4;

  
  Switch34_out1_1 <= Switch33_out1_1 WHEN Logical_Operator12_out1_3 = '0' ELSE
      Switch13_out1_4;

  Data_Type_Conversion_out1 <= Switch34_out1_1(4 DOWNTO 0);

  Delay2_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_8 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        Delay2_out1_8 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Delay2_8_process;


  exp_R_shift1_sub_cast <= signed(resize(Delay2_out1_8, 32));
  exp_R_shift1_sub_temp <= resize(Delay4_out1_9, 32) - exp_R_shift1_sub_cast;
  exp_R_shift1_out1 <= exp_R_shift1_sub_temp(11 DOWNTO 0);

  DTC1_out1_3 <= exp_R_shift1_out1(9 DOWNTO 0);

  
  exp_rem_0_out1 <= '1' WHEN DTC1_out1_3 <= to_signed(16#000#, 10) ELSE
      '0';

  
  shift1_cfType_MantissaLength_out1 <= '1' WHEN Delay2_out1_8 > to_unsigned(16#18#, 5) ELSE
      '0';

  Delay1_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_5 <= to_unsigned(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Delay1_out1_5 <= Delay9_out1_4;
      END IF;
    END IF;
  END PROCESS Delay1_5_process;


  bitsll_tmp2_shift1_out1 <= Delay1_out1_5 sll to_integer(Delay2_out1_8);

  C_out1_18 <= to_unsigned(16#0000000#, 25);

  
  if_shift1_cfType_MantissaLengt_out1 <= bitsll_tmp2_shift1_out1 WHEN shift1_cfType_MantissaLength_out1 = '0' ELSE
      C_out1_18;

  BitSlice2_out1 <= if_shift1_cfType_MantissaLengt_out1(23 DOWNTO 0);

  
  exp_rem_0_out1_1 <= '1' WHEN DTC1_out1_3 < to_signed(16#000#, 10) ELSE
      '0';

  bitsrl_tmp3_1_out1 <= if_shift1_cfType_MantissaLengt_out1 srl 1;

  BitSlice3_out1_1 <= bitsrl_tmp3_1_out1(23 DOWNTO 0);

  C1_out1 <= to_unsigned(16#000000#, 24);

  
  if_exp_rem_0_out1 <= BitSlice3_out1_1 WHEN exp_rem_0_out1_1 = '0' ELSE
      C1_out1;

  
  if_exp_rem_0_1_out1 <= BitSlice2_out1 WHEN exp_rem_0_out1 = '0' ELSE
      if_exp_rem_0_out1;

  C4_out1 <= to_unsigned(16#000000#, 24);

  
  if_reset_to_zero_R_0_1_out1 <= if_exp_rem_0_1_out1 WHEN Delay3_out1_8 = '0' ELSE
      C4_out1;

  Delay1_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_6 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay1_out1_6 <= if_reset_to_zero_R_0_1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_6_process;


  Bit_Concat_out1_4 <= alpha0_out1 & Delay1_out1_6;

  BitSlice1_out1_2 <= Bit_Concat_out1_4(1);

  cast_R_ext_WordLength_like_out1 <= to_signed(16#01E#, 10);

  cast_R_ext_WordLength_like_sub_temp <= resize(cast_R_ext_WordLength_like_out1, 32) - resize(DTC_out1_4, 32);
  cast_R_ext_WordLength_like_out1_1 <= cast_R_ext_WordLength_like_sub_temp(10 DOWNTO 0);

  Delay4_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_10 <= to_signed(16#000#, 11);
      ELSIF enb = '1' THEN
        Delay4_out1_10 <= cast_R_ext_WordLength_like_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_10_process;


  bitsll_r_ext_cast_r_ext_wordl_zerosig <= to_signed(16#000#, 11);

  
  bitsll_r_ext_cast_r_ext_wordl_selsig <= Delay4_out1_10 WHEN Delay4_out1_10 >= bitsll_r_ext_cast_r_ext_wordl_zerosig ELSE
      bitsll_r_ext_cast_r_ext_wordl_zerosig;

  dynamic_shift_zerosig_3 <= to_signed(16#000#, 11);

  
  dynamic_shift_selsig_3 <= bitsll_r_ext_cast_r_ext_wordl_selsig WHEN bitsll_r_ext_cast_r_ext_wordl_selsig >= dynamic_shift_zerosig_3 ELSE
      dynamic_shift_zerosig_3;

  bitsll_R_ext_cast_R_ext_WordL_out1 <= Delay10_out1_5 sll to_integer(dynamic_shift_selsig_3);

  
  tmp1_0_out1 <= '1' WHEN bitsll_R_ext_cast_R_ext_WordL_out1 /= to_signed(16#00000000#, 30) ELSE
      '0';

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay21_out1 <= tmp1_0_out1;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay22_out1 <= Delay5_out1_7;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  Logical_Operator_out1_6 <= Delay21_out1 OR Delay22_out1;

  Logical_Operator1_out1_3 <= Logical_Operator_out1_6 AND Delay12_out1_6;

  BitSlice2_out1_1 <= if_bitget_R_ext_cfType_Mantissa_out1(0);

  sticky_bitget_R_ext_1_out1 <= Logical_Operator1_out1_3 OR BitSlice2_out1_1;

  Logical_Operator2_out1_3 <= sticky_bitget_R_ext_1_out1 AND Delay18_out1_3;

  Delay8_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1_4 <= '0';
      ELSIF enb = '1' THEN
        Delay8_out1_4 <= Logical_Operator2_out1_3;
      END IF;
    END IF;
  END PROCESS Delay8_4_process;


  Delay_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_6 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1_6 <= Delay8_out1_4;
      END IF;
    END IF;
  END PROCESS Delay_6_process;


  BitSlice_out1_4 <= Bit_Concat_out1_4(0);

  Delay2_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_9 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1_9 <= Delay_out1_6;
      END IF;
    END IF;
  END PROCESS Delay2_9_process;


  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1_2 OR Delay2_out1_9;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_4 AND alphabitget_Mant_tmp_2_0_out1;

  cast_2_like_Mant_tmp_out1 <= to_unsigned(16#0000002#, 25);

  Mant_tmp_cast_2_like_Man_out1 <= resize(resize(Bit_Concat_out1_4, 32) + resize(cast_2_like_Mant_tmp_out1, 32), 25);

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_4 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_cast_2_like_Man_out1;

  BitSlice2_out1_2 <= if_bitget_Mant_tmp_1_0_out1(24);

  Logical_Operator_out1_7 <= exp_rem_0_out1 OR Delay3_out1_8;

  DTC2_out1_2 <= unsigned(DTC1_out1_3(7 DOWNTO 0));

  C3_out1 <= to_unsigned(16#00#, 8);

  
  if_reset_to_zero_R_0_out1 <= DTC2_out1_2 WHEN Logical_Operator_out1_7 = '0' ELSE
      C3_out1;

  Delay_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_7 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay_out1_7 <= if_reset_to_zero_R_0_out1;
      END IF;
    END IF;
  END PROCESS Delay_7_process;


  cast_1_like_Exp_out1 <= to_unsigned(16#01#, 8);

  Exp_cast_1_like_Exp_out1 <= Delay_out1_7 + cast_1_like_Exp_out1;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= Delay_out1_7 WHEN BitSlice2_out1_2 = '0' ELSE
      Exp_cast_1_like_Exp_out1;

  
  Compare_To_Zero_out1_3 <= '1' WHEN checkDenormal1_out2 = to_unsigned(16#000000#, 23) ELSE
      '0';

  
  Compare_To_Zero1_out1 <= '1' WHEN checkDenormal1_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Logical_Operator_out1_8 <= Compare_To_Zero_out1_3 AND Compare_To_Zero1_out1;

  
  Compare_To_Constant_out1_1 <= '1' WHEN checkDenormal_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  
  Compare_To_Constant1_out1_1 <= '1' WHEN checkDenormal1_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  Logical_Operator1_out1_4 <= Compare_To_Constant_out1_1 OR Compare_To_Constant1_out1_1;

  Constant_out1_8 <= to_unsigned(16#00#, 8);

  Constant2_out1_1 <= to_unsigned(16#FF#, 8);

  
  Switch2_out1_16 <= Constant_out1_8 WHEN Logical_Operator1_out1_4 = '0' ELSE
      Constant2_out1_1;

  
  Switch_out1_19 <= Switch2_out1_16 WHEN Logical_Operator_out1_8 = '0' ELSE
      checkDenormal_out1;

  Delay18_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_reg_1(0) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(1) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(2) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(3) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(4) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(5) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(6) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(7) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(8) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(9) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(10) <= to_unsigned(16#00#, 8);
        Delay18_reg_1(11) <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay18_reg_1(0) <= Delay18_reg_next_1(0);
        Delay18_reg_1(1) <= Delay18_reg_next_1(1);
        Delay18_reg_1(2) <= Delay18_reg_next_1(2);
        Delay18_reg_1(3) <= Delay18_reg_next_1(3);
        Delay18_reg_1(4) <= Delay18_reg_next_1(4);
        Delay18_reg_1(5) <= Delay18_reg_next_1(5);
        Delay18_reg_1(6) <= Delay18_reg_next_1(6);
        Delay18_reg_1(7) <= Delay18_reg_next_1(7);
        Delay18_reg_1(8) <= Delay18_reg_next_1(8);
        Delay18_reg_1(9) <= Delay18_reg_next_1(9);
        Delay18_reg_1(10) <= Delay18_reg_next_1(10);
        Delay18_reg_1(11) <= Delay18_reg_next_1(11);
      END IF;
    END IF;
  END PROCESS Delay18_4_process;

  Delay18_out1_4 <= Delay18_reg_1(11);
  Delay18_reg_next_1(0) <= Switch_out1_19;
  Delay18_reg_next_1(1) <= Delay18_reg_1(0);
  Delay18_reg_next_1(2) <= Delay18_reg_1(1);
  Delay18_reg_next_1(3) <= Delay18_reg_1(2);
  Delay18_reg_next_1(4) <= Delay18_reg_1(3);
  Delay18_reg_next_1(5) <= Delay18_reg_1(4);
  Delay18_reg_next_1(6) <= Delay18_reg_1(5);
  Delay18_reg_next_1(7) <= Delay18_reg_1(6);
  Delay18_reg_next_1(8) <= Delay18_reg_1(7);
  Delay18_reg_next_1(9) <= Delay18_reg_1(8);
  Delay18_reg_next_1(10) <= Delay18_reg_1(9);
  Delay18_reg_next_1(11) <= Delay18_reg_1(10);

  
  if_rem_Exceptional_Check_cfType_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN Delay20_out1 = '0' ELSE
      Delay18_out1_4;

  
  Switch6_out1_1 <= Constant3_out1 WHEN Relational_Operator_relop1 = '0' ELSE
      if_rem_Exceptional_Check_cfType_out1;

  Delay6_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_6 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1_6 <= Switch6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_6_process;


  Constant2_out1_2 <= to_unsigned(16#000000#, 23);

  
  Compare_To_Zero_out1_4 <= '1' WHEN if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Logical_Operator_out1_9 <= Compare_To_Zero_out1_4 OR BitSlice2_out1_2;

  BitSlice3_out1_2 <= if_bitget_Mant_tmp_1_0_out1(23 DOWNTO 1);

  C_out1_19 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1_2 WHEN Logical_Operator_out1_9 = '0' ELSE
      C_out1_19;

  Constant1_out1_1 <= to_unsigned(16#000000#, 23);

  Constant3_out1_2 <= to_unsigned(16#400000#, 23);

  
  Switch3_out1_1 <= Constant1_out1_1 WHEN Logical_Operator1_out1_4 = '0' ELSE
      Constant3_out1_2;

  
  Switch1_out1_16 <= Switch3_out1_1 WHEN Logical_Operator_out1_8 = '0' ELSE
      checkDenormal_out2;

  Delay19_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_reg_1(0) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(1) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(2) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(3) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(4) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(5) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(6) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(7) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(8) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(9) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(10) <= to_unsigned(16#000000#, 23);
        Delay19_reg_1(11) <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay19_reg_1(0) <= Delay19_reg_next_1(0);
        Delay19_reg_1(1) <= Delay19_reg_next_1(1);
        Delay19_reg_1(2) <= Delay19_reg_next_1(2);
        Delay19_reg_1(3) <= Delay19_reg_next_1(3);
        Delay19_reg_1(4) <= Delay19_reg_next_1(4);
        Delay19_reg_1(5) <= Delay19_reg_next_1(5);
        Delay19_reg_1(6) <= Delay19_reg_next_1(6);
        Delay19_reg_1(7) <= Delay19_reg_next_1(7);
        Delay19_reg_1(8) <= Delay19_reg_next_1(8);
        Delay19_reg_1(9) <= Delay19_reg_next_1(9);
        Delay19_reg_1(10) <= Delay19_reg_next_1(10);
        Delay19_reg_1(11) <= Delay19_reg_next_1(11);
      END IF;
    END IF;
  END PROCESS Delay19_4_process;

  Delay19_out1_4 <= Delay19_reg_1(11);
  Delay19_reg_next_1(0) <= Switch1_out1_16;
  Delay19_reg_next_1(1) <= Delay19_reg_1(0);
  Delay19_reg_next_1(2) <= Delay19_reg_1(1);
  Delay19_reg_next_1(3) <= Delay19_reg_1(2);
  Delay19_reg_next_1(4) <= Delay19_reg_1(3);
  Delay19_reg_next_1(5) <= Delay19_reg_1(4);
  Delay19_reg_next_1(6) <= Delay19_reg_1(5);
  Delay19_reg_next_1(7) <= Delay19_reg_1(6);
  Delay19_reg_next_1(8) <= Delay19_reg_1(7);
  Delay19_reg_next_1(9) <= Delay19_reg_1(8);
  Delay19_reg_next_1(10) <= Delay19_reg_1(9);
  Delay19_reg_next_1(11) <= Delay19_reg_1(10);

  
  if_rem_Exceptional_Check_cfType_1_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 WHEN Delay20_out1 = '0' ELSE
      Delay19_out1_4;

  
  Switch5_out1_1 <= Constant2_out1_2 WHEN Relational_Operator_relop1 = '0' ELSE
      if_rem_Exceptional_Check_cfType_1_out1;

  Delay7_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1_6 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay7_out1_6 <= Switch5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_6_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= Delay5_out1 & Delay6_out1_6 & Delay7_out1_6;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

