-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD is
generic (
    C_M_AXI_AXI_READ_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_READ_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_READ_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_READ_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_WRITE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_WRITE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_WRITE_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_READ_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_READ_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_READ_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_AXI_WRITE_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_WRITE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_WRITE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_axi_read_AWVALID : OUT STD_LOGIC;
    m_axi_axi_read_AWREADY : IN STD_LOGIC;
    m_axi_axi_read_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ADDR_WIDTH-1 downto 0);
    m_axi_axi_read_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_read_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_AWUSER_WIDTH-1 downto 0);
    m_axi_axi_read_WVALID : OUT STD_LOGIC;
    m_axi_axi_read_WREADY : IN STD_LOGIC;
    m_axi_axi_read_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_DATA_WIDTH-1 downto 0);
    m_axi_axi_read_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_DATA_WIDTH/8-1 downto 0);
    m_axi_axi_read_WLAST : OUT STD_LOGIC;
    m_axi_axi_read_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_WUSER_WIDTH-1 downto 0);
    m_axi_axi_read_ARVALID : OUT STD_LOGIC;
    m_axi_axi_read_ARREADY : IN STD_LOGIC;
    m_axi_axi_read_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ADDR_WIDTH-1 downto 0);
    m_axi_axi_read_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_read_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_read_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_read_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ARUSER_WIDTH-1 downto 0);
    m_axi_axi_read_RVALID : IN STD_LOGIC;
    m_axi_axi_read_RREADY : OUT STD_LOGIC;
    m_axi_axi_read_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_DATA_WIDTH-1 downto 0);
    m_axi_axi_read_RLAST : IN STD_LOGIC;
    m_axi_axi_read_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_RUSER_WIDTH-1 downto 0);
    m_axi_axi_read_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_BVALID : IN STD_LOGIC;
    m_axi_axi_read_BREADY : OUT STD_LOGIC;
    m_axi_axi_read_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_read_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_ID_WIDTH-1 downto 0);
    m_axi_axi_read_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_READ_BUSER_WIDTH-1 downto 0);
    m_axi_axi_write_AWVALID : OUT STD_LOGIC;
    m_axi_axi_write_AWREADY : IN STD_LOGIC;
    m_axi_axi_write_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ADDR_WIDTH-1 downto 0);
    m_axi_axi_write_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_write_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_AWUSER_WIDTH-1 downto 0);
    m_axi_axi_write_WVALID : OUT STD_LOGIC;
    m_axi_axi_write_WREADY : IN STD_LOGIC;
    m_axi_axi_write_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_DATA_WIDTH-1 downto 0);
    m_axi_axi_write_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_DATA_WIDTH/8-1 downto 0);
    m_axi_axi_write_WLAST : OUT STD_LOGIC;
    m_axi_axi_write_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_WUSER_WIDTH-1 downto 0);
    m_axi_axi_write_ARVALID : OUT STD_LOGIC;
    m_axi_axi_write_ARREADY : IN STD_LOGIC;
    m_axi_axi_write_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ADDR_WIDTH-1 downto 0);
    m_axi_axi_write_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_axi_write_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_axi_write_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_axi_write_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ARUSER_WIDTH-1 downto 0);
    m_axi_axi_write_RVALID : IN STD_LOGIC;
    m_axi_axi_write_RREADY : OUT STD_LOGIC;
    m_axi_axi_write_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_DATA_WIDTH-1 downto 0);
    m_axi_axi_write_RLAST : IN STD_LOGIC;
    m_axi_axi_write_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_RUSER_WIDTH-1 downto 0);
    m_axi_axi_write_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_BVALID : IN STD_LOGIC;
    m_axi_axi_write_BREADY : OUT STD_LOGIC;
    m_axi_axi_write_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_axi_write_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_ID_WIDTH-1 downto 0);
    m_axi_axi_write_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_WRITE_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of BGD is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "BGD_BGD,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.561000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=102,HLS_SYN_DSP=0,HLS_SYN_FF=46239,HLS_SYN_LUT=43567,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (76 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (76 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (76 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (76 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (76 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (76 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (76 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (76 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (76 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (76 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal axiMlpResultsInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiClassesInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightOutput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasOutput : STD_LOGIC_VECTOR (63 downto 0);
    signal numberInputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOutputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberLayers : STD_LOGIC_VECTOR (31 downto 0);
    signal numberNeurons : STD_LOGIC_VECTOR (31 downto 0);
    signal loadParameters : STD_LOGIC_VECTOR (31 downto 0);
    signal batchSize : STD_LOGIC_VECTOR (31 downto 0);
    signal learningRate : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal bramWeight_ce0 : STD_LOGIC;
    signal bramWeight_we0 : STD_LOGIC;
    signal bramWeight_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal bramWeight_ce1 : STD_LOGIC;
    signal bramWeight_we1 : STD_LOGIC;
    signal bramWeight_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bramBias_ce0 : STD_LOGIC;
    signal bramBias_we0 : STD_LOGIC;
    signal bramBias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_ce1 : STD_LOGIC;
    signal bramBias_we1 : STD_LOGIC;
    signal bramBias_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeightGradientAvg_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal bramWeightGradientAvg_ce0 : STD_LOGIC;
    signal bramWeightGradientAvg_we0 : STD_LOGIC;
    signal bramWeightGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeightGradientAvg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeightGradientAvg_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal bramWeightGradientAvg_ce1 : STD_LOGIC;
    signal bramWeightGradientAvg_we1 : STD_LOGIC;
    signal bramWeightGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeightGradientAvg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBiasGradientAvg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bramBiasGradientAvg_ce0 : STD_LOGIC;
    signal bramBiasGradientAvg_we0 : STD_LOGIC;
    signal bramBiasGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBiasGradientAvg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBiasGradientAvg_ce1 : STD_LOGIC;
    signal bramBiasGradientAvg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axi_read_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond549_reg_1267 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond527_reg_1334 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond516_reg_1407 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln68_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond538_reg_1297 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal axi_write_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal icmp_ln152_reg_1623 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal exitcond492_reg_1633 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond492_reg_1633_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal exitcond1_reg_1662 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_1662_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal icmp_ln157_reg_1652 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal axi_read_AWREADY : STD_LOGIC;
    signal axi_read_WREADY : STD_LOGIC;
    signal axi_read_ARVALID : STD_LOGIC;
    signal axi_read_ARREADY : STD_LOGIC;
    signal axi_read_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_RVALID : STD_LOGIC;
    signal axi_read_RREADY : STD_LOGIC;
    signal axi_read_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_read_RLAST : STD_LOGIC;
    signal axi_read_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_read_BVALID : STD_LOGIC;
    signal axi_read_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_read_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_AWVALID : STD_LOGIC;
    signal axi_write_AWREADY : STD_LOGIC;
    signal axi_write_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_WVALID : STD_LOGIC;
    signal axi_write_WREADY : STD_LOGIC;
    signal axi_write_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_ARREADY : STD_LOGIC;
    signal axi_write_RVALID : STD_LOGIC;
    signal axi_write_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_write_RLAST : STD_LOGIC;
    signal axi_write_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_write_BVALID : STD_LOGIC;
    signal axi_write_BREADY : STD_LOGIC;
    signal axi_write_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_write_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_write_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index45_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index45_reg_390_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_index39_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index39_reg_402_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal loop_index33_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index33_reg_414_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state32_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal loop_index27_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index27_reg_426_pp3_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state44_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal loop_index21_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal axiBiasOutput_read_reg_1161 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightOutput_read_reg_1166 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasInput_read_reg_1171 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput_read_reg_1176 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiClassesInput_read_reg_1181 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiMlpResultsInput_read_reg_1186 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln50_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal numberOutputs_read_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberInputs_read_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberNeurons_read_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberLayers_read_reg_1238 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln58_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_addr_reg_1261 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond549_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond549_reg_1267_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_223_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_223_reg_1271 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal axi_read_addr_read_reg_1276 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_2_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_2_reg_1281 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln63_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_addr_1_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond538_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond538_reg_1297_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_225_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_225_reg_1301 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal axi_read_addr_1_read_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal batchSize_read_reg_1311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal mul_ln67_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln67_reg_1318 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln67_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_read_addr_2_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond527_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond527_reg_1334_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_228_fu_728_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_228_reg_1338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal axi_read_addr_2_read_reg_1343 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_2_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_2_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal add_ln71_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln71_reg_1354 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln71_4_fu_752_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln71_4_reg_1359 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln71_1_fu_760_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln71_1_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln68_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln71_fu_771_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln71_reg_1375 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state37_io : BOOLEAN;
    signal trunc_ln71_1_fu_774_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln71_1_reg_1382 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln71_2_fu_777_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln71_2_reg_1387 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln71_3_fu_780_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln71_3_reg_1393 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond516_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond516_reg_1407_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_230_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_230_reg_1411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal axi_read_addr_3_read_reg_1416 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_fu_823_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_reg_1421 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal mul34_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul34_reg_1426 : STD_LOGIC_VECTOR (31 downto 0);
    signal add35_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add35_reg_1431 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_242_fu_842_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_242_reg_1441 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1446 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1115_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul41_reg_1452 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal empty_243_fu_861_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_243_reg_1457 : STD_LOGIC_VECTOR (6 downto 0);
    signal l_n_fu_864_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_n_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1120_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal valuesToStore_reg_1467 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln75_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_1472 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln75_fu_872_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln75_reg_1478 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_9_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_9_reg_1491 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln75_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal initZero_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal initZero_reg_1501 : STD_LOGIC_VECTOR (0 downto 0);
    signal valuesToStore_1_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_1_reg_1507 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1124_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_reg_1514 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal mul_ln79_fu_924_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln79_reg_1522 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln85_fu_930_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln85_fu_930_p2 : signal is "no";
    signal add_ln85_reg_1527 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln87_fu_935_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln87_fu_935_p2 : signal is "no";
    signal add_ln87_reg_1532 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln98_1_fu_944_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal p_n_fu_959_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_reg_1545 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln98_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln98_fu_966_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln98_reg_1550 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln121_fu_972_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln121_reg_1555 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln128_fu_978_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln128_fu_978_p2 : signal is "no";
    signal add_ln128_reg_1560 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal add_ln108_fu_991_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln108_fu_991_p2 : signal is "no";
    signal add_ln108_reg_1570 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln109_2_fu_999_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln109_2_fu_999_p2 : signal is "no";
    signal add_ln109_2_reg_1580 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln102_fu_1003_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln102_reg_1585 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1149_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln106_1_reg_1590 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_fu_1155_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln110_reg_1595 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln141_fu_1006_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln141_reg_1600 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_1605 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln143_fu_1015_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln143_reg_1610 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_3_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_3_reg_1615 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln152_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state72_io : BOOLEAN;
    signal grp_updateParameter_float_16u_s_fu_514_ap_ready : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_ap_done : STD_LOGIC;
    signal ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_ready : STD_LOGIC;
    signal ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_done : STD_LOGIC;
    signal ap_block_state72_on_subcall_done : BOOLEAN;
    signal exitcond492_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state73_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state74_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state75_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state75_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal empty_234_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal bramWeight_load_reg_1647 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal icmp_ln157_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state80 : BOOLEAN;
    signal axi_write_addr_1_reg_1656 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state82_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state83_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state84_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state84_io : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal empty_236_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal bramBias_load_reg_1676 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state44 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state73 : STD_LOGIC;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state82 : STD_LOGIC;
    signal bramClasses_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramClasses_ce0 : STD_LOGIC;
    signal bramClasses_we0 : STD_LOGIC;
    signal bramClasses_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramClasses_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramMlpResults_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bramMlpResults_ce0 : STD_LOGIC;
    signal bramMlpResults_we0 : STD_LOGIC;
    signal bramMlpResults_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramMlpResults_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramMlpResults_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal bramMlpResults_ce1 : STD_LOGIC;
    signal bramMlpResults_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bramError0_ce0 : STD_LOGIC;
    signal bramError0_we0 : STD_LOGIC;
    signal bramError0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError0_ce1 : STD_LOGIC;
    signal bramError0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bramError1_ce0 : STD_LOGIC;
    signal bramError1_we0 : STD_LOGIC;
    signal bramError1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bramError1_ce1 : STD_LOGIC;
    signal bramError1_we1 : STD_LOGIC;
    signal bramError1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_initZero : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_idle : STD_LOGIC;
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_continue : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce0 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_we0 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce1 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_we1 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce0 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_we0 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce1 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_we1 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramWeight_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramWeight_ce0 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramWeight_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramWeight_we0 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramWeight_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramWeight_ce1 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramWeight_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramWeight_we1 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramBias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramBias_ce0 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramBias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramBias_we0 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramBias_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramBias_ce1 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_bramBias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_16u_s_fu_514_bramBias_we1 : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_ap_start : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_ap_idle : STD_LOGIC;
    signal grp_updateParameter_float_16u_s_fu_514_ap_continue : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_p_initZero : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_idle : STD_LOGIC;
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_continue : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_ap_start : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_ap_done : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_ap_idle : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_ap_ready : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_p_input_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyArray_float_16u_s_fu_550_p_input_ce0 : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_p_input_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyArray_float_16u_s_fu_550_p_input_ce1 : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_p_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyArray_float_16u_s_fu_550_p_output_ce0 : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_p_output_we0 : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_p_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copyArray_float_16u_s_fu_550_p_output_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyArray_float_16u_s_fu_550_p_output_ce1 : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_p_output_we1 : STD_LOGIC;
    signal grp_copyArray_float_16u_s_fu_550_p_output_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copyArray_float_16u_s_fu_550_size : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index45_phi_fu_394_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index39_phi_fu_406_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index33_phi_fu_418_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index27_phi_fu_430_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_232_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready : STD_LOGIC;
    signal ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done : STD_LOGIC;
    signal ap_block_state68_on_subcall_done : BOOLEAN;
    signal i_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_1_reg_459 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done : STD_LOGIC := '0';
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_block_state65_on_subcall_done : BOOLEAN;
    signal grp_updateParameter_float_16u_s_fu_514_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done : STD_LOGIC := '0';
    signal grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready : STD_LOGIC;
    signal ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done : STD_LOGIC;
    signal ap_block_state55_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done : STD_LOGIC := '0';
    signal grp_copyArray_float_16u_s_fu_550_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal loop_index45_cast_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index39_cast_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index33_cast_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index27_cast_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index21_cast_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_cast_fu_1106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_cast_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast3_cast_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_cast_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast9_cast_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast10_cast_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_235_fu_1067_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal ap_block_state89 : BOOLEAN;
    signal empty_237_fu_1111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp5_stage0_01001 : BOOLEAN;
    signal empty_224_fu_635_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_226_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_fu_568_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_1_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_fu_600_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal valuesToLoad_1_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast3_fu_654_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast_fu_704_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln71_1_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast2_fu_783_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul34_fu_828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_846_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln75_2_fu_891_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln150_1_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_1_fu_915_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln79_fu_924_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln98_fu_940_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln100_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1132_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln106_fu_983_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln106_fu_983_p2 : signal is "no";
    signal grp_fu_1139_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln143_fu_1015_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast9_fu_1031_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast4_fu_1076_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1115_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1124_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1124_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1139_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_1149_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1155_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (76 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;

    component BGD_computeHiddenGradient_float_16u_4u_16u_s IS
    port (
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        p_numberOutputsPrev : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weights_ce0 : OUT STD_LOGIC;
        p_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we0 : OUT STD_LOGIC;
        p_weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weights_ce1 : OUT STD_LOGIC;
        p_weights_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we1 : OUT STD_LOGIC;
        p_weights_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_latterError_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_latterError_ce0 : OUT STD_LOGIC;
        p_latterError_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_latterError_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_latterError_we0 : OUT STD_LOGIC;
        p_latterError_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_latterError_ce1 : OUT STD_LOGIC;
        p_latterError_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_latterError_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_latterError_we1 : OUT STD_LOGIC;
        p_outputCurrentLayer_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        p_outputCurrentLayer_ce0 : OUT STD_LOGIC;
        p_outputCurrentLayer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_outputCurrentLayer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_outputCurrentLayer_we0 : OUT STD_LOGIC;
        p_outputCurrentLayer_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        p_outputCurrentLayer_ce1 : OUT STD_LOGIC;
        p_outputCurrentLayer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_outputCurrentLayer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_outputCurrentLayer_we1 : OUT STD_LOGIC;
        p_outputCurrentLayer_offset : IN STD_LOGIC_VECTOR (14 downto 0);
        p_outputPrevLayer_offset : IN STD_LOGIC_VECTOR (14 downto 0);
        p_weightGradientAvg_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weightGradientAvg_ce0 : OUT STD_LOGIC;
        p_weightGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_we0 : OUT STD_LOGIC;
        p_weightGradientAvg_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weightGradientAvg_ce1 : OUT STD_LOGIC;
        p_weightGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_we1 : OUT STD_LOGIC;
        p_weightGradientAvg_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_biasGradientAvg_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_biasGradientAvg_ce0 : OUT STD_LOGIC;
        p_biasGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_we0 : OUT STD_LOGIC;
        p_biasGradientAvg_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_biasGradientAvg_ce1 : OUT STD_LOGIC;
        p_biasGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_we1 : OUT STD_LOGIC;
        p_biasGradientAvg_offset : IN STD_LOGIC_VECTOR (6 downto 0);
        p_error_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_error_ce0 : OUT STD_LOGIC;
        p_error_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_error_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_error_we0 : OUT STD_LOGIC;
        p_error_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_error_ce1 : OUT STD_LOGIC;
        p_error_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_error_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_error_we1 : OUT STD_LOGIC;
        p_initZero : IN STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        p_numberOutputsPrev_ap_vld : IN STD_LOGIC;
        p_weights_offset_ap_vld : IN STD_LOGIC;
        p_outputCurrentLayer_offset_ap_vld : IN STD_LOGIC;
        p_outputPrevLayer_offset_ap_vld : IN STD_LOGIC;
        p_weightGradientAvg_offset_ap_vld : IN STD_LOGIC;
        p_biasGradientAvg_offset_ap_vld : IN STD_LOGIC;
        p_initZero_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component BGD_updateParameter_float_16u_s IS
    port (
        p_learningRate : IN STD_LOGIC_VECTOR (31 downto 0);
        p_batchSize : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightSize : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasSize : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        bramWeightGradientAvg_ce0 : OUT STD_LOGIC;
        bramWeightGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_we0 : OUT STD_LOGIC;
        bramWeightGradientAvg_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        bramWeightGradientAvg_ce1 : OUT STD_LOGIC;
        bramWeightGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_we1 : OUT STD_LOGIC;
        bramBiasGradientAvg_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bramBiasGradientAvg_ce0 : OUT STD_LOGIC;
        bramBiasGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramBiasGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramBiasGradientAvg_we0 : OUT STD_LOGIC;
        bramBiasGradientAvg_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bramBiasGradientAvg_ce1 : OUT STD_LOGIC;
        bramBiasGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramBiasGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramBiasGradientAvg_we1 : OUT STD_LOGIC;
        bramWeight_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        bramWeight_ce0 : OUT STD_LOGIC;
        bramWeight_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramWeight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeight_we0 : OUT STD_LOGIC;
        bramWeight_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        bramWeight_ce1 : OUT STD_LOGIC;
        bramWeight_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramWeight_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeight_we1 : OUT STD_LOGIC;
        bramBias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bramBias_ce0 : OUT STD_LOGIC;
        bramBias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramBias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramBias_we0 : OUT STD_LOGIC;
        bramBias_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bramBias_ce1 : OUT STD_LOGIC;
        bramBias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramBias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramBias_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_learningRate_ap_vld : IN STD_LOGIC;
        p_batchSize_ap_vld : IN STD_LOGIC;
        p_weightSize_ap_vld : IN STD_LOGIC;
        p_biasSize_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component BGD_computeOutputGradient_float_16u_16u_s IS
    port (
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        p_results_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        p_results_ce0 : OUT STD_LOGIC;
        p_results_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_results_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_results_we0 : OUT STD_LOGIC;
        p_results_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        p_results_ce1 : OUT STD_LOGIC;
        p_results_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_results_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_results_we1 : OUT STD_LOGIC;
        p_results_offset : IN STD_LOGIC_VECTOR (14 downto 0);
        p_classes_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_classes_ce0 : OUT STD_LOGIC;
        p_classes_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_classes_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_classes_we0 : OUT STD_LOGIC;
        p_classes_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_classes_ce1 : OUT STD_LOGIC;
        p_classes_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_classes_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_classes_we1 : OUT STD_LOGIC;
        p_classes_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        p_outputPrevLayer_offset : IN STD_LOGIC_VECTOR (14 downto 0);
        p_weightGradientAvg_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weightGradientAvg_ce0 : OUT STD_LOGIC;
        p_weightGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_we0 : OUT STD_LOGIC;
        p_weightGradientAvg_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_weightGradientAvg_ce1 : OUT STD_LOGIC;
        p_weightGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_we1 : OUT STD_LOGIC;
        p_weightGradientAvg_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_biasGradientAvg_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_biasGradientAvg_ce0 : OUT STD_LOGIC;
        p_biasGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_we0 : OUT STD_LOGIC;
        p_biasGradientAvg_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_biasGradientAvg_ce1 : OUT STD_LOGIC;
        p_biasGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_we1 : OUT STD_LOGIC;
        p_biasGradientAvg_offset : IN STD_LOGIC_VECTOR (6 downto 0);
        p_error_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_error_ce0 : OUT STD_LOGIC;
        p_error_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_error_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_error_we0 : OUT STD_LOGIC;
        p_error_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_error_ce1 : OUT STD_LOGIC;
        p_error_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_error_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_error_we1 : OUT STD_LOGIC;
        p_initZero : IN STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        p_results_offset_ap_vld : IN STD_LOGIC;
        p_classes_offset_ap_vld : IN STD_LOGIC;
        p_outputPrevLayer_offset_ap_vld : IN STD_LOGIC;
        p_weightGradientAvg_offset_ap_vld : IN STD_LOGIC;
        p_biasGradientAvg_offset_ap_vld : IN STD_LOGIC;
        p_initZero_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component BGD_copyArray_float_16u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_input_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_input_ce0 : OUT STD_LOGIC;
        p_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_input_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_input_ce1 : OUT STD_LOGIC;
        p_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_output_ce0 : OUT STD_LOGIC;
        p_output_we0 : OUT STD_LOGIC;
        p_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_output_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        p_output_ce1 : OUT STD_LOGIC;
        p_output_we1 : OUT STD_LOGIC;
        p_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_uitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component BGD_mul_mul_14s_14s_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component BGD_mul_mul_15s_15s_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component BGD_ama_addmuladd_1s_15s_15s_15ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        din3 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component BGD_bramWeight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramBias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramBiasGradientAvg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramClasses IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramMlpResults IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramError0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramError1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axiMlpResultsInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiClassesInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiWeightInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiBiasInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiWeightOutput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiBiasOutput : OUT STD_LOGIC_VECTOR (63 downto 0);
        numberInputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberOutputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberLayers : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberNeurons : OUT STD_LOGIC_VECTOR (31 downto 0);
        loadParameters : OUT STD_LOGIC_VECTOR (31 downto 0);
        batchSize : OUT STD_LOGIC_VECTOR (31 downto 0);
        learningRate : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component BGD_axi_read_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component BGD_axi_write_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bramWeight_U : component BGD_bramWeight
    generic map (
        DataWidth => 32,
        AddressRange => 13568,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_address0,
        ce0 => bramWeight_ce0,
        we0 => bramWeight_we0,
        d0 => bramWeight_d0,
        q0 => bramWeight_q0,
        address1 => bramWeight_address1,
        ce1 => bramWeight_ce1,
        we1 => bramWeight_we1,
        d1 => grp_updateParameter_float_16u_s_fu_514_bramWeight_d1,
        q1 => bramWeight_q1);

    bramBias_U : component BGD_bramBias
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramBias_address0,
        ce0 => bramBias_ce0,
        we0 => bramBias_we0,
        d0 => bramBias_d0,
        q0 => bramBias_q0,
        address1 => grp_updateParameter_float_16u_s_fu_514_bramBias_address1,
        ce1 => bramBias_ce1,
        we1 => bramBias_we1,
        d1 => grp_updateParameter_float_16u_s_fu_514_bramBias_d1,
        q1 => bramBias_q1);

    bramWeightGradientAvg_U : component BGD_bramWeight
    generic map (
        DataWidth => 32,
        AddressRange => 13568,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeightGradientAvg_address0,
        ce0 => bramWeightGradientAvg_ce0,
        we0 => bramWeightGradientAvg_we0,
        d0 => bramWeightGradientAvg_d0,
        q0 => bramWeightGradientAvg_q0,
        address1 => bramWeightGradientAvg_address1,
        ce1 => bramWeightGradientAvg_ce1,
        we1 => bramWeightGradientAvg_we1,
        d1 => bramWeightGradientAvg_d1,
        q1 => bramWeightGradientAvg_q1);

    bramBiasGradientAvg_U : component BGD_bramBiasGradientAvg
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramBiasGradientAvg_address0,
        ce0 => bramBiasGradientAvg_ce0,
        we0 => bramBiasGradientAvg_we0,
        d0 => bramBiasGradientAvg_d0,
        q0 => bramBiasGradientAvg_q0,
        address1 => grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address1,
        ce1 => bramBiasGradientAvg_ce1,
        q1 => bramBiasGradientAvg_q1);

    control_s_axi_U : component BGD_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        axiMlpResultsInput => axiMlpResultsInput,
        axiClassesInput => axiClassesInput,
        axiWeightInput => axiWeightInput,
        axiBiasInput => axiBiasInput,
        axiWeightOutput => axiWeightOutput,
        axiBiasOutput => axiBiasOutput,
        numberInputs => numberInputs,
        numberOutputs => numberOutputs,
        numberLayers => numberLayers,
        numberNeurons => numberNeurons,
        loadParameters => loadParameters,
        batchSize => batchSize,
        learningRate => learningRate,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    axi_read_m_axi_U : component BGD_axi_read_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 128,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_READ_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_READ_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_READ_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_READ_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_READ_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_READ_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_READ_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_READ_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXI_READ_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_READ_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_READ_CACHE_VALUE)
    port map (
        AWVALID => m_axi_axi_read_AWVALID,
        AWREADY => m_axi_axi_read_AWREADY,
        AWADDR => m_axi_axi_read_AWADDR,
        AWID => m_axi_axi_read_AWID,
        AWLEN => m_axi_axi_read_AWLEN,
        AWSIZE => m_axi_axi_read_AWSIZE,
        AWBURST => m_axi_axi_read_AWBURST,
        AWLOCK => m_axi_axi_read_AWLOCK,
        AWCACHE => m_axi_axi_read_AWCACHE,
        AWPROT => m_axi_axi_read_AWPROT,
        AWQOS => m_axi_axi_read_AWQOS,
        AWREGION => m_axi_axi_read_AWREGION,
        AWUSER => m_axi_axi_read_AWUSER,
        WVALID => m_axi_axi_read_WVALID,
        WREADY => m_axi_axi_read_WREADY,
        WDATA => m_axi_axi_read_WDATA,
        WSTRB => m_axi_axi_read_WSTRB,
        WLAST => m_axi_axi_read_WLAST,
        WID => m_axi_axi_read_WID,
        WUSER => m_axi_axi_read_WUSER,
        ARVALID => m_axi_axi_read_ARVALID,
        ARREADY => m_axi_axi_read_ARREADY,
        ARADDR => m_axi_axi_read_ARADDR,
        ARID => m_axi_axi_read_ARID,
        ARLEN => m_axi_axi_read_ARLEN,
        ARSIZE => m_axi_axi_read_ARSIZE,
        ARBURST => m_axi_axi_read_ARBURST,
        ARLOCK => m_axi_axi_read_ARLOCK,
        ARCACHE => m_axi_axi_read_ARCACHE,
        ARPROT => m_axi_axi_read_ARPROT,
        ARQOS => m_axi_axi_read_ARQOS,
        ARREGION => m_axi_axi_read_ARREGION,
        ARUSER => m_axi_axi_read_ARUSER,
        RVALID => m_axi_axi_read_RVALID,
        RREADY => m_axi_axi_read_RREADY,
        RDATA => m_axi_axi_read_RDATA,
        RLAST => m_axi_axi_read_RLAST,
        RID => m_axi_axi_read_RID,
        RUSER => m_axi_axi_read_RUSER,
        RRESP => m_axi_axi_read_RRESP,
        BVALID => m_axi_axi_read_BVALID,
        BREADY => m_axi_axi_read_BREADY,
        BRESP => m_axi_axi_read_BRESP,
        BID => m_axi_axi_read_BID,
        BUSER => m_axi_axi_read_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => axi_read_ARVALID,
        I_ARREADY => axi_read_ARREADY,
        I_ARADDR => axi_read_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => axi_read_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => axi_read_RVALID,
        I_RREADY => axi_read_RREADY,
        I_RDATA => axi_read_RDATA,
        I_RID => axi_read_RID,
        I_RUSER => axi_read_RUSER,
        I_RRESP => axi_read_RRESP,
        I_RLAST => axi_read_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => axi_read_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => axi_read_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => axi_read_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => axi_read_BRESP,
        I_BID => axi_read_BID,
        I_BUSER => axi_read_BUSER);

    axi_write_m_axi_U : component BGD_axi_write_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_WRITE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_WRITE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_WRITE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_WRITE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_WRITE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_WRITE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_WRITE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_WRITE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXI_WRITE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_WRITE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_WRITE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_axi_write_AWVALID,
        AWREADY => m_axi_axi_write_AWREADY,
        AWADDR => m_axi_axi_write_AWADDR,
        AWID => m_axi_axi_write_AWID,
        AWLEN => m_axi_axi_write_AWLEN,
        AWSIZE => m_axi_axi_write_AWSIZE,
        AWBURST => m_axi_axi_write_AWBURST,
        AWLOCK => m_axi_axi_write_AWLOCK,
        AWCACHE => m_axi_axi_write_AWCACHE,
        AWPROT => m_axi_axi_write_AWPROT,
        AWQOS => m_axi_axi_write_AWQOS,
        AWREGION => m_axi_axi_write_AWREGION,
        AWUSER => m_axi_axi_write_AWUSER,
        WVALID => m_axi_axi_write_WVALID,
        WREADY => m_axi_axi_write_WREADY,
        WDATA => m_axi_axi_write_WDATA,
        WSTRB => m_axi_axi_write_WSTRB,
        WLAST => m_axi_axi_write_WLAST,
        WID => m_axi_axi_write_WID,
        WUSER => m_axi_axi_write_WUSER,
        ARVALID => m_axi_axi_write_ARVALID,
        ARREADY => m_axi_axi_write_ARREADY,
        ARADDR => m_axi_axi_write_ARADDR,
        ARID => m_axi_axi_write_ARID,
        ARLEN => m_axi_axi_write_ARLEN,
        ARSIZE => m_axi_axi_write_ARSIZE,
        ARBURST => m_axi_axi_write_ARBURST,
        ARLOCK => m_axi_axi_write_ARLOCK,
        ARCACHE => m_axi_axi_write_ARCACHE,
        ARPROT => m_axi_axi_write_ARPROT,
        ARQOS => m_axi_axi_write_ARQOS,
        ARREGION => m_axi_axi_write_ARREGION,
        ARUSER => m_axi_axi_write_ARUSER,
        RVALID => m_axi_axi_write_RVALID,
        RREADY => m_axi_axi_write_RREADY,
        RDATA => m_axi_axi_write_RDATA,
        RLAST => m_axi_axi_write_RLAST,
        RID => m_axi_axi_write_RID,
        RUSER => m_axi_axi_write_RUSER,
        RRESP => m_axi_axi_write_RRESP,
        BVALID => m_axi_axi_write_BVALID,
        BREADY => m_axi_axi_write_BREADY,
        BRESP => m_axi_axi_write_BRESP,
        BID => m_axi_axi_write_BID,
        BUSER => m_axi_axi_write_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => axi_write_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => axi_write_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => axi_write_RDATA,
        I_RID => axi_write_RID,
        I_RUSER => axi_write_RUSER,
        I_RRESP => axi_write_RRESP,
        I_RLAST => axi_write_RLAST,
        I_AWVALID => axi_write_AWVALID,
        I_AWREADY => axi_write_AWREADY,
        I_AWADDR => axi_write_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => axi_write_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => axi_write_WVALID,
        I_WREADY => axi_write_WREADY,
        I_WDATA => axi_write_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => axi_write_BVALID,
        I_BREADY => axi_write_BREADY,
        I_BRESP => axi_write_BRESP,
        I_BID => axi_write_BID,
        I_BUSER => axi_write_BUSER);

    bramClasses_U : component BGD_bramClasses
    generic map (
        DataWidth => 32,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramClasses_address0,
        ce0 => bramClasses_ce0,
        we0 => bramClasses_we0,
        d0 => bramClasses_d0,
        q0 => bramClasses_q0);

    bramMlpResults_U : component BGD_bramMlpResults
    generic map (
        DataWidth => 32,
        AddressRange => 17280,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramMlpResults_address0,
        ce0 => bramMlpResults_ce0,
        we0 => bramMlpResults_we0,
        d0 => bramMlpResults_d0,
        q0 => bramMlpResults_q0,
        address1 => bramMlpResults_address1,
        ce1 => bramMlpResults_ce1,
        q1 => bramMlpResults_q1);

    bramError0_U : component BGD_bramError0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramError0_address0,
        ce0 => bramError0_ce0,
        we0 => bramError0_we0,
        d0 => bramError0_d0,
        q0 => bramError0_q0,
        address1 => grp_copyArray_float_16u_s_fu_550_p_input_address1,
        ce1 => bramError0_ce1,
        q1 => bramError0_q1);

    bramError1_U : component BGD_bramError1
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramError1_address0,
        ce0 => bramError1_ce0,
        we0 => bramError1_we0,
        d0 => grp_copyArray_float_16u_s_fu_550_p_output_d0,
        q0 => bramError1_q0,
        address1 => bramError1_address1,
        ce1 => bramError1_ce1,
        we1 => bramError1_we1,
        d1 => grp_copyArray_float_16u_s_fu_550_p_output_d1,
        q1 => bramError1_q1);

    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490 : component BGD_computeHiddenGradient_float_16u_4u_16u_s
    port map (
        p_n => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n,
        p_k => numberNeurons_read_reg_1220,
        p_numberOutputsPrev => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev,
        p_weights_address0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address0,
        p_weights_ce0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce0,
        p_weights_d0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_d0,
        p_weights_q0 => bramWeight_q0,
        p_weights_we0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_we0,
        p_weights_address1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address1,
        p_weights_ce1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce1,
        p_weights_d1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_d1,
        p_weights_q1 => bramWeight_q1,
        p_weights_we1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_we1,
        p_weights_offset => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset,
        p_latterError_address0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address0,
        p_latterError_ce0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce0,
        p_latterError_d0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_d0,
        p_latterError_q0 => bramError1_q0,
        p_latterError_we0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_we0,
        p_latterError_address1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address1,
        p_latterError_ce1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce1,
        p_latterError_d1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_d1,
        p_latterError_q1 => bramError1_q1,
        p_latterError_we1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_we1,
        p_outputCurrentLayer_address0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address0,
        p_outputCurrentLayer_ce0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce0,
        p_outputCurrentLayer_d0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_d0,
        p_outputCurrentLayer_q0 => bramMlpResults_q0,
        p_outputCurrentLayer_we0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_we0,
        p_outputCurrentLayer_address1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address1,
        p_outputCurrentLayer_ce1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce1,
        p_outputCurrentLayer_d1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_d1,
        p_outputCurrentLayer_q1 => bramMlpResults_q1,
        p_outputCurrentLayer_we1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_we1,
        p_outputCurrentLayer_offset => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset,
        p_outputPrevLayer_offset => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset,
        p_weightGradientAvg_address0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address0,
        p_weightGradientAvg_ce0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce0,
        p_weightGradientAvg_d0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d0,
        p_weightGradientAvg_q0 => bramWeightGradientAvg_q0,
        p_weightGradientAvg_we0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we0,
        p_weightGradientAvg_address1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address1,
        p_weightGradientAvg_ce1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce1,
        p_weightGradientAvg_d1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d1,
        p_weightGradientAvg_q1 => bramWeightGradientAvg_q1,
        p_weightGradientAvg_we1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we1,
        p_weightGradientAvg_offset => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset,
        p_biasGradientAvg_address0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address0,
        p_biasGradientAvg_ce0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce0,
        p_biasGradientAvg_d0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d0,
        p_biasGradientAvg_q0 => bramBiasGradientAvg_q0,
        p_biasGradientAvg_we0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we0,
        p_biasGradientAvg_address1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address1,
        p_biasGradientAvg_ce1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce1,
        p_biasGradientAvg_d1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d1,
        p_biasGradientAvg_q1 => ap_const_lv32_0,
        p_biasGradientAvg_we1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we1,
        p_biasGradientAvg_offset => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset,
        p_error_address0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address0,
        p_error_ce0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce0,
        p_error_d0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d0,
        p_error_q0 => ap_const_lv32_0,
        p_error_we0 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we0,
        p_error_address1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address1,
        p_error_ce1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce1,
        p_error_d1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d1,
        p_error_q1 => ap_const_lv32_0,
        p_error_we1 => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we1,
        p_initZero => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_initZero,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        p_numberOutputsPrev_ap_vld => ap_const_logic_1,
        p_weights_offset_ap_vld => ap_const_logic_1,
        p_outputCurrentLayer_offset_ap_vld => ap_const_logic_1,
        p_outputPrevLayer_offset_ap_vld => ap_const_logic_1,
        p_weightGradientAvg_offset_ap_vld => ap_const_logic_1,
        p_biasGradientAvg_offset_ap_vld => ap_const_logic_1,
        p_initZero_ap_vld => ap_const_logic_1,
        ap_start => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start,
        ap_done => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done,
        ap_ready => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready,
        ap_idle => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_idle,
        ap_continue => grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_continue);

    grp_updateParameter_float_16u_s_fu_514 : component BGD_updateParameter_float_16u_s
    port map (
        p_learningRate => bitcast_ln141_reg_1600,
        p_batchSize => conv_reg_1605,
        p_weightSize => mul_ln143_reg_1610,
        p_biasSize => valuesToStore_3_reg_1615,
        bramWeightGradientAvg_address0 => grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address0,
        bramWeightGradientAvg_ce0 => grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce0,
        bramWeightGradientAvg_d0 => grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_d0,
        bramWeightGradientAvg_q0 => bramWeightGradientAvg_q0,
        bramWeightGradientAvg_we0 => grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_we0,
        bramWeightGradientAvg_address1 => grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address1,
        bramWeightGradientAvg_ce1 => grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce1,
        bramWeightGradientAvg_d1 => grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_d1,
        bramWeightGradientAvg_q1 => bramWeightGradientAvg_q1,
        bramWeightGradientAvg_we1 => grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_we1,
        bramBiasGradientAvg_address0 => grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address0,
        bramBiasGradientAvg_ce0 => grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce0,
        bramBiasGradientAvg_d0 => grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_d0,
        bramBiasGradientAvg_q0 => bramBiasGradientAvg_q0,
        bramBiasGradientAvg_we0 => grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_we0,
        bramBiasGradientAvg_address1 => grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address1,
        bramBiasGradientAvg_ce1 => grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce1,
        bramBiasGradientAvg_d1 => grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_d1,
        bramBiasGradientAvg_q1 => bramBiasGradientAvg_q1,
        bramBiasGradientAvg_we1 => grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_we1,
        bramWeight_address0 => grp_updateParameter_float_16u_s_fu_514_bramWeight_address0,
        bramWeight_ce0 => grp_updateParameter_float_16u_s_fu_514_bramWeight_ce0,
        bramWeight_d0 => grp_updateParameter_float_16u_s_fu_514_bramWeight_d0,
        bramWeight_q0 => bramWeight_q0,
        bramWeight_we0 => grp_updateParameter_float_16u_s_fu_514_bramWeight_we0,
        bramWeight_address1 => grp_updateParameter_float_16u_s_fu_514_bramWeight_address1,
        bramWeight_ce1 => grp_updateParameter_float_16u_s_fu_514_bramWeight_ce1,
        bramWeight_d1 => grp_updateParameter_float_16u_s_fu_514_bramWeight_d1,
        bramWeight_q1 => bramWeight_q1,
        bramWeight_we1 => grp_updateParameter_float_16u_s_fu_514_bramWeight_we1,
        bramBias_address0 => grp_updateParameter_float_16u_s_fu_514_bramBias_address0,
        bramBias_ce0 => grp_updateParameter_float_16u_s_fu_514_bramBias_ce0,
        bramBias_d0 => grp_updateParameter_float_16u_s_fu_514_bramBias_d0,
        bramBias_q0 => bramBias_q0,
        bramBias_we0 => grp_updateParameter_float_16u_s_fu_514_bramBias_we0,
        bramBias_address1 => grp_updateParameter_float_16u_s_fu_514_bramBias_address1,
        bramBias_ce1 => grp_updateParameter_float_16u_s_fu_514_bramBias_ce1,
        bramBias_d1 => grp_updateParameter_float_16u_s_fu_514_bramBias_d1,
        bramBias_q1 => bramBias_q1,
        bramBias_we1 => grp_updateParameter_float_16u_s_fu_514_bramBias_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_learningRate_ap_vld => ap_const_logic_1,
        p_batchSize_ap_vld => ap_const_logic_1,
        p_weightSize_ap_vld => ap_const_logic_1,
        p_biasSize_ap_vld => ap_const_logic_1,
        ap_start => grp_updateParameter_float_16u_s_fu_514_ap_start,
        ap_done => grp_updateParameter_float_16u_s_fu_514_ap_done,
        ap_ready => grp_updateParameter_float_16u_s_fu_514_ap_ready,
        ap_idle => grp_updateParameter_float_16u_s_fu_514_ap_idle,
        ap_continue => grp_updateParameter_float_16u_s_fu_514_ap_continue);

    grp_computeOutputGradient_float_16u_16u_s_fu_530 : component BGD_computeOutputGradient_float_16u_16u_s
    port map (
        p_n => empty_232_reg_438,
        p_k => numberNeurons_read_reg_1220,
        p_results_address0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address0,
        p_results_ce0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce0,
        p_results_d0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_d0,
        p_results_q0 => bramMlpResults_q0,
        p_results_we0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_we0,
        p_results_address1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address1,
        p_results_ce1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce1,
        p_results_d1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_d1,
        p_results_q1 => bramMlpResults_q1,
        p_results_we1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_we1,
        p_results_offset => add_ln85_reg_1527,
        p_classes_address0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address0,
        p_classes_ce0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce0,
        p_classes_d0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_d0,
        p_classes_q0 => bramClasses_q0,
        p_classes_we0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_we0,
        p_classes_address1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address1,
        p_classes_ce1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce1,
        p_classes_d1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_d1,
        p_classes_q1 => ap_const_lv32_0,
        p_classes_we1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_we1,
        p_classes_offset => mul_ln79_reg_1522,
        p_outputPrevLayer_offset => add_ln87_reg_1532,
        p_weightGradientAvg_address0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address0,
        p_weightGradientAvg_ce0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce0,
        p_weightGradientAvg_d0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d0,
        p_weightGradientAvg_q0 => bramWeightGradientAvg_q0,
        p_weightGradientAvg_we0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we0,
        p_weightGradientAvg_address1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address1,
        p_weightGradientAvg_ce1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce1,
        p_weightGradientAvg_d1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d1,
        p_weightGradientAvg_q1 => bramWeightGradientAvg_q1,
        p_weightGradientAvg_we1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we1,
        p_weightGradientAvg_offset => mul41_reg_1452,
        p_biasGradientAvg_address0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address0,
        p_biasGradientAvg_ce0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce0,
        p_biasGradientAvg_d0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d0,
        p_biasGradientAvg_q0 => bramBiasGradientAvg_q0,
        p_biasGradientAvg_we0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we0,
        p_biasGradientAvg_address1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address1,
        p_biasGradientAvg_ce1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce1,
        p_biasGradientAvg_d1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d1,
        p_biasGradientAvg_q1 => ap_const_lv32_0,
        p_biasGradientAvg_we1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we1,
        p_biasGradientAvg_offset => empty_243_reg_1457,
        p_error_address0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address0,
        p_error_ce0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce0,
        p_error_d0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d0,
        p_error_q0 => ap_const_lv32_0,
        p_error_we0 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we0,
        p_error_address1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address1,
        p_error_ce1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce1,
        p_error_d1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d1,
        p_error_q1 => ap_const_lv32_0,
        p_error_we1 => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we1,
        p_initZero => grp_computeOutputGradient_float_16u_16u_s_fu_530_p_initZero,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        p_results_offset_ap_vld => ap_const_logic_1,
        p_classes_offset_ap_vld => ap_const_logic_1,
        p_outputPrevLayer_offset_ap_vld => ap_const_logic_1,
        p_weightGradientAvg_offset_ap_vld => ap_const_logic_1,
        p_biasGradientAvg_offset_ap_vld => ap_const_logic_1,
        p_initZero_ap_vld => ap_const_logic_1,
        ap_start => grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start,
        ap_done => grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done,
        ap_ready => grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready,
        ap_idle => grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_idle,
        ap_continue => grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_continue);

    grp_copyArray_float_16u_s_fu_550 : component BGD_copyArray_float_16u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copyArray_float_16u_s_fu_550_ap_start,
        ap_done => grp_copyArray_float_16u_s_fu_550_ap_done,
        ap_idle => grp_copyArray_float_16u_s_fu_550_ap_idle,
        ap_ready => grp_copyArray_float_16u_s_fu_550_ap_ready,
        p_input_address0 => grp_copyArray_float_16u_s_fu_550_p_input_address0,
        p_input_ce0 => grp_copyArray_float_16u_s_fu_550_p_input_ce0,
        p_input_q0 => bramError0_q0,
        p_input_address1 => grp_copyArray_float_16u_s_fu_550_p_input_address1,
        p_input_ce1 => grp_copyArray_float_16u_s_fu_550_p_input_ce1,
        p_input_q1 => bramError0_q1,
        p_output_address0 => grp_copyArray_float_16u_s_fu_550_p_output_address0,
        p_output_ce0 => grp_copyArray_float_16u_s_fu_550_p_output_ce0,
        p_output_we0 => grp_copyArray_float_16u_s_fu_550_p_output_we0,
        p_output_d0 => grp_copyArray_float_16u_s_fu_550_p_output_d0,
        p_output_address1 => grp_copyArray_float_16u_s_fu_550_p_output_address1,
        p_output_ce1 => grp_copyArray_float_16u_s_fu_550_p_output_ce1,
        p_output_we1 => grp_copyArray_float_16u_s_fu_550_p_output_we1,
        p_output_d1 => grp_copyArray_float_16u_s_fu_550_p_output_d1,
        size => grp_copyArray_float_16u_s_fu_550_size);

    uitofp_32s_32_4_no_dsp_1_U553 : component BGD_uitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => batchSize_read_reg_1311,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p1);

    mul_32s_32s_32_1_1_U554 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons,
        din1 => mul_ln55_fu_574_p1,
        dout => mul_ln55_fu_574_p2);

    mul_32s_32s_32_1_1_U555 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1220,
        din1 => valuesToLoad_fu_589_p1,
        dout => valuesToLoad_fu_589_p2);

    mul_32s_32s_32_1_1_U556 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberLayers_read_reg_1238,
        din1 => numberNeurons_read_reg_1220,
        dout => valuesToLoad_1_fu_639_p2);

    mul_32s_32s_32_1_1_U557 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => batchSize,
        din1 => numberOutputs_read_reg_1195,
        dout => mul_ln67_fu_693_p2);

    mul_32s_32s_32_1_1_U558 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1220,
        din1 => numberLayers_read_reg_1238,
        dout => valuesToStore_2_fu_743_p2);

    mul_32s_32s_32_1_1_U559 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => batchSize_read_reg_1311,
        din1 => mul_ln71_1_fu_760_p1,
        dout => mul_ln71_1_fu_760_p2);

    mul_32s_32s_32_1_1_U560 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1220,
        din1 => mul34_fu_828_p1,
        dout => mul34_fu_828_p2);

    mul_32s_32s_32_1_1_U561 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1220,
        din1 => valuesToStore_1_fu_915_p1,
        dout => valuesToStore_1_fu_915_p2);

    mul_9s_9s_9_1_1_U562 : component BGD_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln79_fu_924_p0,
        din1 => trunc_ln75_reg_1478,
        dout => mul_ln79_fu_924_p2);

    mul_32s_32s_32_1_1_U563 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1220,
        din1 => mul_ln143_fu_1015_p1,
        dout => mul_ln143_fu_1015_p2);

    mul_mul_14s_14s_14_4_1_U564 : component BGD_mul_mul_14s_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1115_p0,
        din1 => trunc_ln71_3_reg_1393,
        ce => ap_const_logic_1,
        dout => grp_fu_1115_p2);

    mul_mul_14s_14s_14_4_1_U565 : component BGD_mul_mul_14s_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln71_3_reg_1393,
        din1 => trunc_ln71_1_reg_1382,
        ce => ap_const_logic_1,
        dout => grp_fu_1120_p2);

    mul_mul_15s_15s_15_4_1_U566 : component BGD_mul_mul_15s_15s_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1124_p0,
        din1 => grp_fu_1124_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1124_p2);

    mul_mul_15s_15s_15_4_1_U567 : component BGD_mul_mul_15s_15s_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln98_1_fu_944_p1,
        din1 => trunc_ln71_2_reg_1387,
        ce => ap_const_logic_1,
        dout => grp_fu_1132_p2);

    ama_addmuladd_1s_15s_15s_15ns_15_4_1_U568 : component BGD_ama_addmuladd_1s_15s_15s_15ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 1,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        din3_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1139_p0,
        din1 => trunc_ln98_1_fu_944_p1,
        din2 => trunc_ln71_2_reg_1387,
        din3 => trunc_ln71_reg_1375,
        ce => ap_const_logic_1,
        dout => grp_fu_1139_p4);

    mul_mul_14s_14s_14_4_1_U569 : component BGD_mul_mul_14s_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1149_p0,
        din1 => trunc_ln71_3_reg_1393,
        ce => ap_const_logic_1,
        dout => grp_fu_1149_p2);

    mul_mul_14s_14s_14_4_1_U570 : component BGD_mul_mul_14s_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1155_p0,
        din1 => trunc_ln71_3_reg_1393,
        ce => ap_const_logic_1,
        dout => grp_fu_1155_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state32);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state44);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state73))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state73)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state73);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state82))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state82)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state82);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state65_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state68_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state68)))) then 
                    ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done <= ap_const_logic_0;
                elsif ((grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state65_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state68_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state68)))) then 
                    ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready <= ap_const_logic_0;
                elsif ((grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state55_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                    ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done <= ap_const_logic_0;
                elsif ((grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state55_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                    ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready <= ap_const_logic_0;
                elsif ((grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done <= ap_const_logic_0;
            else
                if ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                    ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done <= ap_const_logic_0;
                elsif ((grp_updateParameter_float_16u_s_fu_514_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready <= ap_const_logic_0;
            else
                if ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                    ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready <= ap_const_logic_0;
                elsif ((grp_updateParameter_float_16u_s_fu_514_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln98_fu_948_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state68) and (ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready = ap_const_logic_0)))) then 
                    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready = ap_const_logic_1)) then 
                    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state54) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready = ap_const_logic_0)))) then 
                    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready = ap_const_logic_1)) then 
                    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_copyArray_float_16u_s_fu_550_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copyArray_float_16u_s_fu_550_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                    grp_copyArray_float_16u_s_fu_550_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copyArray_float_16u_s_fu_550_ap_ready = ap_const_logic_1)) then 
                    grp_copyArray_float_16u_s_fu_550_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateParameter_float_16u_s_fu_514_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_updateParameter_float_16u_s_fu_514_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state71) or ((ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state72)))) then 
                    grp_updateParameter_float_16u_s_fu_514_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateParameter_float_16u_s_fu_514_ap_ready = ap_const_logic_1)) then 
                    grp_updateParameter_float_16u_s_fu_514_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_232_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state68_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
                empty_232_reg_438 <= select_ln121_reg_1555;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                empty_232_reg_438 <= numberOutputs_read_reg_1195;
            end if; 
        end if;
    end process;

    i_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state68_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
                i_reg_448 <= i_9_reg_1491;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                i_reg_448 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    layer_1_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_copyArray_float_16u_s_fu_550_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                    layer_1_reg_459 <= add_ln98_reg_1550;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    layer_1_reg_459 <= zext_ln75_reg_1472;
                end if;
            end if; 
        end if;
    end process;

    loop_index21_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                loop_index21_reg_468 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (exitcond492_fu_1051_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                loop_index21_reg_468 <= empty_234_fu_1056_p2;
            end if; 
        end if;
    end process;

    loop_index27_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                loop_index27_reg_426 <= ap_const_lv32_0;
            elsif (((exitcond516_reg_1407 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                loop_index27_reg_426 <= empty_230_reg_1411;
            end if; 
        end if;
    end process;

    loop_index33_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                loop_index33_reg_414 <= ap_const_lv32_0;
            elsif (((exitcond527_reg_1334 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                loop_index33_reg_414 <= empty_228_reg_1338;
            end if; 
        end if;
    end process;

    loop_index39_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                loop_index39_reg_402 <= ap_const_lv32_0;
            elsif (((exitcond538_reg_1297 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                loop_index39_reg_402 <= empty_225_reg_1301;
            end if; 
        end if;
    end process;

    loop_index45_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                loop_index45_reg_390 <= ap_const_lv32_0;
            elsif (((exitcond549_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                loop_index45_reg_390 <= empty_223_reg_1271;
            end if; 
        end if;
    end process;

    loop_index_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                loop_index_reg_479 <= ap_const_lv32_0;
            elsif (((exitcond1_fu_1095_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
                loop_index_reg_479 <= empty_236_fu_1100_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                add35_reg_1431 <= add35_fu_833_p2;
                empty_242_reg_1441 <= empty_242_fu_842_p1;
                icmp_reg_1446 <= icmp_fu_855_p2;
                layer_reg_1421 <= layer_fu_823_p2;
                mul34_reg_1426 <= mul34_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                add_ln108_reg_1570 <= add_ln108_fu_991_p2;
                add_ln109_2_reg_1580 <= add_ln109_2_fu_999_p2;
                trunc_ln102_reg_1585 <= trunc_ln102_fu_1003_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_948_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                add_ln128_reg_1560 <= add_ln128_fu_978_p2;
                select_ln121_reg_1555 <= select_ln121_fu_972_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                add_ln71_reg_1354 <= add_ln71_fu_747_p2;
                trunc_ln71_4_reg_1359 <= trunc_ln71_4_fu_752_p1;
                valuesToStore_2_reg_1348 <= valuesToStore_2_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                add_ln85_reg_1527 <= add_ln85_fu_930_p2;
                add_ln87_reg_1532 <= add_ln87_fu_935_p2;
                mul_ln78_reg_1514 <= grp_fu_1124_p2;
                mul_ln79_reg_1522 <= mul_ln79_fu_924_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_948_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                add_ln98_reg_1550 <= add_ln98_fu_966_p2;
                p_n_reg_1545 <= p_n_fu_959_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                axiBiasInput_read_reg_1171 <= axiBiasInput;
                axiBiasOutput_read_reg_1161 <= axiBiasOutput;
                axiClassesInput_read_reg_1181 <= axiClassesInput;
                axiMlpResultsInput_read_reg_1186 <= axiMlpResultsInput;
                axiWeightInput_read_reg_1176 <= axiWeightInput;
                axiWeightOutput_read_reg_1166 <= axiWeightOutput;
                numberInputs_read_reg_1209 <= numberInputs;
                numberLayers_read_reg_1238 <= numberLayers;
                numberNeurons_read_reg_1220 <= numberNeurons;
                numberOutputs_read_reg_1195 <= numberOutputs;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond538_reg_1297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                axi_read_addr_1_read_reg_1306 <= axi_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                axi_read_addr_1_reg_1291 <= p_cast3_cast_fu_663_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond527_reg_1334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                axi_read_addr_2_read_reg_1343 <= axi_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_698_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                axi_read_addr_2_reg_1328 <= p_cast_cast_fu_713_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond516_reg_1407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                axi_read_addr_3_read_reg_1416 <= axi_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond549_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                axi_read_addr_read_reg_1276 <= axi_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_594_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                axi_read_addr_reg_1261 <= p_cast1_cast_fu_609_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln152_reg_1623 = ap_const_lv1_0))) and (icmp_ln157_fu_1071_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                axi_write_addr_1_reg_1656 <= p_cast10_cast_fu_1085_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                batchSize_read_reg_1311 <= batchSize;
                mul_ln67_reg_1318 <= mul_ln67_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                bitcast_ln141_reg_1600 <= bitcast_ln141_fu_1006_p1;
                conv_reg_1605 <= grp_fu_558_p1;
                icmp_ln152_reg_1623 <= icmp_ln152_fu_1026_p2;
                mul_ln143_reg_1610 <= mul_ln143_fu_1015_p2;
                valuesToStore_3_reg_1615 <= valuesToStore_3_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1662 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then
                bramBias_load_reg_1676 <= bramBias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (exitcond492_reg_1633 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                bramWeight_load_reg_1647 <= bramWeight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_223_reg_1271 <= empty_223_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_225_reg_1301 <= empty_225_fu_678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                empty_228_reg_1338 <= empty_228_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                empty_230_reg_1411 <= empty_230_fu_808_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                empty_243_reg_1457 <= empty_243_fu_861_p1;
                l_n_reg_1462 <= l_n_fu_864_p3;
                mul41_reg_1452 <= grp_fu_1115_p2;
                valuesToStore_reg_1467 <= grp_fu_1120_p2;
                    zext_ln75_reg_1472(31 downto 0) <= zext_ln75_fu_869_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                exitcond1_reg_1662 <= exitcond1_fu_1095_p2;
                exitcond1_reg_1662_pp5_iter1_reg <= exitcond1_reg_1662;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                exitcond492_reg_1633 <= exitcond492_fu_1051_p2;
                exitcond492_reg_1633_pp4_iter1_reg <= exitcond492_reg_1633;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond516_reg_1407 <= exitcond516_fu_803_p2;
                exitcond516_reg_1407_pp3_iter1_reg <= exitcond516_reg_1407;
                loop_index27_reg_426_pp3_iter1_reg <= loop_index27_reg_426;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond527_reg_1334 <= exitcond527_fu_723_p2;
                exitcond527_reg_1334_pp2_iter1_reg <= exitcond527_reg_1334;
                loop_index33_reg_414_pp2_iter1_reg <= loop_index33_reg_414;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond538_reg_1297 <= exitcond538_fu_673_p2;
                exitcond538_reg_1297_pp1_iter1_reg <= exitcond538_reg_1297;
                loop_index39_reg_402_pp1_iter1_reg <= loop_index39_reg_402;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond549_reg_1267 <= exitcond549_fu_619_p2;
                exitcond549_reg_1267_pp0_iter1_reg <= exitcond549_reg_1267;
                loop_index45_reg_390_pp0_iter1_reg <= loop_index45_reg_390;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                i_9_reg_1491 <= i_9_fu_885_p2;
                trunc_ln75_reg_1478 <= trunc_ln75_fu_872_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln152_reg_1623 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                icmp_ln157_reg_1652 <= icmp_ln157_fu_1071_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                icmp_ln68_reg_1371 <= icmp_ln68_fu_765_p2;
                mul_ln71_1_reg_1365 <= mul_ln71_1_fu_760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_880_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                initZero_reg_1501 <= initZero_fu_900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                mul_ln106_1_reg_1590 <= grp_fu_1149_p2;
                mul_ln110_reg_1595 <= grp_fu_1155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln50_fu_562_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln55_reg_1246 <= mul_ln55_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                trunc_ln71_1_reg_1382 <= trunc_ln71_1_fu_774_p1;
                trunc_ln71_2_reg_1387 <= trunc_ln71_2_fu_777_p1;
                trunc_ln71_3_reg_1393 <= trunc_ln71_3_fu_780_p1;
                trunc_ln71_reg_1375 <= trunc_ln71_fu_771_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                valuesToLoad_2_reg_1281 <= valuesToLoad_2_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                valuesToLoad_reg_1251 <= valuesToLoad_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_880_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                valuesToStore_1_reg_1507 <= valuesToStore_1_fu_915_p2;
            end if;
        end if;
    end process;
    zext_ln75_reg_1472(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_CS_fsm_state25, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_CS_fsm_state37, icmp_ln68_reg_1371, ap_enable_reg_pp1_iter1, ap_CS_fsm_state14, ap_CS_fsm_state72, icmp_ln152_reg_1623, ap_enable_reg_pp4_iter2, ap_CS_fsm_state80, ap_enable_reg_pp5_iter2, ap_CS_fsm_state89, icmp_ln157_reg_1652, ap_CS_fsm_state81, axi_read_ARREADY, axi_write_AWREADY, axi_write_BVALID, icmp_ln50_fu_562_p2, ap_CS_fsm_state2, icmp_ln58_fu_594_p2, exitcond549_fu_619_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, icmp_ln63_fu_648_p2, exitcond538_fu_673_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state24, icmp_ln67_fu_698_p2, exitcond527_fu_723_p2, ap_enable_reg_pp2_iter0, ap_block_state37_io, exitcond516_fu_803_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state51, icmp_ln75_fu_880_p2, ap_CS_fsm_state58, icmp_ln98_fu_948_p2, ap_block_state72_io, ap_block_state72_on_subcall_done, exitcond492_fu_1051_p2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, icmp_ln157_fu_1071_p2, exitcond1_fu_1095_p2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, grp_copyArray_float_16u_s_fu_550_ap_done, ap_CS_fsm_state68, ap_block_state68_on_subcall_done, ap_CS_fsm_state57, ap_CS_fsm_state67, ap_CS_fsm_state65, ap_block_state65_on_subcall_done, ap_CS_fsm_state55, ap_block_state55_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln50_fu_562_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln50_fu_562_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln58_fu_594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond549_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond549_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln63_fu_648_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond538_fu_673_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond538_fu_673_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln67_fu_698_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond527_fu_723_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond527_fu_723_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln68_reg_1371 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                elsif (((icmp_ln68_reg_1371 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond516_fu_803_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond516_fu_803_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((icmp_ln75_fu_880_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((ap_const_boolean_0 = ap_block_state55_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (grp_copyArray_float_16u_s_fu_550_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((icmp_ln98_fu_948_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((ap_const_boolean_0 = ap_block_state65_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (grp_copyArray_float_16u_s_fu_550_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                if (((ap_const_boolean_0 = ap_block_state68_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (icmp_ln152_reg_1623 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (exitcond492_fu_1051_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (exitcond492_fu_1051_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln152_reg_1623 = ap_const_lv1_0))) and (icmp_ln157_fu_1071_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                elsif ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln152_reg_1623 = ap_const_lv1_0))) and (icmp_ln157_fu_1071_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((exitcond1_fu_1095_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0)) or ((exitcond1_fu_1095_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln157_reg_1652 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add35_fu_833_p2 <= std_logic_vector(unsigned(numberInputs_read_reg_1209) + unsigned(mul34_fu_828_p2));
    add_ln106_fu_983_p2 <= std_logic_vector(signed(grp_fu_1132_p2) + signed(trunc_ln71_reg_1375));
    add_ln108_fu_991_p2 <= std_logic_vector(unsigned(add_ln106_fu_983_p2) + unsigned(mul_ln78_reg_1514));
    add_ln109_2_fu_999_p2 <= std_logic_vector(signed(grp_fu_1139_p4) + signed(mul_ln78_reg_1514));
    add_ln128_fu_978_p2 <= std_logic_vector(signed(mul_ln78_reg_1514) + signed(trunc_ln71_reg_1375));
    add_ln150_1_fu_906_p2 <= std_logic_vector(signed(numberOutputs_read_reg_1195) + signed(mul34_reg_1426));
    add_ln55_fu_568_p0 <= numberLayers;
    add_ln56_1_fu_580_p2 <= std_logic_vector(signed(numberOutputs_read_reg_1195) + signed(mul_ln55_reg_1246));
    add_ln71_fu_747_p2 <= std_logic_vector(unsigned(numberInputs_read_reg_1209) + unsigned(valuesToStore_2_fu_743_p2));
    add_ln85_fu_930_p2 <= std_logic_vector(unsigned(trunc_ln71_4_reg_1359) + unsigned(grp_fu_1124_p2));
    add_ln87_fu_935_p2 <= std_logic_vector(unsigned(empty_242_reg_1441) + unsigned(grp_fu_1124_p2));
    add_ln98_fu_966_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFFFFFFFFFF) + signed(layer_1_reg_459));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(37);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(64);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(71);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(26);
    ap_CS_fsm_state35 <= ap_CS_fsm(28);
    ap_CS_fsm_state36 <= ap_CS_fsm(29);
    ap_CS_fsm_state37 <= ap_CS_fsm(30);
    ap_CS_fsm_state43 <= ap_CS_fsm(36);
    ap_CS_fsm_state47 <= ap_CS_fsm(38);
    ap_CS_fsm_state50 <= ap_CS_fsm(41);
    ap_CS_fsm_state51 <= ap_CS_fsm(42);
    ap_CS_fsm_state54 <= ap_CS_fsm(45);
    ap_CS_fsm_state55 <= ap_CS_fsm(46);
    ap_CS_fsm_state56 <= ap_CS_fsm(47);
    ap_CS_fsm_state57 <= ap_CS_fsm(48);
    ap_CS_fsm_state58 <= ap_CS_fsm(49);
    ap_CS_fsm_state60 <= ap_CS_fsm(51);
    ap_CS_fsm_state61 <= ap_CS_fsm(52);
    ap_CS_fsm_state64 <= ap_CS_fsm(55);
    ap_CS_fsm_state65 <= ap_CS_fsm(56);
    ap_CS_fsm_state66 <= ap_CS_fsm(57);
    ap_CS_fsm_state67 <= ap_CS_fsm(58);
    ap_CS_fsm_state68 <= ap_CS_fsm(59);
    ap_CS_fsm_state71 <= ap_CS_fsm(62);
    ap_CS_fsm_state72 <= ap_CS_fsm(63);
    ap_CS_fsm_state80 <= ap_CS_fsm(69);
    ap_CS_fsm_state81 <= ap_CS_fsm(70);
    ap_CS_fsm_state89 <= ap_CS_fsm(76);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond549_reg_1267, axi_read_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond549_reg_1267 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond549_reg_1267, axi_read_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond549_reg_1267 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond538_reg_1297, axi_read_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond538_reg_1297 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond538_reg_1297, axi_read_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond538_reg_1297 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond527_reg_1334, axi_read_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond527_reg_1334 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond527_reg_1334, axi_read_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond527_reg_1334 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond516_reg_1407, axi_read_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond516_reg_1407 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond516_reg_1407, axi_read_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond516_reg_1407 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state75_io)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state75_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state75_io)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state75_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter2, ap_block_state84_io)
    begin
                ap_block_pp5_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state84_io) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter2, ap_block_state84_io)
    begin
                ap_block_pp5_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state84_io) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(exitcond549_reg_1267, axi_read_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond549_reg_1267 = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage0_iter1_assign_proc : process(exitcond538_reg_1297, axi_read_RVALID)
    begin
                ap_block_state22_pp1_stage0_iter1 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond538_reg_1297 = ap_const_lv1_0));
    end process;

        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_pp2_stage0_iter1_assign_proc : process(exitcond527_reg_1334, axi_read_RVALID)
    begin
                ap_block_state33_pp2_stage0_iter1 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond527_reg_1334 = ap_const_lv1_0));
    end process;

        ap_block_state34_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state37_io_assign_proc : process(icmp_ln68_reg_1371, axi_read_ARREADY)
    begin
                ap_block_state37_io <= ((axi_read_ARREADY = ap_const_logic_0) and (icmp_ln68_reg_1371 = ap_const_lv1_0));
    end process;

        ap_block_state44_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state45_pp3_stage0_iter1_assign_proc : process(exitcond516_reg_1407, axi_read_RVALID)
    begin
                ap_block_state45_pp3_stage0_iter1 <= ((axi_read_RVALID = ap_const_logic_0) and (exitcond516_reg_1407 = ap_const_lv1_0));
    end process;

        ap_block_state46_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state55_on_subcall_done_assign_proc : process(ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready, ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done)
    begin
                ap_block_state55_on_subcall_done <= ((ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready and ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state65_on_subcall_done_assign_proc : process(ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready, ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done)
    begin
                ap_block_state65_on_subcall_done <= ((ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready and ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state68_on_subcall_done_assign_proc : process(ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready, ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done)
    begin
                ap_block_state68_on_subcall_done <= ((ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready and ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state72_io_assign_proc : process(icmp_ln152_reg_1623, axi_write_AWREADY)
    begin
                ap_block_state72_io <= ((axi_write_AWREADY = ap_const_logic_0) and (icmp_ln152_reg_1623 = ap_const_lv1_0));
    end process;


    ap_block_state72_on_subcall_done_assign_proc : process(ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_ready, ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_done)
    begin
                ap_block_state72_on_subcall_done <= ((ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_ready and ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state73_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_io_assign_proc : process(exitcond492_reg_1633_pp4_iter1_reg, axi_write_WREADY)
    begin
                ap_block_state75_io <= ((axi_write_WREADY = ap_const_logic_0) and (exitcond492_reg_1633_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state75_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state80_assign_proc : process(icmp_ln152_reg_1623, axi_write_BVALID)
    begin
                ap_block_state80 <= ((axi_write_BVALID = ap_const_logic_0) and (icmp_ln152_reg_1623 = ap_const_lv1_0));
    end process;

        ap_block_state82_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state84_io_assign_proc : process(exitcond1_reg_1662_pp5_iter1_reg, axi_write_WREADY)
    begin
                ap_block_state84_io <= ((axi_write_WREADY = ap_const_logic_0) and (exitcond1_reg_1662_pp5_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state84_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state89_assign_proc : process(icmp_ln157_reg_1652, axi_write_BVALID)
    begin
                ap_block_state89 <= ((axi_write_BVALID = ap_const_logic_0) and (icmp_ln157_reg_1652 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond549_fu_619_p2)
    begin
        if ((exitcond549_fu_619_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(exitcond538_fu_673_p2)
    begin
        if ((exitcond538_fu_673_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state32_assign_proc : process(exitcond527_fu_723_p2)
    begin
        if ((exitcond527_fu_723_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state44_assign_proc : process(exitcond516_fu_803_p2)
    begin
        if ((exitcond516_fu_803_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state73_assign_proc : process(exitcond492_fu_1051_p2)
    begin
        if ((exitcond492_fu_1051_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state73 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state73 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state82_assign_proc : process(exitcond1_fu_1095_p2)
    begin
        if ((exitcond1_fu_1095_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state82 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state82 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state89, icmp_ln157_reg_1652, axi_write_BVALID)
    begin
        if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln157_reg_1652 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_loop_index27_phi_fu_430_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond516_reg_1407, loop_index27_reg_426, empty_230_reg_1411)
    begin
        if (((exitcond516_reg_1407 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_loop_index27_phi_fu_430_p4 <= empty_230_reg_1411;
        else 
            ap_phi_mux_loop_index27_phi_fu_430_p4 <= loop_index27_reg_426;
        end if; 
    end process;


    ap_phi_mux_loop_index33_phi_fu_418_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond527_reg_1334, loop_index33_reg_414, empty_228_reg_1338)
    begin
        if (((exitcond527_reg_1334 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_loop_index33_phi_fu_418_p4 <= empty_228_reg_1338;
        else 
            ap_phi_mux_loop_index33_phi_fu_418_p4 <= loop_index33_reg_414;
        end if; 
    end process;


    ap_phi_mux_loop_index39_phi_fu_406_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond538_reg_1297, loop_index39_reg_402, empty_225_reg_1301)
    begin
        if (((exitcond538_reg_1297 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_loop_index39_phi_fu_406_p4 <= empty_225_reg_1301;
        else 
            ap_phi_mux_loop_index39_phi_fu_406_p4 <= loop_index39_reg_402;
        end if; 
    end process;


    ap_phi_mux_loop_index45_phi_fu_394_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond549_reg_1267, loop_index45_reg_390, empty_223_reg_1271)
    begin
        if (((exitcond549_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_loop_index45_phi_fu_394_p4 <= empty_223_reg_1271;
        else 
            ap_phi_mux_loop_index45_phi_fu_394_p4 <= loop_index45_reg_390;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state89, icmp_ln157_reg_1652, axi_write_BVALID)
    begin
        if ((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln157_reg_1652 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done <= (grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done or ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done);
    ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready <= (grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready or ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready);
    ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done <= (grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done or ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done);
    ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready <= (grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready or ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready);
    ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_done <= (grp_updateParameter_float_16u_s_fu_514_ap_done or ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done);
    ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_ready <= (grp_updateParameter_float_16u_s_fu_514_ap_ready or ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready);

    axi_read_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state37, icmp_ln68_reg_1371, ap_CS_fsm_state14, axi_read_ARREADY, axi_read_addr_reg_1261, axi_read_addr_1_reg_1291, axi_read_addr_2_reg_1328, ap_block_state37_io, p_cast2_cast_fu_792_p1)
    begin
        if (((icmp_ln68_reg_1371 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            axi_read_ARADDR <= p_cast2_cast_fu_792_p1(32 - 1 downto 0);
        elsif (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            axi_read_ARADDR <= axi_read_addr_2_reg_1328;
        elsif (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            axi_read_ARADDR <= axi_read_addr_1_reg_1291;
        elsif (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            axi_read_ARADDR <= axi_read_addr_reg_1261;
        else 
            axi_read_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_read_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state37, icmp_ln68_reg_1371, ap_CS_fsm_state14, axi_read_ARREADY, valuesToLoad_reg_1251, valuesToLoad_2_reg_1281, mul_ln67_reg_1318, mul_ln71_1_reg_1365, ap_block_state37_io)
    begin
        if (((icmp_ln68_reg_1371 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            axi_read_ARLEN <= mul_ln71_1_reg_1365;
        elsif (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            axi_read_ARLEN <= mul_ln67_reg_1318;
        elsif (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            axi_read_ARLEN <= valuesToLoad_2_reg_1281;
        elsif (((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            axi_read_ARLEN <= valuesToLoad_reg_1251;
        else 
            axi_read_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_read_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state37, icmp_ln68_reg_1371, ap_CS_fsm_state14, axi_read_ARREADY, ap_block_state37_io)
    begin
        if ((((icmp_ln68_reg_1371 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state37_io) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((axi_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            axi_read_ARVALID <= ap_const_logic_1;
        else 
            axi_read_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    axi_read_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond549_reg_1267, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond527_reg_1334, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond516_reg_1407, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond538_reg_1297, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((exitcond538_reg_1297 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond516_reg_1407 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((exitcond527_reg_1334 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond549_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            axi_read_RREADY <= ap_const_logic_1;
        else 
            axi_read_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    axi_read_blk_n_AR_assign_proc : process(m_axi_axi_read_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state37, icmp_ln68_reg_1371, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln68_reg_1371 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            axi_read_blk_n_AR <= m_axi_axi_read_ARREADY;
        else 
            axi_read_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    axi_read_blk_n_R_assign_proc : process(m_axi_axi_read_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond549_reg_1267, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond527_reg_1334, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond516_reg_1407, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond538_reg_1297)
    begin
        if ((((exitcond538_reg_1297 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond516_reg_1407 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((exitcond527_reg_1334 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond549_reg_1267 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            axi_read_blk_n_R <= m_axi_axi_read_RVALID;
        else 
            axi_read_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    axi_write_AWADDR_assign_proc : process(ap_CS_fsm_state72, icmp_ln152_reg_1623, ap_CS_fsm_state81, axi_write_AWREADY, ap_block_state72_io, ap_block_state72_on_subcall_done, axi_write_addr_1_reg_1656, p_cast9_cast_fu_1040_p1)
    begin
        if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            axi_write_AWADDR <= axi_write_addr_1_reg_1656;
        elsif ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            axi_write_AWADDR <= p_cast9_cast_fu_1040_p1(32 - 1 downto 0);
        else 
            axi_write_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_write_AWLEN_assign_proc : process(ap_CS_fsm_state72, icmp_ln152_reg_1623, ap_CS_fsm_state81, axi_write_AWREADY, valuesToStore_1_reg_1507, valuesToStore_3_reg_1615, ap_block_state72_io, ap_block_state72_on_subcall_done)
    begin
        if (((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            axi_write_AWLEN <= valuesToStore_3_reg_1615;
        elsif ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            axi_write_AWLEN <= valuesToStore_1_reg_1507;
        else 
            axi_write_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_write_AWVALID_assign_proc : process(ap_CS_fsm_state72, icmp_ln152_reg_1623, ap_CS_fsm_state81, axi_write_AWREADY, ap_block_state72_io, ap_block_state72_on_subcall_done)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72)) or ((axi_write_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81)))) then 
            axi_write_AWVALID <= ap_const_logic_1;
        else 
            axi_write_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    axi_write_BREADY_assign_proc : process(icmp_ln152_reg_1623, ap_CS_fsm_state80, ap_CS_fsm_state89, icmp_ln157_reg_1652, axi_write_BVALID)
    begin
        if (((not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln152_reg_1623 = ap_const_lv1_0))) and (icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80)) or (not(((axi_write_BVALID = ap_const_logic_0) and (icmp_ln157_reg_1652 = ap_const_lv1_0))) and (icmp_ln157_reg_1652 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89)))) then 
            axi_write_BREADY <= ap_const_logic_1;
        else 
            axi_write_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    axi_write_WDATA_assign_proc : process(ap_enable_reg_pp4_iter2, exitcond492_reg_1633_pp4_iter1_reg, ap_enable_reg_pp5_iter2, exitcond1_reg_1662_pp5_iter1_reg, empty_235_fu_1067_p1, ap_block_pp4_stage0_01001, empty_237_fu_1111_p1, ap_block_pp5_stage0_01001)
    begin
        if (((exitcond1_reg_1662_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_01001))) then 
            axi_write_WDATA <= empty_237_fu_1111_p1;
        elsif (((exitcond492_reg_1633_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001))) then 
            axi_write_WDATA <= empty_235_fu_1067_p1;
        else 
            axi_write_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    axi_write_WVALID_assign_proc : process(ap_enable_reg_pp4_iter2, exitcond492_reg_1633_pp4_iter1_reg, ap_enable_reg_pp5_iter2, exitcond1_reg_1662_pp5_iter1_reg, ap_block_pp4_stage0_11001, ap_block_pp5_stage0_11001)
    begin
        if ((((exitcond1_reg_1662_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((exitcond492_reg_1633_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            axi_write_WVALID <= ap_const_logic_1;
        else 
            axi_write_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    axi_write_blk_n_AW_assign_proc : process(m_axi_axi_write_AWREADY, ap_CS_fsm_state72, icmp_ln152_reg_1623, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or ((icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72)))) then 
            axi_write_blk_n_AW <= m_axi_axi_write_AWREADY;
        else 
            axi_write_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    axi_write_blk_n_B_assign_proc : process(m_axi_axi_write_BVALID, icmp_ln152_reg_1623, ap_CS_fsm_state80, ap_CS_fsm_state89, icmp_ln157_reg_1652)
    begin
        if ((((icmp_ln157_reg_1652 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89)) or ((icmp_ln152_reg_1623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80)))) then 
            axi_write_blk_n_B <= m_axi_axi_write_BVALID;
        else 
            axi_write_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    axi_write_blk_n_W_assign_proc : process(m_axi_axi_write_WREADY, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, exitcond492_reg_1633_pp4_iter1_reg, ap_enable_reg_pp5_iter2, ap_block_pp5_stage0, exitcond1_reg_1662_pp5_iter1_reg)
    begin
        if ((((exitcond1_reg_1662_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0)) or ((exitcond492_reg_1633_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0)))) then 
            axi_write_blk_n_W <= m_axi_axi_write_WREADY;
        else 
            axi_write_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    bitcast_ln141_fu_1006_p1 <= learningRate;

    bramBiasGradientAvg_address0_assign_proc : process(ap_CS_fsm_state72, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address0, grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramBiasGradientAvg_address0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramBiasGradientAvg_address0 <= grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramBiasGradientAvg_address0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address0;
        else 
            bramBiasGradientAvg_address0 <= "XXXXXXX";
        end if; 
    end process;


    bramBiasGradientAvg_ce0_assign_proc : process(ap_CS_fsm_state72, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce0, grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramBiasGradientAvg_ce0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramBiasGradientAvg_ce0 <= grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramBiasGradientAvg_ce0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce0;
        else 
            bramBiasGradientAvg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramBiasGradientAvg_ce1_assign_proc : process(ap_CS_fsm_state72, grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramBiasGradientAvg_ce1 <= grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce1;
        else 
            bramBiasGradientAvg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramBiasGradientAvg_d0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramBiasGradientAvg_d0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramBiasGradientAvg_d0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d0;
        else 
            bramBiasGradientAvg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramBiasGradientAvg_we0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramBiasGradientAvg_we0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramBiasGradientAvg_we0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we0;
        else 
            bramBiasGradientAvg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramBias_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state72, ap_block_pp5_stage0, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp1_iter2, grp_updateParameter_float_16u_s_fu_514_bramBias_address0, loop_index39_cast_fu_684_p1, loop_index_cast_fu_1106_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramBias_address0 <= loop_index_cast_fu_1106_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_address0 <= loop_index39_cast_fu_684_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramBias_address0 <= grp_updateParameter_float_16u_s_fu_514_bramBias_address0;
        else 
            bramBias_address0 <= "XXXXXXX";
        end if; 
    end process;


    bramBias_ce0_assign_proc : process(ap_CS_fsm_state72, ap_block_pp1_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp1_iter2, grp_updateParameter_float_16u_s_fu_514_bramBias_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then 
            bramBias_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramBias_ce0 <= grp_updateParameter_float_16u_s_fu_514_bramBias_ce0;
        else 
            bramBias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramBias_ce1_assign_proc : process(ap_CS_fsm_state72, grp_updateParameter_float_16u_s_fu_514_bramBias_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramBias_ce1 <= grp_updateParameter_float_16u_s_fu_514_bramBias_ce1;
        else 
            bramBias_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramBias_d0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state72, ap_enable_reg_pp1_iter2, grp_updateParameter_float_16u_s_fu_514_bramBias_d0, empty_226_fu_689_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_d0 <= empty_226_fu_689_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramBias_d0 <= grp_updateParameter_float_16u_s_fu_514_bramBias_d0;
        else 
            bramBias_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramBias_we0_assign_proc : process(ap_CS_fsm_state72, ap_block_pp1_stage0_11001, exitcond538_reg_1297_pp1_iter1_reg, ap_enable_reg_pp1_iter2, grp_updateParameter_float_16u_s_fu_514_bramBias_we0)
    begin
        if (((exitcond538_reg_1297_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramBias_we0 <= grp_updateParameter_float_16u_s_fu_514_bramBias_we0;
        else 
            bramBias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramBias_we1_assign_proc : process(ap_CS_fsm_state72, grp_updateParameter_float_16u_s_fu_514_bramBias_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramBias_we1 <= grp_updateParameter_float_16u_s_fu_514_bramBias_we1;
        else 
            bramBias_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bramClasses_address0_assign_proc : process(ap_block_pp2_stage0, ap_enable_reg_pp2_iter2, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address0, ap_CS_fsm_state55, loop_index33_cast_fu_734_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bramClasses_address0 <= loop_index33_cast_fu_734_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramClasses_address0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address0;
        else 
            bramClasses_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramClasses_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce0, ap_CS_fsm_state55)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bramClasses_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramClasses_ce0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce0;
        else 
            bramClasses_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bramClasses_d0 <= axi_read_addr_2_read_reg_1343;

    bramClasses_we0_assign_proc : process(ap_block_pp2_stage0_11001, exitcond527_reg_1334_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((exitcond527_reg_1334_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bramClasses_we0 <= ap_const_logic_1;
        else 
            bramClasses_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError0_address0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address0, grp_copyArray_float_16u_s_fu_550_p_input_address0, ap_CS_fsm_state68, ap_CS_fsm_state57, ap_CS_fsm_state67, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            bramError0_address0 <= grp_copyArray_float_16u_s_fu_550_p_input_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramError0_address0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramError0_address0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address0;
        else 
            bramError0_address0 <= "XXXX";
        end if; 
    end process;


    bramError0_ce0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce0, grp_copyArray_float_16u_s_fu_550_p_input_ce0, ap_CS_fsm_state68, ap_CS_fsm_state57, ap_CS_fsm_state67, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            bramError0_ce0 <= grp_copyArray_float_16u_s_fu_550_p_input_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramError0_ce0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramError0_ce0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce0;
        else 
            bramError0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError0_ce1_assign_proc : process(grp_copyArray_float_16u_s_fu_550_p_input_ce1, ap_CS_fsm_state57, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            bramError0_ce1 <= grp_copyArray_float_16u_s_fu_550_p_input_ce1;
        else 
            bramError0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramError0_d0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramError0_d0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramError0_d0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d0;
        else 
            bramError0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramError0_we0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramError0_we0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramError0_we0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we0;
        else 
            bramError0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError1_address0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address0, grp_copyArray_float_16u_s_fu_550_p_output_address0, ap_CS_fsm_state68, ap_CS_fsm_state57, ap_CS_fsm_state67, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            bramError1_address0 <= grp_copyArray_float_16u_s_fu_550_p_output_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramError1_address0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address0;
        else 
            bramError1_address0 <= "XXXX";
        end if; 
    end process;


    bramError1_address1_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address1, grp_copyArray_float_16u_s_fu_550_p_output_address1, ap_CS_fsm_state68, ap_CS_fsm_state57, ap_CS_fsm_state67, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            bramError1_address1 <= grp_copyArray_float_16u_s_fu_550_p_output_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramError1_address1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address1;
        else 
            bramError1_address1 <= "XXXX";
        end if; 
    end process;


    bramError1_ce0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce0, grp_copyArray_float_16u_s_fu_550_p_output_ce0, ap_CS_fsm_state68, ap_CS_fsm_state57, ap_CS_fsm_state67, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            bramError1_ce0 <= grp_copyArray_float_16u_s_fu_550_p_output_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramError1_ce0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce0;
        else 
            bramError1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError1_ce1_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce1, grp_copyArray_float_16u_s_fu_550_p_output_ce1, ap_CS_fsm_state68, ap_CS_fsm_state57, ap_CS_fsm_state67, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            bramError1_ce1 <= grp_copyArray_float_16u_s_fu_550_p_output_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramError1_ce1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce1;
        else 
            bramError1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramError1_we0_assign_proc : process(grp_copyArray_float_16u_s_fu_550_p_output_we0, ap_CS_fsm_state57, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            bramError1_we0 <= grp_copyArray_float_16u_s_fu_550_p_output_we0;
        else 
            bramError1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError1_we1_assign_proc : process(grp_copyArray_float_16u_s_fu_550_p_output_we1, ap_CS_fsm_state57, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            bramError1_we1 <= grp_copyArray_float_16u_s_fu_550_p_output_we1;
        else 
            bramError1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bramMlpResults_address0_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter2, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55, loop_index27_cast_fu_814_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bramMlpResults_address0 <= loop_index27_cast_fu_814_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramMlpResults_address0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramMlpResults_address0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address0;
        else 
            bramMlpResults_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramMlpResults_address1_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address1, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address1, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramMlpResults_address1 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramMlpResults_address1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address1;
        else 
            bramMlpResults_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramMlpResults_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bramMlpResults_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramMlpResults_ce0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramMlpResults_ce0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce0;
        else 
            bramMlpResults_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramMlpResults_ce1_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce1, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce1, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramMlpResults_ce1 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramMlpResults_ce1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce1;
        else 
            bramMlpResults_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bramMlpResults_d0 <= axi_read_addr_3_read_reg_1416;

    bramMlpResults_we0_assign_proc : process(ap_block_pp3_stage0_11001, exitcond516_reg_1407_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((exitcond516_reg_1407_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bramMlpResults_we0 <= ap_const_logic_1;
        else 
            bramMlpResults_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeightGradientAvg_address0_assign_proc : process(ap_CS_fsm_state72, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address0, grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramWeightGradientAvg_address0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeightGradientAvg_address0 <= grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeightGradientAvg_address0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address0;
        else 
            bramWeightGradientAvg_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeightGradientAvg_address1_assign_proc : process(ap_CS_fsm_state72, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address1, grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address1, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address1, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramWeightGradientAvg_address1 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeightGradientAvg_address1 <= grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeightGradientAvg_address1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address1;
        else 
            bramWeightGradientAvg_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeightGradientAvg_ce0_assign_proc : process(ap_CS_fsm_state72, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce0, grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramWeightGradientAvg_ce0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeightGradientAvg_ce0 <= grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeightGradientAvg_ce0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce0;
        else 
            bramWeightGradientAvg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeightGradientAvg_ce1_assign_proc : process(ap_CS_fsm_state72, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce1, grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce1, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce1, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramWeightGradientAvg_ce1 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeightGradientAvg_ce1 <= grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeightGradientAvg_ce1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce1;
        else 
            bramWeightGradientAvg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeightGradientAvg_d0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramWeightGradientAvg_d0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeightGradientAvg_d0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d0;
        else 
            bramWeightGradientAvg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeightGradientAvg_d1_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d1, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d1, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramWeightGradientAvg_d1 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeightGradientAvg_d1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d1;
        else 
            bramWeightGradientAvg_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeightGradientAvg_we0_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we0, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we0, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramWeightGradientAvg_we0 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeightGradientAvg_we0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we0;
        else 
            bramWeightGradientAvg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeightGradientAvg_we1_assign_proc : process(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we1, grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we1, ap_CS_fsm_state68, ap_CS_fsm_state65, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            bramWeightGradientAvg_we1 <= grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeightGradientAvg_we1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we1;
        else 
            bramWeightGradientAvg_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state72, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter2, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address0, grp_updateParameter_float_16u_s_fu_514_bramWeight_address0, ap_CS_fsm_state68, ap_CS_fsm_state65, loop_index45_cast_fu_630_p1, loop_index21_cast_fu_1062_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            bramWeight_address0 <= loop_index21_cast_fu_1062_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_address0 <= loop_index45_cast_fu_630_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeight_address0 <= grp_updateParameter_float_16u_s_fu_514_bramWeight_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeight_address0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address0;
        else 
            bramWeight_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeight_address1_assign_proc : process(ap_CS_fsm_state72, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address1, grp_updateParameter_float_16u_s_fu_514_bramWeight_address1, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeight_address1 <= grp_updateParameter_float_16u_s_fu_514_bramWeight_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeight_address1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address1;
        else 
            bramWeight_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeight_ce0_assign_proc : process(ap_CS_fsm_state72, ap_block_pp0_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter2, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce0, grp_updateParameter_float_16u_s_fu_514_bramWeight_ce0, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            bramWeight_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeight_ce0 <= grp_updateParameter_float_16u_s_fu_514_bramWeight_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeight_ce0 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce0;
        else 
            bramWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_ce1_assign_proc : process(ap_CS_fsm_state72, grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce1, grp_updateParameter_float_16u_s_fu_514_bramWeight_ce1, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeight_ce1 <= grp_updateParameter_float_16u_s_fu_514_bramWeight_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            bramWeight_ce1 <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce1;
        else 
            bramWeight_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_d0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state72, ap_enable_reg_pp0_iter2, grp_updateParameter_float_16u_s_fu_514_bramWeight_d0, empty_224_fu_635_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_d0 <= empty_224_fu_635_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeight_d0 <= grp_updateParameter_float_16u_s_fu_514_bramWeight_d0;
        else 
            bramWeight_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeight_we0_assign_proc : process(ap_CS_fsm_state72, ap_block_pp0_stage0_11001, exitcond549_reg_1267_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_updateParameter_float_16u_s_fu_514_bramWeight_we0)
    begin
        if (((exitcond549_reg_1267_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeight_we0 <= grp_updateParameter_float_16u_s_fu_514_bramWeight_we0;
        else 
            bramWeight_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_we1_assign_proc : process(ap_CS_fsm_state72, grp_updateParameter_float_16u_s_fu_514_bramWeight_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            bramWeight_we1 <= grp_updateParameter_float_16u_s_fu_514_bramWeight_we1;
        else 
            bramWeight_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_223_fu_624_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index45_phi_fu_394_p4) + unsigned(ap_const_lv32_1));
    empty_224_fu_635_p1 <= axi_read_addr_read_reg_1276;
    empty_225_fu_678_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index39_phi_fu_406_p4) + unsigned(ap_const_lv32_1));
    empty_226_fu_689_p1 <= axi_read_addr_1_read_reg_1306;
    empty_228_fu_728_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index33_phi_fu_418_p4) + unsigned(ap_const_lv32_1));
    empty_230_fu_808_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index27_phi_fu_430_p4) + unsigned(ap_const_lv32_1));
    empty_234_fu_1056_p2 <= std_logic_vector(unsigned(loop_index21_reg_468) + unsigned(ap_const_lv32_1));
    empty_235_fu_1067_p1 <= bramWeight_load_reg_1647;
    empty_236_fu_1100_p2 <= std_logic_vector(unsigned(loop_index_reg_479) + unsigned(ap_const_lv32_1));
    empty_237_fu_1111_p1 <= bramBias_load_reg_1676;
    empty_242_fu_842_p1 <= add35_fu_833_p2(15 - 1 downto 0);
    empty_243_fu_861_p1 <= valuesToStore_2_reg_1348(7 - 1 downto 0);
    exitcond1_fu_1095_p2 <= "1" when (loop_index_reg_479 = valuesToStore_3_reg_1615) else "0";
    exitcond492_fu_1051_p2 <= "1" when (loop_index21_reg_468 = valuesToStore_1_reg_1507) else "0";
    exitcond516_fu_803_p2 <= "1" when (ap_phi_mux_loop_index27_phi_fu_430_p4 = mul_ln71_1_reg_1365) else "0";
    exitcond527_fu_723_p2 <= "1" when (ap_phi_mux_loop_index33_phi_fu_418_p4 = mul_ln67_reg_1318) else "0";
    exitcond538_fu_673_p2 <= "1" when (ap_phi_mux_loop_index39_phi_fu_406_p4 = valuesToLoad_2_reg_1281) else "0";
    exitcond549_fu_619_p2 <= "1" when (ap_phi_mux_loop_index45_phi_fu_394_p4 = valuesToLoad_reg_1251) else "0";

    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_continue_assign_proc : process(ap_CS_fsm_state68, ap_block_state68_on_subcall_done, ap_CS_fsm_state65, ap_block_state65_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state65_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_boolean_0 = ap_block_state68_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state68)))) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_continue <= ap_const_logic_1;
        else 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start <= grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg;

    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset_assign_proc : process(trunc_ln102_reg_1585, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset <= trunc_ln102_reg_1585;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset <= ap_const_lv7_0;
        else 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset <= "XXXXXXX";
        end if; 
    end process;

    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_initZero <= initZero_reg_1501(0);

    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n_assign_proc : process(l_n_reg_1462, p_n_reg_1545, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n <= p_n_reg_1545;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n <= l_n_reg_1462;
        else 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev_assign_proc : process(numberInputs_read_reg_1209, numberNeurons_read_reg_1220, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev <= numberNeurons_read_reg_1220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev <= numberInputs_read_reg_1209;
        else 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset_assign_proc : process(add_ln128_reg_1560, add_ln108_reg_1570, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset <= add_ln108_reg_1570;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset <= add_ln128_reg_1560;
        else 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset_assign_proc : process(mul_ln78_reg_1514, add_ln109_2_reg_1580, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset <= add_ln109_2_reg_1580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset <= mul_ln78_reg_1514;
        else 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset_assign_proc : process(mul_ln110_reg_1595, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset <= mul_ln110_reg_1595;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset <= ap_const_lv14_0;
        else 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset_assign_proc : process(valuesToStore_reg_1467, mul_ln106_1_reg_1590, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset <= mul_ln106_1_reg_1590;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset <= valuesToStore_reg_1467;
        else 
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_continue_assign_proc : process(ap_CS_fsm_state55, ap_block_state55_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state55_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_continue <= ap_const_logic_1;
        else 
            grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start <= grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg;
    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_initZero <= initZero_reg_1501(0);
    grp_copyArray_float_16u_s_fu_550_ap_start <= grp_copyArray_float_16u_s_fu_550_ap_start_reg;

    grp_copyArray_float_16u_s_fu_550_size_assign_proc : process(numberNeurons_read_reg_1220, empty_232_reg_438, ap_CS_fsm_state57, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_copyArray_float_16u_s_fu_550_size <= numberNeurons_read_reg_1220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_copyArray_float_16u_s_fu_550_size <= empty_232_reg_438;
        else 
            grp_copyArray_float_16u_s_fu_550_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1115_p0 <= add35_fu_833_p2(14 - 1 downto 0);
    grp_fu_1124_p0 <= std_logic_vector(unsigned(trunc_ln71_4_reg_1359) + unsigned(trunc_ln75_2_fu_891_p1));
    grp_fu_1124_p1 <= i_reg_448(15 - 1 downto 0);
    grp_fu_1139_p0 <= ap_const_lv15_7FFF(1 - 1 downto 0);
    grp_fu_1149_p0 <= add_ln106_fu_983_p2(14 - 1 downto 0);
    grp_fu_1155_p0 <= grp_fu_1139_p4(14 - 1 downto 0);

    grp_updateParameter_float_16u_s_fu_514_ap_continue_assign_proc : process(ap_CS_fsm_state72, ap_block_state72_io, ap_block_state72_on_subcall_done)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state72_on_subcall_done) or (ap_const_boolean_1 = ap_block_state72_io))) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            grp_updateParameter_float_16u_s_fu_514_ap_continue <= ap_const_logic_1;
        else 
            grp_updateParameter_float_16u_s_fu_514_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_updateParameter_float_16u_s_fu_514_ap_start <= grp_updateParameter_float_16u_s_fu_514_ap_start_reg;
    i_9_fu_885_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_reg_448));
    icmp_fu_855_p2 <= "0" when (tmp_fu_846_p4 = ap_const_lv31_0) else "1";
    icmp_ln100_fu_954_p2 <= "1" when (unsigned(layer_1_reg_459) < unsigned(zext_ln75_reg_1472)) else "0";
    icmp_ln152_fu_1026_p2 <= "1" when (valuesToStore_1_reg_1507 = ap_const_lv32_0) else "0";
    icmp_ln157_fu_1071_p2 <= "1" when (valuesToStore_3_reg_1615 = ap_const_lv32_0) else "0";
    icmp_ln50_fu_562_p2 <= "1" when (loadParameters = ap_const_lv32_0) else "0";
    icmp_ln58_fu_594_p2 <= "1" when (valuesToLoad_fu_589_p2 = ap_const_lv32_0) else "0";
    icmp_ln63_fu_648_p2 <= "1" when (valuesToLoad_2_fu_643_p2 = ap_const_lv32_0) else "0";
    icmp_ln67_fu_698_p2 <= "1" when (mul_ln67_fu_693_p2 = ap_const_lv32_0) else "0";
    icmp_ln68_fu_765_p2 <= "1" when (mul_ln71_1_fu_760_p2 = ap_const_lv32_0) else "0";
    icmp_ln75_fu_880_p2 <= "1" when (i_reg_448 = batchSize_read_reg_1311) else "0";
    icmp_ln98_fu_948_p2 <= "1" when (signed(trunc_ln98_fu_940_p1) > signed(ap_const_lv32_0)) else "0";
    initZero_fu_900_p2 <= "1" when (i_reg_448 = ap_const_lv32_0) else "0";
    l_n_fu_864_p3 <= 
        numberNeurons_read_reg_1220 when (icmp_reg_1446(0) = '1') else 
        numberOutputs_read_reg_1195;
    layer_fu_823_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(numberLayers_read_reg_1238));
    loop_index21_cast_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index21_reg_468),64));
    loop_index27_cast_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index27_reg_426_pp3_iter1_reg),64));
    loop_index33_cast_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index33_reg_414_pp2_iter1_reg),64));
    loop_index39_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index39_reg_402_pp1_iter1_reg),64));
    loop_index45_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index45_reg_390_pp0_iter1_reg),64));
    loop_index_cast_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_479),64));
    mul34_fu_828_p1 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(numberLayers_read_reg_1238));
    mul_ln143_fu_1015_p1 <= std_logic_vector(signed(numberOutputs_read_reg_1195) + signed(add35_reg_1431));
    mul_ln55_fu_574_p1 <= std_logic_vector(signed(add_ln55_fu_568_p0) + signed(ap_const_lv32_FFFFFFFF));
    mul_ln71_1_fu_760_p1 <= std_logic_vector(signed(numberOutputs_read_reg_1195) + signed(add_ln71_reg_1354));
    mul_ln79_fu_924_p0 <= empty_232_reg_438(9 - 1 downto 0);
        p_cast10_cast_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast4_fu_1076_p4),64));

        p_cast1_cast_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast1_fu_600_p4),64));

    p_cast1_fu_600_p4 <= axiWeightInput_read_reg_1176(63 downto 2);
        p_cast2_cast_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_fu_783_p4),64));

    p_cast2_fu_783_p4 <= axiMlpResultsInput_read_reg_1186(63 downto 2);
        p_cast3_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast3_fu_654_p4),64));

    p_cast3_fu_654_p4 <= axiBiasInput_read_reg_1171(63 downto 2);
    p_cast4_fu_1076_p4 <= axiBiasOutput_read_reg_1161(63 downto 2);
        p_cast9_cast_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast9_fu_1031_p4),64));

    p_cast9_fu_1031_p4 <= axiWeightOutput_read_reg_1166(63 downto 2);
        p_cast_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_704_p4),64));

    p_cast_fu_704_p4 <= axiClassesInput_read_reg_1181(63 downto 2);
    p_n_fu_959_p3 <= 
        numberNeurons_read_reg_1220 when (icmp_ln100_fu_954_p2(0) = '1') else 
        empty_232_reg_438;
    select_ln121_fu_972_p3 <= 
        empty_232_reg_438 when (icmp_reg_1446(0) = '1') else 
        numberOutputs_read_reg_1195;
    tmp_fu_846_p4 <= numberLayers_read_reg_1238(31 downto 1);
    trunc_ln102_fu_1003_p1 <= grp_fu_1132_p2(7 - 1 downto 0);
    trunc_ln71_1_fu_774_p1 <= numberInputs_read_reg_1209(14 - 1 downto 0);
    trunc_ln71_2_fu_777_p1 <= numberNeurons_read_reg_1220(15 - 1 downto 0);
    trunc_ln71_3_fu_780_p1 <= numberNeurons_read_reg_1220(14 - 1 downto 0);
    trunc_ln71_4_fu_752_p1 <= add_ln71_fu_747_p2(15 - 1 downto 0);
    trunc_ln71_fu_771_p1 <= numberInputs_read_reg_1209(15 - 1 downto 0);
    trunc_ln75_2_fu_891_p1 <= empty_232_reg_438(15 - 1 downto 0);
    trunc_ln75_fu_872_p1 <= i_reg_448(9 - 1 downto 0);
    trunc_ln98_1_fu_944_p1 <= layer_1_reg_459(15 - 1 downto 0);
    trunc_ln98_fu_940_p1 <= layer_1_reg_459(32 - 1 downto 0);
    valuesToLoad_2_fu_643_p2 <= std_logic_vector(signed(numberOutputs_read_reg_1195) + signed(valuesToLoad_1_fu_639_p2));
    valuesToLoad_fu_589_p1 <= std_logic_vector(unsigned(add_ln56_1_fu_580_p2) + unsigned(numberInputs_read_reg_1209));
    valuesToStore_1_fu_915_p1 <= std_logic_vector(unsigned(add_ln150_1_fu_906_p2) + unsigned(numberInputs_read_reg_1209));
    valuesToStore_3_fu_1021_p2 <= std_logic_vector(signed(numberOutputs_read_reg_1195) + signed(valuesToStore_2_reg_1348));
    zext_ln75_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_reg_1421),64));
end behav;
