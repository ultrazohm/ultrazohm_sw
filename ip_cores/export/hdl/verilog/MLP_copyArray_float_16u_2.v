// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_copyArray_float_16u_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_input_address0,
        p_input_ce0,
        p_input_q0,
        p_input_address1,
        p_input_ce1,
        p_input_q1,
        p_output_address0,
        p_output_ce0,
        p_output_we0,
        p_output_d0,
        p_output_address1,
        p_output_ce1,
        p_output_we1,
        p_output_d1,
        size
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] p_input_address0;
output   p_input_ce0;
input  [31:0] p_input_q0;
output  [9:0] p_input_address1;
output   p_input_ce1;
input  [31:0] p_input_q1;
output  [9:0] p_output_address0;
output   p_output_ce0;
output   p_output_we0;
output  [31:0] p_output_d0;
output  [9:0] p_output_address1;
output   p_output_ce1;
output   p_output_we1;
output  [31:0] p_output_d1;
input  [31:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] p_input_address0;
reg p_input_ce0;
reg[9:0] p_input_address1;
reg p_input_ce1;
reg[9:0] p_output_address0;
reg p_output_ce0;
reg p_output_we0;
reg[9:0] p_output_address1;
reg p_output_ce1;
reg p_output_we1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [27:0] i_reg_350;
reg   [27:0] trunc_ln_reg_550;
wire   [0:0] icmp_ln130_fu_371_p2;
reg   [0:0] icmp_ln130_reg_555;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [27:0] add_ln130_fu_376_p2;
reg   [27:0] add_ln130_reg_559;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] tmp_s_fu_386_p3;
reg   [9:0] tmp_s_reg_564;
wire   [63:0] zext_ln136_fu_394_p1;
reg   [63:0] zext_ln136_reg_582;
wire   [63:0] zext_ln136_1_fu_405_p1;
reg   [63:0] zext_ln136_1_reg_592;
wire   [63:0] zext_ln136_2_fu_415_p1;
reg   [63:0] zext_ln136_2_reg_602;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln136_3_fu_425_p1;
reg   [63:0] zext_ln136_3_reg_612;
wire   [63:0] zext_ln136_4_fu_435_p1;
reg   [63:0] zext_ln136_4_reg_622;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] zext_ln136_5_fu_445_p1;
reg   [63:0] zext_ln136_5_reg_632;
wire   [63:0] zext_ln136_6_fu_455_p1;
reg   [63:0] zext_ln136_6_reg_642;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [63:0] zext_ln136_7_fu_465_p1;
reg   [63:0] zext_ln136_7_reg_652;
wire   [63:0] zext_ln136_8_fu_475_p1;
reg   [63:0] zext_ln136_8_reg_662;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [63:0] zext_ln136_9_fu_485_p1;
reg   [63:0] zext_ln136_9_reg_672;
wire   [63:0] zext_ln136_10_fu_495_p1;
reg   [63:0] zext_ln136_10_reg_682;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [63:0] zext_ln136_11_fu_505_p1;
reg   [63:0] zext_ln136_11_reg_692;
wire   [63:0] zext_ln136_12_fu_515_p1;
reg   [63:0] zext_ln136_12_reg_702;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [63:0] zext_ln136_13_fu_525_p1;
reg   [63:0] zext_ln136_13_reg_712;
wire   [63:0] zext_ln136_14_fu_535_p1;
reg   [63:0] zext_ln136_14_reg_722;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [63:0] zext_ln136_15_fu_545_p1;
reg   [63:0] zext_ln136_15_reg_732;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage7_subdone;
reg   [27:0] ap_phi_mux_i_phi_fu_354_p4;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire   [5:0] empty_fu_382_p1;
wire   [9:0] or_ln136_fu_399_p2;
wire   [9:0] or_ln136_1_fu_410_p2;
wire   [9:0] or_ln136_2_fu_420_p2;
wire   [9:0] or_ln136_3_fu_430_p2;
wire   [9:0] or_ln136_4_fu_440_p2;
wire   [9:0] or_ln136_5_fu_450_p2;
wire   [9:0] or_ln136_6_fu_460_p2;
wire   [9:0] or_ln136_7_fu_470_p2;
wire   [9:0] or_ln136_8_fu_480_p2;
wire   [9:0] or_ln136_9_fu_490_p2;
wire   [9:0] or_ln136_10_fu_500_p2;
wire   [9:0] or_ln136_11_fu_510_p2;
wire   [9:0] or_ln136_12_fu_520_p2;
wire   [9:0] or_ln136_13_fu_530_p2;
wire   [9:0] or_ln136_14_fu_540_p2;
wire    ap_CS_fsm_state11;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln130_reg_555 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_350 <= add_ln130_reg_559;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_350 <= 28'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln130_reg_559 <= add_ln130_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln130_reg_555 <= icmp_ln130_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln130_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_s_reg_564[9 : 4] <= tmp_s_fu_386_p3[9 : 4];
        zext_ln136_1_reg_592[9 : 4] <= zext_ln136_1_fu_405_p1[9 : 4];
        zext_ln136_reg_582[9 : 4] <= zext_ln136_fu_394_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln_reg_550 <= {{size[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        zext_ln136_10_reg_682[9 : 4] <= zext_ln136_10_fu_495_p1[9 : 4];
        zext_ln136_11_reg_692[9 : 4] <= zext_ln136_11_fu_505_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        zext_ln136_12_reg_702[9 : 4] <= zext_ln136_12_fu_515_p1[9 : 4];
        zext_ln136_13_reg_712[9 : 4] <= zext_ln136_13_fu_525_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        zext_ln136_14_reg_722[9 : 4] <= zext_ln136_14_fu_535_p1[9 : 4];
        zext_ln136_15_reg_732[9 : 4] <= zext_ln136_15_fu_545_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln136_2_reg_602[9 : 4] <= zext_ln136_2_fu_415_p1[9 : 4];
        zext_ln136_3_reg_612[9 : 4] <= zext_ln136_3_fu_425_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        zext_ln136_4_reg_622[9 : 4] <= zext_ln136_4_fu_435_p1[9 : 4];
        zext_ln136_5_reg_632[9 : 4] <= zext_ln136_5_fu_445_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        zext_ln136_6_reg_642[9 : 4] <= zext_ln136_6_fu_455_p1[9 : 4];
        zext_ln136_7_reg_652[9 : 4] <= zext_ln136_7_fu_465_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        zext_ln136_8_reg_662[9 : 4] <= zext_ln136_8_fu_475_p1[9 : 4];
        zext_ln136_9_reg_672[9 : 4] <= zext_ln136_9_fu_485_p1[9 : 4];
    end
end

always @ (*) begin
    if ((icmp_ln130_fu_371_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln130_reg_555 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_354_p4 = add_ln130_reg_559;
    end else begin
        ap_phi_mux_i_phi_fu_354_p4 = i_reg_350;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            p_input_address0 = zext_ln136_15_fu_545_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            p_input_address0 = zext_ln136_13_fu_525_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            p_input_address0 = zext_ln136_11_fu_505_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            p_input_address0 = zext_ln136_9_fu_485_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_input_address0 = zext_ln136_7_fu_465_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_input_address0 = zext_ln136_5_fu_445_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_input_address0 = zext_ln136_3_fu_425_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_input_address0 = zext_ln136_1_fu_405_p1;
        end else begin
            p_input_address0 = 'bx;
        end
    end else begin
        p_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            p_input_address1 = zext_ln136_14_fu_535_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            p_input_address1 = zext_ln136_12_fu_515_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            p_input_address1 = zext_ln136_10_fu_495_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            p_input_address1 = zext_ln136_8_fu_475_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_input_address1 = zext_ln136_6_fu_455_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_input_address1 = zext_ln136_4_fu_435_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_input_address1 = zext_ln136_2_fu_415_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_input_address1 = zext_ln136_fu_394_p1;
        end else begin
            p_input_address1 = 'bx;
        end
    end else begin
        p_input_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_input_ce0 = 1'b1;
    end else begin
        p_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_input_ce1 = 1'b1;
    end else begin
        p_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_output_address0 = zext_ln136_15_reg_732;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        p_output_address0 = zext_ln136_13_reg_712;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        p_output_address0 = zext_ln136_11_reg_692;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        p_output_address0 = zext_ln136_9_reg_672;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_output_address0 = zext_ln136_7_reg_652;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_output_address0 = zext_ln136_5_reg_632;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_output_address0 = zext_ln136_3_reg_612;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_output_address0 = zext_ln136_1_reg_592;
    end else begin
        p_output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_output_address1 = zext_ln136_14_reg_722;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        p_output_address1 = zext_ln136_12_reg_702;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        p_output_address1 = zext_ln136_10_reg_682;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        p_output_address1 = zext_ln136_8_reg_662;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_output_address1 = zext_ln136_6_reg_642;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_output_address1 = zext_ln136_4_reg_622;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_output_address1 = zext_ln136_2_reg_602;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_output_address1 = zext_ln136_reg_582;
    end else begin
        p_output_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_output_ce0 = 1'b1;
    end else begin
        p_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_output_ce1 = 1'b1;
    end else begin
        p_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln130_reg_555 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_output_we0 = 1'b1;
    end else begin
        p_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln130_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln130_reg_555 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_output_we1 = 1'b1;
    end else begin
        p_output_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln130_fu_371_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln130_fu_371_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_fu_376_p2 = (ap_phi_mux_i_phi_fu_354_p4 + 28'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_fu_382_p1 = ap_phi_mux_i_phi_fu_354_p4[5:0];

assign icmp_ln130_fu_371_p2 = ((ap_phi_mux_i_phi_fu_354_p4 == trunc_ln_reg_550) ? 1'b1 : 1'b0);

assign or_ln136_10_fu_500_p2 = (tmp_s_reg_564 | 10'd11);

assign or_ln136_11_fu_510_p2 = (tmp_s_reg_564 | 10'd12);

assign or_ln136_12_fu_520_p2 = (tmp_s_reg_564 | 10'd13);

assign or_ln136_13_fu_530_p2 = (tmp_s_reg_564 | 10'd14);

assign or_ln136_14_fu_540_p2 = (tmp_s_reg_564 | 10'd15);

assign or_ln136_1_fu_410_p2 = (tmp_s_reg_564 | 10'd2);

assign or_ln136_2_fu_420_p2 = (tmp_s_reg_564 | 10'd3);

assign or_ln136_3_fu_430_p2 = (tmp_s_reg_564 | 10'd4);

assign or_ln136_4_fu_440_p2 = (tmp_s_reg_564 | 10'd5);

assign or_ln136_5_fu_450_p2 = (tmp_s_reg_564 | 10'd6);

assign or_ln136_6_fu_460_p2 = (tmp_s_reg_564 | 10'd7);

assign or_ln136_7_fu_470_p2 = (tmp_s_reg_564 | 10'd8);

assign or_ln136_8_fu_480_p2 = (tmp_s_reg_564 | 10'd9);

assign or_ln136_9_fu_490_p2 = (tmp_s_reg_564 | 10'd10);

assign or_ln136_fu_399_p2 = (tmp_s_fu_386_p3 | 10'd1);

assign p_output_d0 = p_input_q0;

assign p_output_d1 = p_input_q1;

assign tmp_s_fu_386_p3 = {{empty_fu_382_p1}, {4'd0}};

assign zext_ln136_10_fu_495_p1 = or_ln136_9_fu_490_p2;

assign zext_ln136_11_fu_505_p1 = or_ln136_10_fu_500_p2;

assign zext_ln136_12_fu_515_p1 = or_ln136_11_fu_510_p2;

assign zext_ln136_13_fu_525_p1 = or_ln136_12_fu_520_p2;

assign zext_ln136_14_fu_535_p1 = or_ln136_13_fu_530_p2;

assign zext_ln136_15_fu_545_p1 = or_ln136_14_fu_540_p2;

assign zext_ln136_1_fu_405_p1 = or_ln136_fu_399_p2;

assign zext_ln136_2_fu_415_p1 = or_ln136_1_fu_410_p2;

assign zext_ln136_3_fu_425_p1 = or_ln136_2_fu_420_p2;

assign zext_ln136_4_fu_435_p1 = or_ln136_3_fu_430_p2;

assign zext_ln136_5_fu_445_p1 = or_ln136_4_fu_440_p2;

assign zext_ln136_6_fu_455_p1 = or_ln136_5_fu_450_p2;

assign zext_ln136_7_fu_465_p1 = or_ln136_6_fu_460_p2;

assign zext_ln136_8_fu_475_p1 = or_ln136_7_fu_470_p2;

assign zext_ln136_9_fu_485_p1 = or_ln136_8_fu_480_p2;

assign zext_ln136_fu_394_p1 = tmp_s_fu_386_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_564[3:0] <= 4'b0000;
    zext_ln136_reg_582[3:0] <= 4'b0000;
    zext_ln136_reg_582[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_1_reg_592[3:0] <= 4'b0001;
    zext_ln136_1_reg_592[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_2_reg_602[3:0] <= 4'b0010;
    zext_ln136_2_reg_602[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_3_reg_612[3:0] <= 4'b0011;
    zext_ln136_3_reg_612[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_4_reg_622[3:0] <= 4'b0100;
    zext_ln136_4_reg_622[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_5_reg_632[3:0] <= 4'b0101;
    zext_ln136_5_reg_632[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_6_reg_642[3:0] <= 4'b0110;
    zext_ln136_6_reg_642[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_7_reg_652[3:0] <= 4'b0111;
    zext_ln136_7_reg_652[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_8_reg_662[3:0] <= 4'b1000;
    zext_ln136_8_reg_662[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_9_reg_672[3:0] <= 4'b1001;
    zext_ln136_9_reg_672[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_10_reg_682[3:0] <= 4'b1010;
    zext_ln136_10_reg_682[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_11_reg_692[3:0] <= 4'b1011;
    zext_ln136_11_reg_692[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_12_reg_702[3:0] <= 4'b1100;
    zext_ln136_12_reg_702[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_13_reg_712[3:0] <= 4'b1101;
    zext_ln136_13_reg_712[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_14_reg_722[3:0] <= 4'b1110;
    zext_ln136_14_reg_722[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln136_15_reg_732[3:0] <= 4'b1111;
    zext_ln136_15_reg_732[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //MLP_copyArray_float_16u_2
