-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\FCS_MPC_switching_states_2_level_inverter\hdlsrc\FCS_MPC_switching_states_2_level_inverter\FCS_MPC_switching_states_2_level_inverter.vhd
-- Created: 2022-06-13 10:41:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FCS_MPC_switching_states_2_level_inverter
-- Source Path: FCS_MPC_switching_states_2_level_inverter
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY FCS_MPC_switching_states_2_level_inverter IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        I                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        done_min_J                        :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        HB1T                              :   OUT   std_logic;  -- ufix1
        HB1B                              :   OUT   std_logic;  -- ufix1
        HB2T                              :   OUT   std_logic;  -- ufix1
        HB2B                              :   OUT   std_logic;  -- ufix1
        HB3T                              :   OUT   std_logic;  -- ufix1
        HB3B                              :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END FCS_MPC_switching_states_2_level_inverter;


ARCHITECTURE rtl OF FCS_MPC_switching_states_2_level_inverter IS

  -- Component Declarations
  COMPONENT FCS_MPC_switching_states_2_level_inverter_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FCS_MPC_switching_states_2_level_inverter_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT FCS_MPC_switching_states_2_level_inverter_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          I                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          done_min_J                      :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          HB1T                            :   OUT   std_logic;  -- ufix1
          HB1B                            :   OUT   std_logic;  -- ufix1
          HB2T                            :   OUT   std_logic;  -- ufix1
          HB2B                            :   OUT   std_logic;  -- ufix1
          HB3T                            :   OUT   std_logic;  -- ufix1
          HB3B                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : FCS_MPC_switching_states_2_level_inverter_reset_sync
    USE ENTITY work.FCS_MPC_switching_states_2_level_inverter_reset_sync(rtl);

  FOR ALL : FCS_MPC_switching_states_2_level_inverter_axi_lite
    USE ENTITY work.FCS_MPC_switching_states_2_level_inverter_axi_lite(rtl);

  FOR ALL : FCS_MPC_switching_states_2_level_inverter_dut
    USE ENTITY work.FCS_MPC_switching_states_2_level_inverter_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL I_unsigned                       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL I_sig                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL HB1T_sig                         : std_logic;  -- ufix1
  SIGNAL HB1B_sig                         : std_logic;  -- ufix1
  SIGNAL HB2T_sig                         : std_logic;  -- ufix1
  SIGNAL HB2B_sig                         : std_logic;  -- ufix1
  SIGNAL HB3T_sig                         : std_logic;  -- ufix1
  SIGNAL HB3B_sig                         : std_logic;  -- ufix1

BEGIN
  u_FCS_MPC_switching_states_2_level_inverter_reset_sync_inst : FCS_MPC_switching_states_2_level_inverter_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_FCS_MPC_switching_states_2_level_inverter_axi_lite_inst : FCS_MPC_switching_states_2_level_inverter_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              reset_internal => reset_internal  -- ufix1
              );

  u_FCS_MPC_switching_states_2_level_inverter_dut_inst : FCS_MPC_switching_states_2_level_inverter_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              I => std_logic_vector(I_sig),  -- sfix32
              done_min_J => done_min_J,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              HB1T => HB1T_sig,  -- ufix1
              HB1B => HB1B_sig,  -- ufix1
              HB2T => HB2T_sig,  -- ufix1
              HB2B => HB2B_sig,  -- ufix1
              HB3T => HB3T_sig,  -- ufix1
              HB3B => HB3B_sig  -- ufix1
              );

  ip_timestamp <= unsigned'(X"837EE361");

  reset_cm <=  NOT IPCORE_RESETN;

  reset_before_sync <= reset_cm OR reset_internal;

  I_unsigned <= unsigned(I);

  I_sig <= signed(I_unsigned);

  HB1T <= HB1T_sig;

  HB1B <= HB1B_sig;

  HB2T <= HB2T_sig;

  HB2B <= HB2B_sig;

  HB3T <= HB3T_sig;

  HB3B <= HB3B_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

