-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_src_nfp_mul_single.vhd
-- Created: 2022-05-18 16:47:48
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_src_nfp_mul_single
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph/nfp_mul_single
-- Hierarchy Level: 2
-- 
-- {Latency Strategy = "Min", Denormal Handling = "on"}
-- {Mantissa Multiply Strategy = "PartMultiplierPartAddShift"}
-- {Part Add Shift Multiplier Size = "18x24"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_src_nfp_mul_single IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        nfp_in1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_in2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_pmsm_model_9ph_opti_src_nfp_mul_single;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_src_nfp_mul_single IS

  -- Signals
  SIGNAL nfp_in2_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL BS                               : std_logic;  -- ufix1
  SIGNAL BE                               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL BM                               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Delay16_out1                     : std_logic;
  SIGNAL Compare_To_Zero3_out1            : std_logic;
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL nfp_in1_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL AS                               : std_logic;  -- ufix1
  SIGNAL AE                               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL AM                               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Delay21_out1                     : std_logic;
  SIGNAL Compare_To_Zero2_out1            : std_logic;
  SIGNAL Delay19_out1                     : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL Delay_reg_next                   : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_add_cast                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant6_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Compare_To_Zero1_out1            : std_logic;
  SIGNAL Delay20_out1                     : std_logic;
  SIGNAL Constant3_out1                   : std_logic;  -- ufix1
  SIGNAL Constant2_out1                   : std_logic;  -- ufix1
  SIGNAL Switch2_out1                     : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;
  SIGNAL Delay8_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Concat1_out1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Constant4_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch3_out1                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BitSlice9_out1                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Delay23_out1                     : std_logic;
  SIGNAL Constant1_out1                   : std_logic;  -- ufix1
  SIGNAL Constant_out1                    : std_logic;  -- ufix1
  SIGNAL Switch1_out1_1                   : std_logic;  -- ufix1
  SIGNAL Delay6_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Constant5_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch_out1_1                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Product_out1                     : unsigned(41 DOWNTO 0);  -- ufix42
  SIGNAL BitSlice5_out1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL DTC6_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL C1_out1                          : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Constant1_out1_1                 : std_logic;
  SIGNAL Bit_Slice_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Sum1_out1                        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL DTC6_out1_1                      : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Bit_Concat2_out1                 : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL DTC4_out1                        : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_1               : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Mux1_out1                        : vector_of_unsigned26(0 TO 3);  -- ufix26 [4]
  SIGNAL Selector5_out1                   : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Bit_Slice3_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Sum2_out1                        : unsigned(42 DOWNTO 0);  -- ufix43
  SIGNAL Bit_Slice4_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat4_out1                 : unsigned(44 DOWNTO 0);  -- ufix45
  SIGNAL Delay4_out1_1                    : unsigned(44 DOWNTO 0);  -- ufix45
  SIGNAL BitSlice4_out1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL DTC7_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector4_out1                   : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL BitSlice1_out1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL DTC8_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector3_out1                   : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Bit_Slice1_out1_1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Sum31_out1                       : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Bit_Slice2_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat3_out1                 : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL Delay19_out1_1                   : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL Bit_Slice5_out1                  : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL FinalSum1_out1                   : unsigned(45 DOWNTO 0);  -- ufix46
  SIGNAL Bit_Slice6_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat1_out1_2               : unsigned(49 DOWNTO 0);  -- ufix50
  SIGNAL Data_Type_Conversion_out1        : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL Constant1_out1_2                 : std_logic;
  SIGNAL Bit_Concat_out1_1                : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Compare_To_Zero1_out1_1          : std_logic;
  SIGNAL Delay4_out1_2                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant2_out1_1                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant1_out1_3                 : std_logic;
  SIGNAL Constant3_out1_1                 : std_logic;
  SIGNAL Switch_out1_2                    : std_logic;
  SIGNAL Bit_Concat1_out1_3               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch1_out1_2                   : std_logic;
  SIGNAL Logical_Operator1_out1_1         : std_logic;
  SIGNAL Delay5_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Subtract_out1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat_out1_2                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add1_out1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Subtract2_sub_cast               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Subtract2_sub_cast_1             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Subtract2_sub_temp               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Subtract2_out1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Constant4_out1_1                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Switch2_out1_1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay27_out1                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Constant_out1_1                  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Switch1_out1_3                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay5_out1_1                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice25_out1                 : std_logic;  -- ufix1
  SIGNAL Constant25_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice24_out1                 : std_logic;  -- ufix1
  SIGNAL Constant24_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch24_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice23_out1                 : std_logic;  -- ufix1
  SIGNAL Constant23_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch23_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice22_out1                 : std_logic;  -- ufix1
  SIGNAL Constant22_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch22_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice21_out1                 : std_logic;  -- ufix1
  SIGNAL Constant21_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch21_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice10_out1                 : std_logic;  -- ufix1
  SIGNAL Constant20_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch20_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice19_out1                 : std_logic;  -- ufix1
  SIGNAL Constant19_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch19_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice18_out1                 : std_logic;  -- ufix1
  SIGNAL Constant18_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch18_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice17_out1                 : std_logic;  -- ufix1
  SIGNAL Constant17_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch17_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice16_out1                 : std_logic;  -- ufix1
  SIGNAL Constant16_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch16_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice15_out1                 : std_logic;  -- ufix1
  SIGNAL Constant15_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch15_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice14_out1                 : std_logic;  -- ufix1
  SIGNAL Constant14_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch14_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice13_out1                 : std_logic;  -- ufix1
  SIGNAL Constant13_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch13_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice12_out1                 : std_logic;  -- ufix1
  SIGNAL Constant12_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch12_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice11_out1                 : std_logic;  -- ufix1
  SIGNAL Constant11_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch11_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Constant10_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch10_out1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice9_out1                  : std_logic;  -- ufix1
  SIGNAL Constant9_out1                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch9_out1                     : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice8_out1                  : std_logic;  -- ufix1
  SIGNAL Constant8_out1_1                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch8_out1                     : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Constant7_out1_1                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch7_out1                     : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice6_out1_1                : std_logic;  -- ufix1
  SIGNAL Constant6_out1_1                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch6_out1                     : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice5_out1_1                : std_logic;  -- ufix1
  SIGNAL Constant5_out1_1                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch5_out1                     : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice4_out1_1                : std_logic;  -- ufix1
  SIGNAL Constant4_out1_2                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch4_out1                     : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Constant3_out1_2                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch3_out1_1                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice2_out1_1                : std_logic;  -- ufix1
  SIGNAL Constant2_out1_2                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch2_out1_2                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice1_out1_2                : std_logic;  -- ufix1
  SIGNAL Constant1_out1_4                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch1_out1_4                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Constant26_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch_out1_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Delay1_out1                      : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Add_sub_temp                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_1                       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL Delay3_out1_2                    : std_logic;
  SIGNAL Delay5_out1_2                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Constant1_out1_5                 : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Constant1_out1_dtc               : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Switch_out1_4                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay18_out1                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;
  SIGNAL Logical_Operator1_out1_2         : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Logical_Operator7_out1           : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL Logical_Operator8_out1           : std_logic;
  SIGNAL Inf_Zero_out1                    : std_logic;
  SIGNAL Logical_Operator2_out1_1         : std_logic;
  SIGNAL Logical_Operator10_out1          : std_logic;
  SIGNAL Delay13_reg                      : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay13_reg_next                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL Logical_Operator_out1_4          : std_logic;
  SIGNAL Compare_To_Constant_out1_2       : std_logic;
  SIGNAL Constant1_out1_6                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1                      : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Compare_To_Zero_out1_1           : std_logic;
  SIGNAL Bit_Slice_out1_2                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Shift_Arithmetic_out1            : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Bit_Shift_out1                   : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Delay3_out1_3                    : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Switch_out1_5                    : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Delay2_out1_1                    : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Constant_out1_2                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Subtract_sub_temp                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Subtract_out1_1                  : signed(15 DOWNTO 0);  -- int16
  SIGNAL Compare_To_Constant_out1_3       : std_logic;
  SIGNAL Subtract_out1_dtc                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Compare_To_Constant1_out1_2      : std_logic;
  SIGNAL Constant1_out1_7                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch_out1_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Constant2_out1_3                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Switch1_out1_5                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Delay4_out1_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Unary_Minus_in0                  : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL Unary_Minus_out1                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL shift_arithmetic_shift_direction : std_logic;
  SIGNAL Constant_out1_3                  : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Bit_Concat_out1_3                : unsigned(79 DOWNTO 0);  -- ufix80
  SIGNAL Delay1_out1_1                    : unsigned(79 DOWNTO 0);  -- ufix80
  SIGNAL shift_arithmetic_abs_y           : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL shift_arithmetic_shift_value     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL shift_arithmetic_right           : unsigned(79 DOWNTO 0);  -- ufix80
  SIGNAL shift_arithmetic_left            : unsigned(79 DOWNTO 0);  -- ufix80
  SIGNAL Shift_Arithmetic_out1_1          : unsigned(79 DOWNTO 0);  -- ufix80
  SIGNAL Bit_Slice1_out1_3                : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Bit_Slice_out1_3                 : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Bit_Set_out1                     : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Switch2_out1_3                   : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Switch1_out1_6                   : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Bit_Slice_out1_4                 : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL Bit_Slice2_out1_2                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Slice4_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_4                : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL Bit_Reduce_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_3         : std_logic;
  SIGNAL Logical_Operator_out1_5          : std_logic;
  SIGNAL Delay1_out1_2                    : std_logic;
  SIGNAL Bit_Slice1_out1_5                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Slice1_out1_6                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Slice1_out1_dtc              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Constant_out1_4                  : std_logic;
  SIGNAL Add_add_cast_1                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1_2                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch_out1_7                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice2_out1_3                : std_logic;  -- ufix1
  SIGNAL Add1_add_cast                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_add_cast_2                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_add_temp                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_3                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant1_out1_8                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch1_out1_7                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant4_out1_3                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch4_out1_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch6_out1_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay1_out1_3                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice4_out1_3                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Shift_out1_1                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch1_out1_8                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant2_out1_4                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch2_out1_4                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant5_out1_2                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Set_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch7_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch5_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay2_out1_2                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 32 bit word into FP sign, exponent, mantissa
  BS <= nfp_in2_unsigned(31);
  BE <= nfp_in2_unsigned(30 DOWNTO 23);
  BM <= nfp_in2_unsigned(22 DOWNTO 0);

  
  Compare_To_Constant1_out1 <= '1' WHEN BE = to_unsigned(16#FF#, 8) ELSE
      '0';

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay16_out1 <= Compare_To_Constant1_out1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Compare_To_Zero3_out1 <= '1' WHEN BM /= to_unsigned(16#000000#, 23) ELSE
      '0';

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay14_out1 <= Compare_To_Zero3_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Logical_Operator1_out1 <= Delay16_out1 AND Delay14_out1;

  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 32 bit word into FP sign, exponent, mantissa
  AS <= nfp_in1_unsigned(31);
  AE <= nfp_in1_unsigned(30 DOWNTO 23);
  AM <= nfp_in1_unsigned(22 DOWNTO 0);

  
  Compare_To_Constant_out1 <= '1' WHEN AE = to_unsigned(16#FF#, 8) ELSE
      '0';

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay21_out1 <= Compare_To_Constant_out1;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  
  Compare_To_Zero2_out1 <= '1' WHEN AM /= to_unsigned(16#000000#, 23) ELSE
      '0';

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay19_out1 <= Compare_To_Zero2_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  Logical_Operator_out1 <= Delay21_out1 AND Delay19_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= AS;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= BS;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Logical_Operator_out1_1 <= Delay3_out1 XOR Delay7_out1;

  
  Switch_out1 <= Logical_Operator_out1_1 WHEN Logical_Operator_out1 = '0' ELSE
      Delay3_out1;

  
  Switch1_out1 <= Switch_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      Delay7_out1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg(0) <= '0';
        Delay_reg(1) <= '0';
        Delay_reg(2) <= '0';
        Delay_reg(3) <= '0';
        Delay_reg(4) <= '0';
      ELSIF enb = '1' THEN
        Delay_reg(0) <= Delay_reg_next(0);
        Delay_reg(1) <= Delay_reg_next(1);
        Delay_reg(2) <= Delay_reg_next(2);
        Delay_reg(3) <= Delay_reg_next(3);
        Delay_reg(4) <= Delay_reg_next(4);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(4);
  Delay_reg_next(0) <= Switch1_out1;
  Delay_reg_next(1) <= Delay_reg(0);
  Delay_reg_next(2) <= Delay_reg(1);
  Delay_reg_next(3) <= Delay_reg(2);
  Delay_reg_next(4) <= Delay_reg(3);

  Constant8_out1 <= '1';

  Constant7_out1 <= to_unsigned(16#06#, 8);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator2_out1 <=  NOT Delay4_out1;

  Logical_Operator_out1_2 <= Constant8_out1 AND Logical_Operator2_out1;

  Delay3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_1_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1_2;
  Add_out1 <= Delay3_out1_1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 >= Constant7_out1 ELSE
      '0';

  Constant6_out1 <= to_unsigned(16#00#, 8);

  Logical_Operator3_out1 <=  NOT Logical_Operator1_out1;

  
  Compare_To_Zero1_out1 <= '1' WHEN BE = to_unsigned(16#00#, 8) ELSE
      '0';

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay20_out1 <= Compare_To_Zero1_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  Constant3_out1 <= '1';

  Constant2_out1 <= '0';

  
  Switch2_out1 <= Constant3_out1 WHEN Delay20_out1 = '0' ELSE
      Constant2_out1;

  Logical_Operator_out1_3 <= Logical_Operator_out1 AND Logical_Operator3_out1;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay8_out1 <= BM;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Bit_Concat1_out1 <= Switch2_out1 & Delay8_out1;

  Constant4_out1 <= to_unsigned(16#800000#, 24);

  
  Switch3_out1 <= Bit_Concat1_out1 WHEN Logical_Operator_out1_3 = '0' ELSE
      Constant4_out1;

  BitSlice9_out1 <= Switch3_out1(23 DOWNTO 6);

  
  Compare_To_Zero_out1 <= '1' WHEN AE = to_unsigned(16#00#, 8) ELSE
      '0';

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay23_out1 <= Compare_To_Zero_out1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  Constant1_out1 <= '1';

  Constant_out1 <= '0';

  
  Switch1_out1_1 <= Constant1_out1 WHEN Delay23_out1 = '0' ELSE
      Constant_out1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay6_out1 <= AM;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Bit_Concat_out1 <= Switch1_out1_1 & Delay6_out1;

  Constant5_out1 <= to_unsigned(16#800000#, 24);

  
  Switch_out1_1 <= Bit_Concat_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      Constant5_out1;

  Product_out1 <= BitSlice9_out1 * Switch_out1_1;

  BitSlice5_out1 <= Switch3_out1(5 DOWNTO 4);

  DTC6_out1 <= resize(BitSlice5_out1, 8);

  C1_out1 <= to_unsigned(16#0000000#, 26);

  Constant1_out1_1 <= '0';

  Bit_Slice_out1 <= Switch_out1_1(23 DOWNTO 1);

  Sum1_out1 <= resize(resize(Switch_out1_1, 32) + resize(Bit_Slice_out1, 32), 25);

  DTC6_out1_1 <= resize(Switch_out1_1, 26);

  Bit_Concat2_out1 <= Switch_out1_1 & Constant1_out1_1;

  DTC4_out1 <= resize(Bit_Concat2_out1, 26);

  Bit_Slice1_out1 <= Switch_out1_1(0);

  Bit_Concat1_out1_1 <= Sum1_out1 & Bit_Slice1_out1;

  Mux1_out1(0) <= C1_out1;
  Mux1_out1(1) <= DTC6_out1_1;
  Mux1_out1(2) <= DTC4_out1;
  Mux1_out1(3) <= Bit_Concat1_out1_1;

  
  Selector5_out1 <= Mux1_out1(0) WHEN DTC6_out1 = to_unsigned(16#00#, 8) ELSE
      Mux1_out1(1) WHEN DTC6_out1 = to_unsigned(16#01#, 8) ELSE
      Mux1_out1(2) WHEN DTC6_out1 = to_unsigned(16#02#, 8) ELSE
      Mux1_out1(3);

  Bit_Slice3_out1 <= Selector5_out1(25 DOWNTO 2);

  Sum2_out1 <= resize(Product_out1, 43) + resize(Bit_Slice3_out1, 43);

  Bit_Slice4_out1 <= Selector5_out1(1 DOWNTO 0);

  Bit_Concat4_out1 <= Sum2_out1 & Bit_Slice4_out1;

  Delay4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_1 <= to_unsigned(0, 45);
      ELSIF enb = '1' THEN
        Delay4_out1_1 <= Bit_Concat4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_1_process;


  BitSlice4_out1 <= Switch3_out1(3 DOWNTO 2);

  DTC7_out1 <= resize(BitSlice4_out1, 8);

  
  Selector4_out1 <= Mux1_out1(0) WHEN DTC7_out1 = to_unsigned(16#00#, 8) ELSE
      Mux1_out1(1) WHEN DTC7_out1 = to_unsigned(16#01#, 8) ELSE
      Mux1_out1(2) WHEN DTC7_out1 = to_unsigned(16#02#, 8) ELSE
      Mux1_out1(3);

  BitSlice1_out1 <= Switch3_out1(1 DOWNTO 0);

  DTC8_out1 <= resize(BitSlice1_out1, 8);

  
  Selector3_out1 <= Mux1_out1(0) WHEN DTC8_out1 = to_unsigned(16#00#, 8) ELSE
      Mux1_out1(1) WHEN DTC8_out1 = to_unsigned(16#01#, 8) ELSE
      Mux1_out1(2) WHEN DTC8_out1 = to_unsigned(16#02#, 8) ELSE
      Mux1_out1(3);

  Bit_Slice1_out1_1 <= Selector3_out1(25 DOWNTO 2);

  Sum31_out1 <= resize(resize(Selector4_out1, 32) + resize(Bit_Slice1_out1_1, 32), 27);

  Bit_Slice2_out1 <= Selector3_out1(1 DOWNTO 0);

  Bit_Concat3_out1 <= Sum31_out1 & Bit_Slice2_out1;

  Delay19_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1_1 <= to_unsigned(16#00000000#, 29);
      ELSIF enb = '1' THEN
        Delay19_out1_1 <= Bit_Concat3_out1;
      END IF;
    END IF;
  END PROCESS Delay19_1_process;


  Bit_Slice5_out1 <= Delay19_out1_1(28 DOWNTO 4);

  FinalSum1_out1 <= resize(Delay4_out1_1, 46) + resize(Bit_Slice5_out1, 46);

  Bit_Slice6_out1 <= Delay19_out1_1(3 DOWNTO 0);

  Bit_Concat1_out1_2 <= FinalSum1_out1 & Bit_Slice6_out1;

  Data_Type_Conversion_out1 <= Bit_Concat1_out1_2(47 DOWNTO 0);

  Constant1_out1_2 <= '0';

  Bit_Concat_out1_1 <= Data_Type_Conversion_out1 & Constant1_out1_2;

  
  Compare_To_Zero1_out1_1 <= '1' WHEN Bit_Concat_out1_1 = to_unsigned(0, 49) ELSE
      '0';

  Delay4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay4_out1_2 <= AE;
      END IF;
    END IF;
  END PROCESS Delay4_2_process;


  Constant2_out1_1 <= to_unsigned(16#3F#, 7);

  Constant1_out1_3 <= '1';

  Constant3_out1_1 <= '0';

  
  Switch_out1_2 <= Constant1_out1_3 WHEN Delay23_out1 = '0' ELSE
      Constant3_out1_1;

  Bit_Concat1_out1_3 <= Constant2_out1_1 & Switch_out1_2;

  
  Switch1_out1_2 <= Constant1_out1_3 WHEN Delay20_out1 = '0' ELSE
      Constant3_out1_1;

  Logical_Operator1_out1_1 <= Delay21_out1 OR Delay16_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay5_out1 <= BE;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Subtract_out1 <= resize(resize(Delay4_out1_2, 32) + resize(Delay5_out1, 32), 9);

  Bit_Concat_out1_2 <= Constant2_out1_1 & Switch1_out1_2;

  Add1_out1 <= resize(resize(Bit_Concat1_out1_3, 32) + resize(Bit_Concat_out1_2, 32), 9);

  Subtract2_sub_cast <= signed(resize(Subtract_out1, 32));
  Subtract2_sub_cast_1 <= signed(resize(Add1_out1, 32));
  Subtract2_sub_temp <= Subtract2_sub_cast - Subtract2_sub_cast_1;
  Subtract2_out1 <= Subtract2_sub_temp(9 DOWNTO 0);

  Constant4_out1_1 <= to_signed(16#0FF#, 10);

  
  Switch2_out1_1 <= Subtract2_out1 WHEN Logical_Operator1_out1_1 = '0' ELSE
      Constant4_out1_1;

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay27_out1 <= Switch2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  Constant_out1_1 <= to_signed(-16#0FF#, 10);

  
  Switch1_out1_3 <= Delay27_out1 WHEN Compare_To_Zero1_out1_1 = '0' ELSE
      Constant_out1_1;

  Delay5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay5_out1_1 <= Switch1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay5_1_process;


  Bit_Slice25_out1 <= Bit_Concat_out1_1(24);

  Constant25_out1 <= to_signed(16#18#, 6);

  Bit_Slice24_out1 <= Bit_Concat_out1_1(25);

  Constant24_out1 <= to_signed(16#17#, 6);

  
  Switch24_out1 <= Constant25_out1 WHEN Bit_Slice25_out1 = '0' ELSE
      Constant24_out1;

  Bit_Slice23_out1 <= Bit_Concat_out1_1(26);

  Constant23_out1 <= to_signed(16#16#, 6);

  
  Switch23_out1 <= Switch24_out1 WHEN Bit_Slice24_out1 = '0' ELSE
      Constant23_out1;

  Bit_Slice22_out1 <= Bit_Concat_out1_1(27);

  Constant22_out1 <= to_signed(16#15#, 6);

  
  Switch22_out1 <= Switch23_out1 WHEN Bit_Slice23_out1 = '0' ELSE
      Constant22_out1;

  Bit_Slice21_out1 <= Bit_Concat_out1_1(28);

  Constant21_out1 <= to_signed(16#14#, 6);

  
  Switch21_out1 <= Switch22_out1 WHEN Bit_Slice22_out1 = '0' ELSE
      Constant21_out1;

  Bit_Slice10_out1 <= Bit_Concat_out1_1(29);

  Constant20_out1 <= to_signed(16#13#, 6);

  
  Switch20_out1 <= Switch21_out1 WHEN Bit_Slice21_out1 = '0' ELSE
      Constant20_out1;

  Bit_Slice19_out1 <= Bit_Concat_out1_1(30);

  Constant19_out1 <= to_signed(16#12#, 6);

  
  Switch19_out1 <= Switch20_out1 WHEN Bit_Slice10_out1 = '0' ELSE
      Constant19_out1;

  Bit_Slice18_out1 <= Bit_Concat_out1_1(31);

  Constant18_out1 <= to_signed(16#11#, 6);

  
  Switch18_out1 <= Switch19_out1 WHEN Bit_Slice19_out1 = '0' ELSE
      Constant18_out1;

  Bit_Slice17_out1 <= Bit_Concat_out1_1(32);

  Constant17_out1 <= to_signed(16#10#, 6);

  
  Switch17_out1 <= Switch18_out1 WHEN Bit_Slice18_out1 = '0' ELSE
      Constant17_out1;

  Bit_Slice16_out1 <= Bit_Concat_out1_1(33);

  Constant16_out1 <= to_signed(16#0F#, 6);

  
  Switch16_out1 <= Switch17_out1 WHEN Bit_Slice17_out1 = '0' ELSE
      Constant16_out1;

  Bit_Slice15_out1 <= Bit_Concat_out1_1(34);

  Constant15_out1 <= to_signed(16#0E#, 6);

  
  Switch15_out1 <= Switch16_out1 WHEN Bit_Slice16_out1 = '0' ELSE
      Constant15_out1;

  Bit_Slice14_out1 <= Bit_Concat_out1_1(35);

  Constant14_out1 <= to_signed(16#0D#, 6);

  
  Switch14_out1 <= Switch15_out1 WHEN Bit_Slice15_out1 = '0' ELSE
      Constant14_out1;

  Bit_Slice13_out1 <= Bit_Concat_out1_1(36);

  Constant13_out1 <= to_signed(16#0C#, 6);

  
  Switch13_out1 <= Switch14_out1 WHEN Bit_Slice14_out1 = '0' ELSE
      Constant13_out1;

  Bit_Slice12_out1 <= Bit_Concat_out1_1(37);

  Constant12_out1 <= to_signed(16#0B#, 6);

  
  Switch12_out1 <= Switch13_out1 WHEN Bit_Slice13_out1 = '0' ELSE
      Constant12_out1;

  Bit_Slice11_out1 <= Bit_Concat_out1_1(38);

  Constant11_out1 <= to_signed(16#0A#, 6);

  
  Switch11_out1 <= Switch12_out1 WHEN Bit_Slice12_out1 = '0' ELSE
      Constant11_out1;

  Bit_Slice_out1_1 <= Bit_Concat_out1_1(39);

  Constant10_out1 <= to_signed(16#09#, 6);

  
  Switch10_out1 <= Switch11_out1 WHEN Bit_Slice11_out1 = '0' ELSE
      Constant10_out1;

  Bit_Slice9_out1 <= Bit_Concat_out1_1(40);

  Constant9_out1 <= to_signed(16#08#, 6);

  
  Switch9_out1 <= Switch10_out1 WHEN Bit_Slice_out1_1 = '0' ELSE
      Constant9_out1;

  Bit_Slice8_out1 <= Bit_Concat_out1_1(41);

  Constant8_out1_1 <= to_signed(16#07#, 6);

  
  Switch8_out1 <= Switch9_out1 WHEN Bit_Slice9_out1 = '0' ELSE
      Constant8_out1_1;

  Bit_Slice7_out1 <= Bit_Concat_out1_1(42);

  Constant7_out1_1 <= to_signed(16#06#, 6);

  
  Switch7_out1 <= Switch8_out1 WHEN Bit_Slice8_out1 = '0' ELSE
      Constant7_out1_1;

  Bit_Slice6_out1_1 <= Bit_Concat_out1_1(43);

  Constant6_out1_1 <= to_signed(16#05#, 6);

  
  Switch6_out1 <= Switch7_out1 WHEN Bit_Slice7_out1 = '0' ELSE
      Constant6_out1_1;

  Bit_Slice5_out1_1 <= Bit_Concat_out1_1(44);

  Constant5_out1_1 <= to_signed(16#04#, 6);

  
  Switch5_out1 <= Switch6_out1 WHEN Bit_Slice6_out1_1 = '0' ELSE
      Constant5_out1_1;

  Bit_Slice4_out1_1 <= Bit_Concat_out1_1(45);

  Constant4_out1_2 <= to_signed(16#03#, 6);

  
  Switch4_out1 <= Switch5_out1 WHEN Bit_Slice5_out1_1 = '0' ELSE
      Constant4_out1_2;

  Bit_Slice3_out1_1 <= Bit_Concat_out1_1(46);

  Constant3_out1_2 <= to_signed(16#02#, 6);

  
  Switch3_out1_1 <= Switch4_out1 WHEN Bit_Slice4_out1_1 = '0' ELSE
      Constant3_out1_2;

  Bit_Slice2_out1_1 <= Bit_Concat_out1_1(47);

  Constant2_out1_2 <= to_signed(16#01#, 6);

  
  Switch2_out1_2 <= Switch3_out1_1 WHEN Bit_Slice3_out1_1 = '0' ELSE
      Constant2_out1_2;

  Bit_Slice1_out1_2 <= Bit_Concat_out1_1(48);

  Constant1_out1_4 <= to_signed(16#00#, 6);

  
  Switch1_out1_4 <= Switch2_out1_2 WHEN Bit_Slice2_out1_1 = '0' ELSE
      Constant1_out1_4;

  Constant26_out1 <= to_signed(-16#01#, 6);

  
  Switch_out1_3 <= Switch1_out1_4 WHEN Bit_Slice1_out1_2 = '0' ELSE
      Constant26_out1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_out1_3;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Add_sub_temp <= resize(Delay5_out1_1, 32) - resize(Delay1_out1, 32);
  Add_out1_1 <= Add_sub_temp(9 DOWNTO 0);

  
  Compare_To_Constant_out1_1 <= '1' WHEN Add_out1_1 <= to_signed(-16#07F#, 10) ELSE
      '0';

  Delay3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= Compare_To_Constant_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_2_process;


  Delay5_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_2 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay5_out1_2 <= Add_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_2_process;


  Constant1_out1_5 <= to_signed(-16#07F#, 9);

  Constant1_out1_dtc <= resize(Constant1_out1_5, 10);

  
  Switch_out1_4 <= Delay5_out1_2 WHEN Delay3_out1_2 = '0' ELSE
      Constant1_out1_dtc;

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_signed(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay18_out1 <= Switch_out1_4;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Compare_To_Constant1_out1_1 <= '1' WHEN Delay18_out1 > to_signed(16#07F#, 10) ELSE
      '0';

  Logical_Operator1_out1_2 <=  NOT Delay14_out1;

  Logical_Operator4_out1 <= Logical_Operator1_out1_2 AND Delay20_out1;

  Logical_Operator7_out1 <= Logical_Operator4_out1 AND Delay21_out1;

  Logical_Operator5_out1 <=  NOT Delay19_out1;

  Logical_Operator6_out1 <= Logical_Operator5_out1 AND Delay23_out1;

  Logical_Operator8_out1 <= Logical_Operator6_out1 AND Delay16_out1;

  Inf_Zero_out1 <= Logical_Operator7_out1 OR Logical_Operator8_out1;

  Logical_Operator2_out1_1 <= Logical_Operator_out1 OR Logical_Operator1_out1;

  Logical_Operator10_out1 <= Inf_Zero_out1 OR Logical_Operator2_out1_1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_reg(0) <= '0';
        Delay13_reg(1) <= '0';
        Delay13_reg(2) <= '0';
        Delay13_reg(3) <= '0';
      ELSIF enb = '1' THEN
        Delay13_reg(0) <= Delay13_reg_next(0);
        Delay13_reg(1) <= Delay13_reg_next(1);
        Delay13_reg(2) <= Delay13_reg_next(2);
        Delay13_reg(3) <= Delay13_reg_next(3);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1 <= Delay13_reg(3);
  Delay13_reg_next(0) <= Logical_Operator10_out1;
  Delay13_reg_next(1) <= Delay13_reg(0);
  Delay13_reg_next(2) <= Delay13_reg(1);
  Delay13_reg_next(3) <= Delay13_reg(2);

  Logical_Operator_out1_4 <= Compare_To_Constant1_out1_1 OR Delay13_out1;

  
  Compare_To_Constant_out1_2 <= '1' WHEN Delay18_out1 < to_signed(-16#07F#, 10) ELSE
      '0';

  Constant1_out1_6 <= to_unsigned(16#7F#, 8);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_unsigned(0, 49);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Bit_Concat_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Compare_To_Zero_out1_1 <= '1' WHEN Delay1_out1 < to_signed(16#00#, 6) ELSE
      '0';

  Bit_Slice_out1_2 <= unsigned(Delay1_out1(4 DOWNTO 0));

  Shift_Arithmetic_out1 <= Delay2_out1 sll to_integer(Bit_Slice_out1_2);

  Bit_Shift_out1 <= SHIFT_RIGHT(Bit_Concat_out1_1, 1);

  Delay3_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_3 <= to_unsigned(0, 49);
      ELSIF enb = '1' THEN
        Delay3_out1_3 <= Bit_Shift_out1;
      END IF;
    END IF;
  END PROCESS Delay3_3_process;


  
  Switch_out1_5 <= Shift_Arithmetic_out1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      Delay3_out1_3;

  Delay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_1 <= to_unsigned(0, 49);
      ELSIF enb = '1' THEN
        Delay2_out1_1 <= Switch_out1_5;
      END IF;
    END IF;
  END PROCESS Delay2_1_process;


  -- handling denormalized signals
  Constant_out1_2 <= to_signed(-16#07E#, 9);

  Subtract_sub_temp <= resize(Add_out1_1, 32) - resize(Constant_out1_2, 32);
  Subtract_out1_1 <= Subtract_sub_temp(15 DOWNTO 0);

  
  Compare_To_Constant_out1_3 <= '1' WHEN Subtract_out1_1 < to_signed(-16#001F#, 16) ELSE
      '0';

  Subtract_out1_dtc <= Subtract_out1_1(5 DOWNTO 0);

  
  Compare_To_Constant1_out1_2 <= '1' WHEN Subtract_out1_1 > to_signed(16#001F#, 16) ELSE
      '0';

  Constant1_out1_7 <= to_signed(-16#1F#, 6);

  
  Switch_out1_6 <= Subtract_out1_dtc WHEN Compare_To_Constant_out1_3 = '0' ELSE
      Constant1_out1_7;

  Constant2_out1_3 <= to_signed(16#1F#, 6);

  
  Switch1_out1_5 <= Switch_out1_6 WHEN Compare_To_Constant1_out1_2 = '0' ELSE
      Constant2_out1_3;

  Delay4_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_3 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay4_out1_3 <= Switch1_out1_5;
      END IF;
    END IF;
  END PROCESS Delay4_3_process;


  Unary_Minus_in0 <=  - (resize(Delay4_out1_3, 7));
  Unary_Minus_out1 <= Unary_Minus_in0(5 DOWNTO 0);

  
  shift_arithmetic_shift_direction <= '1' WHEN Unary_Minus_out1 < to_signed(16#00#, 6) ELSE
      '0';

  Constant_out1_3 <= to_unsigned(16#00000000#, 31);

  Bit_Concat_out1_3 <= Switch_out1_5 & Constant_out1_3;

  Delay1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_1 <= to_unsigned(0, 80);
      ELSIF enb = '1' THEN
        Delay1_out1_1 <= Bit_Concat_out1_3;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  
  shift_arithmetic_abs_y <=  - (resize(Unary_Minus_out1, 7)) WHEN Unary_Minus_out1 < to_signed(16#00#, 6) ELSE
      resize(Unary_Minus_out1, 7);
  shift_arithmetic_shift_value <= unsigned(shift_arithmetic_abs_y);

  shift_arithmetic_right <= SHIFT_RIGHT(Delay1_out1_1, to_integer(shift_arithmetic_shift_value));

  shift_arithmetic_left <= Delay1_out1_1 sll to_integer(shift_arithmetic_shift_value);

  
  Shift_Arithmetic_out1_1 <= shift_arithmetic_right WHEN shift_arithmetic_shift_direction = '0' ELSE
      shift_arithmetic_left;

  Bit_Slice1_out1_3 <= Shift_Arithmetic_out1_1(30 DOWNTO 0);

  Bit_Slice_out1_3 <= Shift_Arithmetic_out1_1(79 DOWNTO 31);

  Bit_Set_out1 <= Bit_Slice_out1_3 OR to_unsigned(1, 49);

  
  Switch2_out1_3 <= Bit_Slice_out1_3 WHEN Bit_Slice1_out1_3 = to_unsigned(0, 49) ELSE
      Bit_Set_out1;

  
  Switch1_out1_6 <= Delay2_out1_1 WHEN Delay3_out1_2 = '0' ELSE
      Switch2_out1_3;

  Bit_Slice_out1_4 <= Switch1_out1_6(47 DOWNTO 0);

  Bit_Slice2_out1_2 <= Bit_Slice_out1_4(23 DOWNTO 22);

  Bit_Slice4_out1_2 <= Bit_Slice2_out1_2(0);

  Bit_Slice1_out1_4 <= Bit_Slice_out1_4(21 DOWNTO 0);

  Bit_Reduce_out1 <= (Bit_Slice1_out1_4(21) OR Bit_Slice1_out1_4(20) OR Bit_Slice1_out1_4(19) OR Bit_Slice1_out1_4(18) OR Bit_Slice1_out1_4(17) OR Bit_Slice1_out1_4(16) OR Bit_Slice1_out1_4(15) OR Bit_Slice1_out1_4(14) OR Bit_Slice1_out1_4(13) OR Bit_Slice1_out1_4(12) OR Bit_Slice1_out1_4(11) OR Bit_Slice1_out1_4(10) OR Bit_Slice1_out1_4(9) OR Bit_Slice1_out1_4(8) OR Bit_Slice1_out1_4(7) OR Bit_Slice1_out1_4(6) OR Bit_Slice1_out1_4(5) OR Bit_Slice1_out1_4(4) OR Bit_Slice1_out1_4(3) OR Bit_Slice1_out1_4(2) OR Bit_Slice1_out1_4(1) OR Bit_Slice1_out1_4(0));

  Bit_Slice5_out1_2 <= Bit_Slice2_out1_2(1);

  Bit_Slice3_out1_2 <= Bit_Slice_out1_4(24);

  Logical_Operator1_out1_3 <= Bit_Slice3_out1_2 OR (Bit_Slice4_out1_2 OR Bit_Reduce_out1);

  Logical_Operator_out1_5 <= Bit_Slice5_out1_2 AND Logical_Operator1_out1_3;

  Delay1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= Logical_Operator_out1_5;
      END IF;
    END IF;
  END PROCESS Delay1_2_process;


  Bit_Slice1_out1_5 <= Bit_Slice_out1_4(46 DOWNTO 24);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Bit_Slice1_out1_6 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Bit_Slice1_out1_6 <= Bit_Slice1_out1_5;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Bit_Slice1_out1_dtc <= resize(Bit_Slice1_out1_6, 24);

  Constant_out1_4 <= '1';

  Add_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Constant_out1_4;
  Add_out1_2 <= resize(resize(Bit_Slice1_out1_6, 32) + Add_add_cast_1, 24);

  
  Switch_out1_7 <= Bit_Slice1_out1_dtc WHEN Delay1_out1_2 = '0' ELSE
      Add_out1_2;

  Bit_Slice2_out1_3 <= Switch_out1_7(23);

  Add1_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Bit_Slice2_out1_3;
  Add1_out1_1 <= resize(resize(Constant1_out1_6, 32) + Add1_add_cast, 8);

  Add_add_cast_2 <= signed(resize(Add1_out1_1, 32));
  Add_add_temp <= Add_add_cast_2 + resize(Delay18_out1, 32);
  Add_out1_3 <= unsigned(Add_add_temp(7 DOWNTO 0));

  Constant1_out1_8 <= to_unsigned(16#00#, 8);

  
  Switch1_out1_7 <= Add_out1_3 WHEN Compare_To_Constant_out1_2 = '0' ELSE
      Constant1_out1_8;

  Constant4_out1_3 <= to_unsigned(16#FF#, 8);

  
  Switch4_out1_1 <= Switch1_out1_7 WHEN Logical_Operator_out1_4 = '0' ELSE
      Constant4_out1_3;

  
  Switch6_out1_1 <= Constant6_out1 WHEN Relational_Operator_relop1 = '0' ELSE
      Switch4_out1_1;

  Delay1_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_3 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay1_out1_3 <= Switch6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_3_process;


  Bit_Slice4_out1_3 <= Switch_out1_7(22 DOWNTO 0);

  Bit_Shift_out1_1 <= Bit_Slice4_out1_3 srl 1;

  
  Switch1_out1_8 <= Bit_Slice4_out1_3 WHEN Bit_Slice2_out1_3 = '0' ELSE
      Bit_Shift_out1_1;

  Constant2_out1_4 <= to_unsigned(16#000000#, 23);

  
  Switch2_out1_4 <= Switch1_out1_8 WHEN Compare_To_Constant_out1_2 = '0' ELSE
      Constant2_out1_4;

  Constant5_out1_2 <= to_unsigned(16#000000#, 23);

  Bit_Set_out1_1 <= Switch2_out1_4 OR to_unsigned(16#400000#, 23);

  
  Switch7_out1_1 <= Constant5_out1_2 WHEN Delay13_out1 = '0' ELSE
      Bit_Set_out1_1;

  
  Switch5_out1_1 <= Switch2_out1_4 WHEN Logical_Operator_out1_4 = '0' ELSE
      Switch7_out1_1;

  Delay2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_2 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay2_out1_2 <= Switch5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_2_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= Delay_out1 & Delay1_out1_3 & Delay2_out1_2;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

