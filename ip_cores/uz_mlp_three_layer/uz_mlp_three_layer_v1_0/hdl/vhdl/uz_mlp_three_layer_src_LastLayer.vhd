-- -------------------------------------------------------------
-- 
-- File Name: /home/ts/Documents/integrate_nn_to_uz/ultrazohm_sw/ip_cores/nnAXI_v1_0/hdl_prj/hdlsrc/uz_mlp_three_layer/uz_mlp_three_layer_src_LastLayer.vhd
-- Created: 2021-10-22 11:38:39
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_mlp_three_layer_src_LastLayer
-- Source Path: uz_mlp_three_layer/uz_mlp_three_layer/LastLayer
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_mlp_three_layer_src_LastLayer IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        external_enable                   :   IN    std_logic;
        y_l_j                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        In1_axi_weightData                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        In1_axi_weightAddr                :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
        In1_axi_weightsWriteEnable        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        In1_axi_biasData                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        In1_axi_biasAddr                  :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
        In1_axi_biasWriteEnable           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        In1_axi_layerNr                   :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        output_half_minus_one             :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
        layer_rdy                         :   OUT   std_logic;
        finished_layer                    :   OUT   std_logic;
        j                                 :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        out_rsvd                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        out1                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        out2                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        out3                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        out4                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        out5                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        out6                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        out7                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En14
        );
END uz_mlp_three_layer_src_LastLayer;


ARCHITECTURE rtl OF uz_mlp_three_layer_src_LastLayer IS

  -- Component Declarations
  COMPONENT uz_mlp_three_layer_src_Subsystem1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          mac_counter                     :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          b                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          startin                         :   IN    std_logic;
          endin                           :   IN    std_logic;
          validIn                         :   IN    std_logic;
          n_perceptron                    :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          axi_signals_axi_weightData      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          axi_signals_axi_weightAddr      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          axi_signals_axi_weightsWriteEnable :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          axi_signals_axi_biasData        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          axi_signals_axi_biasAddr        :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          axi_signals_axi_biasWriteEnable :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          axi_signals_axi_layerNr         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          rd_dout                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          startOut                        :   OUT   std_logic;
          endOut                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_mlp_three_layer_src_StateMachines
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          end_out                         :   IN    std_logic;
          mac_startOut                    :   IN    std_logic;
          U                               :   IN    std_logic;
          output_half_minus_one           :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          n_perceptron                    :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          write_enable                    :   OUT   std_logic;
          mac_counter                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          startin                         :   OUT   std_logic;
          endin                           :   OUT   std_logic;
          validIn                         :   OUT   std_logic;
          layer_rdy                       :   OUT   std_logic;
          layer_finished                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_mlp_three_layer_src_Subsystem8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          mac_counter                     :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          b                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          startin                         :   IN    std_logic;
          validIn                         :   IN    std_logic;
          n_perceptron                    :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          axi_signals_axi_weightData      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          axi_signals_axi_weightAddr      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          axi_signals_axi_weightsWriteEnable :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          axi_signals_axi_biasData        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          axi_signals_axi_biasAddr        :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          axi_signals_axi_biasWriteEnable :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          axi_signals_axi_layerNr         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          rd_dout                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En14
          );
  END COMPONENT;

  COMPONENT uz_mlp_three_layer_src_parallelOutput
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_Upper                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          n_perceptron                    :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          write_enable                    :   IN    std_logic;
          data_lower                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          out1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          out2                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          out3                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          out4                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          out5                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          out6                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          out7                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_mlp_three_layer_src_Subsystem1
    USE ENTITY work.uz_mlp_three_layer_src_Subsystem1(rtl);

  FOR ALL : uz_mlp_three_layer_src_StateMachines
    USE ENTITY work.uz_mlp_three_layer_src_StateMachines(rtl);

  FOR ALL : uz_mlp_three_layer_src_Subsystem8
    USE ENTITY work.uz_mlp_three_layer_src_Subsystem8(rtl);

  FOR ALL : uz_mlp_three_layer_src_parallelOutput
    USE ENTITY work.uz_mlp_three_layer_src_parallelOutput(rtl);

  -- Signals
  SIGNAL StateMachines_out3               : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL mac_startIn                      : std_logic;
  SIGNAL mac_endIn                        : std_logic;
  SIGNAL mac_validIn                      : std_logic;
  SIGNAL StateMachines_out1               : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Subsystem1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subsystem1_out2                  : std_logic;
  SIGNAL Subsystem1_out3                  : std_logic;
  SIGNAL write_ram                        : std_logic;
  SIGNAL layer_finished                   : std_logic;
  SIGNAL Subsystem8_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL parallelOutput_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL parallelOutput_out2              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL parallelOutput_out3              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL parallelOutput_out4              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL parallelOutput_out5              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL parallelOutput_out6              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL parallelOutput_out7              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL parallelOutput_out8              : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_Subsystem1 : uz_mlp_three_layer_src_Subsystem1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              mac_counter => StateMachines_out3,  -- ufix10
              b => y_l_j,  -- sfix32_En14
              startin => mac_startIn,
              endin => mac_endIn,
              validIn => mac_validIn,
              n_perceptron => StateMachines_out1,  -- ufix10
              axi_signals_axi_weightData => In1_axi_weightData,  -- sfix32_En14
              axi_signals_axi_weightAddr => In1_axi_weightAddr,  -- ufix10
              axi_signals_axi_weightsWriteEnable => In1_axi_weightsWriteEnable,  -- uint8
              axi_signals_axi_biasData => In1_axi_biasData,  -- sfix32_En14
              axi_signals_axi_biasAddr => In1_axi_biasAddr,  -- ufix10
              axi_signals_axi_biasWriteEnable => In1_axi_biasWriteEnable,  -- uint8
              axi_signals_axi_layerNr => In1_axi_layerNr,  -- uint8
              rd_dout => Subsystem1_out1,  -- sfix32_En14
              startOut => Subsystem1_out2,
              endOut => Subsystem1_out3
              );

  u_StateMachines : uz_mlp_three_layer_src_StateMachines
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              end_out => Subsystem1_out3,
              mac_startOut => Subsystem1_out2,
              U => external_enable,
              output_half_minus_one => output_half_minus_one,  -- ufix10
              n_perceptron => StateMachines_out1,  -- ufix10
              write_enable => write_ram,
              mac_counter => StateMachines_out3,  -- ufix10
              startin => mac_startIn,
              endin => mac_endIn,
              validIn => mac_validIn,
              layer_rdy => layer_rdy,
              layer_finished => layer_finished
              );

  u_Subsystem8 : uz_mlp_three_layer_src_Subsystem8
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              mac_counter => StateMachines_out3,  -- ufix10
              b => y_l_j,  -- sfix32_En14
              startin => mac_startIn,
              validIn => mac_validIn,
              n_perceptron => StateMachines_out1,  -- ufix10
              axi_signals_axi_weightData => In1_axi_weightData,  -- sfix32_En14
              axi_signals_axi_weightAddr => In1_axi_weightAddr,  -- ufix10
              axi_signals_axi_weightsWriteEnable => In1_axi_weightsWriteEnable,  -- uint8
              axi_signals_axi_biasData => In1_axi_biasData,  -- sfix32_En14
              axi_signals_axi_biasAddr => In1_axi_biasAddr,  -- ufix10
              axi_signals_axi_biasWriteEnable => In1_axi_biasWriteEnable,  -- uint8
              axi_signals_axi_layerNr => In1_axi_layerNr,  -- uint8
              rd_dout => Subsystem8_out1  -- sfix32_En14
              );

  u_parallelOutput : uz_mlp_three_layer_src_parallelOutput
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              data_Upper => Subsystem1_out1,  -- sfix32_En14
              n_perceptron => StateMachines_out1,  -- ufix10
              write_enable => write_ram,
              data_lower => Subsystem8_out1,  -- sfix32_En14
              out_rsvd => parallelOutput_out1,  -- sfix32_En14
              out1 => parallelOutput_out2,  -- sfix32_En14
              out2 => parallelOutput_out3,  -- sfix32_En14
              out3 => parallelOutput_out4,  -- sfix32_En14
              out4 => parallelOutput_out5,  -- sfix32_En14
              out5 => parallelOutput_out6,  -- sfix32_En14
              out6 => parallelOutput_out7,  -- sfix32_En14
              out7 => parallelOutput_out8  -- sfix32_En14
              );

  finished_layer <= layer_finished;

  j <= StateMachines_out3;

  out_rsvd <= parallelOutput_out1;

  out1 <= parallelOutput_out2;

  out2 <= parallelOutput_out3;

  out3 <= parallelOutput_out4;

  out4 <= parallelOutput_out5;

  out5 <= parallelOutput_out6;

  out6 <= parallelOutput_out7;

  out7 <= parallelOutput_out8;

END rtl;

