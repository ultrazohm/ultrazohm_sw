-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_mpc_delay_comp\delay_com_ip_src_delay_comp.vhd
-- Created: 2022-08-24 16:14:11
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- id_pred_pu                    ce_out        1e-08
-- iq_pred_pu                    ce_out        1e-08
-- ix_pred_pu                    ce_out        1e-08
-- iy_pred_pu                    ce_out        1e-08
-- id_pred_pu_AXI                ce_out        1e-08
-- iq_pred_pu_AXI                ce_out        1e-08
-- ix_pred_pu_AXI                ce_out        1e-08
-- iy_pred_pu_AXI                ce_out        1e-08
-- calc_done                     ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: delay_com_ip_src_delay_comp
-- Source Path: uz_mpc_delay_comp/delay_comp
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.delay_com_ip_src_delay_comp_pkg.ALL;

ENTITY delay_com_ip_src_delay_comp IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        id_pu                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        iq_pu                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        ix_pu                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_pu                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        vd_pu                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vq_pu                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vx_pu                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        vy_pu                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        omega_m_pu                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Rs_over_ZB_AXI                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ts_times_ZB_over_Ld_AXI           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ts_times_ZB_over_Lq_AXI           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ts_times_ZB_over_Lx_AXI           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ts_times_ZB_over_Ly_AXI           :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Ld_over_LB_AXI                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        Lq_over_LB_AXI                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        psi_pm_over_psiB_AXI              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        polepairs_AXI                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        trigger                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        id_pred_pu                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        iq_pred_pu                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        ix_pred_pu                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        iy_pred_pu                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        id_pred_pu_AXI                    :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        iq_pred_pu_AXI                    :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        ix_pred_pu_AXI                    :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        iy_pred_pu_AXI                    :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        calc_done                         :   OUT   std_logic
        );
END delay_com_ip_src_delay_comp;


ARCHITECTURE rtl OF delay_com_ip_src_delay_comp IS

  -- Component Declarations
  COMPONENT delay_com_ip_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : delay_com_ip_src_Detect_Rise_Positive
    USE ENTITY work.delay_com_ip_src_Detect_Rise_Positive(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Ts_times_ZB_over_Ld_AXI_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay27_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay27_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch13_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay28_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL vd_pu_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay59_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay59_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Switch28_out1                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay57_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL vd_pu_1                          : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay18_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Rs_over_ZB_AXI_signed            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay25_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay25_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch12_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay26_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Rs_over_ZB                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL id_pu_signed                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay2_reg                       : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay2_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Switch_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay3_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL id_k_pu                          : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product1_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product1_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay10_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Add_stage2_sub_cast              : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add_stage2_sub_cast_1            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add_op_stage1                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL omega_m_pu_signed                : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay12_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay12_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch5_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay13_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL omega_m_pu_1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL polepairs_AXI_unsigned           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay43_reg                      : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay43_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch21_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay44_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL polepairs                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product4_cast                    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Product4_mul_temp                : signed(50 DOWNTO 0);  -- sfix51_En15
  SIGNAL Product4_cast_1                  : signed(49 DOWNTO 0);  -- sfix50_En15
  SIGNAL Product4_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay45_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL iq_pu_signed                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay4_reg                       : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay4_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Switch1_out1                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay5_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL iq_k_pu                          : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL Lq_over_LB_AXI_signed            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay37_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay37_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch18_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay38_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Lq_over_LB                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product3_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product3_out1                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay46_out1                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product2_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product2_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Ts_times_ZB_over_Ld              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Add_stage3_add_cast              : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add_out1                         : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_mul_temp                 : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL id_k_pu_1                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add1_add_cast                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Add1_add_cast_1                  : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Add1_out1                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL reduced_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL From16_out1                      : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL Ts_times_ZB_over_Lq_AXI_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay29_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay29_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch14_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay30_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL vq_pu_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay60_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay60_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Switch29_out1                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay58_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL vq_pu_1                          : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay19_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Rs_over_ZB_1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL iq_k_pu_1                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product6_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product6_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay20_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Add2_stage2_sub_cast             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add2_stage2_sub_cast_1           : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add2_op_stage1                   : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL omega_m_pu_2                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL polepairs_1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product9_cast                    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Product9_mul_temp                : signed(50 DOWNTO 0);  -- sfix51_En15
  SIGNAL Product9_cast_1                  : signed(49 DOWNTO 0);  -- sfix50_En15
  SIGNAL Product9_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay47_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL id_k_pu_2                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL Ld_over_LB_AXI_signed            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay35_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay35_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch17_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay36_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Ld_over_LB                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product8_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product8_out1                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Delay48_out1                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product7_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product7_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay21_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Add2_stage3_sub_cast             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add2_op_stage2                   : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL psi_pm_over_psiB_AXI_signed      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay39_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay39_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch19_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay40_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product10_mul_temp               : signed(35 DOWNTO 0);  -- sfix36_En30
  SIGNAL Product10_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Ts_times_ZB_over_Lq              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay22_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Add2_stage4_sub_cast             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add2_out1                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product5_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product5_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL iq_k_pu_2                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add3_add_cast                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Add3_add_cast_1                  : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Add3_out1                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL reduced_reg_1                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL From19_out1                      : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL Ts_times_ZB_over_Lx_AXI_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay31_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay31_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch15_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay32_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL vx_pu_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay71_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay71_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Switch30_out1                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay70_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL vx_pu_1                          : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay23_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Rs_over_ZB_2                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL ix_pu_signed                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay6_reg                       : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay6_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch2_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay7_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL ix_k_pu                          : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Product12_mul_temp               : signed(35 DOWNTO 0);  -- sfix36_En26
  SIGNAL Product12_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Ts_times_ZB_over_Lx              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay24_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Add4_sub_cast                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add4_sub_cast_1                  : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add4_out1                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product11_mul_temp               : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product11_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL ix_k_pu_1                        : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Add5_add_cast                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Add5_add_cast_1                  : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Add5_out1                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL reduced_reg_2                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL From20_out1                      : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL Ts_times_ZB_over_Ly_AXI_signed   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay33_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay33_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch16_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay34_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL vy_pu_signed                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay73_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay73_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Switch31_out1                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay72_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL vy_pu_1                          : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay41_out1                     : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Rs_over_ZB_3                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL iy_pu_signed                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay8_reg                       : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay8_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch3_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay9_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL iy_k_pu                          : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Product14_mul_temp               : signed(35 DOWNTO 0);  -- sfix36_En26
  SIGNAL Product14_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Ts_times_ZB_over_Ly              : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay42_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Add6_sub_cast                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add6_sub_cast_1                  : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add6_out1                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product13_mul_temp               : signed(44 DOWNTO 0);  -- sfix45_En31
  SIGNAL Product13_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL iy_k_pu_1                        : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Add7_add_cast                    : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Add7_add_cast_1                  : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Add7_out1                        : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL reduced_reg_3                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL From21_out1                      : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL Delay11_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay11_out1                     : std_logic;

BEGIN
  -- iy_delay_pu = Ts_times_ZB_over_Ly *(vy_pu - Rs_over_ZB * iy_k_pu) + iy_k_pu
  -- 
  -- ix_delay_pu = Ts_times_ZB_over_Lx *(vx_pu - Rs_over_ZB* ix_k_pu) + ix_k_pu
  -- 
  -- iq_delay_pu = Ts_times_ZB_over_Lq *(vq_pu - Rs_over_ZB * iq_k_pu - omega_m_pu * polepairs * Ld_over_LB * id_k_pu 
  -- - omega_m_pu * polepairs * psi_pm_over_psiB) + iq_k_p
  -- 
  -- id_delay_pu = Ts_times_ZB_over_Ld *(vd_pu - Rs_over_ZB * id_k_pu + iq_k_pu * Lq_over_LB * omega_m_pu * polepairs) 
  -- + id_k_p

  u_Detect_Rise_Positive : delay_com_ip_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay_out1,
              Y => Detect_Rise_Positive_out1
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_reg(0) <= trigger;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  
  switch_compare_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ts_times_ZB_over_Ld_AXI_signed <= signed(Ts_times_ZB_over_Ld_AXI);

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay27_reg(0) <= Ts_times_ZB_over_Ld_AXI_signed;
        Delay27_reg(1) <= Delay27_reg(0);
      END IF;
    END IF;
  END PROCESS Delay27_process;

  Delay27_out1 <= Delay27_reg(1);

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay28_out1 <= Switch13_out1;
      END IF;
    END IF;
  END PROCESS Delay28_process;


  
  Switch13_out1 <= Delay28_out1 WHEN switch_compare_1 = '0' ELSE
      Delay27_out1;

  
  switch_compare_1_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  vd_pu_signed <= signed(vd_pu);

  Delay59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay59_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay59_reg(0) <= vd_pu_signed;
        Delay59_reg(1) <= Delay59_reg(0);
      END IF;
    END IF;
  END PROCESS Delay59_process;

  Delay59_out1 <= Delay59_reg(1);

  Delay57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay57_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay57_out1 <= Switch28_out1;
      END IF;
    END IF;
  END PROCESS Delay57_process;


  
  Switch28_out1 <= Delay57_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay59_out1;

  vd_pu_1 <= Switch28_out1;

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay18_out1 <= vd_pu_1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  switch_compare_1_2 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Rs_over_ZB_AXI_signed <= signed(Rs_over_ZB_AXI);

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay25_reg(0) <= Rs_over_ZB_AXI_signed;
        Delay25_reg(1) <= Delay25_reg(0);
      END IF;
    END IF;
  END PROCESS Delay25_process;

  Delay25_out1 <= Delay25_reg(1);

  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay26_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay26_out1 <= Switch12_out1;
      END IF;
    END IF;
  END PROCESS Delay26_process;


  
  Switch12_out1 <= Delay26_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay25_out1;

  Rs_over_ZB <= Switch12_out1;

  
  switch_compare_1_3 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  id_pu_signed <= signed(id_pu);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= id_pu_signed;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_out1 <= Delay3_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay2_out1;

  id_k_pu <= Switch_out1;

  Product1_mul_temp <= Rs_over_ZB * id_k_pu;
  Product1_out1 <= Product1_mul_temp(33 DOWNTO 16);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay10_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Add_stage2_sub_cast <= resize(Delay18_out1(26 DOWNTO 8), 27);
  Add_stage2_sub_cast_1 <= resize(Delay10_out1 & '0', 27);
  Add_op_stage1 <= Add_stage2_sub_cast - Add_stage2_sub_cast_1;

  
  switch_compare_1_4 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  omega_m_pu_signed <= signed(omega_m_pu);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay12_reg(0) <= omega_m_pu_signed;
        Delay12_reg(1) <= Delay12_reg(0);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(1);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch5_out1 <= Delay13_out1 WHEN switch_compare_1_4 = '0' ELSE
      Delay12_out1;

  omega_m_pu_1 <= Switch5_out1;

  
  switch_compare_1_5 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  polepairs_AXI_unsigned <= unsigned(polepairs_AXI);

  Delay43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay43_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        Delay43_reg(0) <= polepairs_AXI_unsigned;
        Delay43_reg(1) <= Delay43_reg(0);
      END IF;
    END IF;
  END PROCESS Delay43_process;

  Delay43_out1 <= Delay43_reg(1);

  Delay44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay44_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay44_out1 <= Switch21_out1;
      END IF;
    END IF;
  END PROCESS Delay44_process;


  
  Switch21_out1 <= Delay44_out1 WHEN switch_compare_1_5 = '0' ELSE
      Delay43_out1;

  polepairs <= Switch21_out1;

  Product4_cast <= signed(resize(polepairs, 33));
  Product4_mul_temp <= omega_m_pu_1 * Product4_cast;
  Product4_cast_1 <= Product4_mul_temp(49 DOWNTO 0);
  Product4_out1 <= Product4_cast_1(17 DOWNTO 0);

  Delay45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay45_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay45_out1 <= Product4_out1;
      END IF;
    END IF;
  END PROCESS Delay45_process;


  
  switch_compare_1_6 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  iq_pu_signed <= signed(iq_pu);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay4_reg(0) <= iq_pu_signed;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch1_out1 <= Delay5_out1 WHEN switch_compare_1_6 = '0' ELSE
      Delay4_out1;

  iq_k_pu <= Switch1_out1;

  
  switch_compare_1_7 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Lq_over_LB_AXI_signed <= signed(Lq_over_LB_AXI);

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay37_reg(0) <= Lq_over_LB_AXI_signed;
        Delay37_reg(1) <= Delay37_reg(0);
      END IF;
    END IF;
  END PROCESS Delay37_process;

  Delay37_out1 <= Delay37_reg(1);

  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay38_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay38_out1 <= Switch18_out1;
      END IF;
    END IF;
  END PROCESS Delay38_process;


  
  Switch18_out1 <= Delay38_out1 WHEN switch_compare_1_7 = '0' ELSE
      Delay37_out1;

  Lq_over_LB <= Switch18_out1;

  Product3_mul_temp <= iq_k_pu * Lq_over_LB;
  Product3_out1 <= Product3_mul_temp(41 DOWNTO 15);

  Delay46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay46_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay46_out1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS Delay46_process;


  Product2_mul_temp <= Delay45_out1 * Delay46_out1;
  Product2_out1 <= Product2_mul_temp(33 DOWNTO 16);

  Ts_times_ZB_over_Ld <= Switch13_out1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Add_stage3_add_cast <= resize(Delay1_out1 & '0', 27);
  Add_out1 <= Add_op_stage1 + Add_stage3_add_cast;

  Product_mul_temp <= Ts_times_ZB_over_Ld * Add_out1;
  Product_out1 <= Product_mul_temp(33 DOWNTO 16);

  id_k_pu_1 <= Switch_out1;

  Add1_add_cast <= Product_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Add1_add_cast_1 <= id_k_pu_1(18 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Add1_out1 <= Add1_add_cast + Add1_add_cast_1;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= Add1_out1;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  From16_out1 <= reduced_reg(1);

  id_pred_pu <= std_logic_vector(From16_out1);

  
  switch_compare_1_8 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ts_times_ZB_over_Lq_AXI_signed <= signed(Ts_times_ZB_over_Lq_AXI);

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay29_reg(0) <= Ts_times_ZB_over_Lq_AXI_signed;
        Delay29_reg(1) <= Delay29_reg(0);
      END IF;
    END IF;
  END PROCESS Delay29_process;

  Delay29_out1 <= Delay29_reg(1);

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay30_out1 <= Switch14_out1;
      END IF;
    END IF;
  END PROCESS Delay30_process;


  
  Switch14_out1 <= Delay30_out1 WHEN switch_compare_1_8 = '0' ELSE
      Delay29_out1;

  
  switch_compare_1_9 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  vq_pu_signed <= signed(vq_pu);

  Delay60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay60_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay60_reg(0) <= vq_pu_signed;
        Delay60_reg(1) <= Delay60_reg(0);
      END IF;
    END IF;
  END PROCESS Delay60_process;

  Delay60_out1 <= Delay60_reg(1);

  Delay58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay58_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay58_out1 <= Switch29_out1;
      END IF;
    END IF;
  END PROCESS Delay58_process;


  
  Switch29_out1 <= Delay58_out1 WHEN switch_compare_1_9 = '0' ELSE
      Delay60_out1;

  vq_pu_1 <= Switch29_out1;

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay19_out1 <= vq_pu_1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  Rs_over_ZB_1 <= Switch12_out1;

  iq_k_pu_1 <= Switch1_out1;

  Product6_mul_temp <= Rs_over_ZB_1 * iq_k_pu_1;
  Product6_out1 <= Product6_mul_temp(33 DOWNTO 16);

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay20_out1 <= Product6_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  Add2_stage2_sub_cast <= resize(Delay19_out1(26 DOWNTO 8), 27);
  Add2_stage2_sub_cast_1 <= resize(Delay20_out1 & '0', 27);
  Add2_op_stage1 <= Add2_stage2_sub_cast - Add2_stage2_sub_cast_1;

  omega_m_pu_2 <= Switch5_out1;

  polepairs_1 <= Switch21_out1;

  Product9_cast <= signed(resize(polepairs_1, 33));
  Product9_mul_temp <= omega_m_pu_2 * Product9_cast;
  Product9_cast_1 <= Product9_mul_temp(49 DOWNTO 0);
  Product9_out1 <= Product9_cast_1(17 DOWNTO 0);

  Delay47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay47_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay47_out1 <= Product9_out1;
      END IF;
    END IF;
  END PROCESS Delay47_process;


  id_k_pu_2 <= Switch_out1;

  
  switch_compare_1_10 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ld_over_LB_AXI_signed <= signed(Ld_over_LB_AXI);

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay35_reg(0) <= Ld_over_LB_AXI_signed;
        Delay35_reg(1) <= Delay35_reg(0);
      END IF;
    END IF;
  END PROCESS Delay35_process;

  Delay35_out1 <= Delay35_reg(1);

  Delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay36_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay36_out1 <= Switch17_out1;
      END IF;
    END IF;
  END PROCESS Delay36_process;


  
  Switch17_out1 <= Delay36_out1 WHEN switch_compare_1_10 = '0' ELSE
      Delay35_out1;

  Ld_over_LB <= Switch17_out1;

  Product8_mul_temp <= id_k_pu_2 * Ld_over_LB;
  Product8_out1 <= Product8_mul_temp(41 DOWNTO 15);

  Delay48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay48_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay48_out1 <= Product8_out1;
      END IF;
    END IF;
  END PROCESS Delay48_process;


  Product7_mul_temp <= Delay47_out1 * Delay48_out1;
  Product7_out1 <= Product7_mul_temp(33 DOWNTO 16);

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay21_out1 <= Product7_out1;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  Add2_stage3_sub_cast <= resize(Delay21_out1 & '0', 27);
  Add2_op_stage2 <= Add2_op_stage1 - Add2_stage3_sub_cast;

  
  switch_compare_1_11 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  psi_pm_over_psiB_AXI_signed <= signed(psi_pm_over_psiB_AXI);

  Delay39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay39_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay39_reg(0) <= psi_pm_over_psiB_AXI_signed;
        Delay39_reg(1) <= Delay39_reg(0);
      END IF;
    END IF;
  END PROCESS Delay39_process;

  Delay39_out1 <= Delay39_reg(1);

  Delay40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay40_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay40_out1 <= Switch19_out1;
      END IF;
    END IF;
  END PROCESS Delay40_process;


  
  Switch19_out1 <= Delay40_out1 WHEN switch_compare_1_11 = '0' ELSE
      Delay39_out1;

  Product10_mul_temp <= Switch19_out1 * Delay47_out1;
  Product10_out1 <= Product10_mul_temp(32 DOWNTO 15);

  Ts_times_ZB_over_Lq <= Switch14_out1;

  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay22_out1 <= Product10_out1;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  Add2_stage4_sub_cast <= resize(Delay22_out1 & '0', 27);
  Add2_out1 <= Add2_op_stage2 - Add2_stage4_sub_cast;

  Product5_mul_temp <= Ts_times_ZB_over_Lq * Add2_out1;
  Product5_out1 <= Product5_mul_temp(33 DOWNTO 16);

  iq_k_pu_2 <= Switch1_out1;

  Add3_add_cast <= Product5_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Add3_add_cast_1 <= iq_k_pu_2(18 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Add3_out1 <= Add3_add_cast + Add3_add_cast_1;

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= Add3_out1;
        reduced_reg_1(1) <= reduced_reg_1(0);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  From19_out1 <= reduced_reg_1(1);

  iq_pred_pu <= std_logic_vector(From19_out1);

  
  switch_compare_1_12 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ts_times_ZB_over_Lx_AXI_signed <= signed(Ts_times_ZB_over_Lx_AXI);

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay31_reg(0) <= Ts_times_ZB_over_Lx_AXI_signed;
        Delay31_reg(1) <= Delay31_reg(0);
      END IF;
    END IF;
  END PROCESS Delay31_process;

  Delay31_out1 <= Delay31_reg(1);

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay32_out1 <= Switch15_out1;
      END IF;
    END IF;
  END PROCESS Delay32_process;


  
  Switch15_out1 <= Delay32_out1 WHEN switch_compare_1_12 = '0' ELSE
      Delay31_out1;

  
  switch_compare_1_13 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  vx_pu_signed <= signed(vx_pu);

  Delay71_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay71_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay71_reg(0) <= vx_pu_signed;
        Delay71_reg(1) <= Delay71_reg(0);
      END IF;
    END IF;
  END PROCESS Delay71_process;

  Delay71_out1 <= Delay71_reg(1);

  Delay70_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay70_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay70_out1 <= Switch30_out1;
      END IF;
    END IF;
  END PROCESS Delay70_process;


  
  Switch30_out1 <= Delay70_out1 WHEN switch_compare_1_13 = '0' ELSE
      Delay71_out1;

  vx_pu_1 <= Switch30_out1;

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay23_out1 <= vx_pu_1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  Rs_over_ZB_2 <= Switch12_out1;

  
  switch_compare_1_14 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  ix_pu_signed <= signed(ix_pu);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay6_reg(0) <= ix_pu_signed;
        Delay6_reg(1) <= Delay6_reg(0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(1);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch2_out1 <= Delay7_out1 WHEN switch_compare_1_14 = '0' ELSE
      Delay6_out1;

  ix_k_pu <= Switch2_out1;

  Product12_mul_temp <= Rs_over_ZB_2 * ix_k_pu;
  Product12_out1 <= Product12_mul_temp(28 DOWNTO 11);

  Ts_times_ZB_over_Lx <= Switch15_out1;

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay24_out1 <= Product12_out1;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  Add4_sub_cast <= resize(Delay23_out1(26 DOWNTO 8), 27);
  Add4_sub_cast_1 <= resize(Delay24_out1 & '0', 27);
  Add4_out1 <= Add4_sub_cast - Add4_sub_cast_1;

  Product11_mul_temp <= Ts_times_ZB_over_Lx * Add4_out1;
  Product11_out1 <= Product11_mul_temp(33 DOWNTO 16);

  ix_k_pu_1 <= Switch2_out1;

  Add5_add_cast <= Product11_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Add5_add_cast_1 <= ix_k_pu_1(13 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Add5_out1 <= Add5_add_cast + Add5_add_cast_1;

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= Add5_out1;
        reduced_reg_2(1) <= reduced_reg_2(0);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  From20_out1 <= reduced_reg_2(1);

  ix_pred_pu <= std_logic_vector(From20_out1);

  
  switch_compare_1_15 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  Ts_times_ZB_over_Ly_AXI_signed <= signed(Ts_times_ZB_over_Ly_AXI);

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay33_reg(0) <= Ts_times_ZB_over_Ly_AXI_signed;
        Delay33_reg(1) <= Delay33_reg(0);
      END IF;
    END IF;
  END PROCESS Delay33_process;

  Delay33_out1 <= Delay33_reg(1);

  Delay34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay34_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay34_out1 <= Switch16_out1;
      END IF;
    END IF;
  END PROCESS Delay34_process;


  
  Switch16_out1 <= Delay34_out1 WHEN switch_compare_1_15 = '0' ELSE
      Delay33_out1;

  
  switch_compare_1_16 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  vy_pu_signed <= signed(vy_pu);

  Delay73_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay73_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        Delay73_reg(0) <= vy_pu_signed;
        Delay73_reg(1) <= Delay73_reg(0);
      END IF;
    END IF;
  END PROCESS Delay73_process;

  Delay73_out1 <= Delay73_reg(1);

  Delay72_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay72_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay72_out1 <= Switch31_out1;
      END IF;
    END IF;
  END PROCESS Delay72_process;


  
  Switch31_out1 <= Delay72_out1 WHEN switch_compare_1_16 = '0' ELSE
      Delay73_out1;

  vy_pu_1 <= Switch31_out1;

  Delay41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay41_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay41_out1 <= vy_pu_1;
      END IF;
    END IF;
  END PROCESS Delay41_process;


  Rs_over_ZB_3 <= Switch12_out1;

  
  switch_compare_1_17 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  iy_pu_signed <= signed(iy_pu);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay8_reg(0) <= iy_pu_signed;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(1);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch3_out1 <= Delay9_out1 WHEN switch_compare_1_17 = '0' ELSE
      Delay8_out1;

  iy_k_pu <= Switch3_out1;

  Product14_mul_temp <= Rs_over_ZB_3 * iy_k_pu;
  Product14_out1 <= Product14_mul_temp(28 DOWNTO 11);

  Ts_times_ZB_over_Ly <= Switch16_out1;

  Delay42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay42_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay42_out1 <= Product14_out1;
      END IF;
    END IF;
  END PROCESS Delay42_process;


  Add6_sub_cast <= resize(Delay41_out1(26 DOWNTO 8), 27);
  Add6_sub_cast_1 <= resize(Delay42_out1 & '0', 27);
  Add6_out1 <= Add6_sub_cast - Add6_sub_cast_1;

  Product13_mul_temp <= Ts_times_ZB_over_Ly * Add6_out1;
  Product13_out1 <= Product13_mul_temp(33 DOWNTO 16);

  iy_k_pu_1 <= Switch3_out1;

  Add7_add_cast <= Product13_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Add7_add_cast_1 <= iy_k_pu_1(13 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Add7_out1 <= Add7_add_cast + Add7_add_cast_1;

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_3 <= (OTHERS => to_signed(16#0000000#, 27));
      ELSIF enb = '1' THEN
        reduced_reg_3(0) <= Add7_out1;
        reduced_reg_3(1) <= reduced_reg_3(0);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  From21_out1 <= reduced_reg_3(1);

  iy_pred_pu <= std_logic_vector(From21_out1);

  id_pred_pu_AXI <= std_logic_vector(From16_out1);

  iq_pred_pu_AXI <= std_logic_vector(From19_out1);

  ix_pred_pu_AXI <= std_logic_vector(From20_out1);

  iy_pred_pu_AXI <= std_logic_vector(From21_out1);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay11_reg(0) <= Detect_Rise_Positive_out1;
        Delay11_reg(1) <= Delay11_reg(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);

  ce_out <= clk_enable;

  calc_done <= Delay11_out1;

END rtl;

