-- -------------------------------------------------------------
-- 
-- File Name: uz_axi_testIP/hdlsrc/uz_axi_testIP/AXI_testI_ip.vhd
-- Created: 2021-04-18 13:18:07
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: AXI_testI_ip
-- Source Path: AXI_testI_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.AXI_testI_ip_pkg.ALL;

ENTITY AXI_testI_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_ACLK                         :   IN    std_logic;  -- ufix1
        AXI4_ARESETN                      :   IN    std_logic;  -- ufix1
        AXI4_AWID                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_AWADDR                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_AWLEN                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_AWSIZE                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_AWBURST                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_AWLOCK                       :   IN    std_logic;  -- ufix1
        AXI4_AWCACHE                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_AWPROT                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_AWVALID                      :   IN    std_logic;  -- ufix1
        AXI4_WDATA                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_WSTRB                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_WLAST                        :   IN    std_logic;  -- ufix1
        AXI4_WVALID                       :   IN    std_logic;  -- ufix1
        AXI4_BREADY                       :   IN    std_logic;  -- ufix1
        AXI4_ARID                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_ARADDR                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_ARLEN                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_ARSIZE                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_ARBURST                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_ARLOCK                       :   IN    std_logic;  -- ufix1
        AXI4_ARCACHE                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_ARPROT                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_ARVALID                      :   IN    std_logic;  -- ufix1
        AXI4_RREADY                       :   IN    std_logic;  -- ufix1
        AXI4_AWREADY                      :   OUT   std_logic;  -- ufix1
        AXI4_WREADY                       :   OUT   std_logic;  -- ufix1
        AXI4_BID                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_BRESP                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_BVALID                       :   OUT   std_logic;  -- ufix1
        AXI4_ARREADY                      :   OUT   std_logic;  -- ufix1
        AXI4_RID                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_RDATA                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_RRESP                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_RLAST                        :   OUT   std_logic;  -- ufix1
        AXI4_RVALID                       :   OUT   std_logic  -- ufix1
        );
END AXI_testI_ip;


ARCHITECTURE rtl OF AXI_testI_ip IS

  -- Component Declarations
  COMPONENT AXI_testI_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT AXI_testI_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          A_float_0                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          A_float_1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          A_float_2                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          A_float_3                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          B_float_0                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          B_float_1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          B_float_2                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          B_float_3                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          A_uint32                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          B_uint32                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          A_int32                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          B_int32                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          A_fx_1_16_5                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
          B_fx_1_16_5                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
          ce_out                          :   OUT   std_logic;  -- ufix1
          C_float_0                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          C_float_1                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          C_float_2                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          C_float_3                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          C_uint32                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          C_int32                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          C_fx_1_16_5                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En5
          );
  END COMPONENT;

  COMPONENT AXI_testI_ip_axi4
    PORT( reset                           :   IN    std_logic;
          AXI4_ACLK                       :   IN    std_logic;  -- ufix1
          AXI4_ARESETN                    :   IN    std_logic;  -- ufix1
          AXI4_AWID                       :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_AWADDR                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_AWLEN                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_AWSIZE                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_AWBURST                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_AWLOCK                     :   IN    std_logic;  -- ufix1
          AXI4_AWCACHE                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_AWPROT                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_AWVALID                    :   IN    std_logic;  -- ufix1
          AXI4_WDATA                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_WSTRB                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_WLAST                      :   IN    std_logic;  -- ufix1
          AXI4_WVALID                     :   IN    std_logic;  -- ufix1
          AXI4_BREADY                     :   IN    std_logic;  -- ufix1
          AXI4_ARID                       :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_ARADDR                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_ARLEN                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_ARSIZE                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_ARBURST                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_ARLOCK                     :   IN    std_logic;  -- ufix1
          AXI4_ARCACHE                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_ARPROT                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_ARVALID                    :   IN    std_logic;  -- ufix1
          AXI4_RREADY                     :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_C_int32                    :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          read_C_uint32                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_C_float                    :   IN    vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
          read_C_fx_1_16_5                :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
          AXI4_AWREADY                    :   OUT   std_logic;  -- ufix1
          AXI4_WREADY                     :   OUT   std_logic;  -- ufix1
          AXI4_BID                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_BRESP                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_BVALID                     :   OUT   std_logic;  -- ufix1
          AXI4_ARREADY                    :   OUT   std_logic;  -- ufix1
          AXI4_RID                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_RDATA                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_RRESP                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_RLAST                      :   OUT   std_logic;  -- ufix1
          AXI4_RVALID                     :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_A_float                   :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
          write_B_float                   :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
          write_A_uint32                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_B_uint32                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_A_int32                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          write_B_int32                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          write_A_fx_1_16_5               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
          write_B_fx_1_16_5               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : AXI_testI_ip_reset_sync
    USE ENTITY work.AXI_testI_ip_reset_sync(rtl);

  FOR ALL : AXI_testI_ip_dut
    USE ENTITY work.AXI_testI_ip_dut(rtl);

  FOR ALL : AXI_testI_ip_axi4
    USE ENTITY work.AXI_testI_ip_axi4(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL read_C_float_vec                 : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL write_B_float_unsigned           : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL write_A_float_unsigned           : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_A_uint32                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_B_uint32                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_A_int32                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_B_int32                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_A_fx_1_16_5                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_B_fx_1_16_5                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL C_uint32_sig                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL C_int32_sig                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL C_fx_1_16_5_sig                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL AXI4_BID_tmp                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL AXI4_BRESP_tmp                   : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_RID_tmp                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL AXI4_RDATA_tmp                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_RRESP_tmp                   : std_logic_vector(1 DOWNTO 0);  -- ufix2

BEGIN
  u_AXI_testI_ip_reset_sync_inst : AXI_testI_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_AXI_testI_ip_dut_inst : AXI_testI_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              A_float_0 => write_A_float_unsigned(0),  -- ufix32
              A_float_1 => write_A_float_unsigned(1),  -- ufix32
              A_float_2 => write_A_float_unsigned(2),  -- ufix32
              A_float_3 => write_A_float_unsigned(3),  -- ufix32
              B_float_0 => write_B_float_unsigned(0),  -- ufix32
              B_float_1 => write_B_float_unsigned(1),  -- ufix32
              B_float_2 => write_B_float_unsigned(2),  -- ufix32
              B_float_3 => write_B_float_unsigned(3),  -- ufix32
              A_uint32 => write_A_uint32,  -- ufix32
              B_uint32 => write_B_uint32,  -- ufix32
              A_int32 => write_A_int32,  -- sfix32
              B_int32 => write_B_int32,  -- sfix32
              A_fx_1_16_5 => write_A_fx_1_16_5,  -- sfix16_En5
              B_fx_1_16_5 => write_B_fx_1_16_5,  -- sfix16_En5
              ce_out => ce_out_sig,  -- ufix1
              C_float_0 => read_C_float_vec(0),  -- ufix32
              C_float_1 => read_C_float_vec(1),  -- ufix32
              C_float_2 => read_C_float_vec(2),  -- ufix32
              C_float_3 => read_C_float_vec(3),  -- ufix32
              C_uint32 => C_uint32_sig,  -- ufix32
              C_int32 => C_int32_sig,  -- sfix32
              C_fx_1_16_5 => C_fx_1_16_5_sig  -- sfix16_En5
              );

  u_AXI_testI_ip_axi4_inst : AXI_testI_ip_axi4
    PORT MAP( reset => reset,
              AXI4_ACLK => AXI4_ACLK,  -- ufix1
              AXI4_ARESETN => AXI4_ARESETN,  -- ufix1
              AXI4_AWID => AXI4_AWID,  -- ufix12
              AXI4_AWADDR => AXI4_AWADDR,  -- ufix16
              AXI4_AWLEN => AXI4_AWLEN,  -- ufix8
              AXI4_AWSIZE => AXI4_AWSIZE,  -- ufix3
              AXI4_AWBURST => AXI4_AWBURST,  -- ufix2
              AXI4_AWLOCK => AXI4_AWLOCK,  -- ufix1
              AXI4_AWCACHE => AXI4_AWCACHE,  -- ufix4
              AXI4_AWPROT => AXI4_AWPROT,  -- ufix3
              AXI4_AWVALID => AXI4_AWVALID,  -- ufix1
              AXI4_WDATA => AXI4_WDATA,  -- ufix32
              AXI4_WSTRB => AXI4_WSTRB,  -- ufix4
              AXI4_WLAST => AXI4_WLAST,  -- ufix1
              AXI4_WVALID => AXI4_WVALID,  -- ufix1
              AXI4_BREADY => AXI4_BREADY,  -- ufix1
              AXI4_ARID => AXI4_ARID,  -- ufix12
              AXI4_ARADDR => AXI4_ARADDR,  -- ufix16
              AXI4_ARLEN => AXI4_ARLEN,  -- ufix8
              AXI4_ARSIZE => AXI4_ARSIZE,  -- ufix3
              AXI4_ARBURST => AXI4_ARBURST,  -- ufix2
              AXI4_ARLOCK => AXI4_ARLOCK,  -- ufix1
              AXI4_ARCACHE => AXI4_ARCACHE,  -- ufix4
              AXI4_ARPROT => AXI4_ARPROT,  -- ufix3
              AXI4_ARVALID => AXI4_ARVALID,  -- ufix1
              AXI4_RREADY => AXI4_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_C_int32 => C_int32_sig,  -- sfix32
              read_C_uint32 => C_uint32_sig,  -- ufix32
              read_C_float => read_C_float_vec,  -- ufix32 [4]
              read_C_fx_1_16_5 => C_fx_1_16_5_sig,  -- sfix16_En5
              AXI4_AWREADY => AXI4_AWREADY,  -- ufix1
              AXI4_WREADY => AXI4_WREADY,  -- ufix1
              AXI4_BID => AXI4_BID_tmp,  -- ufix12
              AXI4_BRESP => AXI4_BRESP_tmp,  -- ufix2
              AXI4_BVALID => AXI4_BVALID,  -- ufix1
              AXI4_ARREADY => AXI4_ARREADY,  -- ufix1
              AXI4_RID => AXI4_RID_tmp,  -- ufix12
              AXI4_RDATA => AXI4_RDATA_tmp,  -- ufix32
              AXI4_RRESP => AXI4_RRESP_tmp,  -- ufix2
              AXI4_RLAST => AXI4_RLAST,  -- ufix1
              AXI4_RVALID => AXI4_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_A_float => write_A_float_unsigned,  -- ufix32 [4]
              write_B_float => write_B_float_unsigned,  -- ufix32 [4]
              write_A_uint32 => write_A_uint32,  -- ufix32
              write_B_uint32 => write_B_uint32,  -- ufix32
              write_A_int32 => write_A_int32,  -- sfix32
              write_B_int32 => write_B_int32,  -- sfix32
              write_A_fx_1_16_5 => write_A_fx_1_16_5,  -- sfix16_En5
              write_B_fx_1_16_5 => write_B_fx_1_16_5,  -- sfix16_En5
              reset_internal => reset_internal  -- ufix1
              );

  ip_timestamp <= to_unsigned(2104181318, 32);

  reset_cm <=  NOT IPCORE_RESETN;


  reset_before_sync <= reset_cm OR reset_internal;

  AXI4_BID <= AXI4_BID_tmp;

  AXI4_BRESP <= AXI4_BRESP_tmp;

  AXI4_RID <= AXI4_RID_tmp;

  AXI4_RDATA <= AXI4_RDATA_tmp;

  AXI4_RRESP <= AXI4_RRESP_tmp;

END rtl;

