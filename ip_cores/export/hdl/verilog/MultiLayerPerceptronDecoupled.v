// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MultiLayerPerceptronDecoupled_MultiLayerPerceptronDecoupled,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.561000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=23715,HLS_SYN_LUT=25812,HLS_VERSION=2020_1}" *)

module MultiLayerPerceptronDecoupled (
        ap_clk,
        ap_rst_n,
        m_axi_axi_read_AWVALID,
        m_axi_axi_read_AWREADY,
        m_axi_axi_read_AWADDR,
        m_axi_axi_read_AWID,
        m_axi_axi_read_AWLEN,
        m_axi_axi_read_AWSIZE,
        m_axi_axi_read_AWBURST,
        m_axi_axi_read_AWLOCK,
        m_axi_axi_read_AWCACHE,
        m_axi_axi_read_AWPROT,
        m_axi_axi_read_AWQOS,
        m_axi_axi_read_AWREGION,
        m_axi_axi_read_AWUSER,
        m_axi_axi_read_WVALID,
        m_axi_axi_read_WREADY,
        m_axi_axi_read_WDATA,
        m_axi_axi_read_WSTRB,
        m_axi_axi_read_WLAST,
        m_axi_axi_read_WID,
        m_axi_axi_read_WUSER,
        m_axi_axi_read_ARVALID,
        m_axi_axi_read_ARREADY,
        m_axi_axi_read_ARADDR,
        m_axi_axi_read_ARID,
        m_axi_axi_read_ARLEN,
        m_axi_axi_read_ARSIZE,
        m_axi_axi_read_ARBURST,
        m_axi_axi_read_ARLOCK,
        m_axi_axi_read_ARCACHE,
        m_axi_axi_read_ARPROT,
        m_axi_axi_read_ARQOS,
        m_axi_axi_read_ARREGION,
        m_axi_axi_read_ARUSER,
        m_axi_axi_read_RVALID,
        m_axi_axi_read_RREADY,
        m_axi_axi_read_RDATA,
        m_axi_axi_read_RLAST,
        m_axi_axi_read_RID,
        m_axi_axi_read_RUSER,
        m_axi_axi_read_RRESP,
        m_axi_axi_read_BVALID,
        m_axi_axi_read_BREADY,
        m_axi_axi_read_BRESP,
        m_axi_axi_read_BID,
        m_axi_axi_read_BUSER,
        m_axi_axi_write_AWVALID,
        m_axi_axi_write_AWREADY,
        m_axi_axi_write_AWADDR,
        m_axi_axi_write_AWID,
        m_axi_axi_write_AWLEN,
        m_axi_axi_write_AWSIZE,
        m_axi_axi_write_AWBURST,
        m_axi_axi_write_AWLOCK,
        m_axi_axi_write_AWCACHE,
        m_axi_axi_write_AWPROT,
        m_axi_axi_write_AWQOS,
        m_axi_axi_write_AWREGION,
        m_axi_axi_write_AWUSER,
        m_axi_axi_write_WVALID,
        m_axi_axi_write_WREADY,
        m_axi_axi_write_WDATA,
        m_axi_axi_write_WSTRB,
        m_axi_axi_write_WLAST,
        m_axi_axi_write_WID,
        m_axi_axi_write_WUSER,
        m_axi_axi_write_ARVALID,
        m_axi_axi_write_ARREADY,
        m_axi_axi_write_ARADDR,
        m_axi_axi_write_ARID,
        m_axi_axi_write_ARLEN,
        m_axi_axi_write_ARSIZE,
        m_axi_axi_write_ARBURST,
        m_axi_axi_write_ARLOCK,
        m_axi_axi_write_ARCACHE,
        m_axi_axi_write_ARPROT,
        m_axi_axi_write_ARQOS,
        m_axi_axi_write_ARREGION,
        m_axi_axi_write_ARUSER,
        m_axi_axi_write_RVALID,
        m_axi_axi_write_RREADY,
        m_axi_axi_write_RDATA,
        m_axi_axi_write_RLAST,
        m_axi_axi_write_RID,
        m_axi_axi_write_RUSER,
        m_axi_axi_write_RRESP,
        m_axi_axi_write_BVALID,
        m_axi_axi_write_BREADY,
        m_axi_axi_write_BRESP,
        m_axi_axi_write_BID,
        m_axi_axi_write_BUSER,
        bramLayerResults_Addr_A,
        bramLayerResults_EN_A,
        bramLayerResults_WEN_A,
        bramLayerResults_Din_A,
        bramLayerResults_Dout_A,
        bramLayerResults_Clk_A,
        bramLayerResults_Rst_A,
        s_axi_configuration_AWVALID,
        s_axi_configuration_AWREADY,
        s_axi_configuration_AWADDR,
        s_axi_configuration_WVALID,
        s_axi_configuration_WREADY,
        s_axi_configuration_WDATA,
        s_axi_configuration_WSTRB,
        s_axi_configuration_ARVALID,
        s_axi_configuration_ARREADY,
        s_axi_configuration_ARADDR,
        s_axi_configuration_RVALID,
        s_axi_configuration_RREADY,
        s_axi_configuration_RDATA,
        s_axi_configuration_RRESP,
        s_axi_configuration_BVALID,
        s_axi_configuration_BREADY,
        s_axi_configuration_BRESP,
        interrupt,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 62'd1;
parameter    ap_ST_fsm_state2 = 62'd2;
parameter    ap_ST_fsm_state3 = 62'd4;
parameter    ap_ST_fsm_state4 = 62'd8;
parameter    ap_ST_fsm_state5 = 62'd16;
parameter    ap_ST_fsm_state6 = 62'd32;
parameter    ap_ST_fsm_state7 = 62'd64;
parameter    ap_ST_fsm_state8 = 62'd128;
parameter    ap_ST_fsm_state9 = 62'd256;
parameter    ap_ST_fsm_pp0_stage0 = 62'd512;
parameter    ap_ST_fsm_state13 = 62'd1024;
parameter    ap_ST_fsm_state14 = 62'd2048;
parameter    ap_ST_fsm_state15 = 62'd4096;
parameter    ap_ST_fsm_state16 = 62'd8192;
parameter    ap_ST_fsm_state17 = 62'd16384;
parameter    ap_ST_fsm_state18 = 62'd32768;
parameter    ap_ST_fsm_state19 = 62'd65536;
parameter    ap_ST_fsm_state20 = 62'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 62'd262144;
parameter    ap_ST_fsm_state24 = 62'd524288;
parameter    ap_ST_fsm_state25 = 62'd1048576;
parameter    ap_ST_fsm_state26 = 62'd2097152;
parameter    ap_ST_fsm_state27 = 62'd4194304;
parameter    ap_ST_fsm_state28 = 62'd8388608;
parameter    ap_ST_fsm_state29 = 62'd16777216;
parameter    ap_ST_fsm_state30 = 62'd33554432;
parameter    ap_ST_fsm_state31 = 62'd67108864;
parameter    ap_ST_fsm_pp2_stage0 = 62'd134217728;
parameter    ap_ST_fsm_state35 = 62'd268435456;
parameter    ap_ST_fsm_state36 = 62'd536870912;
parameter    ap_ST_fsm_pp3_stage0 = 62'd1073741824;
parameter    ap_ST_fsm_state39 = 62'd2147483648;
parameter    ap_ST_fsm_pp4_stage0 = 62'd4294967296;
parameter    ap_ST_fsm_state42 = 62'd8589934592;
parameter    ap_ST_fsm_state43 = 62'd17179869184;
parameter    ap_ST_fsm_state44 = 62'd34359738368;
parameter    ap_ST_fsm_state45 = 62'd68719476736;
parameter    ap_ST_fsm_state46 = 62'd137438953472;
parameter    ap_ST_fsm_state47 = 62'd274877906944;
parameter    ap_ST_fsm_state48 = 62'd549755813888;
parameter    ap_ST_fsm_state49 = 62'd1099511627776;
parameter    ap_ST_fsm_state50 = 62'd2199023255552;
parameter    ap_ST_fsm_pp5_stage0 = 62'd4398046511104;
parameter    ap_ST_fsm_state53 = 62'd8796093022208;
parameter    ap_ST_fsm_pp6_stage0 = 62'd17592186044416;
parameter    ap_ST_fsm_state56 = 62'd35184372088832;
parameter    ap_ST_fsm_state57 = 62'd70368744177664;
parameter    ap_ST_fsm_state58 = 62'd140737488355328;
parameter    ap_ST_fsm_state59 = 62'd281474976710656;
parameter    ap_ST_fsm_state60 = 62'd562949953421312;
parameter    ap_ST_fsm_state61 = 62'd1125899906842624;
parameter    ap_ST_fsm_state62 = 62'd2251799813685248;
parameter    ap_ST_fsm_state63 = 62'd4503599627370496;
parameter    ap_ST_fsm_pp7_stage0 = 62'd9007199254740992;
parameter    ap_ST_fsm_state66 = 62'd18014398509481984;
parameter    ap_ST_fsm_state67 = 62'd36028797018963968;
parameter    ap_ST_fsm_pp8_stage0 = 62'd72057594037927936;
parameter    ap_ST_fsm_state71 = 62'd144115188075855872;
parameter    ap_ST_fsm_state72 = 62'd288230376151711744;
parameter    ap_ST_fsm_state73 = 62'd576460752303423488;
parameter    ap_ST_fsm_state74 = 62'd1152921504606846976;
parameter    ap_ST_fsm_state75 = 62'd2305843009213693952;
parameter    C_S_AXI_CONFIGURATION_DATA_WIDTH = 32;
parameter    C_S_AXI_CONFIGURATION_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_M_AXI_AXI_READ_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_READ_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_READ_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_USER_VALUE = 0;
parameter    C_M_AXI_AXI_READ_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_READ_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_WRITE_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_WRITE_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_WRITE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_USER_VALUE = 0;
parameter    C_M_AXI_AXI_WRITE_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_WRITE_CACHE_VALUE = 3;

parameter C_S_AXI_CONFIGURATION_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_READ_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_WRITE_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_axi_read_AWVALID;
input   m_axi_axi_read_AWREADY;
output  [C_M_AXI_AXI_READ_ADDR_WIDTH - 1:0] m_axi_axi_read_AWADDR;
output  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_AWID;
output  [7:0] m_axi_axi_read_AWLEN;
output  [2:0] m_axi_axi_read_AWSIZE;
output  [1:0] m_axi_axi_read_AWBURST;
output  [1:0] m_axi_axi_read_AWLOCK;
output  [3:0] m_axi_axi_read_AWCACHE;
output  [2:0] m_axi_axi_read_AWPROT;
output  [3:0] m_axi_axi_read_AWQOS;
output  [3:0] m_axi_axi_read_AWREGION;
output  [C_M_AXI_AXI_READ_AWUSER_WIDTH - 1:0] m_axi_axi_read_AWUSER;
output   m_axi_axi_read_WVALID;
input   m_axi_axi_read_WREADY;
output  [C_M_AXI_AXI_READ_DATA_WIDTH - 1:0] m_axi_axi_read_WDATA;
output  [C_M_AXI_AXI_READ_WSTRB_WIDTH - 1:0] m_axi_axi_read_WSTRB;
output   m_axi_axi_read_WLAST;
output  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_WID;
output  [C_M_AXI_AXI_READ_WUSER_WIDTH - 1:0] m_axi_axi_read_WUSER;
output   m_axi_axi_read_ARVALID;
input   m_axi_axi_read_ARREADY;
output  [C_M_AXI_AXI_READ_ADDR_WIDTH - 1:0] m_axi_axi_read_ARADDR;
output  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_ARID;
output  [7:0] m_axi_axi_read_ARLEN;
output  [2:0] m_axi_axi_read_ARSIZE;
output  [1:0] m_axi_axi_read_ARBURST;
output  [1:0] m_axi_axi_read_ARLOCK;
output  [3:0] m_axi_axi_read_ARCACHE;
output  [2:0] m_axi_axi_read_ARPROT;
output  [3:0] m_axi_axi_read_ARQOS;
output  [3:0] m_axi_axi_read_ARREGION;
output  [C_M_AXI_AXI_READ_ARUSER_WIDTH - 1:0] m_axi_axi_read_ARUSER;
input   m_axi_axi_read_RVALID;
output   m_axi_axi_read_RREADY;
input  [C_M_AXI_AXI_READ_DATA_WIDTH - 1:0] m_axi_axi_read_RDATA;
input   m_axi_axi_read_RLAST;
input  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_RID;
input  [C_M_AXI_AXI_READ_RUSER_WIDTH - 1:0] m_axi_axi_read_RUSER;
input  [1:0] m_axi_axi_read_RRESP;
input   m_axi_axi_read_BVALID;
output   m_axi_axi_read_BREADY;
input  [1:0] m_axi_axi_read_BRESP;
input  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_BID;
input  [C_M_AXI_AXI_READ_BUSER_WIDTH - 1:0] m_axi_axi_read_BUSER;
output   m_axi_axi_write_AWVALID;
input   m_axi_axi_write_AWREADY;
output  [C_M_AXI_AXI_WRITE_ADDR_WIDTH - 1:0] m_axi_axi_write_AWADDR;
output  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_AWID;
output  [7:0] m_axi_axi_write_AWLEN;
output  [2:0] m_axi_axi_write_AWSIZE;
output  [1:0] m_axi_axi_write_AWBURST;
output  [1:0] m_axi_axi_write_AWLOCK;
output  [3:0] m_axi_axi_write_AWCACHE;
output  [2:0] m_axi_axi_write_AWPROT;
output  [3:0] m_axi_axi_write_AWQOS;
output  [3:0] m_axi_axi_write_AWREGION;
output  [C_M_AXI_AXI_WRITE_AWUSER_WIDTH - 1:0] m_axi_axi_write_AWUSER;
output   m_axi_axi_write_WVALID;
input   m_axi_axi_write_WREADY;
output  [C_M_AXI_AXI_WRITE_DATA_WIDTH - 1:0] m_axi_axi_write_WDATA;
output  [C_M_AXI_AXI_WRITE_WSTRB_WIDTH - 1:0] m_axi_axi_write_WSTRB;
output   m_axi_axi_write_WLAST;
output  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_WID;
output  [C_M_AXI_AXI_WRITE_WUSER_WIDTH - 1:0] m_axi_axi_write_WUSER;
output   m_axi_axi_write_ARVALID;
input   m_axi_axi_write_ARREADY;
output  [C_M_AXI_AXI_WRITE_ADDR_WIDTH - 1:0] m_axi_axi_write_ARADDR;
output  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_ARID;
output  [7:0] m_axi_axi_write_ARLEN;
output  [2:0] m_axi_axi_write_ARSIZE;
output  [1:0] m_axi_axi_write_ARBURST;
output  [1:0] m_axi_axi_write_ARLOCK;
output  [3:0] m_axi_axi_write_ARCACHE;
output  [2:0] m_axi_axi_write_ARPROT;
output  [3:0] m_axi_axi_write_ARQOS;
output  [3:0] m_axi_axi_write_ARREGION;
output  [C_M_AXI_AXI_WRITE_ARUSER_WIDTH - 1:0] m_axi_axi_write_ARUSER;
input   m_axi_axi_write_RVALID;
output   m_axi_axi_write_RREADY;
input  [C_M_AXI_AXI_WRITE_DATA_WIDTH - 1:0] m_axi_axi_write_RDATA;
input   m_axi_axi_write_RLAST;
input  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_RID;
input  [C_M_AXI_AXI_WRITE_RUSER_WIDTH - 1:0] m_axi_axi_write_RUSER;
input  [1:0] m_axi_axi_write_RRESP;
input   m_axi_axi_write_BVALID;
output   m_axi_axi_write_BREADY;
input  [1:0] m_axi_axi_write_BRESP;
input  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_BID;
input  [C_M_AXI_AXI_WRITE_BUSER_WIDTH - 1:0] m_axi_axi_write_BUSER;
output  [31:0] bramLayerResults_Addr_A;
output   bramLayerResults_EN_A;
output  [3:0] bramLayerResults_WEN_A;
output  [31:0] bramLayerResults_Din_A;
input  [31:0] bramLayerResults_Dout_A;
output   bramLayerResults_Clk_A;
output   bramLayerResults_Rst_A;
input   s_axi_configuration_AWVALID;
output   s_axi_configuration_AWREADY;
input  [C_S_AXI_CONFIGURATION_ADDR_WIDTH - 1:0] s_axi_configuration_AWADDR;
input   s_axi_configuration_WVALID;
output   s_axi_configuration_WREADY;
input  [C_S_AXI_CONFIGURATION_DATA_WIDTH - 1:0] s_axi_configuration_WDATA;
input  [C_S_AXI_CONFIGURATION_WSTRB_WIDTH - 1:0] s_axi_configuration_WSTRB;
input   s_axi_configuration_ARVALID;
output   s_axi_configuration_ARREADY;
input  [C_S_AXI_CONFIGURATION_ADDR_WIDTH - 1:0] s_axi_configuration_ARADDR;
output   s_axi_configuration_RVALID;
input   s_axi_configuration_RREADY;
output  [C_S_AXI_CONFIGURATION_DATA_WIDTH - 1:0] s_axi_configuration_RDATA;
output  [1:0] s_axi_configuration_RRESP;
output   s_axi_configuration_BVALID;
input   s_axi_configuration_BREADY;
output  [1:0] s_axi_configuration_BRESP;
output   interrupt;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg bramLayerResults_EN_A;
reg[3:0] bramLayerResults_WEN_A;
reg[31:0] bramLayerResults_Din_A;
reg bramLayerResults_Rst_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [61:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] input_r;
wire   [63:0] output_r;
wire   [63:0] axiWeightInput;
wire   [63:0] axiBiasInput;
wire   [63:0] axiWeightOutput;
wire   [63:0] axiBiasOutput;
wire   [31:0] numberInputs;
wire   [31:0] numberOutputs;
wire   [31:0] numberLayers;
wire  signed [31:0] numberNeurons;
wire   [31:0] loadParameters;
wire   [31:0] exportLayers;
reg   [7:0] bramBias_address0;
reg    bramBias_ce0;
reg    bramBias_we0;
wire   [31:0] bramBias_d0;
wire   [31:0] bramBias_q0;
reg   [8:0] bramWeight_0_address0;
reg    bramWeight_0_ce0;
reg    bramWeight_0_we0;
wire   [31:0] bramWeight_0_q0;
reg    bramWeight_0_ce1;
wire   [31:0] bramWeight_0_q1;
reg   [8:0] bramWeight_1_address0;
reg    bramWeight_1_ce0;
reg    bramWeight_1_we0;
wire   [31:0] bramWeight_1_q0;
reg    bramWeight_1_ce1;
wire   [31:0] bramWeight_1_q1;
reg   [8:0] bramWeight_2_address0;
reg    bramWeight_2_ce0;
reg    bramWeight_2_we0;
wire   [31:0] bramWeight_2_q0;
reg    bramWeight_2_ce1;
wire   [31:0] bramWeight_2_q1;
reg   [8:0] bramWeight_3_address0;
reg    bramWeight_3_ce0;
reg    bramWeight_3_we0;
wire   [31:0] bramWeight_3_q0;
reg    bramWeight_3_ce1;
wire   [31:0] bramWeight_3_q1;
reg   [8:0] bramWeight_4_address0;
reg    bramWeight_4_ce0;
reg    bramWeight_4_we0;
wire   [31:0] bramWeight_4_q0;
reg    bramWeight_4_ce1;
wire   [31:0] bramWeight_4_q1;
reg   [8:0] bramWeight_5_address0;
reg    bramWeight_5_ce0;
reg    bramWeight_5_we0;
wire   [31:0] bramWeight_5_q0;
reg    bramWeight_5_ce1;
wire   [31:0] bramWeight_5_q1;
reg   [8:0] bramWeight_6_address0;
reg    bramWeight_6_ce0;
reg    bramWeight_6_we0;
wire   [31:0] bramWeight_6_q0;
reg    bramWeight_6_ce1;
wire   [31:0] bramWeight_6_q1;
reg   [8:0] bramWeight_7_address0;
reg    bramWeight_7_ce0;
reg    bramWeight_7_we0;
wire   [31:0] bramWeight_7_q0;
reg    bramWeight_7_ce1;
wire   [31:0] bramWeight_7_q1;
reg    axi_read_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    axi_read_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond928_reg_1330;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond939_reg_1306;
wire    ap_CS_fsm_state14;
reg    axi_write_blk_n_AW;
wire    ap_CS_fsm_state67;
reg    axi_write_blk_n_W;
reg    ap_enable_reg_pp8_iter2;
wire    ap_block_pp8_stage0;
reg   [0:0] exitcond1_reg_1532;
reg   [0:0] exitcond1_reg_1532_pp8_iter1_reg;
reg    axi_write_blk_n_B;
wire    ap_CS_fsm_state75;
reg   [0:0] icmp_ln241_reg_1522;
wire    axi_read_AWREADY;
wire    axi_read_WREADY;
reg    axi_read_ARVALID;
wire    axi_read_ARREADY;
reg   [31:0] axi_read_ARADDR;
reg   [31:0] axi_read_ARLEN;
wire    axi_read_RVALID;
reg    axi_read_RREADY;
wire   [31:0] axi_read_RDATA;
wire    axi_read_RLAST;
wire   [0:0] axi_read_RID;
wire   [0:0] axi_read_RUSER;
wire   [1:0] axi_read_RRESP;
wire    axi_read_BVALID;
wire   [1:0] axi_read_BRESP;
wire   [0:0] axi_read_BID;
wire   [0:0] axi_read_BUSER;
reg    axi_write_AWVALID;
wire    axi_write_AWREADY;
reg    axi_write_WVALID;
wire    axi_write_WREADY;
wire   [31:0] axi_write_WDATA;
wire    axi_write_ARREADY;
wire    axi_write_RVALID;
wire   [31:0] axi_write_RDATA;
wire    axi_write_RLAST;
wire   [0:0] axi_write_RID;
wire   [0:0] axi_write_RUSER;
wire   [1:0] axi_write_RRESP;
wire    axi_write_BVALID;
reg    axi_write_BREADY;
wire   [1:0] axi_write_BRESP;
wire   [0:0] axi_write_BID;
wire   [0:0] axi_write_BUSER;
reg   [31:0] loop_index67_reg_511;
reg   [31:0] loop_index61_reg_522;
reg   [31:0] loop_index61_reg_522_pp1_iter1_reg;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] loop_index55_reg_534;
reg   [31:0] loop_index55_reg_534_pp2_iter1_reg;
wire    ap_block_state32_pp2_stage0_iter0;
reg    ap_block_state33_pp2_stage0_iter1;
wire    ap_block_state34_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [31:0] i_reg_546;
reg   [31:0] i_6_reg_557;
reg   [31:0] i_9_reg_579;
reg   [31:0] i_10_reg_590;
reg   [31:0] i_8_reg_601;
reg   [31:0] loop_index_reg_612;
reg   [63:0] axiBiasInput_read_reg_1164;
reg   [63:0] axiWeightInput_read_reg_1169;
reg   [63:0] output_read_reg_1174;
reg   [63:0] input_read_reg_1179;
wire   [0:0] icmp_ln185_fu_677_p2;
reg   [31:0] numberInputs_read_reg_1188;
wire   [11:0] trunc_ln189_fu_683_p1;
reg   [11:0] trunc_ln189_reg_1197;
reg   [31:0] numberNeurons_read_reg_1203;
wire  signed [11:0] trunc_ln190_fu_687_p1;
reg  signed [11:0] trunc_ln190_reg_1218;
reg  signed [31:0] numberLayers_read_reg_1226;
reg   [31:0] numberOutputs_read_reg_1234;
wire   [31:0] mul_ln190_fu_697_p2;
reg   [31:0] mul_ln190_reg_1246;
wire   [31:0] valuesToCopy_fu_712_p2;
reg   [31:0] valuesToCopy_reg_1251;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln193_fu_717_p2;
reg   [31:0] axi_read_addr_reg_1261;
wire   [0:0] exitcond9410_fu_742_p2;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] empty_146_fu_747_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] empty_148_fu_753_p1;
reg   [2:0] empty_148_reg_1276;
reg   [2:0] empty_148_reg_1276_pp0_iter1_reg;
reg   [8:0] newIndex_reg_1280;
reg   [8:0] newIndex_reg_1280_pp0_iter1_reg;
reg   [31:0] axi_read_addr_read_reg_1285;
wire   [31:0] valuesToCopy_2_fu_793_p2;
reg   [31:0] valuesToCopy_2_reg_1290;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln198_fu_798_p2;
reg   [31:0] axi_read_addr_1_reg_1300;
wire   [0:0] exitcond939_fu_823_p2;
reg   [0:0] exitcond939_reg_1306_pp1_iter1_reg;
wire   [31:0] empty_149_fu_828_p2;
reg   [31:0] empty_149_reg_1310;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] axi_read_addr_1_read_reg_1315;
wire   [0:0] icmp_ln203_fu_843_p2;
wire    ap_CS_fsm_state24;
reg   [31:0] axi_read_addr_2_reg_1324;
wire   [0:0] exitcond928_fu_867_p2;
reg   [0:0] exitcond928_reg_1330_pp2_iter1_reg;
wire   [31:0] empty_152_fu_872_p2;
reg   [31:0] empty_152_reg_1334;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] axi_read_addr_2_read_reg_1339;
wire  signed [7:0] trunc_ln205_fu_887_p1;
reg  signed [7:0] trunc_ln205_reg_1344;
wire    ap_CS_fsm_state36;
wire    grp_MyGemv_fu_651_ap_ready;
wire    grp_MyGemv_fu_651_ap_done;
wire    ap_sync_grp_MyGemv_fu_651_ap_ready;
wire    ap_sync_grp_MyGemv_fu_651_ap_done;
reg    ap_block_state36_on_subcall_done;
wire   [0:0] icmp_ln208_fu_890_p2;
reg   [0:0] icmp_ln208_reg_1350;
wire   [0:0] icmp_ln82_fu_896_p2;
reg   [0:0] icmp_ln82_reg_1355;
wire   [0:0] and_ln208_fu_901_p2;
wire   [0:0] icmp_ln82_1_fu_907_p2;
reg   [0:0] icmp_ln82_1_reg_1363;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state37_pp3_stage0_iter0;
wire    ap_block_state38_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [31:0] add_ln82_fu_912_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [7:0] trunc_ln85_fu_923_p1;
reg   [7:0] trunc_ln85_reg_1377;
wire   [0:0] icmp_ln82_2_fu_936_p2;
reg   [0:0] icmp_ln82_2_reg_1382;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state40_pp4_stage0_iter0;
wire    ap_block_state41_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [31:0] add_ln82_1_fu_941_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [63:0] zext_ln82_1_fu_947_p1;
reg   [63:0] zext_ln82_1_reg_1391;
wire  signed [7:0] empty_154_fu_952_p1;
reg  signed [7:0] empty_154_reg_1401;
wire    ap_CS_fsm_state42;
wire   [31:0] sub18_fu_958_p2;
reg   [31:0] sub18_reg_1406;
(* use_dsp48 = "no" *) wire  signed [11:0] add_ln214_fu_963_p2;
reg  signed [11:0] add_ln214_reg_1411;
wire   [31:0] add_ln219_fu_974_p2;
reg   [31:0] add_ln219_reg_1419;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln214_fu_969_p2;
wire   [7:0] mul_ln219_fu_994_p2;
reg   [7:0] mul_ln219_reg_1429;
wire   [7:0] mul_ln232_fu_999_p2;
reg   [7:0] mul_ln232_reg_1435;
wire  signed [11:0] grp_fu_1141_p3;
wire    ap_CS_fsm_state46;
wire  signed [11:0] grp_fu_1152_p2;
reg  signed [11:0] mul_ln217_1_reg_1446;
wire    ap_CS_fsm_state49;
wire   [0:0] icmp_ln82_5_fu_1003_p2;
reg   [0:0] icmp_ln82_5_reg_1451;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state51_pp5_stage0_iter0;
wire    ap_block_state52_pp5_stage0_iter1;
wire    ap_block_pp5_stage0_11001;
wire   [31:0] add_ln82_3_fu_1008_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [7:0] add_ln85_1_fu_1023_p2;
reg   [7:0] add_ln85_1_reg_1465;
wire   [0:0] icmp_ln82_6_fu_1037_p2;
reg   [0:0] icmp_ln82_6_reg_1470;
wire    ap_CS_fsm_pp6_stage0;
wire    ap_block_state54_pp6_stage0_iter0;
wire    ap_block_state55_pp6_stage0_iter1;
wire    ap_block_pp6_stage0_11001;
wire   [31:0] add_ln82_4_fu_1042_p2;
reg    ap_enable_reg_pp6_iter0;
wire   [63:0] zext_ln82_4_fu_1048_p1;
reg   [63:0] zext_ln82_4_reg_1479;
wire  signed [11:0] grp_fu_1147_p3;
wire    ap_CS_fsm_state59;
wire  signed [11:0] grp_fu_1158_p2;
reg  signed [11:0] mul_ln230_1_reg_1494;
wire    ap_CS_fsm_state62;
wire   [0:0] and_ln237_fu_1058_p2;
wire    ap_CS_fsm_state63;
wire    grp_MyGemv_1_fu_623_ap_ready;
wire    grp_MyGemv_1_fu_623_ap_done;
wire    ap_sync_grp_MyGemv_1_fu_623_ap_ready;
wire    ap_sync_grp_MyGemv_1_fu_623_ap_done;
reg    ap_block_state63_on_subcall_done;
wire   [0:0] icmp_ln82_4_fu_1063_p2;
reg   [0:0] icmp_ln82_4_reg_1503;
wire    ap_CS_fsm_pp7_stage0;
wire    ap_block_state64_pp7_stage0_iter0;
wire    ap_block_state65_pp7_stage0_iter1;
wire    ap_block_pp7_stage0_11001;
wire   [31:0] add_ln82_2_fu_1068_p2;
reg    ap_enable_reg_pp7_iter0;
wire   [7:0] add_ln85_fu_1083_p2;
reg   [7:0] add_ln85_reg_1517;
wire   [0:0] icmp_ln241_fu_1097_p2;
wire    ap_CS_fsm_state66;
reg   [31:0] axi_write_addr_reg_1526;
wire   [0:0] exitcond1_fu_1121_p2;
wire    ap_CS_fsm_pp8_stage0;
wire    ap_block_state68_pp8_stage0_iter0;
wire    ap_block_state69_pp8_stage0_iter1;
wire    ap_block_state70_pp8_stage0_iter2;
reg    ap_block_state70_io;
reg    ap_block_pp8_stage0_11001;
wire   [31:0] empty_157_fu_1126_p2;
reg    ap_enable_reg_pp8_iter0;
wire   [31:0] layerBuffer0_q0;
reg   [31:0] layerBuffer0_load_4_reg_1546;
reg    ap_enable_reg_pp8_iter1;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state31;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state32;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state37;
reg    ap_enable_reg_pp3_iter1;
wire    ap_CS_fsm_state39;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state40;
reg    ap_enable_reg_pp4_iter1;
wire    ap_CS_fsm_state50;
reg    ap_block_state50_on_subcall_done;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state51;
reg    ap_enable_reg_pp5_iter1;
wire    ap_CS_fsm_state53;
wire    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state54;
reg    ap_enable_reg_pp6_iter1;
wire    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state64;
reg    ap_enable_reg_pp7_iter1;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state68;
reg   [2:0] inputData_address0;
reg    inputData_ce0;
reg    inputData_we0;
wire   [31:0] inputData_d0;
wire   [31:0] inputData_q0;
reg    inputData_ce1;
wire   [31:0] inputData_q1;
reg   [4:0] layerBuffer0_address0;
reg    layerBuffer0_ce0;
reg    layerBuffer0_we0;
reg   [31:0] layerBuffer0_d0;
reg   [4:0] layerBuffer1_address0;
reg    layerBuffer1_ce0;
reg    layerBuffer1_we0;
wire   [31:0] layerBuffer1_q0;
reg    layerBuffer1_ce1;
wire   [31:0] layerBuffer1_q1;
wire   [8:0] grp_MyGemv_1_fu_623_weights_0_address0;
wire    grp_MyGemv_1_fu_623_weights_0_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_weights_0_d0;
wire    grp_MyGemv_1_fu_623_weights_0_we0;
wire   [8:0] grp_MyGemv_1_fu_623_weights_0_address1;
wire    grp_MyGemv_1_fu_623_weights_0_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_weights_0_d1;
wire    grp_MyGemv_1_fu_623_weights_0_we1;
wire   [8:0] grp_MyGemv_1_fu_623_weights_1_address0;
wire    grp_MyGemv_1_fu_623_weights_1_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_weights_1_d0;
wire    grp_MyGemv_1_fu_623_weights_1_we0;
wire   [8:0] grp_MyGemv_1_fu_623_weights_1_address1;
wire    grp_MyGemv_1_fu_623_weights_1_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_weights_1_d1;
wire    grp_MyGemv_1_fu_623_weights_1_we1;
wire   [8:0] grp_MyGemv_1_fu_623_weights_2_address0;
wire    grp_MyGemv_1_fu_623_weights_2_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_weights_2_d0;
wire    grp_MyGemv_1_fu_623_weights_2_we0;
wire   [8:0] grp_MyGemv_1_fu_623_weights_2_address1;
wire    grp_MyGemv_1_fu_623_weights_2_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_weights_2_d1;
wire    grp_MyGemv_1_fu_623_weights_2_we1;
wire   [8:0] grp_MyGemv_1_fu_623_weights_3_address0;
wire    grp_MyGemv_1_fu_623_weights_3_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_weights_3_d0;
wire    grp_MyGemv_1_fu_623_weights_3_we0;
wire   [8:0] grp_MyGemv_1_fu_623_weights_3_address1;
wire    grp_MyGemv_1_fu_623_weights_3_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_weights_3_d1;
wire    grp_MyGemv_1_fu_623_weights_3_we1;
wire   [8:0] grp_MyGemv_1_fu_623_weights_4_address0;
wire    grp_MyGemv_1_fu_623_weights_4_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_weights_4_d0;
wire    grp_MyGemv_1_fu_623_weights_4_we0;
wire   [8:0] grp_MyGemv_1_fu_623_weights_4_address1;
wire    grp_MyGemv_1_fu_623_weights_4_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_weights_4_d1;
wire    grp_MyGemv_1_fu_623_weights_4_we1;
wire   [8:0] grp_MyGemv_1_fu_623_weights_5_address0;
wire    grp_MyGemv_1_fu_623_weights_5_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_weights_5_d0;
wire    grp_MyGemv_1_fu_623_weights_5_we0;
wire   [8:0] grp_MyGemv_1_fu_623_weights_5_address1;
wire    grp_MyGemv_1_fu_623_weights_5_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_weights_5_d1;
wire    grp_MyGemv_1_fu_623_weights_5_we1;
wire   [8:0] grp_MyGemv_1_fu_623_weights_6_address0;
wire    grp_MyGemv_1_fu_623_weights_6_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_weights_6_d0;
wire    grp_MyGemv_1_fu_623_weights_6_we0;
wire   [8:0] grp_MyGemv_1_fu_623_weights_6_address1;
wire    grp_MyGemv_1_fu_623_weights_6_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_weights_6_d1;
wire    grp_MyGemv_1_fu_623_weights_6_we1;
wire   [8:0] grp_MyGemv_1_fu_623_weights_7_address0;
wire    grp_MyGemv_1_fu_623_weights_7_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_weights_7_d0;
wire    grp_MyGemv_1_fu_623_weights_7_we0;
wire   [8:0] grp_MyGemv_1_fu_623_weights_7_address1;
wire    grp_MyGemv_1_fu_623_weights_7_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_weights_7_d1;
wire    grp_MyGemv_1_fu_623_weights_7_we1;
reg   [11:0] grp_MyGemv_1_fu_623_weights_offset;
wire   [4:0] grp_MyGemv_1_fu_623_input_r_address0;
wire    grp_MyGemv_1_fu_623_input_r_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_input_r_d0;
wire    grp_MyGemv_1_fu_623_input_r_we0;
wire   [4:0] grp_MyGemv_1_fu_623_input_r_address1;
wire    grp_MyGemv_1_fu_623_input_r_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_input_r_d1;
wire    grp_MyGemv_1_fu_623_input_r_we1;
wire   [7:0] grp_MyGemv_1_fu_623_bias_address0;
wire    grp_MyGemv_1_fu_623_bias_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_bias_d0;
wire    grp_MyGemv_1_fu_623_bias_we0;
wire   [7:0] grp_MyGemv_1_fu_623_bias_address1;
wire    grp_MyGemv_1_fu_623_bias_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_bias_d1;
wire    grp_MyGemv_1_fu_623_bias_we1;
reg   [7:0] grp_MyGemv_1_fu_623_bias_offset;
wire   [4:0] grp_MyGemv_1_fu_623_outputPort_address0;
wire    grp_MyGemv_1_fu_623_outputPort_ce0;
wire   [31:0] grp_MyGemv_1_fu_623_outputPort_d0;
wire    grp_MyGemv_1_fu_623_outputPort_we0;
wire   [4:0] grp_MyGemv_1_fu_623_outputPort_address1;
wire    grp_MyGemv_1_fu_623_outputPort_ce1;
wire   [31:0] grp_MyGemv_1_fu_623_outputPort_d1;
wire    grp_MyGemv_1_fu_623_outputPort_we1;
reg   [31:0] grp_MyGemv_1_fu_623_p_n;
wire    grp_MyGemv_1_fu_623_ap_start;
wire    grp_MyGemv_1_fu_623_ap_idle;
reg    grp_MyGemv_1_fu_623_ap_continue;
wire   [8:0] grp_MyGemv_fu_651_weights_0_address0;
wire    grp_MyGemv_fu_651_weights_0_ce0;
wire   [31:0] grp_MyGemv_fu_651_weights_0_d0;
wire    grp_MyGemv_fu_651_weights_0_we0;
wire   [8:0] grp_MyGemv_fu_651_weights_0_address1;
wire    grp_MyGemv_fu_651_weights_0_ce1;
wire   [31:0] grp_MyGemv_fu_651_weights_0_d1;
wire    grp_MyGemv_fu_651_weights_0_we1;
wire   [8:0] grp_MyGemv_fu_651_weights_1_address0;
wire    grp_MyGemv_fu_651_weights_1_ce0;
wire   [31:0] grp_MyGemv_fu_651_weights_1_d0;
wire    grp_MyGemv_fu_651_weights_1_we0;
wire   [8:0] grp_MyGemv_fu_651_weights_1_address1;
wire    grp_MyGemv_fu_651_weights_1_ce1;
wire   [31:0] grp_MyGemv_fu_651_weights_1_d1;
wire    grp_MyGemv_fu_651_weights_1_we1;
wire   [8:0] grp_MyGemv_fu_651_weights_2_address0;
wire    grp_MyGemv_fu_651_weights_2_ce0;
wire   [31:0] grp_MyGemv_fu_651_weights_2_d0;
wire    grp_MyGemv_fu_651_weights_2_we0;
wire   [8:0] grp_MyGemv_fu_651_weights_2_address1;
wire    grp_MyGemv_fu_651_weights_2_ce1;
wire   [31:0] grp_MyGemv_fu_651_weights_2_d1;
wire    grp_MyGemv_fu_651_weights_2_we1;
wire   [8:0] grp_MyGemv_fu_651_weights_3_address0;
wire    grp_MyGemv_fu_651_weights_3_ce0;
wire   [31:0] grp_MyGemv_fu_651_weights_3_d0;
wire    grp_MyGemv_fu_651_weights_3_we0;
wire   [8:0] grp_MyGemv_fu_651_weights_3_address1;
wire    grp_MyGemv_fu_651_weights_3_ce1;
wire   [31:0] grp_MyGemv_fu_651_weights_3_d1;
wire    grp_MyGemv_fu_651_weights_3_we1;
wire   [8:0] grp_MyGemv_fu_651_weights_4_address0;
wire    grp_MyGemv_fu_651_weights_4_ce0;
wire   [31:0] grp_MyGemv_fu_651_weights_4_d0;
wire    grp_MyGemv_fu_651_weights_4_we0;
wire   [8:0] grp_MyGemv_fu_651_weights_4_address1;
wire    grp_MyGemv_fu_651_weights_4_ce1;
wire   [31:0] grp_MyGemv_fu_651_weights_4_d1;
wire    grp_MyGemv_fu_651_weights_4_we1;
wire   [8:0] grp_MyGemv_fu_651_weights_5_address0;
wire    grp_MyGemv_fu_651_weights_5_ce0;
wire   [31:0] grp_MyGemv_fu_651_weights_5_d0;
wire    grp_MyGemv_fu_651_weights_5_we0;
wire   [8:0] grp_MyGemv_fu_651_weights_5_address1;
wire    grp_MyGemv_fu_651_weights_5_ce1;
wire   [31:0] grp_MyGemv_fu_651_weights_5_d1;
wire    grp_MyGemv_fu_651_weights_5_we1;
wire   [8:0] grp_MyGemv_fu_651_weights_6_address0;
wire    grp_MyGemv_fu_651_weights_6_ce0;
wire   [31:0] grp_MyGemv_fu_651_weights_6_d0;
wire    grp_MyGemv_fu_651_weights_6_we0;
wire   [8:0] grp_MyGemv_fu_651_weights_6_address1;
wire    grp_MyGemv_fu_651_weights_6_ce1;
wire   [31:0] grp_MyGemv_fu_651_weights_6_d1;
wire    grp_MyGemv_fu_651_weights_6_we1;
wire   [8:0] grp_MyGemv_fu_651_weights_7_address0;
wire    grp_MyGemv_fu_651_weights_7_ce0;
wire   [31:0] grp_MyGemv_fu_651_weights_7_d0;
wire    grp_MyGemv_fu_651_weights_7_we0;
wire   [8:0] grp_MyGemv_fu_651_weights_7_address1;
wire    grp_MyGemv_fu_651_weights_7_ce1;
wire   [31:0] grp_MyGemv_fu_651_weights_7_d1;
wire    grp_MyGemv_fu_651_weights_7_we1;
wire   [2:0] grp_MyGemv_fu_651_input_r_address0;
wire    grp_MyGemv_fu_651_input_r_ce0;
wire   [31:0] grp_MyGemv_fu_651_input_r_d0;
wire    grp_MyGemv_fu_651_input_r_we0;
wire   [2:0] grp_MyGemv_fu_651_input_r_address1;
wire    grp_MyGemv_fu_651_input_r_ce1;
wire   [31:0] grp_MyGemv_fu_651_input_r_d1;
wire    grp_MyGemv_fu_651_input_r_we1;
wire   [7:0] grp_MyGemv_fu_651_bias_address0;
wire    grp_MyGemv_fu_651_bias_ce0;
wire   [31:0] grp_MyGemv_fu_651_bias_d0;
wire    grp_MyGemv_fu_651_bias_we0;
wire   [7:0] grp_MyGemv_fu_651_bias_address1;
wire    grp_MyGemv_fu_651_bias_ce1;
wire   [31:0] grp_MyGemv_fu_651_bias_d1;
wire    grp_MyGemv_fu_651_bias_we1;
wire   [4:0] grp_MyGemv_fu_651_outputPort_address0;
wire    grp_MyGemv_fu_651_outputPort_ce0;
wire   [31:0] grp_MyGemv_fu_651_outputPort_d0;
wire    grp_MyGemv_fu_651_outputPort_we0;
wire   [4:0] grp_MyGemv_fu_651_outputPort_address1;
wire    grp_MyGemv_fu_651_outputPort_ce1;
wire   [31:0] grp_MyGemv_fu_651_outputPort_d1;
wire    grp_MyGemv_fu_651_outputPort_we1;
wire    grp_MyGemv_fu_651_ap_start;
wire    grp_MyGemv_fu_651_ap_idle;
reg    grp_MyGemv_fu_651_ap_continue;
reg   [31:0] ap_phi_mux_loop_index61_phi_fu_526_p4;
reg   [31:0] ap_phi_mux_loop_index55_phi_fu_538_p4;
reg   [31:0] i_7_reg_568;
wire    ap_CS_fsm_state56;
reg    grp_MyGemv_1_fu_623_ap_start_reg;
reg    ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready;
reg    ap_sync_reg_grp_MyGemv_1_fu_623_ap_done;
reg    grp_MyGemv_fu_651_ap_start_reg;
wire    ap_CS_fsm_state35;
reg    ap_sync_reg_grp_MyGemv_fu_651_ap_ready;
reg    ap_sync_reg_grp_MyGemv_fu_651_ap_done;
wire   [63:0] newIndex_cast_fu_778_p1;
wire   [63:0] loop_index61_cast_fu_834_p1;
wire   [63:0] loop_index55_cast_fu_878_p1;
wire   [63:0] zext_ln82_fu_918_p1;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln85_fu_932_p1;
wire    ap_block_pp4_stage0;
wire   [63:0] zext_ln82_3_fu_1014_p1;
wire    ap_block_pp5_stage0;
wire   [63:0] zext_ln85_2_fu_1033_p1;
wire    ap_block_pp6_stage0;
wire   [63:0] zext_ln82_2_fu_1074_p1;
wire    ap_block_pp7_stage0;
wire   [63:0] zext_ln85_1_fu_1093_p1;
wire   [63:0] loop_index_cast_fu_1132_p1;
wire  signed [63:0] p_cast17_cast_fu_732_p1;
wire  signed [63:0] p_cast18_cast_fu_813_p1;
wire  signed [63:0] p_cast_cast_fu_857_p1;
wire  signed [63:0] p_cast19_cast_fu_1111_p1;
reg    ap_block_state75;
wire    ap_block_pp8_stage0_01001;
wire   [31:0] empty_147_fu_767_p1;
wire   [31:0] bitcast_ln85_fu_927_p1;
reg   [31:0] bramLayerResults_Addr_A_orig;
wire   [31:0] bitcast_ln85_2_fu_1028_p1;
wire   [31:0] bitcast_ln85_1_fu_1088_p1;
wire  signed [31:0] trunc_ln190_fu_687_p0;
wire  signed [31:0] add_ln190_fu_691_p0;
wire  signed [31:0] mul_ln190_fu_697_p1;
wire   [31:0] add_ln191_1_fu_703_p2;
wire  signed [31:0] valuesToCopy_fu_712_p1;
wire   [61:0] p_cast1_fu_723_p4;
wire   [31:0] valuesToCopy_1_fu_789_p2;
wire   [61:0] p_cast2_fu_804_p4;
wire   [61:0] p_cast_fu_848_p4;
wire   [11:0] empty_155_fu_955_p1;
wire   [7:0] trunc_ln217_fu_984_p1;
wire  signed [7:0] mul_ln219_fu_994_p1;
wire   [7:0] trunc_ln85_2_fu_1019_p1;
wire   [0:0] icmp_ln82_3_fu_1053_p2;
wire   [7:0] trunc_ln85_1_fu_1079_p1;
wire   [61:0] p_cast3_fu_1102_p4;
wire  signed [11:0] grp_fu_1141_p1;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state58;
reg   [61:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;

// power-on initialization
initial begin
#0 ap_CS_fsm = 62'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 grp_MyGemv_1_fu_623_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready = 1'b0;
#0 ap_sync_reg_grp_MyGemv_1_fu_623_ap_done = 1'b0;
#0 grp_MyGemv_fu_651_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_MyGemv_fu_651_ap_ready = 1'b0;
#0 ap_sync_reg_grp_MyGemv_fu_651_ap_done = 1'b0;
end

MultiLayerPerceptronDecoupled_bramBias #(
    .DataWidth( 32 ),
    .AddressRange( 136 ),
    .AddressWidth( 8 ))
bramBias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramBias_address0),
    .ce0(bramBias_ce0),
    .we0(bramBias_we0),
    .d0(bramBias_d0),
    .q0(bramBias_q0)
);

MultiLayerPerceptronDecoupled_bramWeight_0 #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
bramWeight_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_0_address0),
    .ce0(bramWeight_0_ce0),
    .we0(bramWeight_0_we0),
    .d0(empty_147_fu_767_p1),
    .q0(bramWeight_0_q0),
    .address1(grp_MyGemv_1_fu_623_weights_0_address1),
    .ce1(bramWeight_0_ce1),
    .q1(bramWeight_0_q1)
);

MultiLayerPerceptronDecoupled_bramWeight_0 #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
bramWeight_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_1_address0),
    .ce0(bramWeight_1_ce0),
    .we0(bramWeight_1_we0),
    .d0(empty_147_fu_767_p1),
    .q0(bramWeight_1_q0),
    .address1(grp_MyGemv_1_fu_623_weights_1_address1),
    .ce1(bramWeight_1_ce1),
    .q1(bramWeight_1_q1)
);

MultiLayerPerceptronDecoupled_bramWeight_0 #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
bramWeight_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_2_address0),
    .ce0(bramWeight_2_ce0),
    .we0(bramWeight_2_we0),
    .d0(empty_147_fu_767_p1),
    .q0(bramWeight_2_q0),
    .address1(grp_MyGemv_1_fu_623_weights_2_address1),
    .ce1(bramWeight_2_ce1),
    .q1(bramWeight_2_q1)
);

MultiLayerPerceptronDecoupled_bramWeight_0 #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
bramWeight_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_3_address0),
    .ce0(bramWeight_3_ce0),
    .we0(bramWeight_3_we0),
    .d0(empty_147_fu_767_p1),
    .q0(bramWeight_3_q0),
    .address1(grp_MyGemv_1_fu_623_weights_3_address1),
    .ce1(bramWeight_3_ce1),
    .q1(bramWeight_3_q1)
);

MultiLayerPerceptronDecoupled_bramWeight_0 #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
bramWeight_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_4_address0),
    .ce0(bramWeight_4_ce0),
    .we0(bramWeight_4_we0),
    .d0(empty_147_fu_767_p1),
    .q0(bramWeight_4_q0),
    .address1(grp_MyGemv_1_fu_623_weights_4_address1),
    .ce1(bramWeight_4_ce1),
    .q1(bramWeight_4_q1)
);

MultiLayerPerceptronDecoupled_bramWeight_0 #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
bramWeight_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_5_address0),
    .ce0(bramWeight_5_ce0),
    .we0(bramWeight_5_we0),
    .d0(empty_147_fu_767_p1),
    .q0(bramWeight_5_q0),
    .address1(grp_MyGemv_1_fu_623_weights_5_address1),
    .ce1(bramWeight_5_ce1),
    .q1(bramWeight_5_q1)
);

MultiLayerPerceptronDecoupled_bramWeight_0 #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
bramWeight_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_6_address0),
    .ce0(bramWeight_6_ce0),
    .we0(bramWeight_6_we0),
    .d0(empty_147_fu_767_p1),
    .q0(bramWeight_6_q0),
    .address1(grp_MyGemv_1_fu_623_weights_6_address1),
    .ce1(bramWeight_6_ce1),
    .q1(bramWeight_6_q1)
);

MultiLayerPerceptronDecoupled_bramWeight_0 #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
bramWeight_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_7_address0),
    .ce0(bramWeight_7_ce0),
    .we0(bramWeight_7_we0),
    .d0(empty_147_fu_767_p1),
    .q0(bramWeight_7_q0),
    .address1(grp_MyGemv_1_fu_623_weights_7_address1),
    .ce1(bramWeight_7_ce1),
    .q1(bramWeight_7_q1)
);

MultiLayerPerceptronDecoupled_configuration_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONFIGURATION_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONFIGURATION_DATA_WIDTH ))
configuration_s_axi_U(
    .AWVALID(s_axi_configuration_AWVALID),
    .AWREADY(s_axi_configuration_AWREADY),
    .AWADDR(s_axi_configuration_AWADDR),
    .WVALID(s_axi_configuration_WVALID),
    .WREADY(s_axi_configuration_WREADY),
    .WDATA(s_axi_configuration_WDATA),
    .WSTRB(s_axi_configuration_WSTRB),
    .ARVALID(s_axi_configuration_ARVALID),
    .ARREADY(s_axi_configuration_ARREADY),
    .ARADDR(s_axi_configuration_ARADDR),
    .RVALID(s_axi_configuration_RVALID),
    .RREADY(s_axi_configuration_RREADY),
    .RDATA(s_axi_configuration_RDATA),
    .RRESP(s_axi_configuration_RRESP),
    .BVALID(s_axi_configuration_BVALID),
    .BREADY(s_axi_configuration_BREADY),
    .BRESP(s_axi_configuration_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .numberInputs(numberInputs),
    .numberOutputs(numberOutputs),
    .numberLayers(numberLayers),
    .numberNeurons(numberNeurons),
    .loadParameters(loadParameters),
    .exportLayers(exportLayers),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

MultiLayerPerceptronDecoupled_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_r(input_r),
    .output_r(output_r),
    .axiWeightInput(axiWeightInput),
    .axiBiasInput(axiBiasInput),
    .axiWeightOutput(axiWeightOutput),
    .axiBiasOutput(axiBiasOutput)
);

MultiLayerPerceptronDecoupled_axi_read_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 128 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_READ_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_READ_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_READ_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_READ_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_READ_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_READ_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_READ_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_READ_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AXI_READ_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_READ_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_READ_CACHE_VALUE ))
axi_read_m_axi_U(
    .AWVALID(m_axi_axi_read_AWVALID),
    .AWREADY(m_axi_axi_read_AWREADY),
    .AWADDR(m_axi_axi_read_AWADDR),
    .AWID(m_axi_axi_read_AWID),
    .AWLEN(m_axi_axi_read_AWLEN),
    .AWSIZE(m_axi_axi_read_AWSIZE),
    .AWBURST(m_axi_axi_read_AWBURST),
    .AWLOCK(m_axi_axi_read_AWLOCK),
    .AWCACHE(m_axi_axi_read_AWCACHE),
    .AWPROT(m_axi_axi_read_AWPROT),
    .AWQOS(m_axi_axi_read_AWQOS),
    .AWREGION(m_axi_axi_read_AWREGION),
    .AWUSER(m_axi_axi_read_AWUSER),
    .WVALID(m_axi_axi_read_WVALID),
    .WREADY(m_axi_axi_read_WREADY),
    .WDATA(m_axi_axi_read_WDATA),
    .WSTRB(m_axi_axi_read_WSTRB),
    .WLAST(m_axi_axi_read_WLAST),
    .WID(m_axi_axi_read_WID),
    .WUSER(m_axi_axi_read_WUSER),
    .ARVALID(m_axi_axi_read_ARVALID),
    .ARREADY(m_axi_axi_read_ARREADY),
    .ARADDR(m_axi_axi_read_ARADDR),
    .ARID(m_axi_axi_read_ARID),
    .ARLEN(m_axi_axi_read_ARLEN),
    .ARSIZE(m_axi_axi_read_ARSIZE),
    .ARBURST(m_axi_axi_read_ARBURST),
    .ARLOCK(m_axi_axi_read_ARLOCK),
    .ARCACHE(m_axi_axi_read_ARCACHE),
    .ARPROT(m_axi_axi_read_ARPROT),
    .ARQOS(m_axi_axi_read_ARQOS),
    .ARREGION(m_axi_axi_read_ARREGION),
    .ARUSER(m_axi_axi_read_ARUSER),
    .RVALID(m_axi_axi_read_RVALID),
    .RREADY(m_axi_axi_read_RREADY),
    .RDATA(m_axi_axi_read_RDATA),
    .RLAST(m_axi_axi_read_RLAST),
    .RID(m_axi_axi_read_RID),
    .RUSER(m_axi_axi_read_RUSER),
    .RRESP(m_axi_axi_read_RRESP),
    .BVALID(m_axi_axi_read_BVALID),
    .BREADY(m_axi_axi_read_BREADY),
    .BRESP(m_axi_axi_read_BRESP),
    .BID(m_axi_axi_read_BID),
    .BUSER(m_axi_axi_read_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(axi_read_ARVALID),
    .I_ARREADY(axi_read_ARREADY),
    .I_ARADDR(axi_read_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(axi_read_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(axi_read_RVALID),
    .I_RREADY(axi_read_RREADY),
    .I_RDATA(axi_read_RDATA),
    .I_RID(axi_read_RID),
    .I_RUSER(axi_read_RUSER),
    .I_RRESP(axi_read_RRESP),
    .I_RLAST(axi_read_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(axi_read_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(axi_read_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(axi_read_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(axi_read_BRESP),
    .I_BID(axi_read_BID),
    .I_BUSER(axi_read_BUSER)
);

MultiLayerPerceptronDecoupled_axi_write_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 128 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_WRITE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_WRITE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_WRITE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_WRITE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_WRITE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_WRITE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_WRITE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_WRITE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AXI_WRITE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_WRITE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_WRITE_CACHE_VALUE ))
axi_write_m_axi_U(
    .AWVALID(m_axi_axi_write_AWVALID),
    .AWREADY(m_axi_axi_write_AWREADY),
    .AWADDR(m_axi_axi_write_AWADDR),
    .AWID(m_axi_axi_write_AWID),
    .AWLEN(m_axi_axi_write_AWLEN),
    .AWSIZE(m_axi_axi_write_AWSIZE),
    .AWBURST(m_axi_axi_write_AWBURST),
    .AWLOCK(m_axi_axi_write_AWLOCK),
    .AWCACHE(m_axi_axi_write_AWCACHE),
    .AWPROT(m_axi_axi_write_AWPROT),
    .AWQOS(m_axi_axi_write_AWQOS),
    .AWREGION(m_axi_axi_write_AWREGION),
    .AWUSER(m_axi_axi_write_AWUSER),
    .WVALID(m_axi_axi_write_WVALID),
    .WREADY(m_axi_axi_write_WREADY),
    .WDATA(m_axi_axi_write_WDATA),
    .WSTRB(m_axi_axi_write_WSTRB),
    .WLAST(m_axi_axi_write_WLAST),
    .WID(m_axi_axi_write_WID),
    .WUSER(m_axi_axi_write_WUSER),
    .ARVALID(m_axi_axi_write_ARVALID),
    .ARREADY(m_axi_axi_write_ARREADY),
    .ARADDR(m_axi_axi_write_ARADDR),
    .ARID(m_axi_axi_write_ARID),
    .ARLEN(m_axi_axi_write_ARLEN),
    .ARSIZE(m_axi_axi_write_ARSIZE),
    .ARBURST(m_axi_axi_write_ARBURST),
    .ARLOCK(m_axi_axi_write_ARLOCK),
    .ARCACHE(m_axi_axi_write_ARCACHE),
    .ARPROT(m_axi_axi_write_ARPROT),
    .ARQOS(m_axi_axi_write_ARQOS),
    .ARREGION(m_axi_axi_write_ARREGION),
    .ARUSER(m_axi_axi_write_ARUSER),
    .RVALID(m_axi_axi_write_RVALID),
    .RREADY(m_axi_axi_write_RREADY),
    .RDATA(m_axi_axi_write_RDATA),
    .RLAST(m_axi_axi_write_RLAST),
    .RID(m_axi_axi_write_RID),
    .RUSER(m_axi_axi_write_RUSER),
    .RRESP(m_axi_axi_write_RRESP),
    .BVALID(m_axi_axi_write_BVALID),
    .BREADY(m_axi_axi_write_BREADY),
    .BRESP(m_axi_axi_write_BRESP),
    .BID(m_axi_axi_write_BID),
    .BUSER(m_axi_axi_write_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(axi_write_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(axi_write_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(axi_write_RDATA),
    .I_RID(axi_write_RID),
    .I_RUSER(axi_write_RUSER),
    .I_RRESP(axi_write_RRESP),
    .I_RLAST(axi_write_RLAST),
    .I_AWVALID(axi_write_AWVALID),
    .I_AWREADY(axi_write_AWREADY),
    .I_AWADDR(axi_write_addr_reg_1526),
    .I_AWID(1'd0),
    .I_AWLEN(numberOutputs_read_reg_1234),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(axi_write_WVALID),
    .I_WREADY(axi_write_WREADY),
    .I_WDATA(axi_write_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(axi_write_BVALID),
    .I_BREADY(axi_write_BREADY),
    .I_BRESP(axi_write_BRESP),
    .I_BID(axi_write_BID),
    .I_BUSER(axi_write_BUSER)
);

MultiLayerPerceptronDecoupled_inputData #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
inputData_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inputData_address0),
    .ce0(inputData_ce0),
    .we0(inputData_we0),
    .d0(inputData_d0),
    .q0(inputData_q0),
    .address1(grp_MyGemv_fu_651_input_r_address1),
    .ce1(inputData_ce1),
    .q1(inputData_q1)
);

MultiLayerPerceptronDecoupled_layerBuffer0 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layerBuffer0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layerBuffer0_address0),
    .ce0(layerBuffer0_ce0),
    .we0(layerBuffer0_we0),
    .d0(layerBuffer0_d0),
    .q0(layerBuffer0_q0)
);

MultiLayerPerceptronDecoupled_layerBuffer1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layerBuffer1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layerBuffer1_address0),
    .ce0(layerBuffer1_ce0),
    .we0(layerBuffer1_we0),
    .d0(layerBuffer0_q0),
    .q0(layerBuffer1_q0),
    .address1(grp_MyGemv_1_fu_623_input_r_address1),
    .ce1(layerBuffer1_ce1),
    .q1(layerBuffer1_q1)
);

MultiLayerPerceptronDecoupled_MyGemv_1 grp_MyGemv_1_fu_623(
    .weights_0_address0(grp_MyGemv_1_fu_623_weights_0_address0),
    .weights_0_ce0(grp_MyGemv_1_fu_623_weights_0_ce0),
    .weights_0_d0(grp_MyGemv_1_fu_623_weights_0_d0),
    .weights_0_q0(bramWeight_0_q0),
    .weights_0_we0(grp_MyGemv_1_fu_623_weights_0_we0),
    .weights_0_address1(grp_MyGemv_1_fu_623_weights_0_address1),
    .weights_0_ce1(grp_MyGemv_1_fu_623_weights_0_ce1),
    .weights_0_d1(grp_MyGemv_1_fu_623_weights_0_d1),
    .weights_0_q1(bramWeight_0_q1),
    .weights_0_we1(grp_MyGemv_1_fu_623_weights_0_we1),
    .weights_1_address0(grp_MyGemv_1_fu_623_weights_1_address0),
    .weights_1_ce0(grp_MyGemv_1_fu_623_weights_1_ce0),
    .weights_1_d0(grp_MyGemv_1_fu_623_weights_1_d0),
    .weights_1_q0(bramWeight_1_q0),
    .weights_1_we0(grp_MyGemv_1_fu_623_weights_1_we0),
    .weights_1_address1(grp_MyGemv_1_fu_623_weights_1_address1),
    .weights_1_ce1(grp_MyGemv_1_fu_623_weights_1_ce1),
    .weights_1_d1(grp_MyGemv_1_fu_623_weights_1_d1),
    .weights_1_q1(bramWeight_1_q1),
    .weights_1_we1(grp_MyGemv_1_fu_623_weights_1_we1),
    .weights_2_address0(grp_MyGemv_1_fu_623_weights_2_address0),
    .weights_2_ce0(grp_MyGemv_1_fu_623_weights_2_ce0),
    .weights_2_d0(grp_MyGemv_1_fu_623_weights_2_d0),
    .weights_2_q0(bramWeight_2_q0),
    .weights_2_we0(grp_MyGemv_1_fu_623_weights_2_we0),
    .weights_2_address1(grp_MyGemv_1_fu_623_weights_2_address1),
    .weights_2_ce1(grp_MyGemv_1_fu_623_weights_2_ce1),
    .weights_2_d1(grp_MyGemv_1_fu_623_weights_2_d1),
    .weights_2_q1(bramWeight_2_q1),
    .weights_2_we1(grp_MyGemv_1_fu_623_weights_2_we1),
    .weights_3_address0(grp_MyGemv_1_fu_623_weights_3_address0),
    .weights_3_ce0(grp_MyGemv_1_fu_623_weights_3_ce0),
    .weights_3_d0(grp_MyGemv_1_fu_623_weights_3_d0),
    .weights_3_q0(bramWeight_3_q0),
    .weights_3_we0(grp_MyGemv_1_fu_623_weights_3_we0),
    .weights_3_address1(grp_MyGemv_1_fu_623_weights_3_address1),
    .weights_3_ce1(grp_MyGemv_1_fu_623_weights_3_ce1),
    .weights_3_d1(grp_MyGemv_1_fu_623_weights_3_d1),
    .weights_3_q1(bramWeight_3_q1),
    .weights_3_we1(grp_MyGemv_1_fu_623_weights_3_we1),
    .weights_4_address0(grp_MyGemv_1_fu_623_weights_4_address0),
    .weights_4_ce0(grp_MyGemv_1_fu_623_weights_4_ce0),
    .weights_4_d0(grp_MyGemv_1_fu_623_weights_4_d0),
    .weights_4_q0(bramWeight_4_q0),
    .weights_4_we0(grp_MyGemv_1_fu_623_weights_4_we0),
    .weights_4_address1(grp_MyGemv_1_fu_623_weights_4_address1),
    .weights_4_ce1(grp_MyGemv_1_fu_623_weights_4_ce1),
    .weights_4_d1(grp_MyGemv_1_fu_623_weights_4_d1),
    .weights_4_q1(bramWeight_4_q1),
    .weights_4_we1(grp_MyGemv_1_fu_623_weights_4_we1),
    .weights_5_address0(grp_MyGemv_1_fu_623_weights_5_address0),
    .weights_5_ce0(grp_MyGemv_1_fu_623_weights_5_ce0),
    .weights_5_d0(grp_MyGemv_1_fu_623_weights_5_d0),
    .weights_5_q0(bramWeight_5_q0),
    .weights_5_we0(grp_MyGemv_1_fu_623_weights_5_we0),
    .weights_5_address1(grp_MyGemv_1_fu_623_weights_5_address1),
    .weights_5_ce1(grp_MyGemv_1_fu_623_weights_5_ce1),
    .weights_5_d1(grp_MyGemv_1_fu_623_weights_5_d1),
    .weights_5_q1(bramWeight_5_q1),
    .weights_5_we1(grp_MyGemv_1_fu_623_weights_5_we1),
    .weights_6_address0(grp_MyGemv_1_fu_623_weights_6_address0),
    .weights_6_ce0(grp_MyGemv_1_fu_623_weights_6_ce0),
    .weights_6_d0(grp_MyGemv_1_fu_623_weights_6_d0),
    .weights_6_q0(bramWeight_6_q0),
    .weights_6_we0(grp_MyGemv_1_fu_623_weights_6_we0),
    .weights_6_address1(grp_MyGemv_1_fu_623_weights_6_address1),
    .weights_6_ce1(grp_MyGemv_1_fu_623_weights_6_ce1),
    .weights_6_d1(grp_MyGemv_1_fu_623_weights_6_d1),
    .weights_6_q1(bramWeight_6_q1),
    .weights_6_we1(grp_MyGemv_1_fu_623_weights_6_we1),
    .weights_7_address0(grp_MyGemv_1_fu_623_weights_7_address0),
    .weights_7_ce0(grp_MyGemv_1_fu_623_weights_7_ce0),
    .weights_7_d0(grp_MyGemv_1_fu_623_weights_7_d0),
    .weights_7_q0(bramWeight_7_q0),
    .weights_7_we0(grp_MyGemv_1_fu_623_weights_7_we0),
    .weights_7_address1(grp_MyGemv_1_fu_623_weights_7_address1),
    .weights_7_ce1(grp_MyGemv_1_fu_623_weights_7_ce1),
    .weights_7_d1(grp_MyGemv_1_fu_623_weights_7_d1),
    .weights_7_q1(bramWeight_7_q1),
    .weights_7_we1(grp_MyGemv_1_fu_623_weights_7_we1),
    .weights_offset(grp_MyGemv_1_fu_623_weights_offset),
    .input_r_address0(grp_MyGemv_1_fu_623_input_r_address0),
    .input_r_ce0(grp_MyGemv_1_fu_623_input_r_ce0),
    .input_r_d0(grp_MyGemv_1_fu_623_input_r_d0),
    .input_r_q0(layerBuffer1_q0),
    .input_r_we0(grp_MyGemv_1_fu_623_input_r_we0),
    .input_r_address1(grp_MyGemv_1_fu_623_input_r_address1),
    .input_r_ce1(grp_MyGemv_1_fu_623_input_r_ce1),
    .input_r_d1(grp_MyGemv_1_fu_623_input_r_d1),
    .input_r_q1(layerBuffer1_q1),
    .input_r_we1(grp_MyGemv_1_fu_623_input_r_we1),
    .bias_address0(grp_MyGemv_1_fu_623_bias_address0),
    .bias_ce0(grp_MyGemv_1_fu_623_bias_ce0),
    .bias_d0(grp_MyGemv_1_fu_623_bias_d0),
    .bias_q0(bramBias_q0),
    .bias_we0(grp_MyGemv_1_fu_623_bias_we0),
    .bias_address1(grp_MyGemv_1_fu_623_bias_address1),
    .bias_ce1(grp_MyGemv_1_fu_623_bias_ce1),
    .bias_d1(grp_MyGemv_1_fu_623_bias_d1),
    .bias_q1(32'd0),
    .bias_we1(grp_MyGemv_1_fu_623_bias_we1),
    .bias_offset(grp_MyGemv_1_fu_623_bias_offset),
    .outputPort_address0(grp_MyGemv_1_fu_623_outputPort_address0),
    .outputPort_ce0(grp_MyGemv_1_fu_623_outputPort_ce0),
    .outputPort_d0(grp_MyGemv_1_fu_623_outputPort_d0),
    .outputPort_q0(32'd0),
    .outputPort_we0(grp_MyGemv_1_fu_623_outputPort_we0),
    .outputPort_address1(grp_MyGemv_1_fu_623_outputPort_address1),
    .outputPort_ce1(grp_MyGemv_1_fu_623_outputPort_ce1),
    .outputPort_d1(grp_MyGemv_1_fu_623_outputPort_d1),
    .outputPort_q1(32'd0),
    .outputPort_we1(grp_MyGemv_1_fu_623_outputPort_we1),
    .p_n(grp_MyGemv_1_fu_623_p_n),
    .p_k(numberNeurons_read_reg_1203),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .weights_offset_ap_vld(1'b1),
    .bias_offset_ap_vld(1'b1),
    .p_n_ap_vld(1'b1),
    .p_k_ap_vld(1'b1),
    .ap_start(grp_MyGemv_1_fu_623_ap_start),
    .ap_done(grp_MyGemv_1_fu_623_ap_done),
    .ap_ready(grp_MyGemv_1_fu_623_ap_ready),
    .ap_idle(grp_MyGemv_1_fu_623_ap_idle),
    .ap_continue(grp_MyGemv_1_fu_623_ap_continue)
);

MultiLayerPerceptronDecoupled_MyGemv grp_MyGemv_fu_651(
    .weights_0_address0(grp_MyGemv_fu_651_weights_0_address0),
    .weights_0_ce0(grp_MyGemv_fu_651_weights_0_ce0),
    .weights_0_d0(grp_MyGemv_fu_651_weights_0_d0),
    .weights_0_q0(bramWeight_0_q0),
    .weights_0_we0(grp_MyGemv_fu_651_weights_0_we0),
    .weights_0_address1(grp_MyGemv_fu_651_weights_0_address1),
    .weights_0_ce1(grp_MyGemv_fu_651_weights_0_ce1),
    .weights_0_d1(grp_MyGemv_fu_651_weights_0_d1),
    .weights_0_q1(32'd0),
    .weights_0_we1(grp_MyGemv_fu_651_weights_0_we1),
    .weights_1_address0(grp_MyGemv_fu_651_weights_1_address0),
    .weights_1_ce0(grp_MyGemv_fu_651_weights_1_ce0),
    .weights_1_d0(grp_MyGemv_fu_651_weights_1_d0),
    .weights_1_q0(bramWeight_1_q0),
    .weights_1_we0(grp_MyGemv_fu_651_weights_1_we0),
    .weights_1_address1(grp_MyGemv_fu_651_weights_1_address1),
    .weights_1_ce1(grp_MyGemv_fu_651_weights_1_ce1),
    .weights_1_d1(grp_MyGemv_fu_651_weights_1_d1),
    .weights_1_q1(32'd0),
    .weights_1_we1(grp_MyGemv_fu_651_weights_1_we1),
    .weights_2_address0(grp_MyGemv_fu_651_weights_2_address0),
    .weights_2_ce0(grp_MyGemv_fu_651_weights_2_ce0),
    .weights_2_d0(grp_MyGemv_fu_651_weights_2_d0),
    .weights_2_q0(bramWeight_2_q0),
    .weights_2_we0(grp_MyGemv_fu_651_weights_2_we0),
    .weights_2_address1(grp_MyGemv_fu_651_weights_2_address1),
    .weights_2_ce1(grp_MyGemv_fu_651_weights_2_ce1),
    .weights_2_d1(grp_MyGemv_fu_651_weights_2_d1),
    .weights_2_q1(32'd0),
    .weights_2_we1(grp_MyGemv_fu_651_weights_2_we1),
    .weights_3_address0(grp_MyGemv_fu_651_weights_3_address0),
    .weights_3_ce0(grp_MyGemv_fu_651_weights_3_ce0),
    .weights_3_d0(grp_MyGemv_fu_651_weights_3_d0),
    .weights_3_q0(bramWeight_3_q0),
    .weights_3_we0(grp_MyGemv_fu_651_weights_3_we0),
    .weights_3_address1(grp_MyGemv_fu_651_weights_3_address1),
    .weights_3_ce1(grp_MyGemv_fu_651_weights_3_ce1),
    .weights_3_d1(grp_MyGemv_fu_651_weights_3_d1),
    .weights_3_q1(32'd0),
    .weights_3_we1(grp_MyGemv_fu_651_weights_3_we1),
    .weights_4_address0(grp_MyGemv_fu_651_weights_4_address0),
    .weights_4_ce0(grp_MyGemv_fu_651_weights_4_ce0),
    .weights_4_d0(grp_MyGemv_fu_651_weights_4_d0),
    .weights_4_q0(bramWeight_4_q0),
    .weights_4_we0(grp_MyGemv_fu_651_weights_4_we0),
    .weights_4_address1(grp_MyGemv_fu_651_weights_4_address1),
    .weights_4_ce1(grp_MyGemv_fu_651_weights_4_ce1),
    .weights_4_d1(grp_MyGemv_fu_651_weights_4_d1),
    .weights_4_q1(32'd0),
    .weights_4_we1(grp_MyGemv_fu_651_weights_4_we1),
    .weights_5_address0(grp_MyGemv_fu_651_weights_5_address0),
    .weights_5_ce0(grp_MyGemv_fu_651_weights_5_ce0),
    .weights_5_d0(grp_MyGemv_fu_651_weights_5_d0),
    .weights_5_q0(bramWeight_5_q0),
    .weights_5_we0(grp_MyGemv_fu_651_weights_5_we0),
    .weights_5_address1(grp_MyGemv_fu_651_weights_5_address1),
    .weights_5_ce1(grp_MyGemv_fu_651_weights_5_ce1),
    .weights_5_d1(grp_MyGemv_fu_651_weights_5_d1),
    .weights_5_q1(32'd0),
    .weights_5_we1(grp_MyGemv_fu_651_weights_5_we1),
    .weights_6_address0(grp_MyGemv_fu_651_weights_6_address0),
    .weights_6_ce0(grp_MyGemv_fu_651_weights_6_ce0),
    .weights_6_d0(grp_MyGemv_fu_651_weights_6_d0),
    .weights_6_q0(bramWeight_6_q0),
    .weights_6_we0(grp_MyGemv_fu_651_weights_6_we0),
    .weights_6_address1(grp_MyGemv_fu_651_weights_6_address1),
    .weights_6_ce1(grp_MyGemv_fu_651_weights_6_ce1),
    .weights_6_d1(grp_MyGemv_fu_651_weights_6_d1),
    .weights_6_q1(32'd0),
    .weights_6_we1(grp_MyGemv_fu_651_weights_6_we1),
    .weights_7_address0(grp_MyGemv_fu_651_weights_7_address0),
    .weights_7_ce0(grp_MyGemv_fu_651_weights_7_ce0),
    .weights_7_d0(grp_MyGemv_fu_651_weights_7_d0),
    .weights_7_q0(bramWeight_7_q0),
    .weights_7_we0(grp_MyGemv_fu_651_weights_7_we0),
    .weights_7_address1(grp_MyGemv_fu_651_weights_7_address1),
    .weights_7_ce1(grp_MyGemv_fu_651_weights_7_ce1),
    .weights_7_d1(grp_MyGemv_fu_651_weights_7_d1),
    .weights_7_q1(32'd0),
    .weights_7_we1(grp_MyGemv_fu_651_weights_7_we1),
    .input_r_address0(grp_MyGemv_fu_651_input_r_address0),
    .input_r_ce0(grp_MyGemv_fu_651_input_r_ce0),
    .input_r_d0(grp_MyGemv_fu_651_input_r_d0),
    .input_r_q0(inputData_q0),
    .input_r_we0(grp_MyGemv_fu_651_input_r_we0),
    .input_r_address1(grp_MyGemv_fu_651_input_r_address1),
    .input_r_ce1(grp_MyGemv_fu_651_input_r_ce1),
    .input_r_d1(grp_MyGemv_fu_651_input_r_d1),
    .input_r_q1(inputData_q1),
    .input_r_we1(grp_MyGemv_fu_651_input_r_we1),
    .bias_address0(grp_MyGemv_fu_651_bias_address0),
    .bias_ce0(grp_MyGemv_fu_651_bias_ce0),
    .bias_d0(grp_MyGemv_fu_651_bias_d0),
    .bias_q0(bramBias_q0),
    .bias_we0(grp_MyGemv_fu_651_bias_we0),
    .bias_address1(grp_MyGemv_fu_651_bias_address1),
    .bias_ce1(grp_MyGemv_fu_651_bias_ce1),
    .bias_d1(grp_MyGemv_fu_651_bias_d1),
    .bias_q1(32'd0),
    .bias_we1(grp_MyGemv_fu_651_bias_we1),
    .outputPort_address0(grp_MyGemv_fu_651_outputPort_address0),
    .outputPort_ce0(grp_MyGemv_fu_651_outputPort_ce0),
    .outputPort_d0(grp_MyGemv_fu_651_outputPort_d0),
    .outputPort_q0(32'd0),
    .outputPort_we0(grp_MyGemv_fu_651_outputPort_we0),
    .outputPort_address1(grp_MyGemv_fu_651_outputPort_address1),
    .outputPort_ce1(grp_MyGemv_fu_651_outputPort_ce1),
    .outputPort_d1(grp_MyGemv_fu_651_outputPort_d1),
    .outputPort_q1(32'd0),
    .outputPort_we1(grp_MyGemv_fu_651_outputPort_we1),
    .p_n(numberNeurons_read_reg_1203),
    .p_k(numberInputs_read_reg_1188),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_n_ap_vld(1'b1),
    .p_k_ap_vld(1'b1),
    .ap_start(grp_MyGemv_fu_651_ap_start),
    .ap_done(grp_MyGemv_fu_651_ap_done),
    .ap_ready(grp_MyGemv_fu_651_ap_ready),
    .ap_idle(grp_MyGemv_fu_651_ap_idle),
    .ap_continue(grp_MyGemv_fu_651_ap_continue)
);

MultiLayerPerceptronDecoupled_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U400(
    .din0(numberNeurons),
    .din1(mul_ln190_fu_697_p1),
    .dout(mul_ln190_fu_697_p2)
);

MultiLayerPerceptronDecoupled_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U401(
    .din0(numberNeurons_read_reg_1203),
    .din1(valuesToCopy_fu_712_p1),
    .dout(valuesToCopy_fu_712_p2)
);

MultiLayerPerceptronDecoupled_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U402(
    .din0(numberLayers_read_reg_1226),
    .din1(numberNeurons_read_reg_1203),
    .dout(valuesToCopy_1_fu_789_p2)
);

MultiLayerPerceptronDecoupled_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U403(
    .din0(trunc_ln205_reg_1344),
    .din1(mul_ln219_fu_994_p1),
    .dout(mul_ln219_fu_994_p2)
);

MultiLayerPerceptronDecoupled_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U404(
    .din0(empty_154_reg_1401),
    .din1(trunc_ln205_reg_1344),
    .dout(mul_ln232_fu_999_p2)
);

MultiLayerPerceptronDecoupled_mac_muladd_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_12s_12s_12ns_12_4_1_U405(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln190_reg_1218),
    .din1(grp_fu_1141_p1),
    .din2(trunc_ln189_reg_1197),
    .ce(1'b1),
    .dout(grp_fu_1141_p3)
);

MultiLayerPerceptronDecoupled_mac_muladd_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_12s_12s_12ns_12_4_1_U406(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln190_reg_1218),
    .din1(add_ln214_reg_1411),
    .din2(trunc_ln189_reg_1197),
    .ce(1'b1),
    .dout(grp_fu_1147_p3)
);

MultiLayerPerceptronDecoupled_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U407(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln190_reg_1218),
    .din1(grp_fu_1141_p3),
    .ce(1'b1),
    .dout(grp_fu_1152_p2)
);

MultiLayerPerceptronDecoupled_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U408(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln190_reg_1218),
    .din1(grp_fu_1147_p3),
    .ce(1'b1),
    .dout(grp_fu_1158_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state10))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state21))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state32))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state32)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state37))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'd1 == and_ln208_fu_901_p2) & (1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state37))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state37);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'd1 == and_ln208_fu_901_p2) & (1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state40))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state40))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state40);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state51))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((icmp_ln82_reg_1355 == 1'd1) & (icmp_ln208_reg_1350 == 1'd1) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state51))) begin
            ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state51);
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if (((icmp_ln82_reg_1355 == 1'd1) & (icmp_ln208_reg_1350 == 1'd1) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state54))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if (((icmp_ln82_reg_1355 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_condition_pp6_exit_iter0_state54))) begin
            ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state54);
        end else if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
        end else if (((icmp_ln82_reg_1355 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
            ap_enable_reg_pp6_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp7_stage0_subdone) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b1 == ap_condition_pp7_exit_iter0_state64))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if (((1'd1 == and_ln237_fu_1058_p2) & (1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63))) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp7_stage0_subdone) & (1'b1 == ap_condition_pp7_exit_iter0_state64))) begin
            ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state64);
        end else if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
        end else if (((1'd1 == and_ln237_fu_1058_p2) & (1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63))) begin
            ap_enable_reg_pp7_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp8_stage0_subdone) & (1'b1 == ap_condition_pp8_exit_iter0_state68) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state68)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state68);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end else if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
            ap_enable_reg_pp8_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_MyGemv_1_fu_623_ap_done <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63)) | ((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50)))) begin
            ap_sync_reg_grp_MyGemv_1_fu_623_ap_done <= 1'b0;
        end else if ((grp_MyGemv_1_fu_623_ap_done == 1'b1)) begin
            ap_sync_reg_grp_MyGemv_1_fu_623_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63)) | ((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50)))) begin
            ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready <= 1'b0;
        end else if ((grp_MyGemv_1_fu_623_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_MyGemv_fu_651_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
            ap_sync_reg_grp_MyGemv_fu_651_ap_done <= 1'b0;
        end else if ((grp_MyGemv_fu_651_ap_done == 1'b1)) begin
            ap_sync_reg_grp_MyGemv_fu_651_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_MyGemv_fu_651_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
            ap_sync_reg_grp_MyGemv_fu_651_ap_ready <= 1'b0;
        end else if ((grp_MyGemv_fu_651_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_MyGemv_fu_651_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_MyGemv_1_fu_623_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state49) | ((ap_sync_grp_MyGemv_1_fu_623_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state63)) | ((ap_sync_grp_MyGemv_1_fu_623_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state50)))) begin
            grp_MyGemv_1_fu_623_ap_start_reg <= 1'b1;
        end else if ((grp_MyGemv_1_fu_623_ap_ready == 1'b1)) begin
            grp_MyGemv_1_fu_623_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_MyGemv_fu_651_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state35) | ((ap_sync_grp_MyGemv_fu_651_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state36)))) begin
            grp_MyGemv_fu_651_ap_start_reg <= 1'b1;
        end else if ((grp_MyGemv_fu_651_ap_ready == 1'b1)) begin
            grp_MyGemv_fu_651_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_reg_1355 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        i_10_reg_590 <= 32'd0;
    end else if (((ap_enable_reg_pp6_iter0 == 1'b1) & (icmp_ln82_6_fu_1037_p2 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        i_10_reg_590 <= add_ln82_4_fu_1042_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_6_reg_557 <= 32'd0;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln82_2_fu_936_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_6_reg_557 <= add_ln82_1_fu_941_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_7_reg_568 <= add_ln219_reg_1419;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        i_7_reg_568 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln237_fu_1058_p2) & (1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63))) begin
        i_8_reg_601 <= 32'd0;
    end else if (((ap_enable_reg_pp7_iter0 == 1'b1) & (icmp_ln82_4_fu_1063_p2 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        i_8_reg_601 <= add_ln82_2_fu_1068_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_reg_1355 == 1'd1) & (icmp_ln208_reg_1350 == 1'd1) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        i_9_reg_579 <= 32'd0;
    end else if (((ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln82_5_fu_1003_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        i_9_reg_579 <= add_ln82_3_fu_1008_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln208_fu_901_p2) & (1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
        i_reg_546 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln82_1_fu_907_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_reg_546 <= add_ln82_fu_912_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        loop_index55_reg_534 <= 32'd0;
    end else if (((exitcond928_reg_1330 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        loop_index55_reg_534 <= empty_152_reg_1334;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        loop_index61_reg_522 <= 32'd0;
    end else if (((exitcond939_reg_1306 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_index61_reg_522 <= empty_149_reg_1310;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        loop_index67_reg_511 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond9410_fu_742_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loop_index67_reg_511 <= empty_146_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
        loop_index_reg_612 <= 32'd0;
    end else if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (exitcond1_fu_1121_p2 == 1'd0))) begin
        loop_index_reg_612 <= empty_157_fu_1126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        add_ln214_reg_1411 <= add_ln214_fu_963_p2;
        empty_154_reg_1401 <= empty_154_fu_952_p1;
        sub18_reg_1406 <= sub18_fu_958_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        add_ln219_reg_1419 <= add_ln219_fu_974_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_5_fu_1003_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        add_ln85_1_reg_1465 <= add_ln85_1_fu_1023_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_4_fu_1063_p2 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        add_ln85_reg_1517 <= add_ln85_fu_1083_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        axiBiasInput_read_reg_1164 <= axiBiasInput;
        axiWeightInput_read_reg_1169 <= axiWeightInput;
        input_read_reg_1179 <= input_r;
        numberInputs_read_reg_1188 <= numberInputs;
        numberLayers_read_reg_1226 <= numberLayers;
        numberNeurons_read_reg_1203 <= numberNeurons;
        numberOutputs_read_reg_1234 <= numberOutputs;
        output_read_reg_1174 <= output_r;
        trunc_ln189_reg_1197 <= trunc_ln189_fu_683_p1;
        trunc_ln190_reg_1218 <= trunc_ln190_fu_687_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond939_reg_1306 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_read_addr_1_read_reg_1315 <= axi_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln198_fu_798_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        axi_read_addr_1_reg_1300 <= p_cast18_cast_fu_813_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond928_reg_1330 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axi_read_addr_2_read_reg_1339 <= axi_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_843_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        axi_read_addr_2_reg_1324 <= p_cast_cast_fu_857_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_read_addr_read_reg_1285 <= axi_read_RDATA;
        empty_148_reg_1276_pp0_iter1_reg <= empty_148_reg_1276;
        newIndex_reg_1280_pp0_iter1_reg <= newIndex_reg_1280;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_717_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        axi_read_addr_reg_1261 <= p_cast17_cast_fu_732_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_fu_1097_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state66))) begin
        axi_write_addr_reg_1526 <= p_cast19_cast_fu_1111_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9410_fu_742_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_148_reg_1276 <= empty_148_fu_753_p1;
        newIndex_reg_1280 <= {{loop_index67_reg_511[11:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_149_reg_1310 <= empty_149_fu_828_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        empty_152_reg_1334 <= empty_152_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        exitcond1_reg_1532 <= exitcond1_fu_1121_p2;
        exitcond1_reg_1532_pp8_iter1_reg <= exitcond1_reg_1532;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond928_reg_1330 <= exitcond928_fu_867_p2;
        exitcond928_reg_1330_pp2_iter1_reg <= exitcond928_reg_1330;
        loop_index55_reg_534_pp2_iter1_reg <= loop_index55_reg_534;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond939_reg_1306 <= exitcond939_fu_823_p2;
        exitcond939_reg_1306_pp1_iter1_reg <= exitcond939_reg_1306;
        loop_index61_reg_522_pp1_iter1_reg <= loop_index61_reg_522;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
        icmp_ln208_reg_1350 <= icmp_ln208_fu_890_p2;
        icmp_ln82_reg_1355 <= icmp_ln82_fu_896_p2;
        trunc_ln205_reg_1344 <= trunc_ln205_fu_887_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        icmp_ln241_reg_1522 <= icmp_ln241_fu_1097_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln82_1_reg_1363 <= icmp_ln82_1_fu_907_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln82_2_reg_1382 <= icmp_ln82_2_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        icmp_ln82_4_reg_1503 <= icmp_ln82_4_fu_1063_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln82_5_reg_1451 <= icmp_ln82_5_fu_1003_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln82_6_reg_1470 <= icmp_ln82_6_fu_1037_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1532 == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter1 == 1'b1))) begin
        layerBuffer0_load_4_reg_1546 <= layerBuffer0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln185_fu_677_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln190_reg_1246 <= mul_ln190_fu_697_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        mul_ln217_1_reg_1446 <= grp_fu_1152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_969_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        mul_ln219_reg_1429 <= mul_ln219_fu_994_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        mul_ln230_1_reg_1494 <= grp_fu_1158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_969_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        mul_ln232_reg_1435 <= mul_ln232_fu_999_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_1_fu_907_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        trunc_ln85_reg_1377 <= trunc_ln85_fu_923_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        valuesToCopy_2_reg_1290 <= valuesToCopy_2_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valuesToCopy_reg_1251 <= valuesToCopy_fu_712_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_2_fu_936_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        zext_ln82_1_reg_1391[31 : 0] <= zext_ln82_1_fu_947_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_6_fu_1037_p2 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        zext_ln82_4_reg_1479[31 : 0] <= zext_ln82_4_fu_1048_p1[31 : 0];
    end
end

always @ (*) begin
    if ((exitcond9410_fu_742_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond939_fu_823_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond928_fu_867_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln82_1_fu_907_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state37 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state37 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln82_2_fu_936_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state40 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state40 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln82_5_fu_1003_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state51 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state51 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln82_6_fu_1037_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state54 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state54 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln82_4_fu_1063_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state64 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state64 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_1121_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state68 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state68 = 1'b0;
    end
end

always @ (*) begin
    if ((~((axi_write_BVALID == 1'b0) & (icmp_ln241_reg_1522 == 1'd0)) & (1'b1 == ap_CS_fsm_state75))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter2 == 1'b0) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond928_reg_1330 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_loop_index55_phi_fu_538_p4 = empty_152_reg_1334;
    end else begin
        ap_phi_mux_loop_index55_phi_fu_538_p4 = loop_index55_reg_534;
    end
end

always @ (*) begin
    if (((exitcond939_reg_1306 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_loop_index61_phi_fu_526_p4 = empty_149_reg_1310;
    end else begin
        ap_phi_mux_loop_index61_phi_fu_526_p4 = loop_index61_reg_522;
    end
end

always @ (*) begin
    if ((~((axi_write_BVALID == 1'b0) & (icmp_ln241_reg_1522 == 1'd0)) & (1'b1 == ap_CS_fsm_state75))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((axi_read_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            axi_read_ARADDR = axi_read_addr_2_reg_1324;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            axi_read_ARADDR = axi_read_addr_1_reg_1300;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            axi_read_ARADDR = axi_read_addr_reg_1261;
        end else begin
            axi_read_ARADDR = 'bx;
        end
    end else begin
        axi_read_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((axi_read_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            axi_read_ARLEN = numberInputs_read_reg_1188;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            axi_read_ARLEN = valuesToCopy_2_reg_1290;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            axi_read_ARLEN = valuesToCopy_reg_1251;
        end else begin
            axi_read_ARLEN = 'bx;
        end
    end else begin
        axi_read_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        axi_read_ARVALID = 1'b1;
    end else begin
        axi_read_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond939_reg_1306 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond928_reg_1330 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        axi_read_RREADY = 1'b1;
    end else begin
        axi_read_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state3))) begin
        axi_read_blk_n_AR = m_axi_axi_read_ARREADY;
    end else begin
        axi_read_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond939_reg_1306 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond928_reg_1330 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        axi_read_blk_n_R = m_axi_axi_read_RVALID;
    end else begin
        axi_read_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
        axi_write_AWVALID = 1'b1;
    end else begin
        axi_write_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((axi_write_BVALID == 1'b0) & (icmp_ln241_reg_1522 == 1'd0)) & (icmp_ln241_reg_1522 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        axi_write_BREADY = 1'b1;
    end else begin
        axi_write_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_1532_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        axi_write_WVALID = 1'b1;
    end else begin
        axi_write_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        axi_write_blk_n_AW = m_axi_axi_write_AWREADY;
    end else begin
        axi_write_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1522 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        axi_write_blk_n_B = m_axi_axi_write_BVALID;
    end else begin
        axi_write_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_reg_1532_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0))) begin
        axi_write_blk_n_W = m_axi_axi_write_WREADY;
    end else begin
        axi_write_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bramBias_address0 = loop_index61_cast_fu_834_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramBias_address0 = grp_MyGemv_fu_651_bias_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramBias_address0 = grp_MyGemv_1_fu_623_bias_address0;
    end else begin
        bramBias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bramBias_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramBias_ce0 = grp_MyGemv_fu_651_bias_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramBias_ce0 = grp_MyGemv_1_fu_623_bias_ce0;
    end else begin
        bramBias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond939_reg_1306_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bramBias_we0 = 1'b1;
    end else begin
        bramBias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1))) begin
        bramLayerResults_Addr_A_orig = zext_ln85_1_fu_1093_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        bramLayerResults_Addr_A_orig = zext_ln85_2_fu_1033_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        bramLayerResults_Addr_A_orig = zext_ln85_fu_932_p1;
    end else begin
        bramLayerResults_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1))) begin
        bramLayerResults_Din_A = bitcast_ln85_1_fu_1088_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        bramLayerResults_Din_A = bitcast_ln85_2_fu_1028_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        bramLayerResults_Din_A = bitcast_ln85_fu_927_p1;
    end else begin
        bramLayerResults_Din_A = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)))) begin
        bramLayerResults_EN_A = 1'b1;
    end else begin
        bramLayerResults_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln82_4_reg_1503 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1)) | ((icmp_ln82_5_reg_1451 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((icmp_ln82_1_reg_1363 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)))) begin
        bramLayerResults_WEN_A = 4'd15;
    end else begin
        bramLayerResults_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_0_address0 = newIndex_cast_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_0_address0 = grp_MyGemv_fu_651_weights_0_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_0_address0 = grp_MyGemv_1_fu_623_weights_0_address0;
    end else begin
        bramWeight_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_0_ce0 = grp_MyGemv_fu_651_weights_0_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_0_ce0 = grp_MyGemv_1_fu_623_weights_0_ce0;
    end else begin
        bramWeight_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_0_ce1 = grp_MyGemv_1_fu_623_weights_0_ce1;
    end else begin
        bramWeight_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_148_reg_1276_pp0_iter1_reg == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_0_we0 = 1'b1;
    end else begin
        bramWeight_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_1_address0 = newIndex_cast_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_1_address0 = grp_MyGemv_fu_651_weights_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_1_address0 = grp_MyGemv_1_fu_623_weights_1_address0;
    end else begin
        bramWeight_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_1_ce0 = grp_MyGemv_fu_651_weights_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_1_ce0 = grp_MyGemv_1_fu_623_weights_1_ce0;
    end else begin
        bramWeight_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_1_ce1 = grp_MyGemv_1_fu_623_weights_1_ce1;
    end else begin
        bramWeight_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_148_reg_1276_pp0_iter1_reg == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_1_we0 = 1'b1;
    end else begin
        bramWeight_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_2_address0 = newIndex_cast_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_2_address0 = grp_MyGemv_fu_651_weights_2_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_2_address0 = grp_MyGemv_1_fu_623_weights_2_address0;
    end else begin
        bramWeight_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_2_ce0 = grp_MyGemv_fu_651_weights_2_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_2_ce0 = grp_MyGemv_1_fu_623_weights_2_ce0;
    end else begin
        bramWeight_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_2_ce1 = grp_MyGemv_1_fu_623_weights_2_ce1;
    end else begin
        bramWeight_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_148_reg_1276_pp0_iter1_reg == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_2_we0 = 1'b1;
    end else begin
        bramWeight_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_3_address0 = newIndex_cast_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_3_address0 = grp_MyGemv_fu_651_weights_3_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_3_address0 = grp_MyGemv_1_fu_623_weights_3_address0;
    end else begin
        bramWeight_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_3_ce0 = grp_MyGemv_fu_651_weights_3_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_3_ce0 = grp_MyGemv_1_fu_623_weights_3_ce0;
    end else begin
        bramWeight_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_3_ce1 = grp_MyGemv_1_fu_623_weights_3_ce1;
    end else begin
        bramWeight_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_148_reg_1276_pp0_iter1_reg == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_3_we0 = 1'b1;
    end else begin
        bramWeight_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_4_address0 = newIndex_cast_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_4_address0 = grp_MyGemv_fu_651_weights_4_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_4_address0 = grp_MyGemv_1_fu_623_weights_4_address0;
    end else begin
        bramWeight_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_4_ce0 = grp_MyGemv_fu_651_weights_4_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_4_ce0 = grp_MyGemv_1_fu_623_weights_4_ce0;
    end else begin
        bramWeight_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_4_ce1 = grp_MyGemv_1_fu_623_weights_4_ce1;
    end else begin
        bramWeight_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_148_reg_1276_pp0_iter1_reg == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_4_we0 = 1'b1;
    end else begin
        bramWeight_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_5_address0 = newIndex_cast_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_5_address0 = grp_MyGemv_fu_651_weights_5_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_5_address0 = grp_MyGemv_1_fu_623_weights_5_address0;
    end else begin
        bramWeight_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_5_ce0 = grp_MyGemv_fu_651_weights_5_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_5_ce0 = grp_MyGemv_1_fu_623_weights_5_ce0;
    end else begin
        bramWeight_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_5_ce1 = grp_MyGemv_1_fu_623_weights_5_ce1;
    end else begin
        bramWeight_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_148_reg_1276_pp0_iter1_reg == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_5_we0 = 1'b1;
    end else begin
        bramWeight_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_6_address0 = newIndex_cast_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_6_address0 = grp_MyGemv_fu_651_weights_6_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_6_address0 = grp_MyGemv_1_fu_623_weights_6_address0;
    end else begin
        bramWeight_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_6_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_6_ce0 = grp_MyGemv_fu_651_weights_6_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_6_ce0 = grp_MyGemv_1_fu_623_weights_6_ce0;
    end else begin
        bramWeight_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_6_ce1 = grp_MyGemv_1_fu_623_weights_6_ce1;
    end else begin
        bramWeight_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_148_reg_1276_pp0_iter1_reg == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_6_we0 = 1'b1;
    end else begin
        bramWeight_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_7_address0 = newIndex_cast_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_7_address0 = grp_MyGemv_fu_651_weights_7_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_7_address0 = grp_MyGemv_1_fu_623_weights_7_address0;
    end else begin
        bramWeight_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_7_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        bramWeight_7_ce0 = grp_MyGemv_fu_651_weights_7_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_7_ce0 = grp_MyGemv_1_fu_623_weights_7_ce0;
    end else begin
        bramWeight_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        bramWeight_7_ce1 = grp_MyGemv_1_fu_623_weights_7_ce1;
    end else begin
        bramWeight_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_148_reg_1276_pp0_iter1_reg == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_7_we0 = 1'b1;
    end else begin
        bramWeight_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63)) | ((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50)))) begin
        grp_MyGemv_1_fu_623_ap_continue = 1'b1;
    end else begin
        grp_MyGemv_1_fu_623_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_MyGemv_1_fu_623_bias_offset = mul_ln232_reg_1435;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_MyGemv_1_fu_623_bias_offset = mul_ln219_reg_1429;
    end else begin
        grp_MyGemv_1_fu_623_bias_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_MyGemv_1_fu_623_p_n = numberOutputs_read_reg_1234;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_MyGemv_1_fu_623_p_n = numberNeurons_read_reg_1203;
    end else begin
        grp_MyGemv_1_fu_623_p_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_MyGemv_1_fu_623_weights_offset = mul_ln230_1_reg_1494;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_MyGemv_1_fu_623_weights_offset = mul_ln217_1_reg_1446;
    end else begin
        grp_MyGemv_1_fu_623_weights_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
        grp_MyGemv_fu_651_ap_continue = 1'b1;
    end else begin
        grp_MyGemv_fu_651_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        inputData_address0 = loop_index55_cast_fu_878_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        inputData_address0 = grp_MyGemv_fu_651_input_r_address0;
    end else begin
        inputData_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        inputData_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        inputData_ce0 = grp_MyGemv_fu_651_input_r_ce0;
    end else begin
        inputData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        inputData_ce1 = grp_MyGemv_fu_651_input_r_ce1;
    end else begin
        inputData_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond928_reg_1330_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        inputData_we0 = 1'b1;
    end else begin
        inputData_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1))) begin
        layerBuffer0_address0 = loop_index_cast_fu_1132_p1;
    end else if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        layerBuffer0_address0 = zext_ln82_2_fu_1074_p1;
    end else if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        layerBuffer0_address0 = zext_ln82_4_fu_1048_p1;
    end else if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        layerBuffer0_address0 = zext_ln82_3_fu_1014_p1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        layerBuffer0_address0 = zext_ln82_1_fu_947_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layerBuffer0_address0 = zext_ln82_fu_918_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        layerBuffer0_address0 = grp_MyGemv_fu_651_outputPort_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        layerBuffer0_address0 = grp_MyGemv_1_fu_623_outputPort_address0;
    end else begin
        layerBuffer0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1)))) begin
        layerBuffer0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        layerBuffer0_ce0 = grp_MyGemv_fu_651_outputPort_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        layerBuffer0_ce0 = grp_MyGemv_1_fu_623_outputPort_ce0;
    end else begin
        layerBuffer0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        layerBuffer0_d0 = grp_MyGemv_fu_651_outputPort_d0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        layerBuffer0_d0 = grp_MyGemv_1_fu_623_outputPort_d0;
    end else begin
        layerBuffer0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        layerBuffer0_we0 = grp_MyGemv_fu_651_outputPort_we0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        layerBuffer0_we0 = grp_MyGemv_1_fu_623_outputPort_we0;
    end else begin
        layerBuffer0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1))) begin
        layerBuffer1_address0 = zext_ln82_4_reg_1479;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        layerBuffer1_address0 = zext_ln82_1_reg_1391;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        layerBuffer1_address0 = grp_MyGemv_1_fu_623_input_r_address0;
    end else begin
        layerBuffer1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1)))) begin
        layerBuffer1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        layerBuffer1_ce0 = grp_MyGemv_1_fu_623_input_r_ce0;
    end else begin
        layerBuffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state50))) begin
        layerBuffer1_ce1 = grp_MyGemv_1_fu_623_input_r_ce1;
    end else begin
        layerBuffer1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln82_6_reg_1470 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((icmp_ln82_2_reg_1382 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1)))) begin
        layerBuffer1_we0 = 1'b1;
    end else begin
        layerBuffer1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln185_fu_677_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((ap_start == 1'b1) & (icmp_ln185_fu_677_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln193_fu_717_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond9410_fu_742_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond9410_fu_742_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln198_fu_798_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond939_fu_823_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond939_fu_823_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln203_fu_843_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond928_fu_867_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond928_fu_867_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'd1 == and_ln208_fu_901_p2) & (1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'd0 == and_ln208_fu_901_p2) & (1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln82_1_fu_907_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln82_1_fu_907_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln82_2_fu_936_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln82_2_fu_936_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln214_fu_969_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((icmp_ln82_reg_1355 == 1'd1) & (icmp_ln208_reg_1350 == 1'd1) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((icmp_ln82_reg_1355 == 1'd0) & (icmp_ln208_reg_1350 == 1'd1) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else if (((icmp_ln208_reg_1350 == 1'd0) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln82_5_fu_1003_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln82_5_fu_1003_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((icmp_ln82_reg_1355 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_pp6_stage0 : begin
            if (~((ap_enable_reg_pp6_iter0 == 1'b1) & (icmp_ln82_6_fu_1037_p2 == 1'd1) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if (((ap_enable_reg_pp6_iter0 == 1'b1) & (icmp_ln82_6_fu_1037_p2 == 1'd1) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((1'd1 == and_ln237_fu_1058_p2) & (1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if (((1'd0 == and_ln237_fu_1058_p2) & (1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_pp7_stage0 : begin
            if (~((ap_enable_reg_pp7_iter0 == 1'b1) & (icmp_ln82_4_fu_1063_p2 == 1'd1) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if (((ap_enable_reg_pp7_iter0 == 1'b1) & (icmp_ln82_4_fu_1063_p2 == 1'd1) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((icmp_ln241_fu_1097_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (exitcond1_fu_1121_p2 == 1'd1)) & ~((ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter1 == 1'b0)) | ((1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (exitcond1_fu_1121_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if ((~((axi_write_BVALID == 1'b0) & (icmp_ln241_reg_1522 == 1'd0)) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln190_fu_691_p0 = numberLayers;

assign add_ln191_1_fu_703_p2 = (numberInputs_read_reg_1188 + mul_ln190_reg_1246);

assign add_ln214_fu_963_p2 = ($signed(12'd4095) + $signed(empty_155_fu_955_p1));

assign add_ln219_fu_974_p2 = (i_7_reg_568 + 32'd1);

assign add_ln82_1_fu_941_p2 = (i_6_reg_557 + 32'd1);

assign add_ln82_2_fu_1068_p2 = (i_8_reg_601 + 32'd1);

assign add_ln82_3_fu_1008_p2 = (i_9_reg_579 + 32'd1);

assign add_ln82_4_fu_1042_p2 = (i_10_reg_590 + 32'd1);

assign add_ln82_fu_912_p2 = (i_reg_546 + 32'd1);

assign add_ln85_1_fu_1023_p2 = (trunc_ln85_2_fu_1019_p1 + mul_ln219_reg_1429);

assign add_ln85_fu_1083_p2 = (trunc_ln85_1_fu_1079_p1 + mul_ln232_reg_1435);

assign and_ln208_fu_901_p2 = (icmp_ln82_fu_896_p2 & icmp_ln208_fu_890_p2);

assign and_ln237_fu_1058_p2 = (icmp_ln82_3_fu_1053_p2 & icmp_ln208_reg_1350);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((axi_read_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((axi_read_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((axi_read_RVALID == 1'b0) & (exitcond939_reg_1306 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((axi_read_RVALID == 1'b0) & (exitcond939_reg_1306 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((axi_read_RVALID == 1'b0) & (exitcond928_reg_1330 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((axi_read_RVALID == 1'b0) & (exitcond928_reg_1330 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_11001 = ((1'b1 == ap_block_state70_io) & (ap_enable_reg_pp8_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = ((1'b1 == ap_block_state70_io) & (ap_enable_reg_pp8_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = (axi_read_RVALID == 1'b0);
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter1 = ((axi_read_RVALID == 1'b0) & (exitcond939_reg_1306 == 1'd0));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_pp2_stage0_iter1 = ((axi_read_RVALID == 1'b0) & (exitcond928_reg_1330 == 1'd0));
end

assign ap_block_state34_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_on_subcall_done = ((ap_sync_grp_MyGemv_fu_651_ap_ready & ap_sync_grp_MyGemv_fu_651_ap_done) == 1'b0);
end

assign ap_block_state37_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state50_on_subcall_done = ((ap_sync_grp_MyGemv_1_fu_623_ap_ready & ap_sync_grp_MyGemv_1_fu_623_ap_done) == 1'b0);
end

assign ap_block_state51_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state63_on_subcall_done = ((ap_sync_grp_MyGemv_1_fu_623_ap_ready & ap_sync_grp_MyGemv_1_fu_623_ap_done) == 1'b0);
end

assign ap_block_state64_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp8_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state70_io = ((axi_write_WREADY == 1'b0) & (exitcond1_reg_1532_pp8_iter1_reg == 1'd0));
end

assign ap_block_state70_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75 = ((axi_write_BVALID == 1'b0) & (icmp_ln241_reg_1522 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_MyGemv_1_fu_623_ap_done = (grp_MyGemv_1_fu_623_ap_done | ap_sync_reg_grp_MyGemv_1_fu_623_ap_done);

assign ap_sync_grp_MyGemv_1_fu_623_ap_ready = (grp_MyGemv_1_fu_623_ap_ready | ap_sync_reg_grp_MyGemv_1_fu_623_ap_ready);

assign ap_sync_grp_MyGemv_fu_651_ap_done = (grp_MyGemv_fu_651_ap_done | ap_sync_reg_grp_MyGemv_fu_651_ap_done);

assign ap_sync_grp_MyGemv_fu_651_ap_ready = (grp_MyGemv_fu_651_ap_ready | ap_sync_reg_grp_MyGemv_fu_651_ap_ready);

assign axi_write_WDATA = layerBuffer0_load_4_reg_1546;

assign bitcast_ln85_1_fu_1088_p1 = layerBuffer0_q0;

assign bitcast_ln85_2_fu_1028_p1 = layerBuffer0_q0;

assign bitcast_ln85_fu_927_p1 = layerBuffer0_q0;

assign bramBias_d0 = axi_read_addr_1_read_reg_1315;

assign bramLayerResults_Addr_A = bramLayerResults_Addr_A_orig << 32'd2;

assign bramLayerResults_Clk_A = ap_clk;

always @ (*) begin
    bramLayerResults_Rst_A = ~ap_rst_n;
end

assign empty_146_fu_747_p2 = (loop_index67_reg_511 + 32'd1);

assign empty_147_fu_767_p1 = axi_read_addr_read_reg_1285;

assign empty_148_fu_753_p1 = loop_index67_reg_511[2:0];

assign empty_149_fu_828_p2 = (ap_phi_mux_loop_index61_phi_fu_526_p4 + 32'd1);

assign empty_152_fu_872_p2 = (ap_phi_mux_loop_index55_phi_fu_538_p4 + 32'd1);

assign empty_154_fu_952_p1 = numberLayers_read_reg_1226[7:0];

assign empty_155_fu_955_p1 = numberLayers_read_reg_1226[11:0];

assign empty_157_fu_1126_p2 = (loop_index_reg_612 + 32'd1);

assign exitcond1_fu_1121_p2 = ((loop_index_reg_612 == numberOutputs_read_reg_1234) ? 1'b1 : 1'b0);

assign exitcond928_fu_867_p2 = ((ap_phi_mux_loop_index55_phi_fu_538_p4 == numberInputs_read_reg_1188) ? 1'b1 : 1'b0);

assign exitcond939_fu_823_p2 = ((ap_phi_mux_loop_index61_phi_fu_526_p4 == valuesToCopy_2_reg_1290) ? 1'b1 : 1'b0);

assign exitcond9410_fu_742_p2 = ((loop_index67_reg_511 == valuesToCopy_reg_1251) ? 1'b1 : 1'b0);

assign grp_MyGemv_1_fu_623_ap_start = grp_MyGemv_1_fu_623_ap_start_reg;

assign grp_MyGemv_fu_651_ap_start = grp_MyGemv_fu_651_ap_start_reg;

assign grp_fu_1141_p1 = i_7_reg_568[11:0];

assign icmp_ln185_fu_677_p2 = ((loadParameters == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln193_fu_717_p2 = ((valuesToCopy_fu_712_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_798_p2 = ((valuesToCopy_2_fu_793_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_843_p2 = ((numberInputs_read_reg_1188 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln208_fu_890_p2 = ((exportLayers != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_969_p2 = ((i_7_reg_568 == sub18_reg_1406) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_1097_p2 = ((numberOutputs_read_reg_1234 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln82_1_fu_907_p2 = ((i_reg_546 == numberNeurons_read_reg_1203) ? 1'b1 : 1'b0);

assign icmp_ln82_2_fu_936_p2 = ((i_6_reg_557 == numberNeurons_read_reg_1203) ? 1'b1 : 1'b0);

assign icmp_ln82_3_fu_1053_p2 = ((numberOutputs_read_reg_1234 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln82_4_fu_1063_p2 = ((i_8_reg_601 == numberOutputs_read_reg_1234) ? 1'b1 : 1'b0);

assign icmp_ln82_5_fu_1003_p2 = ((i_9_reg_579 == numberNeurons_read_reg_1203) ? 1'b1 : 1'b0);

assign icmp_ln82_6_fu_1037_p2 = ((i_10_reg_590 == numberNeurons_read_reg_1203) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_896_p2 = ((numberNeurons_read_reg_1203 != 32'd0) ? 1'b1 : 1'b0);

assign inputData_d0 = axi_read_addr_2_read_reg_1339;

assign loop_index55_cast_fu_878_p1 = loop_index55_reg_534_pp2_iter1_reg;

assign loop_index61_cast_fu_834_p1 = loop_index61_reg_522_pp1_iter1_reg;

assign loop_index_cast_fu_1132_p1 = loop_index_reg_612;

assign mul_ln190_fu_697_p1 = ($signed(add_ln190_fu_691_p0) + $signed(32'd4294967295));

assign mul_ln219_fu_994_p1 = (8'd1 + trunc_ln217_fu_984_p1);

assign newIndex_cast_fu_778_p1 = newIndex_reg_1280_pp0_iter1_reg;

assign p_cast17_cast_fu_732_p1 = $signed(p_cast1_fu_723_p4);

assign p_cast18_cast_fu_813_p1 = $signed(p_cast2_fu_804_p4);

assign p_cast19_cast_fu_1111_p1 = $signed(p_cast3_fu_1102_p4);

assign p_cast1_fu_723_p4 = {{axiWeightInput_read_reg_1169[63:2]}};

assign p_cast2_fu_804_p4 = {{axiBiasInput_read_reg_1164[63:2]}};

assign p_cast3_fu_1102_p4 = {{output_read_reg_1174[63:2]}};

assign p_cast_cast_fu_857_p1 = $signed(p_cast_fu_848_p4);

assign p_cast_fu_848_p4 = {{input_read_reg_1179[63:2]}};

assign sub18_fu_958_p2 = ($signed(32'd4294967295) + $signed(numberLayers_read_reg_1226));

assign trunc_ln189_fu_683_p1 = numberInputs[11:0];

assign trunc_ln190_fu_687_p0 = numberNeurons;

assign trunc_ln190_fu_687_p1 = trunc_ln190_fu_687_p0[11:0];

assign trunc_ln205_fu_887_p1 = numberNeurons_read_reg_1203[7:0];

assign trunc_ln217_fu_984_p1 = i_7_reg_568[7:0];

assign trunc_ln85_1_fu_1079_p1 = i_8_reg_601[7:0];

assign trunc_ln85_2_fu_1019_p1 = i_9_reg_579[7:0];

assign trunc_ln85_fu_923_p1 = i_reg_546[7:0];

assign valuesToCopy_2_fu_793_p2 = (numberOutputs_read_reg_1234 + valuesToCopy_1_fu_789_p2);

assign valuesToCopy_fu_712_p1 = (add_ln191_1_fu_703_p2 + numberOutputs_read_reg_1234);

assign zext_ln82_1_fu_947_p1 = i_6_reg_557;

assign zext_ln82_2_fu_1074_p1 = i_8_reg_601;

assign zext_ln82_3_fu_1014_p1 = i_9_reg_579;

assign zext_ln82_4_fu_1048_p1 = i_10_reg_590;

assign zext_ln82_fu_918_p1 = i_reg_546;

assign zext_ln85_1_fu_1093_p1 = add_ln85_reg_1517;

assign zext_ln85_2_fu_1033_p1 = add_ln85_1_reg_1465;

assign zext_ln85_fu_932_p1 = trunc_ln85_reg_1377;

always @ (posedge ap_clk) begin
    zext_ln82_1_reg_1391[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln82_4_reg_1479[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //MultiLayerPerceptronDecoupled
