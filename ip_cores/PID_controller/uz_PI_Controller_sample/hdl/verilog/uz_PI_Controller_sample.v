// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_PI_Controller_sample_uz_PI_Controller_sample,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu9eg-ffrc900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.221000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1306,HLS_SYN_LUT=1710,HLS_VERSION=2020_1}" *)

module uz_PI_Controller_sample (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        self_i,
        self_o,
        self_o_ap_vld,
        referenceValue,
        actualValue,
        ext_clamping,
        ap_return
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [223:0] self_i;
output  [223:0] self_o;
output   self_o_ap_vld;
input  [31:0] referenceValue;
input  [31:0] actualValue;
input  [0:0] ext_clamping;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg self_o_ap_vld;

(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_145_p2;
reg   [31:0] reg_184;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] reg_193;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
reg   [31:0] trunc_ln_reg_813;
wire    ap_CS_fsm_state6;
wire   [31:0] bitcast_ln101_fu_222_p1;
reg   [31:0] trunc_ln3_reg_828;
reg   [31:0] trunc_ln104_1_reg_833;
wire   [0:0] icmp_ln24_2_fu_282_p2;
reg   [0:0] icmp_ln24_2_reg_838;
wire   [0:0] icmp_ln24_3_fu_288_p2;
reg   [0:0] icmp_ln24_3_reg_843;
wire   [0:0] icmp_ln24_4_fu_314_p2;
reg   [0:0] icmp_ln24_4_reg_848;
wire   [0:0] icmp_ln24_5_fu_320_p2;
reg   [0:0] icmp_ln24_5_reg_853;
reg   [159:0] tmp_15_reg_858;
reg   [15:0] tmp_16_reg_864;
wire   [7:0] trunc_ln107_fu_346_p1;
reg   [7:0] trunc_ln107_reg_870;
reg   [31:0] trunc_ln6_reg_876;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] P_sum_reg_881;
wire   [31:0] old_I_sum_fu_360_p1;
reg   [31:0] old_I_sum_reg_886;
wire    ap_CS_fsm_state10;
wire   [0:0] or_ln36_1_fu_394_p2;
reg   [0:0] or_ln36_1_reg_892;
wire   [31:0] bitcast_ln109_fu_400_p1;
wire   [0:0] grp_fu_164_p2;
reg   [0:0] tmp_7_reg_903;
wire    ap_CS_fsm_state11;
wire   [0:0] grp_fu_169_p2;
reg   [0:0] fcmp_ln36_reg_908;
wire   [0:0] grp_fu_174_p2;
reg   [0:0] fcmp_ln36_reg_913;
wire   [31:0] bitcast_ln104_fu_404_p1;
reg   [31:0] bitcast_ln104_reg_918;
wire    ap_CS_fsm_state15;
wire   [31:0] bitcast_ln104_1_fu_408_p1;
reg   [31:0] bitcast_ln104_1_reg_925;
wire   [0:0] and_ln24_3_fu_468_p2;
reg   [0:0] and_ln24_3_reg_931;
wire    ap_CS_fsm_state16;
wire   [0:0] and_ln24_fu_480_p2;
reg   [0:0] and_ln24_reg_936;
wire   [31:0] select_ln26_fu_491_p3;
reg   [31:0] select_ln26_reg_941;
wire    ap_CS_fsm_state18;
wire   [31:0] output_2_fu_497_p3;
reg   [31:0] output_2_reg_946;
wire    ap_CS_fsm_state23;
wire   [0:0] or_ln36_fu_533_p2;
reg   [0:0] or_ln36_reg_955;
wire    ap_CS_fsm_state24;
wire   [31:0] sign_fu_575_p3;
wire    ap_CS_fsm_state25;
wire   [31:0] sign_1_fu_617_p3;
wire   [0:0] grp_fu_179_p2;
reg   [0:0] tmp_11_reg_972;
wire   [0:0] icmp_ln84_fu_662_p2;
reg   [0:0] icmp_ln84_reg_977;
wire   [0:0] icmp_ln84_1_fu_668_p2;
reg   [0:0] icmp_ln84_1_reg_982;
wire   [0:0] icmp_ln84_2_fu_674_p2;
reg   [0:0] icmp_ln84_2_reg_987;
wire   [0:0] icmp_ln84_3_fu_680_p2;
reg   [0:0] icmp_ln84_3_reg_992;
wire    ap_CS_fsm_state26;
reg   [31:0] grp_fu_145_p0;
reg   [31:0] grp_fu_145_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state22;
reg   [31:0] grp_fu_156_p0;
reg   [31:0] grp_fu_156_p1;
wire   [31:0] grp_fu_160_p1;
reg   [31:0] grp_fu_164_p0;
reg   [31:0] grp_fu_164_p1;
wire    ap_CS_fsm_state17;
reg   [31:0] grp_fu_169_p0;
reg   [31:0] grp_fu_169_p1;
reg   [31:0] grp_fu_174_p0;
wire   [31:0] trunc_ln1_fu_212_p4;
wire   [31:0] trunc_ln2_fu_227_p4;
wire   [7:0] tmp_1_fu_262_p4;
wire   [22:0] trunc_ln24_1_fu_272_p4;
wire   [7:0] tmp_4_fu_294_p4;
wire   [22:0] trunc_ln24_3_fu_304_p4;
wire   [31:0] bitcast_ln36_1_fu_364_p1;
wire   [7:0] tmp_6_fu_368_p4;
wire   [22:0] trunc_ln36_1_fu_378_p1;
wire   [0:0] icmp_ln36_3_fu_388_p2;
wire   [0:0] icmp_ln36_2_fu_382_p2;
wire   [31:0] bitcast_ln24_fu_412_p1;
wire   [7:0] tmp_fu_416_p4;
wire   [22:0] trunc_ln24_fu_426_p1;
wire   [0:0] icmp_ln24_1_fu_436_p2;
wire   [0:0] icmp_ln24_fu_430_p2;
wire   [0:0] or_ln24_fu_442_p2;
wire   [0:0] or_ln24_1_fu_448_p2;
wire   [0:0] and_ln24_1_fu_452_p2;
wire   [0:0] or_ln24_2_fu_464_p2;
wire   [0:0] and_ln24_2_fu_458_p2;
wire   [0:0] and_ln24_4_fu_474_p2;
wire   [0:0] and_ln26_fu_486_p2;
wire   [31:0] bitcast_ln36_fu_504_p1;
wire   [7:0] tmp_9_fu_507_p4;
wire   [22:0] trunc_ln36_fu_517_p1;
wire   [0:0] icmp_ln36_1_fu_527_p2;
wire   [0:0] icmp_ln36_fu_521_p2;
wire   [0:0] and_ln36_fu_539_p2;
wire   [0:0] xor_ln36_fu_552_p2;
wire   [0:0] xor_ln36_fu_558_p2;
wire   [0:0] and_ln36_fu_564_p2;
wire   [0:0] and_ln36_1_fu_570_p2;
wire   [31:0] select_ln36_fu_544_p3;
wire   [0:0] and_ln36_2_fu_584_p2;
wire   [0:0] xor_ln36_fu_596_p2;
wire   [0:0] xor_ln36_fu_601_p2;
wire   [0:0] and_ln36_fu_606_p2;
wire   [0:0] and_ln36_3_fu_612_p2;
wire   [31:0] select_ln36_2_fu_588_p3;
wire   [31:0] bitcast_ln84_fu_626_p1;
wire   [31:0] bitcast_ln84_1_fu_644_p1;
wire   [7:0] tmp_12_fu_630_p4;
wire   [22:0] trunc_ln84_fu_640_p1;
wire   [7:0] tmp_13_fu_648_p4;
wire   [22:0] trunc_ln84_1_fu_658_p1;
wire   [0:0] and_ln84_fu_686_p2;
wire   [0:0] or_ln84_fu_696_p2;
wire   [0:0] or_ln84_1_fu_700_p2;
wire   [0:0] and_ln84_1_fu_704_p2;
wire   [0:0] and_ln84_2_fu_710_p2;
wire   [0:0] xor_ln84_fu_690_p2;
wire   [0:0] output_fu_716_p2;
wire   [31:0] bitcast_ln107_fu_736_p1;
wire   [31:0] grp_fu_152_p2;
wire   [31:0] bitcast_ln109_1_fu_751_p1;
wire   [0:0] clamping_active_fu_730_p2;
wire   [223:0] or_ln107_3_fu_740_p6;
wire   [223:0] or_ln109_3_fu_755_p6;
wire   [223:0] select_ln105_fu_766_p3;
wire   [8:0] trunc_ln107_1_fu_774_p1;
wire   [8:0] shl_ln_fu_722_p3;
wire   [214:0] tmp_17_fu_784_p4;
wire   [8:0] or_ln107_fu_778_p2;
reg   [1:0] grp_fu_145_opcode;
reg   [4:0] grp_fu_164_opcode;
reg   [4:0] grp_fu_169_opcode;
reg   [25:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
end

uz_PI_Controller_sample_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_145_p0),
    .din1(grp_fu_145_p1),
    .opcode(grp_fu_145_opcode),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

uz_PI_Controller_sample_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(old_I_sum_reg_886),
    .din1(reg_193),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_156_p0),
    .din1(grp_fu_156_p1),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_184),
    .din1(grp_fu_160_p1),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_164_p0),
    .din1(grp_fu_164_p1),
    .ce(1'b1),
    .opcode(grp_fu_164_opcode),
    .dout(grp_fu_164_p2)
);

uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_169_p0),
    .din1(grp_fu_169_p1),
    .ce(1'b1),
    .opcode(grp_fu_169_opcode),
    .dout(grp_fu_169_p2)
);

uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_174_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_174_p2)
);

uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_2_reg_946),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_179_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        P_sum_reg_881 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        and_ln24_3_reg_931 <= and_ln24_3_fu_468_p2;
        and_ln24_reg_936 <= and_ln24_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bitcast_ln104_1_reg_925 <= bitcast_ln104_1_fu_408_p1;
        bitcast_ln104_reg_918 <= bitcast_ln104_fu_404_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        fcmp_ln36_reg_908 <= grp_fu_169_p2;
        fcmp_ln36_reg_913 <= grp_fu_174_p2;
        tmp_7_reg_903 <= grp_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln24_2_reg_838 <= icmp_ln24_2_fu_282_p2;
        icmp_ln24_3_reg_843 <= icmp_ln24_3_fu_288_p2;
        icmp_ln24_4_reg_848 <= icmp_ln24_4_fu_314_p2;
        icmp_ln24_5_reg_853 <= icmp_ln24_5_fu_320_p2;
        tmp_15_reg_858 <= {{self_i[223:64]}};
        tmp_16_reg_864 <= {{self_i[31:16]}};
        trunc_ln104_1_reg_833 <= {{self_i[223:192]}};
        trunc_ln107_reg_870 <= trunc_ln107_fu_346_p1;
        trunc_ln3_reg_828 <= {{self_i[191:160]}};
        trunc_ln6_reg_876 <= {{self_i[159:128]}};
        trunc_ln_reg_813 <= {{self_i[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        icmp_ln84_1_reg_982 <= icmp_ln84_1_fu_668_p2;
        icmp_ln84_2_reg_987 <= icmp_ln84_2_fu_674_p2;
        icmp_ln84_3_reg_992 <= icmp_ln84_3_fu_680_p2;
        icmp_ln84_reg_977 <= icmp_ln84_fu_662_p2;
        tmp_11_reg_972 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        old_I_sum_reg_886 <= old_I_sum_fu_360_p1;
        or_ln36_1_reg_892 <= or_ln36_1_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        or_ln36_reg_955 <= or_ln36_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_2_reg_946 <= output_2_fu_497_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_184 <= grp_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_193 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd0 == and_ln24_reg_936))) begin
        select_ln26_reg_941 <= select_ln26_fu_491_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state19) & (1'd0 == and_ln24_reg_936)))) begin
        grp_fu_145_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_145_opcode = 2'd0;
    end else begin
        grp_fu_145_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_145_p0 = old_I_sum_reg_886;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_145_p0 = reg_184;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_145_p0 = old_I_sum_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_145_p0 = referenceValue;
    end else begin
        grp_fu_145_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_145_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_145_p1 = select_ln26_reg_941;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_145_p1 = P_sum_reg_881;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_145_p1 = actualValue;
    end else begin
        grp_fu_145_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_156_p0 = reg_193;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_156_p0 = reg_184;
    end else begin
        grp_fu_156_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_156_p1 = bitcast_ln109_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_156_p1 = bitcast_ln101_fu_222_p1;
    end else begin
        grp_fu_156_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_164_opcode = 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state17) & (1'd0 == and_ln24_reg_936))) begin
        grp_fu_164_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_164_opcode = 5'd3;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_164_opcode = 5'd4;
    end else begin
        grp_fu_164_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_164_p0 = sign_fu_575_p3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_164_p0 = output_2_reg_946;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_164_p0 = reg_184;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_164_p0 = reg_193;
    end else begin
        grp_fu_164_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_164_p1 = sign_1_fu_617_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_164_p1 = bitcast_ln104_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_164_p1 = bitcast_ln104_1_fu_408_p1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_164_p1 = 32'd0;
    end else begin
        grp_fu_164_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_169_opcode = 5'd5;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_169_opcode = 5'd8;
    end else begin
        grp_fu_169_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_169_p0 = output_2_reg_946;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_169_p0 = reg_184;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_169_p0 = reg_193;
    end else begin
        grp_fu_169_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_169_p1 = bitcast_ln104_fu_404_p1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_169_p1 = 32'd0;
    end else begin
        grp_fu_169_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_174_p0 = output_2_reg_946;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_174_p0 = reg_193;
    end else begin
        grp_fu_174_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        self_o_ap_vld = 1'b1;
    end else begin
        self_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln24_1_fu_452_p2 = (or_ln24_fu_442_p2 & or_ln24_1_fu_448_p2);

assign and_ln24_2_fu_458_p2 = (grp_fu_164_p2 & and_ln24_1_fu_452_p2);

assign and_ln24_3_fu_468_p2 = (or_ln24_fu_442_p2 & or_ln24_2_fu_464_p2);

assign and_ln24_4_fu_474_p2 = (grp_fu_169_p2 & and_ln24_3_fu_468_p2);

assign and_ln24_fu_480_p2 = (and_ln24_4_fu_474_p2 & and_ln24_2_fu_458_p2);

assign and_ln26_fu_486_p2 = (grp_fu_164_p2 & and_ln24_3_reg_931);

assign and_ln36_1_fu_570_p2 = (or_ln36_reg_955 & and_ln36_fu_564_p2);

assign and_ln36_2_fu_584_p2 = (tmp_7_reg_903 & or_ln36_1_reg_892);

assign and_ln36_3_fu_612_p2 = (or_ln36_1_reg_892 & and_ln36_fu_606_p2);

assign and_ln36_fu_539_p2 = (or_ln36_reg_955 & grp_fu_164_p2);

assign and_ln36_fu_564_p2 = (xor_ln36_fu_558_p2 & xor_ln36_fu_552_p2);

assign and_ln36_fu_606_p2 = (xor_ln36_fu_601_p2 & xor_ln36_fu_596_p2);

assign and_ln84_1_fu_704_p2 = (or_ln84_fu_696_p2 & or_ln84_1_fu_700_p2);

assign and_ln84_2_fu_710_p2 = (grp_fu_164_p2 & and_ln84_1_fu_704_p2);

assign and_ln84_fu_686_p2 = (tmp_11_reg_972 & or_ln36_reg_955);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = reg_184;

assign bitcast_ln101_fu_222_p1 = trunc_ln1_fu_212_p4;

assign bitcast_ln104_1_fu_408_p1 = trunc_ln104_1_reg_833;

assign bitcast_ln104_fu_404_p1 = trunc_ln3_reg_828;

assign bitcast_ln107_fu_736_p1 = grp_fu_145_p2;

assign bitcast_ln109_1_fu_751_p1 = grp_fu_152_p2;

assign bitcast_ln109_fu_400_p1 = trunc_ln6_reg_876;

assign bitcast_ln24_fu_412_p1 = reg_184;

assign bitcast_ln36_1_fu_364_p1 = reg_193;

assign bitcast_ln36_fu_504_p1 = output_2_reg_946;

assign bitcast_ln84_1_fu_644_p1 = sign_1_fu_617_p3;

assign bitcast_ln84_fu_626_p1 = sign_fu_575_p3;

assign clamping_active_fu_730_p2 = (output_fu_716_p2 | ext_clamping);

assign grp_fu_160_p1 = trunc_ln2_fu_227_p4;

assign icmp_ln24_1_fu_436_p2 = ((trunc_ln24_fu_426_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_282_p2 = ((tmp_1_fu_262_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln24_3_fu_288_p2 = ((trunc_ln24_1_fu_272_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_4_fu_314_p2 = ((tmp_4_fu_294_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln24_5_fu_320_p2 = ((trunc_ln24_3_fu_304_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_430_p2 = ((tmp_fu_416_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_527_p2 = ((trunc_ln36_fu_517_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_2_fu_382_p2 = ((tmp_6_fu_368_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln36_3_fu_388_p2 = ((trunc_ln36_1_fu_378_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_521_p2 = ((tmp_9_fu_507_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln84_1_fu_668_p2 = ((trunc_ln84_fu_640_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln84_2_fu_674_p2 = ((tmp_13_fu_648_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln84_3_fu_680_p2 = ((trunc_ln84_1_fu_658_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_662_p2 = ((tmp_12_fu_630_p4 != 8'd255) ? 1'b1 : 1'b0);

assign old_I_sum_fu_360_p1 = trunc_ln_reg_813;

assign or_ln107_3_fu_740_p6 = {{{{{tmp_15_reg_858}, {bitcast_ln107_fu_736_p1}}, {tmp_16_reg_864}}, {8'd0}}, {trunc_ln107_reg_870}};

assign or_ln107_fu_778_p2 = (trunc_ln107_1_fu_774_p1 | shl_ln_fu_722_p3);

assign or_ln109_3_fu_755_p6 = {{{{{tmp_15_reg_858}, {bitcast_ln109_1_fu_751_p1}}, {tmp_16_reg_864}}, {8'd0}}, {trunc_ln107_reg_870}};

assign or_ln24_1_fu_448_p2 = (icmp_ln24_3_reg_843 | icmp_ln24_2_reg_838);

assign or_ln24_2_fu_464_p2 = (icmp_ln24_5_reg_853 | icmp_ln24_4_reg_848);

assign or_ln24_fu_442_p2 = (icmp_ln24_fu_430_p2 | icmp_ln24_1_fu_436_p2);

assign or_ln36_1_fu_394_p2 = (icmp_ln36_3_fu_388_p2 | icmp_ln36_2_fu_382_p2);

assign or_ln36_fu_533_p2 = (icmp_ln36_fu_521_p2 | icmp_ln36_1_fu_527_p2);

assign or_ln84_1_fu_700_p2 = (icmp_ln84_3_reg_992 | icmp_ln84_2_reg_987);

assign or_ln84_fu_696_p2 = (icmp_ln84_reg_977 | icmp_ln84_1_reg_982);

assign output_2_fu_497_p3 = ((and_ln24_reg_936[0:0] === 1'b1) ? 32'd0 : grp_fu_145_p2);

assign output_fu_716_p2 = (xor_ln84_fu_690_p2 & and_ln84_2_fu_710_p2);

assign select_ln105_fu_766_p3 = ((clamping_active_fu_730_p2[0:0] === 1'b1) ? or_ln107_3_fu_740_p6 : or_ln109_3_fu_755_p6);

assign select_ln26_fu_491_p3 = ((and_ln26_fu_486_p2[0:0] === 1'b1) ? bitcast_ln104_reg_918 : bitcast_ln104_1_reg_925);

assign select_ln36_2_fu_588_p3 = ((and_ln36_2_fu_584_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln36_fu_544_p3 = ((and_ln36_fu_539_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign self_o = {{tmp_17_fu_784_p4}, {or_ln107_fu_778_p2}};

assign shl_ln_fu_722_p3 = {{output_fu_716_p2}, {8'd0}};

assign sign_1_fu_617_p3 = ((and_ln36_3_fu_612_p2[0:0] === 1'b1) ? select_ln36_2_fu_588_p3 : 32'd0);

assign sign_fu_575_p3 = ((and_ln36_1_fu_570_p2[0:0] === 1'b1) ? select_ln36_fu_544_p3 : 32'd0);

assign tmp_12_fu_630_p4 = {{bitcast_ln84_fu_626_p1[30:23]}};

assign tmp_13_fu_648_p4 = {{bitcast_ln84_1_fu_644_p1[30:23]}};

assign tmp_17_fu_784_p4 = {{select_ln105_fu_766_p3[223:9]}};

assign tmp_1_fu_262_p4 = {{self_i[222:215]}};

assign tmp_4_fu_294_p4 = {{self_i[190:183]}};

assign tmp_6_fu_368_p4 = {{bitcast_ln36_1_fu_364_p1[30:23]}};

assign tmp_9_fu_507_p4 = {{bitcast_ln36_fu_504_p1[30:23]}};

assign tmp_fu_416_p4 = {{bitcast_ln24_fu_412_p1[30:23]}};

assign trunc_ln107_1_fu_774_p1 = select_ln105_fu_766_p3[8:0];

assign trunc_ln107_fu_346_p1 = self_i[7:0];

assign trunc_ln1_fu_212_p4 = {{self_i[127:96]}};

assign trunc_ln24_1_fu_272_p4 = {{self_i[214:192]}};

assign trunc_ln24_3_fu_304_p4 = {{self_i[182:160]}};

assign trunc_ln24_fu_426_p1 = bitcast_ln24_fu_412_p1[22:0];

assign trunc_ln2_fu_227_p4 = {{self_i[95:64]}};

assign trunc_ln36_1_fu_378_p1 = bitcast_ln36_1_fu_364_p1[22:0];

assign trunc_ln36_fu_517_p1 = bitcast_ln36_fu_504_p1[22:0];

assign trunc_ln84_1_fu_658_p1 = bitcast_ln84_1_fu_644_p1[22:0];

assign trunc_ln84_fu_640_p1 = bitcast_ln84_fu_626_p1[22:0];

assign xor_ln36_fu_552_p2 = (grp_fu_169_p2 ^ 1'd1);

assign xor_ln36_fu_558_p2 = (grp_fu_174_p2 ^ 1'd1);

assign xor_ln36_fu_596_p2 = (fcmp_ln36_reg_908 ^ 1'd1);

assign xor_ln36_fu_601_p2 = (fcmp_ln36_reg_913 ^ 1'd1);

assign xor_ln84_fu_690_p2 = (1'd1 ^ and_ln84_fu_686_p2);

endmodule //uz_PI_Controller_sample
