-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_FOC is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    actual_id : IN STD_LOGIC_VECTOR (31 downto 0);
    actual_iq : IN STD_LOGIC_VECTOR (31 downto 0);
    reset_PL : IN STD_LOGIC;
    ref_ud : OUT STD_LOGIC_VECTOR (31 downto 0);
    ref_uq : OUT STD_LOGIC_VECTOR (31 downto 0);
    test_out_pl : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of uz_FOC is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_FOC_uz_FOC,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.485400,HLS_SYN_LAT=24,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1579,HLS_SYN_LUT=1842,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sampletime : STD_LOGIC_VECTOR (31 downto 0);
    signal set_i_d : STD_LOGIC_VECTOR (31 downto 0);
    signal set_i_q : STD_LOGIC_VECTOR (31 downto 0);
    signal KP_d : STD_LOGIC_VECTOR (31 downto 0);
    signal KI_d : STD_LOGIC_VECTOR (31 downto 0);
    signal KP_q : STD_LOGIC_VECTOR (31 downto 0);
    signal KI_q : STD_LOGIC_VECTOR (31 downto 0);
    signal reset_PS : STD_LOGIC;
    signal limit : STD_LOGIC_VECTOR (31 downto 0);
    signal out_KP_d : STD_LOGIC_VECTOR (31 downto 0);
    signal out_KP_d_ap_vld : STD_LOGIC;
    signal out_idref_ap_vld : STD_LOGIC;
    signal out_status : STD_LOGIC;
    signal out_status_ap_vld : STD_LOGIC;
    signal I_sum_d : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_sum_q : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal and_ln46_1_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal and_ln46_3_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal limit_read_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal KI_q_read_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal KP_q_read_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal KI_d_read_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal KP_d_read_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal set_i_q_read_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal sampletime_read_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln46_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_3_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_3_reg_632 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_1_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_1_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_1_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln48_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_2_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_2_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal and_ln46_3_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln48_1_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_1_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal phi_ln31_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal reset_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_249 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ref_ud_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bitcast_ln45_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal and_ln48_1_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ref_uq_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bitcast_ln45_1_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal and_ln48_3_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_282_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal reset_fu_327_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal reset_fu_327_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_364_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_fu_374_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln46_1_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_382_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_1_fu_392_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln46_2_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln48_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln48_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_480_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_2_fu_490_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln46_5_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_4_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_2_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln48_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln48_2_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_263_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_278_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component uz_FOC_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_FOC_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        sampletime : OUT STD_LOGIC_VECTOR (31 downto 0);
        set_i_d : OUT STD_LOGIC_VECTOR (31 downto 0);
        set_i_q : OUT STD_LOGIC_VECTOR (31 downto 0);
        KP_d : OUT STD_LOGIC_VECTOR (31 downto 0);
        KI_d : OUT STD_LOGIC_VECTOR (31 downto 0);
        KP_q : OUT STD_LOGIC_VECTOR (31 downto 0);
        KI_q : OUT STD_LOGIC_VECTOR (31 downto 0);
        reset_PS : OUT STD_LOGIC;
        limit : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_KP_d : IN STD_LOGIC_VECTOR (31 downto 0);
        out_KP_d_ap_vld : IN STD_LOGIC;
        out_idref : IN STD_LOGIC_VECTOR (31 downto 0);
        out_idref_ap_vld : IN STD_LOGIC;
        out_status : IN STD_LOGIC;
        out_status_ap_vld : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component uz_FOC_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        sampletime => sampletime,
        set_i_d => set_i_d,
        set_i_q => set_i_q,
        KP_d => KP_d,
        KI_d => KI_d,
        KP_q => KP_q,
        KI_q => KI_q,
        reset_PS => reset_PS,
        limit => limit,
        out_KP_d => out_KP_d,
        out_KP_d_ap_vld => out_KP_d_ap_vld,
        out_idref => bitcast_ln29_reg_612,
        out_idref_ap_vld => out_idref_ap_vld,
        out_status => out_status,
        out_status_ap_vld => out_status_ap_vld);

    faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component uz_FOC_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_263_p0,
        din1 => grp_fu_263_p1,
        opcode => grp_fu_263_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_263_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component uz_FOC_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component uz_FOC_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_303,
        din1 => grp_fu_274_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U4 : component uz_FOC_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_303,
        din1 => grp_fu_278_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_278_opcode,
        dout => grp_fu_278_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ref_ud_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ref_ud_preg <= ap_const_lv32_0;
            else
                if (((ap_const_lv1_1 = and_ln46_1_reg_643) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    ref_ud_preg <= bitcast_ln46_reg_620;
                elsif (((ap_const_lv1_1 = and_ln48_1_fu_458_p2) and (ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = and_ln46_1_reg_643))) then 
                    ref_ud_preg <= reg_321;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ref_ud_preg <= bitcast_ln45_fu_359_p1;
                elsif (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ref_ud_preg <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    ref_uq_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ref_uq_preg <= ap_const_lv32_0;
            else
                if (((ap_const_lv1_1 = and_ln48_3_fu_536_p2) and (ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = and_ln46_3_reg_669))) then 
                    ref_uq_preg <= reg_321;
                elsif (((ap_const_lv1_1 = and_ln46_3_fu_516_p2) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ref_uq_preg <= bitcast_ln46_reg_620;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ref_uq_preg <= bitcast_ln45_1_fu_475_p1;
                elsif (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ref_uq_preg <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    I_sum_d_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                I_sum_d <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                I_sum_d <= grp_fu_263_p2;
            end if; 
        end if;
    end process;

    I_sum_q_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                I_sum_q <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                I_sum_q <= grp_fu_263_p2;
            end if; 
        end if;
    end process;

    empty_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                empty_reg_249 <= ap_const_lv1_0;
            elsif (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_249 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    phi_ln31_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                phi_ln31_reg_238 <= grp_fu_263_p2;
            elsif (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln31_reg_238 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                KI_d_read_reg_569 <= KI_d;
                KI_q_read_reg_559 <= KI_q;
                KP_d_read_reg_574 <= KP_d;
                KP_q_read_reg_564 <= KP_q;
                bitcast_ln28_reg_607 <= bitcast_ln28_fu_333_p1;
                bitcast_ln29_reg_612 <= bitcast_ln29_fu_338_p1;
                limit_read_reg_553 <= limit;
                sampletime_read_reg_589 <= sampletime;
                set_i_q_read_reg_579 <= set_i_q;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                and_ln46_1_reg_643 <= and_ln46_1_fu_438_p2;
                bitcast_ln46_reg_620 <= bitcast_ln46_fu_378_p1;
                icmp_ln46_3_reg_632 <= icmp_ln46_3_fu_420_p2;
                or_ln46_1_reg_638 <= or_ln46_1_fu_426_p2;
                or_ln46_reg_627 <= or_ln46_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                and_ln46_3_reg_669 <= and_ln46_3_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = and_ln46_3_fu_516_p2))) then
                icmp_ln48_1_reg_678 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = and_ln46_1_fu_438_p2))) then
                icmp_ln48_reg_652 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                or_ln46_2_reg_663 <= or_ln46_2_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_303 <= grp_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_311 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_316 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = and_ln46_3_fu_516_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = and_ln46_1_fu_438_p2)))) then
                reg_321 <= grp_fu_282_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, reset_fu_327_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                elsif (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln46_1_fu_438_p2 <= (grp_fu_278_p2 and and_ln46_fu_432_p2);
    and_ln46_2_fu_512_p2 <= (or_ln46_2_reg_663 and or_ln46_1_reg_638);
    and_ln46_3_fu_516_p2 <= (grp_fu_278_p2 and and_ln46_2_fu_512_p2);
    and_ln46_fu_432_p2 <= (or_ln46_fu_408_p2 and or_ln46_1_fu_426_p2);
    and_ln48_1_fu_458_p2 <= (grp_fu_278_p2 and and_ln48_fu_453_p2);
    and_ln48_2_fu_531_p2 <= (or_ln48_1_fu_527_p2 and or_ln46_2_reg_663);
    and_ln48_3_fu_536_p2 <= (grp_fu_278_p2 and and_ln48_2_fu_531_p2);
    and_ln48_fu_453_p2 <= (or_ln48_fu_449_p2 and or_ln46_reg_627);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln28_fu_333_p1 <= KP_d;
    bitcast_ln29_fu_338_p1 <= set_i_d;
    bitcast_ln45_1_fu_475_p1 <= reg_303;
    bitcast_ln45_fu_359_p1 <= reg_303;
    bitcast_ln46_fu_378_p1 <= limit_read_reg_553;
    bitcast_ln48_1_fu_522_p1 <= grp_fu_282_p2;
    bitcast_ln48_fu_444_p1 <= grp_fu_282_p2;

    grp_fu_263_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state21, reset_fu_327_p2, ap_CS_fsm_state10, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state37, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_263_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_263_opcode <= ap_const_lv2_0;
        else 
            grp_fu_263_opcode <= "XX";
        end if; 
    end process;


    grp_fu_263_p0_assign_proc : process(ap_CS_fsm_state1, set_i_d, I_sum_d, I_sum_q, reg_303, ap_CS_fsm_state21, set_i_q_read_reg_579, ap_CS_fsm_state10, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state37, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_263_p0 <= reg_303;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_263_p0 <= I_sum_q;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_263_p0 <= set_i_q_read_reg_579;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_263_p0 <= I_sum_d;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_263_p0 <= set_i_d;
        else 
            grp_fu_263_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_263_p1_assign_proc : process(ap_CS_fsm_state1, actual_id, actual_iq, ap_CS_fsm_state21, reg_311, ap_CS_fsm_state10, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state37, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_263_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_263_p1 <= actual_iq;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_263_p1 <= reg_311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_263_p1 <= actual_id;
        else 
            grp_fu_263_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_p0_assign_proc : process(reg_303, reg_316, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state6, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_270_p0 <= reg_316;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_270_p0 <= reg_303;
        else 
            grp_fu_270_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_p1_assign_proc : process(KI_q_read_reg_559, KI_d_read_reg_569, sampletime_read_reg_589, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state6, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_270_p1 <= KI_q_read_reg_559;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_270_p1 <= sampletime_read_reg_589;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_270_p1 <= KI_d_read_reg_569;
        else 
            grp_fu_270_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_274_p1_assign_proc : process(KP_q_read_reg_564, KP_d_read_reg_574, ap_CS_fsm_state6, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_274_p1 <= KP_q_read_reg_564;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_274_p1 <= KP_d_read_reg_574;
        else 
            grp_fu_274_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_opcode_assign_proc : process(ap_CS_fsm_state16, and_ln46_1_fu_438_p2, ap_CS_fsm_state32, and_ln46_3_fu_516_p2, ap_CS_fsm_state31, ap_CS_fsm_state15)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = and_ln46_3_fu_516_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = and_ln46_1_fu_438_p2)))) then 
            grp_fu_278_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_278_opcode <= ap_const_lv5_2;
        else 
            grp_fu_278_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_278_p1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state32, limit_read_reg_553, bitcast_ln48_fu_444_p1, ap_CS_fsm_state31, bitcast_ln48_1_fu_522_p1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_278_p1 <= bitcast_ln48_1_fu_522_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_278_p1 <= bitcast_ln48_fu_444_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_278_p1 <= limit_read_reg_553;
        else 
            grp_fu_278_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_282_p0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state32, bitcast_ln46_fu_378_p1, bitcast_ln46_reg_620)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_282_p0 <= bitcast_ln46_reg_620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_282_p0 <= bitcast_ln46_fu_378_p1;
        else 
            grp_fu_282_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_282_p2 <= (grp_fu_282_p0 xor ap_const_lv32_80000000);
    grp_fu_287_p4 <= grp_fu_282_p2(30 downto 23);
    grp_fu_297_p2 <= "0" when (grp_fu_287_p4 = ap_const_lv8_FF) else "1";
    icmp_ln46_1_fu_402_p2 <= "1" when (trunc_ln46_fu_374_p1 = ap_const_lv23_0) else "0";
    icmp_ln46_2_fu_414_p2 <= "0" when (tmp_1_fu_382_p4 = ap_const_lv8_FF) else "1";
    icmp_ln46_3_fu_420_p2 <= "1" when (trunc_ln46_1_fu_392_p1 = ap_const_lv23_0) else "0";
    icmp_ln46_4_fu_494_p2 <= "0" when (tmp_6_fu_480_p4 = ap_const_lv8_FF) else "1";
    icmp_ln46_5_fu_500_p2 <= "1" when (trunc_ln46_2_fu_490_p1 = ap_const_lv23_0) else "0";
    icmp_ln46_fu_396_p2 <= "0" when (tmp_fu_364_p4 = ap_const_lv8_FF) else "1";
    or_ln46_1_fu_426_p2 <= (icmp_ln46_3_fu_420_p2 or icmp_ln46_2_fu_414_p2);
    or_ln46_2_fu_506_p2 <= (icmp_ln46_5_fu_500_p2 or icmp_ln46_4_fu_494_p2);
    or_ln46_fu_408_p2 <= (icmp_ln46_fu_396_p2 or icmp_ln46_1_fu_402_p2);
    or_ln48_1_fu_527_p2 <= (icmp_ln48_1_reg_678 or icmp_ln46_3_reg_632);
    or_ln48_fu_449_p2 <= (icmp_ln48_reg_652 or icmp_ln46_3_reg_632);

    out_KP_d_assign_proc : process(ap_start, ap_CS_fsm_state1, bitcast_ln28_fu_333_p1, bitcast_ln28_reg_607, reset_fu_327_p2, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            out_KP_d <= bitcast_ln28_reg_607;
        elsif (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_KP_d <= bitcast_ln28_fu_333_p1;
        else 
            out_KP_d <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_KP_d_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_fu_327_p2, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_KP_d_ap_vld <= ap_const_logic_1;
        else 
            out_KP_d_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_idref_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            out_idref_ap_vld <= ap_const_logic_1;
        else 
            out_idref_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_status <= empty_reg_249(0);

    out_status_ap_vld_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            out_status_ap_vld <= ap_const_logic_1;
        else 
            out_status_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ref_ud_assign_proc : process(ap_start, ap_CS_fsm_state1, reg_321, ap_CS_fsm_state16, bitcast_ln46_reg_620, and_ln46_1_reg_643, reset_fu_327_p2, ref_ud_preg, bitcast_ln45_fu_359_p1, ap_CS_fsm_state17, and_ln48_1_fu_458_p2)
    begin
        if (((ap_const_lv1_1 = and_ln46_1_reg_643) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ref_ud <= bitcast_ln46_reg_620;
        elsif (((ap_const_lv1_1 = and_ln48_1_fu_458_p2) and (ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = and_ln46_1_reg_643))) then 
            ref_ud <= reg_321;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ref_ud <= bitcast_ln45_fu_359_p1;
        elsif (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ref_ud <= ap_const_lv32_0;
        else 
            ref_ud <= ref_ud_preg;
        end if; 
    end process;


    ref_uq_assign_proc : process(ap_start, ap_CS_fsm_state1, reg_321, ap_CS_fsm_state32, and_ln46_3_fu_516_p2, bitcast_ln46_reg_620, ap_CS_fsm_state31, and_ln46_3_reg_669, reset_fu_327_p2, ref_uq_preg, bitcast_ln45_1_fu_475_p1, ap_CS_fsm_state33, and_ln48_3_fu_536_p2)
    begin
        if (((ap_const_lv1_1 = and_ln48_3_fu_536_p2) and (ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = and_ln46_3_reg_669))) then 
            ref_uq <= reg_321;
        elsif (((ap_const_lv1_1 = and_ln46_3_fu_516_p2) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            ref_uq <= bitcast_ln46_reg_620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            ref_uq <= bitcast_ln45_1_fu_475_p1;
        elsif (((ap_start = ap_const_logic_1) and (reset_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ref_uq <= ap_const_lv32_0;
        else 
            ref_uq <= ref_uq_preg;
        end if; 
    end process;

    reset_fu_327_p0 <= (0=>reset_PL, others=>'-');
    reset_fu_327_p1 <= (0=>reset_PS, others=>'-');
    reset_fu_327_p2 <= (reset_fu_327_p1 or reset_fu_327_p0);
    test_out_pl <= phi_ln31_reg_238;
    tmp_1_fu_382_p4 <= bitcast_ln46_fu_378_p1(30 downto 23);
    tmp_6_fu_480_p4 <= bitcast_ln45_1_fu_475_p1(30 downto 23);
    tmp_fu_364_p4 <= bitcast_ln45_fu_359_p1(30 downto 23);
    trunc_ln46_1_fu_392_p1 <= bitcast_ln46_fu_378_p1(23 - 1 downto 0);
    trunc_ln46_2_fu_490_p1 <= bitcast_ln45_1_fu_475_p1(23 - 1 downto 0);
    trunc_ln46_fu_374_p1 <= bitcast_ln45_fu_359_p1(23 - 1 downto 0);
end behav;
