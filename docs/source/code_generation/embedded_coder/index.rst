=======================
Embedded-Coder (C-Code)
=======================


..	toctree::
		:maxdepth: 2
		:hidden:
		:caption: Embedded-Coder (C-Code)

		definitions


Useful information from Matlab regarding the Embedded coder:

- `Deploy Generated Standalone Executable Programs To Target Hardware <https://de.mathworks.com/help/ecoder/ug/standalone-programs-no-operating-system.html>`_
- `Use the Real-Time Model Data Structure <https://de.mathworks.com/help/ecoder/ug/use-the-real-time-model-data-structure.html>`_
- `How Generated Code Stores Internal Signal, State, and Parameter Data <https://de.mathworks.com/help/ecoder/ug/how-generated-code-stores-internal-signal-state-and-parameter-data.html>`_
- `How Generated Code Exchanges Data with an Environment <https://de.mathworks.com/help/ecoder/ug/how-generated-code-exchanges-data-with-an-environment.html>`_
- `Standard Data Structures in the Generated Code <https://de.mathworks.com/help/ecoder/ug/default-representation-of-global-data-in-generated-code.html>`_

How to use
----------

The ``uz_codegen`` module encapsulates the code that is generated by the Embedded coder.
This enables the usage of multiple instances of the same generated Simulink model.
The API of ``uz_codegen`` has two functions:

``uz_codegen_init(uz_codegen *self)``
 Initialization function for the codegen struct.
 Has to be passed a pointer to an variable of type ``uz_codegen``.

``uz_codegen_step(uz_codegen *self)``
 Steps the model one time, i.e. all calculations inside the Simulink model are executed once.
 Has to be passed a pointer to an variable of type ``uz_codegen``.

::

    ultrazohm_sw/
    └── vitis/
        ├── export/
	    |   └── Baremetal/
	    |        └── Codegen/
		|		     ├── uz_codegen.c
		|		     ├── uz_codegen.c
		|		     └── uz_codegen0_ert_rtw/
        └── SimulinkCodegen
			├── uz_generateSimulinkModel.m
			├── uz_setCodegenPaths.m
            └── uz_codegen.slx

.. note:: Code generation with Simulink creates a lot of auxillary files when generating code (``slprj`` folder, ``codeInfo.mat``, ..). Please do not add them to git.

First usage
-----------

In Matlab:

- Set your Matlab path to ``ultrazohm_sw/vitis/SimulinkCodegen``
- Open ``uz_codegen.slx`` with Matlab/Simulink.
- The Simulink model calls ``uz_setCodegenPaths.m`` (defined as preLoadFcn callback)
- ``uz_setCodegenPaths.m`` sets the appropriate paths for the code generation on the UltraZohm
- Right click on the subsystem ``uz_codegen``
- Click ``C/C++ Code -> Build This System``
- *Code Generation Advisor* will open
- Check for warnings and errors
- ``Build code for Subsystem:uz_codegen`` opens
- Click *Build*
- Code is generated and usable in Vitis
- Alternative: execute the script ``uz_generateSimulinkModel.m`` which executes all of the above steps

In Vitis:

- The code is generated in ``ultrazohm_sw/vitis/export/Baremetal/Codegen/uz_codegen0_ert_rtw``
- Code is not called by the standard vitis project
- Define ``uz_codegen codegenInstance`` as a global variable in ``main.c`` of the Baremetal project
- Call the init function (``uz_codegen_init(&codegenInstance)``) inside the main
- Add ``extern uz_codegen codegenInstance`` to ``Baremtal/sw/isr.c`` to use the global inside the ISR
- Call ``uz_codegen_step(&codegenInstance)`` inside the ISR to execute the generated code
- ``codegenInstance.input`` holds all input values and can be set directly
- ``codegenInstance.output`` holds all output values and can be set directly

Define multiple instances as globals inside ``main.c`` (e.g. codegenInstance2) and call ``uz_codegen_init`` and ``uz_codegen_step`` with the respective instance to use multiple independent instances of the generated code.