-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\FCS_MPC_3Phase_SPMSM\test_ipcore\hdlsrc\FCS_MPC_3Phase_SPMSM_TEST1\Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function1.vhd
-- Created: 2022-07-08 11:03:56
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function1
-- Source Path: FCS_MPC_3Phase_SPMSM_TEST1/Microcontroller Software/Subsystem1/MATLAB Function1
-- Hierarchy Level: 1
-- 
-- Ermittlung des Indizes des minimums des Cost-Function-Vektors
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_Subsystem1_pkg.ALL;

ENTITY Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        J                                 :   IN    vector_of_std_logic_vector32(0 TO 7);  -- single [8]
        v                                 :   IN    matrix_of_std_logic_vector32(0 TO 1, 0 TO 7);  -- single [2x8]
        I                                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        v_opt                             :   OUT   vector_of_std_logic_vector32(0 TO 1)  -- single [2]
        );
END Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function1;


ARCHITECTURE rtl OF Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_MATLAB_Function1 IS

  -- Component Declarations
  COMPONENT Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single
    USE ENTITY work.Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single(rtl);

  -- Signals
  SIGNAL out0                             : std_logic;
  SIGNAL J_0                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_1                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL min                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_1                           : std_logic;
  SIGNAL J_2                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL min_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_2                           : std_logic;
  SIGNAL J_3                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL min_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_3                           : std_logic;
  SIGNAL J_4                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL min_3                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_4                           : std_logic;
  SIGNAL J_5                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL min_4                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_5                           : std_logic;
  SIGNAL J_6                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL min_5                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_6                           : std_logic;
  SIGNAL I_1                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_2                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_3                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_4                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_5                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_6                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_7                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_8                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_9                              : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_10                             : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_11                             : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_12                             : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_13                             : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_14                             : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_tmp                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL v_opt_1                          : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL out0_7                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL v_opt_2                          : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL out0_8                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL v_opt_3                          : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]

BEGIN
  u_nfp_relop_comp : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => J(1),  -- single
              nfp_in2 => J(0),  -- single
              nfp_out1 => out0
              );

  u_nfp_relop_comp_1 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => J(2),  -- single
              nfp_in2 => min,  -- single
              nfp_out1 => out0_1
              );

  u_nfp_relop_comp_2 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => J(3),  -- single
              nfp_in2 => min_1,  -- single
              nfp_out1 => out0_2
              );

  u_nfp_relop_comp_3 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => J(4),  -- single
              nfp_in2 => min_2,  -- single
              nfp_out1 => out0_3
              );

  u_nfp_relop_comp_4 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => J(5),  -- single
              nfp_in2 => min_3,  -- single
              nfp_out1 => out0_4
              );

  u_nfp_relop_comp_5 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => J(6),  -- single
              nfp_in2 => min_4,  -- single
              nfp_out1 => out0_5
              );

  u_nfp_relop_comp_6 : Test_FCS_MPC_3Phase_SPMSM_IP_Core_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => J(7),  -- single
              nfp_in2 => min_5,  -- single
              nfp_out1 => out0_6
              );

  J_0 <= J(0);

  J_1 <= J(1);

  
  min <= J_0 WHEN out0 = '0' ELSE
      J_1;

  J_2 <= J(2);

  
  min_1 <= min WHEN out0_1 = '0' ELSE
      J_2;

  J_3 <= J(3);

  
  min_2 <= min_1 WHEN out0_2 = '0' ELSE
      J_3;

  J_4 <= J(4);

  
  min_3 <= min_2 WHEN out0_3 = '0' ELSE
      J_4;

  J_5 <= J(5);

  
  min_4 <= min_3 WHEN out0_4 = '0' ELSE
      J_5;

  J_6 <= J(6);

  
  min_5 <= min_4 WHEN out0_5 = '0' ELSE
      J_6;

  I_1 <= to_signed(1, 32);

  I_2 <= to_signed(2, 32);

  
  I_3 <= I_1 WHEN out0 = '0' ELSE
      I_2;

  I_4 <= to_signed(3, 32);

  
  I_5 <= I_3 WHEN out0_1 = '0' ELSE
      I_4;

  I_6 <= to_signed(4, 32);

  
  I_7 <= I_5 WHEN out0_2 = '0' ELSE
      I_6;

  I_8 <= to_signed(5, 32);

  
  I_9 <= I_7 WHEN out0_3 = '0' ELSE
      I_8;

  I_10 <= to_signed(6, 32);

  
  I_11 <= I_9 WHEN out0_4 = '0' ELSE
      I_10;

  I_12 <= to_signed(7, 32);

  
  I_13 <= I_11 WHEN out0_5 = '0' ELSE
      I_12;

  I_14 <= to_signed(8, 32);

  
  I_tmp <= I_13 WHEN out0_6 = '0' ELSE
      I_14;

  I <= std_logic_vector(I_tmp);

  v_opt_1(0) <= X"00000000";
  v_opt_1(1) <= X"00000000";

  -- Ausgabe der ermittelten Spannungen (alpha/beta) vk
  Selector4_output : PROCESS (I_tmp, v)
  BEGIN
    out0_7 <= v(0, 7);
    IF I_tmp = to_signed(7, 32) THEN 
      out0_7 <= v(0, 6);
    END IF;
    IF I_tmp = to_signed(6, 32) THEN 
      out0_7 <= v(0, 5);
    END IF;
    IF I_tmp = to_signed(5, 32) THEN 
      out0_7 <= v(0, 4);
    END IF;
    IF I_tmp = to_signed(4, 32) THEN 
      out0_7 <= v(0, 3);
    END IF;
    IF I_tmp = to_signed(3, 32) THEN 
      out0_7 <= v(0, 2);
    END IF;
    IF I_tmp = to_signed(2, 32) THEN 
      out0_7 <= v(0, 1);
    END IF;
    IF I_tmp = to_signed(1, 32) THEN 
      out0_7 <= v(0, 0);
    END IF;
  END PROCESS Selector4_output;


  v_opt_2(0) <= out0_7;
  v_opt_2(1) <= v_opt_1(1);

  Selector1_output : PROCESS (I_tmp, v)
  BEGIN
    out0_8 <= v(1, 7);
    IF I_tmp = to_signed(7, 32) THEN 
      out0_8 <= v(1, 6);
    END IF;
    IF I_tmp = to_signed(6, 32) THEN 
      out0_8 <= v(1, 5);
    END IF;
    IF I_tmp = to_signed(5, 32) THEN 
      out0_8 <= v(1, 4);
    END IF;
    IF I_tmp = to_signed(4, 32) THEN 
      out0_8 <= v(1, 3);
    END IF;
    IF I_tmp = to_signed(3, 32) THEN 
      out0_8 <= v(1, 2);
    END IF;
    IF I_tmp = to_signed(2, 32) THEN 
      out0_8 <= v(1, 1);
    END IF;
    IF I_tmp = to_signed(1, 32) THEN 
      out0_8 <= v(1, 0);
    END IF;
  END PROCESS Selector1_output;


  v_opt_3(0) <= v_opt_2(0);
  v_opt_3(1) <= out0_8;

  v_opt <= v_opt_3;

END rtl;

