-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\uz_axi_mytestIP\hdl_prj\hdlsrc\uz_axi_mytestIP\uz_axi_my_ip_dut.vhd
-- Created: 2022-05-12 15:37:14
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_axi_my_ip_dut
-- Source Path: uz_axi_my_ip/uz_axi_my_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_axi_my_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        A_int32                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        B_int32                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        A_uint32                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        B_uint32                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        In5                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
        In6                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
        ce_out                            :   OUT   std_logic;  -- ufix1
        C_int32                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        C_uint32                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        Out3                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En5
        );
END uz_axi_my_ip_dut;


ARCHITECTURE rtl OF uz_axi_my_ip_dut IS

  -- Component Declarations
  COMPONENT uz_axi_my_ip_src_uz_axi_mytestIP
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          A_int32                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          B_int32                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          A_uint32                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          B_uint32                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          In5                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
          In6                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
          ce_out                          :   OUT   std_logic;  -- ufix1
          C_int32                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          C_uint32                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          Out3                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En5
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_axi_my_ip_src_uz_axi_mytestIP
    USE ENTITY work.uz_axi_my_ip_src_uz_axi_mytestIP(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL C_int32_sig                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL C_uint32_sig                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out3_sig                         : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_uz_axi_my_ip_src_uz_axi_mytestIP : uz_axi_my_ip_src_uz_axi_mytestIP
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              A_int32 => A_int32,  -- sfix32
              B_int32 => B_int32,  -- sfix32
              A_uint32 => A_uint32,  -- ufix32
              B_uint32 => B_uint32,  -- ufix32
              In5 => In5,  -- sfix16_En5
              In6 => In6,  -- sfix16_En5
              ce_out => ce_out_sig,  -- ufix1
              C_int32 => C_int32_sig,  -- sfix32
              C_uint32 => C_uint32_sig,  -- ufix32
              Out3 => Out3_sig  -- sfix16_En5
              );

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  C_int32 <= C_int32_sig;

  C_uint32 <= C_uint32_sig;

  Out3 <= Out3_sig;

END rtl;

