-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\VSD_6ph_30deg_HDL\VSD_6ph_ip_src_VSD_6ph_30deg.vhd
-- Created: 2022-08-09 15:35:55
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: VSD_6ph_ip_src_VSD_6ph_30deg
-- Source Path: VSD_6ph_30deg_HDL/uz_vsd_6ph_30deg/VSD_6ph_30deg
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.VSD_6ph_ip_src_uz_vsd_6ph_30deg_pkg.ALL;

ENTITY VSD_6ph_ip_src_VSD_6ph_30deg IS
  PORT( a1                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        b1                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c1                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        a2                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        b2                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c2                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        alpha                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        beta                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        x1                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        y1                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        z1                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        z2                                :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
        );
END VSD_6ph_ip_src_VSD_6ph_30deg;


ARCHITECTURE rtl OF VSD_6ph_ip_src_VSD_6ph_30deg IS

  -- Constants
  CONSTANT a                              : matrix_of_signed18(0 TO 5, 0 TO 5) := 
    (( to_signed(16#15555#, 18), to_signed(-16#0AAAB#, 18), to_signed(-16#0AAAB#, 18), to_signed(16#1279A#, 18),
     to_signed(-16#1279A#, 18), to_signed(16#00000#, 18) ), ( to_signed(16#00000#, 18), to_signed(16#1279A#, 18),
     to_signed(-16#1279A#, 18), to_signed(16#0AAAB#, 18), to_signed(16#0AAAB#, 18), to_signed(-16#15555#, 18) ),
     ( to_signed(16#15555#, 18), to_signed(-16#0AAAB#, 18), to_signed(-16#0AAAB#, 18), to_signed(-16#1279A#, 18),
     to_signed(16#1279A#, 18), to_signed(16#00000#, 18) ), ( to_signed(16#00000#, 18), to_signed(-16#1279A#, 18),
     to_signed(16#1279A#, 18), to_signed(16#0AAAB#, 18), to_signed(16#0AAAB#, 18), to_signed(-16#15555#, 18) ),
     ( to_signed(16#0AAAB#, 18), to_signed(16#0AAAB#, 18), to_signed(16#0AAAB#, 18), to_signed(16#00000#, 18),
     to_signed(16#00000#, 18), to_signed(16#00000#, 18) ), ( to_signed(16#00000#, 18), to_signed(16#00000#, 18),
     to_signed(16#00000#, 18), to_signed(16#0AAAB#, 18), to_signed(16#0AAAB#, 18), to_signed(16#0AAAB#, 18) ));  -- sfix18 [6x6]

  -- Signals
  SIGNAL a1_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL b1_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL c1_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL a2_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL b2_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL c2_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL alpha_tmp                        : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL beta_tmp                         : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL x1_tmp                           : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL y1_tmp                           : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL z1_tmp                           : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL z2_tmp                           : signed(17 DOWNTO 0);  -- sfix18_En11

BEGIN
  a1_signed <= signed(a1);

  b1_signed <= signed(b1);

  c1_signed <= signed(c1);

  a2_signed <= signed(a2);

  b2_signed <= signed(b2);

  c2_signed <= signed(c2);

  VSD_6ph_30deg_output : PROCESS (a1_signed, a2_signed, b1_signed, b2_signed, c1_signed, c2_signed)
    VARIABLE y : vector_of_signed18(0 TO 5);
    VARIABLE prodAB : signed(35 DOWNTO 0);
    VARIABLE c : vector_of_signed39(0 TO 5);
    VARIABLE add_cast : vector_of_signed40(0 TO 5);
    VARIABLE add_cast_0 : vector_of_signed40(0 TO 5);
    VARIABLE add_temp : vector_of_signed40(0 TO 5);
  BEGIN
    prodAB := to_signed(0, 36);
    --MATLAB Function 'uz_vsd_6ph_30deg/VSD_6ph_30deg'
    y(0) := a1_signed;
    y(1) := b1_signed;
    y(2) := c1_signed;
    y(3) := a2_signed;
    y(4) := b2_signed;
    y(5) := c2_signed;

    FOR l IN 0 TO 5 LOOP
      c(l) := to_signed(0, 39);

      FOR k IN 0 TO 5 LOOP
        prodAB := a(l, k) * y(k);
        add_cast(k) := resize(c(l), 40);
        add_cast_0(k) := resize(prodAB, 40);
        add_temp(k) := add_cast(k) + add_cast_0(k);
        IF (add_temp(k)(39) = '0') AND (add_temp(k)(38) /= '0') THEN 
          c(l) := "011111111111111111111111111111111111111";
        ELSIF (add_temp(k)(39) = '1') AND (add_temp(k)(38) /= '1') THEN 
          c(l) := "100000000000000000000000000000000000000";
        ELSE 
          c(l) := add_temp(k)(38 DOWNTO 0);
        END IF;
      END LOOP;

    END LOOP;

    alpha_tmp <= (resize(c(0)(38 DOWNTO 22), 18)) + ('0' & c(0)(21));
    beta_tmp <= (resize(c(1)(38 DOWNTO 22), 18)) + ('0' & c(1)(21));
    x1_tmp <= (resize(c(2)(38 DOWNTO 22), 18)) + ('0' & c(2)(21));
    y1_tmp <= (resize(c(3)(38 DOWNTO 22), 18)) + ('0' & c(3)(21));
    z1_tmp <= (resize(c(4)(38 DOWNTO 22), 18)) + ('0' & c(4)(21));
    z2_tmp <= (resize(c(5)(38 DOWNTO 22), 18)) + ('0' & c(5)(21));
  END PROCESS VSD_6ph_30deg_output;


  alpha <= std_logic_vector(alpha_tmp);

  beta <= std_logic_vector(beta_tmp);

  x1 <= std_logic_vector(x1_tmp);

  y1 <= std_logic_vector(y1_tmp);

  z1 <= std_logic_vector(z1_tmp);

  z2 <= std_logic_vector(z2_tmp);

END rtl;

