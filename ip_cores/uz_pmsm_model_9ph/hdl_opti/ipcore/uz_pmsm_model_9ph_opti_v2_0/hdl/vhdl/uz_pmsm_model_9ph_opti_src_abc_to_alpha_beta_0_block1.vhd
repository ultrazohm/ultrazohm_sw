-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block1.vhd
-- Created: 2022-05-18 16:47:48
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block1
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph/Line-Line to Phase voltage2/abc   to   alpha_beta_0
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        a_b_c                             :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
        alpha_beta_0                      :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
        );
END uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block1;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_src_abc_to_alpha_beta_0_block1 IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_add_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_add_single(rtl);

  -- Signals
  SIGNAL c7_kconst                        : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL kconst                           : matrix_of_std_logic_vector32(0 TO 2, 0 TO 2);  -- ufix32 [3x3]
  SIGNAL s                                : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL selector_out                     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL s_1                              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL selector_out_1                   : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL s_2                              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL MMul_dot_product_out             : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL reshape_out                      : matrix_of_std_logic_vector32(0 TO 2, 0 TO 2);  -- ufix32 [3x3]
  SIGNAL selector_out_2                   : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL selector_out_3                   : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL nfp_out_1_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL selector_out_4                   : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL selector_out_0                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL selector_out_1_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL selector_out_2_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch_out_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch_1_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch_out_2                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch_out_3                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch_1_reg_1               : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch_1_reg_2               : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch_1_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch_1_reg_next_1          : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch_1_reg_next_2          : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL nfp_out_2_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_3_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_3                              : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Gain4_out1                       : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL kconst_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch1_out_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch1_1_reg                : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch1_out_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch1_out_3                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch1_1_reg_1              : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch1_1_reg_2              : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch1_1_reg_next           : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch1_1_reg_next_1         : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch1_1_reg_next_2         : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL Gain2_out1                       : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]

BEGIN
  u_nfp_mul_comp : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(0),  -- single
              nfp_in2 => s_2(0),  -- single
              nfp_out => MMul_dot_product_out(0)  -- single
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(1),  -- single
              nfp_in2 => s_2(1),  -- single
              nfp_out => MMul_dot_product_out(1)  -- single
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(2),  -- single
              nfp_in2 => s_2(2),  -- single
              nfp_out => MMul_dot_product_out(2)  -- single
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(3),  -- single
              nfp_in2 => s_2(3),  -- single
              nfp_out => MMul_dot_product_out(3)  -- single
              );

  u_nfp_mul_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(4),  -- single
              nfp_in2 => s_2(4),  -- single
              nfp_out => MMul_dot_product_out(4)  -- single
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(5),  -- single
              nfp_in2 => s_2(5),  -- single
              nfp_out => MMul_dot_product_out(5)  -- single
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(6),  -- single
              nfp_in2 => s_2(6),  -- single
              nfp_out => MMul_dot_product_out(6)  -- single
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(7),  -- single
              nfp_in2 => s_2(7),  -- single
              nfp_out => MMul_dot_product_out(7)  -- single
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => s_1(8),  -- single
              nfp_in2 => s_2(8),  -- single
              nfp_out => MMul_dot_product_out(8)  -- single
              );

  u_nfp_add_comp : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => selector_out_2(0),  -- single
              nfp_in2 => selector_out_3(0),  -- single
              nfp_out => nfp_out_1_1_1  -- single
              );

  u_nfp_add_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => nfp_out_1_1_1,  -- single
              nfp_in2 => delayMatch_out_1,  -- single
              nfp_out => s_3(0)  -- single
              );

  u_nfp_add_comp_2 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => selector_out_2(1),  -- single
              nfp_in2 => selector_out_3(1),  -- single
              nfp_out => nfp_out_2_1_1  -- single
              );

  u_nfp_add_comp_3 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => nfp_out_2_1_1,  -- single
              nfp_in2 => delayMatch_out_2,  -- single
              nfp_out => s_3(1)  -- single
              );

  u_nfp_add_comp_4 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => selector_out_2(2),  -- single
              nfp_in2 => selector_out_3(2),  -- single
              nfp_out => nfp_out_3_1_1  -- single
              );

  u_nfp_add_comp_5 : uz_pmsm_model_9ph_opti_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => nfp_out_3_1_1,  -- single
              nfp_in2 => delayMatch_out_3,  -- single
              nfp_out => s_3(2)  -- single
              );

  u_nfp_mul_comp_9 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain4_out1(0),  -- single
              nfp_in2 => delayMatch1_out_1,  -- single
              nfp_out => Gain2_out1(0)  -- single
              );

  u_nfp_mul_comp_10 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain4_out1(1),  -- single
              nfp_in2 => delayMatch1_out_2,  -- single
              nfp_out => Gain2_out1(1)  -- single
              );

  u_nfp_mul_comp_11 : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain4_out1(2),  -- single
              nfp_in2 => delayMatch1_out_3,  -- single
              nfp_out => Gain2_out1(2)  -- single
              );

  c7_kconst(0) <= X"3f800000";
  c7_kconst(1) <= X"00000000";
  c7_kconst(2) <= X"3f000000";
  c7_kconst(3) <= X"bf000000";
  c7_kconst(4) <= X"3f5db3d7";
  c7_kconst(5) <= X"3f000000";
  c7_kconst(6) <= X"bf000000";
  c7_kconst(7) <= X"bf5db3d7";
  c7_kconst(8) <= X"3f000000";

  kconstGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    kconstGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      kconst(d0, d1) <= c7_kconst(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  sGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    sGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      s(d0 + (d1 * 3)) <= kconst(d0, d1);
    END GENERATE;
  END GENERATE;

  selector_out(0) <= s(0);
  selector_out(1) <= s(3);
  selector_out(2) <= s(6);
  selector_out(3) <= s(1);
  selector_out(4) <= s(4);
  selector_out(5) <= s(7);
  selector_out(6) <= s(2);
  selector_out(7) <= s(5);
  selector_out(8) <= s(8);

  s_1GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_1(d0) <= selector_out(d0);
  END GENERATE;

  selector_out_1(0) <= a_b_c(0);
  selector_out_1(1) <= a_b_c(1);
  selector_out_1(2) <= a_b_c(2);
  selector_out_1(3) <= a_b_c(0);
  selector_out_1(4) <= a_b_c(1);
  selector_out_1(5) <= a_b_c(2);
  selector_out_1(6) <= a_b_c(0);
  selector_out_1(7) <= a_b_c(1);
  selector_out_1(8) <= a_b_c(2);

  s_2GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_2(d0) <= selector_out_1(d0);
  END GENERATE;


  reshape_outGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    reshape_outGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      reshape_out(d0, d1) <= MMul_dot_product_out(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  select_0_output : PROCESS (reshape_out)
  BEGIN
    selector_out_2(0) <= reshape_out(0, 0);
    selector_out_2(1) <= reshape_out(0, 1);
    selector_out_2(2) <= reshape_out(0, 2);
  END PROCESS select_0_output;


  select_1_output : PROCESS (reshape_out)
  BEGIN
    selector_out_3(0) <= reshape_out(1, 0);
    selector_out_3(1) <= reshape_out(1, 1);
    selector_out_3(2) <= reshape_out(1, 2);
  END PROCESS select_1_output;


  select_2_output : PROCESS (reshape_out)
  BEGIN
    selector_out_4(0) <= reshape_out(2, 0);
    selector_out_4(1) <= reshape_out(2, 1);
    selector_out_4(2) <= reshape_out(2, 2);
  END PROCESS select_2_output;


  selector_out_0 <= selector_out_4(0);

  delayMatch_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_1_reg(0) <= X"00000000";
        delayMatch_1_reg(1) <= X"00000000";
        delayMatch_1_reg(2) <= X"00000000";
        delayMatch_1_reg(3) <= X"00000000";
        delayMatch_1_reg(4) <= X"00000000";
        delayMatch_1_reg(5) <= X"00000000";
        delayMatch_1_reg_1(0) <= X"00000000";
        delayMatch_1_reg_1(1) <= X"00000000";
        delayMatch_1_reg_1(2) <= X"00000000";
        delayMatch_1_reg_1(3) <= X"00000000";
        delayMatch_1_reg_1(4) <= X"00000000";
        delayMatch_1_reg_1(5) <= X"00000000";
        delayMatch_1_reg_2(0) <= X"00000000";
        delayMatch_1_reg_2(1) <= X"00000000";
        delayMatch_1_reg_2(2) <= X"00000000";
        delayMatch_1_reg_2(3) <= X"00000000";
        delayMatch_1_reg_2(4) <= X"00000000";
        delayMatch_1_reg_2(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch_1_reg(0) <= delayMatch_1_reg_next(0);
        delayMatch_1_reg(1) <= delayMatch_1_reg_next(1);
        delayMatch_1_reg(2) <= delayMatch_1_reg_next(2);
        delayMatch_1_reg(3) <= delayMatch_1_reg_next(3);
        delayMatch_1_reg(4) <= delayMatch_1_reg_next(4);
        delayMatch_1_reg(5) <= delayMatch_1_reg_next(5);
        delayMatch_1_reg_1(0) <= delayMatch_1_reg_next_1(0);
        delayMatch_1_reg_1(1) <= delayMatch_1_reg_next_1(1);
        delayMatch_1_reg_1(2) <= delayMatch_1_reg_next_1(2);
        delayMatch_1_reg_1(3) <= delayMatch_1_reg_next_1(3);
        delayMatch_1_reg_1(4) <= delayMatch_1_reg_next_1(4);
        delayMatch_1_reg_1(5) <= delayMatch_1_reg_next_1(5);
        delayMatch_1_reg_2(0) <= delayMatch_1_reg_next_2(0);
        delayMatch_1_reg_2(1) <= delayMatch_1_reg_next_2(1);
        delayMatch_1_reg_2(2) <= delayMatch_1_reg_next_2(2);
        delayMatch_1_reg_2(3) <= delayMatch_1_reg_next_2(3);
        delayMatch_1_reg_2(4) <= delayMatch_1_reg_next_2(4);
        delayMatch_1_reg_2(5) <= delayMatch_1_reg_next_2(5);
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;

  delayMatch_1_reg_next(0) <= selector_out_0;
  delayMatch_1_reg_next(1) <= delayMatch_1_reg(0);
  delayMatch_1_reg_next(2) <= delayMatch_1_reg(1);
  delayMatch_1_reg_next(3) <= delayMatch_1_reg(2);
  delayMatch_1_reg_next(4) <= delayMatch_1_reg(3);
  delayMatch_1_reg_next(5) <= delayMatch_1_reg(4);
  delayMatch_out_1 <= delayMatch_1_reg(5);
  delayMatch_1_reg_next_1(0) <= selector_out_1_1;
  delayMatch_1_reg_next_1(1) <= delayMatch_1_reg_1(0);
  delayMatch_1_reg_next_1(2) <= delayMatch_1_reg_1(1);
  delayMatch_1_reg_next_1(3) <= delayMatch_1_reg_1(2);
  delayMatch_1_reg_next_1(4) <= delayMatch_1_reg_1(3);
  delayMatch_1_reg_next_1(5) <= delayMatch_1_reg_1(4);
  delayMatch_out_2 <= delayMatch_1_reg_1(5);
  delayMatch_1_reg_next_2(0) <= selector_out_2_1;
  delayMatch_1_reg_next_2(1) <= delayMatch_1_reg_2(0);
  delayMatch_1_reg_next_2(2) <= delayMatch_1_reg_2(1);
  delayMatch_1_reg_next_2(3) <= delayMatch_1_reg_2(2);
  delayMatch_1_reg_next_2(4) <= delayMatch_1_reg_2(3);
  delayMatch_1_reg_next_2(5) <= delayMatch_1_reg_2(4);
  delayMatch_out_3 <= delayMatch_1_reg_2(5);

  selector_out_1_1 <= selector_out_4(1);

  selector_out_2_1 <= selector_out_4(2);


  Gain4_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
    Gain4_out1(d0) <= s_3(d0);
  END GENERATE;

  kconst_1 <= X"3f2aaaab";

  delayMatch1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_1_reg(0) <= X"00000000";
        delayMatch1_1_reg(1) <= X"00000000";
        delayMatch1_1_reg(2) <= X"00000000";
        delayMatch1_1_reg(3) <= X"00000000";
        delayMatch1_1_reg(4) <= X"00000000";
        delayMatch1_1_reg(5) <= X"00000000";
        delayMatch1_1_reg(6) <= X"00000000";
        delayMatch1_1_reg(7) <= X"00000000";
        delayMatch1_1_reg(8) <= X"00000000";
        delayMatch1_1_reg(9) <= X"00000000";
        delayMatch1_1_reg(10) <= X"00000000";
        delayMatch1_1_reg(11) <= X"00000000";
        delayMatch1_1_reg(12) <= X"00000000";
        delayMatch1_1_reg(13) <= X"00000000";
        delayMatch1_1_reg(14) <= X"00000000";
        delayMatch1_1_reg(15) <= X"00000000";
        delayMatch1_1_reg(16) <= X"00000000";
        delayMatch1_1_reg(17) <= X"00000000";
        delayMatch1_1_reg_1(0) <= X"00000000";
        delayMatch1_1_reg_1(1) <= X"00000000";
        delayMatch1_1_reg_1(2) <= X"00000000";
        delayMatch1_1_reg_1(3) <= X"00000000";
        delayMatch1_1_reg_1(4) <= X"00000000";
        delayMatch1_1_reg_1(5) <= X"00000000";
        delayMatch1_1_reg_1(6) <= X"00000000";
        delayMatch1_1_reg_1(7) <= X"00000000";
        delayMatch1_1_reg_1(8) <= X"00000000";
        delayMatch1_1_reg_1(9) <= X"00000000";
        delayMatch1_1_reg_1(10) <= X"00000000";
        delayMatch1_1_reg_1(11) <= X"00000000";
        delayMatch1_1_reg_1(12) <= X"00000000";
        delayMatch1_1_reg_1(13) <= X"00000000";
        delayMatch1_1_reg_1(14) <= X"00000000";
        delayMatch1_1_reg_1(15) <= X"00000000";
        delayMatch1_1_reg_1(16) <= X"00000000";
        delayMatch1_1_reg_1(17) <= X"00000000";
        delayMatch1_1_reg_2(0) <= X"00000000";
        delayMatch1_1_reg_2(1) <= X"00000000";
        delayMatch1_1_reg_2(2) <= X"00000000";
        delayMatch1_1_reg_2(3) <= X"00000000";
        delayMatch1_1_reg_2(4) <= X"00000000";
        delayMatch1_1_reg_2(5) <= X"00000000";
        delayMatch1_1_reg_2(6) <= X"00000000";
        delayMatch1_1_reg_2(7) <= X"00000000";
        delayMatch1_1_reg_2(8) <= X"00000000";
        delayMatch1_1_reg_2(9) <= X"00000000";
        delayMatch1_1_reg_2(10) <= X"00000000";
        delayMatch1_1_reg_2(11) <= X"00000000";
        delayMatch1_1_reg_2(12) <= X"00000000";
        delayMatch1_1_reg_2(13) <= X"00000000";
        delayMatch1_1_reg_2(14) <= X"00000000";
        delayMatch1_1_reg_2(15) <= X"00000000";
        delayMatch1_1_reg_2(16) <= X"00000000";
        delayMatch1_1_reg_2(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch1_1_reg(0) <= delayMatch1_1_reg_next(0);
        delayMatch1_1_reg(1) <= delayMatch1_1_reg_next(1);
        delayMatch1_1_reg(2) <= delayMatch1_1_reg_next(2);
        delayMatch1_1_reg(3) <= delayMatch1_1_reg_next(3);
        delayMatch1_1_reg(4) <= delayMatch1_1_reg_next(4);
        delayMatch1_1_reg(5) <= delayMatch1_1_reg_next(5);
        delayMatch1_1_reg(6) <= delayMatch1_1_reg_next(6);
        delayMatch1_1_reg(7) <= delayMatch1_1_reg_next(7);
        delayMatch1_1_reg(8) <= delayMatch1_1_reg_next(8);
        delayMatch1_1_reg(9) <= delayMatch1_1_reg_next(9);
        delayMatch1_1_reg(10) <= delayMatch1_1_reg_next(10);
        delayMatch1_1_reg(11) <= delayMatch1_1_reg_next(11);
        delayMatch1_1_reg(12) <= delayMatch1_1_reg_next(12);
        delayMatch1_1_reg(13) <= delayMatch1_1_reg_next(13);
        delayMatch1_1_reg(14) <= delayMatch1_1_reg_next(14);
        delayMatch1_1_reg(15) <= delayMatch1_1_reg_next(15);
        delayMatch1_1_reg(16) <= delayMatch1_1_reg_next(16);
        delayMatch1_1_reg(17) <= delayMatch1_1_reg_next(17);
        delayMatch1_1_reg_1(0) <= delayMatch1_1_reg_next_1(0);
        delayMatch1_1_reg_1(1) <= delayMatch1_1_reg_next_1(1);
        delayMatch1_1_reg_1(2) <= delayMatch1_1_reg_next_1(2);
        delayMatch1_1_reg_1(3) <= delayMatch1_1_reg_next_1(3);
        delayMatch1_1_reg_1(4) <= delayMatch1_1_reg_next_1(4);
        delayMatch1_1_reg_1(5) <= delayMatch1_1_reg_next_1(5);
        delayMatch1_1_reg_1(6) <= delayMatch1_1_reg_next_1(6);
        delayMatch1_1_reg_1(7) <= delayMatch1_1_reg_next_1(7);
        delayMatch1_1_reg_1(8) <= delayMatch1_1_reg_next_1(8);
        delayMatch1_1_reg_1(9) <= delayMatch1_1_reg_next_1(9);
        delayMatch1_1_reg_1(10) <= delayMatch1_1_reg_next_1(10);
        delayMatch1_1_reg_1(11) <= delayMatch1_1_reg_next_1(11);
        delayMatch1_1_reg_1(12) <= delayMatch1_1_reg_next_1(12);
        delayMatch1_1_reg_1(13) <= delayMatch1_1_reg_next_1(13);
        delayMatch1_1_reg_1(14) <= delayMatch1_1_reg_next_1(14);
        delayMatch1_1_reg_1(15) <= delayMatch1_1_reg_next_1(15);
        delayMatch1_1_reg_1(16) <= delayMatch1_1_reg_next_1(16);
        delayMatch1_1_reg_1(17) <= delayMatch1_1_reg_next_1(17);
        delayMatch1_1_reg_2(0) <= delayMatch1_1_reg_next_2(0);
        delayMatch1_1_reg_2(1) <= delayMatch1_1_reg_next_2(1);
        delayMatch1_1_reg_2(2) <= delayMatch1_1_reg_next_2(2);
        delayMatch1_1_reg_2(3) <= delayMatch1_1_reg_next_2(3);
        delayMatch1_1_reg_2(4) <= delayMatch1_1_reg_next_2(4);
        delayMatch1_1_reg_2(5) <= delayMatch1_1_reg_next_2(5);
        delayMatch1_1_reg_2(6) <= delayMatch1_1_reg_next_2(6);
        delayMatch1_1_reg_2(7) <= delayMatch1_1_reg_next_2(7);
        delayMatch1_1_reg_2(8) <= delayMatch1_1_reg_next_2(8);
        delayMatch1_1_reg_2(9) <= delayMatch1_1_reg_next_2(9);
        delayMatch1_1_reg_2(10) <= delayMatch1_1_reg_next_2(10);
        delayMatch1_1_reg_2(11) <= delayMatch1_1_reg_next_2(11);
        delayMatch1_1_reg_2(12) <= delayMatch1_1_reg_next_2(12);
        delayMatch1_1_reg_2(13) <= delayMatch1_1_reg_next_2(13);
        delayMatch1_1_reg_2(14) <= delayMatch1_1_reg_next_2(14);
        delayMatch1_1_reg_2(15) <= delayMatch1_1_reg_next_2(15);
        delayMatch1_1_reg_2(16) <= delayMatch1_1_reg_next_2(16);
        delayMatch1_1_reg_2(17) <= delayMatch1_1_reg_next_2(17);
      END IF;
    END IF;
  END PROCESS delayMatch1_1_process;

  delayMatch1_1_reg_next(0) <= kconst_1;
  delayMatch1_1_reg_next(1) <= delayMatch1_1_reg(0);
  delayMatch1_1_reg_next(2) <= delayMatch1_1_reg(1);
  delayMatch1_1_reg_next(3) <= delayMatch1_1_reg(2);
  delayMatch1_1_reg_next(4) <= delayMatch1_1_reg(3);
  delayMatch1_1_reg_next(5) <= delayMatch1_1_reg(4);
  delayMatch1_1_reg_next(6) <= delayMatch1_1_reg(5);
  delayMatch1_1_reg_next(7) <= delayMatch1_1_reg(6);
  delayMatch1_1_reg_next(8) <= delayMatch1_1_reg(7);
  delayMatch1_1_reg_next(9) <= delayMatch1_1_reg(8);
  delayMatch1_1_reg_next(10) <= delayMatch1_1_reg(9);
  delayMatch1_1_reg_next(11) <= delayMatch1_1_reg(10);
  delayMatch1_1_reg_next(12) <= delayMatch1_1_reg(11);
  delayMatch1_1_reg_next(13) <= delayMatch1_1_reg(12);
  delayMatch1_1_reg_next(14) <= delayMatch1_1_reg(13);
  delayMatch1_1_reg_next(15) <= delayMatch1_1_reg(14);
  delayMatch1_1_reg_next(16) <= delayMatch1_1_reg(15);
  delayMatch1_1_reg_next(17) <= delayMatch1_1_reg(16);
  delayMatch1_out_1 <= delayMatch1_1_reg(17);
  delayMatch1_1_reg_next_1(0) <= kconst_1;
  delayMatch1_1_reg_next_1(1) <= delayMatch1_1_reg_1(0);
  delayMatch1_1_reg_next_1(2) <= delayMatch1_1_reg_1(1);
  delayMatch1_1_reg_next_1(3) <= delayMatch1_1_reg_1(2);
  delayMatch1_1_reg_next_1(4) <= delayMatch1_1_reg_1(3);
  delayMatch1_1_reg_next_1(5) <= delayMatch1_1_reg_1(4);
  delayMatch1_1_reg_next_1(6) <= delayMatch1_1_reg_1(5);
  delayMatch1_1_reg_next_1(7) <= delayMatch1_1_reg_1(6);
  delayMatch1_1_reg_next_1(8) <= delayMatch1_1_reg_1(7);
  delayMatch1_1_reg_next_1(9) <= delayMatch1_1_reg_1(8);
  delayMatch1_1_reg_next_1(10) <= delayMatch1_1_reg_1(9);
  delayMatch1_1_reg_next_1(11) <= delayMatch1_1_reg_1(10);
  delayMatch1_1_reg_next_1(12) <= delayMatch1_1_reg_1(11);
  delayMatch1_1_reg_next_1(13) <= delayMatch1_1_reg_1(12);
  delayMatch1_1_reg_next_1(14) <= delayMatch1_1_reg_1(13);
  delayMatch1_1_reg_next_1(15) <= delayMatch1_1_reg_1(14);
  delayMatch1_1_reg_next_1(16) <= delayMatch1_1_reg_1(15);
  delayMatch1_1_reg_next_1(17) <= delayMatch1_1_reg_1(16);
  delayMatch1_out_2 <= delayMatch1_1_reg_1(17);
  delayMatch1_1_reg_next_2(0) <= kconst_1;
  delayMatch1_1_reg_next_2(1) <= delayMatch1_1_reg_2(0);
  delayMatch1_1_reg_next_2(2) <= delayMatch1_1_reg_2(1);
  delayMatch1_1_reg_next_2(3) <= delayMatch1_1_reg_2(2);
  delayMatch1_1_reg_next_2(4) <= delayMatch1_1_reg_2(3);
  delayMatch1_1_reg_next_2(5) <= delayMatch1_1_reg_2(4);
  delayMatch1_1_reg_next_2(6) <= delayMatch1_1_reg_2(5);
  delayMatch1_1_reg_next_2(7) <= delayMatch1_1_reg_2(6);
  delayMatch1_1_reg_next_2(8) <= delayMatch1_1_reg_2(7);
  delayMatch1_1_reg_next_2(9) <= delayMatch1_1_reg_2(8);
  delayMatch1_1_reg_next_2(10) <= delayMatch1_1_reg_2(9);
  delayMatch1_1_reg_next_2(11) <= delayMatch1_1_reg_2(10);
  delayMatch1_1_reg_next_2(12) <= delayMatch1_1_reg_2(11);
  delayMatch1_1_reg_next_2(13) <= delayMatch1_1_reg_2(12);
  delayMatch1_1_reg_next_2(14) <= delayMatch1_1_reg_2(13);
  delayMatch1_1_reg_next_2(15) <= delayMatch1_1_reg_2(14);
  delayMatch1_1_reg_next_2(16) <= delayMatch1_1_reg_2(15);
  delayMatch1_1_reg_next_2(17) <= delayMatch1_1_reg_2(16);
  delayMatch1_out_3 <= delayMatch1_1_reg_2(17);


  alpha_beta_0 <= Gain2_out1;

END rtl;

