-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/uz_dac_spi_interface/uz_dac_spi_interface.vhd
-- Created: 2022-05-17 10:01:01
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_dac_spi_interface
-- Source Path: uz_dac_spi_interface
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_dac_spi_interface IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_ACLK                         :   IN    std_logic;  -- ufix1
        AXI4_ARESETN                      :   IN    std_logic;  -- ufix1
        AXI4_AWID                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_AWADDR                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_AWLEN                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_AWSIZE                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_AWBURST                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_AWLOCK                       :   IN    std_logic;  -- ufix1
        AXI4_AWCACHE                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_AWPROT                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_AWVALID                      :   IN    std_logic;  -- ufix1
        AXI4_WDATA                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_WSTRB                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_WLAST                        :   IN    std_logic;  -- ufix1
        AXI4_WVALID                       :   IN    std_logic;  -- ufix1
        AXI4_BREADY                       :   IN    std_logic;  -- ufix1
        AXI4_ARID                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_ARADDR                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_ARLEN                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_ARSIZE                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_ARBURST                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_ARLOCK                       :   IN    std_logic;  -- ufix1
        AXI4_ARCACHE                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_ARPROT                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_ARVALID                      :   IN    std_logic;  -- ufix1
        AXI4_RREADY                       :   IN    std_logic;  -- ufix1
        spi_clk_out                       :   OUT   std_logic;  -- ufix1
        cs_out                            :   OUT   std_logic;  -- ufix1
        data_out_1                        :   OUT   std_logic;  -- ufix1
        data_out_2                        :   OUT   std_logic;  -- ufix1
        data_out_3                        :   OUT   std_logic;  -- ufix1
        data_out_4                        :   OUT   std_logic;  -- ufix1
        data_out_5                        :   OUT   std_logic;  -- ufix1
        data_out_6                        :   OUT   std_logic;  -- ufix1
        data_out_7                        :   OUT   std_logic;  -- ufix1
        data_out_8                        :   OUT   std_logic;  -- ufix1
        AXI4_AWREADY                      :   OUT   std_logic;  -- ufix1
        AXI4_WREADY                       :   OUT   std_logic;  -- ufix1
        AXI4_BID                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_BRESP                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_BVALID                       :   OUT   std_logic;  -- ufix1
        AXI4_ARREADY                      :   OUT   std_logic;  -- ufix1
        AXI4_RID                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_RDATA                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_RRESP                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_RLAST                        :   OUT   std_logic;  -- ufix1
        AXI4_RVALID                       :   OUT   std_logic  -- ufix1
        );
END uz_dac_spi_interface;


ARCHITECTURE rtl OF uz_dac_spi_interface IS

  -- Component Declarations
  COMPONENT uz_dac_spi_interface_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_dac_spi_interface_axi4
    PORT( reset                           :   IN    std_logic;
          AXI4_ACLK                       :   IN    std_logic;  -- ufix1
          AXI4_ARESETN                    :   IN    std_logic;  -- ufix1
          AXI4_AWID                       :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_AWADDR                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_AWLEN                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_AWSIZE                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_AWBURST                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_AWLOCK                     :   IN    std_logic;  -- ufix1
          AXI4_AWCACHE                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_AWPROT                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_AWVALID                    :   IN    std_logic;  -- ufix1
          AXI4_WDATA                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_WSTRB                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_WLAST                      :   IN    std_logic;  -- ufix1
          AXI4_WVALID                     :   IN    std_logic;  -- ufix1
          AXI4_BREADY                     :   IN    std_logic;  -- ufix1
          AXI4_ARID                       :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_ARADDR                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_ARLEN                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_ARSIZE                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_ARBURST                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_ARLOCK                     :   IN    std_logic;  -- ufix1
          AXI4_ARCACHE                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_ARPROT                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_ARVALID                    :   IN    std_logic;  -- ufix1
          AXI4_RREADY                     :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_AWREADY                    :   OUT   std_logic;  -- ufix1
          AXI4_WREADY                     :   OUT   std_logic;  -- ufix1
          AXI4_BID                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_BRESP                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_BVALID                     :   OUT   std_logic;  -- ufix1
          AXI4_ARREADY                    :   OUT   std_logic;  -- ufix1
          AXI4_RID                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_RDATA                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_RRESP                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_RLAST                      :   OUT   std_logic;  -- ufix1
          AXI4_RVALID                     :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_trigger_write             :   OUT   std_logic;  -- ufix1
          write_dac_data_1                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          write_dac_data_2                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          write_dac_data_3                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          write_dac_data_4                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          write_dac_data_5                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          write_dac_data_6                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          write_dac_data_7                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          write_dac_data_8                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT uz_dac_spi_interface_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          trigger_write                   :   IN    std_logic;  -- ufix1
          dac_data_1                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          dac_data_2                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          dac_data_3                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          dac_data_4                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          dac_data_5                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          dac_data_6                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          dac_data_7                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          dac_data_8                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          ce_out                          :   OUT   std_logic;  -- ufix1
          spi_clk_out                     :   OUT   std_logic;  -- ufix1
          cs_out                          :   OUT   std_logic;  -- ufix1
          data_out_1                      :   OUT   std_logic;  -- ufix1
          data_out_2                      :   OUT   std_logic;  -- ufix1
          data_out_3                      :   OUT   std_logic;  -- ufix1
          data_out_4                      :   OUT   std_logic;  -- ufix1
          data_out_5                      :   OUT   std_logic;  -- ufix1
          data_out_6                      :   OUT   std_logic;  -- ufix1
          data_out_7                      :   OUT   std_logic;  -- ufix1
          data_out_8                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_dac_spi_interface_reset_sync
    USE ENTITY work.uz_dac_spi_interface_reset_sync(rtl);

  FOR ALL : uz_dac_spi_interface_axi4
    USE ENTITY work.uz_dac_spi_interface_axi4(rtl);

  FOR ALL : uz_dac_spi_interface_dut
    USE ENTITY work.uz_dac_spi_interface_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL AXI4_BID_tmp                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL AXI4_BRESP_tmp                   : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_RID_tmp                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL AXI4_RDATA_tmp                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_RRESP_tmp                   : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_trigger_write              : std_logic;  -- ufix1
  SIGNAL write_dac_data_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_dac_data_2                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_dac_data_3                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_dac_data_4                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_dac_data_5                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_dac_data_6                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_dac_data_7                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_dac_data_8                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL spi_clk_out_sig                  : std_logic;  -- ufix1
  SIGNAL cs_out_sig                       : std_logic;  -- ufix1
  SIGNAL data_out_1_sig                   : std_logic;  -- ufix1
  SIGNAL data_out_2_sig                   : std_logic;  -- ufix1
  SIGNAL data_out_3_sig                   : std_logic;  -- ufix1
  SIGNAL data_out_4_sig                   : std_logic;  -- ufix1
  SIGNAL data_out_5_sig                   : std_logic;  -- ufix1
  SIGNAL data_out_6_sig                   : std_logic;  -- ufix1
  SIGNAL data_out_7_sig                   : std_logic;  -- ufix1
  SIGNAL data_out_8_sig                   : std_logic;  -- ufix1

BEGIN
  u_uz_dac_spi_interface_reset_sync_inst : uz_dac_spi_interface_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_uz_dac_spi_interface_axi4_inst : uz_dac_spi_interface_axi4
    PORT MAP( reset => reset,
              AXI4_ACLK => AXI4_ACLK,  -- ufix1
              AXI4_ARESETN => AXI4_ARESETN,  -- ufix1
              AXI4_AWID => AXI4_AWID,  -- ufix12
              AXI4_AWADDR => AXI4_AWADDR,  -- ufix16
              AXI4_AWLEN => AXI4_AWLEN,  -- ufix8
              AXI4_AWSIZE => AXI4_AWSIZE,  -- ufix3
              AXI4_AWBURST => AXI4_AWBURST,  -- ufix2
              AXI4_AWLOCK => AXI4_AWLOCK,  -- ufix1
              AXI4_AWCACHE => AXI4_AWCACHE,  -- ufix4
              AXI4_AWPROT => AXI4_AWPROT,  -- ufix3
              AXI4_AWVALID => AXI4_AWVALID,  -- ufix1
              AXI4_WDATA => AXI4_WDATA,  -- ufix32
              AXI4_WSTRB => AXI4_WSTRB,  -- ufix4
              AXI4_WLAST => AXI4_WLAST,  -- ufix1
              AXI4_WVALID => AXI4_WVALID,  -- ufix1
              AXI4_BREADY => AXI4_BREADY,  -- ufix1
              AXI4_ARID => AXI4_ARID,  -- ufix12
              AXI4_ARADDR => AXI4_ARADDR,  -- ufix16
              AXI4_ARLEN => AXI4_ARLEN,  -- ufix8
              AXI4_ARSIZE => AXI4_ARSIZE,  -- ufix3
              AXI4_ARBURST => AXI4_ARBURST,  -- ufix2
              AXI4_ARLOCK => AXI4_ARLOCK,  -- ufix1
              AXI4_ARCACHE => AXI4_ARCACHE,  -- ufix4
              AXI4_ARPROT => AXI4_ARPROT,  -- ufix3
              AXI4_ARVALID => AXI4_ARVALID,  -- ufix1
              AXI4_RREADY => AXI4_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              AXI4_AWREADY => AXI4_AWREADY,  -- ufix1
              AXI4_WREADY => AXI4_WREADY,  -- ufix1
              AXI4_BID => AXI4_BID_tmp,  -- ufix12
              AXI4_BRESP => AXI4_BRESP_tmp,  -- ufix2
              AXI4_BVALID => AXI4_BVALID,  -- ufix1
              AXI4_ARREADY => AXI4_ARREADY,  -- ufix1
              AXI4_RID => AXI4_RID_tmp,  -- ufix12
              AXI4_RDATA => AXI4_RDATA_tmp,  -- ufix32
              AXI4_RRESP => AXI4_RRESP_tmp,  -- ufix2
              AXI4_RLAST => AXI4_RLAST,  -- ufix1
              AXI4_RVALID => AXI4_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_trigger_write => write_trigger_write,  -- ufix1
              write_dac_data_1 => write_dac_data_1,  -- sfix16
              write_dac_data_2 => write_dac_data_2,  -- sfix16
              write_dac_data_3 => write_dac_data_3,  -- sfix16
              write_dac_data_4 => write_dac_data_4,  -- sfix16
              write_dac_data_5 => write_dac_data_5,  -- sfix16
              write_dac_data_6 => write_dac_data_6,  -- sfix16
              write_dac_data_7 => write_dac_data_7,  -- sfix16
              write_dac_data_8 => write_dac_data_8,  -- sfix16
              reset_internal => reset_internal  -- ufix1
              );

  u_uz_dac_spi_interface_dut_inst : uz_dac_spi_interface_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              trigger_write => write_trigger_write,  -- ufix1
              dac_data_1 => write_dac_data_1,  -- sfix16
              dac_data_2 => write_dac_data_2,  -- sfix16
              dac_data_3 => write_dac_data_3,  -- sfix16
              dac_data_4 => write_dac_data_4,  -- sfix16
              dac_data_5 => write_dac_data_5,  -- sfix16
              dac_data_6 => write_dac_data_6,  -- sfix16
              dac_data_7 => write_dac_data_7,  -- sfix16
              dac_data_8 => write_dac_data_8,  -- sfix16
              ce_out => ce_out_sig,  -- ufix1
              spi_clk_out => spi_clk_out_sig,  -- ufix1
              cs_out => cs_out_sig,  -- ufix1
              data_out_1 => data_out_1_sig,  -- ufix1
              data_out_2 => data_out_2_sig,  -- ufix1
              data_out_3 => data_out_3_sig,  -- ufix1
              data_out_4 => data_out_4_sig,  -- ufix1
              data_out_5 => data_out_5_sig,  -- ufix1
              data_out_6 => data_out_6_sig,  -- ufix1
              data_out_7 => data_out_7_sig,  -- ufix1
              data_out_8 => data_out_8_sig  -- ufix1
              );

  ip_timestamp <= unsigned'(X"83703D38");

  reset_cm <=  NOT IPCORE_RESETN;

  reset_before_sync <= reset_cm OR reset_internal;

  spi_clk_out <= spi_clk_out_sig;

  cs_out <= cs_out_sig;

  data_out_1 <= data_out_1_sig;

  data_out_2 <= data_out_2_sig;

  data_out_3 <= data_out_3_sig;

  data_out_4 <= data_out_4_sig;

  data_out_5 <= data_out_5_sig;

  data_out_6 <= data_out_6_sig;

  data_out_7 <= data_out_7_sig;

  data_out_8 <= data_out_8_sig;

  AXI4_BID <= AXI4_BID_tmp;

  AXI4_BRESP <= AXI4_BRESP_tmp;

  AXI4_RID <= AXI4_RID_tmp;

  AXI4_RDATA <= AXI4_RDATA_tmp;

  AXI4_RRESP <= AXI4_RRESP_tmp;

END rtl;

