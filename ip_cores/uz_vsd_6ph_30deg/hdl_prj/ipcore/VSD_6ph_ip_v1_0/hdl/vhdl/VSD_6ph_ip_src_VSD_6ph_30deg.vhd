-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\VSD_6ph_30deg_HDL\VSD_6ph_ip_src_VSD_6ph_30deg.vhd
-- Created: 2022-08-08 09:36:08
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- alpha                         ce_out        1e-08
-- beta                          ce_out        1e-08
-- x1                            ce_out        1e-08
-- y1                            ce_out        1e-08
-- z1                            ce_out        1e-08
-- z2                            ce_out        1e-08
-- vsd_done                      ce_out        1e-08
-- alpha_AXI                     ce_out        1e-08
-- beta_AXI                      ce_out        1e-08
-- x_AXI                         ce_out        1e-08
-- y_AXI                         ce_out        1e-08
-- z1_AXI                        ce_out        1e-08
-- z2_AXI                        ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: VSD_6ph_ip_src_VSD_6ph_30deg
-- Source Path: VSD_6ph_30deg_HDL/VSD_6ph_30deg
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY VSD_6ph_ip_src_VSD_6ph_30deg IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        a1                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        b1                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c1                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        a2                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        b2                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c2                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        pu_conv_valid                     :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        alpha                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        beta                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        x1                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        y1                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        z1                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        z2                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        vsd_done                          :   OUT   std_logic;
        alpha_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        beta_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        x_AXI                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        y_AXI                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        z1_AXI                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        z2_AXI                            :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
        );
END VSD_6ph_ip_src_VSD_6ph_30deg;


ARCHITECTURE rtl OF VSD_6ph_ip_src_VSD_6ph_30deg IS

  -- Component Declarations
  COMPONENT VSD_6ph_ip_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT VSD_6ph_ip_src_VSD_6ph_30deg_block
    PORT( a1                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          b1                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          c1                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          a2                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          b2                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          c2                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          alpha                           :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          beta                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          x1                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          y1                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          z1                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          z2                              :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : VSD_6ph_ip_src_Detect_Rise_Positive
    USE ENTITY work.VSD_6ph_ip_src_Detect_Rise_Positive(rtl);

  FOR ALL : VSD_6ph_ip_src_VSD_6ph_30deg_block
    USE ENTITY work.VSD_6ph_ip_src_VSD_6ph_30deg_block(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL a1_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay_out1                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL b1_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch1_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL c1_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch2_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay2_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL a2_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch3_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay3_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL b2_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch4_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay4_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL c2_signed                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Switch5_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay5_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL alpha_tmp                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL beta_tmp                         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL x1_tmp                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL y1_tmp                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL z1_tmp                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL z2_tmp                           : std_logic_vector(17 DOWNTO 0);  -- ufix18

BEGIN
  u_Detect_Rise_Positive : VSD_6ph_ip_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => pu_conv_valid,
              Y => Detect_Rise_Positive_out1
              );

  u_VSD_6ph_30deg : VSD_6ph_ip_src_VSD_6ph_30deg_block
    PORT MAP( a1 => std_logic_vector(Switch_out1),  -- sfix18_En15
              b1 => std_logic_vector(Switch1_out1),  -- sfix18_En15
              c1 => std_logic_vector(Switch2_out1),  -- sfix18_En15
              a2 => std_logic_vector(Switch3_out1),  -- sfix18_En15
              b2 => std_logic_vector(Switch4_out1),  -- sfix18_En15
              c2 => std_logic_vector(Switch5_out1),  -- sfix18_En15
              alpha => alpha_tmp,  -- sfix18_En11
              beta => beta_tmp,  -- sfix18_En11
              x1 => x1_tmp,  -- sfix18_En11
              y1 => y1_tmp,  -- sfix18_En11
              z1 => z1_tmp,  -- sfix18_En11
              z2 => z2_tmp  -- sfix18_En11
              );

  
  switch_compare_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  enb <= clk_enable;

  a1_signed <= signed(a1);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Switch_out1 <= Delay_out1 WHEN switch_compare_1 = '0' ELSE
      a1_signed;

  
  switch_compare_1_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  b1_signed <= signed(b1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch1_out1 <= Delay1_out1 WHEN switch_compare_1_1 = '0' ELSE
      b1_signed;

  
  switch_compare_1_2 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  c1_signed <= signed(c1);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch2_out1 <= Delay2_out1 WHEN switch_compare_1_2 = '0' ELSE
      c1_signed;

  
  switch_compare_1_3 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  a2_signed <= signed(a2);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch3_out1 <= Delay3_out1 WHEN switch_compare_1_3 = '0' ELSE
      a2_signed;

  
  switch_compare_1_4 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  b2_signed <= signed(b2);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch4_out1 <= Delay4_out1 WHEN switch_compare_1_4 = '0' ELSE
      b2_signed;

  
  switch_compare_1_5 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  c2_signed <= signed(c2);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch5_out1 <= Delay5_out1 WHEN switch_compare_1_5 = '0' ELSE
      c2_signed;

  ce_out <= clk_enable;

  alpha <= alpha_tmp;

  beta <= beta_tmp;

  x1 <= x1_tmp;

  y1 <= y1_tmp;

  z1 <= z1_tmp;

  z2 <= z2_tmp;

  vsd_done <= Detect_Rise_Positive_out1;

  alpha_AXI <= alpha_tmp;

  beta_AXI <= beta_tmp;

  x_AXI <= x1_tmp;

  y_AXI <= y1_tmp;

  z1_AXI <= z1_tmp;

  z2_AXI <= z2_tmp;

END rtl;

