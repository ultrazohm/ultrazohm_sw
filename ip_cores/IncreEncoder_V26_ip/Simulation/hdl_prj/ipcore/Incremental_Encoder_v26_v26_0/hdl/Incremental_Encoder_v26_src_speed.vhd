-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\inc_enc_v26\Incremental_Encoder_v26_src_speed.vhd
-- Created: 2023-02-24 10:23:06
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Incremental_Encoder_v26_src_speed
-- Source Path: inc_enc_v26/IncEnc_V25/speed
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Incremental_Encoder_v26_src_IncEnc_V25_pac.ALL;

ENTITY Incremental_Encoder_v26_src_speed IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_5987_0                      :   IN    std_logic;
        A                                 :   IN    std_logic;
        B                                 :   IN    std_logic;
        Dir                               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
        OmegaPerOverSampl                 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        T                                 :   IN    std_logic_vector(37 DOWNTO 0);  -- sfix38_En32
        timeout_value                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        omega                             :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        OverSamplFactor                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        omega_MA_N4                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        timeout_active                    :   OUT   std_logic;
        omegaA                            :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        omegaB                            :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        omegaNOTA                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        omegaNOTB                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        new_measurement                   :   OUT   std_logic
        );
END Incremental_Encoder_v26_src_speed;


ARCHITECTURE rtl OF Incremental_Encoder_v26_src_speed IS

  -- Component Declarations
  COMPONENT Incremental_Encoder_v26_src_OS_factor_logic
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_5987_0                    :   IN    std_logic;
          new_transisiton                 :   IN    std_logic_vector(0 TO 3);  -- boolean [4]
          Allow_ToCheckOversampling       :   IN    std_logic;
          state_edges                     :   IN    vector_of_std_logic_vector16(0 TO 3);  -- int16 [4]
          omega                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          OverSamplOmega                  :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          oversampling_adjusted           :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- uint16 [4]
          oversampling_state              :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  COMPONENT Incremental_Encoder_v26_src_calc_omega
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_5987_0                    :   IN    std_logic;
          Encoder_Line                    :   IN    std_logic;
          Dir                             :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
          T                               :   IN    std_logic_vector(37 DOWNTO 0);  -- sfix38_En32
          oversampling_state              :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          timeout_value                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          omega_oversampled               :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          NewMeasurement                  :   OUT   std_logic;
          state_count_edges               :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          timeout_active                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Incremental_Encoder_v26_src_Average
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_5987_0                    :   IN    std_logic;
          OmegaIn                         :   IN    vector_of_std_logic_vector24(0 TO 3);  -- sfix24_En11 [4]
          NewMeasurement                  :   IN    std_logic;
          Omega                           :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          OmegaOut_MA_N4                  :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Incremental_Encoder_v26_src_OS_factor_logic
    USE ENTITY work.Incremental_Encoder_v26_src_OS_factor_logic(rtl);

  FOR ALL : Incremental_Encoder_v26_src_calc_omega
    USE ENTITY work.Incremental_Encoder_v26_src_calc_omega(rtl);

  FOR ALL : Incremental_Encoder_v26_src_Average
    USE ENTITY work.Incremental_Encoder_v26_src_Average(rtl);

  -- Signals
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL NOT_A                            : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL NOT_B                            : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Mux_out1                         : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL newMeas                          : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL newMeas_3                        : std_logic;
  SIGNAL newMeas_2                        : std_logic;
  SIGNAL newMeas_1                        : std_logic;
  SIGNAL newMeas_0                        : std_logic;
  SIGNAL newMeas_allORed                  : std_logic;
  SIGNAL newMeas_4                        : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL calc_omega_out3                  : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL final_omega_oversampled          : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL OS_factor_logic_out1             : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL OS_B                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL omega_1                          : vector_of_std_logic_vector24(0 TO 3);  -- ufix24 [4]
  SIGNAL calc_omega_out4                  : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL x_k                              : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL calc_omega_out4_0                : std_logic;
  SIGNAL calc_omega_out4_1                : std_logic;
  SIGNAL calc_omega_out4_2                : std_logic;
  SIGNAL calc_omega_out4_3                : std_logic;
  SIGNAL timeout_active_all_ORed          : std_logic;
  SIGNAL omega_signed                     : vector_of_signed24(0 TO 3);  -- sfix24_En11 [4]
  SIGNAL omega_2                          : vector_of_signed24(0 TO 3);  -- sfix24_En11 [4]

BEGIN
  u_OS_factor_logic : Incremental_Encoder_v26_src_OS_factor_logic
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_5987_0 => enb_1_5987_0,
              new_transisiton => newMeas_4,  -- boolean [4]
              Allow_ToCheckOversampling => newMeas_allORed,
              state_edges => calc_omega_out3,  -- int16 [4]
              omega => final_omega_oversampled,  -- sfix24_En11
              OverSamplOmega => OmegaPerOverSampl,  -- sfix24_En11
              oversampling_adjusted => OS_factor_logic_out1,  -- uint16 [4]
              oversampling_state => OS_B  -- uint16
              );

  u_Average : Incremental_Encoder_v26_src_Average
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_5987_0 => enb_1_5987_0,
              OmegaIn => omega_1,  -- sfix24_En11 [4]
              NewMeasurement => newMeas_allORed,
              Omega => x_k,  -- sfix24_En11
              OmegaOut_MA_N4 => final_omega_oversampled  -- sfix24_En11
              );

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb_1_5987_0 = '1' THEN
        Delay6_out1 <= A;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_5987_0 = '1' THEN
        Delay1_out1 <= B;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  NOT_A <=  NOT A;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_5987_0 = '1' THEN
        Delay2_out1 <= NOT_A;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  NOT_B <=  NOT B;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_5987_0 = '1' THEN
        Delay3_out1 <= NOT_B;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Mux_out1(0) <= Delay6_out1;
  Mux_out1(1) <= Delay1_out1;
  Mux_out1(2) <= Delay2_out1;
  Mux_out1(3) <= Delay3_out1;

  newMeas_3 <= newMeas(3);

  newMeas_2 <= newMeas(2);

  newMeas_1 <= newMeas(1);

  newMeas_0 <= newMeas(0);

  newMeas_allORed <= newMeas_3 OR (newMeas_2 OR (newMeas_0 OR newMeas_1));

  newMeas_4 <= newMeas;

  GEN_LABEL: FOR k IN 0 TO 3 GENERATE
    u_calc_omega : Incremental_Encoder_v26_src_calc_omega
      PORT MAP( clk => clk,
                reset_x => reset_x,
                enb_1_5987_0 => enb_1_5987_0,
                Encoder_Line => Mux_out1(k),
                Dir => Dir,  -- sfix4
                T => T,  -- sfix38_En32
                oversampling_state => OS_factor_logic_out1(k),  -- uint16
                timeout_value => timeout_value,  -- uint32
                omega_oversampled => omega_1(k),  -- sfix24_En11
                NewMeasurement => newMeas(k),
                state_count_edges => calc_omega_out3(k),  -- int16
                timeout_active => calc_omega_out4(k)
                );
  END GENERATE;

  calc_omega_out4_0 <= calc_omega_out4(0);

  calc_omega_out4_1 <= calc_omega_out4(1);

  calc_omega_out4_2 <= calc_omega_out4(2);

  calc_omega_out4_3 <= calc_omega_out4(3);

  timeout_active_all_ORed <= calc_omega_out4_3 OR (calc_omega_out4_2 OR (calc_omega_out4_0 OR calc_omega_out4_1));

  outputgen: FOR k IN 0 TO 3 GENERATE
    omega_signed(k) <= signed(omega_1(k));
  END GENERATE;

  omega_2 <= omega_signed;

  omegaA <= std_logic_vector(omega_2(0));

  omegaB <= omega_1(1);

  omegaNOTA <= omega_1(2);

  omegaNOTB <= omega_1(3);

  omega <= x_k;

  OverSamplFactor <= OS_B;

  omega_MA_N4 <= final_omega_oversampled;

  timeout_active <= timeout_active_all_ORed;

  new_measurement <= newMeas_allORed;

END rtl;

