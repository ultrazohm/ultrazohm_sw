// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_accumulate_float_2u_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_values_dout,
        p_values_empty_n,
        p_values_read,
        p_accumulator_address0,
        p_accumulator_ce0,
        p_accumulator_we0,
        p_accumulator_d0,
        p_accumulator_q0,
        p_accumulator_address1,
        p_accumulator_ce1,
        p_accumulator_we1,
        p_accumulator_d1,
        p_accumulator_q1,
        p_weightGradientAvg_offset_dout,
        p_weightGradientAvg_offset_empty_n,
        p_weightGradientAvg_offset_read,
        mul_ln559_loc_dout,
        mul_ln559_loc_empty_n,
        mul_ln559_loc_read,
        p_initZero_dout,
        p_initZero_empty_n,
        p_initZero_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state20 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] p_values_dout;
input   p_values_empty_n;
output   p_values_read;
output  [15:0] p_accumulator_address0;
output   p_accumulator_ce0;
output   p_accumulator_we0;
output  [31:0] p_accumulator_d0;
input  [31:0] p_accumulator_q0;
output  [15:0] p_accumulator_address1;
output   p_accumulator_ce1;
output   p_accumulator_we1;
output  [31:0] p_accumulator_d1;
input  [31:0] p_accumulator_q1;
input  [15:0] p_weightGradientAvg_offset_dout;
input   p_weightGradientAvg_offset_empty_n;
output   p_weightGradientAvg_offset_read;
input  [31:0] mul_ln559_loc_dout;
input   mul_ln559_loc_empty_n;
output   mul_ln559_loc_read;
input  [0:0] p_initZero_dout;
input   p_initZero_empty_n;
output   p_initZero_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_values_read;
reg[15:0] p_accumulator_address0;
reg p_accumulator_ce0;
reg p_accumulator_we0;
reg[15:0] p_accumulator_address1;
reg p_accumulator_ce1;
reg p_accumulator_we1;
reg p_weightGradientAvg_offset_read;
reg mul_ln559_loc_read;
reg p_initZero_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_values_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln409_reg_245;
reg    p_weightGradientAvg_offset_blk_n;
reg    mul_ln559_loc_blk_n;
reg    p_initZero_blk_n;
reg   [30:0] i_reg_119;
reg   [15:0] p_weightGradientAvg_offset_read_reg_228;
reg    ap_block_state1;
reg   [0:0] p_initZero_read_reg_234;
reg   [30:0] trunc_ln_reg_240;
wire   [0:0] icmp_ln409_fu_144_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_state12_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
wire    ap_block_state18_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln409_reg_245_pp0_iter1_reg;
reg   [0:0] icmp_ln409_reg_245_pp0_iter2_reg;
reg   [0:0] icmp_ln409_reg_245_pp0_iter3_reg;
reg   [0:0] icmp_ln409_reg_245_pp0_iter4_reg;
reg   [0:0] icmp_ln409_reg_245_pp0_iter5_reg;
reg   [0:0] icmp_ln409_reg_245_pp0_iter6_reg;
reg   [0:0] icmp_ln409_reg_245_pp0_iter7_reg;
reg   [0:0] icmp_ln409_reg_245_pp0_iter8_reg;
wire   [30:0] i_16_fu_149_p2;
reg   [30:0] i_16_reg_249;
reg   [15:0] p_accumulator_addr_reg_254;
reg   [15:0] p_accumulator_addr_reg_254_pp0_iter1_reg;
reg   [15:0] p_accumulator_addr_reg_254_pp0_iter2_reg;
reg   [15:0] p_accumulator_addr_reg_254_pp0_iter3_reg;
wire   [15:0] add_ln416_2_fu_183_p2;
reg   [15:0] add_ln416_2_reg_259;
reg   [15:0] add_ln416_2_reg_259_pp0_iter1_reg;
reg   [15:0] add_ln416_2_reg_259_pp0_iter2_reg;
reg   [15:0] add_ln416_2_reg_259_pp0_iter3_reg;
wire   [31:0] trunc_ln674_fu_188_p1;
reg   [31:0] trunc_ln674_reg_264;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_state11_pp0_stage1_iter4;
wire    ap_block_state13_pp0_stage1_iter5;
wire    ap_block_state15_pp0_stage1_iter6;
wire    ap_block_state17_pp0_stage1_iter7;
wire    ap_block_state19_pp0_stage1_iter8;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] p_Result_i_i_reg_269;
reg   [31:0] p_Result_i_i_reg_269_pp0_iter1_reg;
reg   [31:0] p_Result_i_i_reg_269_pp0_iter2_reg;
reg   [31:0] p_Result_i_i_reg_269_pp0_iter3_reg;
reg   [31:0] p_Result_i_i_reg_269_pp0_iter4_reg;
reg   [31:0] p_accumulator_load_reg_274;
wire   [31:0] bitcast_ln101_fu_202_p1;
wire   [31:0] select_ln403_fu_206_p3;
wire   [31:0] grp_fu_130_p2;
reg   [31:0] add3_i_i_reg_289;
reg    ap_enable_reg_pp0_iter3;
reg   [15:0] p_accumulator_addr_3_reg_294;
reg   [15:0] p_accumulator_addr_3_reg_294_pp0_iter5_reg;
reg   [15:0] p_accumulator_addr_3_reg_294_pp0_iter6_reg;
reg   [15:0] p_accumulator_addr_3_reg_294_pp0_iter7_reg;
reg   [15:0] p_accumulator_addr_3_reg_294_pp0_iter8_reg;
wire   [31:0] select_ln403_2_fu_217_p3;
reg   [31:0] select_ln403_2_reg_299;
wire   [31:0] bitcast_ln101_10_fu_224_p1;
reg   [31:0] add3_1_i_i_reg_309;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter8;
reg   [30:0] ap_phi_mux_i_phi_fu_123_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln416_fu_172_p1;
wire   [63:0] zext_ln416_3_fu_213_p1;
reg   [31:0] grp_fu_130_p0;
reg   [31:0] grp_fu_130_p1;
wire   [14:0] empty_fu_155_p1;
wire   [15:0] mul4_i_i_fu_159_p3;
wire   [15:0] add_ln416_fu_167_p2;
wire   [15:0] or_ln416_fu_177_p2;
reg    grp_fu_130_ce;
wire    ap_CS_fsm_state20;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_predicate_op40_load_state2;
reg    ap_enable_operation_40;
reg    ap_enable_state2_pp0_iter0_stage0;
reg    ap_predicate_op46_load_state3;
reg    ap_enable_operation_46;
reg    ap_enable_state3_pp0_iter0_stage1;
reg    ap_enable_operation_54;
reg    ap_enable_state9_pp0_iter3_stage1;
reg    ap_enable_operation_68;
reg    ap_enable_state19_pp0_iter8_stage1;
reg    ap_predicate_op57_load_state10;
reg    ap_enable_operation_57;
reg    ap_enable_state10_pp0_iter4_stage0;
reg    ap_predicate_op58_load_state11;
reg    ap_enable_operation_58;
reg    ap_enable_state11_pp0_iter4_stage1;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U331(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_130_p0),
    .din1(grp_fu_130_p1),
    .ce(grp_fu_130_ce),
    .dout(grp_fu_130_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((~((ap_start == 1'b0) | (p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln409_reg_245 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_119 <= i_16_reg_249;
    end else if ((~((ap_start == 1'b0) | (p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_119 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln409_reg_245_pp0_iter7_reg == 1'd0))) begin
        add3_1_i_i_reg_309 <= grp_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln409_reg_245_pp0_iter2_reg == 1'd0))) begin
        add3_i_i_reg_289 <= grp_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln409_fu_144_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln416_2_reg_259 <= add_ln416_2_fu_183_p2;
        p_accumulator_addr_reg_254 <= zext_ln416_fu_172_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln416_2_reg_259_pp0_iter1_reg <= add_ln416_2_reg_259;
        add_ln416_2_reg_259_pp0_iter2_reg <= add_ln416_2_reg_259_pp0_iter1_reg;
        add_ln416_2_reg_259_pp0_iter3_reg <= add_ln416_2_reg_259_pp0_iter2_reg;
        icmp_ln409_reg_245 <= icmp_ln409_fu_144_p2;
        icmp_ln409_reg_245_pp0_iter1_reg <= icmp_ln409_reg_245;
        icmp_ln409_reg_245_pp0_iter2_reg <= icmp_ln409_reg_245_pp0_iter1_reg;
        icmp_ln409_reg_245_pp0_iter3_reg <= icmp_ln409_reg_245_pp0_iter2_reg;
        icmp_ln409_reg_245_pp0_iter4_reg <= icmp_ln409_reg_245_pp0_iter3_reg;
        icmp_ln409_reg_245_pp0_iter5_reg <= icmp_ln409_reg_245_pp0_iter4_reg;
        icmp_ln409_reg_245_pp0_iter6_reg <= icmp_ln409_reg_245_pp0_iter5_reg;
        icmp_ln409_reg_245_pp0_iter7_reg <= icmp_ln409_reg_245_pp0_iter6_reg;
        icmp_ln409_reg_245_pp0_iter8_reg <= icmp_ln409_reg_245_pp0_iter7_reg;
        p_accumulator_addr_3_reg_294_pp0_iter5_reg <= p_accumulator_addr_3_reg_294;
        p_accumulator_addr_3_reg_294_pp0_iter6_reg <= p_accumulator_addr_3_reg_294_pp0_iter5_reg;
        p_accumulator_addr_3_reg_294_pp0_iter7_reg <= p_accumulator_addr_3_reg_294_pp0_iter6_reg;
        p_accumulator_addr_3_reg_294_pp0_iter8_reg <= p_accumulator_addr_3_reg_294_pp0_iter7_reg;
        p_accumulator_addr_reg_254_pp0_iter1_reg <= p_accumulator_addr_reg_254;
        p_accumulator_addr_reg_254_pp0_iter2_reg <= p_accumulator_addr_reg_254_pp0_iter1_reg;
        p_accumulator_addr_reg_254_pp0_iter3_reg <= p_accumulator_addr_reg_254_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_16_reg_249 <= i_16_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln409_reg_245 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Result_i_i_reg_269 <= {{p_values_dout[63:32]}};
        trunc_ln674_reg_264 <= trunc_ln674_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Result_i_i_reg_269_pp0_iter1_reg <= p_Result_i_i_reg_269;
        p_Result_i_i_reg_269_pp0_iter2_reg <= p_Result_i_i_reg_269_pp0_iter1_reg;
        p_Result_i_i_reg_269_pp0_iter3_reg <= p_Result_i_i_reg_269_pp0_iter2_reg;
        p_Result_i_i_reg_269_pp0_iter4_reg <= p_Result_i_i_reg_269_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln409_reg_245_pp0_iter3_reg == 1'd0))) begin
        p_accumulator_addr_3_reg_294 <= zext_ln416_3_fu_213_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((p_initZero_read_reg_234 == 1'd0) & (icmp_ln409_reg_245 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_accumulator_load_reg_274 <= p_accumulator_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_initZero_read_reg_234 <= p_initZero_dout;
        p_weightGradientAvg_offset_read_reg_228 <= p_weightGradientAvg_offset_dout;
        trunc_ln_reg_240 <= {{mul_ln559_loc_dout[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln409_reg_245_pp0_iter4_reg == 1'd0))) begin
        select_ln403_2_reg_299 <= select_ln403_2_fu_217_p3;
    end
end

always @ (*) begin
    if ((icmp_ln409_fu_144_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln409_reg_245 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_123_p4 = i_16_reg_249;
    end else begin
        ap_phi_mux_i_phi_fu_123_p4 = i_reg_119;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_130_ce = 1'b1;
    end else begin
        grp_fu_130_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_130_p0 = select_ln403_2_reg_299;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_130_p0 = select_ln403_fu_206_p3;
    end else begin
        grp_fu_130_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_130_p1 = bitcast_ln101_10_fu_224_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_130_p1 = bitcast_ln101_fu_202_p1;
    end else begin
        grp_fu_130_p1 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln559_loc_blk_n = mul_ln559_loc_empty_n;
    end else begin
        mul_ln559_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln559_loc_read = 1'b1;
    end else begin
        mul_ln559_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_accumulator_address0 = p_accumulator_addr_3_reg_294_pp0_iter8_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_accumulator_address0 = zext_ln416_3_fu_213_p1;
    end else begin
        p_accumulator_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_accumulator_address1 = p_accumulator_addr_reg_254_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_accumulator_address1 = zext_ln416_fu_172_p1;
    end else begin
        p_accumulator_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_accumulator_ce0 = 1'b1;
    end else begin
        p_accumulator_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_accumulator_ce1 = 1'b1;
    end else begin
        p_accumulator_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln409_reg_245_pp0_iter8_reg == 1'd0))) begin
        p_accumulator_we0 = 1'b1;
    end else begin
        p_accumulator_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln409_reg_245_pp0_iter3_reg == 1'd0))) begin
        p_accumulator_we1 = 1'b1;
    end else begin
        p_accumulator_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_initZero_blk_n = p_initZero_empty_n;
    end else begin
        p_initZero_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_initZero_read = 1'b1;
    end else begin
        p_initZero_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln409_reg_245 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_values_blk_n = p_values_empty_n;
    end else begin
        p_values_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln409_reg_245 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_values_read = 1'b1;
    end else begin
        p_values_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weightGradientAvg_offset_blk_n = p_weightGradientAvg_offset_empty_n;
    end else begin
        p_weightGradientAvg_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_weightGradientAvg_offset_read = 1'b1;
    end else begin
        p_weightGradientAvg_offset_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln409_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln409_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln416_2_fu_183_p2 = (p_weightGradientAvg_offset_read_reg_228 + or_ln416_fu_177_p2);

assign add_ln416_fu_167_p2 = (p_weightGradientAvg_offset_read_reg_228 + mul4_i_i_fu_159_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)) | ((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln409_reg_245 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_values_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln409_reg_245 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (p_values_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_initZero_empty_n == 1'b0) | (mul_ln559_loc_empty_n == 1'b0) | (p_weightGradientAvg_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln409_reg_245 == 1'd0) & (p_values_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_40 = (ap_predicate_op40_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_46 = (ap_predicate_op46_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_54 = (icmp_ln409_reg_245_pp0_iter3_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_57 = (ap_predicate_op57_load_state10 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_58 = (ap_predicate_op58_load_state11 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_68 = (icmp_ln409_reg_245_pp0_iter8_reg == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state10_pp0_iter4_stage0 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state11_pp0_iter4_stage1 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state19_pp0_iter8_stage1 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state3_pp0_iter0_stage1 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state9_pp0_iter3_stage1 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_predicate_op40_load_state2 = ((icmp_ln409_fu_144_p2 == 1'd0) & (p_initZero_read_reg_234 == 1'd0));
end

always @ (*) begin
    ap_predicate_op46_load_state3 = ((p_initZero_read_reg_234 == 1'd0) & (icmp_ln409_reg_245 == 1'd0));
end

always @ (*) begin
    ap_predicate_op57_load_state10 = ((p_initZero_read_reg_234 == 1'd0) & (icmp_ln409_reg_245_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op58_load_state11 = ((p_initZero_read_reg_234 == 1'd0) & (icmp_ln409_reg_245_pp0_iter4_reg == 1'd0));
end

assign bitcast_ln101_10_fu_224_p1 = p_Result_i_i_reg_269_pp0_iter4_reg;

assign bitcast_ln101_fu_202_p1 = trunc_ln674_reg_264;

assign empty_fu_155_p1 = ap_phi_mux_i_phi_fu_123_p4[14:0];

assign i_16_fu_149_p2 = (ap_phi_mux_i_phi_fu_123_p4 + 31'd1);

assign icmp_ln409_fu_144_p2 = ((ap_phi_mux_i_phi_fu_123_p4 == trunc_ln_reg_240) ? 1'b1 : 1'b0);

assign mul4_i_i_fu_159_p3 = {{empty_fu_155_p1}, {1'd0}};

assign or_ln416_fu_177_p2 = (mul4_i_i_fu_159_p3 | 16'd1);

assign p_accumulator_d0 = add3_1_i_i_reg_309;

assign p_accumulator_d1 = add3_i_i_reg_289;

assign select_ln403_2_fu_217_p3 = ((p_initZero_read_reg_234[0:0] === 1'b1) ? 32'd0 : p_accumulator_q0);

assign select_ln403_fu_206_p3 = ((p_initZero_read_reg_234[0:0] === 1'b1) ? 32'd0 : p_accumulator_load_reg_274);

assign trunc_ln674_fu_188_p1 = p_values_dout[31:0];

assign zext_ln416_3_fu_213_p1 = add_ln416_2_reg_259_pp0_iter3_reg;

assign zext_ln416_fu_172_p1 = add_ln416_fu_167_p2;

endmodule //BGD_accumulate_float_2u_2
