-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_gem2StreamTranspose_float_8u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    p_out_full_n : IN STD_LOGIC;
    p_out_write : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k_empty_n : IN STD_LOGIC;
    p_k_read : OUT STD_LOGIC;
    p_in_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_in_ce0 : OUT STD_LOGIC;
    p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_in_ce1 : OUT STD_LOGIC;
    p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_offset_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_offset_empty_n : IN STD_LOGIC;
    p_in_offset_read : OUT STD_LOGIC;
    p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_full_n : IN STD_LOGIC;
    p_n_out_write : OUT STD_LOGIC;
    p_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_k_out_full_n : IN STD_LOGIC;
    p_k_out_write : OUT STD_LOGIC );
end;


architecture behav of BGD_gem2StreamTranspose_float_8u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv61_0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv61_1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal p_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal icmp_ln172_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_587_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_n_blk_n : STD_LOGIC;
    signal p_k_blk_n : STD_LOGIC;
    signal p_in_offset_blk_n : STD_LOGIC;
    signal p_n_out_blk_n : STD_LOGIC;
    signal p_k_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_202 : STD_LOGIC_VECTOR (60 downto 0);
    signal k_reg_213 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_offset_read_reg_549 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_fu_235_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln_reg_561 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln180_fu_245_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln180_reg_566 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln180_1_fu_249_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln180_1_reg_571 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_261_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal bound_reg_582 : STD_LOGIC_VECTOR (60 downto 0);
    signal icmp_ln172_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln172_fu_272_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln172_reg_591 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln174_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln172_fu_283_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln172_reg_601 : STD_LOGIC_VECTOR (28 downto 0);
    signal empty_fu_291_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_295_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_611 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln172_1_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln172_1_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln172_fu_338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln172_reg_645 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_508_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_4_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln174_fu_388_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln174_reg_687 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_in_load_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_load_22_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_522_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_8_reg_712 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_in_load_23_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_load_24_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_load_25_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_load_26_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_206_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_k_phi_fu_217_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_phi_mux_i_phi_fu_228_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln180_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_1_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_2_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_3_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_4_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln180_5_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_6_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_7_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal bound_fu_261_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_261_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln172_1_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln180_1_fu_347_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_fu_354_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_1_fu_359_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_500_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_3_fu_369_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln180_3_fu_369_p2 : signal is "no";
    signal add_ln180_5_fu_393_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln180_5_fu_393_p2 : signal is "no";
    signal grp_fu_515_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_7_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln180_7_fu_402_p2 : signal is "no";
    signal add_ln180_9_fu_411_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln180_9_fu_411_p2 : signal is "no";
    signal grp_fu_528_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_11_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln180_11_fu_420_p2 : signal is "no";
    signal grp_fu_535_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_13_fu_429_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln180_13_fu_429_p2 : signal is "no";
    signal grp_fu_542_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_15_fu_438_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln180_15_fu_438_p2 : signal is "no";
    signal l_v_63_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_62_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_61_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_60_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_59_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_58_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_57_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_500_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_515_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_528_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_535_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_542_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_494_ce : STD_LOGIC;
    signal grp_fu_500_ce : STD_LOGIC;
    signal grp_fu_508_ce : STD_LOGIC;
    signal grp_fu_515_ce : STD_LOGIC;
    signal grp_fu_522_ce : STD_LOGIC;
    signal grp_fu_528_ce : STD_LOGIC;
    signal grp_fu_535_ce : STD_LOGIC;
    signal grp_fu_542_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_261_p00 : STD_LOGIC_VECTOR (60 downto 0);
    signal bound_fu_261_p10 : STD_LOGIC_VECTOR (60 downto 0);

    component BGD_mul_32ns_29ns_61_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (60 downto 0) );
    end component;


    component BGD_mul_mul_13s_13s_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component BGD_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_32ns_29ns_61_1_1_U144 : component BGD_mul_32ns_29ns_61_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 29,
        dout_WIDTH => 61)
    port map (
        din0 => bound_fu_261_p0,
        din1 => bound_fu_261_p1,
        dout => bound_fu_261_p2);

    mul_mul_13s_13s_13_4_1_U145 : component BGD_mul_mul_13s_13s_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_fu_291_p1,
        din1 => trunc_ln180_reg_566,
        ce => grp_fu_494_ce,
        dout => grp_fu_494_p2);

    mac_muladd_16s_16s_16ns_16_4_1_U146 : component BGD_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln180_1_reg_571,
        din1 => grp_fu_500_p1,
        din2 => trunc_ln172_fu_338_p1,
        ce => grp_fu_500_ce,
        dout => grp_fu_500_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U147 : component BGD_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln180_1_reg_571,
        din1 => grp_fu_508_p1,
        din2 => trunc_ln172_fu_338_p1,
        ce => grp_fu_508_ce,
        dout => grp_fu_508_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U148 : component BGD_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln180_1_reg_571,
        din1 => grp_fu_515_p1,
        din2 => trunc_ln172_reg_645,
        ce => grp_fu_515_ce,
        dout => grp_fu_515_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U149 : component BGD_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln180_1_reg_571,
        din1 => grp_fu_522_p1,
        din2 => trunc_ln172_reg_645,
        ce => grp_fu_522_ce,
        dout => grp_fu_522_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U150 : component BGD_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln180_1_reg_571,
        din1 => grp_fu_528_p1,
        din2 => trunc_ln172_reg_645,
        ce => grp_fu_528_ce,
        dout => grp_fu_528_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U151 : component BGD_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln180_1_reg_571,
        din1 => grp_fu_535_p1,
        din2 => trunc_ln172_reg_645,
        ce => grp_fu_535_ce,
        dout => grp_fu_535_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U152 : component BGD_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln180_1_reg_571,
        din1 => grp_fu_542_p1,
        din2 => trunc_ln172_reg_645,
        ce => grp_fu_542_ce,
        dout => grp_fu_542_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                i_reg_224 <= select_ln172_1_reg_640;
            elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_224 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_587 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_202 <= add_ln172_reg_591;
            elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_202 <= ap_const_lv61_0;
            end if; 
        end if;
    end process;

    k_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_587 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_213 <= add_ln174_reg_687;
            elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_213 <= ap_const_lv29_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln172_reg_591 <= add_ln172_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_587 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln174_reg_687 <= add_ln174_fu_388_p2;
                add_ln180_4_reg_672 <= grp_fu_508_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_587 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln180_8_reg_712 <= grp_fu_522_p3;
                p_in_load_22_reg_697 <= p_in_q0;
                p_in_load_reg_692 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_582 <= bound_fu_261_p2;
                p_in_offset_read_reg_549 <= p_in_offset_dout;
                trunc_ln180_1_reg_571 <= trunc_ln180_1_fu_249_p1;
                trunc_ln180_reg_566 <= trunc_ln180_fu_245_p1;
                trunc_ln_reg_561 <= p_n_dout(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln172_reg_587 <= icmp_ln172_fu_267_p2;
                icmp_ln172_reg_587_pp0_iter1_reg <= icmp_ln172_reg_587;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln172_fu_267_p2 = ap_const_lv1_0))) then
                icmp_ln174_reg_596 <= icmp_ln174_fu_278_p2;
                select_ln172_reg_601 <= select_ln172_fu_283_p3;
                    shl_ln_reg_611(15 downto 3) <= shl_ln_fu_295_p3(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_in_load_23_reg_717 <= p_in_q1;
                p_in_load_24_reg_722 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                p_in_load_25_reg_737 <= p_in_q1;
                p_in_load_26_reg_742 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_587 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln172_1_reg_640 <= select_ln172_1_fu_331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_reg_587 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                trunc_ln172_reg_645 <= trunc_ln172_fu_338_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_611(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, icmp_ln172_reg_587, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((icmp_ln172_reg_587 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((icmp_ln172_reg_587 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln172_1_fu_325_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_phi_fu_228_p4));
    add_ln172_fu_272_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_206_p4) + unsigned(ap_const_lv61_1));
    add_ln174_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv29_1) + unsigned(select_ln172_reg_601));
    add_ln180_11_fu_420_p2 <= std_logic_vector(signed(grp_fu_528_p3) + signed(p_in_offset_read_reg_549));
    add_ln180_13_fu_429_p2 <= std_logic_vector(signed(grp_fu_535_p3) + signed(p_in_offset_read_reg_549));
    add_ln180_15_fu_438_p2 <= std_logic_vector(signed(grp_fu_542_p3) + signed(p_in_offset_read_reg_549));
    add_ln180_1_fu_359_p2 <= std_logic_vector(unsigned(add_ln180_fu_354_p2) + unsigned(p_in_offset_read_reg_549));
    add_ln180_3_fu_369_p2 <= std_logic_vector(signed(grp_fu_500_p3) + signed(p_in_offset_read_reg_549));
    add_ln180_5_fu_393_p2 <= std_logic_vector(signed(add_ln180_4_reg_672) + signed(p_in_offset_read_reg_549));
    add_ln180_7_fu_402_p2 <= std_logic_vector(signed(grp_fu_515_p3) + signed(p_in_offset_read_reg_549));
    add_ln180_9_fu_411_p2 <= std_logic_vector(signed(add_ln180_8_reg_712) + signed(p_in_offset_read_reg_549));
    add_ln180_fu_354_p2 <= std_logic_vector(unsigned(trunc_ln172_reg_645) + unsigned(shl_ln180_1_fu_347_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln172_reg_587_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_01001 <= ((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln172_reg_587_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_11001 <= ((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln172_reg_587_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_subdone <= ((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
                ap_block_state1 <= ((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage3_iter1_assign_proc : process(p_out_full_n, icmp_ln172_reg_587_pp0_iter1_reg)
    begin
                ap_block_state9_pp0_stage3_iter1 <= ((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln172_reg_587)
    begin
        if ((icmp_ln172_reg_587 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_228_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln172_reg_587_pp0_iter1_reg, i_reg_224, select_ln172_1_reg_640, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_phi_mux_i_phi_fu_228_p4 <= select_ln172_1_reg_640;
        else 
            ap_phi_mux_i_phi_fu_228_p4 <= i_reg_224;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_206_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln172_reg_587, indvar_flatten_reg_202, ap_CS_fsm_pp0_stage0, add_ln172_reg_591, ap_block_pp0_stage0)
    begin
        if (((icmp_ln172_reg_587 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_206_p4 <= add_ln172_reg_591;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_206_p4 <= indvar_flatten_reg_202;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_217_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln172_reg_587, k_reg_213, ap_CS_fsm_pp0_stage0, add_ln174_reg_687, ap_block_pp0_stage0)
    begin
        if (((icmp_ln172_reg_587 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_k_phi_fu_217_p4 <= add_ln174_reg_687;
        else 
            ap_phi_mux_k_phi_fu_217_p4 <= k_reg_213;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_261_p0 <= bound_fu_261_p00(32 - 1 downto 0);
    bound_fu_261_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_k_dout),61));
    bound_fu_261_p1 <= bound_fu_261_p10(29 - 1 downto 0);
    bound_fu_261_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_235_p4),61));
    empty_fu_291_p1 <= select_ln172_fu_283_p3(13 - 1 downto 0);

    grp_fu_494_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_494_ce <= ap_const_logic_1;
        else 
            grp_fu_494_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_500_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_500_ce <= ap_const_logic_1;
        else 
            grp_fu_500_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_500_p1 <= (shl_ln_fu_295_p3 or ap_const_lv16_1);

    grp_fu_508_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_508_ce <= ap_const_logic_1;
        else 
            grp_fu_508_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_508_p1 <= (shl_ln_fu_295_p3 or ap_const_lv16_2);

    grp_fu_515_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_515_ce <= ap_const_logic_1;
        else 
            grp_fu_515_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_515_p1 <= (shl_ln_reg_611 or ap_const_lv16_3);

    grp_fu_522_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_522_ce <= ap_const_logic_1;
        else 
            grp_fu_522_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_522_p1 <= (shl_ln_reg_611 or ap_const_lv16_4);

    grp_fu_528_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_528_ce <= ap_const_logic_1;
        else 
            grp_fu_528_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_528_p1 <= (shl_ln_reg_611 or ap_const_lv16_5);

    grp_fu_535_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_535_ce <= ap_const_logic_1;
        else 
            grp_fu_535_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_535_p1 <= (shl_ln_reg_611 or ap_const_lv16_6);

    grp_fu_542_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_542_ce <= ap_const_logic_1;
        else 
            grp_fu_542_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_542_p1 <= (shl_ln_reg_611 or ap_const_lv16_7);
    icmp_ln172_fu_267_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_206_p4 = bound_reg_582) else "0";
    icmp_ln174_fu_278_p2 <= "1" when (ap_phi_mux_k_phi_fu_217_p4 = trunc_ln_reg_561) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    l_v_57_fu_450_p1 <= p_in_load_22_reg_697;
    l_v_58_fu_453_p1 <= p_in_load_23_reg_717;
    l_v_59_fu_456_p1 <= p_in_load_24_reg_722;
    l_v_60_fu_459_p1 <= p_in_load_25_reg_737;
    l_v_61_fu_462_p1 <= p_in_load_26_reg_742;
    l_v_62_fu_465_p1 <= p_in_q1;
    l_v_63_fu_469_p1 <= p_in_q0;
    l_v_fu_447_p1 <= p_in_load_reg_692;

    p_in_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln180_1_fu_373_p1, zext_ln180_3_fu_406_p1, ap_block_pp0_stage1, zext_ln180_5_fu_424_p1, zext_ln180_7_fu_442_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            p_in_address0 <= zext_ln180_7_fu_442_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_in_address0 <= zext_ln180_5_fu_424_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_in_address0 <= zext_ln180_3_fu_406_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address0 <= zext_ln180_1_fu_373_p1(16 - 1 downto 0);
        else 
            p_in_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln180_fu_364_p1, zext_ln180_2_fu_397_p1, zext_ln180_4_fu_415_p1, ap_block_pp0_stage1, zext_ln180_6_fu_433_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            p_in_address1 <= zext_ln180_6_fu_433_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_in_address1 <= zext_ln180_4_fu_415_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_in_address1 <= zext_ln180_2_fu_397_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address1 <= zext_ln180_fu_364_p1(16 - 1 downto 0);
        else 
            p_in_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_in_ce0 <= ap_const_logic_1;
        else 
            p_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_in_ce1 <= ap_const_logic_1;
        else 
            p_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_offset_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_blk_n <= p_in_offset_empty_n;
        else 
            p_in_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_in_offset_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_read <= ap_const_logic_1;
        else 
            p_in_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    p_k_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_blk_n <= p_k_empty_n;
        else 
            p_k_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_k_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out_blk_n <= p_k_out_full_n;
        else 
            p_k_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_k_out_din <= p_k_dout;

    p_k_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out_write <= ap_const_logic_1;
        else 
            p_k_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_k_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_read <= ap_const_logic_1;
        else 
            p_k_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_blk_n <= p_n_out_full_n;
        else 
            p_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_n_out_din <= p_n_dout;

    p_n_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_write <= ap_const_logic_1;
        else 
            p_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_n_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_out_blk_n_assign_proc : process(p_out_full_n, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, icmp_ln172_reg_587_pp0_iter1_reg)
    begin
        if (((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out_blk_n <= p_out_full_n;
        else 
            p_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_din <= (((((((l_v_63_fu_469_p1 & l_v_62_fu_465_p1) & l_v_61_fu_462_p1) & l_v_60_fu_459_p1) & l_v_59_fu_456_p1) & l_v_58_fu_453_p1) & l_v_57_fu_450_p1) & l_v_fu_447_p1);

    p_out_write_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, icmp_ln172_reg_587_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln172_reg_587_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out_write <= ap_const_logic_1;
        else 
            p_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln172_1_fu_331_p3 <= 
        add_ln172_1_fu_325_p2 when (icmp_ln174_reg_596(0) = '1') else 
        ap_phi_mux_i_phi_fu_228_p4;
    select_ln172_fu_283_p3 <= 
        ap_const_lv29_0 when (icmp_ln174_fu_278_p2(0) = '1') else 
        ap_phi_mux_k_phi_fu_217_p4;
    shl_ln180_1_fu_347_p3 <= (grp_fu_494_p2 & ap_const_lv3_0);
    shl_ln_fu_295_p3 <= (empty_fu_291_p1 & ap_const_lv3_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln172_fu_338_p1 <= select_ln172_1_fu_331_p3(16 - 1 downto 0);
    trunc_ln180_1_fu_249_p1 <= p_k_dout(16 - 1 downto 0);
    trunc_ln180_fu_245_p1 <= p_k_dout(13 - 1 downto 0);
    trunc_ln_fu_235_p4 <= p_n_dout(31 downto 3);
    zext_ln180_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_3_fu_369_p2),64));
    zext_ln180_2_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_5_fu_393_p2),64));
    zext_ln180_3_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_7_fu_402_p2),64));
    zext_ln180_4_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_9_fu_411_p2),64));
    zext_ln180_5_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_11_fu_420_p2),64));
    zext_ln180_6_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_13_fu_429_p2),64));
    zext_ln180_7_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_15_fu_438_p2),64));
    zext_ln180_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_1_fu_359_p2),64));
end behav;
