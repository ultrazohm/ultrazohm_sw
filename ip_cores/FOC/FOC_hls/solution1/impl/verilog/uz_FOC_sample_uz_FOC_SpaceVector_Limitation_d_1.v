// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uz_FOC_sample_uz_FOC_SpaceVector_Limitation_d_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        u_input_Volts_0,
        u_input_Volts_1,
        V_dc_volts,
        omega_el_rad_per_sec,
        i_actual_Ampere_1,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 112'd1;
parameter    ap_ST_fsm_state2 = 112'd2;
parameter    ap_ST_fsm_state3 = 112'd4;
parameter    ap_ST_fsm_state4 = 112'd8;
parameter    ap_ST_fsm_state5 = 112'd16;
parameter    ap_ST_fsm_state6 = 112'd32;
parameter    ap_ST_fsm_state7 = 112'd64;
parameter    ap_ST_fsm_state8 = 112'd128;
parameter    ap_ST_fsm_state9 = 112'd256;
parameter    ap_ST_fsm_state10 = 112'd512;
parameter    ap_ST_fsm_state11 = 112'd1024;
parameter    ap_ST_fsm_state12 = 112'd2048;
parameter    ap_ST_fsm_state13 = 112'd4096;
parameter    ap_ST_fsm_state14 = 112'd8192;
parameter    ap_ST_fsm_state15 = 112'd16384;
parameter    ap_ST_fsm_state16 = 112'd32768;
parameter    ap_ST_fsm_state17 = 112'd65536;
parameter    ap_ST_fsm_state18 = 112'd131072;
parameter    ap_ST_fsm_state19 = 112'd262144;
parameter    ap_ST_fsm_state20 = 112'd524288;
parameter    ap_ST_fsm_state21 = 112'd1048576;
parameter    ap_ST_fsm_state22 = 112'd2097152;
parameter    ap_ST_fsm_state23 = 112'd4194304;
parameter    ap_ST_fsm_state24 = 112'd8388608;
parameter    ap_ST_fsm_state25 = 112'd16777216;
parameter    ap_ST_fsm_state26 = 112'd33554432;
parameter    ap_ST_fsm_state27 = 112'd67108864;
parameter    ap_ST_fsm_state28 = 112'd134217728;
parameter    ap_ST_fsm_state29 = 112'd268435456;
parameter    ap_ST_fsm_state30 = 112'd536870912;
parameter    ap_ST_fsm_state31 = 112'd1073741824;
parameter    ap_ST_fsm_state32 = 112'd2147483648;
parameter    ap_ST_fsm_state33 = 112'd4294967296;
parameter    ap_ST_fsm_state34 = 112'd8589934592;
parameter    ap_ST_fsm_state35 = 112'd17179869184;
parameter    ap_ST_fsm_state36 = 112'd34359738368;
parameter    ap_ST_fsm_state37 = 112'd68719476736;
parameter    ap_ST_fsm_state38 = 112'd137438953472;
parameter    ap_ST_fsm_state39 = 112'd274877906944;
parameter    ap_ST_fsm_state40 = 112'd549755813888;
parameter    ap_ST_fsm_state41 = 112'd1099511627776;
parameter    ap_ST_fsm_state42 = 112'd2199023255552;
parameter    ap_ST_fsm_state43 = 112'd4398046511104;
parameter    ap_ST_fsm_state44 = 112'd8796093022208;
parameter    ap_ST_fsm_state45 = 112'd17592186044416;
parameter    ap_ST_fsm_state46 = 112'd35184372088832;
parameter    ap_ST_fsm_state47 = 112'd70368744177664;
parameter    ap_ST_fsm_state48 = 112'd140737488355328;
parameter    ap_ST_fsm_state49 = 112'd281474976710656;
parameter    ap_ST_fsm_state50 = 112'd562949953421312;
parameter    ap_ST_fsm_state51 = 112'd1125899906842624;
parameter    ap_ST_fsm_state52 = 112'd2251799813685248;
parameter    ap_ST_fsm_state53 = 112'd4503599627370496;
parameter    ap_ST_fsm_state54 = 112'd9007199254740992;
parameter    ap_ST_fsm_state55 = 112'd18014398509481984;
parameter    ap_ST_fsm_state56 = 112'd36028797018963968;
parameter    ap_ST_fsm_state57 = 112'd72057594037927936;
parameter    ap_ST_fsm_state58 = 112'd144115188075855872;
parameter    ap_ST_fsm_state59 = 112'd288230376151711744;
parameter    ap_ST_fsm_state60 = 112'd576460752303423488;
parameter    ap_ST_fsm_state61 = 112'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 112'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 112'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 112'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 112'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 112'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 112'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 112'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 112'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 112'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 112'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 112'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 112'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 112'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 112'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 112'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 112'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 112'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 112'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 112'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 112'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 112'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 112'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 112'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 112'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 112'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 112'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 112'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 112'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 112'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 112'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 112'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 112'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 112'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 112'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 112'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 112'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 112'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 112'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 112'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 112'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 112'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 112'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 112'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 112'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 112'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 112'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 112'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 112'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 112'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 112'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 112'd2596148429267413814265248164610048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [287:0] p_read;
input  [31:0] u_input_Volts_0;
input  [31:0] u_input_Volts_1;
input  [31:0] V_dc_volts;
input  [31:0] omega_el_rad_per_sec;
input  [31:0] i_actual_Ampere_1;
output  [31:0] ap_return_0;
output  [287:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[287:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [111:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_pow_generic_float_s_fu_138_ap_return;
reg   [31:0] reg_234;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state86;
wire   [31:0] grp_pow_generic_float_s_fu_158_ap_return;
reg   [31:0] reg_239;
wire   [31:0] grp_fu_178_p2;
reg   [31:0] reg_244;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state90;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] reg_249;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state98;
wire   [31:0] grp_fu_182_p2;
reg   [31:0] reg_255;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state70;
wire   [31:0] grp_fu_187_p2;
reg   [31:0] U_SV_max_reg_1000;
wire   [0:0] or_ln35_fu_292_p2;
reg   [0:0] or_ln35_reg_1009;
wire   [0:0] or_ln35_6_fu_328_p2;
reg   [0:0] or_ln35_6_reg_1015;
wire   [31:0] sign_fu_370_p3;
wire    ap_CS_fsm_state29;
wire   [31:0] sign_6_fu_415_p3;
wire   [0:0] icmp_ln50_fu_460_p2;
reg   [0:0] icmp_ln50_reg_1031;
wire   [0:0] icmp_ln50_1_fu_466_p2;
reg   [0:0] icmp_ln50_1_reg_1036;
wire   [0:0] icmp_ln50_2_fu_472_p2;
reg   [0:0] icmp_ln50_2_reg_1041;
wire   [0:0] icmp_ln50_3_fu_478_p2;
reg   [0:0] icmp_ln50_3_reg_1046;
wire   [0:0] icmp_ln52_fu_502_p2;
reg   [0:0] icmp_ln52_reg_1051;
wire   [0:0] icmp_ln52_1_fu_508_p2;
reg   [0:0] icmp_ln52_1_reg_1056;
wire   [0:0] if_omega_equal_q_current_fu_528_p2;
reg   [0:0] if_omega_equal_q_current_reg_1061;
wire    ap_CS_fsm_state30;
wire   [0:0] and_ln52_1_fu_579_p2;
reg   [0:0] and_ln52_1_reg_1065;
wire   [287:0] and_ln_fu_599_p4;
wire   [287:0] or_ln54_fu_609_p2;
reg   [287:0] or_ln54_reg_1074;
wire   [31:0] bitcast_ln350_2_fu_626_p1;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln105_fu_663_p2;
reg   [0:0] icmp_ln105_reg_1087;
wire   [0:0] icmp_ln105_4_fu_669_p2;
reg   [0:0] icmp_ln105_4_reg_1092;
wire   [0:0] icmp_ln105_5_fu_675_p2;
reg   [0:0] icmp_ln105_5_reg_1097;
wire   [0:0] icmp_ln105_6_fu_681_p2;
reg   [0:0] icmp_ln105_6_reg_1102;
wire   [0:0] and_ln105_2_fu_701_p2;
reg   [0:0] and_ln105_2_reg_1107;
wire    ap_CS_fsm_state34;
wire   [31:0] sign_7_fu_780_p3;
reg   [31:0] sign_7_reg_1111;
wire   [31:0] select_ln106_2_fu_814_p3;
reg   [31:0] select_ln106_2_reg_1116;
wire    ap_CS_fsm_state67;
reg   [31:0] u_output_Volts_7_reg_1121;
wire    ap_CS_fsm_state101;
reg   [31:0] mul_i_reg_1126;
wire    ap_CS_fsm_state104;
wire   [31:0] bitcast_ln350_fu_845_p1;
wire    ap_CS_fsm_state105;
wire   [0:0] icmp_ln93_fu_881_p2;
reg   [0:0] icmp_ln93_reg_1137;
wire   [0:0] icmp_ln93_4_fu_887_p2;
reg   [0:0] icmp_ln93_4_reg_1142;
wire   [0:0] icmp_ln93_5_fu_893_p2;
reg   [0:0] icmp_ln93_5_reg_1147;
wire   [0:0] icmp_ln93_6_fu_899_p2;
reg   [0:0] icmp_ln93_6_reg_1152;
wire   [31:0] select_ln94_2_fu_951_p3;
reg   [31:0] select_ln94_2_reg_1160;
wire    ap_CS_fsm_state108;
reg   [31:0] u_output_Volts_reg_1165;
wire    ap_CS_fsm_state111;
reg    grp_pow_generic_float_s_fu_138_ap_start;
wire    grp_pow_generic_float_s_fu_138_ap_done;
wire    grp_pow_generic_float_s_fu_138_ap_idle;
wire    grp_pow_generic_float_s_fu_138_ap_ready;
reg   [31:0] grp_pow_generic_float_s_fu_138_base_r;
reg    grp_pow_generic_float_s_fu_158_ap_start;
wire    grp_pow_generic_float_s_fu_158_ap_done;
wire    grp_pow_generic_float_s_fu_158_ap_idle;
wire    grp_pow_generic_float_s_fu_158_ap_ready;
reg   [31:0] grp_pow_generic_float_s_fu_158_base_r;
reg   [287:0] ap_phi_mux_self_0_phi_fu_111_p10;
reg   [287:0] self_0_reg_108;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state106;
wire   [0:0] and_ln93_2_fu_919_p2;
reg   [31:0] ap_phi_mux_u_output_Volts_9_phi_fu_126_p10;
reg   [31:0] u_output_Volts_9_reg_123;
reg    grp_pow_generic_float_s_fu_138_ap_start_reg;
reg   [111:0] ap_NS_fsm;
wire    ap_NS_fsm_state35;
wire    ap_NS_fsm_state71;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state71;
reg    grp_pow_generic_float_s_fu_158_ap_start_reg;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state87;
reg   [31:0] grp_fu_182_p0;
reg   [31:0] grp_fu_182_p1;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state109;
reg   [31:0] grp_fu_193_p0;
reg   [31:0] grp_fu_193_p1;
wire    ap_CS_fsm_state107;
reg   [31:0] grp_fu_199_p0;
reg   [31:0] grp_fu_199_p1;
reg   [31:0] grp_fu_205_p0;
reg   [31:0] grp_fu_211_p0;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state91;
wire   [31:0] bitcast_ln35_fu_262_p1;
wire   [7:0] tmp_60_fu_266_p4;
wire   [22:0] trunc_ln35_fu_276_p1;
wire   [0:0] icmp_ln35_13_fu_286_p2;
wire   [0:0] icmp_ln35_fu_280_p2;
wire   [31:0] bitcast_ln35_6_fu_298_p1;
wire   [7:0] tmp_63_fu_302_p4;
wire   [22:0] trunc_ln35_7_fu_312_p1;
wire   [0:0] icmp_ln35_15_fu_322_p2;
wire   [0:0] icmp_ln35_14_fu_316_p2;
wire   [0:0] grp_fu_193_p2;
wire   [0:0] and_ln35_fu_334_p2;
wire   [0:0] grp_fu_199_p2;
wire   [0:0] grp_fu_205_p2;
wire   [0:0] xor_ln35_fu_347_p2;
wire   [0:0] xor_ln35_fu_353_p2;
wire   [0:0] and_ln35_fu_359_p2;
wire   [0:0] and_ln35_13_fu_365_p2;
wire   [31:0] select_ln35_fu_339_p3;
wire   [0:0] grp_fu_211_p2;
wire   [0:0] and_ln35_14_fu_379_p2;
wire   [0:0] grp_fu_217_p2;
wire   [0:0] grp_fu_223_p2;
wire   [0:0] xor_ln35_fu_392_p2;
wire   [0:0] xor_ln35_fu_398_p2;
wire   [0:0] and_ln35_fu_404_p2;
wire   [0:0] and_ln35_15_fu_410_p2;
wire   [31:0] select_ln35_10_fu_384_p3;
wire   [31:0] bitcast_ln50_fu_424_p1;
wire   [31:0] bitcast_ln50_1_fu_442_p1;
wire   [7:0] tmp_66_fu_428_p4;
wire   [22:0] trunc_ln50_fu_438_p1;
wire   [7:0] tmp_67_fu_446_p4;
wire   [22:0] trunc_ln50_1_fu_456_p1;
wire   [31:0] bitcast_ln52_fu_484_p1;
wire   [7:0] tmp_69_fu_488_p4;
wire   [22:0] trunc_ln52_fu_498_p1;
wire   [0:0] or_ln50_fu_514_p2;
wire   [0:0] or_ln50_1_fu_518_p2;
wire   [0:0] and_ln50_fu_522_p2;
wire   [31:0] bitcast_ln52_1_fu_534_p1;
wire   [7:0] tmp_70_fu_537_p4;
wire   [22:0] trunc_ln52_1_fu_547_p1;
wire   [0:0] icmp_ln52_3_fu_561_p2;
wire   [0:0] icmp_ln52_2_fu_555_p2;
wire   [0:0] or_ln52_fu_551_p2;
wire   [0:0] or_ln52_1_fu_567_p2;
wire   [0:0] and_ln52_fu_573_p2;
wire   [239:0] tmp_10_fu_585_p4;
wire   [39:0] trunc_ln54_fu_595_p1;
wire   [31:0] p_Val2_2_fu_615_p1;
wire   [30:0] p_Result_2_fu_618_p1;
wire   [31:0] zext_ln368_2_fu_622_p1;
wire   [31:0] bitcast_ln105_fu_645_p1;
wire   [7:0] tmp_75_fu_631_p4;
wire   [22:0] trunc_ln105_fu_641_p1;
wire   [7:0] tmp_76_fu_649_p4;
wire   [22:0] trunc_ln105_2_fu_659_p1;
wire   [0:0] or_ln105_fu_687_p2;
wire   [0:0] or_ln105_2_fu_691_p2;
wire   [0:0] and_ln105_fu_695_p2;
wire   [31:0] bitcast_ln35_7_fu_707_p1;
wire   [7:0] tmp_78_fu_710_p4;
wire   [22:0] trunc_ln35_8_fu_720_p1;
wire   [0:0] icmp_ln35_17_fu_730_p2;
wire   [0:0] icmp_ln35_16_fu_724_p2;
wire   [0:0] or_ln35_7_fu_736_p2;
wire   [0:0] and_ln35_16_fu_742_p2;
wire   [0:0] xor_ln35_fu_756_p2;
wire   [0:0] xor_ln35_fu_762_p2;
wire   [0:0] and_ln35_fu_768_p2;
wire   [0:0] and_ln35_17_fu_774_p2;
wire   [31:0] select_ln35_12_fu_748_p3;
wire   [0:0] xor_ln106_fu_796_p2;
wire   [0:0] xor_ln106_fu_802_p2;
wire   [0:0] and_ln106_fu_808_p2;
wire   [31:0] select_ln106_fu_788_p3;
wire   [31:0] p_Val2_s_fu_834_p1;
wire   [30:0] p_Result_s_fu_837_p1;
wire   [31:0] zext_ln368_fu_841_p1;
wire   [31:0] bitcast_ln93_fu_864_p1;
wire   [7:0] tmp_72_fu_850_p4;
wire   [22:0] trunc_ln93_fu_860_p1;
wire   [7:0] tmp_73_fu_867_p4;
wire   [22:0] trunc_ln93_2_fu_877_p1;
wire   [0:0] or_ln93_fu_905_p2;
wire   [0:0] or_ln93_2_fu_909_p2;
wire   [0:0] and_ln93_fu_913_p2;
wire   [0:0] xor_ln94_fu_933_p2;
wire   [0:0] xor_ln94_fu_939_p2;
wire   [0:0] and_ln94_fu_945_p2;
wire   [31:0] select_ln94_fu_925_p3;
reg   [1:0] grp_fu_178_opcode;
reg   [4:0] grp_fu_193_opcode;
reg   [4:0] grp_fu_199_opcode;
reg   [4:0] grp_fu_205_opcode;
reg   [4:0] grp_fu_211_opcode;
reg   [31:0] ap_return_0_preg;
reg   [287:0] ap_return_1_preg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 112'd1;
#0 grp_pow_generic_float_s_fu_138_ap_start_reg = 1'b0;
#0 grp_pow_generic_float_s_fu_158_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 288'd0;
end

uz_FOC_sample_pow_generic_float_s grp_pow_generic_float_s_fu_138(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_float_s_fu_138_ap_start),
    .ap_done(grp_pow_generic_float_s_fu_138_ap_done),
    .ap_idle(grp_pow_generic_float_s_fu_138_ap_idle),
    .ap_ready(grp_pow_generic_float_s_fu_138_ap_ready),
    .ap_ce(1'b1),
    .base_r(grp_pow_generic_float_s_fu_138_base_r),
    .ap_return(grp_pow_generic_float_s_fu_138_ap_return)
);

uz_FOC_sample_pow_generic_float_s grp_pow_generic_float_s_fu_158(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_float_s_fu_158_ap_start),
    .ap_done(grp_pow_generic_float_s_fu_158_ap_done),
    .ap_idle(grp_pow_generic_float_s_fu_158_ap_idle),
    .ap_ready(grp_pow_generic_float_s_fu_158_ap_ready),
    .ap_ce(1'b1),
    .base_r(grp_pow_generic_float_s_fu_158_base_r),
    .ap_return(grp_pow_generic_float_s_fu_158_ap_return)
);

uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_234),
    .din1(reg_239),
    .opcode(grp_fu_178_opcode),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_182_p0),
    .din1(grp_fu_182_p1),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

uz_FOC_sample_fdiv_32ns_32ns_32_9_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_9_no_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(V_dc_volts),
    .din1(32'd1071494103),
    .ce(1'b1),
    .dout(grp_fu_187_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_193_p0),
    .din1(grp_fu_193_p1),
    .ce(1'b1),
    .opcode(grp_fu_193_opcode),
    .dout(grp_fu_193_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_199_p0),
    .din1(grp_fu_199_p1),
    .ce(1'b1),
    .opcode(grp_fu_199_opcode),
    .dout(grp_fu_199_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_205_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_205_opcode),
    .dout(grp_fu_205_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_211_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_211_opcode),
    .dout(grp_fu_211_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(i_actual_Ampere_1),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd8),
    .dout(grp_fu_217_p2)
);

uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(i_actual_Ampere_1),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_223_p2)
);

uz_FOC_sample_fsqrt_32ns_32ns_32_8_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsqrt_32ns_32ns_32_8_no_dsp_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_244),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state102)) begin
            ap_return_0_preg <= ap_phi_mux_u_output_Volts_9_phi_fu_126_p10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
        ap_return_1_preg[10] <= 1'b0;
        ap_return_1_preg[11] <= 1'b0;
        ap_return_1_preg[12] <= 1'b0;
        ap_return_1_preg[13] <= 1'b0;
        ap_return_1_preg[14] <= 1'b0;
        ap_return_1_preg[15] <= 1'b0;
        ap_return_1_preg[16] <= 1'b0;
        ap_return_1_preg[17] <= 1'b0;
        ap_return_1_preg[18] <= 1'b0;
        ap_return_1_preg[19] <= 1'b0;
        ap_return_1_preg[20] <= 1'b0;
        ap_return_1_preg[21] <= 1'b0;
        ap_return_1_preg[22] <= 1'b0;
        ap_return_1_preg[23] <= 1'b0;
        ap_return_1_preg[24] <= 1'b0;
        ap_return_1_preg[25] <= 1'b0;
        ap_return_1_preg[26] <= 1'b0;
        ap_return_1_preg[27] <= 1'b0;
        ap_return_1_preg[28] <= 1'b0;
        ap_return_1_preg[29] <= 1'b0;
        ap_return_1_preg[30] <= 1'b0;
        ap_return_1_preg[31] <= 1'b0;
        ap_return_1_preg[32] <= 1'b0;
        ap_return_1_preg[33] <= 1'b0;
        ap_return_1_preg[34] <= 1'b0;
        ap_return_1_preg[35] <= 1'b0;
        ap_return_1_preg[36] <= 1'b0;
        ap_return_1_preg[37] <= 1'b0;
        ap_return_1_preg[38] <= 1'b0;
        ap_return_1_preg[39] <= 1'b0;
        ap_return_1_preg[40] <= 1'b0;
        ap_return_1_preg[48] <= 1'b0;
        ap_return_1_preg[49] <= 1'b0;
        ap_return_1_preg[50] <= 1'b0;
        ap_return_1_preg[51] <= 1'b0;
        ap_return_1_preg[52] <= 1'b0;
        ap_return_1_preg[53] <= 1'b0;
        ap_return_1_preg[54] <= 1'b0;
        ap_return_1_preg[55] <= 1'b0;
        ap_return_1_preg[56] <= 1'b0;
        ap_return_1_preg[57] <= 1'b0;
        ap_return_1_preg[58] <= 1'b0;
        ap_return_1_preg[59] <= 1'b0;
        ap_return_1_preg[60] <= 1'b0;
        ap_return_1_preg[61] <= 1'b0;
        ap_return_1_preg[62] <= 1'b0;
        ap_return_1_preg[63] <= 1'b0;
        ap_return_1_preg[64] <= 1'b0;
        ap_return_1_preg[65] <= 1'b0;
        ap_return_1_preg[66] <= 1'b0;
        ap_return_1_preg[67] <= 1'b0;
        ap_return_1_preg[68] <= 1'b0;
        ap_return_1_preg[69] <= 1'b0;
        ap_return_1_preg[70] <= 1'b0;
        ap_return_1_preg[71] <= 1'b0;
        ap_return_1_preg[72] <= 1'b0;
        ap_return_1_preg[73] <= 1'b0;
        ap_return_1_preg[74] <= 1'b0;
        ap_return_1_preg[75] <= 1'b0;
        ap_return_1_preg[76] <= 1'b0;
        ap_return_1_preg[77] <= 1'b0;
        ap_return_1_preg[78] <= 1'b0;
        ap_return_1_preg[79] <= 1'b0;
        ap_return_1_preg[80] <= 1'b0;
        ap_return_1_preg[81] <= 1'b0;
        ap_return_1_preg[82] <= 1'b0;
        ap_return_1_preg[83] <= 1'b0;
        ap_return_1_preg[84] <= 1'b0;
        ap_return_1_preg[85] <= 1'b0;
        ap_return_1_preg[86] <= 1'b0;
        ap_return_1_preg[87] <= 1'b0;
        ap_return_1_preg[88] <= 1'b0;
        ap_return_1_preg[89] <= 1'b0;
        ap_return_1_preg[90] <= 1'b0;
        ap_return_1_preg[91] <= 1'b0;
        ap_return_1_preg[92] <= 1'b0;
        ap_return_1_preg[93] <= 1'b0;
        ap_return_1_preg[94] <= 1'b0;
        ap_return_1_preg[95] <= 1'b0;
        ap_return_1_preg[96] <= 1'b0;
        ap_return_1_preg[97] <= 1'b0;
        ap_return_1_preg[98] <= 1'b0;
        ap_return_1_preg[99] <= 1'b0;
        ap_return_1_preg[100] <= 1'b0;
        ap_return_1_preg[101] <= 1'b0;
        ap_return_1_preg[102] <= 1'b0;
        ap_return_1_preg[103] <= 1'b0;
        ap_return_1_preg[104] <= 1'b0;
        ap_return_1_preg[105] <= 1'b0;
        ap_return_1_preg[106] <= 1'b0;
        ap_return_1_preg[107] <= 1'b0;
        ap_return_1_preg[108] <= 1'b0;
        ap_return_1_preg[109] <= 1'b0;
        ap_return_1_preg[110] <= 1'b0;
        ap_return_1_preg[111] <= 1'b0;
        ap_return_1_preg[112] <= 1'b0;
        ap_return_1_preg[113] <= 1'b0;
        ap_return_1_preg[114] <= 1'b0;
        ap_return_1_preg[115] <= 1'b0;
        ap_return_1_preg[116] <= 1'b0;
        ap_return_1_preg[117] <= 1'b0;
        ap_return_1_preg[118] <= 1'b0;
        ap_return_1_preg[119] <= 1'b0;
        ap_return_1_preg[120] <= 1'b0;
        ap_return_1_preg[121] <= 1'b0;
        ap_return_1_preg[122] <= 1'b0;
        ap_return_1_preg[123] <= 1'b0;
        ap_return_1_preg[124] <= 1'b0;
        ap_return_1_preg[125] <= 1'b0;
        ap_return_1_preg[126] <= 1'b0;
        ap_return_1_preg[127] <= 1'b0;
        ap_return_1_preg[128] <= 1'b0;
        ap_return_1_preg[129] <= 1'b0;
        ap_return_1_preg[130] <= 1'b0;
        ap_return_1_preg[131] <= 1'b0;
        ap_return_1_preg[132] <= 1'b0;
        ap_return_1_preg[133] <= 1'b0;
        ap_return_1_preg[134] <= 1'b0;
        ap_return_1_preg[135] <= 1'b0;
        ap_return_1_preg[136] <= 1'b0;
        ap_return_1_preg[137] <= 1'b0;
        ap_return_1_preg[138] <= 1'b0;
        ap_return_1_preg[139] <= 1'b0;
        ap_return_1_preg[140] <= 1'b0;
        ap_return_1_preg[141] <= 1'b0;
        ap_return_1_preg[142] <= 1'b0;
        ap_return_1_preg[143] <= 1'b0;
        ap_return_1_preg[144] <= 1'b0;
        ap_return_1_preg[145] <= 1'b0;
        ap_return_1_preg[146] <= 1'b0;
        ap_return_1_preg[147] <= 1'b0;
        ap_return_1_preg[148] <= 1'b0;
        ap_return_1_preg[149] <= 1'b0;
        ap_return_1_preg[150] <= 1'b0;
        ap_return_1_preg[151] <= 1'b0;
        ap_return_1_preg[152] <= 1'b0;
        ap_return_1_preg[153] <= 1'b0;
        ap_return_1_preg[154] <= 1'b0;
        ap_return_1_preg[155] <= 1'b0;
        ap_return_1_preg[156] <= 1'b0;
        ap_return_1_preg[157] <= 1'b0;
        ap_return_1_preg[158] <= 1'b0;
        ap_return_1_preg[159] <= 1'b0;
        ap_return_1_preg[160] <= 1'b0;
        ap_return_1_preg[161] <= 1'b0;
        ap_return_1_preg[162] <= 1'b0;
        ap_return_1_preg[163] <= 1'b0;
        ap_return_1_preg[164] <= 1'b0;
        ap_return_1_preg[165] <= 1'b0;
        ap_return_1_preg[166] <= 1'b0;
        ap_return_1_preg[167] <= 1'b0;
        ap_return_1_preg[168] <= 1'b0;
        ap_return_1_preg[169] <= 1'b0;
        ap_return_1_preg[170] <= 1'b0;
        ap_return_1_preg[171] <= 1'b0;
        ap_return_1_preg[172] <= 1'b0;
        ap_return_1_preg[173] <= 1'b0;
        ap_return_1_preg[174] <= 1'b0;
        ap_return_1_preg[175] <= 1'b0;
        ap_return_1_preg[176] <= 1'b0;
        ap_return_1_preg[177] <= 1'b0;
        ap_return_1_preg[178] <= 1'b0;
        ap_return_1_preg[179] <= 1'b0;
        ap_return_1_preg[180] <= 1'b0;
        ap_return_1_preg[181] <= 1'b0;
        ap_return_1_preg[182] <= 1'b0;
        ap_return_1_preg[183] <= 1'b0;
        ap_return_1_preg[184] <= 1'b0;
        ap_return_1_preg[185] <= 1'b0;
        ap_return_1_preg[186] <= 1'b0;
        ap_return_1_preg[187] <= 1'b0;
        ap_return_1_preg[188] <= 1'b0;
        ap_return_1_preg[189] <= 1'b0;
        ap_return_1_preg[190] <= 1'b0;
        ap_return_1_preg[191] <= 1'b0;
        ap_return_1_preg[192] <= 1'b0;
        ap_return_1_preg[193] <= 1'b0;
        ap_return_1_preg[194] <= 1'b0;
        ap_return_1_preg[195] <= 1'b0;
        ap_return_1_preg[196] <= 1'b0;
        ap_return_1_preg[197] <= 1'b0;
        ap_return_1_preg[198] <= 1'b0;
        ap_return_1_preg[199] <= 1'b0;
        ap_return_1_preg[200] <= 1'b0;
        ap_return_1_preg[201] <= 1'b0;
        ap_return_1_preg[202] <= 1'b0;
        ap_return_1_preg[203] <= 1'b0;
        ap_return_1_preg[204] <= 1'b0;
        ap_return_1_preg[205] <= 1'b0;
        ap_return_1_preg[206] <= 1'b0;
        ap_return_1_preg[207] <= 1'b0;
        ap_return_1_preg[208] <= 1'b0;
        ap_return_1_preg[209] <= 1'b0;
        ap_return_1_preg[210] <= 1'b0;
        ap_return_1_preg[211] <= 1'b0;
        ap_return_1_preg[212] <= 1'b0;
        ap_return_1_preg[213] <= 1'b0;
        ap_return_1_preg[214] <= 1'b0;
        ap_return_1_preg[215] <= 1'b0;
        ap_return_1_preg[216] <= 1'b0;
        ap_return_1_preg[217] <= 1'b0;
        ap_return_1_preg[218] <= 1'b0;
        ap_return_1_preg[219] <= 1'b0;
        ap_return_1_preg[220] <= 1'b0;
        ap_return_1_preg[221] <= 1'b0;
        ap_return_1_preg[222] <= 1'b0;
        ap_return_1_preg[223] <= 1'b0;
        ap_return_1_preg[224] <= 1'b0;
        ap_return_1_preg[225] <= 1'b0;
        ap_return_1_preg[226] <= 1'b0;
        ap_return_1_preg[227] <= 1'b0;
        ap_return_1_preg[228] <= 1'b0;
        ap_return_1_preg[229] <= 1'b0;
        ap_return_1_preg[230] <= 1'b0;
        ap_return_1_preg[231] <= 1'b0;
        ap_return_1_preg[232] <= 1'b0;
        ap_return_1_preg[233] <= 1'b0;
        ap_return_1_preg[234] <= 1'b0;
        ap_return_1_preg[235] <= 1'b0;
        ap_return_1_preg[236] <= 1'b0;
        ap_return_1_preg[237] <= 1'b0;
        ap_return_1_preg[238] <= 1'b0;
        ap_return_1_preg[239] <= 1'b0;
        ap_return_1_preg[240] <= 1'b0;
        ap_return_1_preg[241] <= 1'b0;
        ap_return_1_preg[242] <= 1'b0;
        ap_return_1_preg[243] <= 1'b0;
        ap_return_1_preg[244] <= 1'b0;
        ap_return_1_preg[245] <= 1'b0;
        ap_return_1_preg[246] <= 1'b0;
        ap_return_1_preg[247] <= 1'b0;
        ap_return_1_preg[248] <= 1'b0;
        ap_return_1_preg[249] <= 1'b0;
        ap_return_1_preg[250] <= 1'b0;
        ap_return_1_preg[251] <= 1'b0;
        ap_return_1_preg[252] <= 1'b0;
        ap_return_1_preg[253] <= 1'b0;
        ap_return_1_preg[254] <= 1'b0;
        ap_return_1_preg[255] <= 1'b0;
        ap_return_1_preg[256] <= 1'b0;
        ap_return_1_preg[257] <= 1'b0;
        ap_return_1_preg[258] <= 1'b0;
        ap_return_1_preg[259] <= 1'b0;
        ap_return_1_preg[260] <= 1'b0;
        ap_return_1_preg[261] <= 1'b0;
        ap_return_1_preg[262] <= 1'b0;
        ap_return_1_preg[263] <= 1'b0;
        ap_return_1_preg[264] <= 1'b0;
        ap_return_1_preg[265] <= 1'b0;
        ap_return_1_preg[266] <= 1'b0;
        ap_return_1_preg[267] <= 1'b0;
        ap_return_1_preg[268] <= 1'b0;
        ap_return_1_preg[269] <= 1'b0;
        ap_return_1_preg[270] <= 1'b0;
        ap_return_1_preg[271] <= 1'b0;
        ap_return_1_preg[272] <= 1'b0;
        ap_return_1_preg[273] <= 1'b0;
        ap_return_1_preg[274] <= 1'b0;
        ap_return_1_preg[275] <= 1'b0;
        ap_return_1_preg[276] <= 1'b0;
        ap_return_1_preg[277] <= 1'b0;
        ap_return_1_preg[278] <= 1'b0;
        ap_return_1_preg[279] <= 1'b0;
        ap_return_1_preg[280] <= 1'b0;
        ap_return_1_preg[281] <= 1'b0;
        ap_return_1_preg[282] <= 1'b0;
        ap_return_1_preg[283] <= 1'b0;
        ap_return_1_preg[284] <= 1'b0;
        ap_return_1_preg[285] <= 1'b0;
        ap_return_1_preg[286] <= 1'b0;
        ap_return_1_preg[287] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state102)) begin
                        ap_return_1_preg[40 : 0] <= ap_phi_mux_self_0_phi_fu_111_p10[40 : 0];
            ap_return_1_preg[287 : 48] <= ap_phi_mux_self_0_phi_fu_111_p10[287 : 48];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_float_s_fu_138_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state71) & (1'b1 == ap_CS_fsm_state70)) | ((1'b1 == ap_NS_fsm_state35) & (1'b1 == ap_CS_fsm_state34)))) begin
            grp_pow_generic_float_s_fu_138_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_float_s_fu_138_ap_ready == 1'b1)) begin
            grp_pow_generic_float_s_fu_138_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_float_s_fu_158_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state71) & (1'b1 == ap_CS_fsm_state70))) begin
            grp_pow_generic_float_s_fu_158_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_float_s_fu_158_ap_ready == 1'b1)) begin
            grp_pow_generic_float_s_fu_158_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln52_1_fu_579_p2) & (1'b1 == ap_CS_fsm_state30))) begin
                self_0_reg_108[40 : 0] <= and_ln_fu_599_p4[40 : 0];
        self_0_reg_108[287 : 48] <= and_ln_fu_599_p4[287 : 48];
    end else if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state112) | ((1'd0 == and_ln93_2_fu_919_p2) & (1'b1 == ap_CS_fsm_state106)) | ((1'd1 == and_ln105_2_reg_1107) & (1'd1 == and_ln52_1_reg_1065) & (if_omega_equal_q_current_reg_1061 == 1'd0) & (1'b1 == ap_CS_fsm_state102)))) begin
                self_0_reg_108[40 : 0] <= or_ln54_reg_1074[40 : 0];
        self_0_reg_108[287 : 48] <= or_ln54_reg_1074[287 : 48];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == and_ln93_2_fu_919_p2) & (1'b1 == ap_CS_fsm_state106)) | ((1'd0 == and_ln52_1_fu_579_p2) & (1'b1 == ap_CS_fsm_state30)))) begin
        u_output_Volts_9_reg_123 <= u_input_Volts_0;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        u_output_Volts_9_reg_123 <= reg_255;
    end else if (((1'd1 == and_ln105_2_reg_1107) & (1'd1 == and_ln52_1_reg_1065) & (if_omega_equal_q_current_reg_1061 == 1'd0) & (1'b1 == ap_CS_fsm_state102))) begin
        u_output_Volts_9_reg_123 <= u_output_Volts_7_reg_1121;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        u_output_Volts_9_reg_123 <= u_output_Volts_reg_1165;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        U_SV_max_reg_1000 <= grp_fu_187_p2;
        or_ln35_6_reg_1015 <= or_ln35_6_fu_328_p2;
        or_ln35_reg_1009 <= or_ln35_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        and_ln105_2_reg_1107 <= and_ln105_2_fu_701_p2;
        sign_7_reg_1111[29 : 23] <= sign_7_fu_780_p3[29 : 23];
sign_7_reg_1111[31] <= sign_7_fu_780_p3[31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        and_ln52_1_reg_1065 <= and_ln52_1_fu_579_p2;
        if_omega_equal_q_current_reg_1061 <= if_omega_equal_q_current_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        icmp_ln105_4_reg_1092 <= icmp_ln105_4_fu_669_p2;
        icmp_ln105_5_reg_1097 <= icmp_ln105_5_fu_675_p2;
        icmp_ln105_6_reg_1102 <= icmp_ln105_6_fu_681_p2;
        icmp_ln105_reg_1087 <= icmp_ln105_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        icmp_ln50_1_reg_1036 <= icmp_ln50_1_fu_466_p2;
        icmp_ln50_2_reg_1041 <= icmp_ln50_2_fu_472_p2;
        icmp_ln50_3_reg_1046 <= icmp_ln50_3_fu_478_p2;
        icmp_ln50_reg_1031 <= icmp_ln50_fu_460_p2;
        icmp_ln52_1_reg_1056 <= icmp_ln52_1_fu_508_p2;
        icmp_ln52_reg_1051 <= icmp_ln52_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        icmp_ln93_4_reg_1142 <= icmp_ln93_4_fu_887_p2;
        icmp_ln93_5_reg_1147 <= icmp_ln93_5_fu_893_p2;
        icmp_ln93_6_reg_1152 <= icmp_ln93_6_fu_899_p2;
        icmp_ln93_reg_1137 <= icmp_ln93_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        mul_i_reg_1126 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln52_1_fu_579_p2) & (1'b1 == ap_CS_fsm_state30))) begin
        or_ln54_reg_1074[39 : 0] <= or_ln54_fu_609_p2[39 : 0];
or_ln54_reg_1074[287 : 48] <= or_ln54_fu_609_p2[287 : 48];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_234 <= grp_pow_generic_float_s_fu_138_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_239 <= grp_pow_generic_float_s_fu_158_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_244 <= grp_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_249 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_255 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        select_ln106_2_reg_1116[1 : 0] <= select_ln106_2_fu_814_p3[1 : 0];
select_ln106_2_reg_1116[5 : 4] <= select_ln106_2_fu_814_p3[5 : 4];
select_ln106_2_reg_1116[9 : 8] <= select_ln106_2_fu_814_p3[9 : 8];
select_ln106_2_reg_1116[13 : 12] <= select_ln106_2_fu_814_p3[13 : 12];
select_ln106_2_reg_1116[17 : 16] <= select_ln106_2_fu_814_p3[17 : 16];
select_ln106_2_reg_1116[22 : 20] <= select_ln106_2_fu_814_p3[22 : 20];
select_ln106_2_reg_1116[29 : 24] <= select_ln106_2_fu_814_p3[29 : 24];
select_ln106_2_reg_1116[31] <= select_ln106_2_fu_814_p3[31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        select_ln94_2_reg_1160[1 : 0] <= select_ln94_2_fu_951_p3[1 : 0];
select_ln94_2_reg_1160[5 : 4] <= select_ln94_2_fu_951_p3[5 : 4];
select_ln94_2_reg_1160[9 : 8] <= select_ln94_2_fu_951_p3[9 : 8];
select_ln94_2_reg_1160[13 : 12] <= select_ln94_2_fu_951_p3[13 : 12];
select_ln94_2_reg_1160[17 : 16] <= select_ln94_2_fu_951_p3[17 : 16];
select_ln94_2_reg_1160[22 : 20] <= select_ln94_2_fu_951_p3[22 : 20];
select_ln94_2_reg_1160[29 : 24] <= select_ln94_2_fu_951_p3[29 : 24];
select_ln94_2_reg_1160[31] <= select_ln94_2_fu_951_p3[31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        u_output_Volts_7_reg_1121 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        u_output_Volts_reg_1165 <= grp_fu_182_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state102) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln105_2_reg_1107) & (1'd1 == and_ln52_1_reg_1065) & (if_omega_equal_q_current_reg_1061 == 1'd0) & (1'b1 == ap_CS_fsm_state102))) begin
        ap_phi_mux_self_0_phi_fu_111_p10 = or_ln54_reg_1074;
    end else begin
        ap_phi_mux_self_0_phi_fu_111_p10 = self_0_reg_108;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln105_2_reg_1107) & (1'd1 == and_ln52_1_reg_1065) & (if_omega_equal_q_current_reg_1061 == 1'd0) & (1'b1 == ap_CS_fsm_state102))) begin
        ap_phi_mux_u_output_Volts_9_phi_fu_126_p10 = u_output_Volts_7_reg_1121;
    end else begin
        ap_phi_mux_u_output_Volts_9_phi_fu_126_p10 = u_output_Volts_9_reg_123;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        ap_return_0 = ap_phi_mux_u_output_Volts_9_phi_fu_126_p10;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        ap_return_1 = ap_phi_mux_self_0_phi_fu_111_p10;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state51))) begin
        grp_fu_178_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_178_opcode = 2'd0;
    end else begin
        grp_fu_178_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        grp_fu_182_p0 = select_ln94_2_reg_1160;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_182_p0 = select_ln106_2_reg_1116;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state63))) begin
        grp_fu_182_p0 = sign_7_reg_1111;
    end else if ((((1'd1 == and_ln52_1_fu_579_p2) & (if_omega_equal_q_current_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((1'd1 == and_ln52_1_fu_579_p2) & (if_omega_equal_q_current_fu_528_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30)))) begin
        grp_fu_182_p0 = U_SV_max_reg_1000;
    end else begin
        grp_fu_182_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state68))) begin
        grp_fu_182_p1 = U_SV_max_reg_1000;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state63))) begin
        grp_fu_182_p1 = reg_249;
    end else if ((((1'd1 == and_ln52_1_fu_579_p2) & (if_omega_equal_q_current_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((1'd1 == and_ln52_1_fu_579_p2) & (if_omega_equal_q_current_fu_528_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30)))) begin
        grp_fu_182_p1 = 32'd1064514355;
    end else begin
        grp_fu_182_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_193_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_193_opcode = 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state28) | ((1'd1 == and_ln105_2_fu_701_p2) & (1'b1 == ap_CS_fsm_state34)))) begin
        grp_fu_193_opcode = 5'd4;
    end else begin
        grp_fu_193_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_193_p0 = u_input_Volts_0;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_fu_193_p0 = bitcast_ln350_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_193_p0 = u_input_Volts_1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_193_p0 = bitcast_ln350_2_fu_626_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_193_p0 = sign_fu_370_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_193_p0 = omega_el_rad_per_sec;
    end else begin
        grp_fu_193_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_fu_193_p1 = mul_i_reg_1126;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_193_p1 = reg_255;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_193_p1 = sign_6_fu_415_p3;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_193_p1 = 32'd0;
    end else begin
        grp_fu_193_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_199_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_199_opcode = 5'd2;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state28) | ((1'd1 == and_ln105_2_fu_701_p2) & (1'b1 == ap_CS_fsm_state34)))) begin
        grp_fu_199_opcode = 5'd8;
    end else begin
        grp_fu_199_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_199_p0 = u_input_Volts_1;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_199_p0 = u_input_Volts_0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_199_p0 = reg_249;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_199_p0 = omega_el_rad_per_sec;
    end else begin
        grp_fu_199_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_199_p1 = U_SV_max_reg_1000;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_199_p1 = 32'd0;
    end else begin
        grp_fu_199_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_205_opcode = 5'd8;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state28) | ((1'd1 == and_ln105_2_fu_701_p2) & (1'b1 == ap_CS_fsm_state34)))) begin
        grp_fu_205_opcode = 5'd1;
    end else begin
        grp_fu_205_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_205_p0 = u_input_Volts_1;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_205_p0 = u_input_Volts_0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_205_p0 = omega_el_rad_per_sec;
    end else begin
        grp_fu_205_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_211_opcode = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_211_opcode = 5'd4;
    end else begin
        grp_fu_211_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_211_p0 = u_input_Volts_0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_211_p0 = i_actual_Ampere_1;
    end else begin
        grp_fu_211_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_pow_generic_float_s_fu_138_ap_start = 1'b1;
    end else begin
        grp_pow_generic_float_s_fu_138_ap_start = grp_pow_generic_float_s_fu_138_ap_start_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state35))) begin
        grp_pow_generic_float_s_fu_138_base_r = U_SV_max_reg_1000;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_pow_generic_float_s_fu_138_base_r = u_input_Volts_0;
    end else begin
        grp_pow_generic_float_s_fu_138_base_r = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_pow_generic_float_s_fu_158_ap_start = 1'b1;
    end else begin
        grp_pow_generic_float_s_fu_158_ap_start = grp_pow_generic_float_s_fu_158_ap_start_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_pow_generic_float_s_fu_158_base_r = reg_255;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_pow_generic_float_s_fu_158_base_r = u_input_Volts_1;
    end else begin
        grp_pow_generic_float_s_fu_158_base_r = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'd1 == and_ln52_1_fu_579_p2) & (if_omega_equal_q_current_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else if (((1'd1 == and_ln52_1_fu_579_p2) & (if_omega_equal_q_current_fu_528_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'd1 == and_ln105_2_fu_701_p2) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            if (((1'd1 == and_ln93_2_fu_919_p2) & (1'b1 == ap_CS_fsm_state106))) begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln105_2_fu_701_p2 = (grp_fu_193_p2 & and_ln105_fu_695_p2);

assign and_ln105_fu_695_p2 = (or_ln105_fu_687_p2 & or_ln105_2_fu_691_p2);

assign and_ln106_fu_808_p2 = (xor_ln106_fu_802_p2 & xor_ln106_fu_796_p2);

assign and_ln35_13_fu_365_p2 = (or_ln35_reg_1009 & and_ln35_fu_359_p2);

assign and_ln35_14_fu_379_p2 = (or_ln35_6_reg_1015 & grp_fu_211_p2);

assign and_ln35_15_fu_410_p2 = (or_ln35_6_reg_1015 & and_ln35_fu_404_p2);

assign and_ln35_16_fu_742_p2 = (or_ln35_7_fu_736_p2 & grp_fu_199_p2);

assign and_ln35_17_fu_774_p2 = (or_ln35_7_fu_736_p2 & and_ln35_fu_768_p2);

assign and_ln35_fu_334_p2 = (or_ln35_reg_1009 & grp_fu_193_p2);

assign and_ln35_fu_359_p2 = (xor_ln35_fu_353_p2 & xor_ln35_fu_347_p2);

assign and_ln35_fu_404_p2 = (xor_ln35_fu_398_p2 & xor_ln35_fu_392_p2);

assign and_ln35_fu_768_p2 = (xor_ln35_fu_762_p2 & xor_ln35_fu_756_p2);

assign and_ln50_fu_522_p2 = (or_ln50_fu_514_p2 & or_ln50_1_fu_518_p2);

assign and_ln52_1_fu_579_p2 = (grp_fu_199_p2 & and_ln52_fu_573_p2);

assign and_ln52_fu_573_p2 = (or_ln52_fu_551_p2 & or_ln52_1_fu_567_p2);

assign and_ln93_2_fu_919_p2 = (grp_fu_193_p2 & and_ln93_fu_913_p2);

assign and_ln93_fu_913_p2 = (or_ln93_fu_905_p2 & or_ln93_2_fu_909_p2);

assign and_ln94_fu_945_p2 = (xor_ln94_fu_939_p2 & xor_ln94_fu_933_p2);

assign and_ln_fu_599_p4 = {{{tmp_10_fu_585_p4}, {8'd0}}, {trunc_ln54_fu_595_p1}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_NS_fsm_state35 = ap_NS_fsm[32'd34];

assign ap_NS_fsm_state71 = ap_NS_fsm[32'd70];

assign bitcast_ln105_fu_645_p1 = reg_255;

assign bitcast_ln350_2_fu_626_p1 = zext_ln368_2_fu_622_p1;

assign bitcast_ln350_fu_845_p1 = zext_ln368_fu_841_p1;

assign bitcast_ln35_6_fu_298_p1 = i_actual_Ampere_1;

assign bitcast_ln35_7_fu_707_p1 = u_input_Volts_0;

assign bitcast_ln35_fu_262_p1 = omega_el_rad_per_sec;

assign bitcast_ln50_1_fu_442_p1 = sign_6_fu_415_p3;

assign bitcast_ln50_fu_424_p1 = sign_fu_370_p3;

assign bitcast_ln52_1_fu_534_p1 = U_SV_max_reg_1000;

assign bitcast_ln52_fu_484_p1 = reg_249;

assign bitcast_ln93_fu_864_p1 = mul_i_reg_1126;

assign icmp_ln105_4_fu_669_p2 = ((trunc_ln105_fu_641_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln105_5_fu_675_p2 = ((tmp_76_fu_649_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln105_6_fu_681_p2 = ((trunc_ln105_2_fu_659_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_663_p2 = ((tmp_75_fu_631_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_13_fu_286_p2 = ((trunc_ln35_fu_276_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_14_fu_316_p2 = ((tmp_63_fu_302_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_15_fu_322_p2 = ((trunc_ln35_7_fu_312_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_16_fu_724_p2 = ((tmp_78_fu_710_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_17_fu_730_p2 = ((trunc_ln35_8_fu_720_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_280_p2 = ((tmp_60_fu_266_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_466_p2 = ((trunc_ln50_fu_438_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_472_p2 = ((tmp_67_fu_446_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_3_fu_478_p2 = ((trunc_ln50_1_fu_456_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_460_p2 = ((tmp_66_fu_428_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_508_p2 = ((trunc_ln52_fu_498_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_555_p2 = ((tmp_70_fu_537_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_561_p2 = ((trunc_ln52_1_fu_547_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_502_p2 = ((tmp_69_fu_488_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln93_4_fu_887_p2 = ((trunc_ln93_fu_860_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_5_fu_893_p2 = ((tmp_73_fu_867_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln93_6_fu_899_p2 = ((trunc_ln93_2_fu_877_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_881_p2 = ((tmp_72_fu_850_p4 != 8'd255) ? 1'b1 : 1'b0);

assign if_omega_equal_q_current_fu_528_p2 = (grp_fu_193_p2 & and_ln50_fu_522_p2);

assign or_ln105_2_fu_691_p2 = (icmp_ln105_6_reg_1102 | icmp_ln105_5_reg_1097);

assign or_ln105_fu_687_p2 = (icmp_ln105_reg_1087 | icmp_ln105_4_reg_1092);

assign or_ln35_6_fu_328_p2 = (icmp_ln35_15_fu_322_p2 | icmp_ln35_14_fu_316_p2);

assign or_ln35_7_fu_736_p2 = (icmp_ln35_17_fu_730_p2 | icmp_ln35_16_fu_724_p2);

assign or_ln35_fu_292_p2 = (icmp_ln35_fu_280_p2 | icmp_ln35_13_fu_286_p2);

assign or_ln50_1_fu_518_p2 = (icmp_ln50_3_reg_1046 | icmp_ln50_2_reg_1041);

assign or_ln50_fu_514_p2 = (icmp_ln50_reg_1031 | icmp_ln50_1_reg_1036);

assign or_ln52_1_fu_567_p2 = (icmp_ln52_3_fu_561_p2 | icmp_ln52_2_fu_555_p2);

assign or_ln52_fu_551_p2 = (icmp_ln52_reg_1051 | icmp_ln52_1_reg_1056);

assign or_ln54_fu_609_p2 = (288'd1099511627776 | and_ln_fu_599_p4);

assign or_ln93_2_fu_909_p2 = (icmp_ln93_6_reg_1152 | icmp_ln93_5_reg_1147);

assign or_ln93_fu_905_p2 = (icmp_ln93_reg_1137 | icmp_ln93_4_reg_1142);

assign p_Result_2_fu_618_p1 = p_Val2_2_fu_615_p1[30:0];

assign p_Result_s_fu_837_p1 = p_Val2_s_fu_834_p1[30:0];

assign p_Val2_2_fu_615_p1 = u_input_Volts_1;

assign p_Val2_s_fu_834_p1 = u_input_Volts_0;

assign select_ln106_2_fu_814_p3 = ((and_ln106_fu_808_p2[0:0] === 1'b1) ? select_ln106_fu_788_p3 : 32'd0);

assign select_ln106_fu_788_p3 = ((grp_fu_193_p2[0:0] === 1'b1) ? 32'd3211998003 : 32'd1064514355);

assign select_ln35_10_fu_384_p3 = ((and_ln35_14_fu_379_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln35_12_fu_748_p3 = ((and_ln35_16_fu_742_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln35_fu_339_p3 = ((and_ln35_fu_334_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln94_2_fu_951_p3 = ((and_ln94_fu_945_p2[0:0] === 1'b1) ? select_ln94_fu_925_p3 : 32'd0);

assign select_ln94_fu_925_p3 = ((grp_fu_193_p2[0:0] === 1'b1) ? 32'd3211998003 : 32'd1064514355);

assign sign_6_fu_415_p3 = ((and_ln35_15_fu_410_p2[0:0] === 1'b1) ? select_ln35_10_fu_384_p3 : 32'd0);

assign sign_7_fu_780_p3 = ((and_ln35_17_fu_774_p2[0:0] === 1'b1) ? select_ln35_12_fu_748_p3 : 32'd0);

assign sign_fu_370_p3 = ((and_ln35_13_fu_365_p2[0:0] === 1'b1) ? select_ln35_fu_339_p3 : 32'd0);

assign tmp_10_fu_585_p4 = {{p_read[287:48]}};

assign tmp_60_fu_266_p4 = {{bitcast_ln35_fu_262_p1[30:23]}};

assign tmp_63_fu_302_p4 = {{bitcast_ln35_6_fu_298_p1[30:23]}};

assign tmp_66_fu_428_p4 = {{bitcast_ln50_fu_424_p1[30:23]}};

assign tmp_67_fu_446_p4 = {{bitcast_ln50_1_fu_442_p1[30:23]}};

assign tmp_69_fu_488_p4 = {{bitcast_ln52_fu_484_p1[30:23]}};

assign tmp_70_fu_537_p4 = {{bitcast_ln52_1_fu_534_p1[30:23]}};

assign tmp_72_fu_850_p4 = {{p_Val2_s_fu_834_p1[30:23]}};

assign tmp_73_fu_867_p4 = {{bitcast_ln93_fu_864_p1[30:23]}};

assign tmp_75_fu_631_p4 = {{p_Val2_2_fu_615_p1[30:23]}};

assign tmp_76_fu_649_p4 = {{bitcast_ln105_fu_645_p1[30:23]}};

assign tmp_78_fu_710_p4 = {{bitcast_ln35_7_fu_707_p1[30:23]}};

assign trunc_ln105_2_fu_659_p1 = bitcast_ln105_fu_645_p1[22:0];

assign trunc_ln105_fu_641_p1 = p_Val2_2_fu_615_p1[22:0];

assign trunc_ln35_7_fu_312_p1 = bitcast_ln35_6_fu_298_p1[22:0];

assign trunc_ln35_8_fu_720_p1 = bitcast_ln35_7_fu_707_p1[22:0];

assign trunc_ln35_fu_276_p1 = bitcast_ln35_fu_262_p1[22:0];

assign trunc_ln50_1_fu_456_p1 = bitcast_ln50_1_fu_442_p1[22:0];

assign trunc_ln50_fu_438_p1 = bitcast_ln50_fu_424_p1[22:0];

assign trunc_ln52_1_fu_547_p1 = bitcast_ln52_1_fu_534_p1[22:0];

assign trunc_ln52_fu_498_p1 = bitcast_ln52_fu_484_p1[22:0];

assign trunc_ln54_fu_595_p1 = p_read[39:0];

assign trunc_ln93_2_fu_877_p1 = bitcast_ln93_fu_864_p1[22:0];

assign trunc_ln93_fu_860_p1 = p_Val2_s_fu_834_p1[22:0];

assign xor_ln106_fu_796_p2 = (grp_fu_199_p2 ^ 1'd1);

assign xor_ln106_fu_802_p2 = (grp_fu_205_p2 ^ 1'd1);

assign xor_ln35_fu_347_p2 = (grp_fu_199_p2 ^ 1'd1);

assign xor_ln35_fu_353_p2 = (grp_fu_205_p2 ^ 1'd1);

assign xor_ln35_fu_392_p2 = (grp_fu_217_p2 ^ 1'd1);

assign xor_ln35_fu_398_p2 = (grp_fu_223_p2 ^ 1'd1);

assign xor_ln35_fu_756_p2 = (grp_fu_205_p2 ^ 1'd1);

assign xor_ln35_fu_762_p2 = (grp_fu_211_p2 ^ 1'd1);

assign xor_ln94_fu_933_p2 = (grp_fu_199_p2 ^ 1'd1);

assign xor_ln94_fu_939_p2 = (grp_fu_205_p2 ^ 1'd1);

assign zext_ln368_2_fu_622_p1 = p_Result_2_fu_618_p1;

assign zext_ln368_fu_841_p1 = p_Result_s_fu_837_p1;

always @ (posedge ap_clk) begin
    or_ln54_reg_1074[47:40] <= 8'b00000001;
    sign_7_reg_1111[22:0] <= 23'b00000000000000000000000;
    sign_7_reg_1111[30] <= 1'b0;
    select_ln106_2_reg_1116[3:2] <= 2'b00;
    select_ln106_2_reg_1116[7:6] <= 2'b00;
    select_ln106_2_reg_1116[11:10] <= 2'b00;
    select_ln106_2_reg_1116[15:14] <= 2'b00;
    select_ln106_2_reg_1116[19:18] <= 2'b00;
    select_ln106_2_reg_1116[23:23] <= 1'b0;
    select_ln106_2_reg_1116[30] <= 1'b0;
    select_ln94_2_reg_1160[3:2] <= 2'b00;
    select_ln94_2_reg_1160[7:6] <= 2'b00;
    select_ln94_2_reg_1160[11:10] <= 2'b00;
    select_ln94_2_reg_1160[15:14] <= 2'b00;
    select_ln94_2_reg_1160[19:18] <= 2'b00;
    select_ln94_2_reg_1160[23:23] <= 1'b0;
    select_ln94_2_reg_1160[30] <= 1'b0;
    self_0_reg_108[47:41] <= 7'b0000000;
    ap_return_1_preg[47:41] <= 7'b0000000;
end

endmodule //uz_FOC_sample_uz_FOC_SpaceVector_Limitation_d_1
