-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_FOC_sample_uz_FOC_SpaceVector_Limitation_q_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (287 downto 0);
    u_input_Volts_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    u_input_Volts_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_dc_volts : IN STD_LOGIC_VECTOR (31 downto 0);
    omega_el_rad_per_sec : IN STD_LOGIC_VECTOR (31 downto 0);
    i_actual_Ampere_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (287 downto 0) );
end;


architecture behav of uz_FOC_sample_uz_FOC_SpaceVector_Limitation_q_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (111 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (111 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (111 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (111 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (111 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (111 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (111 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (111 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (111 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (111 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_3F733333 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011100110011001100110011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_3FDDB3D7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110111011011001111010111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv288_lc_1 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_const_lv32_BF733333 : STD_LOGIC_VECTOR (31 downto 0) := "10111111011100110011001100110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv288_lc_2 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_pow_generic_float_s_fu_138_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_pow_generic_float_s_fu_158_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_SV_max_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln35_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_reg_1010 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_4_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_4_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_fu_370_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sign_4_fu_415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln73_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_1_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_1_reg_1037 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_2_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_2_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_3_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_3_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_1_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_1_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal if_omega_equal_q_current_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal if_omega_equal_q_current_reg_1062 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal and_ln75_1_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_1_reg_1066 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_599_p4 : STD_LOGIC_VECTOR (287 downto 0);
    signal or_ln77_fu_609_p2 : STD_LOGIC_VECTOR (287 downto 0);
    signal or_ln77_reg_1075 : STD_LOGIC_VECTOR (287 downto 0);
    signal bitcast_ln350_1_fu_626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln105_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_1088 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_1_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_1_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_2_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_2_reg_1098 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_3_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_3_reg_1103 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln106_1_fu_733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln106_1_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal u_output_Volts_4_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal bitcast_ln350_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln93_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1126 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_1_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_1_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_2_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_2_reg_1136 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_3_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_3_reg_1141 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_1_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_1_reg_1146 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal sign_5_fu_906_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sign_5_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal u_output_Volts_3_reg_1160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal select_ln94_1_fu_940_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln94_1_reg_1165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal u_output_Volts_2_reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal grp_pow_generic_float_s_fu_138_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_138_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_138_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_138_ap_ready : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_138_base_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_float_s_fu_158_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_158_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_158_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_158_ap_ready : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_158_base_r : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_self_0_phi_fu_111_p10 : STD_LOGIC_VECTOR (287 downto 0);
    signal self_0_reg_108 : STD_LOGIC_VECTOR (287 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal and_ln105_1_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_u_output_Volts_5_phi_fu_126_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_output_Volts_5_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_float_s_fu_138_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_NS_fsm_state45 : STD_LOGIC;
    signal ap_NS_fsm_state81 : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal grp_pow_generic_float_s_fu_158_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal grp_fu_182_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal grp_fu_193_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_199_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal bitcast_ln35_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_266_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_fu_276_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_8_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_4_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_302_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_5_fu_312_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_10_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_9_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_8_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_9_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_10_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_5_fu_384_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_1_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_428_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln73_fu_438_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_42_fu_446_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln73_1_fu_456_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln75_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_488_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_fu_498_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln73_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_1_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln75_1_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_537_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_1_fu_547_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln75_3_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_2_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_1_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_585_p4 : STD_LOGIC_VECTOR (239 downto 0);
    signal trunc_ln77_fu_595_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_1_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_618_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_1_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln105_fu_645_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_631_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln105_fu_641_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_54_fu_649_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln105_1_fu_659_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln105_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_1_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln106_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln106_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln106_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln106_fu_707_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_744_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_fu_748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln93_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_757_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln93_fu_767_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_48_fu_775_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln93_1_fu_785_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln93_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln93_1_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_5_fu_833_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_836_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_6_fu_846_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln35_12_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_11_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_5_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_11_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_12_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_7_fu_874_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln94_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln94_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln94_fu_914_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_193_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_199_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_205_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_211_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    component uz_FOC_sample_pow_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_FOC_sample_fsqrt_32ns_32ns_32_8_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_pow_generic_float_s_fu_138 : component uz_FOC_sample_pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_138_ap_start,
        ap_done => grp_pow_generic_float_s_fu_138_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_138_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_138_ap_ready,
        ap_ce => ap_const_logic_1,
        base_r => grp_pow_generic_float_s_fu_138_base_r,
        ap_return => grp_pow_generic_float_s_fu_138_ap_return);

    grp_pow_generic_float_s_fu_158 : component uz_FOC_sample_pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_158_ap_start,
        ap_done => grp_pow_generic_float_s_fu_158_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_158_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_158_ap_ready,
        ap_ce => ap_const_logic_1,
        base_r => grp_pow_generic_float_s_fu_158_base_r,
        ap_return => grp_pow_generic_float_s_fu_158_ap_return);

    faddfsub_32ns_32ns_32_4_full_dsp_1_U48 : component uz_FOC_sample_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        opcode => grp_fu_178_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U49 : component uz_FOC_sample_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_182_p0,
        din1 => grp_fu_182_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);

    fdiv_32ns_32ns_32_9_no_dsp_1_U50 : component uz_FOC_sample_fdiv_32ns_32ns_32_9_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => V_dc_volts,
        din1 => ap_const_lv32_3FDDB3D7,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U51 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_193_p0,
        din1 => grp_fu_193_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_193_opcode,
        dout => grp_fu_193_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U52 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_199_p0,
        din1 => grp_fu_199_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_199_opcode,
        dout => grp_fu_199_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U53 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_205_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => grp_fu_205_opcode,
        dout => grp_fu_205_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U54 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_211_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => grp_fu_211_opcode,
        dout => grp_fu_211_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U55 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_actual_Ampere_1,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_8,
        dout => grp_fu_217_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U56 : component uz_FOC_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_actual_Ampere_1,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_223_p2);

    fsqrt_32ns_32ns_32_8_no_dsp_1_U57 : component uz_FOC_sample_fsqrt_32ns_32ns_32_8_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_245,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                    ap_return_0_preg <= ap_phi_mux_u_output_Volts_5_phi_fu_126_p10;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg(0) <= '0';
                ap_return_1_preg(1) <= '0';
                ap_return_1_preg(2) <= '0';
                ap_return_1_preg(3) <= '0';
                ap_return_1_preg(4) <= '0';
                ap_return_1_preg(5) <= '0';
                ap_return_1_preg(6) <= '0';
                ap_return_1_preg(7) <= '0';
                ap_return_1_preg(8) <= '0';
                ap_return_1_preg(9) <= '0';
                ap_return_1_preg(10) <= '0';
                ap_return_1_preg(11) <= '0';
                ap_return_1_preg(12) <= '0';
                ap_return_1_preg(13) <= '0';
                ap_return_1_preg(14) <= '0';
                ap_return_1_preg(15) <= '0';
                ap_return_1_preg(16) <= '0';
                ap_return_1_preg(17) <= '0';
                ap_return_1_preg(18) <= '0';
                ap_return_1_preg(19) <= '0';
                ap_return_1_preg(20) <= '0';
                ap_return_1_preg(21) <= '0';
                ap_return_1_preg(22) <= '0';
                ap_return_1_preg(23) <= '0';
                ap_return_1_preg(24) <= '0';
                ap_return_1_preg(25) <= '0';
                ap_return_1_preg(26) <= '0';
                ap_return_1_preg(27) <= '0';
                ap_return_1_preg(28) <= '0';
                ap_return_1_preg(29) <= '0';
                ap_return_1_preg(30) <= '0';
                ap_return_1_preg(31) <= '0';
                ap_return_1_preg(32) <= '0';
                ap_return_1_preg(33) <= '0';
                ap_return_1_preg(34) <= '0';
                ap_return_1_preg(35) <= '0';
                ap_return_1_preg(36) <= '0';
                ap_return_1_preg(37) <= '0';
                ap_return_1_preg(38) <= '0';
                ap_return_1_preg(39) <= '0';
                ap_return_1_preg(40) <= '0';
                ap_return_1_preg(48) <= '0';
                ap_return_1_preg(49) <= '0';
                ap_return_1_preg(50) <= '0';
                ap_return_1_preg(51) <= '0';
                ap_return_1_preg(52) <= '0';
                ap_return_1_preg(53) <= '0';
                ap_return_1_preg(54) <= '0';
                ap_return_1_preg(55) <= '0';
                ap_return_1_preg(56) <= '0';
                ap_return_1_preg(57) <= '0';
                ap_return_1_preg(58) <= '0';
                ap_return_1_preg(59) <= '0';
                ap_return_1_preg(60) <= '0';
                ap_return_1_preg(61) <= '0';
                ap_return_1_preg(62) <= '0';
                ap_return_1_preg(63) <= '0';
                ap_return_1_preg(64) <= '0';
                ap_return_1_preg(65) <= '0';
                ap_return_1_preg(66) <= '0';
                ap_return_1_preg(67) <= '0';
                ap_return_1_preg(68) <= '0';
                ap_return_1_preg(69) <= '0';
                ap_return_1_preg(70) <= '0';
                ap_return_1_preg(71) <= '0';
                ap_return_1_preg(72) <= '0';
                ap_return_1_preg(73) <= '0';
                ap_return_1_preg(74) <= '0';
                ap_return_1_preg(75) <= '0';
                ap_return_1_preg(76) <= '0';
                ap_return_1_preg(77) <= '0';
                ap_return_1_preg(78) <= '0';
                ap_return_1_preg(79) <= '0';
                ap_return_1_preg(80) <= '0';
                ap_return_1_preg(81) <= '0';
                ap_return_1_preg(82) <= '0';
                ap_return_1_preg(83) <= '0';
                ap_return_1_preg(84) <= '0';
                ap_return_1_preg(85) <= '0';
                ap_return_1_preg(86) <= '0';
                ap_return_1_preg(87) <= '0';
                ap_return_1_preg(88) <= '0';
                ap_return_1_preg(89) <= '0';
                ap_return_1_preg(90) <= '0';
                ap_return_1_preg(91) <= '0';
                ap_return_1_preg(92) <= '0';
                ap_return_1_preg(93) <= '0';
                ap_return_1_preg(94) <= '0';
                ap_return_1_preg(95) <= '0';
                ap_return_1_preg(96) <= '0';
                ap_return_1_preg(97) <= '0';
                ap_return_1_preg(98) <= '0';
                ap_return_1_preg(99) <= '0';
                ap_return_1_preg(100) <= '0';
                ap_return_1_preg(101) <= '0';
                ap_return_1_preg(102) <= '0';
                ap_return_1_preg(103) <= '0';
                ap_return_1_preg(104) <= '0';
                ap_return_1_preg(105) <= '0';
                ap_return_1_preg(106) <= '0';
                ap_return_1_preg(107) <= '0';
                ap_return_1_preg(108) <= '0';
                ap_return_1_preg(109) <= '0';
                ap_return_1_preg(110) <= '0';
                ap_return_1_preg(111) <= '0';
                ap_return_1_preg(112) <= '0';
                ap_return_1_preg(113) <= '0';
                ap_return_1_preg(114) <= '0';
                ap_return_1_preg(115) <= '0';
                ap_return_1_preg(116) <= '0';
                ap_return_1_preg(117) <= '0';
                ap_return_1_preg(118) <= '0';
                ap_return_1_preg(119) <= '0';
                ap_return_1_preg(120) <= '0';
                ap_return_1_preg(121) <= '0';
                ap_return_1_preg(122) <= '0';
                ap_return_1_preg(123) <= '0';
                ap_return_1_preg(124) <= '0';
                ap_return_1_preg(125) <= '0';
                ap_return_1_preg(126) <= '0';
                ap_return_1_preg(127) <= '0';
                ap_return_1_preg(128) <= '0';
                ap_return_1_preg(129) <= '0';
                ap_return_1_preg(130) <= '0';
                ap_return_1_preg(131) <= '0';
                ap_return_1_preg(132) <= '0';
                ap_return_1_preg(133) <= '0';
                ap_return_1_preg(134) <= '0';
                ap_return_1_preg(135) <= '0';
                ap_return_1_preg(136) <= '0';
                ap_return_1_preg(137) <= '0';
                ap_return_1_preg(138) <= '0';
                ap_return_1_preg(139) <= '0';
                ap_return_1_preg(140) <= '0';
                ap_return_1_preg(141) <= '0';
                ap_return_1_preg(142) <= '0';
                ap_return_1_preg(143) <= '0';
                ap_return_1_preg(144) <= '0';
                ap_return_1_preg(145) <= '0';
                ap_return_1_preg(146) <= '0';
                ap_return_1_preg(147) <= '0';
                ap_return_1_preg(148) <= '0';
                ap_return_1_preg(149) <= '0';
                ap_return_1_preg(150) <= '0';
                ap_return_1_preg(151) <= '0';
                ap_return_1_preg(152) <= '0';
                ap_return_1_preg(153) <= '0';
                ap_return_1_preg(154) <= '0';
                ap_return_1_preg(155) <= '0';
                ap_return_1_preg(156) <= '0';
                ap_return_1_preg(157) <= '0';
                ap_return_1_preg(158) <= '0';
                ap_return_1_preg(159) <= '0';
                ap_return_1_preg(160) <= '0';
                ap_return_1_preg(161) <= '0';
                ap_return_1_preg(162) <= '0';
                ap_return_1_preg(163) <= '0';
                ap_return_1_preg(164) <= '0';
                ap_return_1_preg(165) <= '0';
                ap_return_1_preg(166) <= '0';
                ap_return_1_preg(167) <= '0';
                ap_return_1_preg(168) <= '0';
                ap_return_1_preg(169) <= '0';
                ap_return_1_preg(170) <= '0';
                ap_return_1_preg(171) <= '0';
                ap_return_1_preg(172) <= '0';
                ap_return_1_preg(173) <= '0';
                ap_return_1_preg(174) <= '0';
                ap_return_1_preg(175) <= '0';
                ap_return_1_preg(176) <= '0';
                ap_return_1_preg(177) <= '0';
                ap_return_1_preg(178) <= '0';
                ap_return_1_preg(179) <= '0';
                ap_return_1_preg(180) <= '0';
                ap_return_1_preg(181) <= '0';
                ap_return_1_preg(182) <= '0';
                ap_return_1_preg(183) <= '0';
                ap_return_1_preg(184) <= '0';
                ap_return_1_preg(185) <= '0';
                ap_return_1_preg(186) <= '0';
                ap_return_1_preg(187) <= '0';
                ap_return_1_preg(188) <= '0';
                ap_return_1_preg(189) <= '0';
                ap_return_1_preg(190) <= '0';
                ap_return_1_preg(191) <= '0';
                ap_return_1_preg(192) <= '0';
                ap_return_1_preg(193) <= '0';
                ap_return_1_preg(194) <= '0';
                ap_return_1_preg(195) <= '0';
                ap_return_1_preg(196) <= '0';
                ap_return_1_preg(197) <= '0';
                ap_return_1_preg(198) <= '0';
                ap_return_1_preg(199) <= '0';
                ap_return_1_preg(200) <= '0';
                ap_return_1_preg(201) <= '0';
                ap_return_1_preg(202) <= '0';
                ap_return_1_preg(203) <= '0';
                ap_return_1_preg(204) <= '0';
                ap_return_1_preg(205) <= '0';
                ap_return_1_preg(206) <= '0';
                ap_return_1_preg(207) <= '0';
                ap_return_1_preg(208) <= '0';
                ap_return_1_preg(209) <= '0';
                ap_return_1_preg(210) <= '0';
                ap_return_1_preg(211) <= '0';
                ap_return_1_preg(212) <= '0';
                ap_return_1_preg(213) <= '0';
                ap_return_1_preg(214) <= '0';
                ap_return_1_preg(215) <= '0';
                ap_return_1_preg(216) <= '0';
                ap_return_1_preg(217) <= '0';
                ap_return_1_preg(218) <= '0';
                ap_return_1_preg(219) <= '0';
                ap_return_1_preg(220) <= '0';
                ap_return_1_preg(221) <= '0';
                ap_return_1_preg(222) <= '0';
                ap_return_1_preg(223) <= '0';
                ap_return_1_preg(224) <= '0';
                ap_return_1_preg(225) <= '0';
                ap_return_1_preg(226) <= '0';
                ap_return_1_preg(227) <= '0';
                ap_return_1_preg(228) <= '0';
                ap_return_1_preg(229) <= '0';
                ap_return_1_preg(230) <= '0';
                ap_return_1_preg(231) <= '0';
                ap_return_1_preg(232) <= '0';
                ap_return_1_preg(233) <= '0';
                ap_return_1_preg(234) <= '0';
                ap_return_1_preg(235) <= '0';
                ap_return_1_preg(236) <= '0';
                ap_return_1_preg(237) <= '0';
                ap_return_1_preg(238) <= '0';
                ap_return_1_preg(239) <= '0';
                ap_return_1_preg(240) <= '0';
                ap_return_1_preg(241) <= '0';
                ap_return_1_preg(242) <= '0';
                ap_return_1_preg(243) <= '0';
                ap_return_1_preg(244) <= '0';
                ap_return_1_preg(245) <= '0';
                ap_return_1_preg(246) <= '0';
                ap_return_1_preg(247) <= '0';
                ap_return_1_preg(248) <= '0';
                ap_return_1_preg(249) <= '0';
                ap_return_1_preg(250) <= '0';
                ap_return_1_preg(251) <= '0';
                ap_return_1_preg(252) <= '0';
                ap_return_1_preg(253) <= '0';
                ap_return_1_preg(254) <= '0';
                ap_return_1_preg(255) <= '0';
                ap_return_1_preg(256) <= '0';
                ap_return_1_preg(257) <= '0';
                ap_return_1_preg(258) <= '0';
                ap_return_1_preg(259) <= '0';
                ap_return_1_preg(260) <= '0';
                ap_return_1_preg(261) <= '0';
                ap_return_1_preg(262) <= '0';
                ap_return_1_preg(263) <= '0';
                ap_return_1_preg(264) <= '0';
                ap_return_1_preg(265) <= '0';
                ap_return_1_preg(266) <= '0';
                ap_return_1_preg(267) <= '0';
                ap_return_1_preg(268) <= '0';
                ap_return_1_preg(269) <= '0';
                ap_return_1_preg(270) <= '0';
                ap_return_1_preg(271) <= '0';
                ap_return_1_preg(272) <= '0';
                ap_return_1_preg(273) <= '0';
                ap_return_1_preg(274) <= '0';
                ap_return_1_preg(275) <= '0';
                ap_return_1_preg(276) <= '0';
                ap_return_1_preg(277) <= '0';
                ap_return_1_preg(278) <= '0';
                ap_return_1_preg(279) <= '0';
                ap_return_1_preg(280) <= '0';
                ap_return_1_preg(281) <= '0';
                ap_return_1_preg(282) <= '0';
                ap_return_1_preg(283) <= '0';
                ap_return_1_preg(284) <= '0';
                ap_return_1_preg(285) <= '0';
                ap_return_1_preg(286) <= '0';
                ap_return_1_preg(287) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                                        ap_return_1_preg(40 downto 0) <= ap_phi_mux_self_0_phi_fu_111_p10(40 downto 0);                    ap_return_1_preg(287 downto 48) <= ap_phi_mux_self_0_phi_fu_111_p10(287 downto 48);
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_138_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_138_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state81) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((ap_const_logic_1 = ap_NS_fsm_state45) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
                    grp_pow_generic_float_s_fu_138_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_138_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_138_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_158_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_158_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state81) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                    grp_pow_generic_float_s_fu_158_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_158_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_158_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    self_0_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln75_1_fu_579_p2) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                                self_0_reg_108(40 downto 0) <= and_ln_fu_599_p4(40 downto 0);                self_0_reg_108(287 downto 48) <= and_ln_fu_599_p4(287 downto 48);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state76) or ((ap_const_lv1_0 = and_ln105_1_fu_701_p2) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_lv1_1 = and_ln93_1_reg_1146) and (ap_const_lv1_1 = and_ln75_1_reg_1066) and (if_omega_equal_q_current_reg_1062 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112)))) then 
                                self_0_reg_108(40 downto 0) <= or_ln77_reg_1075(40 downto 0);                self_0_reg_108(287 downto 48) <= or_ln77_reg_1075(287 downto 48);
            end if; 
        end if;
    end process;

    u_output_Volts_5_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln105_1_fu_701_p2) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_lv1_0 = and_ln75_1_fu_579_p2) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
                u_output_Volts_5_reg_123 <= u_input_Volts_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                u_output_Volts_5_reg_123 <= u_output_Volts_4_reg_1116;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                u_output_Volts_5_reg_123 <= u_output_Volts_3_reg_1160;
            elsif (((ap_const_lv1_1 = and_ln93_1_reg_1146) and (ap_const_lv1_1 = and_ln75_1_reg_1066) and (if_omega_equal_q_current_reg_1062 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
                u_output_Volts_5_reg_123 <= u_output_Volts_2_reg_1170;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                U_SV_max_reg_1001 <= grp_fu_187_p2;
                or_ln35_4_reg_1016 <= or_ln35_4_fu_328_p2;
                or_ln35_reg_1010 <= or_ln35_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                and_ln75_1_reg_1066 <= and_ln75_1_fu_579_p2;
                if_omega_equal_q_current_reg_1062 <= if_omega_equal_q_current_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                and_ln93_1_reg_1146 <= and_ln93_1_fu_827_p2;
                    sign_5_reg_1150(29 downto 23) <= sign_5_fu_906_p3(29 downto 23);    sign_5_reg_1150(31) <= sign_5_fu_906_p3(31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                icmp_ln105_1_reg_1093 <= icmp_ln105_1_fu_669_p2;
                icmp_ln105_2_reg_1098 <= icmp_ln105_2_fu_675_p2;
                icmp_ln105_3_reg_1103 <= icmp_ln105_3_fu_681_p2;
                icmp_ln105_reg_1088 <= icmp_ln105_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                icmp_ln73_1_reg_1037 <= icmp_ln73_1_fu_466_p2;
                icmp_ln73_2_reg_1042 <= icmp_ln73_2_fu_472_p2;
                icmp_ln73_3_reg_1047 <= icmp_ln73_3_fu_478_p2;
                icmp_ln73_reg_1032 <= icmp_ln73_fu_460_p2;
                icmp_ln75_1_reg_1057 <= icmp_ln75_1_fu_508_p2;
                icmp_ln75_reg_1052 <= icmp_ln75_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                icmp_ln93_1_reg_1131 <= icmp_ln93_1_fu_795_p2;
                icmp_ln93_2_reg_1136 <= icmp_ln93_2_fu_801_p2;
                icmp_ln93_3_reg_1141 <= icmp_ln93_3_fu_807_p2;
                icmp_ln93_reg_1126 <= icmp_ln93_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln75_1_fu_579_p2) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    or_ln77_reg_1075(39 downto 0) <= or_ln77_fu_609_p2(39 downto 0);    or_ln77_reg_1075(287 downto 48) <= or_ln77_fu_609_p2(287 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_234 <= grp_pow_generic_float_s_fu_138_ap_return;
                reg_240 <= grp_pow_generic_float_s_fu_158_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_245 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_250 <= grp_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_256 <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                    select_ln106_1_reg_1111(1 downto 0) <= select_ln106_1_fu_733_p3(1 downto 0);    select_ln106_1_reg_1111(5 downto 4) <= select_ln106_1_fu_733_p3(5 downto 4);    select_ln106_1_reg_1111(9 downto 8) <= select_ln106_1_fu_733_p3(9 downto 8);    select_ln106_1_reg_1111(13 downto 12) <= select_ln106_1_fu_733_p3(13 downto 12);    select_ln106_1_reg_1111(17 downto 16) <= select_ln106_1_fu_733_p3(17 downto 16);    select_ln106_1_reg_1111(22 downto 20) <= select_ln106_1_fu_733_p3(22 downto 20);    select_ln106_1_reg_1111(29 downto 24) <= select_ln106_1_fu_733_p3(29 downto 24);    select_ln106_1_reg_1111(31) <= select_ln106_1_fu_733_p3(31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                    select_ln94_1_reg_1165(1 downto 0) <= select_ln94_1_fu_940_p3(1 downto 0);    select_ln94_1_reg_1165(5 downto 4) <= select_ln94_1_fu_940_p3(5 downto 4);    select_ln94_1_reg_1165(9 downto 8) <= select_ln94_1_fu_940_p3(9 downto 8);    select_ln94_1_reg_1165(13 downto 12) <= select_ln94_1_fu_940_p3(13 downto 12);    select_ln94_1_reg_1165(17 downto 16) <= select_ln94_1_fu_940_p3(17 downto 16);    select_ln94_1_reg_1165(22 downto 20) <= select_ln94_1_fu_940_p3(22 downto 20);    select_ln94_1_reg_1165(29 downto 24) <= select_ln94_1_fu_940_p3(29 downto 24);    select_ln94_1_reg_1165(31) <= select_ln94_1_fu_940_p3(31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                tmp_4_reg_1155 <= grp_pow_generic_float_s_fu_138_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                u_output_Volts_2_reg_1170 <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                u_output_Volts_3_reg_1160 <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                u_output_Volts_4_reg_1116 <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    or_ln77_reg_1075(47 downto 40) <= "00000001";
    select_ln106_1_reg_1111(3 downto 2) <= "00";
    select_ln106_1_reg_1111(7 downto 6) <= "00";
    select_ln106_1_reg_1111(11 downto 10) <= "00";
    select_ln106_1_reg_1111(15 downto 14) <= "00";
    select_ln106_1_reg_1111(19 downto 18) <= "00";
    select_ln106_1_reg_1111(23 downto 23) <= "0";
    select_ln106_1_reg_1111(30) <= '0';
    sign_5_reg_1150(22 downto 0) <= "00000000000000000000000";
    sign_5_reg_1150(30) <= '0';
    select_ln94_1_reg_1165(3 downto 2) <= "00";
    select_ln94_1_reg_1165(7 downto 6) <= "00";
    select_ln94_1_reg_1165(11 downto 10) <= "00";
    select_ln94_1_reg_1165(15 downto 14) <= "00";
    select_ln94_1_reg_1165(19 downto 18) <= "00";
    select_ln94_1_reg_1165(23 downto 23) <= "0";
    select_ln94_1_reg_1165(30) <= '0';
    self_0_reg_108(47 downto 41) <= "0000000";
    ap_return_1_preg(47 downto 41) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, if_omega_equal_q_current_fu_528_p2, ap_CS_fsm_state30, and_ln75_1_fu_579_p2, and_ln93_1_fu_827_p2, ap_CS_fsm_state44, ap_CS_fsm_state34, and_ln105_1_fu_701_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_lv1_1 = and_ln75_1_fu_579_p2) and (if_omega_equal_q_current_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                elsif (((ap_const_lv1_1 = and_ln75_1_fu_579_p2) and (if_omega_equal_q_current_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_lv1_0 = and_ln105_1_fu_701_p2) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_lv1_1 = and_ln93_1_fu_827_p2) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln105_1_fu_701_p2 <= (grp_fu_193_p2 and and_ln105_fu_695_p2);
    and_ln105_fu_695_p2 <= (or_ln105_fu_687_p2 and or_ln105_1_fu_691_p2);
    and_ln106_fu_727_p2 <= (xor_ln106_fu_721_p2 and xor_ln106_fu_715_p2);
    and_ln35_10_fu_410_p2 <= (or_ln35_4_reg_1016 and and_ln35_fu_404_p2);
    and_ln35_11_fu_868_p2 <= (or_ln35_5_fu_862_p2 and grp_fu_199_p2);
    and_ln35_12_fu_900_p2 <= (or_ln35_5_fu_862_p2 and and_ln35_fu_894_p2);
    and_ln35_8_fu_365_p2 <= (or_ln35_reg_1010 and and_ln35_fu_359_p2);
    and_ln35_9_fu_379_p2 <= (or_ln35_4_reg_1016 and grp_fu_211_p2);
    and_ln35_fu_334_p2 <= (or_ln35_reg_1010 and grp_fu_193_p2);
    and_ln35_fu_359_p2 <= (xor_ln35_fu_353_p2 and xor_ln35_fu_347_p2);
    and_ln35_fu_404_p2 <= (xor_ln35_fu_398_p2 and xor_ln35_fu_392_p2);
    and_ln35_fu_894_p2 <= (xor_ln35_fu_888_p2 and xor_ln35_fu_882_p2);
    and_ln73_fu_522_p2 <= (or_ln73_fu_514_p2 and or_ln73_1_fu_518_p2);
    and_ln75_1_fu_579_p2 <= (grp_fu_199_p2 and and_ln75_fu_573_p2);
    and_ln75_fu_573_p2 <= (or_ln75_fu_551_p2 and or_ln75_1_fu_567_p2);
    and_ln93_1_fu_827_p2 <= (grp_fu_193_p2 and and_ln93_fu_821_p2);
    and_ln93_fu_821_p2 <= (or_ln93_fu_813_p2 and or_ln93_1_fu_817_p2);
    and_ln94_fu_934_p2 <= (xor_ln94_fu_928_p2 and xor_ln94_fu_922_p2);
    and_ln_fu_599_p4 <= ((tmp_5_fu_585_p4 & ap_const_lv8_0) & trunc_ln77_fu_595_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_NS_fsm_state45 <= ap_NS_fsm(44);
    ap_NS_fsm_state81 <= ap_NS_fsm(80);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state112)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state112) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_self_0_phi_fu_111_p10_assign_proc : process(if_omega_equal_q_current_reg_1062, and_ln75_1_reg_1066, or_ln77_reg_1075, and_ln93_1_reg_1146, self_0_reg_108, ap_CS_fsm_state112)
    begin
        if (((ap_const_lv1_1 = and_ln93_1_reg_1146) and (ap_const_lv1_1 = and_ln75_1_reg_1066) and (if_omega_equal_q_current_reg_1062 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
            ap_phi_mux_self_0_phi_fu_111_p10 <= or_ln77_reg_1075;
        else 
            ap_phi_mux_self_0_phi_fu_111_p10 <= self_0_reg_108;
        end if; 
    end process;


    ap_phi_mux_u_output_Volts_5_phi_fu_126_p10_assign_proc : process(if_omega_equal_q_current_reg_1062, and_ln75_1_reg_1066, and_ln93_1_reg_1146, u_output_Volts_2_reg_1170, ap_CS_fsm_state112, u_output_Volts_5_reg_123)
    begin
        if (((ap_const_lv1_1 = and_ln93_1_reg_1146) and (ap_const_lv1_1 = and_ln75_1_reg_1066) and (if_omega_equal_q_current_reg_1062 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
            ap_phi_mux_u_output_Volts_5_phi_fu_126_p10 <= u_output_Volts_2_reg_1170;
        else 
            ap_phi_mux_u_output_Volts_5_phi_fu_126_p10 <= u_output_Volts_5_reg_123;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state112, ap_phi_mux_u_output_Volts_5_phi_fu_126_p10, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            ap_return_0 <= ap_phi_mux_u_output_Volts_5_phi_fu_126_p10;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_phi_mux_self_0_phi_fu_111_p10, ap_CS_fsm_state112, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            ap_return_1 <= ap_phi_mux_self_0_phi_fu_111_p10;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    bitcast_ln105_fu_645_p1 <= reg_256;
    bitcast_ln350_1_fu_626_p1 <= zext_ln368_1_fu_622_p1;
    bitcast_ln350_fu_752_p1 <= zext_ln368_fu_748_p1;
    bitcast_ln35_4_fu_298_p1 <= i_actual_Ampere_1;
    bitcast_ln35_5_fu_833_p1 <= u_input_Volts_1;
    bitcast_ln35_fu_262_p1 <= omega_el_rad_per_sec;
    bitcast_ln73_1_fu_442_p1 <= sign_4_fu_415_p3;
    bitcast_ln73_fu_424_p1 <= sign_fu_370_p3;
    bitcast_ln75_1_fu_534_p1 <= U_SV_max_reg_1001;
    bitcast_ln75_fu_484_p1 <= reg_250;
    bitcast_ln93_fu_771_p1 <= reg_256;

    grp_fu_178_opcode_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state61, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            grp_fu_178_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_178_opcode <= ap_const_lv2_0;
        else 
            grp_fu_178_opcode <= "XX";
        end if; 
    end process;


    grp_fu_178_p0_assign_proc : process(reg_234, tmp_4_reg_1155, ap_CS_fsm_state17, ap_CS_fsm_state61, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_178_p0 <= tmp_4_reg_1155;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_178_p0 <= reg_234;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_178_p1_assign_proc : process(reg_234, reg_240, ap_CS_fsm_state17, ap_CS_fsm_state61, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_178_p1 <= reg_234;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_178_p1 <= reg_240;
        else 
            grp_fu_178_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_182_p0_assign_proc : process(U_SV_max_reg_1001, if_omega_equal_q_current_fu_528_p2, ap_CS_fsm_state30, and_ln75_1_fu_579_p2, select_ln106_1_reg_1111, sign_5_reg_1150, select_ln94_1_reg_1165, ap_CS_fsm_state37, ap_CS_fsm_state73, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_fu_182_p0 <= select_ln94_1_reg_1165;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            grp_fu_182_p0 <= sign_5_reg_1150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_182_p0 <= select_ln106_1_reg_1111;
        elsif ((((ap_const_lv1_1 = and_ln75_1_fu_579_p2) and (if_omega_equal_q_current_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_lv1_1 = and_ln75_1_fu_579_p2) and (if_omega_equal_q_current_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_182_p0 <= U_SV_max_reg_1001;
        else 
            grp_fu_182_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_182_p1_assign_proc : process(reg_250, U_SV_max_reg_1001, if_omega_equal_q_current_fu_528_p2, ap_CS_fsm_state30, and_ln75_1_fu_579_p2, ap_CS_fsm_state37, ap_CS_fsm_state73, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            grp_fu_182_p1 <= reg_250;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_182_p1 <= U_SV_max_reg_1001;
        elsif ((((ap_const_lv1_1 = and_ln75_1_fu_579_p2) and (if_omega_equal_q_current_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_lv1_1 = and_ln75_1_fu_579_p2) and (if_omega_equal_q_current_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_182_p1 <= ap_const_lv32_3F733333;
        else 
            grp_fu_182_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_193_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state43, and_ln93_1_fu_827_p2, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_193_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_193_opcode <= ap_const_lv5_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_lv1_1 = and_ln93_1_fu_827_p2) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            grp_fu_193_opcode <= ap_const_lv5_4;
        else 
            grp_fu_193_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_193_p0_assign_proc : process(u_input_Volts_0, u_input_Volts_1, omega_el_rad_per_sec, ap_CS_fsm_state28, sign_fu_370_p3, ap_CS_fsm_state29, bitcast_ln350_1_fu_626_p1, ap_CS_fsm_state33, bitcast_ln350_fu_752_p1, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_193_p0 <= u_input_Volts_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_193_p0 <= bitcast_ln350_fu_752_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_193_p0 <= u_input_Volts_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_193_p0 <= bitcast_ln350_1_fu_626_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_193_p0 <= sign_fu_370_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_193_p0 <= omega_el_rad_per_sec;
        else 
            grp_fu_193_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_193_p1_assign_proc : process(ap_CS_fsm_state28, reg_256, ap_CS_fsm_state29, sign_4_fu_415_p3, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_193_p1 <= reg_256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_193_p1 <= sign_4_fu_415_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_193_p1 <= ap_const_lv32_0;
        else 
            grp_fu_193_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_199_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state43, and_ln93_1_fu_827_p2, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_199_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_199_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_lv1_1 = and_ln93_1_fu_827_p2) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            grp_fu_199_opcode <= ap_const_lv5_8;
        else 
            grp_fu_199_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_199_p0_assign_proc : process(u_input_Volts_0, u_input_Volts_1, omega_el_rad_per_sec, reg_250, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_199_p0 <= u_input_Volts_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_199_p0 <= u_input_Volts_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_199_p0 <= reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_199_p0 <= omega_el_rad_per_sec;
        else 
            grp_fu_199_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_199_p1_assign_proc : process(ap_CS_fsm_state28, U_SV_max_reg_1001, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_199_p1 <= U_SV_max_reg_1001;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_199_p1 <= ap_const_lv32_0;
        else 
            grp_fu_199_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_205_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state43, and_ln93_1_fu_827_p2, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_205_opcode <= ap_const_lv5_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_lv1_1 = and_ln93_1_fu_827_p2) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            grp_fu_205_opcode <= ap_const_lv5_1;
        else 
            grp_fu_205_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_205_p0_assign_proc : process(u_input_Volts_0, u_input_Volts_1, omega_el_rad_per_sec, ap_CS_fsm_state28, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_205_p0 <= u_input_Volts_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_205_p0 <= u_input_Volts_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_205_p0 <= omega_el_rad_per_sec;
        else 
            grp_fu_205_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_211_opcode_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_211_opcode <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_211_opcode <= ap_const_lv5_4;
        else 
            grp_fu_211_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_211_p0_assign_proc : process(u_input_Volts_1, i_actual_Ampere_1, ap_CS_fsm_state28, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_211_p0 <= u_input_Volts_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_211_p0 <= i_actual_Ampere_1;
        else 
            grp_fu_211_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_pow_generic_float_s_fu_138_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_pow_generic_float_s_fu_138_ap_start_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_pow_generic_float_s_fu_138_ap_start <= ap_const_logic_1;
        else 
            grp_pow_generic_float_s_fu_138_ap_start <= grp_pow_generic_float_s_fu_138_ap_start_reg;
        end if; 
    end process;


    grp_pow_generic_float_s_fu_138_base_r_assign_proc : process(ap_CS_fsm_state1, u_input_Volts_0, U_SV_max_reg_1001, ap_CS_fsm_state45, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_pow_generic_float_s_fu_138_base_r <= U_SV_max_reg_1001;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_pow_generic_float_s_fu_138_base_r <= u_input_Volts_0;
        else 
            grp_pow_generic_float_s_fu_138_base_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_pow_generic_float_s_fu_158_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_pow_generic_float_s_fu_158_ap_start_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_pow_generic_float_s_fu_158_ap_start <= ap_const_logic_1;
        else 
            grp_pow_generic_float_s_fu_158_ap_start <= grp_pow_generic_float_s_fu_158_ap_start_reg;
        end if; 
    end process;


    grp_pow_generic_float_s_fu_158_base_r_assign_proc : process(ap_CS_fsm_state1, u_input_Volts_1, reg_256, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_pow_generic_float_s_fu_158_base_r <= reg_256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_pow_generic_float_s_fu_158_base_r <= u_input_Volts_1;
        else 
            grp_pow_generic_float_s_fu_158_base_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln105_1_fu_669_p2 <= "1" when (trunc_ln105_fu_641_p1 = ap_const_lv23_0) else "0";
    icmp_ln105_2_fu_675_p2 <= "0" when (tmp_54_fu_649_p4 = ap_const_lv8_FF) else "1";
    icmp_ln105_3_fu_681_p2 <= "1" when (trunc_ln105_1_fu_659_p1 = ap_const_lv23_0) else "0";
    icmp_ln105_fu_663_p2 <= "0" when (tmp_53_fu_631_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_10_fu_322_p2 <= "1" when (trunc_ln35_5_fu_312_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_11_fu_850_p2 <= "0" when (tmp_50_fu_836_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_12_fu_856_p2 <= "1" when (trunc_ln35_6_fu_846_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_8_fu_286_p2 <= "1" when (trunc_ln35_fu_276_p1 = ap_const_lv23_0) else "0";
    icmp_ln35_9_fu_316_p2 <= "0" when (tmp_38_fu_302_p4 = ap_const_lv8_FF) else "1";
    icmp_ln35_fu_280_p2 <= "0" when (tmp_35_fu_266_p4 = ap_const_lv8_FF) else "1";
    icmp_ln73_1_fu_466_p2 <= "1" when (trunc_ln73_fu_438_p1 = ap_const_lv23_0) else "0";
    icmp_ln73_2_fu_472_p2 <= "0" when (tmp_42_fu_446_p4 = ap_const_lv8_FF) else "1";
    icmp_ln73_3_fu_478_p2 <= "1" when (trunc_ln73_1_fu_456_p1 = ap_const_lv23_0) else "0";
    icmp_ln73_fu_460_p2 <= "0" when (tmp_41_fu_428_p4 = ap_const_lv8_FF) else "1";
    icmp_ln75_1_fu_508_p2 <= "1" when (trunc_ln75_fu_498_p1 = ap_const_lv23_0) else "0";
    icmp_ln75_2_fu_555_p2 <= "0" when (tmp_45_fu_537_p4 = ap_const_lv8_FF) else "1";
    icmp_ln75_3_fu_561_p2 <= "1" when (trunc_ln75_1_fu_547_p1 = ap_const_lv23_0) else "0";
    icmp_ln75_fu_502_p2 <= "0" when (tmp_44_fu_488_p4 = ap_const_lv8_FF) else "1";
    icmp_ln93_1_fu_795_p2 <= "1" when (trunc_ln93_fu_767_p1 = ap_const_lv23_0) else "0";
    icmp_ln93_2_fu_801_p2 <= "0" when (tmp_48_fu_775_p4 = ap_const_lv8_FF) else "1";
    icmp_ln93_3_fu_807_p2 <= "1" when (trunc_ln93_1_fu_785_p1 = ap_const_lv23_0) else "0";
    icmp_ln93_fu_789_p2 <= "0" when (tmp_47_fu_757_p4 = ap_const_lv8_FF) else "1";
    if_omega_equal_q_current_fu_528_p2 <= (grp_fu_193_p2 and and_ln73_fu_522_p2);
    or_ln105_1_fu_691_p2 <= (icmp_ln105_3_reg_1103 or icmp_ln105_2_reg_1098);
    or_ln105_fu_687_p2 <= (icmp_ln105_reg_1088 or icmp_ln105_1_reg_1093);
    or_ln35_4_fu_328_p2 <= (icmp_ln35_9_fu_316_p2 or icmp_ln35_10_fu_322_p2);
    or_ln35_5_fu_862_p2 <= (icmp_ln35_12_fu_856_p2 or icmp_ln35_11_fu_850_p2);
    or_ln35_fu_292_p2 <= (icmp_ln35_fu_280_p2 or icmp_ln35_8_fu_286_p2);
    or_ln73_1_fu_518_p2 <= (icmp_ln73_3_reg_1047 or icmp_ln73_2_reg_1042);
    or_ln73_fu_514_p2 <= (icmp_ln73_reg_1032 or icmp_ln73_1_reg_1037);
    or_ln75_1_fu_567_p2 <= (icmp_ln75_3_fu_561_p2 or icmp_ln75_2_fu_555_p2);
    or_ln75_fu_551_p2 <= (icmp_ln75_reg_1052 or icmp_ln75_1_reg_1057);
    or_ln77_fu_609_p2 <= (ap_const_lv288_lc_1 or and_ln_fu_599_p4);
    or_ln93_1_fu_817_p2 <= (icmp_ln93_3_reg_1141 or icmp_ln93_2_reg_1136);
    or_ln93_fu_813_p2 <= (icmp_ln93_reg_1126 or icmp_ln93_1_reg_1131);
    p_Result_1_fu_618_p1 <= p_Val2_1_fu_615_p1(31 - 1 downto 0);
    p_Result_s_fu_744_p1 <= p_Val2_s_fu_741_p1(31 - 1 downto 0);
    p_Val2_1_fu_615_p1 <= u_input_Volts_1;
    p_Val2_s_fu_741_p1 <= u_input_Volts_0;
    select_ln106_1_fu_733_p3 <= 
        select_ln106_fu_707_p3 when (and_ln106_fu_727_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln106_fu_707_p3 <= 
        ap_const_lv32_BF733333 when (grp_fu_193_p2(0) = '1') else 
        ap_const_lv32_3F733333;
    select_ln35_5_fu_384_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_9_fu_379_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_7_fu_874_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_11_fu_868_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln35_fu_339_p3 <= 
        ap_const_lv32_BF800000 when (and_ln35_fu_334_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln94_1_fu_940_p3 <= 
        select_ln94_fu_914_p3 when (and_ln94_fu_934_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln94_fu_914_p3 <= 
        ap_const_lv32_BF733333 when (grp_fu_193_p2(0) = '1') else 
        ap_const_lv32_3F733333;
    sign_4_fu_415_p3 <= 
        select_ln35_5_fu_384_p3 when (and_ln35_10_fu_410_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_5_fu_906_p3 <= 
        select_ln35_7_fu_874_p3 when (and_ln35_12_fu_900_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_fu_370_p3 <= 
        select_ln35_fu_339_p3 when (and_ln35_8_fu_365_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_35_fu_266_p4 <= bitcast_ln35_fu_262_p1(30 downto 23);
    tmp_38_fu_302_p4 <= bitcast_ln35_4_fu_298_p1(30 downto 23);
    tmp_41_fu_428_p4 <= bitcast_ln73_fu_424_p1(30 downto 23);
    tmp_42_fu_446_p4 <= bitcast_ln73_1_fu_442_p1(30 downto 23);
    tmp_44_fu_488_p4 <= bitcast_ln75_fu_484_p1(30 downto 23);
    tmp_45_fu_537_p4 <= bitcast_ln75_1_fu_534_p1(30 downto 23);
    tmp_47_fu_757_p4 <= p_Val2_s_fu_741_p1(30 downto 23);
    tmp_48_fu_775_p4 <= bitcast_ln93_fu_771_p1(30 downto 23);
    tmp_50_fu_836_p4 <= bitcast_ln35_5_fu_833_p1(30 downto 23);
    tmp_53_fu_631_p4 <= p_Val2_1_fu_615_p1(30 downto 23);
    tmp_54_fu_649_p4 <= bitcast_ln105_fu_645_p1(30 downto 23);
    tmp_5_fu_585_p4 <= p_read(287 downto 48);
    trunc_ln105_1_fu_659_p1 <= bitcast_ln105_fu_645_p1(23 - 1 downto 0);
    trunc_ln105_fu_641_p1 <= p_Val2_1_fu_615_p1(23 - 1 downto 0);
    trunc_ln35_5_fu_312_p1 <= bitcast_ln35_4_fu_298_p1(23 - 1 downto 0);
    trunc_ln35_6_fu_846_p1 <= bitcast_ln35_5_fu_833_p1(23 - 1 downto 0);
    trunc_ln35_fu_276_p1 <= bitcast_ln35_fu_262_p1(23 - 1 downto 0);
    trunc_ln73_1_fu_456_p1 <= bitcast_ln73_1_fu_442_p1(23 - 1 downto 0);
    trunc_ln73_fu_438_p1 <= bitcast_ln73_fu_424_p1(23 - 1 downto 0);
    trunc_ln75_1_fu_547_p1 <= bitcast_ln75_1_fu_534_p1(23 - 1 downto 0);
    trunc_ln75_fu_498_p1 <= bitcast_ln75_fu_484_p1(23 - 1 downto 0);
    trunc_ln77_fu_595_p1 <= p_read(40 - 1 downto 0);
    trunc_ln93_1_fu_785_p1 <= bitcast_ln93_fu_771_p1(23 - 1 downto 0);
    trunc_ln93_fu_767_p1 <= p_Val2_s_fu_741_p1(23 - 1 downto 0);
    xor_ln106_fu_715_p2 <= (grp_fu_199_p2 xor ap_const_lv1_1);
    xor_ln106_fu_721_p2 <= (grp_fu_205_p2 xor ap_const_lv1_1);
    xor_ln35_fu_347_p2 <= (grp_fu_199_p2 xor ap_const_lv1_1);
    xor_ln35_fu_353_p2 <= (grp_fu_205_p2 xor ap_const_lv1_1);
    xor_ln35_fu_392_p2 <= (grp_fu_217_p2 xor ap_const_lv1_1);
    xor_ln35_fu_398_p2 <= (grp_fu_223_p2 xor ap_const_lv1_1);
    xor_ln35_fu_882_p2 <= (grp_fu_205_p2 xor ap_const_lv1_1);
    xor_ln35_fu_888_p2 <= (grp_fu_211_p2 xor ap_const_lv1_1);
    xor_ln94_fu_922_p2 <= (grp_fu_199_p2 xor ap_const_lv1_1);
    xor_ln94_fu_928_p2 <= (grp_fu_205_p2 xor ap_const_lv1_1);
    zext_ln368_1_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_618_p1),32));
    zext_ln368_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_744_p1),32));
end behav;
