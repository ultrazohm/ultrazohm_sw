// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_copyArray_float_16u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_input_address0,
        p_input_ce0,
        p_input_q0,
        p_input_address1,
        p_input_ce1,
        p_input_q1,
        p_output_address0,
        p_output_ce0,
        p_output_we0,
        p_output_d0,
        p_output_address1,
        p_output_ce1,
        p_output_we1,
        p_output_d1,
        size
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] p_input_address0;
output   p_input_ce0;
input  [31:0] p_input_q0;
output  [3:0] p_input_address1;
output   p_input_ce1;
input  [31:0] p_input_q1;
output  [3:0] p_output_address0;
output   p_output_ce0;
output   p_output_we0;
output  [31:0] p_output_d0;
output  [3:0] p_output_address1;
output   p_output_ce1;
output   p_output_we1;
output  [31:0] p_output_d1;
input  [31:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] p_input_address0;
reg p_input_ce0;
reg[3:0] p_input_address1;
reg p_input_ce1;
reg[3:0] p_output_address0;
reg p_output_ce0;
reg p_output_we0;
reg[31:0] p_output_d0;
reg[3:0] p_output_address1;
reg p_output_ce1;
reg p_output_we1;
reg[31:0] p_output_d1;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] p_input_load_1_reg_417;
wire    ap_CS_fsm_state2;
reg   [31:0] p_input_load_2_reg_432;
wire    ap_CS_fsm_state3;
reg   [31:0] p_input_load_3_reg_437;
reg   [31:0] p_input_load_4_reg_452;
wire    ap_CS_fsm_state4;
reg   [31:0] p_input_load_5_reg_457;
reg   [31:0] p_input_load_6_reg_472;
wire    ap_CS_fsm_state5;
reg   [31:0] p_input_load_7_reg_477;
reg   [31:0] p_input_load_8_reg_492;
wire    ap_CS_fsm_state6;
reg   [31:0] p_input_load_9_reg_497;
reg   [31:0] p_input_load_10_reg_512;
wire    ap_CS_fsm_state7;
reg   [31:0] p_input_load_11_reg_517;
reg   [31:0] p_input_load_12_reg_532;
wire    ap_CS_fsm_state8;
reg   [31:0] p_input_load_13_reg_537;
reg   [27:0] trunc_ln_reg_552;
wire    ap_CS_fsm_state9;
reg   [31:0] p_input_load_14_reg_622;
reg   [31:0] p_input_load_15_reg_632;
wire   [27:0] add_ln130_fu_389_p2;
reg   [27:0] add_ln130_reg_645;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln136_fu_407_p1;
reg   [63:0] zext_ln136_reg_650;
wire   [0:0] icmp_ln130_fu_384_p2;
reg   [31:0] p_input_load_reg_660;
wire    ap_CS_fsm_state11;
reg   [27:0] i_reg_363;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [0:0] empty_fu_395_p1;
wire   [4:0] tmp_9_fu_399_p3;
wire    ap_CS_fsm_state18;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_363 <= add_ln130_reg_645;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_363 <= 28'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln130_reg_645 <= add_ln130_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_input_load_10_reg_512 <= p_input_q0;
        p_input_load_11_reg_517 <= p_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_input_load_12_reg_532 <= p_input_q0;
        p_input_load_13_reg_537 <= p_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_input_load_14_reg_622 <= p_input_q0;
        p_input_load_15_reg_632 <= p_input_q1;
        trunc_ln_reg_552 <= {{size[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_input_load_1_reg_417 <= p_input_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_input_load_2_reg_432 <= p_input_q1;
        p_input_load_3_reg_437 <= p_input_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_input_load_4_reg_452 <= p_input_q0;
        p_input_load_5_reg_457 <= p_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_input_load_6_reg_472 <= p_input_q0;
        p_input_load_7_reg_477 <= p_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_input_load_8_reg_492 <= p_input_q0;
        p_input_load_9_reg_497 <= p_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_input_load_reg_660 <= p_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln130_fu_384_p2 == 1'd0))) begin
        zext_ln136_reg_650[4] <= zext_ln136_fu_407_p1[4];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_input_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_input_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_input_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_input_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_input_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_input_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_input_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_input_address0 = 64'd1;
    end else begin
        p_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_input_address1 = zext_ln136_fu_407_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_input_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_input_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_input_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_input_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_input_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_input_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_input_address1 = 64'd2;
    end else begin
        p_input_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_input_ce0 = 1'b1;
    end else begin
        p_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        p_input_ce1 = 1'b1;
    end else begin
        p_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_output_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        p_output_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        p_output_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_output_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_output_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_output_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_output_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_output_address0 = 64'd2;
    end else begin
        p_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_output_address1 = zext_ln136_reg_650;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        p_output_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        p_output_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_output_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_output_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_output_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_output_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_output_address1 = 64'd1;
    end else begin
        p_output_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        p_output_ce0 = 1'b1;
    end else begin
        p_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        p_output_ce1 = 1'b1;
    end else begin
        p_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_output_d0 = p_input_load_15_reg_632;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        p_output_d0 = p_input_load_14_reg_622;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        p_output_d0 = p_input_load_12_reg_532;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_output_d0 = p_input_load_10_reg_512;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_output_d0 = p_input_load_8_reg_492;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_output_d0 = p_input_load_6_reg_472;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_output_d0 = p_input_load_4_reg_452;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_output_d0 = p_input_load_2_reg_432;
    end else begin
        p_output_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_output_d1 = p_input_load_reg_660;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        p_output_d1 = p_input_load_13_reg_537;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        p_output_d1 = p_input_load_11_reg_517;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_output_d1 = p_input_load_9_reg_497;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_output_d1 = p_input_load_7_reg_477;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_output_d1 = p_input_load_5_reg_457;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_output_d1 = p_input_load_3_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_output_d1 = p_input_load_1_reg_417;
    end else begin
        p_output_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln130_fu_384_p2 == 1'd0)))) begin
        p_output_we0 = 1'b1;
    end else begin
        p_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln130_fu_384_p2 == 1'd0)))) begin
        p_output_we1 = 1'b1;
    end else begin
        p_output_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln130_fu_384_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_fu_389_p2 = (i_reg_363 + 28'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_fu_395_p1 = i_reg_363[0:0];

assign icmp_ln130_fu_384_p2 = ((i_reg_363 == trunc_ln_reg_552) ? 1'b1 : 1'b0);

assign tmp_9_fu_399_p3 = {{empty_fu_395_p1}, {4'd0}};

assign zext_ln136_fu_407_p1 = tmp_9_fu_399_p3;

always @ (posedge ap_clk) begin
    zext_ln136_reg_650[3:0] <= 4'b0000;
    zext_ln136_reg_650[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //BGD_copyArray_float_16u_s
