-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD is
generic (
    C_M_AXI_READ_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_READ_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_READ_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_READ_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_WRITE_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_WRITE_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WRITE_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_READ_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_READ_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_READ_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_WRITE_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_WRITE_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_WRITE_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_read_r_AWVALID : OUT STD_LOGIC;
    m_axi_read_r_AWREADY : IN STD_LOGIC;
    m_axi_read_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ADDR_WIDTH-1 downto 0);
    m_axi_read_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_read_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_read_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_read_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_AWUSER_WIDTH-1 downto 0);
    m_axi_read_r_WVALID : OUT STD_LOGIC;
    m_axi_read_r_WREADY : IN STD_LOGIC;
    m_axi_read_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_DATA_WIDTH-1 downto 0);
    m_axi_read_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_DATA_WIDTH/8-1 downto 0);
    m_axi_read_r_WLAST : OUT STD_LOGIC;
    m_axi_read_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_WUSER_WIDTH-1 downto 0);
    m_axi_read_r_ARVALID : OUT STD_LOGIC;
    m_axi_read_r_ARREADY : IN STD_LOGIC;
    m_axi_read_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ADDR_WIDTH-1 downto 0);
    m_axi_read_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_read_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_read_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_read_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_read_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_READ_R_ARUSER_WIDTH-1 downto 0);
    m_axi_read_r_RVALID : IN STD_LOGIC;
    m_axi_read_r_RREADY : OUT STD_LOGIC;
    m_axi_read_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_DATA_WIDTH-1 downto 0);
    m_axi_read_r_RLAST : IN STD_LOGIC;
    m_axi_read_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_RUSER_WIDTH-1 downto 0);
    m_axi_read_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_BVALID : IN STD_LOGIC;
    m_axi_read_r_BREADY : OUT STD_LOGIC;
    m_axi_read_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_read_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_ID_WIDTH-1 downto 0);
    m_axi_read_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_READ_R_BUSER_WIDTH-1 downto 0);
    m_axi_write_r_AWVALID : OUT STD_LOGIC;
    m_axi_write_r_AWREADY : IN STD_LOGIC;
    m_axi_write_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ADDR_WIDTH-1 downto 0);
    m_axi_write_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_write_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_write_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_write_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_AWUSER_WIDTH-1 downto 0);
    m_axi_write_r_WVALID : OUT STD_LOGIC;
    m_axi_write_r_WREADY : IN STD_LOGIC;
    m_axi_write_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_DATA_WIDTH-1 downto 0);
    m_axi_write_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_DATA_WIDTH/8-1 downto 0);
    m_axi_write_r_WLAST : OUT STD_LOGIC;
    m_axi_write_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_WUSER_WIDTH-1 downto 0);
    m_axi_write_r_ARVALID : OUT STD_LOGIC;
    m_axi_write_r_ARREADY : IN STD_LOGIC;
    m_axi_write_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ADDR_WIDTH-1 downto 0);
    m_axi_write_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_write_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_write_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_write_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_write_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ARUSER_WIDTH-1 downto 0);
    m_axi_write_r_RVALID : IN STD_LOGIC;
    m_axi_write_r_RREADY : OUT STD_LOGIC;
    m_axi_write_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_DATA_WIDTH-1 downto 0);
    m_axi_write_r_RLAST : IN STD_LOGIC;
    m_axi_write_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_RUSER_WIDTH-1 downto 0);
    m_axi_write_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_BVALID : IN STD_LOGIC;
    m_axi_write_r_BREADY : OUT STD_LOGIC;
    m_axi_write_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_write_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_ID_WIDTH-1 downto 0);
    m_axi_write_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WRITE_R_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of BGD is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "BGD_BGD,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.561000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=184,HLS_SYN_DSP=0,HLS_SYN_FF=34870,HLS_SYN_LUT=33714,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage2 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage3 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage1 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage2 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage3 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (77 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (77 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (77 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (77 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (77 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (77 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (77 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (77 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (77 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (77 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (77 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal axiMlpResultsInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiClassesInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasInput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightOutput : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasOutput : STD_LOGIC_VECTOR (63 downto 0);
    signal numberInputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberOutputs : STD_LOGIC_VECTOR (31 downto 0);
    signal numberLayers : STD_LOGIC_VECTOR (31 downto 0);
    signal numberNeurons : STD_LOGIC_VECTOR (31 downto 0);
    signal loadParameters : STD_LOGIC_VECTOR (31 downto 0);
    signal batchSize : STD_LOGIC_VECTOR (31 downto 0);
    signal learningRate : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bramWeight_ce0 : STD_LOGIC;
    signal bramWeight_we0 : STD_LOGIC;
    signal bramWeight_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeight_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bramWeight_ce1 : STD_LOGIC;
    signal bramWeight_we1 : STD_LOGIC;
    signal bramWeight_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramBias_ce0 : STD_LOGIC;
    signal bramBias_we0 : STD_LOGIC;
    signal bramBias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBias_ce1 : STD_LOGIC;
    signal bramBias_we1 : STD_LOGIC;
    signal bramBias_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeightGradientAvg_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bramWeightGradientAvg_ce0 : STD_LOGIC;
    signal bramWeightGradientAvg_we0 : STD_LOGIC;
    signal bramWeightGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeightGradientAvg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeightGradientAvg_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bramWeightGradientAvg_ce1 : STD_LOGIC;
    signal bramWeightGradientAvg_we1 : STD_LOGIC;
    signal bramWeightGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramWeightGradientAvg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBiasGradientAvg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramBiasGradientAvg_ce0 : STD_LOGIC;
    signal bramBiasGradientAvg_we0 : STD_LOGIC;
    signal bramBiasGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBiasGradientAvg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramBiasGradientAvg_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramBiasGradientAvg_ce1 : STD_LOGIC;
    signal bramBiasGradientAvg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal read_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond14911_reg_1808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond1479_reg_1875 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond1468_reg_1928 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond14810_reg_1838 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal write_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal icmp_ln153_reg_2361 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal exitcond1212_reg_2371 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1212_reg_2371_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal exitcond1_reg_2400 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_2400_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal icmp_ln158_reg_2390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal read_r_AWREADY : STD_LOGIC;
    signal read_r_WREADY : STD_LOGIC;
    signal read_r_ARVALID : STD_LOGIC;
    signal read_r_ARREADY : STD_LOGIC;
    signal read_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal read_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_r_RVALID : STD_LOGIC;
    signal read_r_RREADY : STD_LOGIC;
    signal read_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal read_r_RLAST : STD_LOGIC;
    signal read_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal read_r_BVALID : STD_LOGIC;
    signal read_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal read_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_AWVALID : STD_LOGIC;
    signal write_r_AWREADY : STD_LOGIC;
    signal write_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal write_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_r_WVALID : STD_LOGIC;
    signal write_r_WREADY : STD_LOGIC;
    signal write_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_r_ARREADY : STD_LOGIC;
    signal write_r_RVALID : STD_LOGIC;
    signal write_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_r_RLAST : STD_LOGIC;
    signal write_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal write_r_BVALID : STD_LOGIC;
    signal write_r_BREADY : STD_LOGIC;
    signal write_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal write_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index117_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index117_reg_660_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_index111_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index111_reg_672_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal loop_index105_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index105_reg_684_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state32_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal loop_index99_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index99_reg_696_pp3_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state44_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i_8_reg_729 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_10_reg_759 : STD_LOGIC_VECTOR (28 downto 0);
    signal loop_index93_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal axiBiasOutput_read_reg_1698 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightOutput_read_reg_1703 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiBiasInput_read_reg_1708 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiWeightInput_read_reg_1713 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiClassesInput_read_reg_1718 : STD_LOGIC_VECTOR (63 downto 0);
    signal axiMlpResultsInput_read_reg_1723 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln51_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal numberOutputs_read_reg_1732 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberInputs_read_reg_1746 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberNeurons_read_reg_1758 : STD_LOGIC_VECTOR (31 downto 0);
    signal numberLayers_read_reg_1779 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln56_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln56_reg_1787 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_fu_883_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_reg_1792 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln59_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_addr_reg_1802 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond14911_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond14911_reg_1808_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_188_fu_918_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_188_reg_1812 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal read_addr_read_reg_1817 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_2_fu_937_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_2_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln64_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_addr_1_reg_1832 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond14810_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond14810_reg_1838_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_190_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_190_reg_1842 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal read_addr_1_read_reg_1847 : STD_LOGIC_VECTOR (31 downto 0);
    signal batchSize_read_reg_1852 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal mul_ln68_fu_987_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_reg_1859 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln68_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_addr_2_reg_1869 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1479_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1479_reg_1875_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_193_fu_1022_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_193_reg_1879 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal read_addr_2_read_reg_1884 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_2_fu_1037_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_2_reg_1889 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal add_ln72_fu_1041_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln72_reg_1895 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln72_1_fu_1046_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln72_1_reg_1900 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln72_fu_1050_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln72_reg_1906 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal mul_ln72_1_fu_1057_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln72_1_reg_1912 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln69_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_addr_3_reg_1922 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1468_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1468_reg_1928_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_195_fu_1092_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_195_reg_1932 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal read_addr_3_read_reg_1937 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_fu_1107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_reg_1942 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal mul34_fu_1112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul34_reg_1948 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1954 : STD_LOGIC_VECTOR (0 downto 0);
    signal add35_fu_1132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add35_reg_1960 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal empty_207_fu_1136_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_207_reg_1965 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_208_fu_1145_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_208_reg_1970 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_209_fu_1149_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_209_reg_1975 : STD_LOGIC_VECTOR (8 downto 0);
    signal l_n_fu_1152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_n_reg_1980 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_210_fu_1161_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_210_reg_1985 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln76_fu_1165_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln76_reg_1990 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln76_fu_1168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_reg_1997 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln76_1_reg_2003 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln107_fu_1180_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln107_reg_2008 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_9_fu_1188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_9_reg_2017 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal trunc_ln76_2_fu_1194_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln76_2_reg_2022 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln76_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal initZero_fu_1211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal initZero_reg_2037 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1678_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln79_reg_2043 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal mul_ln80_fu_1221_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln80_reg_2051 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln86_fu_1227_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln86_fu_1227_p2 : signal is "no";
    signal add_ln86_reg_2056 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln88_fu_1232_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln88_fu_1232_p2 : signal is "no";
    signal add_ln88_reg_2061 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln3_reg_2066 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done : STD_LOGIC;
    signal ap_sync_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready : STD_LOGIC;
    signal ap_sync_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done : STD_LOGIC;
    signal ap_block_state53_on_subcall_done : BOOLEAN;
    signal icmp_ln137_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_2071 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state54_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state58_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal add_ln137_fu_1252_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln137_reg_2075 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal tmp_s_fu_1262_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_reg_2080 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln143_fu_1270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_reg_2090 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_1_fu_1281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_1_reg_2100 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_2_fu_1291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_2_reg_2110 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal ap_block_state55_pp4_stage1_iter0 : BOOLEAN;
    signal ap_block_pp4_stage1_11001 : BOOLEAN;
    signal zext_ln143_3_fu_1301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_3_reg_2120 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_4_fu_1311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_4_reg_2130 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp4_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage2 : signal is "none";
    signal ap_block_state56_pp4_stage2_iter0 : BOOLEAN;
    signal ap_block_pp4_stage2_11001 : BOOLEAN;
    signal zext_ln143_5_fu_1321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_5_reg_2140 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_6_fu_1331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_6_reg_2150 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp4_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage3 : signal is "none";
    signal ap_block_state57_pp4_stage3_iter0 : BOOLEAN;
    signal ap_block_pp4_stage3_11001 : BOOLEAN;
    signal zext_ln143_7_fu_1341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_7_reg_2160 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_n_fu_1357_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_reg_2173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal icmp_ln99_fu_1346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln109_fu_1395_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln109_reg_2183 : STD_LOGIC_VECTOR (13 downto 0);
    signal layer_2_fu_1400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_2_reg_2188 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln110_2_fu_1429_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln110_2_reg_2198 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln103_fu_1434_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln103_reg_2203 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln122_fu_1438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln122_reg_2208 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln129_fu_1444_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln129_fu_1444_p2 : signal is "no";
    signal add_ln129_reg_2213 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1686_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln109_reg_2218 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_1692_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln112_reg_2223 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln137_1_fu_1449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_1_reg_2228 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state65_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state69_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal add_ln137_1_fu_1454_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln137_1_reg_2232 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal tmp_1_fu_1464_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_2237 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln143_8_fu_1472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_8_reg_2247 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_9_fu_1483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_9_reg_2257 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_10_fu_1493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_10_reg_2267 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp5_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage1 : signal is "none";
    signal ap_block_state66_pp5_stage1_iter0 : BOOLEAN;
    signal ap_block_pp5_stage1_11001 : BOOLEAN;
    signal zext_ln143_11_fu_1503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_11_reg_2277 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_12_fu_1513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_12_reg_2287 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp5_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage2 : signal is "none";
    signal ap_block_state67_pp5_stage2_iter0 : BOOLEAN;
    signal ap_block_pp5_stage2_11001 : BOOLEAN;
    signal zext_ln143_13_fu_1523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_13_reg_2297 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_14_fu_1533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_14_reg_2307 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp5_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage3 : signal is "none";
    signal ap_block_state68_pp5_stage3_iter0 : BOOLEAN;
    signal ap_block_pp5_stage3_11001 : BOOLEAN;
    signal zext_ln143_15_fu_1543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_15_reg_2317 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln99_fu_1548_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal bitcast_ln142_fu_1554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln142_reg_2332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_fu_852_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_2337 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln144_fu_1563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln144_reg_2342 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_3_fu_1569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_3_reg_2347 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_1_fu_1583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_1_reg_2355 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln153_fu_1588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state75_io : BOOLEAN;
    signal grp_updateParameter_float_8u_s_fu_816_ap_ready : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_ap_done : STD_LOGIC;
    signal ap_sync_grp_updateParameter_float_8u_s_fu_816_ap_ready : STD_LOGIC;
    signal ap_sync_grp_updateParameter_float_8u_s_fu_816_ap_done : STD_LOGIC;
    signal ap_block_state75_on_subcall_done : BOOLEAN;
    signal exitcond1212_fu_1614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state76_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state77_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state78_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state78_io : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal empty_200_fu_1619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal bramWeight_load_reg_2385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal icmp_ln158_fu_1634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state83 : BOOLEAN;
    signal write_addr_1_reg_2394 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_1658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state85_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state86_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state87_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state87_io : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal empty_202_fu_1663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal bramBias_load_reg_2414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state44 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state54 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done : STD_LOGIC;
    signal ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready : STD_LOGIC;
    signal ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done : STD_LOGIC;
    signal ap_block_state64_on_subcall_done : BOOLEAN;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state65 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage3_subdone : BOOLEAN;
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state76 : STD_LOGIC;
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state85 : STD_LOGIC;
    signal bramClasses_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal bramClasses_ce0 : STD_LOGIC;
    signal bramClasses_we0 : STD_LOGIC;
    signal bramClasses_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramClasses_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramMlpResults_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal bramMlpResults_ce0 : STD_LOGIC;
    signal bramMlpResults_we0 : STD_LOGIC;
    signal bramMlpResults_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramMlpResults_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramMlpResults_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal bramMlpResults_ce1 : STD_LOGIC;
    signal bramMlpResults_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bramError0_ce0 : STD_LOGIC;
    signal bramError0_we0 : STD_LOGIC;
    signal bramError0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal bramError0_ce1 : STD_LOGIC;
    signal bramError0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bramError1_ce0 : STD_LOGIC;
    signal bramError1_we0 : STD_LOGIC;
    signal bramError1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramError1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal bramError1_ce1 : STD_LOGIC;
    signal bramError1_we1 : STD_LOGIC;
    signal bramError1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_n : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_numberOutputsPrev : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_offset : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_offset : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputPrevLayer_offset : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_offset : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_offset : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_ce0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_we0 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_ce1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_we1 : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_initZero : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_start : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_idle : STD_LOGIC;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_continue : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_ce0 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_we0 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_ce1 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_we1 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_ce0 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_we0 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_ce1 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_we1 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramWeight_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramWeight_ce0 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramWeight_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramWeight_we0 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramWeight_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramWeight_ce1 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramWeight_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramWeight_we1 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramBias_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramBias_ce0 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramBias_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramBias_we0 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramBias_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramBias_ce1 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_bramBias_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameter_float_8u_s_fu_816_bramBias_we1 : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_ap_start : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_ap_idle : STD_LOGIC;
    signal grp_updateParameter_float_8u_s_fu_816_ap_continue : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_ce0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_we0 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_ce1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_we1 : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_p_initZero : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_start : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_idle : STD_LOGIC;
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_continue : STD_LOGIC;
    signal ap_phi_mux_loop_index117_phi_fu_664_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index111_phi_fu_676_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index105_phi_fu_688_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index99_phi_fu_700_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_assign_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_block_state71_on_subcall_done : BOOLEAN;
    signal i_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_8_phi_fu_733_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal layer_1_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal layer_011_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_10_phi_fu_763_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done : STD_LOGIC := '0';
    signal grp_updateParameter_float_8u_s_fu_816_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_done : STD_LOGIC := '0';
    signal grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done : STD_LOGIC := '0';
    signal loop_index117_cast_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index111_cast_fu_978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index105_cast_fu_1028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index99_cast_fu_1098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage1 : BOOLEAN;
    signal ap_block_pp4_stage2 : BOOLEAN;
    signal ap_block_pp4_stage3 : BOOLEAN;
    signal ap_block_pp5_stage1 : BOOLEAN;
    signal ap_block_pp5_stage2 : BOOLEAN;
    signal ap_block_pp5_stage3 : BOOLEAN;
    signal loop_index93_cast_fu_1625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_cast_fu_1669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_cast_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast3_cast_fu_957_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_1007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_cast_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast7_cast_fu_1603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast8_cast_fu_1648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_201_fu_1630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp6_stage0_01001 : BOOLEAN;
    signal ap_block_state92 : BOOLEAN;
    signal empty_203_fu_1674_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp7_stage0_01001 : BOOLEAN;
    signal empty_189_fu_929_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_191_fu_983_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_fu_862_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln56_fu_868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_1_fu_874_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToLoad_fu_883_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_fu_894_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal valuesToLoad_1_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast3_fu_948_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast_fu_998_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln72_1_fu_1057_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast2_fu_1068_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul34_fu_1112_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1117_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul41_fu_1140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_fu_1157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln76_5_fu_1202_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln80_fu_1221_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_197_fu_1258_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln143_fu_1275_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_1_fu_1286_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_2_fu_1296_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_3_fu_1306_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_4_fu_1316_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_5_fu_1326_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_6_fu_1336_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln101_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln107_1_fu_1364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln107_fu_1372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln107_fu_1372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_2_fu_1377_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln107_3_fu_1381_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln109_1_fu_1390_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln109_1_fu_1390_p2 : signal is "no";
    signal mul_ln110_fu_1406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_fu_1406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln110_fu_1411_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln110_1_fu_1415_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln110_3_fu_1424_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln110_3_fu_1424_p2 : signal is "no";
    signal empty_198_fu_1460_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln143_7_fu_1477_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_8_fu_1488_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_9_fu_1498_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_10_fu_1508_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_11_fu_1518_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_12_fu_1528_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln143_13_fu_1538_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln144_fu_1563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln151_1_fu_1574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal valuesToStore_1_fu_1583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast7_fu_1594_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast8_fu_1639_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_1678_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1678_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1686_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1692_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (77 downto 0);
    signal ap_block_pp4_stage1_subdone : BOOLEAN;
    signal ap_block_pp4_stage2_subdone : BOOLEAN;
    signal ap_block_pp5_stage1_subdone : BOOLEAN;
    signal ap_block_pp5_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal mul_ln107_fu_1372_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component BGD_computeHiddenGradient_float_8u_3u_2u_s IS
    port (
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        p_numberOutputsPrev : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weights_ce0 : OUT STD_LOGIC;
        p_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we0 : OUT STD_LOGIC;
        p_weights_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weights_ce1 : OUT STD_LOGIC;
        p_weights_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weights_we1 : OUT STD_LOGIC;
        p_weights_offset : IN STD_LOGIC_VECTOR (15 downto 0);
        p_latterError_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_latterError_ce0 : OUT STD_LOGIC;
        p_latterError_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_latterError_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_latterError_we0 : OUT STD_LOGIC;
        p_latterError_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_latterError_ce1 : OUT STD_LOGIC;
        p_latterError_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_latterError_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_latterError_we1 : OUT STD_LOGIC;
        p_outputCurrentLayer_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_outputCurrentLayer_ce0 : OUT STD_LOGIC;
        p_outputCurrentLayer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_outputCurrentLayer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_outputCurrentLayer_we0 : OUT STD_LOGIC;
        p_outputCurrentLayer_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_outputCurrentLayer_ce1 : OUT STD_LOGIC;
        p_outputCurrentLayer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_outputCurrentLayer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_outputCurrentLayer_we1 : OUT STD_LOGIC;
        p_outputCurrentLayer_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_outputPrevLayer_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_weightGradientAvg_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weightGradientAvg_ce0 : OUT STD_LOGIC;
        p_weightGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_we0 : OUT STD_LOGIC;
        p_weightGradientAvg_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weightGradientAvg_ce1 : OUT STD_LOGIC;
        p_weightGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_we1 : OUT STD_LOGIC;
        p_weightGradientAvg_offset : IN STD_LOGIC_VECTOR (15 downto 0);
        p_biasGradientAvg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_biasGradientAvg_ce0 : OUT STD_LOGIC;
        p_biasGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_we0 : OUT STD_LOGIC;
        p_biasGradientAvg_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_biasGradientAvg_ce1 : OUT STD_LOGIC;
        p_biasGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_we1 : OUT STD_LOGIC;
        p_biasGradientAvg_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        p_error_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_error_ce0 : OUT STD_LOGIC;
        p_error_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_error_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_error_we0 : OUT STD_LOGIC;
        p_error_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_error_ce1 : OUT STD_LOGIC;
        p_error_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_error_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_error_we1 : OUT STD_LOGIC;
        p_initZero : IN STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        p_numberOutputsPrev_ap_vld : IN STD_LOGIC;
        p_weights_offset_ap_vld : IN STD_LOGIC;
        p_outputCurrentLayer_offset_ap_vld : IN STD_LOGIC;
        p_outputPrevLayer_offset_ap_vld : IN STD_LOGIC;
        p_weightGradientAvg_offset_ap_vld : IN STD_LOGIC;
        p_biasGradientAvg_offset_ap_vld : IN STD_LOGIC;
        p_initZero_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component BGD_updateParameter_float_8u_s IS
    port (
        p_learningRate : IN STD_LOGIC_VECTOR (31 downto 0);
        p_batchSize : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightSize : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasSize : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bramWeightGradientAvg_ce0 : OUT STD_LOGIC;
        bramWeightGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_we0 : OUT STD_LOGIC;
        bramWeightGradientAvg_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bramWeightGradientAvg_ce1 : OUT STD_LOGIC;
        bramWeightGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeightGradientAvg_we1 : OUT STD_LOGIC;
        bramBiasGradientAvg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bramBiasGradientAvg_ce0 : OUT STD_LOGIC;
        bramBiasGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramBiasGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramBiasGradientAvg_we0 : OUT STD_LOGIC;
        bramBiasGradientAvg_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bramBiasGradientAvg_ce1 : OUT STD_LOGIC;
        bramBiasGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramBiasGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramBiasGradientAvg_we1 : OUT STD_LOGIC;
        bramWeight_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bramWeight_ce0 : OUT STD_LOGIC;
        bramWeight_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramWeight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeight_we0 : OUT STD_LOGIC;
        bramWeight_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bramWeight_ce1 : OUT STD_LOGIC;
        bramWeight_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramWeight_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramWeight_we1 : OUT STD_LOGIC;
        bramBias_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bramBias_ce0 : OUT STD_LOGIC;
        bramBias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramBias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramBias_we0 : OUT STD_LOGIC;
        bramBias_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        bramBias_ce1 : OUT STD_LOGIC;
        bramBias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bramBias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bramBias_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_learningRate_ap_vld : IN STD_LOGIC;
        p_batchSize_ap_vld : IN STD_LOGIC;
        p_weightSize_ap_vld : IN STD_LOGIC;
        p_biasSize_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component BGD_computeOutputGradient_float_8u_2u_s IS
    port (
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        p_results_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_results_ce0 : OUT STD_LOGIC;
        p_results_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_results_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_results_we0 : OUT STD_LOGIC;
        p_results_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_results_ce1 : OUT STD_LOGIC;
        p_results_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_results_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_results_we1 : OUT STD_LOGIC;
        p_results_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_classes_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        p_classes_ce0 : OUT STD_LOGIC;
        p_classes_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_classes_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_classes_we0 : OUT STD_LOGIC;
        p_classes_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        p_classes_ce1 : OUT STD_LOGIC;
        p_classes_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_classes_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_classes_we1 : OUT STD_LOGIC;
        p_classes_offset : IN STD_LOGIC_VECTOR (9 downto 0);
        p_outputPrevLayer_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        p_weightGradientAvg_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weightGradientAvg_ce0 : OUT STD_LOGIC;
        p_weightGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_we0 : OUT STD_LOGIC;
        p_weightGradientAvg_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_weightGradientAvg_ce1 : OUT STD_LOGIC;
        p_weightGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_weightGradientAvg_we1 : OUT STD_LOGIC;
        p_weightGradientAvg_offset : IN STD_LOGIC_VECTOR (15 downto 0);
        p_biasGradientAvg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_biasGradientAvg_ce0 : OUT STD_LOGIC;
        p_biasGradientAvg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_we0 : OUT STD_LOGIC;
        p_biasGradientAvg_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_biasGradientAvg_ce1 : OUT STD_LOGIC;
        p_biasGradientAvg_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_biasGradientAvg_we1 : OUT STD_LOGIC;
        p_biasGradientAvg_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        p_error_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_error_ce0 : OUT STD_LOGIC;
        p_error_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_error_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_error_we0 : OUT STD_LOGIC;
        p_error_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_error_ce1 : OUT STD_LOGIC;
        p_error_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_error_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_error_we1 : OUT STD_LOGIC;
        p_initZero : IN STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_n_ap_vld : IN STD_LOGIC;
        p_k_ap_vld : IN STD_LOGIC;
        p_results_offset_ap_vld : IN STD_LOGIC;
        p_classes_offset_ap_vld : IN STD_LOGIC;
        p_outputPrevLayer_offset_ap_vld : IN STD_LOGIC;
        p_weightGradientAvg_offset_ap_vld : IN STD_LOGIC;
        p_biasGradientAvg_offset_ap_vld : IN STD_LOGIC;
        p_initZero_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component BGD_uitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_mul_10s_10s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component BGD_mul_32s_16ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_mul_mul_14s_14s_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component BGD_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component BGD_bramWeight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramBias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramBiasGradientAvg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramClasses IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramMlpResults IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramError0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_bramError1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axiMlpResultsInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiClassesInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiWeightInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiBiasInput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiWeightOutput : OUT STD_LOGIC_VECTOR (63 downto 0);
        axiBiasOutput : OUT STD_LOGIC_VECTOR (63 downto 0);
        numberInputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberOutputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberLayers : OUT STD_LOGIC_VECTOR (31 downto 0);
        numberNeurons : OUT STD_LOGIC_VECTOR (31 downto 0);
        loadParameters : OUT STD_LOGIC_VECTOR (31 downto 0);
        batchSize : OUT STD_LOGIC_VECTOR (31 downto 0);
        learningRate : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component BGD_read_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component BGD_write_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bramWeight_U : component BGD_bramWeight
    generic map (
        DataWidth => 32,
        AddressRange => 40960,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeight_address0,
        ce0 => bramWeight_ce0,
        we0 => bramWeight_we0,
        d0 => bramWeight_d0,
        q0 => bramWeight_q0,
        address1 => bramWeight_address1,
        ce1 => bramWeight_ce1,
        we1 => bramWeight_we1,
        d1 => grp_updateParameter_float_8u_s_fu_816_bramWeight_d1,
        q1 => bramWeight_q1);

    bramBias_U : component BGD_bramBias
    generic map (
        DataWidth => 32,
        AddressRange => 416,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramBias_address0,
        ce0 => bramBias_ce0,
        we0 => bramBias_we0,
        d0 => bramBias_d0,
        q0 => bramBias_q0,
        address1 => grp_updateParameter_float_8u_s_fu_816_bramBias_address1,
        ce1 => bramBias_ce1,
        we1 => bramBias_we1,
        d1 => grp_updateParameter_float_8u_s_fu_816_bramBias_d1,
        q1 => bramBias_q1);

    bramWeightGradientAvg_U : component BGD_bramWeight
    generic map (
        DataWidth => 32,
        AddressRange => 40960,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramWeightGradientAvg_address0,
        ce0 => bramWeightGradientAvg_ce0,
        we0 => bramWeightGradientAvg_we0,
        d0 => bramWeightGradientAvg_d0,
        q0 => bramWeightGradientAvg_q0,
        address1 => bramWeightGradientAvg_address1,
        ce1 => bramWeightGradientAvg_ce1,
        we1 => bramWeightGradientAvg_we1,
        d1 => bramWeightGradientAvg_d1,
        q1 => bramWeightGradientAvg_q1);

    bramBiasGradientAvg_U : component BGD_bramBiasGradientAvg
    generic map (
        DataWidth => 32,
        AddressRange => 416,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramBiasGradientAvg_address0,
        ce0 => bramBiasGradientAvg_ce0,
        we0 => bramBiasGradientAvg_we0,
        d0 => bramBiasGradientAvg_d0,
        q0 => bramBiasGradientAvg_q0,
        address1 => bramBiasGradientAvg_address1,
        ce1 => bramBiasGradientAvg_ce1,
        q1 => bramBiasGradientAvg_q1);

    control_s_axi_U : component BGD_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        axiMlpResultsInput => axiMlpResultsInput,
        axiClassesInput => axiClassesInput,
        axiWeightInput => axiWeightInput,
        axiBiasInput => axiBiasInput,
        axiWeightOutput => axiWeightOutput,
        axiBiasOutput => axiBiasOutput,
        numberInputs => numberInputs,
        numberOutputs => numberOutputs,
        numberLayers => numberLayers,
        numberNeurons => numberNeurons,
        loadParameters => loadParameters,
        batchSize => batchSize,
        learningRate => learningRate);

    read_r_m_axi_U : component BGD_read_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 128,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_READ_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_READ_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_READ_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_READ_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_READ_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_READ_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_READ_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_READ_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_READ_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_READ_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_READ_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_read_r_AWVALID,
        AWREADY => m_axi_read_r_AWREADY,
        AWADDR => m_axi_read_r_AWADDR,
        AWID => m_axi_read_r_AWID,
        AWLEN => m_axi_read_r_AWLEN,
        AWSIZE => m_axi_read_r_AWSIZE,
        AWBURST => m_axi_read_r_AWBURST,
        AWLOCK => m_axi_read_r_AWLOCK,
        AWCACHE => m_axi_read_r_AWCACHE,
        AWPROT => m_axi_read_r_AWPROT,
        AWQOS => m_axi_read_r_AWQOS,
        AWREGION => m_axi_read_r_AWREGION,
        AWUSER => m_axi_read_r_AWUSER,
        WVALID => m_axi_read_r_WVALID,
        WREADY => m_axi_read_r_WREADY,
        WDATA => m_axi_read_r_WDATA,
        WSTRB => m_axi_read_r_WSTRB,
        WLAST => m_axi_read_r_WLAST,
        WID => m_axi_read_r_WID,
        WUSER => m_axi_read_r_WUSER,
        ARVALID => m_axi_read_r_ARVALID,
        ARREADY => m_axi_read_r_ARREADY,
        ARADDR => m_axi_read_r_ARADDR,
        ARID => m_axi_read_r_ARID,
        ARLEN => m_axi_read_r_ARLEN,
        ARSIZE => m_axi_read_r_ARSIZE,
        ARBURST => m_axi_read_r_ARBURST,
        ARLOCK => m_axi_read_r_ARLOCK,
        ARCACHE => m_axi_read_r_ARCACHE,
        ARPROT => m_axi_read_r_ARPROT,
        ARQOS => m_axi_read_r_ARQOS,
        ARREGION => m_axi_read_r_ARREGION,
        ARUSER => m_axi_read_r_ARUSER,
        RVALID => m_axi_read_r_RVALID,
        RREADY => m_axi_read_r_RREADY,
        RDATA => m_axi_read_r_RDATA,
        RLAST => m_axi_read_r_RLAST,
        RID => m_axi_read_r_RID,
        RUSER => m_axi_read_r_RUSER,
        RRESP => m_axi_read_r_RRESP,
        BVALID => m_axi_read_r_BVALID,
        BREADY => m_axi_read_r_BREADY,
        BRESP => m_axi_read_r_BRESP,
        BID => m_axi_read_r_BID,
        BUSER => m_axi_read_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read_r_ARVALID,
        I_ARREADY => read_r_ARREADY,
        I_ARADDR => read_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => read_r_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => read_r_RVALID,
        I_RREADY => read_r_RREADY,
        I_RDATA => read_r_RDATA,
        I_RID => read_r_RID,
        I_RUSER => read_r_RUSER,
        I_RRESP => read_r_RRESP,
        I_RLAST => read_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => read_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => read_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => read_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => read_r_BRESP,
        I_BID => read_r_BID,
        I_BUSER => read_r_BUSER);

    write_r_m_axi_U : component BGD_write_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_WRITE_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_WRITE_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_WRITE_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_WRITE_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_WRITE_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_WRITE_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_WRITE_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_WRITE_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_WRITE_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_WRITE_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_WRITE_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_write_r_AWVALID,
        AWREADY => m_axi_write_r_AWREADY,
        AWADDR => m_axi_write_r_AWADDR,
        AWID => m_axi_write_r_AWID,
        AWLEN => m_axi_write_r_AWLEN,
        AWSIZE => m_axi_write_r_AWSIZE,
        AWBURST => m_axi_write_r_AWBURST,
        AWLOCK => m_axi_write_r_AWLOCK,
        AWCACHE => m_axi_write_r_AWCACHE,
        AWPROT => m_axi_write_r_AWPROT,
        AWQOS => m_axi_write_r_AWQOS,
        AWREGION => m_axi_write_r_AWREGION,
        AWUSER => m_axi_write_r_AWUSER,
        WVALID => m_axi_write_r_WVALID,
        WREADY => m_axi_write_r_WREADY,
        WDATA => m_axi_write_r_WDATA,
        WSTRB => m_axi_write_r_WSTRB,
        WLAST => m_axi_write_r_WLAST,
        WID => m_axi_write_r_WID,
        WUSER => m_axi_write_r_WUSER,
        ARVALID => m_axi_write_r_ARVALID,
        ARREADY => m_axi_write_r_ARREADY,
        ARADDR => m_axi_write_r_ARADDR,
        ARID => m_axi_write_r_ARID,
        ARLEN => m_axi_write_r_ARLEN,
        ARSIZE => m_axi_write_r_ARSIZE,
        ARBURST => m_axi_write_r_ARBURST,
        ARLOCK => m_axi_write_r_ARLOCK,
        ARCACHE => m_axi_write_r_ARCACHE,
        ARPROT => m_axi_write_r_ARPROT,
        ARQOS => m_axi_write_r_ARQOS,
        ARREGION => m_axi_write_r_ARREGION,
        ARUSER => m_axi_write_r_ARUSER,
        RVALID => m_axi_write_r_RVALID,
        RREADY => m_axi_write_r_RREADY,
        RDATA => m_axi_write_r_RDATA,
        RLAST => m_axi_write_r_RLAST,
        RID => m_axi_write_r_RID,
        RUSER => m_axi_write_r_RUSER,
        RRESP => m_axi_write_r_RRESP,
        BVALID => m_axi_write_r_BVALID,
        BREADY => m_axi_write_r_BREADY,
        BRESP => m_axi_write_r_BRESP,
        BID => m_axi_write_r_BID,
        BUSER => m_axi_write_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => write_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => write_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => write_r_RDATA,
        I_RID => write_r_RID,
        I_RUSER => write_r_RUSER,
        I_RRESP => write_r_RRESP,
        I_RLAST => write_r_RLAST,
        I_AWVALID => write_r_AWVALID,
        I_AWREADY => write_r_AWREADY,
        I_AWADDR => write_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => write_r_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => write_r_WVALID,
        I_WREADY => write_r_WREADY,
        I_WDATA => write_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => write_r_BVALID,
        I_BREADY => write_r_BREADY,
        I_BRESP => write_r_BRESP,
        I_BID => write_r_BID,
        I_BUSER => write_r_BUSER);

    bramClasses_U : component BGD_bramClasses
    generic map (
        DataWidth => 32,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramClasses_address0,
        ce0 => bramClasses_ce0,
        we0 => bramClasses_we0,
        d0 => bramClasses_d0,
        q0 => bramClasses_q0);

    bramMlpResults_U : component BGD_bramMlpResults
    generic map (
        DataWidth => 32,
        AddressRange => 8960,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramMlpResults_address0,
        ce0 => bramMlpResults_ce0,
        we0 => bramMlpResults_we0,
        d0 => bramMlpResults_d0,
        q0 => bramMlpResults_q0,
        address1 => bramMlpResults_address1,
        ce1 => bramMlpResults_ce1,
        q1 => bramMlpResults_q1);

    bramError0_U : component BGD_bramError0
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramError0_address0,
        ce0 => bramError0_ce0,
        we0 => bramError0_we0,
        d0 => bramError0_d0,
        q0 => bramError0_q0,
        address1 => bramError0_address1,
        ce1 => bramError0_ce1,
        q1 => bramError0_q1);

    bramError1_U : component BGD_bramError1
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramError1_address0,
        ce0 => bramError1_ce0,
        we0 => bramError1_we0,
        d0 => bramError0_q0,
        q0 => bramError1_q0,
        address1 => bramError1_address1,
        ce1 => bramError1_ce1,
        we1 => bramError1_we1,
        d1 => bramError0_q1,
        q1 => bramError1_q1);

    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792 : component BGD_computeHiddenGradient_float_8u_3u_2u_s
    port map (
        p_n => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_n,
        p_k => numberNeurons_read_reg_1758,
        p_numberOutputsPrev => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_numberOutputsPrev,
        p_weights_address0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_address0,
        p_weights_ce0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_ce0,
        p_weights_d0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_d0,
        p_weights_q0 => bramWeight_q0,
        p_weights_we0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_we0,
        p_weights_address1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_address1,
        p_weights_ce1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_ce1,
        p_weights_d1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_d1,
        p_weights_q1 => bramWeight_q1,
        p_weights_we1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_we1,
        p_weights_offset => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_offset,
        p_latterError_address0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_address0,
        p_latterError_ce0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_ce0,
        p_latterError_d0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_d0,
        p_latterError_q0 => bramError1_q0,
        p_latterError_we0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_we0,
        p_latterError_address1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_address1,
        p_latterError_ce1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_ce1,
        p_latterError_d1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_d1,
        p_latterError_q1 => bramError1_q1,
        p_latterError_we1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_we1,
        p_outputCurrentLayer_address0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_address0,
        p_outputCurrentLayer_ce0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_ce0,
        p_outputCurrentLayer_d0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_d0,
        p_outputCurrentLayer_q0 => bramMlpResults_q0,
        p_outputCurrentLayer_we0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_we0,
        p_outputCurrentLayer_address1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_address1,
        p_outputCurrentLayer_ce1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_ce1,
        p_outputCurrentLayer_d1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_d1,
        p_outputCurrentLayer_q1 => bramMlpResults_q1,
        p_outputCurrentLayer_we1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_we1,
        p_outputCurrentLayer_offset => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_offset,
        p_outputPrevLayer_offset => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputPrevLayer_offset,
        p_weightGradientAvg_address0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_address0,
        p_weightGradientAvg_ce0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_ce0,
        p_weightGradientAvg_d0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_d0,
        p_weightGradientAvg_q0 => bramWeightGradientAvg_q0,
        p_weightGradientAvg_we0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_we0,
        p_weightGradientAvg_address1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_address1,
        p_weightGradientAvg_ce1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_ce1,
        p_weightGradientAvg_d1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_d1,
        p_weightGradientAvg_q1 => bramWeightGradientAvg_q1,
        p_weightGradientAvg_we1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_we1,
        p_weightGradientAvg_offset => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_offset,
        p_biasGradientAvg_address0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_address0,
        p_biasGradientAvg_ce0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_ce0,
        p_biasGradientAvg_d0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_d0,
        p_biasGradientAvg_q0 => ap_const_lv32_0,
        p_biasGradientAvg_we0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_we0,
        p_biasGradientAvg_address1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_address1,
        p_biasGradientAvg_ce1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_ce1,
        p_biasGradientAvg_d1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_d1,
        p_biasGradientAvg_q1 => bramBiasGradientAvg_q1,
        p_biasGradientAvg_we1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_we1,
        p_biasGradientAvg_offset => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_offset,
        p_error_address0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_address0,
        p_error_ce0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_ce0,
        p_error_d0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_d0,
        p_error_q0 => ap_const_lv32_0,
        p_error_we0 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_we0,
        p_error_address1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_address1,
        p_error_ce1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_ce1,
        p_error_d1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_d1,
        p_error_q1 => ap_const_lv32_0,
        p_error_we1 => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_we1,
        p_initZero => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_initZero,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        p_numberOutputsPrev_ap_vld => ap_const_logic_1,
        p_weights_offset_ap_vld => ap_const_logic_1,
        p_outputCurrentLayer_offset_ap_vld => ap_const_logic_1,
        p_outputPrevLayer_offset_ap_vld => ap_const_logic_1,
        p_weightGradientAvg_offset_ap_vld => ap_const_logic_1,
        p_biasGradientAvg_offset_ap_vld => ap_const_logic_1,
        p_initZero_ap_vld => ap_const_logic_1,
        ap_start => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_start,
        ap_done => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done,
        ap_ready => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready,
        ap_idle => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_idle,
        ap_continue => grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_continue);

    grp_updateParameter_float_8u_s_fu_816 : component BGD_updateParameter_float_8u_s
    port map (
        p_learningRate => bitcast_ln142_reg_2332,
        p_batchSize => conv_reg_2337,
        p_weightSize => mul_ln144_reg_2342,
        p_biasSize => valuesToStore_3_reg_2347,
        bramWeightGradientAvg_address0 => grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_address0,
        bramWeightGradientAvg_ce0 => grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_ce0,
        bramWeightGradientAvg_d0 => grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_d0,
        bramWeightGradientAvg_q0 => bramWeightGradientAvg_q0,
        bramWeightGradientAvg_we0 => grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_we0,
        bramWeightGradientAvg_address1 => grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_address1,
        bramWeightGradientAvg_ce1 => grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_ce1,
        bramWeightGradientAvg_d1 => grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_d1,
        bramWeightGradientAvg_q1 => bramWeightGradientAvg_q1,
        bramWeightGradientAvg_we1 => grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_we1,
        bramBiasGradientAvg_address0 => grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_address0,
        bramBiasGradientAvg_ce0 => grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_ce0,
        bramBiasGradientAvg_d0 => grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_d0,
        bramBiasGradientAvg_q0 => bramBiasGradientAvg_q0,
        bramBiasGradientAvg_we0 => grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_we0,
        bramBiasGradientAvg_address1 => grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_address1,
        bramBiasGradientAvg_ce1 => grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_ce1,
        bramBiasGradientAvg_d1 => grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_d1,
        bramBiasGradientAvg_q1 => bramBiasGradientAvg_q1,
        bramBiasGradientAvg_we1 => grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_we1,
        bramWeight_address0 => grp_updateParameter_float_8u_s_fu_816_bramWeight_address0,
        bramWeight_ce0 => grp_updateParameter_float_8u_s_fu_816_bramWeight_ce0,
        bramWeight_d0 => grp_updateParameter_float_8u_s_fu_816_bramWeight_d0,
        bramWeight_q0 => bramWeight_q0,
        bramWeight_we0 => grp_updateParameter_float_8u_s_fu_816_bramWeight_we0,
        bramWeight_address1 => grp_updateParameter_float_8u_s_fu_816_bramWeight_address1,
        bramWeight_ce1 => grp_updateParameter_float_8u_s_fu_816_bramWeight_ce1,
        bramWeight_d1 => grp_updateParameter_float_8u_s_fu_816_bramWeight_d1,
        bramWeight_q1 => bramWeight_q1,
        bramWeight_we1 => grp_updateParameter_float_8u_s_fu_816_bramWeight_we1,
        bramBias_address0 => grp_updateParameter_float_8u_s_fu_816_bramBias_address0,
        bramBias_ce0 => grp_updateParameter_float_8u_s_fu_816_bramBias_ce0,
        bramBias_d0 => grp_updateParameter_float_8u_s_fu_816_bramBias_d0,
        bramBias_q0 => bramBias_q0,
        bramBias_we0 => grp_updateParameter_float_8u_s_fu_816_bramBias_we0,
        bramBias_address1 => grp_updateParameter_float_8u_s_fu_816_bramBias_address1,
        bramBias_ce1 => grp_updateParameter_float_8u_s_fu_816_bramBias_ce1,
        bramBias_d1 => grp_updateParameter_float_8u_s_fu_816_bramBias_d1,
        bramBias_q1 => bramBias_q1,
        bramBias_we1 => grp_updateParameter_float_8u_s_fu_816_bramBias_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_learningRate_ap_vld => ap_const_logic_1,
        p_batchSize_ap_vld => ap_const_logic_1,
        p_weightSize_ap_vld => ap_const_logic_1,
        p_biasSize_ap_vld => ap_const_logic_1,
        ap_start => grp_updateParameter_float_8u_s_fu_816_ap_start,
        ap_done => grp_updateParameter_float_8u_s_fu_816_ap_done,
        ap_ready => grp_updateParameter_float_8u_s_fu_816_ap_ready,
        ap_idle => grp_updateParameter_float_8u_s_fu_816_ap_idle,
        ap_continue => grp_updateParameter_float_8u_s_fu_816_ap_continue);

    grp_computeOutputGradient_float_8u_2u_s_fu_832 : component BGD_computeOutputGradient_float_8u_2u_s
    port map (
        p_n => size_assign_reg_708,
        p_k => numberNeurons_read_reg_1758,
        p_results_address0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_address0,
        p_results_ce0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_ce0,
        p_results_d0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_d0,
        p_results_q0 => bramMlpResults_q0,
        p_results_we0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_we0,
        p_results_address1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_address1,
        p_results_ce1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_ce1,
        p_results_d1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_d1,
        p_results_q1 => bramMlpResults_q1,
        p_results_we1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_we1,
        p_results_offset => add_ln86_reg_2056,
        p_classes_address0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_address0,
        p_classes_ce0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_ce0,
        p_classes_d0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_d0,
        p_classes_q0 => bramClasses_q0,
        p_classes_we0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_we0,
        p_classes_address1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_address1,
        p_classes_ce1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_ce1,
        p_classes_d1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_d1,
        p_classes_q1 => ap_const_lv32_0,
        p_classes_we1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_we1,
        p_classes_offset => mul_ln80_reg_2051,
        p_outputPrevLayer_offset => add_ln88_reg_2061,
        p_weightGradientAvg_address0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_address0,
        p_weightGradientAvg_ce0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_ce0,
        p_weightGradientAvg_d0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_d0,
        p_weightGradientAvg_q0 => bramWeightGradientAvg_q0,
        p_weightGradientAvg_we0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_we0,
        p_weightGradientAvg_address1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_address1,
        p_weightGradientAvg_ce1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_ce1,
        p_weightGradientAvg_d1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_d1,
        p_weightGradientAvg_q1 => bramWeightGradientAvg_q1,
        p_weightGradientAvg_we1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_we1,
        p_weightGradientAvg_offset => empty_208_reg_1970,
        p_biasGradientAvg_address0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_address0,
        p_biasGradientAvg_ce0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_ce0,
        p_biasGradientAvg_d0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_d0,
        p_biasGradientAvg_q0 => ap_const_lv32_0,
        p_biasGradientAvg_we0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_we0,
        p_biasGradientAvg_address1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_address1,
        p_biasGradientAvg_ce1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_ce1,
        p_biasGradientAvg_d1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_d1,
        p_biasGradientAvg_q1 => bramBiasGradientAvg_q1,
        p_biasGradientAvg_we1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_we1,
        p_biasGradientAvg_offset => empty_209_reg_1975,
        p_error_address0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_address0,
        p_error_ce0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_ce0,
        p_error_d0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_d0,
        p_error_q0 => ap_const_lv32_0,
        p_error_we0 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_we0,
        p_error_address1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_address1,
        p_error_ce1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_ce1,
        p_error_d1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_d1,
        p_error_q1 => ap_const_lv32_0,
        p_error_we1 => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_we1,
        p_initZero => grp_computeOutputGradient_float_8u_2u_s_fu_832_p_initZero,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_n_ap_vld => ap_const_logic_1,
        p_k_ap_vld => ap_const_logic_1,
        p_results_offset_ap_vld => ap_const_logic_1,
        p_classes_offset_ap_vld => ap_const_logic_1,
        p_outputPrevLayer_offset_ap_vld => ap_const_logic_1,
        p_weightGradientAvg_offset_ap_vld => ap_const_logic_1,
        p_biasGradientAvg_offset_ap_vld => ap_const_logic_1,
        p_initZero_ap_vld => ap_const_logic_1,
        ap_start => grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_start,
        ap_done => grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done,
        ap_ready => grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready,
        ap_idle => grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_idle,
        ap_continue => grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_continue);

    uitofp_32s_32_4_no_dsp_1_U494 : component BGD_uitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => batchSize_read_reg_1852,
        ce => ap_const_logic_1,
        dout => grp_fu_852_p1);

    mul_32s_32s_32_1_1_U495 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons,
        din1 => mul_ln56_fu_868_p1,
        dout => mul_ln56_fu_868_p2);

    mul_32s_32s_32_1_1_U496 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1758,
        din1 => valuesToLoad_fu_883_p1,
        dout => valuesToLoad_fu_883_p2);

    mul_32s_32s_32_1_1_U497 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberLayers_read_reg_1779,
        din1 => numberNeurons_read_reg_1758,
        dout => valuesToLoad_1_fu_933_p2);

    mul_32s_32s_32_1_1_U498 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => batchSize,
        din1 => numberOutputs_read_reg_1732,
        dout => mul_ln68_fu_987_p2);

    mul_32s_32s_32_1_1_U499 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1758,
        din1 => numberLayers_read_reg_1779,
        dout => valuesToStore_2_fu_1037_p2);

    mul_32s_32s_32_1_1_U500 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => batchSize_read_reg_1852,
        din1 => mul_ln72_1_fu_1057_p1,
        dout => mul_ln72_1_fu_1057_p2);

    mul_32s_32s_32_1_1_U501 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul34_fu_1112_p0,
        din1 => numberNeurons_read_reg_1758,
        dout => mul34_fu_1112_p2);

    mul_32s_32s_32_1_1_U502 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => add35_fu_1132_p2,
        din1 => numberNeurons_read_reg_1758,
        dout => mul41_fu_1140_p2);

    mul_32s_32s_32_1_1_U503 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberInputs_read_reg_1746,
        din1 => numberNeurons_read_reg_1758,
        dout => valuesToStore_fu_1157_p2);

    mul_10s_10s_10_1_1_U504 : component BGD_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln80_fu_1221_p0,
        din1 => trunc_ln76_2_reg_2022,
        dout => mul_ln80_fu_1221_p2);

    mul_32s_16ns_32_1_1_U505 : component BGD_mul_32s_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1758,
        din1 => mul_ln107_fu_1372_p1,
        dout => mul_ln107_fu_1372_p2);

    mul_32s_32s_32_1_1_U506 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1758,
        din1 => mul_ln110_fu_1406_p1,
        dout => mul_ln110_fu_1406_p2);

    mul_32s_32s_32_1_1_U507 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1758,
        din1 => mul_ln144_fu_1563_p1,
        dout => mul_ln144_fu_1563_p2);

    mul_32s_32s_32_1_1_U508 : component BGD_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => numberNeurons_read_reg_1758,
        din1 => valuesToStore_1_fu_1583_p1,
        dout => valuesToStore_1_fu_1583_p2);

    mul_mul_14s_14s_14_4_1_U509 : component BGD_mul_mul_14s_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1678_p0,
        din1 => grp_fu_1678_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1678_p2);

    mul_mul_16s_16s_16_4_1_U510 : component BGD_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1686_p0,
        din1 => trunc_ln107_reg_2008,
        ce => ap_const_logic_1,
        dout => grp_fu_1686_p2);

    mul_mul_16s_16s_16_4_1_U511 : component BGD_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1692_p0,
        din1 => trunc_ln107_reg_2008,
        ce => ap_const_logic_1,
        dout => grp_fu_1692_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state32);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state44);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state54))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state65) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state64_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp5_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif (((ap_const_boolean_0 = ap_block_state64_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state76) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state76)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state76);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state85) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state85)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state85);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state71_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((ap_const_boolean_0 = ap_block_state64_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state64)))) then 
                    ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done <= ap_const_logic_0;
                elsif ((grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state71_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((ap_const_boolean_0 = ap_block_state64_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state64)))) then 
                    ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready <= ap_const_logic_0;
                elsif ((grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done <= ap_const_logic_0;
                elsif ((grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready <= ap_const_logic_0;
                elsif ((grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_done <= ap_const_logic_0;
            else
                if ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                    ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_done <= ap_const_logic_0;
                elsif ((grp_updateParameter_float_8u_s_fu_816_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_ready <= ap_const_logic_0;
            else
                if ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                    ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_ready <= ap_const_logic_0;
                elsif ((grp_updateParameter_float_8u_s_fu_816_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state63) or ((icmp_ln99_fu_1346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready = ap_const_logic_0)))) then 
                    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready = ap_const_logic_1)) then 
                    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_sync_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
                    grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready = ap_const_logic_1)) then 
                    grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateParameter_float_8u_s_fu_816_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_updateParameter_float_8u_s_fu_816_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state74) or ((ap_const_logic_1 = ap_CS_fsm_state75) and (ap_sync_grp_updateParameter_float_8u_s_fu_816_ap_ready = ap_const_logic_0)))) then 
                    grp_updateParameter_float_8u_s_fu_816_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateParameter_float_8u_s_fu_816_ap_ready = ap_const_logic_1)) then 
                    grp_updateParameter_float_8u_s_fu_816_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_10_reg_759_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state64_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                i_10_reg_759 <= ap_const_lv29_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0))) then 
                i_10_reg_759 <= add_ln137_1_reg_2232;
            end if; 
        end if;
    end process;

    i_8_reg_729_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_8_reg_729 <= ap_const_lv29_0;
            elsif (((icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
                i_8_reg_729 <= add_ln137_reg_2075;
            end if; 
        end if;
    end process;

    i_reg_718_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state71_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                i_reg_718 <= i_9_reg_2017;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                i_reg_718 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    layer_011_reg_750_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                layer_011_reg_750 <= layer_reg_1942;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                layer_011_reg_750 <= layer_2_reg_2188;
            end if; 
        end if;
    end process;

    layer_1_reg_740_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                layer_1_reg_740 <= zext_ln76_reg_1997;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                layer_1_reg_740 <= add_ln99_fu_1548_p2;
            end if; 
        end if;
    end process;

    loop_index105_reg_684_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                loop_index105_reg_684 <= ap_const_lv32_0;
            elsif (((exitcond1479_reg_1875 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                loop_index105_reg_684 <= empty_193_reg_1879;
            end if; 
        end if;
    end process;

    loop_index111_reg_672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                loop_index111_reg_672 <= ap_const_lv32_0;
            elsif (((exitcond14810_reg_1838 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                loop_index111_reg_672 <= empty_190_reg_1842;
            end if; 
        end if;
    end process;

    loop_index117_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                loop_index117_reg_660 <= ap_const_lv32_0;
            elsif (((exitcond14911_reg_1808 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                loop_index117_reg_660 <= empty_188_reg_1812;
            end if; 
        end if;
    end process;

    loop_index93_reg_770_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                loop_index93_reg_770 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (exitcond1212_fu_1614_p2 = ap_const_lv1_0))) then 
                loop_index93_reg_770 <= empty_200_fu_1619_p2;
            end if; 
        end if;
    end process;

    loop_index99_reg_696_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                loop_index99_reg_696 <= ap_const_lv32_0;
            elsif (((exitcond1468_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                loop_index99_reg_696 <= empty_195_reg_1932;
            end if; 
        end if;
    end process;

    loop_index_reg_781_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                loop_index_reg_781 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (exitcond1_fu_1658_p2 = ap_const_lv1_0))) then 
                loop_index_reg_781 <= empty_202_fu_1663_p2;
            end if; 
        end if;
    end process;

    size_assign_reg_708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state71_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                size_assign_reg_708 <= select_ln122_reg_2208;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                size_assign_reg_708 <= numberOutputs_read_reg_1732;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add35_reg_1960 <= add35_fu_1132_p2;
                empty_207_reg_1965 <= empty_207_fu_1136_p1;
                empty_208_reg_1970 <= empty_208_fu_1145_p1;
                empty_209_reg_1975 <= empty_209_fu_1149_p1;
                empty_210_reg_1985 <= empty_210_fu_1161_p1;
                l_n_reg_1980 <= l_n_fu_1152_p3;
                trunc_ln107_reg_2008 <= trunc_ln107_fu_1180_p1;
                trunc_ln76_1_reg_2003 <= numberNeurons_read_reg_1758(31 downto 3);
                trunc_ln76_reg_1990 <= trunc_ln76_fu_1165_p1;
                    zext_ln76_reg_1997(31 downto 0) <= zext_ln76_fu_1168_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_1346_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                add_ln109_reg_2183 <= add_ln109_fu_1395_p2;
                add_ln110_2_reg_2198 <= add_ln110_2_fu_1429_p2;
                layer_2_reg_2188 <= layer_2_fu_1400_p2;
                p_n_reg_2173 <= p_n_fu_1357_p3;
                trunc_ln103_reg_2203 <= trunc_ln103_fu_1434_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_1346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                add_ln129_reg_2213 <= add_ln129_fu_1444_p2;
                select_ln122_reg_2208 <= select_ln122_fu_1438_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then
                add_ln137_1_reg_2232 <= add_ln137_1_fu_1454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                add_ln137_reg_2075 <= add_ln137_fu_1252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                add_ln72_reg_1895 <= add_ln72_fu_1041_p2;
                trunc_ln72_1_reg_1900 <= trunc_ln72_1_fu_1046_p1;
                valuesToStore_2_reg_1889 <= valuesToStore_2_fu_1037_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                add_ln86_reg_2056 <= add_ln86_fu_1227_p2;
                add_ln88_reg_2061 <= add_ln88_fu_1232_p2;
                mul_ln79_reg_2043 <= grp_fu_1678_p2;
                mul_ln80_reg_2051 <= mul_ln80_fu_1221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                axiBiasInput_read_reg_1708 <= axiBiasInput;
                axiBiasOutput_read_reg_1698 <= axiBiasOutput;
                axiClassesInput_read_reg_1718 <= axiClassesInput;
                axiMlpResultsInput_read_reg_1723 <= axiMlpResultsInput;
                axiWeightInput_read_reg_1713 <= axiWeightInput;
                axiWeightOutput_read_reg_1703 <= axiWeightOutput;
                numberInputs_read_reg_1746 <= numberInputs;
                numberLayers_read_reg_1779 <= numberLayers;
                numberNeurons_read_reg_1758 <= numberNeurons;
                numberOutputs_read_reg_1732 <= numberOutputs;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                batchSize_read_reg_1852 <= batchSize;
                mul_ln68_reg_1859 <= mul_ln68_fu_987_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                bitcast_ln142_reg_2332 <= bitcast_ln142_fu_1554_p1;
                conv_reg_2337 <= grp_fu_852_p1;
                icmp_ln153_reg_2361 <= icmp_ln153_fu_1588_p2;
                mul_ln144_reg_2342 <= mul_ln144_fu_1563_p2;
                valuesToStore_1_reg_2355 <= valuesToStore_1_fu_1583_p2;
                valuesToStore_3_reg_2347 <= valuesToStore_3_fu_1569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2400 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1))) then
                bramBias_load_reg_2414 <= bramBias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1212_reg_2371 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then
                bramWeight_load_reg_2385 <= bramWeight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_188_reg_1812 <= empty_188_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_190_reg_1842 <= empty_190_fu_972_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                empty_193_reg_1879 <= empty_193_fu_1022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                empty_195_reg_1932 <= empty_195_fu_1092_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                exitcond1212_reg_2371 <= exitcond1212_fu_1614_p2;
                exitcond1212_reg_2371_pp6_iter1_reg <= exitcond1212_reg_2371;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond1468_reg_1928 <= exitcond1468_fu_1087_p2;
                exitcond1468_reg_1928_pp3_iter1_reg <= exitcond1468_reg_1928;
                loop_index99_reg_696_pp3_iter1_reg <= loop_index99_reg_696;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond1479_reg_1875 <= exitcond1479_fu_1017_p2;
                exitcond1479_reg_1875_pp2_iter1_reg <= exitcond1479_reg_1875;
                loop_index105_reg_684_pp2_iter1_reg <= loop_index105_reg_684;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond14810_reg_1838 <= exitcond14810_fu_967_p2;
                exitcond14810_reg_1838_pp1_iter1_reg <= exitcond14810_reg_1838;
                loop_index111_reg_672_pp1_iter1_reg <= loop_index111_reg_672;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond14911_reg_1808 <= exitcond14911_fu_913_p2;
                exitcond14911_reg_1808_pp0_iter1_reg <= exitcond14911_reg_1808;
                loop_index117_reg_660_pp0_iter1_reg <= loop_index117_reg_660;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                exitcond1_reg_2400 <= exitcond1_fu_1658_p2;
                exitcond1_reg_2400_pp7_iter1_reg <= exitcond1_reg_2400;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                i_9_reg_2017 <= i_9_fu_1188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln137_1_reg_2228 <= icmp_ln137_1_fu_1449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln137_reg_2071 <= icmp_ln137_fu_1247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln153_reg_2361 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                icmp_ln158_reg_2390 <= icmp_ln158_fu_1634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                icmp_reg_1954 <= icmp_fu_1126_p2;
                layer_reg_1942 <= layer_fu_1107_p2;
                mul34_reg_1948 <= mul34_fu_1112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_1183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                initZero_reg_2037 <= initZero_fu_1211_p2;
                trunc_ln76_2_reg_2022 <= trunc_ln76_2_fu_1194_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                mul_ln109_reg_2218 <= grp_fu_1686_p2;
                mul_ln112_reg_2223 <= grp_fu_1692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln51_fu_856_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln56_reg_1787 <= mul_ln56_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                mul_ln72_1_reg_1912 <= mul_ln72_1_fu_1057_p2;
                trunc_ln72_reg_1906 <= trunc_ln72_fu_1050_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond14810_reg_1838 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                read_addr_1_read_reg_1847 <= read_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_942_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                read_addr_1_reg_1832 <= p_cast3_cast_fu_957_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1479_reg_1875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                read_addr_2_read_reg_1884 <= read_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_992_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                read_addr_2_reg_1869 <= p_cast_cast_fu_1007_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1468_reg_1928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                read_addr_3_read_reg_1937 <= read_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_1062_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                read_addr_3_reg_1922 <= p_cast2_cast_fu_1077_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond14911_reg_1808 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                read_addr_read_reg_1817 <= read_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_888_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                read_addr_reg_1802 <= p_cast1_cast_fu_903_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln137_1_fu_1449_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_2237(6 downto 3) <= tmp_1_fu_1464_p3(6 downto 3);
                    zext_ln143_8_reg_2247(6 downto 3) <= zext_ln143_8_fu_1472_p1(6 downto 3);
                    zext_ln143_9_reg_2257(6 downto 3) <= zext_ln143_9_fu_1483_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_1247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    tmp_s_reg_2080(6 downto 3) <= tmp_s_fu_1262_p3(6 downto 3);
                    zext_ln143_1_reg_2100(6 downto 3) <= zext_ln143_1_fu_1281_p1(6 downto 3);
                    zext_ln143_reg_2090(6 downto 3) <= zext_ln143_fu_1270_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                trunc_ln3_reg_2066 <= size_assign_reg_708(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                valuesToLoad_2_reg_1822 <= valuesToLoad_2_fu_937_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                valuesToLoad_reg_1792 <= valuesToLoad_fu_883_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln153_reg_2361 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83) and (icmp_ln158_fu_1634_p2 = ap_const_lv1_0))) then
                write_addr_1_reg_2394 <= p_cast8_cast_fu_1648_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0))) then
                    zext_ln143_10_reg_2267(6 downto 3) <= zext_ln143_10_fu_1493_p1(6 downto 3);
                    zext_ln143_11_reg_2277(6 downto 3) <= zext_ln143_11_fu_1503_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0))) then
                    zext_ln143_12_reg_2287(6 downto 3) <= zext_ln143_12_fu_1513_p1(6 downto 3);
                    zext_ln143_13_reg_2297(6 downto 3) <= zext_ln143_13_fu_1523_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0))) then
                    zext_ln143_14_reg_2307(6 downto 3) <= zext_ln143_14_fu_1533_p1(6 downto 3);
                    zext_ln143_15_reg_2317(6 downto 3) <= zext_ln143_15_fu_1543_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                    zext_ln143_2_reg_2110(6 downto 3) <= zext_ln143_2_fu_1291_p1(6 downto 3);
                    zext_ln143_3_reg_2120(6 downto 3) <= zext_ln143_3_fu_1301_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2))) then
                    zext_ln143_4_reg_2130(6 downto 3) <= zext_ln143_4_fu_1311_p1(6 downto 3);
                    zext_ln143_5_reg_2140(6 downto 3) <= zext_ln143_5_fu_1321_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then
                    zext_ln143_6_reg_2150(6 downto 3) <= zext_ln143_6_fu_1331_p1(6 downto 3);
                    zext_ln143_7_reg_2160(6 downto 3) <= zext_ln143_7_fu_1341_p1(6 downto 3);
            end if;
        end if;
    end process;
    zext_ln76_reg_1997(63 downto 32) <= "00000000000000000000000000000000";
    tmp_s_reg_2080(2 downto 0) <= "000";
    zext_ln143_reg_2090(2 downto 0) <= "000";
    zext_ln143_reg_2090(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_1_reg_2100(2 downto 0) <= "001";
    zext_ln143_1_reg_2100(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_2_reg_2110(2 downto 0) <= "010";
    zext_ln143_2_reg_2110(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_3_reg_2120(2 downto 0) <= "011";
    zext_ln143_3_reg_2120(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_4_reg_2130(2 downto 0) <= "100";
    zext_ln143_4_reg_2130(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_5_reg_2140(2 downto 0) <= "101";
    zext_ln143_5_reg_2140(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_6_reg_2150(2 downto 0) <= "110";
    zext_ln143_6_reg_2150(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_7_reg_2160(2 downto 0) <= "111";
    zext_ln143_7_reg_2160(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_2237(2 downto 0) <= "000";
    zext_ln143_8_reg_2247(2 downto 0) <= "000";
    zext_ln143_8_reg_2247(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_9_reg_2257(2 downto 0) <= "001";
    zext_ln143_9_reg_2257(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_10_reg_2267(2 downto 0) <= "010";
    zext_ln143_10_reg_2267(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_11_reg_2277(2 downto 0) <= "011";
    zext_ln143_11_reg_2277(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_12_reg_2287(2 downto 0) <= "100";
    zext_ln143_12_reg_2287(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_13_reg_2297(2 downto 0) <= "101";
    zext_ln143_13_reg_2297(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_14_reg_2307(2 downto 0) <= "110";
    zext_ln143_14_reg_2307(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln143_15_reg_2317(2 downto 0) <= "111";
    zext_ln143_15_reg_2317(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_CS_fsm_state25, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_CS_fsm_state37, ap_enable_reg_pp1_iter1, ap_CS_fsm_state14, ap_CS_fsm_state75, icmp_ln153_reg_2361, ap_enable_reg_pp6_iter2, ap_CS_fsm_state83, ap_enable_reg_pp7_iter2, ap_CS_fsm_state92, icmp_ln158_reg_2390, ap_CS_fsm_state84, read_r_ARREADY, write_r_AWREADY, write_r_BVALID, icmp_ln51_fu_856_p2, ap_CS_fsm_state2, icmp_ln59_fu_888_p2, exitcond14911_fu_913_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, icmp_ln64_fu_942_p2, exitcond14810_fu_967_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state24, icmp_ln68_fu_992_p2, exitcond1479_fu_1017_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state36, icmp_ln69_fu_1062_p2, exitcond1468_fu_1087_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state49, icmp_ln76_fu_1183_p2, ap_CS_fsm_state53, ap_block_state53_on_subcall_done, icmp_ln137_fu_1247_p2, ap_enable_reg_pp4_iter0, ap_CS_fsm_state60, icmp_ln99_fu_1346_p2, icmp_ln137_1_fu_1449_p2, ap_enable_reg_pp5_iter0, ap_block_state75_io, ap_block_state75_on_subcall_done, exitcond1212_fu_1614_p2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, icmp_ln158_fu_1634_p2, exitcond1_fu_1658_p2, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_block_pp4_stage3_subdone, ap_CS_fsm_state64, ap_block_state64_on_subcall_done, ap_block_pp5_stage0_subdone, ap_block_pp5_stage3_subdone, ap_block_pp6_stage0_subdone, ap_block_pp7_stage0_subdone, ap_CS_fsm_state71, ap_block_state71_on_subcall_done, ap_block_pp4_stage1_subdone, ap_block_pp4_stage2_subdone, ap_block_pp5_stage1_subdone, ap_block_pp5_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln51_fu_856_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln51_fu_856_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln59_fu_888_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond14911_fu_913_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond14911_fu_913_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln64_fu_942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond14810_fu_967_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond14810_fu_967_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln68_fu_992_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond1479_fu_1017_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond1479_fu_1017_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln69_fu_1062_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond1468_fu_1087_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond1468_fu_1087_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln76_fu_1183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_fu_1247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_fu_1247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                end if;
            when ap_ST_fsm_pp4_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                end if;
            when ap_ST_fsm_pp4_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((icmp_ln99_fu_1346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_boolean_0 = ap_block_state64_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_1_fu_1449_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_1_fu_1449_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_pp5_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp5_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage1;
                end if;
            when ap_ST_fsm_pp5_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp5_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage2;
                end if;
            when ap_ST_fsm_pp5_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp5_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage3;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state71 => 
                if (((ap_const_boolean_0 = ap_block_state71_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (icmp_ln153_reg_2361 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (exitcond1212_fu_1614_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (exitcond1212_fu_1614_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                if ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln153_reg_2361 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83) and (icmp_ln158_fu_1634_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                elsif ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln153_reg_2361 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state83) and (icmp_ln158_fu_1634_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (exitcond1_fu_1658_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (exitcond1_fu_1658_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                if ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln158_reg_2390 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add35_fu_1132_p2 <= std_logic_vector(unsigned(mul34_reg_1948) + unsigned(numberInputs_read_reg_1746));
    add_ln109_1_fu_1390_p2 <= std_logic_vector(unsigned(trunc_ln107_3_fu_1381_p1) + unsigned(mul_ln79_reg_2043));
    add_ln109_fu_1395_p2 <= std_logic_vector(unsigned(add_ln109_1_fu_1390_p2) + unsigned(trunc_ln76_reg_1990));
    add_ln110_2_fu_1429_p2 <= std_logic_vector(unsigned(add_ln110_3_fu_1424_p2) + unsigned(trunc_ln76_reg_1990));
    add_ln110_3_fu_1424_p2 <= std_logic_vector(unsigned(trunc_ln110_1_fu_1415_p1) + unsigned(mul_ln79_reg_2043));
    add_ln129_fu_1444_p2 <= std_logic_vector(signed(mul_ln79_reg_2043) + signed(trunc_ln76_reg_1990));
    add_ln137_1_fu_1454_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_10_phi_fu_763_p4) + unsigned(ap_const_lv29_1));
    add_ln137_fu_1252_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_8_phi_fu_733_p4) + unsigned(ap_const_lv29_1));
    add_ln151_1_fu_1574_p2 <= std_logic_vector(signed(numberOutputs_read_reg_1732) + signed(mul34_reg_1948));
    add_ln56_fu_862_p0 <= numberLayers;
    add_ln57_1_fu_874_p2 <= std_logic_vector(signed(numberOutputs_read_reg_1732) + signed(mul_ln56_reg_1787));
    add_ln72_fu_1041_p2 <= std_logic_vector(signed(numberInputs_read_reg_1746) + signed(valuesToStore_2_fu_1037_p2));
    add_ln86_fu_1227_p2 <= std_logic_vector(unsigned(trunc_ln72_1_reg_1900) + unsigned(grp_fu_1678_p2));
    add_ln88_fu_1232_p2 <= std_logic_vector(unsigned(empty_207_reg_1965) + unsigned(grp_fu_1678_p2));
    add_ln99_fu_1548_p2 <= std_logic_vector(unsigned(layer_1_reg_740) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(37);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(45);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(46);
    ap_CS_fsm_pp4_stage2 <= ap_CS_fsm(47);
    ap_CS_fsm_pp4_stage3 <= ap_CS_fsm(48);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(55);
    ap_CS_fsm_pp5_stage1 <= ap_CS_fsm(56);
    ap_CS_fsm_pp5_stage2 <= ap_CS_fsm(57);
    ap_CS_fsm_pp5_stage3 <= ap_CS_fsm(58);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(65);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(72);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(26);
    ap_CS_fsm_state35 <= ap_CS_fsm(28);
    ap_CS_fsm_state36 <= ap_CS_fsm(29);
    ap_CS_fsm_state37 <= ap_CS_fsm(30);
    ap_CS_fsm_state43 <= ap_CS_fsm(36);
    ap_CS_fsm_state47 <= ap_CS_fsm(38);
    ap_CS_fsm_state48 <= ap_CS_fsm(39);
    ap_CS_fsm_state49 <= ap_CS_fsm(40);
    ap_CS_fsm_state52 <= ap_CS_fsm(43);
    ap_CS_fsm_state53 <= ap_CS_fsm(44);
    ap_CS_fsm_state59 <= ap_CS_fsm(49);
    ap_CS_fsm_state60 <= ap_CS_fsm(50);
    ap_CS_fsm_state63 <= ap_CS_fsm(53);
    ap_CS_fsm_state64 <= ap_CS_fsm(54);
    ap_CS_fsm_state70 <= ap_CS_fsm(59);
    ap_CS_fsm_state71 <= ap_CS_fsm(60);
    ap_CS_fsm_state74 <= ap_CS_fsm(63);
    ap_CS_fsm_state75 <= ap_CS_fsm(64);
    ap_CS_fsm_state83 <= ap_CS_fsm(70);
    ap_CS_fsm_state84 <= ap_CS_fsm(71);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state92 <= ap_CS_fsm(77);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond14911_reg_1808, read_r_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond14911_reg_1808 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond14911_reg_1808, read_r_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((read_r_RVALID = ap_const_logic_0) and (exitcond14911_reg_1808 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond14810_reg_1838, read_r_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond14810_reg_1838 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond14810_reg_1838, read_r_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((read_r_RVALID = ap_const_logic_0) and (exitcond14810_reg_1838 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond1479_reg_1875, read_r_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond1479_reg_1875 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond1479_reg_1875, read_r_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((read_r_RVALID = ap_const_logic_0) and (exitcond1479_reg_1875 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond1468_reg_1928, read_r_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond1468_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond1468_reg_1928, read_r_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((read_r_RVALID = ap_const_logic_0) and (exitcond1468_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state78_io)
    begin
                ap_block_pp6_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state78_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state78_io)
    begin
                ap_block_pp6_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state78_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage0_11001_assign_proc : process(ap_enable_reg_pp7_iter2, ap_block_state87_io)
    begin
                ap_block_pp7_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state87_io) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage0_subdone_assign_proc : process(ap_enable_reg_pp7_iter2, ap_block_state87_io)
    begin
                ap_block_pp7_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state87_io) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(exitcond14911_reg_1808, read_r_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond14911_reg_1808 = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage0_iter1_assign_proc : process(exitcond14810_reg_1838, read_r_RVALID)
    begin
                ap_block_state22_pp1_stage0_iter1 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond14810_reg_1838 = ap_const_lv1_0));
    end process;

        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_pp2_stage0_iter1_assign_proc : process(exitcond1479_reg_1875, read_r_RVALID)
    begin
                ap_block_state33_pp2_stage0_iter1 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond1479_reg_1875 = ap_const_lv1_0));
    end process;

        ap_block_state34_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state45_pp3_stage0_iter1_assign_proc : process(exitcond1468_reg_1928, read_r_RVALID)
    begin
                ap_block_state45_pp3_stage0_iter1 <= ((read_r_RVALID = ap_const_logic_0) and (exitcond1468_reg_1928 = ap_const_lv1_0));
    end process;

        ap_block_state46_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state53_on_subcall_done_assign_proc : process(ap_sync_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready, ap_sync_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done)
    begin
                ap_block_state53_on_subcall_done <= ((ap_sync_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready and ap_sync_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state54_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp4_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp4_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp4_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state64_on_subcall_done_assign_proc : process(ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready, ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done)
    begin
                ap_block_state64_on_subcall_done <= ((ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready and ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state65_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp5_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp5_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp5_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state71_on_subcall_done_assign_proc : process(ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready, ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done)
    begin
                ap_block_state71_on_subcall_done <= ((ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready and ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state75_io_assign_proc : process(icmp_ln153_reg_2361, write_r_AWREADY)
    begin
                ap_block_state75_io <= ((write_r_AWREADY = ap_const_logic_0) and (icmp_ln153_reg_2361 = ap_const_lv1_0));
    end process;


    ap_block_state75_on_subcall_done_assign_proc : process(ap_sync_grp_updateParameter_float_8u_s_fu_816_ap_ready, ap_sync_grp_updateParameter_float_8u_s_fu_816_ap_done)
    begin
                ap_block_state75_on_subcall_done <= ((ap_sync_grp_updateParameter_float_8u_s_fu_816_ap_ready and ap_sync_grp_updateParameter_float_8u_s_fu_816_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state76_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state78_io_assign_proc : process(exitcond1212_reg_2371_pp6_iter1_reg, write_r_WREADY)
    begin
                ap_block_state78_io <= ((write_r_WREADY = ap_const_logic_0) and (exitcond1212_reg_2371_pp6_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state78_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state83_assign_proc : process(icmp_ln153_reg_2361, write_r_BVALID)
    begin
                ap_block_state83 <= ((write_r_BVALID = ap_const_logic_0) and (icmp_ln153_reg_2361 = ap_const_lv1_0));
    end process;

        ap_block_state85_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state87_io_assign_proc : process(exitcond1_reg_2400_pp7_iter1_reg, write_r_WREADY)
    begin
                ap_block_state87_io <= ((write_r_WREADY = ap_const_logic_0) and (exitcond1_reg_2400_pp7_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state87_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state92_assign_proc : process(icmp_ln158_reg_2390, write_r_BVALID)
    begin
                ap_block_state92 <= ((write_r_BVALID = ap_const_logic_0) and (icmp_ln158_reg_2390 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond14911_fu_913_p2)
    begin
        if ((exitcond14911_fu_913_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(exitcond14810_fu_967_p2)
    begin
        if ((exitcond14810_fu_967_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state32_assign_proc : process(exitcond1479_fu_1017_p2)
    begin
        if ((exitcond1479_fu_1017_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state44_assign_proc : process(exitcond1468_fu_1087_p2)
    begin
        if ((exitcond1468_fu_1087_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state54_assign_proc : process(icmp_ln137_fu_1247_p2)
    begin
        if ((icmp_ln137_fu_1247_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state54 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state65_assign_proc : process(icmp_ln137_1_fu_1449_p2)
    begin
        if ((icmp_ln137_1_fu_1449_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state65 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state65 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state76_assign_proc : process(exitcond1212_fu_1614_p2)
    begin
        if ((exitcond1212_fu_1614_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state76 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state76 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state85_assign_proc : process(exitcond1_fu_1658_p2)
    begin
        if ((exitcond1_fu_1658_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state85 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state85 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state92, icmp_ln158_reg_2390, write_r_BVALID)
    begin
        if ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln158_reg_2390 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_10_phi_fu_763_p4_assign_proc : process(i_10_reg_759, icmp_ln137_1_reg_2228, ap_CS_fsm_pp5_stage0, add_ln137_1_reg_2232, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0))) then 
            ap_phi_mux_i_10_phi_fu_763_p4 <= add_ln137_1_reg_2232;
        else 
            ap_phi_mux_i_10_phi_fu_763_p4 <= i_10_reg_759;
        end if; 
    end process;


    ap_phi_mux_i_8_phi_fu_733_p4_assign_proc : process(i_8_reg_729, icmp_ln137_reg_2071, ap_CS_fsm_pp4_stage0, add_ln137_reg_2075, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_8_phi_fu_733_p4 <= add_ln137_reg_2075;
        else 
            ap_phi_mux_i_8_phi_fu_733_p4 <= i_8_reg_729;
        end if; 
    end process;


    ap_phi_mux_loop_index105_phi_fu_688_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond1479_reg_1875, loop_index105_reg_684, empty_193_reg_1879)
    begin
        if (((exitcond1479_reg_1875 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_loop_index105_phi_fu_688_p4 <= empty_193_reg_1879;
        else 
            ap_phi_mux_loop_index105_phi_fu_688_p4 <= loop_index105_reg_684;
        end if; 
    end process;


    ap_phi_mux_loop_index111_phi_fu_676_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond14810_reg_1838, loop_index111_reg_672, empty_190_reg_1842)
    begin
        if (((exitcond14810_reg_1838 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_loop_index111_phi_fu_676_p4 <= empty_190_reg_1842;
        else 
            ap_phi_mux_loop_index111_phi_fu_676_p4 <= loop_index111_reg_672;
        end if; 
    end process;


    ap_phi_mux_loop_index117_phi_fu_664_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond14911_reg_1808, loop_index117_reg_660, empty_188_reg_1812)
    begin
        if (((exitcond14911_reg_1808 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_loop_index117_phi_fu_664_p4 <= empty_188_reg_1812;
        else 
            ap_phi_mux_loop_index117_phi_fu_664_p4 <= loop_index117_reg_660;
        end if; 
    end process;


    ap_phi_mux_loop_index99_phi_fu_700_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond1468_reg_1928, loop_index99_reg_696, empty_195_reg_1932)
    begin
        if (((exitcond1468_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_loop_index99_phi_fu_700_p4 <= empty_195_reg_1932;
        else 
            ap_phi_mux_loop_index99_phi_fu_700_p4 <= loop_index99_reg_696;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state92, icmp_ln158_reg_2390, write_r_BVALID)
    begin
        if ((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln158_reg_2390 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done <= (grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done or ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_done);
    ap_sync_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready <= (grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready or ap_sync_reg_grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_ready);
    ap_sync_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done <= (grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done or ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_done);
    ap_sync_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready <= (grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready or ap_sync_reg_grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_ready);
    ap_sync_grp_updateParameter_float_8u_s_fu_816_ap_done <= (grp_updateParameter_float_8u_s_fu_816_ap_done or ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_done);
    ap_sync_grp_updateParameter_float_8u_s_fu_816_ap_ready <= (grp_updateParameter_float_8u_s_fu_816_ap_ready or ap_sync_reg_grp_updateParameter_float_8u_s_fu_816_ap_ready);
    bitcast_ln142_fu_1554_p1 <= learningRate;

    bramBiasGradientAvg_address0_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_address0, grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_address0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_address0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBiasGradientAvg_address0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBiasGradientAvg_address0 <= grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramBiasGradientAvg_address0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_address0;
        else 
            bramBiasGradientAvg_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramBiasGradientAvg_address1_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_address1, grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_address1, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_address1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBiasGradientAvg_address1 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBiasGradientAvg_address1 <= grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramBiasGradientAvg_address1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_address1;
        else 
            bramBiasGradientAvg_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    bramBiasGradientAvg_ce0_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_ce0, grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_ce0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_ce0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBiasGradientAvg_ce0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBiasGradientAvg_ce0 <= grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramBiasGradientAvg_ce0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_ce0;
        else 
            bramBiasGradientAvg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramBiasGradientAvg_ce1_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_ce1, grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_ce1, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBiasGradientAvg_ce1 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBiasGradientAvg_ce1 <= grp_updateParameter_float_8u_s_fu_816_bramBiasGradientAvg_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramBiasGradientAvg_ce1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_ce1;
        else 
            bramBiasGradientAvg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramBiasGradientAvg_d0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_d0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_d0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBiasGradientAvg_d0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramBiasGradientAvg_d0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_d0;
        else 
            bramBiasGradientAvg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramBiasGradientAvg_we0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_we0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_we0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramBiasGradientAvg_we0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_biasGradientAvg_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramBiasGradientAvg_we0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_we0;
        else 
            bramBiasGradientAvg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramBias_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state75, ap_block_pp7_stage0, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_enable_reg_pp1_iter2, grp_updateParameter_float_8u_s_fu_816_bramBias_address0, loop_index111_cast_fu_978_p1, loop_index_cast_fu_1669_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then 
            bramBias_address0 <= loop_index_cast_fu_1669_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_address0 <= loop_index111_cast_fu_978_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBias_address0 <= grp_updateParameter_float_8u_s_fu_816_bramBias_address0;
        else 
            bramBias_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bramBias_ce0_assign_proc : process(ap_CS_fsm_state75, ap_block_pp1_stage0_11001, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0, ap_enable_reg_pp1_iter2, grp_updateParameter_float_8u_s_fu_816_bramBias_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1)))) then 
            bramBias_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBias_ce0 <= grp_updateParameter_float_8u_s_fu_816_bramBias_ce0;
        else 
            bramBias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramBias_ce1_assign_proc : process(ap_CS_fsm_state75, grp_updateParameter_float_8u_s_fu_816_bramBias_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBias_ce1 <= grp_updateParameter_float_8u_s_fu_816_bramBias_ce1;
        else 
            bramBias_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramBias_d0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state75, ap_enable_reg_pp1_iter2, grp_updateParameter_float_8u_s_fu_816_bramBias_d0, empty_191_fu_983_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_d0 <= empty_191_fu_983_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBias_d0 <= grp_updateParameter_float_8u_s_fu_816_bramBias_d0;
        else 
            bramBias_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramBias_we0_assign_proc : process(ap_CS_fsm_state75, ap_block_pp1_stage0_11001, exitcond14810_reg_1838_pp1_iter1_reg, ap_enable_reg_pp1_iter2, grp_updateParameter_float_8u_s_fu_816_bramBias_we0)
    begin
        if (((exitcond14810_reg_1838_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bramBias_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBias_we0 <= grp_updateParameter_float_8u_s_fu_816_bramBias_we0;
        else 
            bramBias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramBias_we1_assign_proc : process(ap_CS_fsm_state75, grp_updateParameter_float_8u_s_fu_816_bramBias_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramBias_we1 <= grp_updateParameter_float_8u_s_fu_816_bramBias_we1;
        else 
            bramBias_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bramClasses_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state53, ap_enable_reg_pp2_iter2, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_address0, loop_index105_cast_fu_1028_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bramClasses_address0 <= loop_index105_cast_fu_1028_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramClasses_address0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_address0;
        else 
            bramClasses_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    bramClasses_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state53, ap_enable_reg_pp2_iter2, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bramClasses_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramClasses_ce0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_classes_ce0;
        else 
            bramClasses_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bramClasses_d0 <= read_addr_2_read_reg_1884;

    bramClasses_we0_assign_proc : process(ap_block_pp2_stage0_11001, exitcond1479_reg_1875_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((exitcond1479_reg_1875_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bramClasses_we0 <= ap_const_logic_1;
        else 
            bramClasses_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError0_address0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln143_1_fu_1281_p1, ap_CS_fsm_pp4_stage1, zext_ln143_3_fu_1301_p1, ap_CS_fsm_pp4_stage2, zext_ln143_5_fu_1321_p1, ap_CS_fsm_pp4_stage3, zext_ln143_7_fu_1341_p1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln143_9_fu_1483_p1, ap_CS_fsm_pp5_stage1, zext_ln143_11_fu_1503_p1, ap_CS_fsm_pp5_stage2, zext_ln143_13_fu_1523_p1, ap_CS_fsm_pp5_stage3, zext_ln143_15_fu_1543_p1, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_address0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_address0, ap_CS_fsm_state71, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp4_stage1, ap_block_pp4_stage2, ap_block_pp4_stage3, ap_block_pp5_stage1, ap_block_pp5_stage2, ap_block_pp5_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError0_address0 <= zext_ln143_15_fu_1543_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError0_address0 <= zext_ln143_13_fu_1523_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError0_address0 <= zext_ln143_11_fu_1503_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError0_address0 <= zext_ln143_9_fu_1483_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then 
            bramError0_address0 <= zext_ln143_7_fu_1341_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2))) then 
            bramError0_address0 <= zext_ln143_5_fu_1321_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
            bramError0_address0 <= zext_ln143_3_fu_1301_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            bramError0_address0 <= zext_ln143_1_fu_1281_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramError0_address0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramError0_address0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_address0;
        else 
            bramError0_address0 <= "XXXXXXX";
        end if; 
    end process;


    bramError0_address1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln143_fu_1270_p1, zext_ln143_2_fu_1291_p1, ap_CS_fsm_pp4_stage1, zext_ln143_4_fu_1311_p1, ap_CS_fsm_pp4_stage2, zext_ln143_6_fu_1331_p1, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln143_8_fu_1472_p1, zext_ln143_10_fu_1493_p1, ap_CS_fsm_pp5_stage1, zext_ln143_12_fu_1513_p1, ap_CS_fsm_pp5_stage2, zext_ln143_14_fu_1533_p1, ap_CS_fsm_pp5_stage3, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp4_stage1, ap_block_pp4_stage2, ap_block_pp4_stage3, ap_block_pp5_stage1, ap_block_pp5_stage2, ap_block_pp5_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError0_address1 <= zext_ln143_14_fu_1533_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError0_address1 <= zext_ln143_12_fu_1513_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError0_address1 <= zext_ln143_10_fu_1493_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError0_address1 <= zext_ln143_8_fu_1472_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then 
            bramError0_address1 <= zext_ln143_6_fu_1331_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2))) then 
            bramError0_address1 <= zext_ln143_4_fu_1311_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
            bramError0_address1 <= zext_ln143_2_fu_1291_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            bramError0_address1 <= zext_ln143_fu_1270_p1(7 - 1 downto 0);
        else 
            bramError0_address1 <= "XXXXXXX";
        end if; 
    end process;


    bramError0_ce0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2_11001, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp5_stage1, ap_block_pp5_stage1_11001, ap_CS_fsm_pp5_stage2, ap_block_pp5_stage2_11001, ap_CS_fsm_pp5_stage3, ap_block_pp5_stage3_11001, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_ce0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_ce0, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp5_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then 
            bramError0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramError0_ce0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramError0_ce0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_ce0;
        else 
            bramError0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError0_ce1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2_11001, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp5_stage1, ap_block_pp5_stage1_11001, ap_CS_fsm_pp5_stage2, ap_block_pp5_stage2_11001, ap_CS_fsm_pp5_stage3, ap_block_pp5_stage3_11001)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp5_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then 
            bramError0_ce1 <= ap_const_logic_1;
        else 
            bramError0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramError0_d0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_d0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_d0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramError0_d0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramError0_d0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_d0;
        else 
            bramError0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramError0_we0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_we0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_we0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramError0_we0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_error_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramError0_we0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_error_we0;
        else 
            bramError0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError1_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln143_1_reg_2100, ap_CS_fsm_pp4_stage1, zext_ln143_3_reg_2120, ap_CS_fsm_pp4_stage2, zext_ln143_5_reg_2140, ap_CS_fsm_pp4_stage3, zext_ln143_7_reg_2160, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln143_9_reg_2257, ap_CS_fsm_pp5_stage1, zext_ln143_11_reg_2277, ap_CS_fsm_pp5_stage2, zext_ln143_13_reg_2297, ap_CS_fsm_pp5_stage3, zext_ln143_15_reg_2317, ap_enable_reg_pp4_iter1, ap_CS_fsm_state64, ap_enable_reg_pp5_iter1, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_address0, ap_CS_fsm_state71, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp4_stage1, ap_block_pp4_stage2, ap_block_pp4_stage3, ap_block_pp5_stage1, ap_block_pp5_stage2, ap_block_pp5_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            bramError1_address0 <= zext_ln143_15_reg_2317(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError1_address0 <= zext_ln143_13_reg_2297(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError1_address0 <= zext_ln143_11_reg_2277(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError1_address0 <= zext_ln143_9_reg_2257(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            bramError1_address0 <= zext_ln143_7_reg_2160(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then 
            bramError1_address0 <= zext_ln143_5_reg_2140(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2))) then 
            bramError1_address0 <= zext_ln143_3_reg_2120(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
            bramError1_address0 <= zext_ln143_1_reg_2100(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramError1_address0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_address0;
        else 
            bramError1_address0 <= "XXXXXXX";
        end if; 
    end process;


    bramError1_address1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln143_reg_2090, zext_ln143_2_reg_2110, ap_CS_fsm_pp4_stage1, zext_ln143_4_reg_2130, ap_CS_fsm_pp4_stage2, zext_ln143_6_reg_2150, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln143_8_reg_2247, zext_ln143_10_reg_2267, ap_CS_fsm_pp5_stage1, zext_ln143_12_reg_2287, ap_CS_fsm_pp5_stage2, zext_ln143_14_reg_2307, ap_CS_fsm_pp5_stage3, ap_enable_reg_pp4_iter1, ap_CS_fsm_state64, ap_enable_reg_pp5_iter1, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_address1, ap_CS_fsm_state71, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp4_stage1, ap_block_pp4_stage2, ap_block_pp4_stage3, ap_block_pp5_stage1, ap_block_pp5_stage2, ap_block_pp5_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            bramError1_address1 <= zext_ln143_14_reg_2307(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError1_address1 <= zext_ln143_12_reg_2287(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError1_address1 <= zext_ln143_10_reg_2267(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            bramError1_address1 <= zext_ln143_8_reg_2247(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            bramError1_address1 <= zext_ln143_6_reg_2150(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then 
            bramError1_address1 <= zext_ln143_4_reg_2130(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2))) then 
            bramError1_address1 <= zext_ln143_2_reg_2110(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
            bramError1_address1 <= zext_ln143_reg_2090(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramError1_address1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_address1;
        else 
            bramError1_address1 <= "XXXXXXX";
        end if; 
    end process;


    bramError1_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2_11001, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp5_stage1, ap_block_pp5_stage1_11001, ap_CS_fsm_pp5_stage2, ap_block_pp5_stage2_11001, ap_CS_fsm_pp5_stage3, ap_block_pp5_stage3_11001, ap_enable_reg_pp4_iter1, ap_CS_fsm_state64, ap_enable_reg_pp5_iter1, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_ce0, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)))) then 
            bramError1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramError1_ce0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_ce0;
        else 
            bramError1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError1_ce1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2_11001, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp5_stage1, ap_block_pp5_stage1_11001, ap_CS_fsm_pp5_stage2, ap_block_pp5_stage2_11001, ap_CS_fsm_pp5_stage3, ap_block_pp5_stage3_11001, ap_enable_reg_pp4_iter1, ap_CS_fsm_state64, ap_enable_reg_pp5_iter1, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_ce1, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)))) then 
            bramError1_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramError1_ce1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_latterError_ce1;
        else 
            bramError1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramError1_we0_assign_proc : process(icmp_ln137_reg_2071, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2_11001, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3_11001, icmp_ln137_1_reg_2228, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp5_stage1, ap_block_pp5_stage1_11001, ap_CS_fsm_pp5_stage2, ap_block_pp5_stage2_11001, ap_CS_fsm_pp5_stage3, ap_block_pp5_stage3_11001, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1)
    begin
        if ((((icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp5_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0)))) then 
            bramError1_we0 <= ap_const_logic_1;
        else 
            bramError1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramError1_we1_assign_proc : process(icmp_ln137_reg_2071, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2_11001, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3_11001, icmp_ln137_1_reg_2228, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp5_stage1, ap_block_pp5_stage1_11001, ap_CS_fsm_pp5_stage2, ap_block_pp5_stage2_11001, ap_CS_fsm_pp5_stage3, ap_block_pp5_stage3_11001, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1)
    begin
        if ((((icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln137_reg_2071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp5_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln137_1_reg_2228 = ap_const_lv1_0)))) then 
            bramError1_we1 <= ap_const_logic_1;
        else 
            bramError1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bramMlpResults_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_state53, ap_enable_reg_pp3_iter2, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_address0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_address0, ap_CS_fsm_state71, loop_index99_cast_fu_1098_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bramMlpResults_address0 <= loop_index99_cast_fu_1098_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramMlpResults_address0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramMlpResults_address0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_address0;
        else 
            bramMlpResults_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    bramMlpResults_address1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_address1, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_address1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramMlpResults_address1 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramMlpResults_address1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_address1;
        else 
            bramMlpResults_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    bramMlpResults_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state53, ap_enable_reg_pp3_iter2, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_ce0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_ce0, ap_CS_fsm_state71)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bramMlpResults_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramMlpResults_ce0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramMlpResults_ce0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_ce0;
        else 
            bramMlpResults_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramMlpResults_ce1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_ce1, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramMlpResults_ce1 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_results_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramMlpResults_ce1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_ce1;
        else 
            bramMlpResults_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bramMlpResults_d0 <= read_addr_3_read_reg_1937;

    bramMlpResults_we0_assign_proc : process(ap_block_pp3_stage0_11001, exitcond1468_reg_1928_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((exitcond1468_reg_1928_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bramMlpResults_we0 <= ap_const_logic_1;
        else 
            bramMlpResults_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeightGradientAvg_address0_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_address0, grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_address0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_address0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeightGradientAvg_address0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeightGradientAvg_address0 <= grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeightGradientAvg_address0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_address0;
        else 
            bramWeightGradientAvg_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeightGradientAvg_address1_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_address1, grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_address1, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_address1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeightGradientAvg_address1 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeightGradientAvg_address1 <= grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeightGradientAvg_address1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_address1;
        else 
            bramWeightGradientAvg_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeightGradientAvg_ce0_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_ce0, grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_ce0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_ce0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeightGradientAvg_ce0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeightGradientAvg_ce0 <= grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeightGradientAvg_ce0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_ce0;
        else 
            bramWeightGradientAvg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeightGradientAvg_ce1_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_ce1, grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_ce1, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeightGradientAvg_ce1 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeightGradientAvg_ce1 <= grp_updateParameter_float_8u_s_fu_816_bramWeightGradientAvg_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeightGradientAvg_ce1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_ce1;
        else 
            bramWeightGradientAvg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeightGradientAvg_d0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_d0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_d0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeightGradientAvg_d0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeightGradientAvg_d0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_d0;
        else 
            bramWeightGradientAvg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeightGradientAvg_d1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_d1, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_d1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeightGradientAvg_d1 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeightGradientAvg_d1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_d1;
        else 
            bramWeightGradientAvg_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeightGradientAvg_we0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_we0, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_we0, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeightGradientAvg_we0 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeightGradientAvg_we0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_we0;
        else 
            bramWeightGradientAvg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeightGradientAvg_we1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_we1, grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_we1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bramWeightGradientAvg_we1 <= grp_computeOutputGradient_float_8u_2u_s_fu_832_p_weightGradientAvg_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeightGradientAvg_we1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_we1;
        else 
            bramWeightGradientAvg_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state75, ap_block_pp6_stage0, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_address0, grp_updateParameter_float_8u_s_fu_816_bramWeight_address0, ap_CS_fsm_state71, loop_index117_cast_fu_924_p1, loop_index93_cast_fu_1625_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then 
            bramWeight_address0 <= loop_index93_cast_fu_1625_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_address0 <= loop_index117_cast_fu_924_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeight_address0 <= grp_updateParameter_float_8u_s_fu_816_bramWeight_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeight_address0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_address0;
        else 
            bramWeight_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeight_address1_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_address1, grp_updateParameter_float_8u_s_fu_816_bramWeight_address1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeight_address1 <= grp_updateParameter_float_8u_s_fu_816_bramWeight_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeight_address1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_address1;
        else 
            bramWeight_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeight_ce0_assign_proc : process(ap_CS_fsm_state75, ap_block_pp0_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_ce0, grp_updateParameter_float_8u_s_fu_816_bramWeight_ce0, ap_CS_fsm_state71)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1)))) then 
            bramWeight_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeight_ce0 <= grp_updateParameter_float_8u_s_fu_816_bramWeight_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeight_ce0 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_ce0;
        else 
            bramWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_ce1_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state64, grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_ce1, grp_updateParameter_float_8u_s_fu_816_bramWeight_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeight_ce1 <= grp_updateParameter_float_8u_s_fu_816_bramWeight_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            bramWeight_ce1 <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_ce1;
        else 
            bramWeight_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_d0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state75, ap_enable_reg_pp0_iter2, grp_updateParameter_float_8u_s_fu_816_bramWeight_d0, empty_189_fu_929_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_d0 <= empty_189_fu_929_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeight_d0 <= grp_updateParameter_float_8u_s_fu_816_bramWeight_d0;
        else 
            bramWeight_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bramWeight_we0_assign_proc : process(ap_CS_fsm_state75, ap_block_pp0_stage0_11001, exitcond14911_reg_1808_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_updateParameter_float_8u_s_fu_816_bramWeight_we0)
    begin
        if (((exitcond14911_reg_1808_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bramWeight_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeight_we0 <= grp_updateParameter_float_8u_s_fu_816_bramWeight_we0;
        else 
            bramWeight_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bramWeight_we1_assign_proc : process(ap_CS_fsm_state75, grp_updateParameter_float_8u_s_fu_816_bramWeight_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            bramWeight_we1 <= grp_updateParameter_float_8u_s_fu_816_bramWeight_we1;
        else 
            bramWeight_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_188_fu_918_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index117_phi_fu_664_p4) + unsigned(ap_const_lv32_1));
    empty_189_fu_929_p1 <= read_addr_read_reg_1817;
    empty_190_fu_972_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index111_phi_fu_676_p4) + unsigned(ap_const_lv32_1));
    empty_191_fu_983_p1 <= read_addr_1_read_reg_1847;
    empty_193_fu_1022_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index105_phi_fu_688_p4) + unsigned(ap_const_lv32_1));
    empty_195_fu_1092_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index99_phi_fu_700_p4) + unsigned(ap_const_lv32_1));
    empty_197_fu_1258_p1 <= ap_phi_mux_i_8_phi_fu_733_p4(4 - 1 downto 0);
    empty_198_fu_1460_p1 <= ap_phi_mux_i_10_phi_fu_763_p4(4 - 1 downto 0);
    empty_200_fu_1619_p2 <= std_logic_vector(unsigned(loop_index93_reg_770) + unsigned(ap_const_lv32_1));
    empty_201_fu_1630_p1 <= bramWeight_load_reg_2385;
    empty_202_fu_1663_p2 <= std_logic_vector(unsigned(loop_index_reg_781) + unsigned(ap_const_lv32_1));
    empty_203_fu_1674_p1 <= bramBias_load_reg_2414;
    empty_207_fu_1136_p1 <= add35_fu_1132_p2(14 - 1 downto 0);
    empty_208_fu_1145_p1 <= mul41_fu_1140_p2(16 - 1 downto 0);
    empty_209_fu_1149_p1 <= valuesToStore_2_reg_1889(9 - 1 downto 0);
    empty_210_fu_1161_p1 <= valuesToStore_fu_1157_p2(16 - 1 downto 0);
    exitcond1212_fu_1614_p2 <= "1" when (loop_index93_reg_770 = valuesToStore_1_reg_2355) else "0";
    exitcond1468_fu_1087_p2 <= "1" when (ap_phi_mux_loop_index99_phi_fu_700_p4 = mul_ln72_1_reg_1912) else "0";
    exitcond1479_fu_1017_p2 <= "1" when (ap_phi_mux_loop_index105_phi_fu_688_p4 = mul_ln68_reg_1859) else "0";
    exitcond14810_fu_967_p2 <= "1" when (ap_phi_mux_loop_index111_phi_fu_676_p4 = valuesToLoad_2_reg_1822) else "0";
    exitcond14911_fu_913_p2 <= "1" when (ap_phi_mux_loop_index117_phi_fu_664_p4 = valuesToLoad_reg_1792) else "0";
    exitcond1_fu_1658_p2 <= "1" when (loop_index_reg_781 = valuesToStore_3_reg_2347) else "0";

    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_continue_assign_proc : process(ap_CS_fsm_state64, ap_block_state64_on_subcall_done, ap_CS_fsm_state71, ap_block_state71_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state71_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((ap_const_boolean_0 = ap_block_state64_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state64)))) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_continue <= ap_const_logic_1;
        else 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_start <= grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_ap_start_reg;

    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_offset_assign_proc : process(trunc_ln103_reg_2203, ap_CS_fsm_state64, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_offset <= trunc_ln103_reg_2203;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_offset <= ap_const_lv9_0;
        else 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_biasGradientAvg_offset <= "XXXXXXXXX";
        end if; 
    end process;

    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_initZero <= initZero_reg_2037(0);

    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_n_assign_proc : process(l_n_reg_1980, p_n_reg_2173, ap_CS_fsm_state64, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_n <= p_n_reg_2173;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_n <= l_n_reg_1980;
        else 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_n <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_numberOutputsPrev_assign_proc : process(numberInputs_read_reg_1746, numberNeurons_read_reg_1758, ap_CS_fsm_state64, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_numberOutputsPrev <= numberNeurons_read_reg_1758;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_numberOutputsPrev <= numberInputs_read_reg_1746;
        else 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_numberOutputsPrev <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_offset_assign_proc : process(add_ln109_reg_2183, add_ln129_reg_2213, ap_CS_fsm_state64, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_offset <= add_ln109_reg_2183;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_offset <= add_ln129_reg_2213;
        else 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputCurrentLayer_offset <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputPrevLayer_offset_assign_proc : process(mul_ln79_reg_2043, add_ln110_2_reg_2198, ap_CS_fsm_state64, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputPrevLayer_offset <= add_ln110_2_reg_2198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputPrevLayer_offset <= mul_ln79_reg_2043;
        else 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_outputPrevLayer_offset <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_offset_assign_proc : process(mul_ln112_reg_2223, ap_CS_fsm_state64, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_offset <= mul_ln112_reg_2223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_offset <= ap_const_lv16_0;
        else 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weightGradientAvg_offset <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_offset_assign_proc : process(empty_210_reg_1985, mul_ln109_reg_2218, ap_CS_fsm_state64, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_offset <= mul_ln109_reg_2218;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_offset <= empty_210_reg_1985;
        else 
            grp_computeHiddenGradient_float_8u_3u_2u_s_fu_792_p_weights_offset <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_continue_assign_proc : process(ap_CS_fsm_state53, ap_block_state53_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_continue <= ap_const_logic_1;
        else 
            grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_start <= grp_computeOutputGradient_float_8u_2u_s_fu_832_ap_start_reg;
    grp_computeOutputGradient_float_8u_2u_s_fu_832_p_initZero <= initZero_reg_2037(0);
    grp_fu_1678_p0 <= std_logic_vector(unsigned(trunc_ln72_1_reg_1900) + unsigned(trunc_ln76_5_fu_1202_p1));
    grp_fu_1678_p1 <= i_reg_718(14 - 1 downto 0);
    grp_fu_1686_p0 <= std_logic_vector(unsigned(trunc_ln107_2_fu_1377_p1) + unsigned(trunc_ln72_reg_1906));
    grp_fu_1692_p0 <= std_logic_vector(unsigned(trunc_ln110_fu_1411_p1) + unsigned(trunc_ln72_reg_1906));

    grp_updateParameter_float_8u_s_fu_816_ap_continue_assign_proc : process(ap_CS_fsm_state75, ap_block_state75_io, ap_block_state75_on_subcall_done)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            grp_updateParameter_float_8u_s_fu_816_ap_continue <= ap_const_logic_1;
        else 
            grp_updateParameter_float_8u_s_fu_816_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_updateParameter_float_8u_s_fu_816_ap_start <= grp_updateParameter_float_8u_s_fu_816_ap_start_reg;
    i_9_fu_1188_p2 <= std_logic_vector(unsigned(i_reg_718) + unsigned(ap_const_lv32_1));
    icmp_fu_1126_p2 <= "0" when (tmp_fu_1117_p4 = ap_const_lv31_0) else "1";
    icmp_ln101_fu_1352_p2 <= "1" when (unsigned(layer_1_reg_740) < unsigned(zext_ln76_reg_1997)) else "0";
    icmp_ln137_1_fu_1449_p2 <= "1" when (ap_phi_mux_i_10_phi_fu_763_p4 = trunc_ln76_1_reg_2003) else "0";
    icmp_ln137_fu_1247_p2 <= "1" when (ap_phi_mux_i_8_phi_fu_733_p4 = trunc_ln3_reg_2066) else "0";
    icmp_ln153_fu_1588_p2 <= "1" when (valuesToStore_1_fu_1583_p2 = ap_const_lv32_0) else "0";
    icmp_ln158_fu_1634_p2 <= "1" when (valuesToStore_3_reg_2347 = ap_const_lv32_0) else "0";
    icmp_ln51_fu_856_p2 <= "1" when (loadParameters = ap_const_lv32_0) else "0";
    icmp_ln59_fu_888_p2 <= "1" when (valuesToLoad_fu_883_p2 = ap_const_lv32_0) else "0";
    icmp_ln64_fu_942_p2 <= "1" when (valuesToLoad_2_fu_937_p2 = ap_const_lv32_0) else "0";
    icmp_ln68_fu_992_p2 <= "1" when (mul_ln68_fu_987_p2 = ap_const_lv32_0) else "0";
    icmp_ln69_fu_1062_p2 <= "1" when (mul_ln72_1_fu_1057_p2 = ap_const_lv32_0) else "0";
    icmp_ln76_fu_1183_p2 <= "1" when (i_reg_718 = batchSize_read_reg_1852) else "0";
    icmp_ln99_fu_1346_p2 <= "1" when (signed(layer_011_reg_750) > signed(ap_const_lv32_0)) else "0";
    initZero_fu_1211_p2 <= "1" when (i_reg_718 = ap_const_lv32_0) else "0";
    l_n_fu_1152_p3 <= 
        numberNeurons_read_reg_1758 when (icmp_reg_1954(0) = '1') else 
        numberOutputs_read_reg_1732;
    layer_2_fu_1400_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(layer_011_reg_750));
    layer_fu_1107_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(numberLayers_read_reg_1779));
    loop_index105_cast_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index105_reg_684_pp2_iter1_reg),64));
    loop_index111_cast_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index111_reg_672_pp1_iter1_reg),64));
    loop_index117_cast_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index117_reg_660_pp0_iter1_reg),64));
    loop_index93_cast_fu_1625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index93_reg_770),64));
    loop_index99_cast_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index99_reg_696_pp3_iter1_reg),64));
    loop_index_cast_fu_1669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_781),64));
    mul34_fu_1112_p0 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(numberLayers_read_reg_1779));
    mul_ln107_fu_1372_p1 <= mul_ln107_fu_1372_p10(16 - 1 downto 0);
    mul_ln107_fu_1372_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln107_1_fu_1364_p1),32));
    mul_ln110_fu_1406_p1 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(layer_011_reg_750));
    mul_ln144_fu_1563_p1 <= std_logic_vector(signed(numberOutputs_read_reg_1732) + signed(add35_reg_1960));
    mul_ln56_fu_868_p1 <= std_logic_vector(signed(add_ln56_fu_862_p0) + signed(ap_const_lv32_FFFFFFFF));
    mul_ln72_1_fu_1057_p1 <= std_logic_vector(signed(numberOutputs_read_reg_1732) + signed(add_ln72_reg_1895));
    mul_ln80_fu_1221_p0 <= size_assign_reg_708(10 - 1 downto 0);
    or_ln143_10_fu_1508_p2 <= (tmp_1_reg_2237 or ap_const_lv7_4);
    or_ln143_11_fu_1518_p2 <= (tmp_1_reg_2237 or ap_const_lv7_5);
    or_ln143_12_fu_1528_p2 <= (tmp_1_reg_2237 or ap_const_lv7_6);
    or_ln143_13_fu_1538_p2 <= (tmp_1_reg_2237 or ap_const_lv7_7);
    or_ln143_1_fu_1286_p2 <= (tmp_s_reg_2080 or ap_const_lv7_2);
    or_ln143_2_fu_1296_p2 <= (tmp_s_reg_2080 or ap_const_lv7_3);
    or_ln143_3_fu_1306_p2 <= (tmp_s_reg_2080 or ap_const_lv7_4);
    or_ln143_4_fu_1316_p2 <= (tmp_s_reg_2080 or ap_const_lv7_5);
    or_ln143_5_fu_1326_p2 <= (tmp_s_reg_2080 or ap_const_lv7_6);
    or_ln143_6_fu_1336_p2 <= (tmp_s_reg_2080 or ap_const_lv7_7);
    or_ln143_7_fu_1477_p2 <= (tmp_1_fu_1464_p3 or ap_const_lv7_1);
    or_ln143_8_fu_1488_p2 <= (tmp_1_reg_2237 or ap_const_lv7_2);
    or_ln143_9_fu_1498_p2 <= (tmp_1_reg_2237 or ap_const_lv7_3);
    or_ln143_fu_1275_p2 <= (tmp_s_fu_1262_p3 or ap_const_lv7_1);
        p_cast1_cast_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast1_fu_894_p4),64));

    p_cast1_fu_894_p4 <= axiWeightInput_read_reg_1713(63 downto 2);
        p_cast2_cast_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_fu_1068_p4),64));

    p_cast2_fu_1068_p4 <= axiMlpResultsInput_read_reg_1723(63 downto 2);
        p_cast3_cast_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast3_fu_948_p4),64));

    p_cast3_fu_948_p4 <= axiBiasInput_read_reg_1708(63 downto 2);
        p_cast7_cast_fu_1603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast7_fu_1594_p4),64));

    p_cast7_fu_1594_p4 <= axiWeightOutput_read_reg_1703(63 downto 2);
        p_cast8_cast_fu_1648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast8_fu_1639_p4),64));

    p_cast8_fu_1639_p4 <= axiBiasOutput_read_reg_1698(63 downto 2);
        p_cast_cast_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_998_p4),64));

    p_cast_fu_998_p4 <= axiClassesInput_read_reg_1718(63 downto 2);
    p_n_fu_1357_p3 <= 
        numberNeurons_read_reg_1758 when (icmp_ln101_fu_1352_p2(0) = '1') else 
        size_assign_reg_708;

    read_r_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state37, ap_CS_fsm_state14, read_r_ARREADY, read_addr_reg_1802, read_addr_1_reg_1832, read_addr_2_reg_1869, read_addr_3_reg_1922)
    begin
        if ((read_r_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                read_r_ARADDR <= read_addr_3_reg_1922;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                read_r_ARADDR <= read_addr_2_reg_1869;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                read_r_ARADDR <= read_addr_1_reg_1832;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                read_r_ARADDR <= read_addr_reg_1802;
            else 
                read_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            read_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    read_r_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state37, ap_CS_fsm_state14, read_r_ARREADY, valuesToLoad_reg_1792, valuesToLoad_2_reg_1822, mul_ln68_reg_1859, mul_ln72_1_reg_1912)
    begin
        if ((read_r_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                read_r_ARLEN <= mul_ln72_1_reg_1912;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                read_r_ARLEN <= mul_ln68_reg_1859;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                read_r_ARLEN <= valuesToLoad_2_reg_1822;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                read_r_ARLEN <= valuesToLoad_reg_1792;
            else 
                read_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            read_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    read_r_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state37, ap_CS_fsm_state14, read_r_ARREADY)
    begin
        if ((((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((read_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            read_r_ARVALID <= ap_const_logic_1;
        else 
            read_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    read_r_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond14911_reg_1808, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond1479_reg_1875, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond1468_reg_1928, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond14810_reg_1838, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((exitcond14810_reg_1838 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond1468_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((exitcond1479_reg_1875 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond14911_reg_1808 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            read_r_RREADY <= ap_const_logic_1;
        else 
            read_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    read_r_blk_n_AR_assign_proc : process(m_axi_read_r_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state37, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            read_r_blk_n_AR <= m_axi_read_r_ARREADY;
        else 
            read_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    read_r_blk_n_R_assign_proc : process(m_axi_read_r_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond14911_reg_1808, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond1479_reg_1875, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond1468_reg_1928, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond14810_reg_1838)
    begin
        if ((((exitcond14810_reg_1838 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond1468_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((exitcond1479_reg_1875 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond14911_reg_1808 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            read_r_blk_n_R <= m_axi_read_r_RVALID;
        else 
            read_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    select_ln122_fu_1438_p3 <= 
        size_assign_reg_708 when (icmp_reg_1954(0) = '1') else 
        numberOutputs_read_reg_1732;
    tmp_1_fu_1464_p3 <= (empty_198_fu_1460_p1 & ap_const_lv3_0);
    tmp_fu_1117_p4 <= numberLayers_read_reg_1779(31 downto 1);
    tmp_s_fu_1262_p3 <= (empty_197_fu_1258_p1 & ap_const_lv3_0);
    trunc_ln103_fu_1434_p1 <= mul_ln107_fu_1372_p2(9 - 1 downto 0);
    trunc_ln107_1_fu_1364_p1 <= layer_1_reg_740(16 - 1 downto 0);
    trunc_ln107_2_fu_1377_p1 <= mul_ln107_fu_1372_p2(16 - 1 downto 0);
    trunc_ln107_3_fu_1381_p1 <= mul_ln107_fu_1372_p2(14 - 1 downto 0);
    trunc_ln107_fu_1180_p1 <= numberNeurons_read_reg_1758(16 - 1 downto 0);
    trunc_ln110_1_fu_1415_p1 <= mul_ln110_fu_1406_p2(14 - 1 downto 0);
    trunc_ln110_fu_1411_p1 <= mul_ln110_fu_1406_p2(16 - 1 downto 0);
    trunc_ln72_1_fu_1046_p1 <= add_ln72_fu_1041_p2(14 - 1 downto 0);
    trunc_ln72_fu_1050_p1 <= numberInputs_read_reg_1746(16 - 1 downto 0);
    trunc_ln76_2_fu_1194_p1 <= i_reg_718(10 - 1 downto 0);
    trunc_ln76_5_fu_1202_p1 <= size_assign_reg_708(14 - 1 downto 0);
    trunc_ln76_fu_1165_p1 <= numberInputs_read_reg_1746(14 - 1 downto 0);
    valuesToLoad_2_fu_937_p2 <= std_logic_vector(signed(numberOutputs_read_reg_1732) + signed(valuesToLoad_1_fu_933_p2));
    valuesToLoad_fu_883_p1 <= std_logic_vector(unsigned(add_ln57_1_fu_874_p2) + unsigned(numberInputs_read_reg_1746));
    valuesToStore_1_fu_1583_p1 <= std_logic_vector(unsigned(add_ln151_1_fu_1574_p2) + unsigned(numberInputs_read_reg_1746));
    valuesToStore_3_fu_1569_p2 <= std_logic_vector(signed(numberOutputs_read_reg_1732) + signed(valuesToStore_2_reg_1889));

    write_r_AWADDR_assign_proc : process(ap_CS_fsm_state75, icmp_ln153_reg_2361, ap_CS_fsm_state84, write_r_AWREADY, ap_block_state75_io, ap_block_state75_on_subcall_done, write_addr_1_reg_2394, p_cast7_cast_fu_1603_p1)
    begin
        if (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            write_r_AWADDR <= write_addr_1_reg_2394;
        elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            write_r_AWADDR <= p_cast7_cast_fu_1603_p1(32 - 1 downto 0);
        else 
            write_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    write_r_AWLEN_assign_proc : process(ap_CS_fsm_state75, icmp_ln153_reg_2361, ap_CS_fsm_state84, write_r_AWREADY, valuesToStore_3_reg_2347, valuesToStore_1_reg_2355, ap_block_state75_io, ap_block_state75_on_subcall_done)
    begin
        if (((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            write_r_AWLEN <= valuesToStore_3_reg_2347;
        elsif ((not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            write_r_AWLEN <= valuesToStore_1_reg_2355;
        else 
            write_r_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    write_r_AWVALID_assign_proc : process(ap_CS_fsm_state75, icmp_ln153_reg_2361, ap_CS_fsm_state84, write_r_AWREADY, ap_block_state75_io, ap_block_state75_on_subcall_done)
    begin
        if ((((write_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84)) or (not(((ap_const_boolean_1 = ap_block_state75_on_subcall_done) or (ap_const_boolean_1 = ap_block_state75_io))) and (icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            write_r_AWVALID <= ap_const_logic_1;
        else 
            write_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    write_r_BREADY_assign_proc : process(icmp_ln153_reg_2361, ap_CS_fsm_state83, ap_CS_fsm_state92, icmp_ln158_reg_2390, write_r_BVALID)
    begin
        if (((not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln158_reg_2390 = ap_const_lv1_0))) and (icmp_ln158_reg_2390 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92)) or (not(((write_r_BVALID = ap_const_logic_0) and (icmp_ln153_reg_2361 = ap_const_lv1_0))) and (icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83)))) then 
            write_r_BREADY <= ap_const_logic_1;
        else 
            write_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    write_r_WDATA_assign_proc : process(ap_enable_reg_pp6_iter2, exitcond1212_reg_2371_pp6_iter1_reg, ap_enable_reg_pp7_iter2, exitcond1_reg_2400_pp7_iter1_reg, empty_201_fu_1630_p1, ap_block_pp6_stage0_01001, empty_203_fu_1674_p1, ap_block_pp7_stage0_01001)
    begin
        if (((exitcond1_reg_2400_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_01001))) then 
            write_r_WDATA <= empty_203_fu_1674_p1;
        elsif (((exitcond1212_reg_2371_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_01001))) then 
            write_r_WDATA <= empty_201_fu_1630_p1;
        else 
            write_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    write_r_WVALID_assign_proc : process(ap_enable_reg_pp6_iter2, exitcond1212_reg_2371_pp6_iter1_reg, ap_enable_reg_pp7_iter2, exitcond1_reg_2400_pp7_iter1_reg, ap_block_pp6_stage0_11001, ap_block_pp7_stage0_11001)
    begin
        if ((((exitcond1_reg_2400_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)) or ((exitcond1212_reg_2371_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)))) then 
            write_r_WVALID <= ap_const_logic_1;
        else 
            write_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    write_r_blk_n_AW_assign_proc : process(m_axi_write_r_AWREADY, ap_CS_fsm_state75, icmp_ln153_reg_2361, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or ((icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            write_r_blk_n_AW <= m_axi_write_r_AWREADY;
        else 
            write_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    write_r_blk_n_B_assign_proc : process(m_axi_write_r_BVALID, icmp_ln153_reg_2361, ap_CS_fsm_state83, ap_CS_fsm_state92, icmp_ln158_reg_2390)
    begin
        if ((((icmp_ln158_reg_2390 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92)) or ((icmp_ln153_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83)))) then 
            write_r_blk_n_B <= m_axi_write_r_BVALID;
        else 
            write_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    write_r_blk_n_W_assign_proc : process(m_axi_write_r_WREADY, ap_enable_reg_pp6_iter2, ap_block_pp6_stage0, exitcond1212_reg_2371_pp6_iter1_reg, ap_enable_reg_pp7_iter2, ap_block_pp7_stage0, exitcond1_reg_2400_pp7_iter1_reg)
    begin
        if ((((exitcond1_reg_2400_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0)) or ((exitcond1212_reg_2371_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0)))) then 
            write_r_blk_n_W <= m_axi_write_r_WREADY;
        else 
            write_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln143_10_fu_1493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_8_fu_1488_p2),64));
    zext_ln143_11_fu_1503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_9_fu_1498_p2),64));
    zext_ln143_12_fu_1513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_10_fu_1508_p2),64));
    zext_ln143_13_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_11_fu_1518_p2),64));
    zext_ln143_14_fu_1533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_12_fu_1528_p2),64));
    zext_ln143_15_fu_1543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_13_fu_1538_p2),64));
    zext_ln143_1_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_fu_1275_p2),64));
    zext_ln143_2_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_1_fu_1286_p2),64));
    zext_ln143_3_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_2_fu_1296_p2),64));
    zext_ln143_4_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_3_fu_1306_p2),64));
    zext_ln143_5_fu_1321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_4_fu_1316_p2),64));
    zext_ln143_6_fu_1331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_5_fu_1326_p2),64));
    zext_ln143_7_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_6_fu_1336_p2),64));
    zext_ln143_8_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1464_p3),64));
    zext_ln143_9_fu_1483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln143_7_fu_1477_p2),64));
    zext_ln143_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1262_p3),64));
    zext_ln76_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_reg_1942),64));
end behav;
