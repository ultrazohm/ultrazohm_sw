-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_PI_controller is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    actualValue : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of uz_PI_controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_PI_controller_uz_PI_controller,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1297,HLS_SYN_LUT=1455,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal referenceValue : STD_LOGIC_VECTOR (31 downto 0);
    signal sampletime : STD_LOGIC_VECTOR (31 downto 0);
    signal KI : STD_LOGIC_VECTOR (31 downto 0);
    signal KP : STD_LOGIC_VECTOR (31 downto 0);
    signal limit : STD_LOGIC_VECTOR (31 downto 0);
    signal reset : STD_LOGIC;
    signal axi_referenceValue : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_referenceValue_ap_vld : STD_LOGIC;
    signal axi_actualValue : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_actualValue_ap_vld : STD_LOGIC;
    signal error : STD_LOGIC_VECTOR (31 downto 0);
    signal error_ap_vld : STD_LOGIC;
    signal P_sum : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sum_ap_vld : STD_LOGIC;
    signal I_sum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reset_read_reg_377 : STD_LOGIC_VECTOR (0 downto 0);
    signal limit_read_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal KP_read_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal KI_read_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal sampletime_read_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal referenceValue_read_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal preIntegrator_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln34_2_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_2_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln34_3_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_3_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln36_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln36_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_162_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal out_fu_355_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_out_1_phi_fu_173_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_1_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln34_1_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_227_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_1_fu_237_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln36_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln34_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_284_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_294_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_1_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_1_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_1_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_348_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component uz_PI_controller_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_PI_controller_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_PI_controller_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_PI_controller_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        referenceValue : OUT STD_LOGIC_VECTOR (31 downto 0);
        sampletime : OUT STD_LOGIC_VECTOR (31 downto 0);
        KI : OUT STD_LOGIC_VECTOR (31 downto 0);
        KP : OUT STD_LOGIC_VECTOR (31 downto 0);
        limit : OUT STD_LOGIC_VECTOR (31 downto 0);
        reset : OUT STD_LOGIC;
        axi_referenceValue : IN STD_LOGIC_VECTOR (31 downto 0);
        axi_referenceValue_ap_vld : IN STD_LOGIC;
        axi_actualValue : IN STD_LOGIC_VECTOR (31 downto 0);
        axi_actualValue_ap_vld : IN STD_LOGIC;
        error : IN STD_LOGIC_VECTOR (31 downto 0);
        error_ap_vld : IN STD_LOGIC;
        P_sum : IN STD_LOGIC_VECTOR (31 downto 0);
        P_sum_ap_vld : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component uz_PI_controller_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        referenceValue => referenceValue,
        sampletime => sampletime,
        KI => KI,
        KP => KP,
        limit => limit,
        reset => reset,
        axi_referenceValue => axi_referenceValue,
        axi_referenceValue_ap_vld => axi_referenceValue_ap_vld,
        axi_actualValue => axi_actualValue,
        axi_actualValue_ap_vld => axi_actualValue_ap_vld,
        error => error,
        error_ap_vld => error_ap_vld,
        P_sum => P_sum,
        P_sum_ap_vld => P_sum_ap_vld);

    faddfsub_32ns_32ns_32_4_full_dsp_1_U1 : component uz_PI_controller_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        opcode => grp_fu_180_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U2 : component uz_PI_controller_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U3 : component uz_PI_controller_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_202,
        din1 => KI_read_reg_393,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U4 : component uz_PI_controller_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_202,
        din1 => limit_read_reg_381,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_194_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U5 : component uz_PI_controller_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_202,
        din1 => grp_fu_198_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_198_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_1_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((reset_read_reg_377 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_1_reg_169 <= ap_const_lv32_0;
            elsif (((reset_read_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                out_1_reg_169 <= out_fu_355_p3;
            end if; 
        end if;
    end process;

    storemerge_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((reset_read_reg_377 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                storemerge_reg_158 <= ap_const_lv32_0;
            elsif (((reset_read_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                storemerge_reg_158 <= grp_fu_180_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                I_sum <= ap_phi_mux_storemerge_phi_fu_162_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                KI_read_reg_393 <= KI;
                KP_read_reg_388 <= KP;
                limit_read_reg_381 <= limit;
                referenceValue_read_reg_403 <= referenceValue;
                reset_read_reg_377 <= (0=>reset, others=>'-');
                sampletime_read_reg_398 <= sampletime;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                bitcast_ln36_reg_445 <= bitcast_ln36_fu_259_p1;
                icmp_ln34_2_reg_434 <= icmp_ln34_2_fu_241_p2;
                icmp_ln34_3_reg_439 <= icmp_ln34_3_fu_247_p2;
                icmp_ln36_reg_451 <= icmp_ln36_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul2_reg_429 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_reg_415 <= grp_fu_186_p2;
                preIntegrator_reg_421 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_202 <= grp_fu_180_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, reset_read_reg_377, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((reset_read_reg_377 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    P_sum <= mul_reg_415;

    P_sum_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            P_sum_ap_vld <= ap_const_logic_1;
        else 
            P_sum_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    and_ln34_1_fu_326_p2 <= (grp_fu_194_p2 and and_ln34_fu_320_p2);
    and_ln34_fu_320_p2 <= (or_ln34_fu_310_p2 and or_ln34_1_fu_316_p2);
    and_ln36_1_fu_342_p2 <= (grp_fu_198_p2 and and_ln36_fu_336_p2);
    and_ln36_fu_336_p2 <= (or_ln36_fu_332_p2 and or_ln34_fu_310_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_out_1_phi_fu_173_p4_assign_proc : process(reset_read_reg_377, ap_CS_fsm_state15, out_fu_355_p3, out_1_reg_169)
    begin
        if (((reset_read_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_phi_mux_out_1_phi_fu_173_p4 <= out_fu_355_p3;
        else 
            ap_phi_mux_out_1_phi_fu_173_p4 <= out_1_reg_169;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_162_p4_assign_proc : process(grp_fu_180_p2, reset_read_reg_377, storemerge_reg_158, ap_CS_fsm_state15)
    begin
        if (((reset_read_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_phi_mux_storemerge_phi_fu_162_p4 <= grp_fu_180_p2;
        else 
            ap_phi_mux_storemerge_phi_fu_162_p4 <= storemerge_reg_158;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_out_1_phi_fu_173_p4;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    axi_actualValue <= actualValue;

    axi_actualValue_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            axi_actualValue_ap_vld <= ap_const_logic_1;
        else 
            axi_actualValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    axi_referenceValue <= referenceValue_read_reg_403;

    axi_referenceValue_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            axi_referenceValue_ap_vld <= ap_const_logic_1;
        else 
            axi_referenceValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_1_fu_224_p1 <= limit_read_reg_381;
    bitcast_ln34_fu_280_p1 <= reg_202;
    bitcast_ln36_fu_259_p1 <= xor_ln36_fu_253_p2;
    error <= reg_202;

    error_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            error_ap_vld <= ap_const_logic_1;
        else 
            error_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_180_opcode_assign_proc : process(reset_read_reg_377, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((reset_read_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_180_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_180_opcode <= ap_const_lv2_0;
        else 
            grp_fu_180_opcode <= "XX";
        end if; 
    end process;


    grp_fu_180_p0_assign_proc : process(I_sum, referenceValue_read_reg_403, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_180_p0 <= I_sum;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_180_p0 <= referenceValue_read_reg_403;
        else 
            grp_fu_180_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p1_assign_proc : process(actualValue, ap_CS_fsm_state2, mul_reg_415, mul2_reg_429, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_180_p1 <= mul2_reg_429;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_180_p1 <= mul_reg_415;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_180_p1 <= actualValue;
        else 
            grp_fu_180_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p0_assign_proc : process(reg_202, preIntegrator_reg_421, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_186_p0 <= preIntegrator_reg_421;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_186_p0 <= reg_202;
        else 
            grp_fu_186_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p1_assign_proc : process(KP_read_reg_388, sampletime_read_reg_398, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_186_p1 <= sampletime_read_reg_398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_186_p1 <= KP_read_reg_388;
        else 
            grp_fu_186_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_198_p1 <= xor_ln36_fu_253_p2;
    icmp_ln34_1_fu_304_p2 <= "1" when (trunc_ln34_fu_294_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_2_fu_241_p2 <= "0" when (tmp_1_fu_227_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_3_fu_247_p2 <= "1" when (trunc_ln34_1_fu_237_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_298_p2 <= "0" when (tmp_fu_284_p4 = ap_const_lv8_FF) else "1";
    icmp_ln36_fu_274_p2 <= "0" when (tmp_4_fu_264_p4 = ap_const_lv8_FF) else "1";
    or_ln34_1_fu_316_p2 <= (icmp_ln34_3_reg_439 or icmp_ln34_2_reg_434);
    or_ln34_fu_310_p2 <= (icmp_ln34_fu_298_p2 or icmp_ln34_1_fu_304_p2);
    or_ln36_fu_332_p2 <= (icmp_ln36_reg_451 or icmp_ln34_3_reg_439);
    out_fu_355_p3 <= 
        limit_read_reg_381 when (and_ln34_1_fu_326_p2(0) = '1') else 
        select_ln36_fu_348_p3;
    select_ln36_fu_348_p3 <= 
        bitcast_ln36_reg_445 when (and_ln36_1_fu_342_p2(0) = '1') else 
        reg_202;
    tmp_1_fu_227_p4 <= bitcast_ln34_1_fu_224_p1(30 downto 23);
    tmp_4_fu_264_p4 <= xor_ln36_fu_253_p2(30 downto 23);
    tmp_fu_284_p4 <= bitcast_ln34_fu_280_p1(30 downto 23);
    trunc_ln34_1_fu_237_p1 <= bitcast_ln34_1_fu_224_p1(23 - 1 downto 0);
    trunc_ln34_fu_294_p1 <= bitcast_ln34_fu_280_p1(23 - 1 downto 0);
    xor_ln36_fu_253_p2 <= (bitcast_ln34_1_fu_224_p1 xor ap_const_lv32_80000000);
end behav;
