-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_vec2GemStream_float_16u_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    p_out_full_n : IN STD_LOGIC;
    p_out_write : OUT STD_LOGIC;
    p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_m_empty_n : IN STD_LOGIC;
    p_m_read : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_in_ce0 : OUT STD_LOGIC;
    p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_in_ce1 : OUT STD_LOGIC;
    p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MLP_vec2GemStream_float_16u_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln86_reg_656 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_m_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_n_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_265 : STD_LOGIC_VECTOR (59 downto 0);
    signal i_reg_276 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal l_val_m_Val_1_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal l_val_m_Val_2_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal l_val_m_Val_3_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_4_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal l_val_m_Val_5_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_6_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal l_val_m_Val_7_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_8_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal l_val_m_Val_9_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_10_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal l_val_m_Val_11_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_12_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal l_val_m_Val_13_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_287_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln_reg_571 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal l_v_16_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_16_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_17_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_17_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_18_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_18_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_19_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_19_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_20_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_20_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_21_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_21_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_22_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_22_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_23_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_23_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_24_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_24_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_25_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_25_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_26_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_26_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_27_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_27_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_28_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_28_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_29_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_29_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_30_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_30_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_352_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_reg_651 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln86_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln86_fu_363_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln87_fu_399_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal zext_ln92_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_352_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln87_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_fu_374_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_fu_382_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_386_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_v_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_352_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_fu_352_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component MLP_mul_28ns_32ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;



begin
    mul_28ns_32ns_60_1_1_U401 : component MLP_mul_28ns_32ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 32,
        dout_WIDTH => 60)
    port map (
        din0 => bound_fu_352_p0,
        din1 => bound_fu_352_p1,
        dout => bound_fu_352_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_276 <= add_ln87_fu_399_p2;
            elsif ((not(((p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_reg_276 <= ap_const_lv28_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_265 <= add_ln86_fu_363_p2;
            elsif ((not(((p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                indvar_flatten_reg_265 <= ap_const_lv60_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                bound_reg_651 <= bound_fu_352_p2;
                l_v_16_reg_576 <= l_v_16_fu_297_p1;
                l_v_17_reg_581 <= l_v_17_fu_300_p1;
                l_v_18_reg_586 <= l_v_18_fu_303_p1;
                l_v_19_reg_591 <= l_v_19_fu_306_p1;
                l_v_20_reg_596 <= l_v_20_fu_309_p1;
                l_v_21_reg_601 <= l_v_21_fu_312_p1;
                l_v_22_reg_606 <= l_v_22_fu_315_p1;
                l_v_23_reg_611 <= l_v_23_fu_318_p1;
                l_v_24_reg_616 <= l_v_24_fu_321_p1;
                l_v_25_reg_621 <= l_v_25_fu_324_p1;
                l_v_26_reg_626 <= l_v_26_fu_327_p1;
                l_v_27_reg_631 <= l_v_27_fu_330_p1;
                l_v_28_reg_636 <= l_v_28_fu_333_p1;
                l_v_29_reg_641 <= l_v_29_fu_336_p1;
                l_v_30_reg_646 <= l_v_30_fu_340_p1;
                trunc_ln_reg_571 <= p_n_dout(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln86_reg_656 <= icmp_ln86_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                l_val_m_Val_10_reg_531 <= p_in_q0;
                l_val_m_Val_11_reg_536 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                l_val_m_Val_12_reg_551 <= p_in_q0;
                l_val_m_Val_13_reg_556 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                l_val_m_Val_1_reg_436 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                l_val_m_Val_2_reg_451 <= p_in_q1;
                l_val_m_Val_3_reg_456 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                l_val_m_Val_4_reg_471 <= p_in_q0;
                l_val_m_Val_5_reg_476 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                l_val_m_Val_6_reg_491 <= p_in_q0;
                l_val_m_Val_7_reg_496 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                l_val_m_Val_8_reg_511 <= p_in_q0;
                l_val_m_Val_9_reg_516 <= p_in_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, ap_CS_fsm_state9, icmp_ln86_fu_358_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_fu_358_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_fu_358_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln86_fu_363_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_265) + unsigned(ap_const_lv60_1));
    add_ln87_fu_399_p2 <= std_logic_vector(unsigned(ap_const_lv28_1) + unsigned(select_ln86_fu_374_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln86_reg_656)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln86_reg_656 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln86_reg_656)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln86_reg_656 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln86_reg_656)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln86_reg_656 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(p_out_full_n, icmp_ln86_reg_656)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((icmp_ln86_reg_656 = ap_const_lv1_0) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(p_m_empty_n, p_n_empty_n)
    begin
                ap_block_state9 <= ((p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln86_fu_358_p2)
    begin
        if ((icmp_ln86_fu_358_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_352_p0 <= bound_fu_352_p00(28 - 1 downto 0);
    bound_fu_352_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_287_p4),60));
    bound_fu_352_p1 <= bound_fu_352_p10(32 - 1 downto 0);
    bound_fu_352_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_m_dout),60));
    empty_fu_382_p1 <= select_ln86_fu_374_p3(1 - 1 downto 0);
    icmp_ln86_fu_358_p2 <= "1" when (indvar_flatten_reg_265 = bound_reg_651) else "0";
    icmp_ln87_fu_369_p2 <= "1" when (i_reg_276 = trunc_ln_reg_571) else "0";
    l_v_16_fu_297_p1 <= l_val_m_Val_1_reg_436;
    l_v_17_fu_300_p1 <= l_val_m_Val_2_reg_451;
    l_v_18_fu_303_p1 <= l_val_m_Val_3_reg_456;
    l_v_19_fu_306_p1 <= l_val_m_Val_4_reg_471;
    l_v_20_fu_309_p1 <= l_val_m_Val_5_reg_476;
    l_v_21_fu_312_p1 <= l_val_m_Val_6_reg_491;
    l_v_22_fu_315_p1 <= l_val_m_Val_7_reg_496;
    l_v_23_fu_318_p1 <= l_val_m_Val_8_reg_511;
    l_v_24_fu_321_p1 <= l_val_m_Val_9_reg_516;
    l_v_25_fu_324_p1 <= l_val_m_Val_10_reg_531;
    l_v_26_fu_327_p1 <= l_val_m_Val_11_reg_536;
    l_v_27_fu_330_p1 <= l_val_m_Val_12_reg_551;
    l_v_28_fu_333_p1 <= l_val_m_Val_13_reg_556;
    l_v_29_fu_336_p1 <= p_in_q0;
    l_v_30_fu_340_p1 <= p_in_q1;
    l_v_fu_405_p1 <= p_in_q1;

    p_in_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_in_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_in_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_in_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_in_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_in_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_in_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_in_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_in_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            p_in_address0 <= "XXXX";
        end if; 
    end process;


    p_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_enable_reg_pp0_iter0, zext_ln92_fu_394_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_in_address1 <= zext_ln92_fu_394_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_in_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_in_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_in_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_in_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_in_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_in_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_in_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        else 
            p_in_address1 <= "XXXX";
        end if; 
    end process;


    p_in_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_in_ce0 <= ap_const_logic_1;
        else 
            p_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_in_ce1 <= ap_const_logic_1;
        else 
            p_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_m_blk_n_assign_proc : process(p_m_empty_n, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_m_blk_n <= p_m_empty_n;
        else 
            p_m_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_m_read_assign_proc : process(p_m_empty_n, p_n_empty_n, ap_CS_fsm_state9)
    begin
        if ((not(((p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            p_m_read <= ap_const_logic_1;
        else 
            p_m_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(p_n_empty_n, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_read_assign_proc : process(p_m_empty_n, p_n_empty_n, ap_CS_fsm_state9)
    begin
        if ((not(((p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_out_blk_n_assign_proc : process(p_out_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln86_reg_656)
    begin
        if (((icmp_ln86_reg_656 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_blk_n <= p_out_full_n;
        else 
            p_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_din <= (((((((((((((((l_v_30_reg_646 & l_v_29_reg_641) & l_v_28_reg_636) & l_v_27_reg_631) & l_v_26_reg_626) & l_v_25_reg_621) & l_v_24_reg_616) & l_v_23_reg_611) & l_v_22_reg_606) & l_v_21_reg_601) & l_v_20_reg_596) & l_v_19_reg_591) & l_v_18_reg_586) & l_v_17_reg_581) & l_v_16_reg_576) & l_v_fu_405_p1);

    p_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln86_reg_656, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln86_reg_656 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_write <= ap_const_logic_1;
        else 
            p_out_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln86_fu_374_p3 <= 
        ap_const_lv28_0 when (icmp_ln87_fu_369_p2(0) = '1') else 
        i_reg_276;
    tmp_2_fu_386_p3 <= (empty_fu_382_p1 & ap_const_lv4_0);
    trunc_ln_fu_287_p4 <= p_n_dout(31 downto 4);
    zext_ln92_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_386_p3),64));
end behav;
