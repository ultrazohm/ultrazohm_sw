-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\inc_enc_v26\Incremental_Encoder_v26.vhd
-- Created: 2023-03-07 12:49:03
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Incremental_Encoder_v26
-- Source Path: Incremental_Encoder_v26
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Incremental_Encoder_v26 IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        A                                 :   IN    std_logic;  -- ufix1
        B                                 :   IN    std_logic;  -- ufix1
        I                                 :   IN    std_logic;  -- ufix1
        PeriodEnd                         :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        omega                             :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        theta_el                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        position                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        edge_rsvd                         :   OUT   std_logic;  -- ufix1
        count                             :   OUT   std_logic;  -- ufix1
        OverSamplFactor                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        omega_MA_N4                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        timeout_active                    :   OUT   std_logic;  -- ufix1
        omegaA                            :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        omegaNOTA                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        omegaB                            :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        omegaNOTB                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        new_measurement                   :   OUT   std_logic;  -- ufix1
        position_wOffset                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        Index_found                       :   OUT   std_logic;  -- ufix1
        d_Axis_Hit                        :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END Incremental_Encoder_v26;


ARCHITECTURE rtl OF Incremental_Encoder_v26 IS

  -- Component Declarations
  COMPONENT Incremental_Encoder_v26_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Incremental_Encoder_v26_axi_lite
    PORT( reset_x                         :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_omega_AXI4                 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          read_direction_AXI4             :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
          read_theta_el_AXI4              :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          read_position_AXI4              :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          read_countPerPeriod_AXI4        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          read_omega_MA_N4_AXI            :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          read_position_wOffset_AXI4      :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          read_Index_found_AXI4           :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_Position_offset_AXI4      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          write_Timer_FPGA_ms_AXI4        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_En32
          write_PI2_Inc_AXI4              :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24_En24
          write_IncPerTurn_mech_AXI4      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          write_theta_el_offset_AXI4      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          write_IncPerTurn_elek_AXI4      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          write_OmegaPerOverSampl_AXI4    :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          write_timeout_value_AXI4        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_CW_CCW_Switch_AXI4        :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT Incremental_Encoder_v26_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          A                               :   IN    std_logic;  -- ufix1
          B                               :   IN    std_logic;  -- ufix1
          I                               :   IN    std_logic;  -- ufix1
          PI2_Inc_AXI4                    :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24_En24
          Timer_FPGA_ms_AXI4              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En32
          IncPerTurn_mech_AXI4            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          IncPerTurn_elek_AXI4            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          OmegaPerOverSampl_AXI4          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          PeriodEnd                       :   IN    std_logic;  -- ufix1
          timeout_value_AXI4              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          Position_offset_AXI4            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          theta_el_offset_AXI4            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          CW_CCW_Switch_AXI4              :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          omega                           :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          omega_AXI4                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          theta_el                        :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          theta_el_AXI4                   :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          position                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          position_AXI4                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          edge_rsvd                       :   OUT   std_logic;  -- ufix1
          count                           :   OUT   std_logic;  -- ufix1
          direction_AXI4                  :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4
          countPerPeriod_AXI4             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          OverSamplFactor                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          omega_MA_N4                     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          omega_MA_N4_AXI                 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          timeout_active                  :   OUT   std_logic;  -- ufix1
          omegaA                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          omegaNOTA                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          omegaB                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          omegaNOTB                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          new_measurement                 :   OUT   std_logic;  -- ufix1
          position_wOffset                :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          position_wOffset_AXI4           :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          Index_found                     :   OUT   std_logic;  -- ufix1
          Index_found_AXI4                :   OUT   std_logic;  -- ufix1
          d_Axis_Hit                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Incremental_Encoder_v26_reset_sync
    USE ENTITY work.Incremental_Encoder_v26_reset_sync(rtl);

  FOR ALL : Incremental_Encoder_v26_axi_lite
    USE ENTITY work.Incremental_Encoder_v26_axi_lite(rtl);

  FOR ALL : Incremental_Encoder_v26_dut
    USE ENTITY work.Incremental_Encoder_v26_dut(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL omega_AXI4_sig                   : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL direction_AXI4_sig               : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL theta_el_AXI4_sig                : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL position_AXI4_sig                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL countPerPeriod_AXI4_sig          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL omega_MA_N4_AXI_sig              : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL position_wOffset_AXI4_sig        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Index_found_AXI4_sig             : std_logic;  -- ufix1
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_Position_offset_AXI4       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_Timer_FPGA_ms_AXI4         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_PI2_Inc_AXI4               : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL write_IncPerTurn_mech_AXI4       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_theta_el_offset_AXI4       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_IncPerTurn_elek_AXI4       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL write_OmegaPerOverSampl_AXI4     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL write_timeout_value_AXI4         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_CW_CCW_Switch_AXI4         : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL omega_sig                        : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL theta_el_sig                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL position_sig                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL edge_rsvd_sig                    : std_logic;  -- ufix1
  SIGNAL count_sig                        : std_logic;  -- ufix1
  SIGNAL OverSamplFactor_sig              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL omega_MA_N4_sig                  : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL timeout_active_sig               : std_logic;  -- ufix1
  SIGNAL omegaA_sig                       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL omegaNOTA_sig                    : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL omegaB_sig                       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL omegaNOTB_sig                    : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL new_measurement_sig              : std_logic;  -- ufix1
  SIGNAL position_wOffset_sig             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Index_found_sig                  : std_logic;  -- ufix1
  SIGNAL d_Axis_Hit_sig                   : std_logic;  -- ufix1
  SIGNAL omega_sig_signed                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omega_tmp                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL theta_el_sig_signed              : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL theta_el_tmp                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL omega_MA_N4_sig_signed           : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omega_MA_N4_tmp                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL omegaA_sig_signed                : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omegaA_tmp                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL omegaNOTA_sig_signed             : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omegaNOTA_tmp                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL omegaB_sig_signed                : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omegaB_tmp                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL omegaNOTB_sig_signed             : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omegaNOTB_tmp                    : unsigned(23 DOWNTO 0);  -- ufix24

BEGIN
  u_Incremental_Encoder_v26_reset_sync_inst : Incremental_Encoder_v26_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset_x
              );

  u_Incremental_Encoder_v26_axi_lite_inst : Incremental_Encoder_v26_axi_lite
    PORT MAP( reset_x => reset_x,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_omega_AXI4 => omega_AXI4_sig,  -- sfix24_En11
              read_direction_AXI4 => direction_AXI4_sig,  -- sfix4
              read_theta_el_AXI4 => theta_el_AXI4_sig,  -- sfix24_En20
              read_position_AXI4 => position_AXI4_sig,  -- ufix16
              read_countPerPeriod_AXI4 => countPerPeriod_AXI4_sig,  -- sfix16
              read_omega_MA_N4_AXI => omega_MA_N4_AXI_sig,  -- sfix24_En11
              read_position_wOffset_AXI4 => position_wOffset_AXI4_sig,  -- ufix16
              read_Index_found_AXI4 => Index_found_AXI4_sig,  -- ufix1
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_Position_offset_AXI4 => write_Position_offset_AXI4,  -- ufix16
              write_Timer_FPGA_ms_AXI4 => write_Timer_FPGA_ms_AXI4,  -- ufix32_En32
              write_PI2_Inc_AXI4 => write_PI2_Inc_AXI4,  -- ufix24_En24
              write_IncPerTurn_mech_AXI4 => write_IncPerTurn_mech_AXI4,  -- ufix16
              write_theta_el_offset_AXI4 => write_theta_el_offset_AXI4,  -- ufix16
              write_IncPerTurn_elek_AXI4 => write_IncPerTurn_elek_AXI4,  -- ufix16
              write_OmegaPerOverSampl_AXI4 => write_OmegaPerOverSampl_AXI4,  -- sfix24_En11
              write_timeout_value_AXI4 => write_timeout_value_AXI4,  -- ufix32
              write_CW_CCW_Switch_AXI4 => write_CW_CCW_Switch_AXI4,  -- ufix1
              reset_internal => reset_internal  -- ufix1
              );

  u_Incremental_Encoder_v26_dut_inst : Incremental_Encoder_v26_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => write_axi_enable,  -- ufix1
              A => A,  -- ufix1
              B => B,  -- ufix1
              I => I,  -- ufix1
              PI2_Inc_AXI4 => write_PI2_Inc_AXI4,  -- ufix24_En24
              Timer_FPGA_ms_AXI4 => write_Timer_FPGA_ms_AXI4,  -- ufix32_En32
              IncPerTurn_mech_AXI4 => write_IncPerTurn_mech_AXI4,  -- ufix16
              IncPerTurn_elek_AXI4 => write_IncPerTurn_elek_AXI4,  -- ufix16
              OmegaPerOverSampl_AXI4 => write_OmegaPerOverSampl_AXI4,  -- sfix24_En11
              PeriodEnd => PeriodEnd,  -- ufix1
              timeout_value_AXI4 => write_timeout_value_AXI4,  -- ufix32
              Position_offset_AXI4 => write_Position_offset_AXI4,  -- ufix16
              theta_el_offset_AXI4 => write_theta_el_offset_AXI4,  -- ufix16
              CW_CCW_Switch_AXI4 => write_CW_CCW_Switch_AXI4,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              omega => omega_sig,  -- sfix24_En11
              omega_AXI4 => omega_AXI4_sig,  -- sfix24_En11
              theta_el => theta_el_sig,  -- sfix24_En20
              theta_el_AXI4 => theta_el_AXI4_sig,  -- sfix24_En20
              position => position_sig,  -- ufix16
              position_AXI4 => position_AXI4_sig,  -- ufix16
              edge_rsvd => edge_rsvd_sig,  -- ufix1
              count => count_sig,  -- ufix1
              direction_AXI4 => direction_AXI4_sig,  -- sfix4
              countPerPeriod_AXI4 => countPerPeriod_AXI4_sig,  -- sfix16
              OverSamplFactor => OverSamplFactor_sig,  -- ufix16
              omega_MA_N4 => omega_MA_N4_sig,  -- sfix24_En11
              omega_MA_N4_AXI => omega_MA_N4_AXI_sig,  -- sfix24_En11
              timeout_active => timeout_active_sig,  -- ufix1
              omegaA => omegaA_sig,  -- sfix24_En11
              omegaNOTA => omegaNOTA_sig,  -- sfix24_En11
              omegaB => omegaB_sig,  -- sfix24_En11
              omegaNOTB => omegaNOTB_sig,  -- sfix24_En11
              new_measurement => new_measurement_sig,  -- ufix1
              position_wOffset => position_wOffset_sig,  -- ufix16
              position_wOffset_AXI4 => position_wOffset_AXI4_sig,  -- ufix16
              Index_found => Index_found_sig,  -- ufix1
              Index_found_AXI4 => Index_found_AXI4_sig,  -- ufix1
              d_Axis_Hit => d_Axis_Hit_sig  -- ufix1
              );

  ip_timestamp <= unsigned'(X"89461410");

  reset_cm <=  NOT IPCORE_RESETN;

  reset_before_sync <= reset_cm OR reset_internal;

  omega_sig_signed <= signed(omega_sig);

  omega_tmp <= unsigned(omega_sig_signed);

  omega <= std_logic_vector(omega_tmp);

  theta_el_sig_signed <= signed(theta_el_sig);

  theta_el_tmp <= unsigned(theta_el_sig_signed);

  theta_el <= std_logic_vector(theta_el_tmp);

  omega_MA_N4_sig_signed <= signed(omega_MA_N4_sig);

  omega_MA_N4_tmp <= unsigned(omega_MA_N4_sig_signed);

  omega_MA_N4 <= std_logic_vector(omega_MA_N4_tmp);

  omegaA_sig_signed <= signed(omegaA_sig);

  omegaA_tmp <= unsigned(omegaA_sig_signed);

  omegaA <= std_logic_vector(omegaA_tmp);

  omegaNOTA_sig_signed <= signed(omegaNOTA_sig);

  omegaNOTA_tmp <= unsigned(omegaNOTA_sig_signed);

  omegaNOTA <= std_logic_vector(omegaNOTA_tmp);

  omegaB_sig_signed <= signed(omegaB_sig);

  omegaB_tmp <= unsigned(omegaB_sig_signed);

  omegaB <= std_logic_vector(omegaB_tmp);

  omegaNOTB_sig_signed <= signed(omegaNOTB_sig);

  omegaNOTB_tmp <= unsigned(omegaNOTB_sig_signed);

  omegaNOTB <= std_logic_vector(omegaNOTB_tmp);

  position <= position_sig;

  edge_rsvd <= edge_rsvd_sig;

  count <= count_sig;

  OverSamplFactor <= OverSamplFactor_sig;

  timeout_active <= timeout_active_sig;

  new_measurement <= new_measurement_sig;

  position_wOffset <= position_wOffset_sig;

  Index_found <= Index_found_sig;

  d_Axis_Hit <= d_Axis_Hit_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

