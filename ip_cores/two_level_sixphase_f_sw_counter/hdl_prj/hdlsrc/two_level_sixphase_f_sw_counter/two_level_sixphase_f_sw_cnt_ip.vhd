-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\two_level_sixphase_f_sw_counter\two_level_sixphase_f_sw_cnt_ip.vhd
-- Created: 2023-01-05 11:03:35
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: two_level_sixphase_f_sw_cnt_ip
-- Source Path: two_level_sixphase_f_sw_cnt_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY two_level_sixphase_f_sw_cnt_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        ss_in_0                           :   IN    std_logic;  -- ufix1
        ss_in_1                           :   IN    std_logic;  -- ufix1
        ss_in_2                           :   IN    std_logic;  -- ufix1
        ss_in_3                           :   IN    std_logic;  -- ufix1
        ss_in_4                           :   IN    std_logic;  -- ufix1
        ss_in_5                           :   IN    std_logic;  -- ufix1
        ss_in_6                           :   IN    std_logic;  -- ufix1
        ss_in_7                           :   IN    std_logic;  -- ufix1
        ss_in_8                           :   IN    std_logic;  -- ufix1
        ss_in_9                           :   IN    std_logic;  -- ufix1
        ss_in_10                          :   IN    std_logic;  -- ufix1
        ss_in_11                          :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        switchNumb                        :   OUT   std_logic_vector(24 DOWNTO 0);  -- ufix25
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END two_level_sixphase_f_sw_cnt_ip;


ARCHITECTURE rtl OF two_level_sixphase_f_sw_cnt_ip IS

  -- Component Declarations
  COMPONENT two_level_sixphase_f_sw_cnt_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT two_level_sixphase_f_sw_cnt_ip_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_switchNumb_AXI             :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_bResetAXI                 :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT two_level_sixphase_f_sw_cnt_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          ss_in_0                         :   IN    std_logic;  -- ufix1
          ss_in_1                         :   IN    std_logic;  -- ufix1
          ss_in_2                         :   IN    std_logic;  -- ufix1
          ss_in_3                         :   IN    std_logic;  -- ufix1
          ss_in_4                         :   IN    std_logic;  -- ufix1
          ss_in_5                         :   IN    std_logic;  -- ufix1
          ss_in_6                         :   IN    std_logic;  -- ufix1
          ss_in_7                         :   IN    std_logic;  -- ufix1
          ss_in_8                         :   IN    std_logic;  -- ufix1
          ss_in_9                         :   IN    std_logic;  -- ufix1
          ss_in_10                        :   IN    std_logic;  -- ufix1
          ss_in_11                        :   IN    std_logic;  -- ufix1
          bResetAXI                       :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          switchNumb_AXI                  :   OUT   std_logic_vector(24 DOWNTO 0);  -- ufix25
          switchNumb                      :   OUT   std_logic_vector(24 DOWNTO 0)  -- ufix25
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : two_level_sixphase_f_sw_cnt_ip_reset_sync
    USE ENTITY work.two_level_sixphase_f_sw_cnt_ip_reset_sync(rtl);

  FOR ALL : two_level_sixphase_f_sw_cnt_ip_axi_lite
    USE ENTITY work.two_level_sixphase_f_sw_cnt_ip_axi_lite(rtl);

  FOR ALL : two_level_sixphase_f_sw_cnt_ip_dut
    USE ENTITY work.two_level_sixphase_f_sw_cnt_ip_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL switchNumb_AXI_sig               : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_bResetAXI                  : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL switchNumb_sig                   : std_logic_vector(24 DOWNTO 0);  -- ufix25

BEGIN
  u_two_level_sixphase_f_sw_cnt_ip_reset_sync_inst : two_level_sixphase_f_sw_cnt_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_two_level_sixphase_f_sw_cnt_ip_axi_lite_inst : two_level_sixphase_f_sw_cnt_ip_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_switchNumb_AXI => switchNumb_AXI_sig,  -- ufix25
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_bResetAXI => write_bResetAXI,  -- ufix1
              reset_internal => reset_internal  -- ufix1
              );

  u_two_level_sixphase_f_sw_cnt_ip_dut_inst : two_level_sixphase_f_sw_cnt_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              ss_in_0 => ss_in_0,  -- ufix1
              ss_in_1 => ss_in_1,  -- ufix1
              ss_in_2 => ss_in_2,  -- ufix1
              ss_in_3 => ss_in_3,  -- ufix1
              ss_in_4 => ss_in_4,  -- ufix1
              ss_in_5 => ss_in_5,  -- ufix1
              ss_in_6 => ss_in_6,  -- ufix1
              ss_in_7 => ss_in_7,  -- ufix1
              ss_in_8 => ss_in_8,  -- ufix1
              ss_in_9 => ss_in_9,  -- ufix1
              ss_in_10 => ss_in_10,  -- ufix1
              ss_in_11 => ss_in_11,  -- ufix1
              bResetAXI => write_bResetAXI,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              switchNumb_AXI => switchNumb_AXI_sig,  -- ufix25
              switchNumb => switchNumb_sig  -- ufix25
              );

  ip_timestamp <= unsigned'(X"892740DF");

  reset_cm <=  NOT IPCORE_RESETN;

  reset_before_sync <= reset_cm OR reset_internal;

  switchNumb <= switchNumb_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

