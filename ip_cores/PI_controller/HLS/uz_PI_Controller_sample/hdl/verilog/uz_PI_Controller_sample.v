// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_PI_Controller_sample_uz_PI_Controller_sample,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2050,HLS_SYN_LUT=2833,HLS_VERSION=2020_1}" *)

module uz_PI_Controller_sample (
        ap_clk,
        ap_rst_n,
        m_axi_Dout_AWVALID,
        m_axi_Dout_AWREADY,
        m_axi_Dout_AWADDR,
        m_axi_Dout_AWID,
        m_axi_Dout_AWLEN,
        m_axi_Dout_AWSIZE,
        m_axi_Dout_AWBURST,
        m_axi_Dout_AWLOCK,
        m_axi_Dout_AWCACHE,
        m_axi_Dout_AWPROT,
        m_axi_Dout_AWQOS,
        m_axi_Dout_AWREGION,
        m_axi_Dout_AWUSER,
        m_axi_Dout_WVALID,
        m_axi_Dout_WREADY,
        m_axi_Dout_WDATA,
        m_axi_Dout_WSTRB,
        m_axi_Dout_WLAST,
        m_axi_Dout_WID,
        m_axi_Dout_WUSER,
        m_axi_Dout_ARVALID,
        m_axi_Dout_ARREADY,
        m_axi_Dout_ARADDR,
        m_axi_Dout_ARID,
        m_axi_Dout_ARLEN,
        m_axi_Dout_ARSIZE,
        m_axi_Dout_ARBURST,
        m_axi_Dout_ARLOCK,
        m_axi_Dout_ARCACHE,
        m_axi_Dout_ARPROT,
        m_axi_Dout_ARQOS,
        m_axi_Dout_ARREGION,
        m_axi_Dout_ARUSER,
        m_axi_Dout_RVALID,
        m_axi_Dout_RREADY,
        m_axi_Dout_RDATA,
        m_axi_Dout_RLAST,
        m_axi_Dout_RID,
        m_axi_Dout_RUSER,
        m_axi_Dout_RRESP,
        m_axi_Dout_BVALID,
        m_axi_Dout_BREADY,
        m_axi_Dout_BRESP,
        m_axi_Dout_BID,
        m_axi_Dout_BUSER,
        s_axi_Din_AWVALID,
        s_axi_Din_AWREADY,
        s_axi_Din_AWADDR,
        s_axi_Din_WVALID,
        s_axi_Din_WREADY,
        s_axi_Din_WDATA,
        s_axi_Din_WSTRB,
        s_axi_Din_ARVALID,
        s_axi_Din_ARREADY,
        s_axi_Din_ARADDR,
        s_axi_Din_RVALID,
        s_axi_Din_RREADY,
        s_axi_Din_RDATA,
        s_axi_Din_RRESP,
        s_axi_Din_BVALID,
        s_axi_Din_BREADY,
        s_axi_Din_BRESP,
        interrupt,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;
parameter    C_S_AXI_DIN_DATA_WIDTH = 32;
parameter    C_S_AXI_DIN_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_M_AXI_DOUT_ID_WIDTH = 1;
parameter    C_M_AXI_DOUT_ADDR_WIDTH = 64;
parameter    C_M_AXI_DOUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DOUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_USER_VALUE = 0;
parameter    C_M_AXI_DOUT_PROT_VALUE = 0;
parameter    C_M_AXI_DOUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_DIN_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DOUT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_Dout_AWVALID;
input   m_axi_Dout_AWREADY;
output  [C_M_AXI_DOUT_ADDR_WIDTH - 1:0] m_axi_Dout_AWADDR;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_AWID;
output  [7:0] m_axi_Dout_AWLEN;
output  [2:0] m_axi_Dout_AWSIZE;
output  [1:0] m_axi_Dout_AWBURST;
output  [1:0] m_axi_Dout_AWLOCK;
output  [3:0] m_axi_Dout_AWCACHE;
output  [2:0] m_axi_Dout_AWPROT;
output  [3:0] m_axi_Dout_AWQOS;
output  [3:0] m_axi_Dout_AWREGION;
output  [C_M_AXI_DOUT_AWUSER_WIDTH - 1:0] m_axi_Dout_AWUSER;
output   m_axi_Dout_WVALID;
input   m_axi_Dout_WREADY;
output  [C_M_AXI_DOUT_DATA_WIDTH - 1:0] m_axi_Dout_WDATA;
output  [C_M_AXI_DOUT_WSTRB_WIDTH - 1:0] m_axi_Dout_WSTRB;
output   m_axi_Dout_WLAST;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_WID;
output  [C_M_AXI_DOUT_WUSER_WIDTH - 1:0] m_axi_Dout_WUSER;
output   m_axi_Dout_ARVALID;
input   m_axi_Dout_ARREADY;
output  [C_M_AXI_DOUT_ADDR_WIDTH - 1:0] m_axi_Dout_ARADDR;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_ARID;
output  [7:0] m_axi_Dout_ARLEN;
output  [2:0] m_axi_Dout_ARSIZE;
output  [1:0] m_axi_Dout_ARBURST;
output  [1:0] m_axi_Dout_ARLOCK;
output  [3:0] m_axi_Dout_ARCACHE;
output  [2:0] m_axi_Dout_ARPROT;
output  [3:0] m_axi_Dout_ARQOS;
output  [3:0] m_axi_Dout_ARREGION;
output  [C_M_AXI_DOUT_ARUSER_WIDTH - 1:0] m_axi_Dout_ARUSER;
input   m_axi_Dout_RVALID;
output   m_axi_Dout_RREADY;
input  [C_M_AXI_DOUT_DATA_WIDTH - 1:0] m_axi_Dout_RDATA;
input   m_axi_Dout_RLAST;
input  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_RID;
input  [C_M_AXI_DOUT_RUSER_WIDTH - 1:0] m_axi_Dout_RUSER;
input  [1:0] m_axi_Dout_RRESP;
input   m_axi_Dout_BVALID;
output   m_axi_Dout_BREADY;
input  [1:0] m_axi_Dout_BRESP;
input  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_Dout_BID;
input  [C_M_AXI_DOUT_BUSER_WIDTH - 1:0] m_axi_Dout_BUSER;
input   s_axi_Din_AWVALID;
output   s_axi_Din_AWREADY;
input  [C_S_AXI_DIN_ADDR_WIDTH - 1:0] s_axi_Din_AWADDR;
input   s_axi_Din_WVALID;
output   s_axi_Din_WREADY;
input  [C_S_AXI_DIN_DATA_WIDTH - 1:0] s_axi_Din_WDATA;
input  [C_S_AXI_DIN_WSTRB_WIDTH - 1:0] s_axi_Din_WSTRB;
input   s_axi_Din_ARVALID;
output   s_axi_Din_ARREADY;
input  [C_S_AXI_DIN_ADDR_WIDTH - 1:0] s_axi_Din_ARADDR;
output   s_axi_Din_RVALID;
input   s_axi_Din_RREADY;
output  [C_S_AXI_DIN_DATA_WIDTH - 1:0] s_axi_Din_RDATA;
output  [1:0] s_axi_Din_RRESP;
output   s_axi_Din_BVALID;
input   s_axi_Din_BREADY;
output  [1:0] s_axi_Din_BRESP;
output   interrupt;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [159:0] self;
wire   [31:0] I_rst;
wire   [31:0] referenceValue;
wire   [31:0] actualValue;
wire   [31:0] ext_clamping;
wire   [63:0] output_r;
reg   [31:0] I_sum;
reg    Dout_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    Dout_blk_n_W;
wire    ap_CS_fsm_state19;
reg    Dout_blk_n_B;
wire    ap_CS_fsm_state24;
reg    Dout_AWVALID;
wire    Dout_AWREADY;
reg    Dout_WVALID;
wire    Dout_WREADY;
wire   [31:0] Dout_WDATA;
wire    Dout_ARREADY;
wire    Dout_RVALID;
wire   [31:0] Dout_RDATA;
wire    Dout_RLAST;
wire   [0:0] Dout_RID;
wire   [0:0] Dout_RUSER;
wire   [1:0] Dout_RRESP;
wire    Dout_BVALID;
reg    Dout_BREADY;
wire   [1:0] Dout_BRESP;
wire   [0:0] Dout_BID;
wire   [0:0] Dout_BUSER;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] reg_214;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] reg_223;
wire    ap_CS_fsm_state9;
reg   [0:0] empty_reg_799;
wire    ap_CS_fsm_state13;
reg   [31:0] ext_clamping_read_reg_784;
wire   [0:0] empty_fu_231_p1;
reg   [31:0] trunc_ln_reg_804;
wire   [31:0] trunc_ln47_fu_245_p1;
reg   [31:0] trunc_ln47_reg_809;
reg   [31:0] trunc_ln2_reg_814;
reg   [31:0] trunc_ln49_1_reg_819;
wire   [0:0] icmp_ln23_2_fu_289_p2;
reg   [0:0] icmp_ln23_2_reg_824;
wire   [0:0] icmp_ln23_3_fu_295_p2;
reg   [0:0] icmp_ln23_3_reg_829;
wire   [0:0] icmp_ln23_4_fu_321_p2;
reg   [0:0] icmp_ln23_4_reg_834;
wire   [0:0] icmp_ln23_5_fu_327_p2;
reg   [0:0] icmp_ln23_5_reg_839;
reg   [31:0] trunc_ln5_reg_844;
reg   [63:0] Dout_addr_reg_849;
wire   [31:0] bitcast_ln46_fu_363_p1;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_190_p2;
reg   [31:0] P_sum_reg_865;
wire    ap_CS_fsm_state10;
wire   [0:0] or_ln35_1_fu_406_p2;
reg   [0:0] or_ln35_1_reg_875;
wire   [31:0] bitcast_ln54_fu_412_p1;
wire   [0:0] grp_fu_194_p2;
reg   [0:0] tmp_7_reg_886;
wire    ap_CS_fsm_state11;
wire   [0:0] grp_fu_199_p2;
reg   [0:0] fcmp_ln35_reg_891;
wire   [0:0] grp_fu_204_p2;
reg   [0:0] fcmp_ln35_reg_896;
wire   [31:0] bitcast_ln49_fu_416_p1;
reg   [31:0] bitcast_ln49_reg_901;
wire    ap_CS_fsm_state15;
wire   [0:0] and_ln23_1_fu_460_p2;
reg   [0:0] and_ln23_1_reg_909;
wire   [0:0] and_ln23_3_fu_470_p2;
reg   [0:0] and_ln23_3_reg_915;
wire   [0:0] and_ln25_fu_476_p2;
reg   [0:0] and_ln25_reg_921;
wire    ap_CS_fsm_state16;
wire   [31:0] bitcast_ln49_1_fu_481_p1;
reg   [31:0] bitcast_ln49_1_reg_927;
wire    ap_CS_fsm_state17;
wire   [31:0] select_ln25_fu_485_p3;
wire   [31:0] output_4_fu_504_p3;
reg   [31:0] output_4_reg_938;
wire    ap_CS_fsm_state18;
reg   [0:0] tmp_2_reg_943;
reg   [0:0] tmp_5_reg_948;
wire   [31:0] output_5_fu_528_p3;
reg   [31:0] output_5_reg_953;
wire    ap_CS_fsm_state21;
wire   [0:0] or_ln35_fu_565_p2;
reg   [0:0] or_ln35_reg_962;
wire    ap_CS_fsm_state22;
wire   [31:0] sign_fu_607_p3;
wire    ap_CS_fsm_state23;
wire   [31:0] sign_1_fu_649_p3;
wire   [0:0] grp_fu_209_p2;
reg   [0:0] tmp_11_reg_979;
wire   [0:0] icmp_ln27_fu_694_p2;
reg   [0:0] icmp_ln27_reg_984;
wire   [0:0] icmp_ln27_1_fu_700_p2;
reg   [0:0] icmp_ln27_1_reg_989;
wire   [0:0] icmp_ln27_2_fu_706_p2;
reg   [0:0] icmp_ln27_2_reg_994;
wire   [0:0] icmp_ln27_3_fu_712_p2;
reg   [0:0] icmp_ln27_3_reg_999;
wire   [31:0] select_ln50_fu_763_p3;
reg   [31:0] select_ln50_reg_1004;
wire  signed [63:0] sext_ln57_fu_353_p1;
wire   [31:0] select_ln59_fu_771_p3;
wire    ap_CS_fsm_state29;
reg   [31:0] grp_fu_180_p0;
reg   [31:0] grp_fu_180_p1;
wire    ap_CS_fsm_state25;
reg   [31:0] grp_fu_186_p0;
reg   [31:0] grp_fu_186_p1;
wire   [31:0] grp_fu_190_p1;
reg   [31:0] grp_fu_194_p0;
reg   [31:0] grp_fu_194_p1;
reg   [31:0] grp_fu_199_p0;
reg   [31:0] grp_fu_199_p1;
reg   [31:0] grp_fu_204_p0;
wire   [7:0] tmp_1_fu_269_p4;
wire   [22:0] trunc_ln23_1_fu_279_p4;
wire   [7:0] tmp_4_fu_301_p4;
wire   [22:0] trunc_ln23_3_fu_311_p4;
wire   [61:0] trunc_ln6_fu_343_p4;
wire   [31:0] bitcast_ln35_1_fu_376_p1;
wire   [7:0] tmp_6_fu_380_p4;
wire   [22:0] trunc_ln35_1_fu_390_p1;
wire   [0:0] icmp_ln35_3_fu_400_p2;
wire   [0:0] icmp_ln35_2_fu_394_p2;
wire   [31:0] bitcast_ln23_fu_420_p1;
wire   [7:0] tmp_fu_424_p4;
wire   [22:0] trunc_ln23_fu_434_p1;
wire   [0:0] icmp_ln23_1_fu_444_p2;
wire   [0:0] icmp_ln23_fu_438_p2;
wire   [0:0] or_ln23_fu_450_p2;
wire   [0:0] or_ln23_1_fu_456_p2;
wire   [0:0] or_ln23_2_fu_466_p2;
wire   [0:0] and_ln49_fu_492_p2;
wire   [31:0] output_3_fu_497_p3;
wire   [0:0] and_ln23_2_fu_514_p2;
wire   [0:0] and_ln23_4_fu_518_p2;
wire   [0:0] and_ln23_fu_522_p2;
wire   [31:0] bitcast_ln35_fu_536_p1;
wire   [7:0] tmp_9_fu_539_p4;
wire   [22:0] trunc_ln35_fu_549_p1;
wire   [0:0] icmp_ln35_1_fu_559_p2;
wire   [0:0] icmp_ln35_fu_553_p2;
wire   [0:0] and_ln35_fu_571_p2;
wire   [0:0] xor_ln35_fu_584_p2;
wire   [0:0] xor_ln35_fu_590_p2;
wire   [0:0] and_ln35_fu_596_p2;
wire   [0:0] and_ln35_1_fu_602_p2;
wire   [31:0] select_ln35_fu_576_p3;
wire   [0:0] and_ln35_2_fu_616_p2;
wire   [0:0] xor_ln35_fu_628_p2;
wire   [0:0] xor_ln35_fu_633_p2;
wire   [0:0] and_ln35_fu_638_p2;
wire   [0:0] and_ln35_3_fu_644_p2;
wire   [31:0] select_ln35_2_fu_620_p3;
wire   [31:0] bitcast_ln27_fu_658_p1;
wire   [31:0] bitcast_ln27_1_fu_676_p1;
wire   [7:0] tmp_12_fu_662_p4;
wire   [22:0] trunc_ln27_fu_672_p1;
wire   [7:0] tmp_13_fu_680_p4;
wire   [22:0] trunc_ln27_1_fu_690_p1;
wire   [0:0] and_ln27_fu_721_p2;
wire   [0:0] or_ln27_fu_731_p2;
wire   [0:0] or_ln27_1_fu_735_p2;
wire   [0:0] and_ln27_1_fu_739_p2;
wire   [0:0] and_ln27_2_fu_745_p2;
wire   [0:0] xor_ln27_fu_725_p2;
wire   [0:0] empty_20_fu_718_p1;
wire   [0:0] output_6_fu_751_p2;
wire   [0:0] clamping_active_fu_757_p2;
reg   [1:0] grp_fu_180_opcode;
reg    grp_fu_180_ce;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg    grp_fu_194_ce;
reg   [4:0] grp_fu_194_opcode;
reg    grp_fu_199_ce;
reg   [4:0] grp_fu_199_opcode;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 I_sum = 32'd0;
end

uz_PI_Controller_sample_Din_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DIN_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DIN_DATA_WIDTH ))
Din_s_axi_U(
    .AWVALID(s_axi_Din_AWVALID),
    .AWREADY(s_axi_Din_AWREADY),
    .AWADDR(s_axi_Din_AWADDR),
    .WVALID(s_axi_Din_WVALID),
    .WREADY(s_axi_Din_WREADY),
    .WDATA(s_axi_Din_WDATA),
    .WSTRB(s_axi_Din_WSTRB),
    .ARVALID(s_axi_Din_ARVALID),
    .ARREADY(s_axi_Din_ARREADY),
    .ARADDR(s_axi_Din_ARADDR),
    .RVALID(s_axi_Din_RVALID),
    .RREADY(s_axi_Din_RREADY),
    .RDATA(s_axi_Din_RDATA),
    .RRESP(s_axi_Din_RRESP),
    .BVALID(s_axi_Din_BVALID),
    .BREADY(s_axi_Din_BREADY),
    .BRESP(s_axi_Din_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .self(self),
    .I_rst(I_rst),
    .referenceValue(referenceValue),
    .actualValue(actualValue),
    .ext_clamping(ext_clamping),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

uz_PI_Controller_sample_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .output_r(output_r)
);

uz_PI_Controller_sample_Dout_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DOUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DOUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DOUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DOUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DOUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DOUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DOUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DOUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DOUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DOUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DOUT_CACHE_VALUE ))
Dout_m_axi_U(
    .AWVALID(m_axi_Dout_AWVALID),
    .AWREADY(m_axi_Dout_AWREADY),
    .AWADDR(m_axi_Dout_AWADDR),
    .AWID(m_axi_Dout_AWID),
    .AWLEN(m_axi_Dout_AWLEN),
    .AWSIZE(m_axi_Dout_AWSIZE),
    .AWBURST(m_axi_Dout_AWBURST),
    .AWLOCK(m_axi_Dout_AWLOCK),
    .AWCACHE(m_axi_Dout_AWCACHE),
    .AWPROT(m_axi_Dout_AWPROT),
    .AWQOS(m_axi_Dout_AWQOS),
    .AWREGION(m_axi_Dout_AWREGION),
    .AWUSER(m_axi_Dout_AWUSER),
    .WVALID(m_axi_Dout_WVALID),
    .WREADY(m_axi_Dout_WREADY),
    .WDATA(m_axi_Dout_WDATA),
    .WSTRB(m_axi_Dout_WSTRB),
    .WLAST(m_axi_Dout_WLAST),
    .WID(m_axi_Dout_WID),
    .WUSER(m_axi_Dout_WUSER),
    .ARVALID(m_axi_Dout_ARVALID),
    .ARREADY(m_axi_Dout_ARREADY),
    .ARADDR(m_axi_Dout_ARADDR),
    .ARID(m_axi_Dout_ARID),
    .ARLEN(m_axi_Dout_ARLEN),
    .ARSIZE(m_axi_Dout_ARSIZE),
    .ARBURST(m_axi_Dout_ARBURST),
    .ARLOCK(m_axi_Dout_ARLOCK),
    .ARCACHE(m_axi_Dout_ARCACHE),
    .ARPROT(m_axi_Dout_ARPROT),
    .ARQOS(m_axi_Dout_ARQOS),
    .ARREGION(m_axi_Dout_ARREGION),
    .ARUSER(m_axi_Dout_ARUSER),
    .RVALID(m_axi_Dout_RVALID),
    .RREADY(m_axi_Dout_RREADY),
    .RDATA(m_axi_Dout_RDATA),
    .RLAST(m_axi_Dout_RLAST),
    .RID(m_axi_Dout_RID),
    .RUSER(m_axi_Dout_RUSER),
    .RRESP(m_axi_Dout_RRESP),
    .BVALID(m_axi_Dout_BVALID),
    .BREADY(m_axi_Dout_BREADY),
    .BRESP(m_axi_Dout_BRESP),
    .BID(m_axi_Dout_BID),
    .BUSER(m_axi_Dout_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(Dout_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(Dout_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(Dout_RDATA),
    .I_RID(Dout_RID),
    .I_RUSER(Dout_RUSER),
    .I_RRESP(Dout_RRESP),
    .I_RLAST(Dout_RLAST),
    .I_AWVALID(Dout_AWVALID),
    .I_AWREADY(Dout_AWREADY),
    .I_AWADDR(Dout_addr_reg_849),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(Dout_WVALID),
    .I_WREADY(Dout_WREADY),
    .I_WDATA(Dout_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(Dout_BVALID),
    .I_BREADY(Dout_BREADY),
    .I_BRESP(Dout_BRESP),
    .I_BID(Dout_BID),
    .I_BUSER(Dout_BUSER)
);

uz_PI_Controller_sample_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_180_p0),
    .din1(grp_fu_180_p1),
    .opcode(grp_fu_180_opcode),
    .ce(grp_fu_180_ce),
    .dout(grp_fu_180_p2)
);

uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_186_p0),
    .din1(grp_fu_186_p1),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_214),
    .din1(grp_fu_190_p1),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_194_p0),
    .din1(grp_fu_194_p1),
    .ce(grp_fu_194_ce),
    .opcode(grp_fu_194_opcode),
    .dout(grp_fu_194_p2)
);

uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_199_p0),
    .din1(grp_fu_199_p1),
    .ce(grp_fu_199_ce),
    .opcode(grp_fu_199_opcode),
    .dout(grp_fu_199_p2)
);

uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_204_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_204_p2)
);

uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(output_5_reg_953),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_209_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Dout_addr_reg_849 <= sext_ln57_fu_353_p1;
        empty_reg_799 <= empty_fu_231_p1;
        ext_clamping_read_reg_784 <= ext_clamping;
        icmp_ln23_2_reg_824 <= icmp_ln23_2_fu_289_p2;
        icmp_ln23_3_reg_829 <= icmp_ln23_3_fu_295_p2;
        icmp_ln23_4_reg_834 <= icmp_ln23_4_fu_321_p2;
        icmp_ln23_5_reg_839 <= icmp_ln23_5_fu_327_p2;
        trunc_ln2_reg_814 <= {{self[127:96]}};
        trunc_ln47_reg_809 <= trunc_ln47_fu_245_p1;
        trunc_ln49_1_reg_819 <= {{self[159:128]}};
        trunc_ln5_reg_844 <= {{self[95:64]}};
        trunc_ln_reg_804 <= {{self[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        I_sum <= select_ln59_fu_771_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        P_sum_reg_865 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        and_ln23_1_reg_909 <= and_ln23_1_fu_460_p2;
        and_ln23_3_reg_915 <= and_ln23_3_fu_470_p2;
        bitcast_ln49_reg_901 <= bitcast_ln49_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        and_ln25_reg_921 <= and_ln25_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bitcast_ln49_1_reg_927 <= bitcast_ln49_1_fu_481_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fcmp_ln35_reg_891 <= grp_fu_199_p2;
        fcmp_ln35_reg_896 <= grp_fu_204_p2;
        tmp_7_reg_886 <= grp_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        icmp_ln27_1_reg_989 <= icmp_ln27_1_fu_700_p2;
        icmp_ln27_2_reg_994 <= icmp_ln27_2_fu_706_p2;
        icmp_ln27_3_reg_999 <= icmp_ln27_3_fu_712_p2;
        icmp_ln27_reg_984 <= icmp_ln27_fu_694_p2;
        tmp_11_reg_979 <= grp_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        or_ln35_1_reg_875 <= or_ln35_1_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        or_ln35_reg_962 <= or_ln35_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_4_reg_938 <= output_4_fu_504_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        output_5_reg_953 <= output_5_fu_528_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_214 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        reg_223 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_reg_799 == 1'd0) & (1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state24))) begin
        select_ln50_reg_1004 <= select_ln50_fu_763_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_reg_799 == 1'd0) & (1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state19))) begin
        tmp_2_reg_943 <= grp_fu_194_p2;
        tmp_5_reg_948 <= grp_fu_199_p2;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2))) begin
        Dout_AWVALID = 1'b1;
    end else begin
        Dout_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state24))) begin
        Dout_BREADY = 1'b1;
    end else begin
        Dout_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state19))) begin
        Dout_WVALID = 1'b1;
    end else begin
        Dout_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Dout_blk_n_AW = m_axi_Dout_AWREADY;
    end else begin
        Dout_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        Dout_blk_n_B = m_axi_Dout_BVALID;
    end else begin
        Dout_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        Dout_blk_n_W = m_axi_Dout_WREADY;
    end else begin
        Dout_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state19)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state17)))) begin
        grp_fu_180_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state25)))) begin
        grp_fu_180_opcode = 2'd0;
    end else begin
        grp_fu_180_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_180_p0 = reg_214;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_180_p0 = I_sum;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_180_p0 = referenceValue;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_180_p1 = select_ln50_reg_1004;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_180_p1 = select_ln25_fu_485_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_180_p1 = P_sum_reg_865;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_180_p1 = actualValue;
    end else begin
        grp_fu_180_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_186_p0 = reg_223;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_186_p0 = reg_214;
    end else begin
        grp_fu_186_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_186_p1 = bitcast_ln54_fu_412_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_186_p1 = bitcast_ln46_fu_363_p1;
    end else begin
        grp_fu_186_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state19)))) begin
        grp_fu_194_ce = 1'b1;
    end else begin
        grp_fu_194_ce = 1'b0;
    end
end

always @ (*) begin
    if (((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_194_opcode = 5'd1;
    end else if (((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_194_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_194_opcode = 5'd2;
    end else if ((((1'd0 == and_ln25_reg_921) & (1'b1 == ap_CS_fsm_state17)) | ((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_194_opcode = 5'd4;
    end else begin
        grp_fu_194_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_194_p0 = sign_fu_607_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_194_p0 = output_5_reg_953;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_194_p0 = reg_214;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_194_p0 = reg_223;
    end else begin
        grp_fu_194_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_194_p1 = sign_1_fu_649_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_194_p1 = bitcast_ln49_1_reg_927;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_194_p1 = bitcast_ln49_1_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_194_p1 = bitcast_ln49_fu_416_p1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_194_p1 = 32'd0;
    end else begin
        grp_fu_194_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state19)))) begin
        grp_fu_199_ce = 1'b1;
    end else begin
        grp_fu_199_ce = 1'b0;
    end
end

always @ (*) begin
    if (((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_199_opcode = 5'd5;
    end else if ((((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state22)) | ((empty_reg_799 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_199_opcode = 5'd8;
    end else begin
        grp_fu_199_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_199_p0 = output_5_reg_953;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_199_p0 = reg_214;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_199_p0 = reg_223;
    end else begin
        grp_fu_199_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_199_p1 = bitcast_ln49_reg_901;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_199_p1 = 32'd0;
    end else begin
        grp_fu_199_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_204_p0 = output_5_reg_953;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_204_p0 = reg_223;
    end else begin
        grp_fu_204_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Dout_AWREADY) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == Dout_WREADY) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == Dout_BVALID) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Dout_WDATA = output_4_reg_938;

assign and_ln23_1_fu_460_p2 = (or_ln23_fu_450_p2 & or_ln23_1_fu_456_p2);

assign and_ln23_2_fu_514_p2 = (tmp_2_reg_943 & and_ln23_1_reg_909);

assign and_ln23_3_fu_470_p2 = (or_ln23_fu_450_p2 & or_ln23_2_fu_466_p2);

assign and_ln23_4_fu_518_p2 = (tmp_5_reg_948 & and_ln23_3_reg_915);

assign and_ln23_fu_522_p2 = (and_ln23_4_fu_518_p2 & and_ln23_2_fu_514_p2);

assign and_ln25_fu_476_p2 = (grp_fu_194_p2 & and_ln23_3_reg_915);

assign and_ln27_1_fu_739_p2 = (or_ln27_fu_731_p2 & or_ln27_1_fu_735_p2);

assign and_ln27_2_fu_745_p2 = (grp_fu_194_p2 & and_ln27_1_fu_739_p2);

assign and_ln27_fu_721_p2 = (tmp_11_reg_979 & or_ln35_reg_962);

assign and_ln35_1_fu_602_p2 = (or_ln35_reg_962 & and_ln35_fu_596_p2);

assign and_ln35_2_fu_616_p2 = (tmp_7_reg_886 & or_ln35_1_reg_875);

assign and_ln35_3_fu_644_p2 = (or_ln35_1_reg_875 & and_ln35_fu_638_p2);

assign and_ln35_fu_571_p2 = (or_ln35_reg_962 & grp_fu_194_p2);

assign and_ln35_fu_596_p2 = (xor_ln35_fu_590_p2 & xor_ln35_fu_584_p2);

assign and_ln35_fu_638_p2 = (xor_ln35_fu_633_p2 & xor_ln35_fu_628_p2);

assign and_ln49_fu_492_p2 = (grp_fu_194_p2 & and_ln23_1_reg_909);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln23_fu_420_p1 = reg_214;

assign bitcast_ln27_1_fu_676_p1 = sign_1_fu_649_p3;

assign bitcast_ln27_fu_658_p1 = sign_fu_607_p3;

assign bitcast_ln35_1_fu_376_p1 = reg_223;

assign bitcast_ln35_fu_536_p1 = output_5_reg_953;

assign bitcast_ln46_fu_363_p1 = trunc_ln_reg_804;

assign bitcast_ln49_1_fu_481_p1 = trunc_ln49_1_reg_819;

assign bitcast_ln49_fu_416_p1 = trunc_ln2_reg_814;

assign bitcast_ln54_fu_412_p1 = trunc_ln5_reg_844;

assign clamping_active_fu_757_p2 = (output_6_fu_751_p2 | empty_20_fu_718_p1);

assign empty_20_fu_718_p1 = ext_clamping_read_reg_784[0:0];

assign empty_fu_231_p1 = I_rst[0:0];

assign grp_fu_190_p1 = trunc_ln47_reg_809;

assign icmp_ln23_1_fu_444_p2 = ((trunc_ln23_fu_434_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_289_p2 = ((tmp_1_fu_269_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_3_fu_295_p2 = ((trunc_ln23_1_fu_279_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_4_fu_321_p2 = ((tmp_4_fu_301_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_5_fu_327_p2 = ((trunc_ln23_3_fu_311_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_438_p2 = ((tmp_fu_424_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_1_fu_700_p2 = ((trunc_ln27_fu_672_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_2_fu_706_p2 = ((tmp_13_fu_680_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_3_fu_712_p2 = ((trunc_ln27_1_fu_690_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_694_p2 = ((tmp_12_fu_662_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_559_p2 = ((trunc_ln35_fu_549_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_2_fu_394_p2 = ((tmp_6_fu_380_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln35_3_fu_400_p2 = ((trunc_ln35_1_fu_390_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_553_p2 = ((tmp_9_fu_539_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln23_1_fu_456_p2 = (icmp_ln23_3_reg_829 | icmp_ln23_2_reg_824);

assign or_ln23_2_fu_466_p2 = (icmp_ln23_5_reg_839 | icmp_ln23_4_reg_834);

assign or_ln23_fu_450_p2 = (icmp_ln23_fu_438_p2 | icmp_ln23_1_fu_444_p2);

assign or_ln27_1_fu_735_p2 = (icmp_ln27_3_reg_999 | icmp_ln27_2_reg_994);

assign or_ln27_fu_731_p2 = (icmp_ln27_reg_984 | icmp_ln27_1_reg_989);

assign or_ln35_1_fu_406_p2 = (icmp_ln35_3_fu_400_p2 | icmp_ln35_2_fu_394_p2);

assign or_ln35_fu_565_p2 = (icmp_ln35_fu_553_p2 | icmp_ln35_1_fu_559_p2);

assign output_3_fu_497_p3 = ((and_ln49_fu_492_p2[0:0] === 1'b1) ? bitcast_ln49_1_reg_927 : reg_214);

assign output_4_fu_504_p3 = ((and_ln25_reg_921[0:0] === 1'b1) ? bitcast_ln49_reg_901 : output_3_fu_497_p3);

assign output_5_fu_528_p3 = ((and_ln23_fu_522_p2[0:0] === 1'b1) ? 32'd0 : grp_fu_180_p2);

assign output_6_fu_751_p2 = (xor_ln27_fu_725_p2 & and_ln27_2_fu_745_p2);

assign select_ln25_fu_485_p3 = ((and_ln25_reg_921[0:0] === 1'b1) ? bitcast_ln49_reg_901 : bitcast_ln49_1_fu_481_p1);

assign select_ln35_2_fu_620_p3 = ((and_ln35_2_fu_616_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln35_fu_576_p3 = ((and_ln35_fu_571_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign select_ln50_fu_763_p3 = ((clamping_active_fu_757_p2[0:0] === 1'b1) ? 32'd0 : reg_223);

assign select_ln59_fu_771_p3 = ((empty_reg_799[0:0] === 1'b1) ? 32'd0 : grp_fu_180_p2);

assign sext_ln57_fu_353_p1 = $signed(trunc_ln6_fu_343_p4);

assign sign_1_fu_649_p3 = ((and_ln35_3_fu_644_p2[0:0] === 1'b1) ? select_ln35_2_fu_620_p3 : 32'd0);

assign sign_fu_607_p3 = ((and_ln35_1_fu_602_p2[0:0] === 1'b1) ? select_ln35_fu_576_p3 : 32'd0);

assign tmp_12_fu_662_p4 = {{bitcast_ln27_fu_658_p1[30:23]}};

assign tmp_13_fu_680_p4 = {{bitcast_ln27_1_fu_676_p1[30:23]}};

assign tmp_1_fu_269_p4 = {{self[158:151]}};

assign tmp_4_fu_301_p4 = {{self[126:119]}};

assign tmp_6_fu_380_p4 = {{bitcast_ln35_1_fu_376_p1[30:23]}};

assign tmp_9_fu_539_p4 = {{bitcast_ln35_fu_536_p1[30:23]}};

assign tmp_fu_424_p4 = {{bitcast_ln23_fu_420_p1[30:23]}};

assign trunc_ln23_1_fu_279_p4 = {{self[150:128]}};

assign trunc_ln23_3_fu_311_p4 = {{self[118:96]}};

assign trunc_ln23_fu_434_p1 = bitcast_ln23_fu_420_p1[22:0];

assign trunc_ln27_1_fu_690_p1 = bitcast_ln27_1_fu_676_p1[22:0];

assign trunc_ln27_fu_672_p1 = bitcast_ln27_fu_658_p1[22:0];

assign trunc_ln35_1_fu_390_p1 = bitcast_ln35_1_fu_376_p1[22:0];

assign trunc_ln35_fu_549_p1 = bitcast_ln35_fu_536_p1[22:0];

assign trunc_ln47_fu_245_p1 = self[31:0];

assign trunc_ln6_fu_343_p4 = {{output_r[63:2]}};

assign xor_ln27_fu_725_p2 = (1'd1 ^ and_ln27_fu_721_p2);

assign xor_ln35_fu_584_p2 = (grp_fu_199_p2 ^ 1'd1);

assign xor_ln35_fu_590_p2 = (grp_fu_204_p2 ^ 1'd1);

assign xor_ln35_fu_628_p2 = (fcmp_ln35_reg_891 ^ 1'd1);

assign xor_ln35_fu_633_p2 = (fcmp_ln35_reg_896 ^ 1'd1);

endmodule //uz_PI_Controller_sample
