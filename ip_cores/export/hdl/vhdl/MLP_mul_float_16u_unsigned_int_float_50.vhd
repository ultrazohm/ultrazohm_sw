-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_mul_float_16u_unsigned_int_float_50 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_x_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    p_x_empty_n : IN STD_LOGIC;
    p_x_read : OUT STD_LOGIC;
    p_y_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    p_y_empty_n : IN STD_LOGIC;
    p_y_read : OUT STD_LOGIC;
    p_res_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    p_res_full_n : IN STD_LOGIC;
    p_res_write : OUT STD_LOGIC;
    p_n : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_full_n : IN STD_LOGIC;
    p_n_out_write : OUT STD_LOGIC );
end;


architecture behav of MLP_mul_float_16u_unsigned_int_float_50 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal p_x_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln50_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_y_blk_n : STD_LOGIC;
    signal p_res_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln50_reg_839_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_n_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_155 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_fu_248_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_reg_834 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln50_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln50_reg_839_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_839_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_259_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_230_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_fu_248_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_fu_274_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_i_i_fu_289_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_i_i_fu_304_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_i_i_fu_319_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_i_i_fu_334_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_i_i_fu_349_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_i_i_fu_364_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_i_i_fu_379_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_i_i_fu_394_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_i_i_fu_409_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_10_i_i_fu_424_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_11_i_i_fu_439_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_i_i_fu_454_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_13_i_i_fu_469_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_14_i_i_fu_484_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_1_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i3_i_fu_508_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_i5_i_fu_523_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_i7_i_fu_538_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_i9_i_fu_553_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_i11_i_fu_568_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_i13_i_fu_583_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_i15_i_fu_598_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_i17_i_fu_613_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_i19_i_fu_628_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_i21_i_fu_643_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_10_i23_i_fu_658_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_11_i25_i_fu_673_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_i27_i_fu_688_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_13_i29_i_fu_703_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_14_i31_i_fu_718_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_60_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_59_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_58_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_57_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_56_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_55_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_54_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_53_fu_765_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_52_fu_761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_51_fu_757_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_50_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_49_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_48_fu_745_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_47_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_46_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_fu_733_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_ce : STD_LOGIC;
    signal grp_fu_170_ce : STD_LOGIC;
    signal grp_fu_174_ce : STD_LOGIC;
    signal grp_fu_178_ce : STD_LOGIC;
    signal grp_fu_182_ce : STD_LOGIC;
    signal grp_fu_186_ce : STD_LOGIC;
    signal grp_fu_190_ce : STD_LOGIC;
    signal grp_fu_194_ce : STD_LOGIC;
    signal grp_fu_198_ce : STD_LOGIC;
    signal grp_fu_202_ce : STD_LOGIC;
    signal grp_fu_206_ce : STD_LOGIC;
    signal grp_fu_210_ce : STD_LOGIC;
    signal grp_fu_214_ce : STD_LOGIC;
    signal grp_fu_218_ce : STD_LOGIC;
    signal grp_fu_222_ce : STD_LOGIC;
    signal grp_fu_226_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_248_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_fu_248_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component MLP_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_mul_28ns_32ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;



begin
    fmul_32ns_32ns_32_4_max_dsp_1_U235 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_166_p0,
        din1 => grp_fu_166_p1,
        ce => grp_fu_166_ce,
        dout => grp_fu_166_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U236 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_170_p0,
        din1 => grp_fu_170_p1,
        ce => grp_fu_170_ce,
        dout => grp_fu_170_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U237 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_174_p0,
        din1 => grp_fu_174_p1,
        ce => grp_fu_174_ce,
        dout => grp_fu_174_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U238 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        ce => grp_fu_178_ce,
        dout => grp_fu_178_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U239 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_182_p0,
        din1 => grp_fu_182_p1,
        ce => grp_fu_182_ce,
        dout => grp_fu_182_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U240 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U241 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_190_p0,
        din1 => grp_fu_190_p1,
        ce => grp_fu_190_ce,
        dout => grp_fu_190_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U242 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        din1 => grp_fu_194_p1,
        ce => grp_fu_194_ce,
        dout => grp_fu_194_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U243 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        ce => grp_fu_198_ce,
        dout => grp_fu_198_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U244 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        ce => grp_fu_202_ce,
        dout => grp_fu_202_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U245 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_206_p0,
        din1 => grp_fu_206_p1,
        ce => grp_fu_206_ce,
        dout => grp_fu_206_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U246 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_210_p0,
        din1 => grp_fu_210_p1,
        ce => grp_fu_210_ce,
        dout => grp_fu_210_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U247 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        ce => grp_fu_214_ce,
        dout => grp_fu_214_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U248 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_218_p0,
        din1 => grp_fu_218_p1,
        ce => grp_fu_218_ce,
        dout => grp_fu_218_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U249 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p0,
        din1 => grp_fu_222_p1,
        ce => grp_fu_222_ce,
        dout => grp_fu_222_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U250 : component MLP_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_226_p0,
        din1 => grp_fu_226_p1,
        ce => grp_fu_226_ce,
        dout => grp_fu_226_p2);

    mul_28ns_32ns_60_1_1_U251 : component MLP_mul_28ns_32ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 32,
        dout_WIDTH => 60)
    port map (
        din0 => bound_fu_248_p0,
        din1 => bound_fu_248_p1,
        dout => bound_fu_248_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((real_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_254_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_155 <= add_ln50_fu_259_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_155 <= ap_const_lv60_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_834 <= bound_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln50_reg_839 <= icmp_ln50_fu_254_p2;
                icmp_ln50_reg_839_pp0_iter1_reg <= icmp_ln50_reg_839;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln50_reg_839_pp0_iter2_reg <= icmp_ln50_reg_839_pp0_iter1_reg;
                icmp_ln50_reg_839_pp0_iter3_reg <= icmp_ln50_reg_839_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_n_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln50_fu_254_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln50_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((icmp_ln50_fu_254_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln50_fu_259_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_155) + unsigned(ap_const_lv60_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_x_empty_n, p_y_empty_n, p_res_full_n, ap_enable_reg_pp0_iter1, icmp_ln50_reg_839, ap_enable_reg_pp0_iter4, icmp_ln50_reg_839_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln50_reg_839_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (p_res_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln50_reg_839 = ap_const_lv1_0) and (p_x_empty_n = ap_const_logic_0)) or ((icmp_ln50_reg_839 = ap_const_lv1_0) and (p_y_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_x_empty_n, p_y_empty_n, p_res_full_n, ap_enable_reg_pp0_iter1, icmp_ln50_reg_839, ap_enable_reg_pp0_iter4, icmp_ln50_reg_839_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln50_reg_839_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (p_res_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln50_reg_839 = ap_const_lv1_0) and (p_x_empty_n = ap_const_logic_0)) or ((icmp_ln50_reg_839 = ap_const_lv1_0) and (p_y_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_x_empty_n, p_y_empty_n, p_res_full_n, ap_enable_reg_pp0_iter1, icmp_ln50_reg_839, ap_enable_reg_pp0_iter4, icmp_ln50_reg_839_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln50_reg_839_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (p_res_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln50_reg_839 = ap_const_lv1_0) and (p_x_empty_n = ap_const_logic_0)) or ((icmp_ln50_reg_839 = ap_const_lv1_0) and (p_y_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, p_n_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_x_empty_n, p_y_empty_n, icmp_ln50_reg_839)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln50_reg_839 = ap_const_lv1_0) and (p_x_empty_n = ap_const_logic_0)) or ((icmp_ln50_reg_839 = ap_const_lv1_0) and (p_y_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(p_res_full_n, icmp_ln50_reg_839_pp0_iter3_reg)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((icmp_ln50_reg_839_pp0_iter3_reg = ap_const_lv1_0) and (p_res_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln50_fu_254_p2)
    begin
        if ((icmp_ln50_fu_254_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_248_p0 <= bound_fu_248_p00(28 - 1 downto 0);
    bound_fu_248_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_230_p4),60));
    bound_fu_248_p1 <= bound_fu_248_p10(32 - 1 downto 0);
    bound_fu_248_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_n),60));

    grp_fu_166_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_166_ce <= ap_const_logic_1;
        else 
            grp_fu_166_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_166_p0 <= trunc_ln674_fu_265_p1;
    grp_fu_166_p1 <= trunc_ln674_1_fu_499_p1;

    grp_fu_170_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_170_ce <= ap_const_logic_1;
        else 
            grp_fu_170_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_170_p0 <= p_Result_i_i_fu_274_p4;
    grp_fu_170_p1 <= p_Result_i3_i_fu_508_p4;

    grp_fu_174_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_174_ce <= ap_const_logic_1;
        else 
            grp_fu_174_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_174_p0 <= p_Result_1_i_i_fu_289_p4;
    grp_fu_174_p1 <= p_Result_1_i5_i_fu_523_p4;

    grp_fu_178_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_178_ce <= ap_const_logic_1;
        else 
            grp_fu_178_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_178_p0 <= p_Result_2_i_i_fu_304_p4;
    grp_fu_178_p1 <= p_Result_2_i7_i_fu_538_p4;

    grp_fu_182_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_182_ce <= ap_const_logic_1;
        else 
            grp_fu_182_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_182_p0 <= p_Result_3_i_i_fu_319_p4;
    grp_fu_182_p1 <= p_Result_3_i9_i_fu_553_p4;

    grp_fu_186_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_186_ce <= ap_const_logic_1;
        else 
            grp_fu_186_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_186_p0 <= p_Result_4_i_i_fu_334_p4;
    grp_fu_186_p1 <= p_Result_4_i11_i_fu_568_p4;

    grp_fu_190_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_190_ce <= ap_const_logic_1;
        else 
            grp_fu_190_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_190_p0 <= p_Result_5_i_i_fu_349_p4;
    grp_fu_190_p1 <= p_Result_5_i13_i_fu_583_p4;

    grp_fu_194_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_194_ce <= ap_const_logic_1;
        else 
            grp_fu_194_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_194_p0 <= p_Result_6_i_i_fu_364_p4;
    grp_fu_194_p1 <= p_Result_6_i15_i_fu_598_p4;

    grp_fu_198_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_198_ce <= ap_const_logic_1;
        else 
            grp_fu_198_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_198_p0 <= p_Result_7_i_i_fu_379_p4;
    grp_fu_198_p1 <= p_Result_7_i17_i_fu_613_p4;

    grp_fu_202_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_202_ce <= ap_const_logic_1;
        else 
            grp_fu_202_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_202_p0 <= p_Result_8_i_i_fu_394_p4;
    grp_fu_202_p1 <= p_Result_8_i19_i_fu_628_p4;

    grp_fu_206_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_206_ce <= ap_const_logic_1;
        else 
            grp_fu_206_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_206_p0 <= p_Result_9_i_i_fu_409_p4;
    grp_fu_206_p1 <= p_Result_9_i21_i_fu_643_p4;

    grp_fu_210_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_210_ce <= ap_const_logic_1;
        else 
            grp_fu_210_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_210_p0 <= p_Result_10_i_i_fu_424_p4;
    grp_fu_210_p1 <= p_Result_10_i23_i_fu_658_p4;

    grp_fu_214_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_214_ce <= ap_const_logic_1;
        else 
            grp_fu_214_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_214_p0 <= p_Result_11_i_i_fu_439_p4;
    grp_fu_214_p1 <= p_Result_11_i25_i_fu_673_p4;

    grp_fu_218_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_218_ce <= ap_const_logic_1;
        else 
            grp_fu_218_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_218_p0 <= p_Result_12_i_i_fu_454_p4;
    grp_fu_218_p1 <= p_Result_12_i27_i_fu_688_p4;

    grp_fu_222_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_222_ce <= ap_const_logic_1;
        else 
            grp_fu_222_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_222_p0 <= p_Result_13_i_i_fu_469_p4;
    grp_fu_222_p1 <= p_Result_13_i29_i_fu_703_p4;

    grp_fu_226_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_226_ce <= ap_const_logic_1;
        else 
            grp_fu_226_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_226_p0 <= p_Result_14_i_i_fu_484_p4;
    grp_fu_226_p1 <= p_Result_14_i31_i_fu_718_p4;
    icmp_ln50_fu_254_p2 <= "1" when (indvar_flatten_reg_155 = bound_reg_834) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    l_v_46_fu_737_p1 <= grp_fu_170_p2;
    l_v_47_fu_741_p1 <= grp_fu_174_p2;
    l_v_48_fu_745_p1 <= grp_fu_178_p2;
    l_v_49_fu_749_p1 <= grp_fu_182_p2;
    l_v_50_fu_753_p1 <= grp_fu_186_p2;
    l_v_51_fu_757_p1 <= grp_fu_190_p2;
    l_v_52_fu_761_p1 <= grp_fu_194_p2;
    l_v_53_fu_765_p1 <= grp_fu_198_p2;
    l_v_54_fu_769_p1 <= grp_fu_202_p2;
    l_v_55_fu_773_p1 <= grp_fu_206_p2;
    l_v_56_fu_777_p1 <= grp_fu_210_p2;
    l_v_57_fu_781_p1 <= grp_fu_214_p2;
    l_v_58_fu_785_p1 <= grp_fu_218_p2;
    l_v_59_fu_789_p1 <= grp_fu_222_p2;
    l_v_60_fu_793_p1 <= grp_fu_226_p2;
    l_v_fu_733_p1 <= grp_fu_166_p2;
    p_Result_10_i23_i_fu_658_p4 <= p_y_dout(383 downto 352);
    p_Result_10_i_i_fu_424_p4 <= p_x_dout(383 downto 352);
    p_Result_11_i25_i_fu_673_p4 <= p_y_dout(415 downto 384);
    p_Result_11_i_i_fu_439_p4 <= p_x_dout(415 downto 384);
    p_Result_12_i27_i_fu_688_p4 <= p_y_dout(447 downto 416);
    p_Result_12_i_i_fu_454_p4 <= p_x_dout(447 downto 416);
    p_Result_13_i29_i_fu_703_p4 <= p_y_dout(479 downto 448);
    p_Result_13_i_i_fu_469_p4 <= p_x_dout(479 downto 448);
    p_Result_14_i31_i_fu_718_p4 <= p_y_dout(511 downto 480);
    p_Result_14_i_i_fu_484_p4 <= p_x_dout(511 downto 480);
    p_Result_1_i5_i_fu_523_p4 <= p_y_dout(95 downto 64);
    p_Result_1_i_i_fu_289_p4 <= p_x_dout(95 downto 64);
    p_Result_2_i7_i_fu_538_p4 <= p_y_dout(127 downto 96);
    p_Result_2_i_i_fu_304_p4 <= p_x_dout(127 downto 96);
    p_Result_3_i9_i_fu_553_p4 <= p_y_dout(159 downto 128);
    p_Result_3_i_i_fu_319_p4 <= p_x_dout(159 downto 128);
    p_Result_4_i11_i_fu_568_p4 <= p_y_dout(191 downto 160);
    p_Result_4_i_i_fu_334_p4 <= p_x_dout(191 downto 160);
    p_Result_5_i13_i_fu_583_p4 <= p_y_dout(223 downto 192);
    p_Result_5_i_i_fu_349_p4 <= p_x_dout(223 downto 192);
    p_Result_6_i15_i_fu_598_p4 <= p_y_dout(255 downto 224);
    p_Result_6_i_i_fu_364_p4 <= p_x_dout(255 downto 224);
    p_Result_7_i17_i_fu_613_p4 <= p_y_dout(287 downto 256);
    p_Result_7_i_i_fu_379_p4 <= p_x_dout(287 downto 256);
    p_Result_8_i19_i_fu_628_p4 <= p_y_dout(319 downto 288);
    p_Result_8_i_i_fu_394_p4 <= p_x_dout(319 downto 288);
    p_Result_9_i21_i_fu_643_p4 <= p_y_dout(351 downto 320);
    p_Result_9_i_i_fu_409_p4 <= p_x_dout(351 downto 320);
    p_Result_i3_i_fu_508_p4 <= p_y_dout(63 downto 32);
    p_Result_i_i_fu_274_p4 <= p_x_dout(63 downto 32);

    p_n_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_blk_n <= p_n_out_full_n;
        else 
            p_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_n_out_din <= p_n;

    p_n_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_write <= ap_const_logic_1;
        else 
            p_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_res_blk_n_assign_proc : process(p_res_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln50_reg_839_pp0_iter3_reg)
    begin
        if (((icmp_ln50_reg_839_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_res_blk_n <= p_res_full_n;
        else 
            p_res_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_res_din <= (((((((((((((((l_v_60_fu_793_p1 & l_v_59_fu_789_p1) & l_v_58_fu_785_p1) & l_v_57_fu_781_p1) & l_v_56_fu_777_p1) & l_v_55_fu_773_p1) & l_v_54_fu_769_p1) & l_v_53_fu_765_p1) & l_v_52_fu_761_p1) & l_v_51_fu_757_p1) & l_v_50_fu_753_p1) & l_v_49_fu_749_p1) & l_v_48_fu_745_p1) & l_v_47_fu_741_p1) & l_v_46_fu_737_p1) & l_v_fu_733_p1);

    p_res_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln50_reg_839_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_reg_839_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_res_write <= ap_const_logic_1;
        else 
            p_res_write <= ap_const_logic_0;
        end if; 
    end process;


    p_x_blk_n_assign_proc : process(p_x_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln50_reg_839)
    begin
        if (((icmp_ln50_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_x_blk_n <= p_x_empty_n;
        else 
            p_x_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_x_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln50_reg_839, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_x_read <= ap_const_logic_1;
        else 
            p_x_read <= ap_const_logic_0;
        end if; 
    end process;


    p_y_blk_n_assign_proc : process(p_y_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln50_reg_839)
    begin
        if (((icmp_ln50_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_y_blk_n <= p_y_empty_n;
        else 
            p_y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_y_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln50_reg_839, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_y_read <= ap_const_logic_1;
        else 
            p_y_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln674_1_fu_499_p1 <= p_y_dout(32 - 1 downto 0);
    trunc_ln674_fu_265_p1 <= p_x_dout(32 - 1 downto 0);
    trunc_ln_fu_230_p4 <= p_n(31 downto 4);
end behav;
