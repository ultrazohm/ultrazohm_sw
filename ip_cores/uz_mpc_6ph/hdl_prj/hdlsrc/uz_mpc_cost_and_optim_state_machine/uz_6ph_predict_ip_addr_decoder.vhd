-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_mpc_cost_and_optim_state_machine\uz_6ph_predict_ip_addr_decoder.vhd
-- Created: 2022-10-04 14:19:18
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_6ph_predict_ip_addr_decoder
-- Source Path: uz_6ph_predict_ip/uz_6ph_predict_ip_axi_lite/uz_6ph_predict_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_6ph_predict_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_id_pred_pu_AXI               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        read_iq_pred_pu_AXI               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        read_ix_pred_pu_AXI               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        read_iy_pred_pu_AXI               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En24
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_Rs_over_ZB_AXI              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_Ts_times_ZB_over_Ld_AXI     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_Ts_times_ZB_over_Lq_AXI     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_Ts_times_ZB_over_Lx_AXI     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_Ts_times_ZB_over_Ly_AXI     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_Ld_over_LB_AXI              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_Lq_over_LB_AXI              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_psi_pm_over_psiB_AXI        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_polepairs_AXI               :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_6ph_predict_ip_addr_decoder;


ARCHITECTURE rtl OF uz_6ph_predict_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_id_pred_pu_AXI_signed       : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL read_iq_pred_pu_AXI_signed       : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL read_ix_pred_pu_AXI_signed       : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL read_iy_pred_pu_AXI_signed       : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL decode_sel_iy_pred_pu_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_ix_pred_pu_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_iq_pred_pu_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_id_pred_pu_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_id_pred_pu_AXI          : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL data_slice_id_pred_pu_AXI_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_id_pred_pu_AXI_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_iq_pred_pu_AXI          : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL data_slice_iq_pred_pu_AXI_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_iq_pred_pu_AXI_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ix_pred_pu_AXI          : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL data_slice_ix_pred_pu_AXI_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ix_pred_pu_AXI_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_iy_pred_pu_AXI          : signed(26 DOWNTO 0);  -- sfix27_En24
  SIGNAL data_slice_iy_pred_pu_AXI_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_iy_pred_pu_AXI_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_Rs_over_ZB_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL reg_enb_Rs_over_ZB_AXI_1_1       : std_logic;  -- ufix1
  SIGNAL data_in_Rs_over_ZB_AXI           : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_Rs_over_ZB_AXI_1_1      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL decode_sel_Ts_times_ZB_over_Ld_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Ts_times_ZB_over_Ld_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Ts_times_ZB_over_Ld_AXI  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_Ts_times_ZB_over_Ld_AXI_1_1 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL decode_sel_Ts_times_ZB_over_Lq_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Ts_times_ZB_over_Lq_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Ts_times_ZB_over_Lq_AXI  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_Ts_times_ZB_over_Lq_AXI_1_1 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL decode_sel_Ts_times_ZB_over_Lx_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Ts_times_ZB_over_Lx_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Ts_times_ZB_over_Lx_AXI  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_Ts_times_ZB_over_Lx_AXI_1_1 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL decode_sel_Ts_times_ZB_over_Ly_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Ts_times_ZB_over_Ly_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Ts_times_ZB_over_Ly_AXI  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_Ts_times_ZB_over_Ly_AXI_1_1 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL decode_sel_Ld_over_LB_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL reg_enb_Ld_over_LB_AXI_1_1       : std_logic;  -- ufix1
  SIGNAL data_in_Ld_over_LB_AXI           : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_Ld_over_LB_AXI_1_1      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL decode_sel_Lq_over_LB_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL reg_enb_Lq_over_LB_AXI_1_1       : std_logic;  -- ufix1
  SIGNAL data_in_Lq_over_LB_AXI           : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_Lq_over_LB_AXI_1_1      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL decode_sel_psi_pm_over_psiB_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_psi_pm_over_psiB_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_psi_pm_over_psiB_AXI     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_psi_pm_over_psiB_AXI_1_1 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL decode_sel_polepairs_AXI_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_polepairs_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_polepairs_AXI_1_1       : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  read_id_pred_pu_AXI_signed <= signed(read_id_pred_pu_AXI);

  read_iq_pred_pu_AXI_signed <= signed(read_iq_pred_pu_AXI);

  read_ix_pred_pu_AXI_signed <= signed(read_ix_pred_pu_AXI);

  read_iy_pred_pu_AXI_signed <= signed(read_iy_pred_pu_AXI);

  
  decode_sel_iy_pred_pu_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  
  decode_sel_ix_pred_pu_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  
  decode_sel_iq_pred_pu_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  
  decode_sel_id_pred_pu_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_id_pred_pu_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_id_pred_pu_AXI <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        read_reg_id_pred_pu_AXI <= read_id_pred_pu_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_id_pred_pu_AXI_process;


  data_slice_id_pred_pu_AXI_1 <= unsigned(resize(read_reg_id_pred_pu_AXI, 32));

  
  decode_rd_id_pred_pu_AXI_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_id_pred_pu_AXI_1_1 = '0' ELSE
      data_slice_id_pred_pu_AXI_1;

  reg_iq_pred_pu_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_iq_pred_pu_AXI <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        read_reg_iq_pred_pu_AXI <= read_iq_pred_pu_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_iq_pred_pu_AXI_process;


  data_slice_iq_pred_pu_AXI_1 <= unsigned(resize(read_reg_iq_pred_pu_AXI, 32));

  
  decode_rd_iq_pred_pu_AXI_1_1 <= decode_rd_id_pred_pu_AXI_1_1 WHEN decode_sel_iq_pred_pu_AXI_1_1 = '0' ELSE
      data_slice_iq_pred_pu_AXI_1;

  reg_ix_pred_pu_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ix_pred_pu_AXI <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        read_reg_ix_pred_pu_AXI <= read_ix_pred_pu_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_ix_pred_pu_AXI_process;


  data_slice_ix_pred_pu_AXI_1 <= unsigned(resize(read_reg_ix_pred_pu_AXI, 32));

  
  decode_rd_ix_pred_pu_AXI_1_1 <= decode_rd_iq_pred_pu_AXI_1_1 WHEN decode_sel_ix_pred_pu_AXI_1_1 = '0' ELSE
      data_slice_ix_pred_pu_AXI_1;

  reg_iy_pred_pu_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_iy_pred_pu_AXI <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        read_reg_iy_pred_pu_AXI <= read_iy_pred_pu_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_iy_pred_pu_AXI_process;


  data_slice_iy_pred_pu_AXI_1 <= unsigned(resize(read_reg_iy_pred_pu_AXI, 32));

  
  decode_rd_iy_pred_pu_AXI_1_1 <= decode_rd_ix_pred_pu_AXI_1_1 WHEN decode_sel_iy_pred_pu_AXI_1_1 = '0' ELSE
      data_slice_iy_pred_pu_AXI_1;

  data_read <= std_logic_vector(decode_rd_iy_pred_pu_AXI_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

  
  decode_sel_Rs_over_ZB_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_Rs_over_ZB_AXI_1_1 <= decode_sel_Rs_over_ZB_AXI_1_1 AND wr_enb;

  data_in_Rs_over_ZB_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_Rs_over_ZB_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Rs_over_ZB_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_Rs_over_ZB_AXI_1_1 = '1' THEN
        data_reg_Rs_over_ZB_AXI_1_1 <= data_in_Rs_over_ZB_AXI;
      END IF;
    END IF;
  END PROCESS reg_Rs_over_ZB_AXI_1_1_process;


  write_Rs_over_ZB_AXI <= std_logic_vector(data_reg_Rs_over_ZB_AXI_1_1);

  
  decode_sel_Ts_times_ZB_over_Ld_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_Ts_times_ZB_over_Ld_AXI_1_1 <= decode_sel_Ts_times_ZB_over_Ld_AXI_1_1 AND wr_enb;

  data_in_Ts_times_ZB_over_Ld_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_Ts_times_ZB_over_Ld_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Ts_times_ZB_over_Ld_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_Ts_times_ZB_over_Ld_AXI_1_1 = '1' THEN
        data_reg_Ts_times_ZB_over_Ld_AXI_1_1 <= data_in_Ts_times_ZB_over_Ld_AXI;
      END IF;
    END IF;
  END PROCESS reg_Ts_times_ZB_over_Ld_AXI_1_1_process;


  write_Ts_times_ZB_over_Ld_AXI <= std_logic_vector(data_reg_Ts_times_ZB_over_Ld_AXI_1_1);

  
  decode_sel_Ts_times_ZB_over_Lq_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_Ts_times_ZB_over_Lq_AXI_1_1 <= decode_sel_Ts_times_ZB_over_Lq_AXI_1_1 AND wr_enb;

  data_in_Ts_times_ZB_over_Lq_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_Ts_times_ZB_over_Lq_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Ts_times_ZB_over_Lq_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_Ts_times_ZB_over_Lq_AXI_1_1 = '1' THEN
        data_reg_Ts_times_ZB_over_Lq_AXI_1_1 <= data_in_Ts_times_ZB_over_Lq_AXI;
      END IF;
    END IF;
  END PROCESS reg_Ts_times_ZB_over_Lq_AXI_1_1_process;


  write_Ts_times_ZB_over_Lq_AXI <= std_logic_vector(data_reg_Ts_times_ZB_over_Lq_AXI_1_1);

  
  decode_sel_Ts_times_ZB_over_Lx_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_Ts_times_ZB_over_Lx_AXI_1_1 <= decode_sel_Ts_times_ZB_over_Lx_AXI_1_1 AND wr_enb;

  data_in_Ts_times_ZB_over_Lx_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_Ts_times_ZB_over_Lx_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Ts_times_ZB_over_Lx_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_Ts_times_ZB_over_Lx_AXI_1_1 = '1' THEN
        data_reg_Ts_times_ZB_over_Lx_AXI_1_1 <= data_in_Ts_times_ZB_over_Lx_AXI;
      END IF;
    END IF;
  END PROCESS reg_Ts_times_ZB_over_Lx_AXI_1_1_process;


  write_Ts_times_ZB_over_Lx_AXI <= std_logic_vector(data_reg_Ts_times_ZB_over_Lx_AXI_1_1);

  
  decode_sel_Ts_times_ZB_over_Ly_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_Ts_times_ZB_over_Ly_AXI_1_1 <= decode_sel_Ts_times_ZB_over_Ly_AXI_1_1 AND wr_enb;

  data_in_Ts_times_ZB_over_Ly_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_Ts_times_ZB_over_Ly_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Ts_times_ZB_over_Ly_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_Ts_times_ZB_over_Ly_AXI_1_1 = '1' THEN
        data_reg_Ts_times_ZB_over_Ly_AXI_1_1 <= data_in_Ts_times_ZB_over_Ly_AXI;
      END IF;
    END IF;
  END PROCESS reg_Ts_times_ZB_over_Ly_AXI_1_1_process;


  write_Ts_times_ZB_over_Ly_AXI <= std_logic_vector(data_reg_Ts_times_ZB_over_Ly_AXI_1_1);

  
  decode_sel_Ld_over_LB_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  reg_enb_Ld_over_LB_AXI_1_1 <= decode_sel_Ld_over_LB_AXI_1_1 AND wr_enb;

  data_in_Ld_over_LB_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_Ld_over_LB_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Ld_over_LB_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_Ld_over_LB_AXI_1_1 = '1' THEN
        data_reg_Ld_over_LB_AXI_1_1 <= data_in_Ld_over_LB_AXI;
      END IF;
    END IF;
  END PROCESS reg_Ld_over_LB_AXI_1_1_process;


  write_Ld_over_LB_AXI <= std_logic_vector(data_reg_Ld_over_LB_AXI_1_1);

  
  decode_sel_Lq_over_LB_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  reg_enb_Lq_over_LB_AXI_1_1 <= decode_sel_Lq_over_LB_AXI_1_1 AND wr_enb;

  data_in_Lq_over_LB_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_Lq_over_LB_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Lq_over_LB_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_Lq_over_LB_AXI_1_1 = '1' THEN
        data_reg_Lq_over_LB_AXI_1_1 <= data_in_Lq_over_LB_AXI;
      END IF;
    END IF;
  END PROCESS reg_Lq_over_LB_AXI_1_1_process;


  write_Lq_over_LB_AXI <= std_logic_vector(data_reg_Lq_over_LB_AXI_1_1);

  
  decode_sel_psi_pm_over_psiB_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  reg_enb_psi_pm_over_psiB_AXI_1_1 <= decode_sel_psi_pm_over_psiB_AXI_1_1 AND wr_enb;

  data_in_psi_pm_over_psiB_AXI <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_psi_pm_over_psiB_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_psi_pm_over_psiB_AXI_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_psi_pm_over_psiB_AXI_1_1 = '1' THEN
        data_reg_psi_pm_over_psiB_AXI_1_1 <= data_in_psi_pm_over_psiB_AXI;
      END IF;
    END IF;
  END PROCESS reg_psi_pm_over_psiB_AXI_1_1_process;


  write_psi_pm_over_psiB_AXI <= std_logic_vector(data_reg_psi_pm_over_psiB_AXI_1_1);

  
  decode_sel_polepairs_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  reg_enb_polepairs_AXI_1_1 <= decode_sel_polepairs_AXI_1_1 AND wr_enb;

  reg_polepairs_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_polepairs_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_polepairs_AXI_1_1 = '1' THEN
        data_reg_polepairs_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_polepairs_AXI_1_1_process;


  write_polepairs_AXI <= std_logic_vector(data_reg_polepairs_AXI_1_1);

END rtl;

