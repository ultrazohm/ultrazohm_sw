-- -------------------------------------------------------------
-- 
-- File Name: C:\IPcoreTest\hdlsrc\PWMdutyFreqDetection\PWMdutyFreqDetection_src_HDL_DUT.vhd
-- Created: 2021-04-27 12:03:22
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- AXI_freq                      ce_out        1e-08
-- AXI_hightime                  ce_out        1e-08
-- AXI_lowtime                   ce_out        1e-08
-- AXI_dutycyc                   ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: PWMdutyFreqDetection_src_HDL_DUT
-- Source Path: PWMdutyFreqDetection/HDL_DUT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY PWMdutyFreqDetection_src_HDL_DUT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        PWMin                             :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        AXI_freq                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        AXI_hightime                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        AXI_lowtime                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        AXI_dutycyc                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
        );
END PWMdutyFreqDetection_src_HDL_DUT;


ARCHITECTURE rtl OF PWMdutyFreqDetection_src_HDL_DUT IS

  -- Component Declarations
  COMPONENT PWMdutyFreqDetection_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT PWMdutyFreqDetection_src_Detect_Fall_Nonpositive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT PWMdutyFreqDetection_src_HDL_Reciprocal
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : PWMdutyFreqDetection_src_Detect_Rise_Positive
    USE ENTITY work.PWMdutyFreqDetection_src_Detect_Rise_Positive(rtl);

  FOR ALL : PWMdutyFreqDetection_src_Detect_Fall_Nonpositive
    USE ENTITY work.PWMdutyFreqDetection_src_Detect_Fall_Nonpositive(rtl);

  FOR ALL : PWMdutyFreqDetection_src_HDL_Reciprocal
    USE ENTITY work.PWMdutyFreqDetection_src_HDL_Reciprocal(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL HDL_Counter_out1                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL Switch_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Detect_Fall_Nonpositive_out1     : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Switch1_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay3_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Sum_out1                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL HDL_Reciprocal_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL HDL_Reciprocal_out1_signed       : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Product_mul_temp                 : signed(63 DOWNTO 0);  -- sfix64_En30
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Gain_mul_temp                    : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL Gain_out1                        : signed(31 DOWNTO 0);  -- sfix32_En24

BEGIN
  u_Detect_Rise_Positive : PWMdutyFreqDetection_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => PWMin,
              Y => Detect_Rise_Positive_out1
              );

  u_Detect_Fall_Nonpositive : PWMdutyFreqDetection_src_Detect_Fall_Nonpositive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => PWMin,
              Y => Detect_Fall_Nonpositive_out1
              );

  u_HDL_Reciprocal : PWMdutyFreqDetection_src_HDL_Reciprocal
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              din => std_logic_vector(Switch_out1),  -- int32
              dout => HDL_Reciprocal_out1  -- sfix32_En30
              );

  enb <= clk_enable;

  -- Count limited, Signed Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2500000
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_signed(1, 32);
      ELSIF enb = '1' THEN
        IF Detect_Rise_Positive_out1 = '1' THEN 
          HDL_Counter_out1 <= to_signed(1, 32);
        ELSIF HDL_Counter_out1 >= to_signed(2500000, 32) THEN 
          HDL_Counter_out1 <= to_signed(1, 32);
        ELSE 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_signed(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN HDL_Counter_out1 = to_signed(1, 32) ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Compare_To_Constant1_out1 > '0' ELSE
      '0';

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_out1 <= Delay1_out1 WHEN switch_compare_1 = '0' ELSE
      Delay_out1;

  AXI_freq <= std_logic_vector(Switch_out1);

  
  Compare_To_Constant_out1 <= '1' WHEN Detect_Fall_Nonpositive_out1 = '1' ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch1_out1 <= Delay3_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay_out1;

  AXI_hightime <= std_logic_vector(Switch1_out1);

  Sum_out1 <= Switch_out1 - Switch1_out1;

  AXI_lowtime <= std_logic_vector(Sum_out1);

  HDL_Reciprocal_out1_signed <= signed(HDL_Reciprocal_out1);

  Product_mul_temp <= Switch1_out1 * HDL_Reciprocal_out1_signed;
  Product_out1 <= Product_mul_temp(31 DOWNTO 0);

  Gain_mul_temp <= to_signed(1677721600, 32) * Product_out1;
  Gain_out1 <= Gain_mul_temp(61 DOWNTO 30);

  AXI_dutycyc <= std_logic_vector(Gain_out1);

  ce_out <= clk_enable;

END rtl;

