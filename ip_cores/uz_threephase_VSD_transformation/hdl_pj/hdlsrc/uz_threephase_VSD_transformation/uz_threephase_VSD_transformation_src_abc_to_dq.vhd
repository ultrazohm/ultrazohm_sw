-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw_working\ip_cores\uz_threephase_VSD_transformation\hdl_pj\hdlsrc\uz_threephase_VSD_transformation\uz_threephase_VSD_transformation_src_abc_to_dq.vhd
-- Created: 2022-10-31 09:22:46
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 100x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- theta_el_axi                  ce_out        1e-06
-- x_abc_out_axi_0               ce_out        1e-06
-- x_abc_out_axi_1               ce_out        1e-06
-- x_abc_out_axi_2               ce_out        1e-06
-- x_abc_0                       ce_out        1e-06
-- x_abc_1                       ce_out        1e-06
-- x_abc_2                       ce_out        1e-06
-- x_out_dq_0                    ce_out        1e-06
-- x_out_dq_1                    ce_out        1e-06
-- refresh_values                ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_threephase_VSD_transformation_src_abc_to_dq
-- Source Path: uz_threephase_VSD_transformation/abc_to_dq
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_threephase_VSD_transformation_src_abc_to_dq_pkg.ALL;

ENTITY uz_threephase_VSD_transformation_src_abc_to_dq IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        x_in_dq_0                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_in_dq_1                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        theta_el                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
        trigger_new_values                :   IN    std_logic;
        x_abc1_ll_pl_0                    :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_abc1_ll_pl_1                    :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_abc1_ll_pl_2                    :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        ce_out                            :   OUT   std_logic;
        theta_el_axi                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
        x_abc_out_axi_0                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_out_axi_1                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_out_axi_2                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_0                           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_1                           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_2                           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_out_dq_0                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_out_dq_1                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        refresh_values                    :   OUT   std_logic
        );
END uz_threephase_VSD_transformation_src_abc_to_dq;


ARCHITECTURE rtl OF uz_threephase_VSD_transformation_src_abc_to_dq IS

  -- Component Declarations
  COMPONENT uz_threephase_VSD_transformation_src_abc_to_dq_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_100_0                     :   OUT   std_logic;
          enb_1_100_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_threephase_VSD_transformation_src_Sine_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          x                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          y                               :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT uz_threephase_VSD_transformation_src_inverse_Park
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dq                              :   IN    vector_of_std_logic_vector27(0 TO 1);  -- sfix27_En18 [2]
          sin_theta_el                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          cos_theta_el                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          alpha_beta_0                    :   OUT   vector_of_std_logic_vector27(0 TO 2)  -- sfix27_En18 [3]
          );
  END COMPONENT;

  COMPONENT uz_threephase_VSD_transformation_src_inverse_Clarke
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          alpha_beta_0                    :   IN    vector_of_std_logic_vector27(0 TO 2);  -- sfix27_En18 [3]
          a_b_c                           :   OUT   vector_of_std_logic_vector27(0 TO 2)  -- sfix27_En18 [3]
          );
  END COMPONENT;

  COMPONENT uz_threephase_VSD_transformation_src_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT uz_threephase_VSD_transformation_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          alpha_beta                      :   IN    vector_of_std_logic_vector27(0 TO 2);  -- sfix27_En16 [3]
          sin_theta_el                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          cos_theta_el                    :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          dq                              :   OUT   vector_of_std_logic_vector27(0 TO 1)  -- sfix27_En16 [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_threephase_VSD_transformation_src_abc_to_dq_tc
    USE ENTITY work.uz_threephase_VSD_transformation_src_abc_to_dq_tc(rtl);

  FOR ALL : uz_threephase_VSD_transformation_src_Sine_HDL_Optimized
    USE ENTITY work.uz_threephase_VSD_transformation_src_Sine_HDL_Optimized(rtl);

  FOR ALL : uz_threephase_VSD_transformation_src_inverse_Park
    USE ENTITY work.uz_threephase_VSD_transformation_src_inverse_Park(rtl);

  FOR ALL : uz_threephase_VSD_transformation_src_inverse_Clarke
    USE ENTITY work.uz_threephase_VSD_transformation_src_inverse_Clarke(rtl);

  FOR ALL : uz_threephase_VSD_transformation_src_SimpleDualPortRAM_generic
    USE ENTITY work.uz_threephase_VSD_transformation_src_SimpleDualPortRAM_generic(rtl);

  FOR ALL : uz_threephase_VSD_transformation_src_Subsystem
    USE ENTITY work.uz_threephase_VSD_transformation_src_Subsystem(rtl);

  -- Signals
  SIGNAL enb_1_100_0                      : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_100_1                      : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL theta_el_signed                  : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Switch1_out1                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Switch1_out1_1                   : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Switch1_out1_2                   : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Unit_Delay_out1_1                : std_logic;
  SIGNAL Unit_Delay_out1_2                : std_logic;
  SIGNAL x_in_dq                          : vector_of_std_logic_vector27(0 TO 1);  -- ufix27 [2]
  SIGNAL x_in_dq_2                        : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL x_in_dq_3                        : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL x_in_dq_4                        : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL x_in_dq_5                        : vector_of_std_logic_vector27(0 TO 1);  -- ufix27 [2]
  SIGNAL kconst                           : signed(17 DOWNTO 0);  -- sfix18_En19
  SIGNAL kconst_1                         : signed(17 DOWNTO 0);  -- sfix18_En19
  SIGNAL From_out1                        : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay1_out1_1                    : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Gain_mul_temp                    : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Gain_out1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain_out1_1                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Sine                             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Cosine                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL inverse_Park_out1                : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL inverse_Clarke_out1              : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL inverse_Clarke_out1_signed       : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Switch_out1                      : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Delay9_bypass_reg                : vector_of_signed27(0 TO 2);  -- sfix27 [3]
  SIGNAL Delay9_bypass_reg_next           : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Switch_out1_1                    : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Delay9_out1                      : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Delay9_out1_1                    : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL t3_bypass_reg                    : vector_of_signed27(0 TO 2);  -- sfix27 [3]
  SIGNAL t3_bypass_reg_next               : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Switch_out1_2                    : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL t4_bypass_reg                    : vector_of_signed27(0 TO 2);  -- sfix27 [3]
  SIGNAL t4_bypass_reg_next               : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL inverse_Clarke_out1_1            : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL c36_kconst                       : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL kconst_2                         : matrix_of_signed18(0 TO 2, 0 TO 2);  -- sfix18_En16 [3x3]
  SIGNAL s                                : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL selector_out                     : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL s_1                              : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL alpha_0                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_1                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_2                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_3                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_4                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_5                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_6                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_7                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_8                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_out_1             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_1_reg             : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL HwModeRegister_out_2             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_out_3             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_out_4             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_out_5             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_out_6             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_out_7             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_out_8             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_out_9             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL HwModeRegister_1_reg_1           : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL HwModeRegister_1_reg_2           : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL HwModeRegister_1_reg_3           : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL HwModeRegister_1_reg_4           : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL HwModeRegister_1_reg_5           : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL HwModeRegister_1_reg_6           : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL HwModeRegister_1_reg_7           : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL HwModeRegister_1_reg_8           : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL HwModeRegister_1_reg_next        : vector_of_signed18(0 TO 2);  -- sfix18_En16 [3]
  SIGNAL HwModeRegister_1_reg_next_1      : vector_of_signed18(0 TO 2);  -- sfix18_En16 [3]
  SIGNAL HwModeRegister_1_reg_next_2      : vector_of_signed18(0 TO 2);  -- sfix18_En16 [3]
  SIGNAL HwModeRegister_1_reg_next_3      : vector_of_signed18(0 TO 2);  -- sfix18_En16 [3]
  SIGNAL HwModeRegister_1_reg_next_4      : vector_of_signed18(0 TO 2);  -- sfix18_En16 [3]
  SIGNAL HwModeRegister_1_reg_next_5      : vector_of_signed18(0 TO 2);  -- sfix18_En16 [3]
  SIGNAL HwModeRegister_1_reg_next_6      : vector_of_signed18(0 TO 2);  -- sfix18_En16 [3]
  SIGNAL HwModeRegister_1_reg_next_7      : vector_of_signed18(0 TO 2);  -- sfix18_En16 [3]
  SIGNAL HwModeRegister_1_reg_next_8      : vector_of_signed18(0 TO 2);  -- sfix18_En16 [3]
  SIGNAL s_2                              : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL x_abc1_ll_pl                     : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL x_abc1_ll_pl_3                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL x_abc1_ll_pl_4                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL x_abc1_ll_pl_5                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL kconst_3                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL kconst_4                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1                       : vector_of_signed45(0 TO 2);  -- sfix45_En32 [3]
  SIGNAL Gain2_out1_1                     : vector_of_signed45(0 TO 2);  -- sfix45_En32 [3]
  SIGNAL Gain2_out1_2                     : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_1                   : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL s_3                              : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL HwModeRegister1_reg              : vector_of_signed27(0 TO 8);  -- sfix27 [9]
  SIGNAL HwModeRegister1_reg_next         : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL s_4                              : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL MMul_dot_product_out             : vector_of_signed45(0 TO 8);  -- sfix45_En32 [9]
  SIGNAL PipelineRegister_reg             : vector_of_signed45(0 TO 8);  -- sfix45 [9]
  SIGNAL PipelineRegister_reg_next        : vector_of_signed45(0 TO 8);  -- sfix45_En32 [9]
  SIGNAL MMul_dot_product_out_1           : vector_of_signed45(0 TO 8);  -- sfix45_En32 [9]
  SIGNAL MMul_dot_product_out_2           : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL reshape_out                      : matrix_of_signed27(0 TO 2, 0 TO 2);  -- sfix27_En16 [3x3]
  SIGNAL selector_out_2                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_3                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_01_add_cast             : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_1           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_temp             : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_2           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_3           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_temp_1           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_4           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_5           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_temp_2           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_out                  : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_4                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_12_add_cast             : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_1           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_temp             : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_2           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_3           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_temp_1           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_4           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_5           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_temp_2           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL s_5                              : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Gain4_out1                       : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL abc_to_alpha_beta_0_out1_0       : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1_re                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Constant1_out1_im                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL mergedInput                      : unsigned(71 DOWNTO 0);  -- ufix72
  SIGNAL mergedDelay_regin                : unsigned(71 DOWNTO 0);  -- ufix72
  SIGNAL mergedDelay_waddr                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_regout               : std_logic_vector(71 DOWNTO 0);  -- ufix72
  SIGNAL mergedDelay_regout_unsigned      : unsigned(71 DOWNTO 0);  -- ufix72
  SIGNAL mergedOutput                     : unsigned(71 DOWNTO 0);  -- ufix72
  SIGNAL Product_C2ReIm_1_C2ReIm_A        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL slicedInput                      : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Product_C2ReIm_2_C2ReIm_A        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_mul_temp                 : signed(44 DOWNTO 0);  -- sfix45_En32
  SIGNAL Product_Re_AC                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Re_AC_1                  : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL abc_to_alpha_beta_0_out1_1       : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_C2ReIm_1_C2ReIm_B        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL slicedInput_1                    : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Product_C2ReIm_2_C2ReIm_B        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product2_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En32
  SIGNAL Product_Re_BD                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_C2ReIm_1_C2ReIm_A_1      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL slicedInput_2                    : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Product_C2ReIm_2_C2ReIm_B_1      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product1_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En32
  SIGNAL Product_Im_AD                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Im_AD_1                  : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_C2ReIm_1_C2ReIm_B_1      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL slicedInput_3                    : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Product_C2ReIm_2_C2ReIm_A_1      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product3_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En32
  SIGNAL Product_Im_BC                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Re_BD_1                  : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL mulOutput                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Im_BC_1                  : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL mulOutput_1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant_out1                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Mux4_out1                        : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Mux4_out1_1                      : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL Subsystem_out1                   : vector_of_std_logic_vector27(0 TO 1);  -- ufix27 [2]
  SIGNAL Subsystem_out1_signed            : vector_of_signed27(0 TO 1);  -- sfix27_En16 [2]
  SIGNAL t2_bypass_reg                    : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL t2_bypass_reg_next               : vector_of_signed27(0 TO 1);  -- sfix27_En16 [2]
  SIGNAL Subsystem_out1_1                 : vector_of_signed27(0 TO 1);  -- sfix27_En16 [2]
  SIGNAL Unit_Delay_out1_3                : std_logic;

BEGIN
  -- Trigger Output
  -- 
  -- VSD and Park inverse transformation
  -- 
  -- VSD and Park transformation
  -- 
  -- sin/cos calculation

  u_abc_to_dq_tc : uz_threephase_VSD_transformation_src_abc_to_dq_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_100_0 => enb_1_100_0,
              enb_1_100_1 => enb_1_100_1
              );

  u_Sine_HDL_Optimized : uz_threephase_VSD_transformation_src_Sine_HDL_Optimized
    PORT MAP( clk => clk,
              enb => enb,
              u => std_logic_vector(Gain_out1_1),  -- sfix18_En16
              x => Sine,  -- sfix18_En16
              y => Cosine  -- sfix18_En16
              );

  u_inverse_Park : uz_threephase_VSD_transformation_src_inverse_Park
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dq => x_in_dq_5,  -- sfix27_En18 [2]
              sin_theta_el => Sine,  -- sfix18_En16
              cos_theta_el => Cosine,  -- sfix18_En16
              alpha_beta_0 => inverse_Park_out1  -- sfix27_En18 [3]
              );

  u_inverse_Clarke : uz_threephase_VSD_transformation_src_inverse_Clarke
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              alpha_beta_0 => inverse_Park_out1,  -- sfix27_En18 [3]
              a_b_c => inverse_Clarke_out1  -- sfix27_En18 [3]
              );

  u_ShiftRegisterRAM_generic : uz_threephase_VSD_transformation_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 72
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              rd_dout => mergedDelay_regout
              );

  u_Subsystem : uz_threephase_VSD_transformation_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              alpha_beta => Mux4_out1_1,  -- sfix27_En16 [3]
              sin_theta_el => Sine,  -- sfix18_En16
              cos_theta_el => Cosine,  -- sfix18_En16
              dq => Subsystem_out1  -- sfix27_En16 [2]
              );

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1 <= '0';
      ELSIF enb_1_100_0 = '1' THEN
        Unit_Delay_out1 <= trigger_new_values;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  theta_el_signed <= signed(theta_el);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch1_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb_1_100_0 = '1' THEN
        Switch1_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  Switch1_out1 <= Switch1_out1_1 WHEN Unit_Delay_out1 = '0' ELSE
      theta_el_signed;

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch1_out1_2 <= to_signed(16#00000#, 18);
      ELSIF enb_1_100_0 = '1' THEN
        Switch1_out1_2 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  theta_el_axi <= std_logic_vector(Switch1_out1_2);

  Unit_Delay_out1_1 <= Unit_Delay_out1;

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay_out1_2 <= Unit_Delay_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  x_in_dq(0) <= x_in_dq_0;
  x_in_dq(1) <= x_in_dq_1;

  outputgen5: FOR k IN 0 TO 1 GENERATE
    x_in_dq_2(k) <= signed(x_in_dq(k));
  END GENERATE;

  x_in_dq_3 <= x_in_dq_2;

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        x_in_dq_4(0) <= to_signed(16#0000000#, 27);
        x_in_dq_4(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        x_in_dq_4(0) <= x_in_dq_3(0);
        x_in_dq_4(1) <= x_in_dq_3(1);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  outputgen4: FOR k IN 0 TO 1 GENERATE
    x_in_dq_5(k) <= std_logic_vector(x_in_dq_4(k));
  END GENERATE;

  kconst <= to_signed(16#145F3#, 18);

  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        kconst_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From_out1 <= to_signed(16#00000#, 18);
      ELSIF enb_1_100_0 = '1' THEN
        From_out1 <= theta_el_signed;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  Delay1_out1 <= From_out1;

  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay1_out1_1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Gain_mul_temp <= kconst_1 * Delay1_out1_1;
  Gain_out1 <= Gain_mul_temp(34 DOWNTO 17);

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Gain_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Gain_out1_1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  outputgen3: FOR k IN 0 TO 2 GENERATE
    inverse_Clarke_out1_signed(k) <= signed(inverse_Clarke_out1(k));
  END GENERATE;

  Delay9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_bypass_reg(0) <= to_signed(16#0000000#, 27);
        Delay9_bypass_reg(1) <= to_signed(16#0000000#, 27);
        Delay9_bypass_reg(2) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        Delay9_bypass_reg(0) <= Delay9_bypass_reg_next(0);
        Delay9_bypass_reg(1) <= Delay9_bypass_reg_next(1);
        Delay9_bypass_reg(2) <= Delay9_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay9_bypass_process;

  
  Switch_out1_1(0) <= Switch_out1(0) WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg(0);
  
  Switch_out1_1(1) <= Switch_out1(1) WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg(1);
  
  Switch_out1_1(2) <= Switch_out1(2) WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg(2);
  Delay9_bypass_reg_next(0) <= Switch_out1(0);
  Delay9_bypass_reg_next(1) <= Switch_out1(1);
  Delay9_bypass_reg_next(2) <= Switch_out1(2);

  Delay9_out1 <= Switch_out1_1;

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1_1(0) <= to_signed(16#0000000#, 27);
        Delay9_out1_1(1) <= to_signed(16#0000000#, 27);
        Delay9_out1_1(2) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay9_out1_1(0) <= Delay9_out1(0);
        Delay9_out1_1(1) <= Delay9_out1(1);
        Delay9_out1_1(2) <= Delay9_out1(2);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  
  Switch_out1(0) <= Delay9_out1_1(0) WHEN Unit_Delay_out1_2 = '0' ELSE
      inverse_Clarke_out1_signed(0);
  
  Switch_out1(1) <= Delay9_out1_1(1) WHEN Unit_Delay_out1_2 = '0' ELSE
      inverse_Clarke_out1_signed(1);
  
  Switch_out1(2) <= Delay9_out1_1(2) WHEN Unit_Delay_out1_2 = '0' ELSE
      inverse_Clarke_out1_signed(2);

  t3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t3_bypass_reg(0) <= to_signed(16#0000000#, 27);
        t3_bypass_reg(1) <= to_signed(16#0000000#, 27);
        t3_bypass_reg(2) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        t3_bypass_reg(0) <= t3_bypass_reg_next(0);
        t3_bypass_reg(1) <= t3_bypass_reg_next(1);
        t3_bypass_reg(2) <= t3_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t3_bypass_process;

  
  Switch_out1_2(0) <= Switch_out1(0) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(0);
  
  Switch_out1_2(1) <= Switch_out1(1) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(1);
  
  Switch_out1_2(2) <= Switch_out1(2) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(2);
  t3_bypass_reg_next(0) <= Switch_out1(0);
  t3_bypass_reg_next(1) <= Switch_out1(1);
  t3_bypass_reg_next(2) <= Switch_out1(2);

  x_abc_out_axi_0 <= std_logic_vector(Switch_out1_2(0));

  x_abc_out_axi_1 <= std_logic_vector(Switch_out1_2(1));

  x_abc_out_axi_2 <= std_logic_vector(Switch_out1_2(2));

  t4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t4_bypass_reg(0) <= to_signed(16#0000000#, 27);
        t4_bypass_reg(1) <= to_signed(16#0000000#, 27);
        t4_bypass_reg(2) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        t4_bypass_reg(0) <= t4_bypass_reg_next(0);
        t4_bypass_reg(1) <= t4_bypass_reg_next(1);
        t4_bypass_reg(2) <= t4_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t4_bypass_process;

  
  inverse_Clarke_out1_1(0) <= inverse_Clarke_out1_signed(0) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(0);
  
  inverse_Clarke_out1_1(1) <= inverse_Clarke_out1_signed(1) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(1);
  
  inverse_Clarke_out1_1(2) <= inverse_Clarke_out1_signed(2) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(2);
  t4_bypass_reg_next(0) <= inverse_Clarke_out1_signed(0);
  t4_bypass_reg_next(1) <= inverse_Clarke_out1_signed(1);
  t4_bypass_reg_next(2) <= inverse_Clarke_out1_signed(2);

  x_abc_0 <= std_logic_vector(inverse_Clarke_out1_1(0));

  x_abc_1 <= std_logic_vector(inverse_Clarke_out1_1(1));

  x_abc_2 <= std_logic_vector(inverse_Clarke_out1_1(2));

  c36_kconst(0) <= to_signed(16#10000#, 18);
  c36_kconst(1) <= to_signed(16#00000#, 18);
  c36_kconst(2) <= to_signed(16#08000#, 18);
  c36_kconst(3) <= to_signed(-16#08000#, 18);
  c36_kconst(4) <= to_signed(16#0DDB4#, 18);
  c36_kconst(5) <= to_signed(16#08000#, 18);
  c36_kconst(6) <= to_signed(-16#08000#, 18);
  c36_kconst(7) <= to_signed(-16#0DDB4#, 18);
  c36_kconst(8) <= to_signed(16#08000#, 18);

  kconst_2GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    kconst_2GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      kconst_2(d0, d1) <= c36_kconst(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  sGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    sGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      s(d0 + (d1 * 3)) <= kconst_2(d0, d1);
    END GENERATE;
  END GENERATE;

  selector_out(0) <= s(0);
  selector_out(1) <= s(3);
  selector_out(2) <= s(6);
  selector_out(3) <= s(1);
  selector_out(4) <= s(4);
  selector_out(5) <= s(7);
  selector_out(6) <= s(2);
  selector_out(7) <= s(5);
  selector_out(8) <= s(8);

  s_1GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_1(d0) <= selector_out(d0);
  END GENERATE;

  alpha_0 <= s_1(0);

  HwModeRegister_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HwModeRegister_1_reg(0) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg(1) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg(2) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_1(0) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_1(1) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_1(2) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_2(0) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_2(1) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_2(2) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_3(0) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_3(1) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_3(2) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_4(0) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_4(1) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_4(2) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_5(0) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_5(1) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_5(2) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_6(0) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_6(1) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_6(2) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_7(0) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_7(1) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_7(2) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_8(0) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_8(1) <= to_signed(16#00000#, 18);
        HwModeRegister_1_reg_8(2) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        HwModeRegister_1_reg(0) <= HwModeRegister_1_reg_next(0);
        HwModeRegister_1_reg(1) <= HwModeRegister_1_reg_next(1);
        HwModeRegister_1_reg(2) <= HwModeRegister_1_reg_next(2);
        HwModeRegister_1_reg_1(0) <= HwModeRegister_1_reg_next_1(0);
        HwModeRegister_1_reg_1(1) <= HwModeRegister_1_reg_next_1(1);
        HwModeRegister_1_reg_1(2) <= HwModeRegister_1_reg_next_1(2);
        HwModeRegister_1_reg_2(0) <= HwModeRegister_1_reg_next_2(0);
        HwModeRegister_1_reg_2(1) <= HwModeRegister_1_reg_next_2(1);
        HwModeRegister_1_reg_2(2) <= HwModeRegister_1_reg_next_2(2);
        HwModeRegister_1_reg_3(0) <= HwModeRegister_1_reg_next_3(0);
        HwModeRegister_1_reg_3(1) <= HwModeRegister_1_reg_next_3(1);
        HwModeRegister_1_reg_3(2) <= HwModeRegister_1_reg_next_3(2);
        HwModeRegister_1_reg_4(0) <= HwModeRegister_1_reg_next_4(0);
        HwModeRegister_1_reg_4(1) <= HwModeRegister_1_reg_next_4(1);
        HwModeRegister_1_reg_4(2) <= HwModeRegister_1_reg_next_4(2);
        HwModeRegister_1_reg_5(0) <= HwModeRegister_1_reg_next_5(0);
        HwModeRegister_1_reg_5(1) <= HwModeRegister_1_reg_next_5(1);
        HwModeRegister_1_reg_5(2) <= HwModeRegister_1_reg_next_5(2);
        HwModeRegister_1_reg_6(0) <= HwModeRegister_1_reg_next_6(0);
        HwModeRegister_1_reg_6(1) <= HwModeRegister_1_reg_next_6(1);
        HwModeRegister_1_reg_6(2) <= HwModeRegister_1_reg_next_6(2);
        HwModeRegister_1_reg_7(0) <= HwModeRegister_1_reg_next_7(0);
        HwModeRegister_1_reg_7(1) <= HwModeRegister_1_reg_next_7(1);
        HwModeRegister_1_reg_7(2) <= HwModeRegister_1_reg_next_7(2);
        HwModeRegister_1_reg_8(0) <= HwModeRegister_1_reg_next_8(0);
        HwModeRegister_1_reg_8(1) <= HwModeRegister_1_reg_next_8(1);
        HwModeRegister_1_reg_8(2) <= HwModeRegister_1_reg_next_8(2);
      END IF;
    END IF;
  END PROCESS HwModeRegister_1_process;

  HwModeRegister_1_reg_next(0) <= alpha_0;
  HwModeRegister_1_reg_next(1) <= HwModeRegister_1_reg(0);
  HwModeRegister_1_reg_next(2) <= HwModeRegister_1_reg(1);
  HwModeRegister_out_1 <= HwModeRegister_1_reg(2);
  HwModeRegister_1_reg_next_1(0) <= alpha_1;
  HwModeRegister_1_reg_next_1(1) <= HwModeRegister_1_reg_1(0);
  HwModeRegister_1_reg_next_1(2) <= HwModeRegister_1_reg_1(1);
  HwModeRegister_out_2 <= HwModeRegister_1_reg_1(2);
  HwModeRegister_1_reg_next_2(0) <= alpha_2;
  HwModeRegister_1_reg_next_2(1) <= HwModeRegister_1_reg_2(0);
  HwModeRegister_1_reg_next_2(2) <= HwModeRegister_1_reg_2(1);
  HwModeRegister_out_3 <= HwModeRegister_1_reg_2(2);
  HwModeRegister_1_reg_next_3(0) <= alpha_3;
  HwModeRegister_1_reg_next_3(1) <= HwModeRegister_1_reg_3(0);
  HwModeRegister_1_reg_next_3(2) <= HwModeRegister_1_reg_3(1);
  HwModeRegister_out_4 <= HwModeRegister_1_reg_3(2);
  HwModeRegister_1_reg_next_4(0) <= alpha_4;
  HwModeRegister_1_reg_next_4(1) <= HwModeRegister_1_reg_4(0);
  HwModeRegister_1_reg_next_4(2) <= HwModeRegister_1_reg_4(1);
  HwModeRegister_out_5 <= HwModeRegister_1_reg_4(2);
  HwModeRegister_1_reg_next_5(0) <= alpha_5;
  HwModeRegister_1_reg_next_5(1) <= HwModeRegister_1_reg_5(0);
  HwModeRegister_1_reg_next_5(2) <= HwModeRegister_1_reg_5(1);
  HwModeRegister_out_6 <= HwModeRegister_1_reg_5(2);
  HwModeRegister_1_reg_next_6(0) <= alpha_6;
  HwModeRegister_1_reg_next_6(1) <= HwModeRegister_1_reg_6(0);
  HwModeRegister_1_reg_next_6(2) <= HwModeRegister_1_reg_6(1);
  HwModeRegister_out_7 <= HwModeRegister_1_reg_6(2);
  HwModeRegister_1_reg_next_7(0) <= alpha_7;
  HwModeRegister_1_reg_next_7(1) <= HwModeRegister_1_reg_7(0);
  HwModeRegister_1_reg_next_7(2) <= HwModeRegister_1_reg_7(1);
  HwModeRegister_out_8 <= HwModeRegister_1_reg_7(2);
  HwModeRegister_1_reg_next_8(0) <= alpha_8;
  HwModeRegister_1_reg_next_8(1) <= HwModeRegister_1_reg_8(0);
  HwModeRegister_1_reg_next_8(2) <= HwModeRegister_1_reg_8(1);
  HwModeRegister_out_9 <= HwModeRegister_1_reg_8(2);

  alpha_1 <= s_1(1);

  alpha_2 <= s_1(2);

  alpha_3 <= s_1(3);

  alpha_4 <= s_1(4);

  alpha_5 <= s_1(5);

  alpha_6 <= s_1(6);

  alpha_7 <= s_1(7);

  alpha_8 <= s_1(8);

  s_2(0) <= HwModeRegister_out_1;
  s_2(1) <= HwModeRegister_out_2;
  s_2(2) <= HwModeRegister_out_3;
  s_2(3) <= HwModeRegister_out_4;
  s_2(4) <= HwModeRegister_out_5;
  s_2(5) <= HwModeRegister_out_6;
  s_2(6) <= HwModeRegister_out_7;
  s_2(7) <= HwModeRegister_out_8;
  s_2(8) <= HwModeRegister_out_9;

  x_abc1_ll_pl(0) <= x_abc1_ll_pl_0;
  x_abc1_ll_pl(1) <= x_abc1_ll_pl_1;
  x_abc1_ll_pl(2) <= x_abc1_ll_pl_2;

  outputgen2: FOR k IN 0 TO 2 GENERATE
    x_abc1_ll_pl_3(k) <= signed(x_abc1_ll_pl(k));
  END GENERATE;

  x_abc1_ll_pl_4 <= x_abc1_ll_pl_3;

  HwModeRegister4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        x_abc1_ll_pl_5(0) <= to_signed(16#0000000#, 27);
        x_abc1_ll_pl_5(1) <= to_signed(16#0000000#, 27);
        x_abc1_ll_pl_5(2) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        x_abc1_ll_pl_5(0) <= x_abc1_ll_pl_4(0);
        x_abc1_ll_pl_5(1) <= x_abc1_ll_pl_4(1);
        x_abc1_ll_pl_5(2) <= x_abc1_ll_pl_4(2);
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  kconst_3 <= to_signed(16#0AAAB#, 18);

  HwModeRegister5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        kconst_4 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        kconst_4 <= kconst_3;
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;


  Gain2_out1(0) <= x_abc1_ll_pl_5(0) * kconst_4;
  Gain2_out1(1) <= x_abc1_ll_pl_5(1) * kconst_4;
  Gain2_out1(2) <= x_abc1_ll_pl_5(2) * kconst_4;

  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Gain2_out1_1(0) <= to_signed(0, 45);
        Gain2_out1_1(1) <= to_signed(0, 45);
        Gain2_out1_1(2) <= to_signed(0, 45);
      ELSIF enb = '1' THEN
        Gain2_out1_1(0) <= Gain2_out1(0);
        Gain2_out1_1(1) <= Gain2_out1(1);
        Gain2_out1_1(2) <= Gain2_out1(2);
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  
  Gain2_out1_2(0) <= "011111111111111111111111111" WHEN (Gain2_out1_1(0)(44) = '0') AND (Gain2_out1_1(0)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (Gain2_out1_1(0)(44) = '1') AND (Gain2_out1_1(0)(43 DOWNTO 42) /= "11") ELSE
      Gain2_out1_1(0)(42 DOWNTO 16);
  
  Gain2_out1_2(1) <= "011111111111111111111111111" WHEN (Gain2_out1_1(1)(44) = '0') AND (Gain2_out1_1(1)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (Gain2_out1_1(1)(44) = '1') AND (Gain2_out1_1(1)(43 DOWNTO 42) /= "11") ELSE
      Gain2_out1_1(1)(42 DOWNTO 16);
  
  Gain2_out1_2(2) <= "011111111111111111111111111" WHEN (Gain2_out1_1(2)(44) = '0') AND (Gain2_out1_1(2)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (Gain2_out1_1(2)(44) = '1') AND (Gain2_out1_1(2)(43 DOWNTO 42) /= "11") ELSE
      Gain2_out1_1(2)(42 DOWNTO 16);

  selector_out_1(0) <= Gain2_out1_2(0);
  selector_out_1(1) <= Gain2_out1_2(1);
  selector_out_1(2) <= Gain2_out1_2(2);
  selector_out_1(3) <= Gain2_out1_2(0);
  selector_out_1(4) <= Gain2_out1_2(1);
  selector_out_1(5) <= Gain2_out1_2(2);
  selector_out_1(6) <= Gain2_out1_2(0);
  selector_out_1(7) <= Gain2_out1_2(1);
  selector_out_1(8) <= Gain2_out1_2(2);

  s_3GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_3(d0) <= selector_out_1(d0);
  END GENERATE;

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HwModeRegister1_reg(0) <= to_signed(16#0000000#, 27);
        HwModeRegister1_reg(1) <= to_signed(16#0000000#, 27);
        HwModeRegister1_reg(2) <= to_signed(16#0000000#, 27);
        HwModeRegister1_reg(3) <= to_signed(16#0000000#, 27);
        HwModeRegister1_reg(4) <= to_signed(16#0000000#, 27);
        HwModeRegister1_reg(5) <= to_signed(16#0000000#, 27);
        HwModeRegister1_reg(6) <= to_signed(16#0000000#, 27);
        HwModeRegister1_reg(7) <= to_signed(16#0000000#, 27);
        HwModeRegister1_reg(8) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        HwModeRegister1_reg(0) <= HwModeRegister1_reg_next(0);
        HwModeRegister1_reg(1) <= HwModeRegister1_reg_next(1);
        HwModeRegister1_reg(2) <= HwModeRegister1_reg_next(2);
        HwModeRegister1_reg(3) <= HwModeRegister1_reg_next(3);
        HwModeRegister1_reg(4) <= HwModeRegister1_reg_next(4);
        HwModeRegister1_reg(5) <= HwModeRegister1_reg_next(5);
        HwModeRegister1_reg(6) <= HwModeRegister1_reg_next(6);
        HwModeRegister1_reg(7) <= HwModeRegister1_reg_next(7);
        HwModeRegister1_reg(8) <= HwModeRegister1_reg_next(8);
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;

  s_4(0) <= HwModeRegister1_reg(0);
  s_4(1) <= HwModeRegister1_reg(1);
  s_4(2) <= HwModeRegister1_reg(2);
  s_4(3) <= HwModeRegister1_reg(3);
  s_4(4) <= HwModeRegister1_reg(4);
  s_4(5) <= HwModeRegister1_reg(5);
  s_4(6) <= HwModeRegister1_reg(6);
  s_4(7) <= HwModeRegister1_reg(7);
  s_4(8) <= HwModeRegister1_reg(8);
  HwModeRegister1_reg_next(0) <= s_3(0);
  HwModeRegister1_reg_next(1) <= s_3(1);
  HwModeRegister1_reg_next(2) <= s_3(2);
  HwModeRegister1_reg_next(3) <= s_3(3);
  HwModeRegister1_reg_next(4) <= s_3(4);
  HwModeRegister1_reg_next(5) <= s_3(5);
  HwModeRegister1_reg_next(6) <= s_3(6);
  HwModeRegister1_reg_next(7) <= s_3(7);
  HwModeRegister1_reg_next(8) <= s_3(8);

  MMul_dot_product_out(0) <= s_2(0) * s_4(0);
  MMul_dot_product_out(1) <= s_2(1) * s_4(1);
  MMul_dot_product_out(2) <= s_2(2) * s_4(2);
  MMul_dot_product_out(3) <= s_2(3) * s_4(3);
  MMul_dot_product_out(4) <= s_2(4) * s_4(4);
  MMul_dot_product_out(5) <= s_2(5) * s_4(5);
  MMul_dot_product_out(6) <= s_2(6) * s_4(6);
  MMul_dot_product_out(7) <= s_2(7) * s_4(7);
  MMul_dot_product_out(8) <= s_2(8) * s_4(8);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        PipelineRegister_reg(0) <= to_signed(0, 45);
        PipelineRegister_reg(1) <= to_signed(0, 45);
        PipelineRegister_reg(2) <= to_signed(0, 45);
        PipelineRegister_reg(3) <= to_signed(0, 45);
        PipelineRegister_reg(4) <= to_signed(0, 45);
        PipelineRegister_reg(5) <= to_signed(0, 45);
        PipelineRegister_reg(6) <= to_signed(0, 45);
        PipelineRegister_reg(7) <= to_signed(0, 45);
        PipelineRegister_reg(8) <= to_signed(0, 45);
      ELSIF enb = '1' THEN
        PipelineRegister_reg(0) <= PipelineRegister_reg_next(0);
        PipelineRegister_reg(1) <= PipelineRegister_reg_next(1);
        PipelineRegister_reg(2) <= PipelineRegister_reg_next(2);
        PipelineRegister_reg(3) <= PipelineRegister_reg_next(3);
        PipelineRegister_reg(4) <= PipelineRegister_reg_next(4);
        PipelineRegister_reg(5) <= PipelineRegister_reg_next(5);
        PipelineRegister_reg(6) <= PipelineRegister_reg_next(6);
        PipelineRegister_reg(7) <= PipelineRegister_reg_next(7);
        PipelineRegister_reg(8) <= PipelineRegister_reg_next(8);
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;

  MMul_dot_product_out_1(0) <= PipelineRegister_reg(0);
  MMul_dot_product_out_1(1) <= PipelineRegister_reg(1);
  MMul_dot_product_out_1(2) <= PipelineRegister_reg(2);
  MMul_dot_product_out_1(3) <= PipelineRegister_reg(3);
  MMul_dot_product_out_1(4) <= PipelineRegister_reg(4);
  MMul_dot_product_out_1(5) <= PipelineRegister_reg(5);
  MMul_dot_product_out_1(6) <= PipelineRegister_reg(6);
  MMul_dot_product_out_1(7) <= PipelineRegister_reg(7);
  MMul_dot_product_out_1(8) <= PipelineRegister_reg(8);
  PipelineRegister_reg_next(0) <= MMul_dot_product_out(0);
  PipelineRegister_reg_next(1) <= MMul_dot_product_out(1);
  PipelineRegister_reg_next(2) <= MMul_dot_product_out(2);
  PipelineRegister_reg_next(3) <= MMul_dot_product_out(3);
  PipelineRegister_reg_next(4) <= MMul_dot_product_out(4);
  PipelineRegister_reg_next(5) <= MMul_dot_product_out(5);
  PipelineRegister_reg_next(6) <= MMul_dot_product_out(6);
  PipelineRegister_reg_next(7) <= MMul_dot_product_out(7);
  PipelineRegister_reg_next(8) <= MMul_dot_product_out(8);

  
  MMul_dot_product_out_2(0) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_1(0)(44) = '0') AND (MMul_dot_product_out_1(0)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_1(0)(44) = '1') AND (MMul_dot_product_out_1(0)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_1(0)(42 DOWNTO 16);
  
  MMul_dot_product_out_2(1) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_1(1)(44) = '0') AND (MMul_dot_product_out_1(1)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_1(1)(44) = '1') AND (MMul_dot_product_out_1(1)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_1(1)(42 DOWNTO 16);
  
  MMul_dot_product_out_2(2) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_1(2)(44) = '0') AND (MMul_dot_product_out_1(2)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_1(2)(44) = '1') AND (MMul_dot_product_out_1(2)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_1(2)(42 DOWNTO 16);
  
  MMul_dot_product_out_2(3) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_1(3)(44) = '0') AND (MMul_dot_product_out_1(3)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_1(3)(44) = '1') AND (MMul_dot_product_out_1(3)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_1(3)(42 DOWNTO 16);
  
  MMul_dot_product_out_2(4) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_1(4)(44) = '0') AND (MMul_dot_product_out_1(4)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_1(4)(44) = '1') AND (MMul_dot_product_out_1(4)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_1(4)(42 DOWNTO 16);
  
  MMul_dot_product_out_2(5) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_1(5)(44) = '0') AND (MMul_dot_product_out_1(5)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_1(5)(44) = '1') AND (MMul_dot_product_out_1(5)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_1(5)(42 DOWNTO 16);
  
  MMul_dot_product_out_2(6) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_1(6)(44) = '0') AND (MMul_dot_product_out_1(6)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_1(6)(44) = '1') AND (MMul_dot_product_out_1(6)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_1(6)(42 DOWNTO 16);
  
  MMul_dot_product_out_2(7) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_1(7)(44) = '0') AND (MMul_dot_product_out_1(7)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_1(7)(44) = '1') AND (MMul_dot_product_out_1(7)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_1(7)(42 DOWNTO 16);
  
  MMul_dot_product_out_2(8) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_1(8)(44) = '0') AND (MMul_dot_product_out_1(8)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_1(8)(44) = '1') AND (MMul_dot_product_out_1(8)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_1(8)(42 DOWNTO 16);

  reshape_outGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    reshape_outGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      reshape_out(d0, d1) <= MMul_dot_product_out_2(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  select_0_output : PROCESS (reshape_out)
  BEGIN
    selector_out_2(0) <= reshape_out(0, 0);
    selector_out_2(1) <= reshape_out(0, 1);
    selector_out_2(2) <= reshape_out(0, 2);
  END PROCESS select_0_output;


  select_1_output : PROCESS (reshape_out)
  BEGIN
    selector_out_3(0) <= reshape_out(1, 0);
    selector_out_3(1) <= reshape_out(1, 1);
    selector_out_3(2) <= reshape_out(1, 2);
  END PROCESS select_1_output;


  MMul_add_01_add_cast <= resize(selector_out_2(0), 28);
  MMul_add_01_add_cast_1 <= resize(selector_out_3(0), 28);
  MMul_add_01_add_temp <= MMul_add_01_add_cast + MMul_add_01_add_cast_1;
  
  MMul_add_01_out(0) <= "011111111111111111111111111" WHEN (MMul_add_01_add_temp(27) = '0') AND (MMul_add_01_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_01_add_temp(27) = '1') AND (MMul_add_01_add_temp(26) /= '1') ELSE
      MMul_add_01_add_temp(26 DOWNTO 0);
  MMul_add_01_add_cast_2 <= resize(selector_out_2(1), 28);
  MMul_add_01_add_cast_3 <= resize(selector_out_3(1), 28);
  MMul_add_01_add_temp_1 <= MMul_add_01_add_cast_2 + MMul_add_01_add_cast_3;
  
  MMul_add_01_out(1) <= "011111111111111111111111111" WHEN (MMul_add_01_add_temp_1(27) = '0') AND (MMul_add_01_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_01_add_temp_1(27) = '1') AND (MMul_add_01_add_temp_1(26) /= '1') ELSE
      MMul_add_01_add_temp_1(26 DOWNTO 0);
  MMul_add_01_add_cast_4 <= resize(selector_out_2(2), 28);
  MMul_add_01_add_cast_5 <= resize(selector_out_3(2), 28);
  MMul_add_01_add_temp_2 <= MMul_add_01_add_cast_4 + MMul_add_01_add_cast_5;
  
  MMul_add_01_out(2) <= "011111111111111111111111111" WHEN (MMul_add_01_add_temp_2(27) = '0') AND (MMul_add_01_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_01_add_temp_2(27) = '1') AND (MMul_add_01_add_temp_2(26) /= '1') ELSE
      MMul_add_01_add_temp_2(26 DOWNTO 0);

  select_2_output : PROCESS (reshape_out)
  BEGIN
    selector_out_4(0) <= reshape_out(2, 0);
    selector_out_4(1) <= reshape_out(2, 1);
    selector_out_4(2) <= reshape_out(2, 2);
  END PROCESS select_2_output;


  MMul_add_12_add_cast <= resize(MMul_add_01_out(0), 28);
  MMul_add_12_add_cast_1 <= resize(selector_out_4(0), 28);
  MMul_add_12_add_temp <= MMul_add_12_add_cast + MMul_add_12_add_cast_1;
  
  s_5(0) <= "011111111111111111111111111" WHEN (MMul_add_12_add_temp(27) = '0') AND (MMul_add_12_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_12_add_temp(27) = '1') AND (MMul_add_12_add_temp(26) /= '1') ELSE
      MMul_add_12_add_temp(26 DOWNTO 0);
  MMul_add_12_add_cast_2 <= resize(MMul_add_01_out(1), 28);
  MMul_add_12_add_cast_3 <= resize(selector_out_4(1), 28);
  MMul_add_12_add_temp_1 <= MMul_add_12_add_cast_2 + MMul_add_12_add_cast_3;
  
  s_5(1) <= "011111111111111111111111111" WHEN (MMul_add_12_add_temp_1(27) = '0') AND (MMul_add_12_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_12_add_temp_1(27) = '1') AND (MMul_add_12_add_temp_1(26) /= '1') ELSE
      MMul_add_12_add_temp_1(26 DOWNTO 0);
  MMul_add_12_add_cast_4 <= resize(MMul_add_01_out(2), 28);
  MMul_add_12_add_cast_5 <= resize(selector_out_4(2), 28);
  MMul_add_12_add_temp_2 <= MMul_add_12_add_cast_4 + MMul_add_12_add_cast_5;
  
  s_5(2) <= "011111111111111111111111111" WHEN (MMul_add_12_add_temp_2(27) = '0') AND (MMul_add_12_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_12_add_temp_2(27) = '1') AND (MMul_add_12_add_temp_2(26) /= '1') ELSE
      MMul_add_12_add_temp_2(26 DOWNTO 0);

  Gain4_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
    Gain4_out1(d0) <= s_5(d0);
  END GENERATE;

  abc_to_alpha_beta_0_out1_0 <= Gain4_out1(0);

  Constant1_out1_re <= to_signed(16#08000#, 18);
  Constant1_out1_im <= to_signed(-16#049E7#, 18);

  mergedInput <= unsigned(Constant1_out1_re) & unsigned(Constant1_out1_im) & unsigned(Constant1_out1_im) & unsigned(Constant1_out1_re);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_regin <= to_unsigned(0, 72);
      ELSIF enb = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_waddr <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#2#, 3) THEN 
          mergedDelay_waddr <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_raddr <= to_unsigned(16#1#, 3);
      ELSIF enb = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#2#, 3) THEN 
          mergedDelay_raddr <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedOutput <= to_unsigned(0, 72);
      ELSIF enb = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  HwModeRegister6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_1_C2ReIm_A <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Product_C2ReIm_1_C2ReIm_A <= abc_to_alpha_beta_0_out1_0;
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;


  slicedInput <= mergedOutput(71 DOWNTO 54);

  Product_C2ReIm_2_C2ReIm_A <= signed(slicedInput);

  Product_mul_temp <= Product_C2ReIm_1_C2ReIm_A * Product_C2ReIm_2_C2ReIm_A;
  Product_Re_AC <= Product_mul_temp(42 DOWNTO 16);

  PipelineRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_Re_AC_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Product_Re_AC_1 <= Product_Re_AC;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  abc_to_alpha_beta_0_out1_1 <= Gain4_out1(1);

  HwModeRegister10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_1_C2ReIm_B <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Product_C2ReIm_1_C2ReIm_B <= abc_to_alpha_beta_0_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister10_process;


  slicedInput_1 <= mergedOutput(35 DOWNTO 18);

  Product_C2ReIm_2_C2ReIm_B <= signed(slicedInput_1);

  Product2_mul_temp <= Product_C2ReIm_1_C2ReIm_B * Product_C2ReIm_2_C2ReIm_B;
  Product_Re_BD <= Product2_mul_temp(42 DOWNTO 16);

  HwModeRegister8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_1_C2ReIm_A_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Product_C2ReIm_1_C2ReIm_A_1 <= abc_to_alpha_beta_0_out1_0;
      END IF;
    END IF;
  END PROCESS HwModeRegister8_process;


  slicedInput_2 <= mergedOutput(53 DOWNTO 36);

  Product_C2ReIm_2_C2ReIm_B_1 <= signed(slicedInput_2);

  Product1_mul_temp <= Product_C2ReIm_1_C2ReIm_A_1 * Product_C2ReIm_2_C2ReIm_B_1;
  Product_Im_AD <= Product1_mul_temp(42 DOWNTO 16);

  PipelineRegister4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_Im_AD_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Product_Im_AD_1 <= Product_Im_AD;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  HwModeRegister12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_1_C2ReIm_B_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Product_C2ReIm_1_C2ReIm_B_1 <= abc_to_alpha_beta_0_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister12_process;


  slicedInput_3 <= mergedOutput(17 DOWNTO 0);

  Product_C2ReIm_2_C2ReIm_A_1 <= signed(slicedInput_3);

  Product3_mul_temp <= Product_C2ReIm_1_C2ReIm_B_1 * Product_C2ReIm_2_C2ReIm_A_1;
  Product_Im_BC <= Product3_mul_temp(42 DOWNTO 16);

  PipelineRegister5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_Re_BD_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Product_Re_BD_1 <= Product_Re_BD;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;


  mulOutput <= Product_Re_AC_1 - Product_Re_BD_1;

  PipelineRegister6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_Im_BC_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Product_Im_BC_1 <= Product_Im_BC;
      END IF;
    END IF;
  END PROCESS PipelineRegister6_process;


  mulOutput_1 <= Product_Im_AD_1 + Product_Im_BC_1;

  Constant_out1 <= to_signed(16#0000000#, 27);

  Mux4_out1(0) <= mulOutput;
  Mux4_out1(1) <= mulOutput_1;
  Mux4_out1(2) <= Constant_out1;

  outputgen1: FOR k IN 0 TO 2 GENERATE
    Mux4_out1_1(k) <= std_logic_vector(Mux4_out1(k));
  END GENERATE;

  outputgen: FOR k IN 0 TO 1 GENERATE
    Subsystem_out1_signed(k) <= signed(Subsystem_out1(k));
  END GENERATE;

  t2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t2_bypass_reg(0) <= to_signed(16#0000000#, 27);
        t2_bypass_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        t2_bypass_reg(0) <= t2_bypass_reg_next(0);
        t2_bypass_reg(1) <= t2_bypass_reg_next(1);
      END IF;
    END IF;
  END PROCESS t2_bypass_process;

  
  Subsystem_out1_1(0) <= Subsystem_out1_signed(0) WHEN enb_1_100_1 = '1' ELSE
      t2_bypass_reg(0);
  
  Subsystem_out1_1(1) <= Subsystem_out1_signed(1) WHEN enb_1_100_1 = '1' ELSE
      t2_bypass_reg(1);
  t2_bypass_reg_next(0) <= Subsystem_out1_signed(0);
  t2_bypass_reg_next(1) <= Subsystem_out1_signed(1);

  x_out_dq_0 <= std_logic_vector(Subsystem_out1_1(0));

  x_out_dq_1 <= std_logic_vector(Subsystem_out1_1(1));

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1_3 <= '0';
      ELSIF enb_1_100_0 = '1' THEN
        Unit_Delay_out1_3 <= Unit_Delay_out1;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  refresh_values <= Unit_Delay_out1_3;

  ce_out <= enb_1_100_1;

END rtl;

