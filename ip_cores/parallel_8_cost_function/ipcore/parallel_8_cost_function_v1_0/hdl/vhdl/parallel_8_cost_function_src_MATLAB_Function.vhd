-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_cost_function\hdlsrc\parallel_8_cost_function\parallel_8_cost_function_src_MATLAB_Function.vhd
-- Created: 2022-10-18 09:53:42
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_cost_function_src_MATLAB_Function
-- Source Path: parallel_8_cost_function/HDL_DUT1/Subsystem/MATLAB Function
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_8_cost_function_src_HDL_DUT1_pkg.ALL;

ENTITY parallel_8_cost_function_src_MATLAB_Function IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        prediction                        :   IN    vector_of_std_logic_vector32(0 TO 3);  -- single [4]
        id_ref                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iq_ref                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ix_ref                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iy_ref                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        J                                 :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END parallel_8_cost_function_src_MATLAB_Function;


ARCHITECTURE rtl OF parallel_8_cost_function_src_MATLAB_Function IS

  -- Component Declarations
  COMPONENT parallel_8_cost_function_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_cost_function_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_cost_function_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_cost_function_src_nfp_sub_single
    USE ENTITY work.parallel_8_cost_function_src_nfp_sub_single(rtl);

  FOR ALL : parallel_8_cost_function_src_nfp_mul_single
    USE ENTITY work.parallel_8_cost_function_src_nfp_mul_single(rtl);

  FOR ALL : parallel_8_cost_function_src_nfp_add_single
    USE ENTITY work.parallel_8_cost_function_src_nfp_add_single(rtl);

  -- Signals
  SIGNAL out0                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out_1_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_3                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out_1_2                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch_reg                   : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch_reg_next              : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Out_1_3                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_4                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_5                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out_1_4                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch1_reg                  : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch1_reg_next             : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Out_1_5                          : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_sub_comp : parallel_8_cost_function_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => id_ref,  -- single
              nfp_in2 => prediction(0),  -- single
              nfp_out => out0  -- single
              );

  u_nfp_mul_comp : parallel_8_cost_function_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0,  -- single
              nfp_in2 => out0,  -- single
              nfp_out => Out_1  -- single
              );

  u_nfp_sub_comp_1 : parallel_8_cost_function_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iq_ref,  -- single
              nfp_in2 => prediction(1),  -- single
              nfp_out => out0_1  -- single
              );

  u_nfp_mul_comp_1 : parallel_8_cost_function_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_1,  -- single
              nfp_in2 => out0_1,  -- single
              nfp_out => Out_1_1  -- single
              );

  u_nfp_add_comp : parallel_8_cost_function_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Out_1,  -- single
              nfp_in2 => Out_1_1,  -- single
              nfp_out => out0_2  -- single
              );

  u_nfp_sub_comp_2 : parallel_8_cost_function_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => ix_ref,  -- single
              nfp_in2 => prediction(2),  -- single
              nfp_out => out0_3  -- single
              );

  u_nfp_mul_comp_2 : parallel_8_cost_function_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_3,  -- single
              nfp_in2 => out0_3,  -- single
              nfp_out => Out_1_2  -- single
              );

  u_nfp_add_comp_1 : parallel_8_cost_function_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_2,  -- single
              nfp_in2 => Out_1_3,  -- single
              nfp_out => out0_4  -- single
              );

  u_nfp_sub_comp_3 : parallel_8_cost_function_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iy_ref,  -- single
              nfp_in2 => prediction(3),  -- single
              nfp_out => out0_5  -- single
              );

  u_nfp_mul_comp_3 : parallel_8_cost_function_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_5,  -- single
              nfp_in2 => out0_5,  -- single
              nfp_out => Out_1_4  -- single
              );

  u_nfp_add_comp_2 : parallel_8_cost_function_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_4,  -- single
              nfp_in2 => Out_1_5,  -- single
              nfp_out => J  -- single
              );

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg(0) <= X"00000000";
        delayMatch_reg(1) <= X"00000000";
        delayMatch_reg(2) <= X"00000000";
        delayMatch_reg(3) <= X"00000000";
        delayMatch_reg(4) <= X"00000000";
        delayMatch_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Out_1_3 <= delayMatch_reg(5);
  delayMatch_reg_next(0) <= Out_1_2;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg(0) <= X"00000000";
        delayMatch1_reg(1) <= X"00000000";
        delayMatch1_reg(2) <= X"00000000";
        delayMatch1_reg(3) <= X"00000000";
        delayMatch1_reg(4) <= X"00000000";
        delayMatch1_reg(5) <= X"00000000";
        delayMatch1_reg(6) <= X"00000000";
        delayMatch1_reg(7) <= X"00000000";
        delayMatch1_reg(8) <= X"00000000";
        delayMatch1_reg(9) <= X"00000000";
        delayMatch1_reg(10) <= X"00000000";
        delayMatch1_reg(11) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
        delayMatch1_reg(5) <= delayMatch1_reg_next(5);
        delayMatch1_reg(6) <= delayMatch1_reg_next(6);
        delayMatch1_reg(7) <= delayMatch1_reg_next(7);
        delayMatch1_reg(8) <= delayMatch1_reg_next(8);
        delayMatch1_reg(9) <= delayMatch1_reg_next(9);
        delayMatch1_reg(10) <= delayMatch1_reg_next(10);
        delayMatch1_reg(11) <= delayMatch1_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Out_1_5 <= delayMatch1_reg(11);
  delayMatch1_reg_next(0) <= Out_1_4;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);
  delayMatch1_reg_next(6) <= delayMatch1_reg(5);
  delayMatch1_reg_next(7) <= delayMatch1_reg(6);
  delayMatch1_reg_next(8) <= delayMatch1_reg(7);
  delayMatch1_reg_next(9) <= delayMatch1_reg(8);
  delayMatch1_reg_next(10) <= delayMatch1_reg(9);
  delayMatch1_reg_next(11) <= delayMatch1_reg(10);

END rtl;

