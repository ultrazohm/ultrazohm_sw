-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/uz_mlp_three_layer/uz_mlp_three_layer_src_StateMachines.vhd
-- Created: 2021-02-15 09:55:19
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_mlp_three_layer_src_StateMachines
-- Source Path: uz_mlp_three_layer/uz_mlp_three_layer/LastLayer/StateMachines
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_mlp_three_layer_src_StateMachines IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        end_out                           :   IN    std_logic;
        mac_startOut                      :   IN    std_logic;
        U                                 :   IN    std_logic;
        output_half_minus_one             :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
        n_perceptron                      :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        write_enable                      :   OUT   std_logic;
        mac_counter                       :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        startin                           :   OUT   std_logic;
        endin                             :   OUT   std_logic;
        validIn                           :   OUT   std_logic;
        layer_finished                    :   OUT   std_logic
        );
END uz_mlp_three_layer_src_StateMachines;


ARCHITECTURE rtl OF uz_mlp_three_layer_src_StateMachines IS

  -- Component Declarations
  COMPONENT uz_mlp_three_layer_src_Detect_Rise_Positive_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_mlp_three_layer_src_mac_control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          external_enable                 :   IN    std_logic;
          counter_finished                :   IN    std_logic;
          end_out                         :   IN    std_logic;
          end_out_delay                   :   IN    std_logic;
          mac_startOut                    :   IN    std_logic;
          index_counter_enb               :   OUT   std_logic;
          mac_startIn                     :   OUT   std_logic;
          mac_endIn                       :   OUT   std_logic;
          mac_validIn                     :   OUT   std_logic;
          index_counter_rst               :   OUT   std_logic;
          write_ram                       :   OUT   std_logic;
          mac_ready                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_mlp_three_layer_src_layer_control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          ext_enable                      :   IN    std_logic;
          mac_ready                       :   IN    std_logic;
          cnt_finished                    :   IN    std_logic;
          enable_mac                      :   OUT   std_logic;
          cnt_enable                      :   OUT   std_logic;
          counter_rest                    :   OUT   std_logic;
          layer_finished                  :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_mlp_three_layer_src_Detect_Rise_Positive_block
    USE ENTITY work.uz_mlp_three_layer_src_Detect_Rise_Positive_block(rtl);

  FOR ALL : uz_mlp_three_layer_src_mac_control
    USE ENTITY work.uz_mlp_three_layer_src_mac_control(rtl);

  FOR ALL : uz_mlp_three_layer_src_layer_control
    USE ENTITY work.uz_mlp_three_layer_src_layer_control(rtl);

  -- Signals
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL output_half_minus_one_unsigned   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL n_perceptron_tmp                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL index_counter_rst                : std_logic;
  SIGNAL index_counter_enb                : std_logic;
  SIGNAL mac_counter_tmp                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Delay2_out1                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL enable_mac                       : std_logic;
  SIGNAL mac_startIn                      : std_logic;
  SIGNAL mac_endIn                        : std_logic;
  SIGNAL mac_validIn                      : std_logic;
  SIGNAL write_ram                        : std_logic;
  SIGNAL mac_ready                        : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL cnt_enable                       : std_logic;
  SIGNAL counter_rest                     : std_logic;

BEGIN
  u_Detect_Rise_Positive : uz_mlp_three_layer_src_Detect_Rise_Positive_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => U,
              Y => Detect_Rise_Positive_out1
              );

  u_mac_control : uz_mlp_three_layer_src_mac_control
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              external_enable => enable_mac,
              counter_finished => Compare_To_Constant_out1,
              end_out => end_out,
              end_out_delay => Delay3_out1,
              mac_startOut => mac_startOut,
              index_counter_enb => index_counter_enb,
              mac_startIn => mac_startIn,
              mac_endIn => mac_endIn,
              mac_validIn => mac_validIn,
              index_counter_rst => index_counter_rst,
              write_ram => write_ram,
              mac_ready => mac_ready
              );

  u_layer_control : uz_mlp_three_layer_src_layer_control
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              ext_enable => Detect_Rise_Positive_out1,
              mac_ready => Delay4_out1,
              cnt_finished => Relational_Operator_relop1,
              enable_mac => enable_mac,
              cnt_enable => cnt_enable,
              counter_rest => counter_rest,
              layer_finished => layer_finished
              );

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= end_out;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  output_half_minus_one_unsigned <= unsigned(output_half_minus_one);

  
  Relational_Operator_relop1 <= '1' WHEN n_perceptron_tmp = output_half_minus_one_unsigned ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 64
  index_counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mac_counter_tmp <= to_unsigned(16#001#, 10);
      ELSIF enb = '1' THEN
        IF index_counter_rst = '1' THEN 
          mac_counter_tmp <= to_unsigned(16#001#, 10);
        ELSIF index_counter_enb = '1' THEN 
          IF mac_counter_tmp >= to_unsigned(16#040#, 10) THEN 
            mac_counter_tmp <= to_unsigned(16#001#, 10);
          ELSE 
            mac_counter_tmp <= mac_counter_tmp + to_unsigned(16#001#, 10);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS index_counter_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' THEN
        Delay2_out1 <= mac_counter_tmp;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Compare_To_Constant_out1 <= '1' WHEN Delay2_out1 = to_unsigned(16#040#, 10) ELSE
      '0';

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= mac_ready;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  perceptron_counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        n_perceptron_tmp <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' THEN
        IF counter_rest = '1' THEN 
          n_perceptron_tmp <= to_unsigned(16#000#, 10);
        ELSIF cnt_enable = '1' THEN 
          n_perceptron_tmp <= n_perceptron_tmp + to_unsigned(16#001#, 10);
        END IF;
      END IF;
    END IF;
  END PROCESS perceptron_counter1_process;


  n_perceptron <= std_logic_vector(n_perceptron_tmp);

  mac_counter <= std_logic_vector(mac_counter_tmp);

  write_enable <= write_ram;

  startin <= mac_startIn;

  endin <= mac_endIn;

  validIn <= mac_validIn;

END rtl;

