-- -------------------------------------------------------------
-- 
-- File Name: uz_axi_testIP/hdlsrc/uz_axi_testIP/uz_axi_testIP_addr_decoder.vhd
-- Created: 2021-04-18 13:21:44
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_axi_testIP_addr_decoder
-- Source Path: uz_axi_testIP/uz_axi_testIP_axi4/uz_axi_testIP_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_axi_testIP_pkg.ALL;

ENTITY uz_axi_testIP_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_C_int32                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        read_C_uint32                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_C_float                      :   IN    vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
        read_C_fx_1_16_5                  :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_A_float                     :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
        write_B_float                     :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
        write_A_uint32                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_B_uint32                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_A_int32                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        write_B_int32                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        write_A_fx_1_16_5                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
        write_B_fx_1_16_5                 :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En5
        );
END uz_axi_testIP_addr_decoder;


ARCHITECTURE rtl OF uz_axi_testIP_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_C_int32_signed              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL read_C_uint32_unsigned           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_C_float_1_1           : std_logic;  -- ufix1
  SIGNAL decode_sel_C_uint32_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_C_int32_1_1           : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_C_int32                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_slice_C_int32_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_C_int32_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_C_uint32                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_C_uint32_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_C_float               : std_logic;  -- ufix1
  SIGNAL strobe_sel_C_float               : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL strobe_in_C_float                : std_logic;  -- ufix1
  SIGNAL strobe_sw_C_float                : std_logic;  -- ufix1
  SIGNAL strobe_reg_C_float               : std_logic;  -- ufix1
  SIGNAL read_C_float_unsigned            : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL sync_reg_C_float                 : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL data_slice_C_float_1             : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL decode_sel_C_float_1_2           : std_logic;  -- ufix1
  SIGNAL data_slice_C_float_1_0           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_C_float_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_C_float_1_3           : std_logic;  -- ufix1
  SIGNAL data_slice_C_float_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_C_float_1_2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_C_float_1_4           : std_logic;  -- ufix1
  SIGNAL data_slice_C_float_1_2           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_C_float_1_3            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_C_fx_1_16_5_signed          : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL decode_sel_C_fx_1_16_5_1_1       : std_logic;  -- ufix1
  SIGNAL data_slice_C_float_1_3           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_C_float_1_4            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_C_fx_1_16_5             : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL data_slice_C_fx_1_16_5_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_C_fx_1_16_5_1_1        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_A_float               : std_logic;  -- ufix1
  SIGNAL strobe_sel_A_float               : std_logic;  -- ufix1
  SIGNAL const_zero_1                     : std_logic;  -- ufix1
  SIGNAL strobe_in_A_float                : std_logic;  -- ufix1
  SIGNAL strobe_sw_A_float                : std_logic;  -- ufix1
  SIGNAL decode_sel_A_float_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_A_float_1_1              : std_logic;  -- ufix1
  SIGNAL decode_sel_A_float_2_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_A_float_2_1              : std_logic;  -- ufix1
  SIGNAL decode_sel_A_float_3_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_A_float_3_1              : std_logic;  -- ufix1
  SIGNAL decode_sel_A_float_4_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_A_float_4_1              : std_logic;  -- ufix1
  SIGNAL strobe_reg_A_float               : std_logic;  -- ufix1
  SIGNAL data_reg_A_float_1_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_A_float_2_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_A_float_3_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_A_float_4_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_A_float                : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL sync_reg_A_float_1               : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL decode_sel_B_float               : std_logic;  -- ufix1
  SIGNAL strobe_sel_B_float               : std_logic;  -- ufix1
  SIGNAL const_zero_2                     : std_logic;  -- ufix1
  SIGNAL strobe_in_B_float                : std_logic;  -- ufix1
  SIGNAL strobe_sw_B_float                : std_logic;  -- ufix1
  SIGNAL decode_sel_B_float_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_B_float_1_1              : std_logic;  -- ufix1
  SIGNAL decode_sel_B_float_2_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_B_float_2_1              : std_logic;  -- ufix1
  SIGNAL decode_sel_B_float_3_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_B_float_3_1              : std_logic;  -- ufix1
  SIGNAL decode_sel_B_float_4_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_B_float_4_1              : std_logic;  -- ufix1
  SIGNAL strobe_reg_B_float               : std_logic;  -- ufix1
  SIGNAL data_reg_B_float_1_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_B_float_2_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_B_float_3_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_B_float_4_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_B_float                : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL sync_reg_B_float_1               : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL decode_sel_A_uint32_1_1          : std_logic;  -- ufix1
  SIGNAL reg_enb_A_uint32_1_1             : std_logic;  -- ufix1
  SIGNAL data_reg_A_uint32_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_B_uint32_1_1          : std_logic;  -- ufix1
  SIGNAL reg_enb_B_uint32_1_1             : std_logic;  -- ufix1
  SIGNAL data_reg_B_uint32_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_A_int32_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_A_int32_1_1              : std_logic;  -- ufix1
  SIGNAL data_in_A_int32                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_reg_A_int32_1_1             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_B_int32_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_B_int32_1_1              : std_logic;  -- ufix1
  SIGNAL data_in_B_int32                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_reg_B_int32_1_1             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_A_fx_1_16_5_1_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_A_fx_1_16_5_1_1          : std_logic;  -- ufix1
  SIGNAL data_in_A_fx_1_16_5              : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL data_reg_A_fx_1_16_5_1_1         : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL decode_sel_B_fx_1_16_5_1_1       : std_logic;  -- ufix1
  SIGNAL reg_enb_B_fx_1_16_5_1_1          : std_logic;  -- ufix1
  SIGNAL data_in_B_fx_1_16_5              : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL data_reg_B_fx_1_16_5_1_1         : signed(15 DOWNTO 0);  -- sfix16_En5

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  read_C_int32_signed <= signed(read_C_int32);

  read_C_uint32_unsigned <= unsigned(read_C_uint32);

  
  decode_sel_C_float_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0080#, 14) ELSE
      '0';

  
  decode_sel_C_uint32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  
  decode_sel_C_int32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_C_int32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_C_int32 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        read_reg_C_int32 <= read_C_int32_signed;
      END IF;
    END IF;
  END PROCESS reg_C_int32_process;


  data_slice_C_int32_1 <= unsigned(read_reg_C_int32);

  
  decode_rd_C_int32_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_C_int32_1_1 = '0' ELSE
      data_slice_C_int32_1;

  reg_C_uint32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_C_uint32 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_C_uint32 <= read_C_uint32_unsigned;
      END IF;
    END IF;
  END PROCESS reg_C_uint32_process;


  
  decode_rd_C_uint32_1_1 <= decode_rd_C_int32_1_1 WHEN decode_sel_C_uint32_1_1 = '0' ELSE
      read_reg_C_uint32;

  
  decode_sel_C_float <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0084#, 14) ELSE
      '0';

  strobe_sel_C_float <= decode_sel_C_float AND wr_enb;

  const_zero <= '0';

  data_write_unsigned <= unsigned(data_write);

  strobe_in_C_float <= data_write_unsigned(0);

  
  strobe_sw_C_float <= const_zero WHEN strobe_sel_C_float = '0' ELSE
      strobe_in_C_float;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_C_float <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_C_float <= strobe_sw_C_float;
      END IF;
    END IF;
  END PROCESS reg_process;


  outputgen2: FOR k IN 0 TO 3 GENERATE
    read_C_float_unsigned(k) <= unsigned(read_C_float(k));
  END GENERATE;

  reg_C_float_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_C_float(0) <= to_unsigned(0, 32);
        sync_reg_C_float(1) <= to_unsigned(0, 32);
        sync_reg_C_float(2) <= to_unsigned(0, 32);
        sync_reg_C_float(3) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_C_float = '1' THEN
        sync_reg_C_float(0) <= read_C_float_unsigned(0);
        sync_reg_C_float(1) <= read_C_float_unsigned(1);
        sync_reg_C_float(2) <= read_C_float_unsigned(2);
        sync_reg_C_float(3) <= read_C_float_unsigned(3);
      END IF;
    END IF;
  END PROCESS reg_C_float_process;


  data_slice_C_float_1(0) <= sync_reg_C_float(0);
  data_slice_C_float_1(1) <= sync_reg_C_float(1);
  data_slice_C_float_1(2) <= sync_reg_C_float(2);
  data_slice_C_float_1(3) <= sync_reg_C_float(3);

  
  decode_sel_C_float_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0081#, 14) ELSE
      '0';

  data_slice_C_float_1_0 <= data_slice_C_float_1(0);

  
  decode_rd_C_float_1_1 <= decode_rd_C_uint32_1_1 WHEN decode_sel_C_float_1_1 = '0' ELSE
      data_slice_C_float_1_0;

  
  decode_sel_C_float_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0082#, 14) ELSE
      '0';

  data_slice_C_float_1_1 <= data_slice_C_float_1(1);

  
  decode_rd_C_float_1_2 <= decode_rd_C_float_1_1 WHEN decode_sel_C_float_1_2 = '0' ELSE
      data_slice_C_float_1_1;

  
  decode_sel_C_float_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0083#, 14) ELSE
      '0';

  data_slice_C_float_1_2 <= data_slice_C_float_1(2);

  
  decode_rd_C_float_1_3 <= decode_rd_C_float_1_2 WHEN decode_sel_C_float_1_3 = '0' ELSE
      data_slice_C_float_1_2;

  read_C_fx_1_16_5_signed <= signed(read_C_fx_1_16_5);

  
  decode_sel_C_fx_1_16_5_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0098#, 14) ELSE
      '0';

  data_slice_C_float_1_3 <= data_slice_C_float_1(3);

  
  decode_rd_C_float_1_4 <= decode_rd_C_float_1_3 WHEN decode_sel_C_float_1_4 = '0' ELSE
      data_slice_C_float_1_3;

  reg_C_fx_1_16_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_C_fx_1_16_5 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        read_reg_C_fx_1_16_5 <= read_C_fx_1_16_5_signed;
      END IF;
    END IF;
  END PROCESS reg_C_fx_1_16_5_process;


  data_slice_C_fx_1_16_5_1 <= unsigned(resize(read_reg_C_fx_1_16_5, 32));

  
  decode_rd_C_fx_1_16_5_1_1 <= decode_rd_C_float_1_4 WHEN decode_sel_C_fx_1_16_5_1_1 = '0' ELSE
      data_slice_C_fx_1_16_5_1;

  data_read <= std_logic_vector(decode_rd_C_fx_1_16_5_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

  
  decode_sel_A_float <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  strobe_sel_A_float <= decode_sel_A_float AND wr_enb;

  const_zero_1 <= '0';

  strobe_in_A_float <= data_write_unsigned(0);

  
  strobe_sw_A_float <= const_zero_1 WHEN strobe_sel_A_float = '0' ELSE
      strobe_in_A_float;

  
  decode_sel_A_float_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_A_float_1_1 <= decode_sel_A_float_1_1 AND wr_enb;

  
  decode_sel_A_float_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_A_float_2_1 <= decode_sel_A_float_2_1 AND wr_enb;

  
  decode_sel_A_float_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_A_float_3_1 <= decode_sel_A_float_3_1 AND wr_enb;

  
  decode_sel_A_float_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_A_float_4_1 <= decode_sel_A_float_4_1 AND wr_enb;

  reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_A_float <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_A_float <= strobe_sw_A_float;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_A_float_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_A_float_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_A_float_1_1 = '1' THEN
        data_reg_A_float_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_A_float_1_1_process;


  reg_A_float_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_A_float_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_A_float_2_1 = '1' THEN
        data_reg_A_float_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_A_float_2_1_process;


  reg_A_float_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_A_float_3_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_A_float_3_1 = '1' THEN
        data_reg_A_float_3_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_A_float_3_1_process;


  reg_A_float_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_A_float_4_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_A_float_4_1 = '1' THEN
        data_reg_A_float_4_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_A_float_4_1_process;


  write_reg_A_float(0) <= data_reg_A_float_1_1;
  write_reg_A_float(1) <= data_reg_A_float_2_1;
  write_reg_A_float(2) <= data_reg_A_float_3_1;
  write_reg_A_float(3) <= data_reg_A_float_4_1;

  sync_reg_A_float_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_A_float_1(0) <= to_unsigned(0, 32);
        sync_reg_A_float_1(1) <= to_unsigned(0, 32);
        sync_reg_A_float_1(2) <= to_unsigned(0, 32);
        sync_reg_A_float_1(3) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_A_float = '1' THEN
        sync_reg_A_float_1(0) <= write_reg_A_float(0);
        sync_reg_A_float_1(1) <= write_reg_A_float(1);
        sync_reg_A_float_1(2) <= write_reg_A_float(2);
        sync_reg_A_float_1(3) <= write_reg_A_float(3);
      END IF;
    END IF;
  END PROCESS sync_reg_A_float_process;


  outputgen1: FOR k IN 0 TO 3 GENERATE
    write_A_float(k) <= std_logic_vector(sync_reg_A_float_1(k));
  END GENERATE;

  
  decode_sel_B_float <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  strobe_sel_B_float <= decode_sel_B_float AND wr_enb;

  const_zero_2 <= '0';

  strobe_in_B_float <= data_write_unsigned(0);

  
  strobe_sw_B_float <= const_zero_2 WHEN strobe_sel_B_float = '0' ELSE
      strobe_in_B_float;

  
  decode_sel_B_float_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_B_float_1_1 <= decode_sel_B_float_1_1 AND wr_enb;

  
  decode_sel_B_float_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_B_float_2_1 <= decode_sel_B_float_2_1 AND wr_enb;

  
  decode_sel_B_float_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_B_float_3_1 <= decode_sel_B_float_3_1 AND wr_enb;

  
  decode_sel_B_float_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  reg_enb_B_float_4_1 <= decode_sel_B_float_4_1 AND wr_enb;

  reg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_B_float <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_B_float <= strobe_sw_B_float;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  reg_B_float_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_B_float_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_B_float_1_1 = '1' THEN
        data_reg_B_float_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_B_float_1_1_process;


  reg_B_float_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_B_float_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_B_float_2_1 = '1' THEN
        data_reg_B_float_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_B_float_2_1_process;


  reg_B_float_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_B_float_3_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_B_float_3_1 = '1' THEN
        data_reg_B_float_3_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_B_float_3_1_process;


  reg_B_float_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_B_float_4_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_B_float_4_1 = '1' THEN
        data_reg_B_float_4_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_B_float_4_1_process;


  write_reg_B_float(0) <= data_reg_B_float_1_1;
  write_reg_B_float(1) <= data_reg_B_float_2_1;
  write_reg_B_float(2) <= data_reg_B_float_3_1;
  write_reg_B_float(3) <= data_reg_B_float_4_1;

  sync_reg_B_float_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_B_float_1(0) <= to_unsigned(0, 32);
        sync_reg_B_float_1(1) <= to_unsigned(0, 32);
        sync_reg_B_float_1(2) <= to_unsigned(0, 32);
        sync_reg_B_float_1(3) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_B_float = '1' THEN
        sync_reg_B_float_1(0) <= write_reg_B_float(0);
        sync_reg_B_float_1(1) <= write_reg_B_float(1);
        sync_reg_B_float_1(2) <= write_reg_B_float(2);
        sync_reg_B_float_1(3) <= write_reg_B_float(3);
      END IF;
    END IF;
  END PROCESS sync_reg_B_float_process;


  outputgen: FOR k IN 0 TO 3 GENERATE
    write_B_float(k) <= std_logic_vector(sync_reg_B_float_1(k));
  END GENERATE;

  
  decode_sel_A_uint32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  reg_enb_A_uint32_1_1 <= decode_sel_A_uint32_1_1 AND wr_enb;

  reg_A_uint32_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_A_uint32_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_A_uint32_1_1 = '1' THEN
        data_reg_A_uint32_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_A_uint32_1_1_process;


  write_A_uint32 <= std_logic_vector(data_reg_A_uint32_1_1);

  
  decode_sel_B_uint32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0058#, 14) ELSE
      '0';

  reg_enb_B_uint32_1_1 <= decode_sel_B_uint32_1_1 AND wr_enb;

  reg_B_uint32_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_B_uint32_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_B_uint32_1_1 = '1' THEN
        data_reg_B_uint32_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_B_uint32_1_1_process;


  write_B_uint32 <= std_logic_vector(data_reg_B_uint32_1_1);

  
  decode_sel_A_int32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0060#, 14) ELSE
      '0';

  reg_enb_A_int32_1_1 <= decode_sel_A_int32_1_1 AND wr_enb;

  data_in_A_int32 <= signed(data_write_unsigned);

  reg_A_int32_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_A_int32_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_A_int32_1_1 = '1' THEN
        data_reg_A_int32_1_1 <= data_in_A_int32;
      END IF;
    END IF;
  END PROCESS reg_A_int32_1_1_process;


  write_A_int32 <= std_logic_vector(data_reg_A_int32_1_1);

  
  decode_sel_B_int32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0068#, 14) ELSE
      '0';

  reg_enb_B_int32_1_1 <= decode_sel_B_int32_1_1 AND wr_enb;

  data_in_B_int32 <= signed(data_write_unsigned);

  reg_B_int32_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_B_int32_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_B_int32_1_1 = '1' THEN
        data_reg_B_int32_1_1 <= data_in_B_int32;
      END IF;
    END IF;
  END PROCESS reg_B_int32_1_1_process;


  write_B_int32 <= std_logic_vector(data_reg_B_int32_1_1);

  
  decode_sel_A_fx_1_16_5_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0070#, 14) ELSE
      '0';

  reg_enb_A_fx_1_16_5_1_1 <= decode_sel_A_fx_1_16_5_1_1 AND wr_enb;

  data_in_A_fx_1_16_5 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_A_fx_1_16_5_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_A_fx_1_16_5_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_A_fx_1_16_5_1_1 = '1' THEN
        data_reg_A_fx_1_16_5_1_1 <= data_in_A_fx_1_16_5;
      END IF;
    END IF;
  END PROCESS reg_A_fx_1_16_5_1_1_process;


  write_A_fx_1_16_5 <= std_logic_vector(data_reg_A_fx_1_16_5_1_1);

  
  decode_sel_B_fx_1_16_5_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0078#, 14) ELSE
      '0';

  reg_enb_B_fx_1_16_5_1_1 <= decode_sel_B_fx_1_16_5_1_1 AND wr_enb;

  data_in_B_fx_1_16_5 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_B_fx_1_16_5_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_B_fx_1_16_5_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_B_fx_1_16_5_1_1 = '1' THEN
        data_reg_B_fx_1_16_5_1_1 <= data_in_B_fx_1_16_5;
      END IF;
    END IF;
  END PROCESS reg_B_fx_1_16_5_1_1_process;


  write_B_fx_1_16_5 <= std_logic_vector(data_reg_B_fx_1_16_5_1_1);

END rtl;

