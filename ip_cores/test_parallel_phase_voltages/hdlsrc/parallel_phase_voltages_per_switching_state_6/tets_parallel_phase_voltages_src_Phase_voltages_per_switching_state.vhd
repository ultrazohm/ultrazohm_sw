-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\test_parallel_phase_voltages\hdlsrc\parallel_phase_voltages_per_switching_state_6\tets_parallel_phase_voltages_src_Phase_voltages_per_switching_state.vhd
-- Created: 2022-10-07 10:12:26
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- done                          ce_out        1e-08
-- phase_voltages_per_switching_state_0ce_out        1e-08
-- phase_voltages_per_switching_state_1ce_out        1e-08
-- phase_voltages_per_switching_state_2ce_out        1e-08
-- phase_voltages_per_switching_state_3ce_out        1e-08
-- phase_voltages_per_switching_state_4ce_out        1e-08
-- phase_voltages_per_switching_state_5ce_out        1e-08
-- phase_voltages_per_switching_state_6ce_out        1e-08
-- phase_voltages_per_switching_state_7ce_out        1e-08
-- phase_voltages_per_switching_state_8ce_out        1e-08
-- phase_voltages_per_switching_state_9ce_out        1e-08
-- phase_voltages_per_switching_state_10ce_out        1e-08
-- phase_voltages_per_switching_state_11ce_out        1e-08
-- phase_voltages_per_switching_state_12ce_out        1e-08
-- phase_voltages_per_switching_state_13ce_out        1e-08
-- phase_voltages_per_switching_state_14ce_out        1e-08
-- phase_voltages_per_switching_state_15ce_out        1e-08
-- phase_voltages_per_switching_state_16ce_out        1e-08
-- phase_voltages_per_switching_state_17ce_out        1e-08
-- phase_voltages_per_switching_state_18ce_out        1e-08
-- phase_voltages_per_switching_state_19ce_out        1e-08
-- phase_voltages_per_switching_state_20ce_out        1e-08
-- phase_voltages_per_switching_state_21ce_out        1e-08
-- phase_voltages_per_switching_state_22ce_out        1e-08
-- phase_voltages_per_switching_state_23ce_out        1e-08
-- phase_voltages_per_switching_state_24ce_out        1e-08
-- phase_voltages_per_switching_state_25ce_out        1e-08
-- phase_voltages_per_switching_state_26ce_out        1e-08
-- phase_voltages_per_switching_state_27ce_out        1e-08
-- phase_voltages_per_switching_state_28ce_out        1e-08
-- phase_voltages_per_switching_state_29ce_out        1e-08
-- phase_voltages_per_switching_state_30ce_out        1e-08
-- phase_voltages_per_switching_state_31ce_out        1e-08
-- phase_voltages_per_switching_state_32ce_out        1e-08
-- phase_voltages_per_switching_state_33ce_out        1e-08
-- phase_voltages_per_switching_state_34ce_out        1e-08
-- phase_voltages_per_switching_state_35ce_out        1e-08
-- phase_voltages_per_switching_state_36ce_out        1e-08
-- phase_voltages_per_switching_state_37ce_out        1e-08
-- phase_voltages_per_switching_state_38ce_out        1e-08
-- phase_voltages_per_switching_state_39ce_out        1e-08
-- phase_voltages_per_switching_state_40ce_out        1e-08
-- phase_voltages_per_switching_state_41ce_out        1e-08
-- phase_voltages_per_switching_state_42ce_out        1e-08
-- phase_voltages_per_switching_state_43ce_out        1e-08
-- phase_voltages_per_switching_state_44ce_out        1e-08
-- phase_voltages_per_switching_state_45ce_out        1e-08
-- phase_voltages_per_switching_state_46ce_out        1e-08
-- phase_voltages_per_switching_state_47ce_out        1e-08
-- phase_voltages_per_switching_state_48ce_out        1e-08
-- phase_voltages_per_switching_state_49ce_out        1e-08
-- phase_voltages_per_switching_state_50ce_out        1e-08
-- phase_voltages_per_switching_state_51ce_out        1e-08
-- phase_voltages_per_switching_state_52ce_out        1e-08
-- phase_voltages_per_switching_state_53ce_out        1e-08
-- phase_voltages_per_switching_state_54ce_out        1e-08
-- phase_voltages_per_switching_state_55ce_out        1e-08
-- phase_voltages_per_switching_state_56ce_out        1e-08
-- phase_voltages_per_switching_state_57ce_out        1e-08
-- phase_voltages_per_switching_state_58ce_out        1e-08
-- phase_voltages_per_switching_state_59ce_out        1e-08
-- phase_voltages_per_switching_state_60ce_out        1e-08
-- phase_voltages_per_switching_state_61ce_out        1e-08
-- phase_voltages_per_switching_state_62ce_out        1e-08
-- phase_voltages_per_switching_state_63ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: tets_parallel_phase_voltages_src_Phase_voltages_per_switching_state
-- Source Path: parallel_phase_voltages_per_switching_state_6/Phase_voltages_per_switching_state
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.tets_parallel_phase_voltages_src_Phase_voltages_per_switching_state_pkg.ALL;

ENTITY tets_parallel_phase_voltages_src_Phase_voltages_per_switching_state IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        theta_el                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        theta_el_offset_AXI               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        u_dc_link_voltage_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Index                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        valid_in_delay_compensation       :   IN    std_logic;
        valid_in_min_cost_function_and_vopt :   IN    std_logic;
        valid_in_ADC                      :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        done                              :   OUT   std_logic;
        phase_voltages_per_switching_state_0 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_1 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_2 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_3 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_4 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_5 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_6 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_7 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_8 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_9 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_10 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_11 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_12 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_13 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_14 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_15 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_16 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_17 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_18 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_19 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_20 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_21 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_22 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_23 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_24 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_25 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_26 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_27 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_28 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_29 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_30 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_31 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_32 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_33 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_34 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_35 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_36 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_37 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_38 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_39 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_40 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_41 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_42 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_43 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_44 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_45 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_46 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_47 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_48 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_49 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_50 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_51 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_52 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_53 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_54 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_55 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_56 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_57 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_58 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_59 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_60 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_61 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_62 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_63 :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
        );
END tets_parallel_phase_voltages_src_Phase_voltages_per_switching_state;


ARCHITECTURE rtl OF tets_parallel_phase_voltages_src_Phase_voltages_per_switching_state IS

  -- Component Declarations
  COMPONENT tets_parallel_phase_voltages_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT tets_parallel_phase_voltages_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT tets_parallel_phase_voltages_src_nfp_convert_sfix_24_En20_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT tets_parallel_phase_voltages_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT tets_parallel_phase_voltages_src_nfp_relop_single_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT tets_parallel_phase_voltages_src_nfp_relop_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT tets_parallel_phase_voltages_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT tets_parallel_phase_voltages_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          theta_el_with_offset15          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          u_dc_link_voltage15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Index_15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          d_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state8  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state8  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state8  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state8  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state9  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state9  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state9  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state9  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state10 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state10 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state10 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state10 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state11 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state11 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state11 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state11 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state12 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state12 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state12 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state12 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state13 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state13 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state13 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state13 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state14 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state14 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state14 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state14 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state15 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state15 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state15 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state15 :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : tets_parallel_phase_voltages_src_Detect_Rise_Positive1
    USE ENTITY work.tets_parallel_phase_voltages_src_Detect_Rise_Positive1(rtl);

  FOR ALL : tets_parallel_phase_voltages_src_Detect_Rise_Positive
    USE ENTITY work.tets_parallel_phase_voltages_src_Detect_Rise_Positive(rtl);

  FOR ALL : tets_parallel_phase_voltages_src_nfp_convert_sfix_24_En20_to_single
    USE ENTITY work.tets_parallel_phase_voltages_src_nfp_convert_sfix_24_En20_to_single(rtl);

  FOR ALL : tets_parallel_phase_voltages_src_nfp_sub_single
    USE ENTITY work.tets_parallel_phase_voltages_src_nfp_sub_single(rtl);

  FOR ALL : tets_parallel_phase_voltages_src_nfp_relop_single_block
    USE ENTITY work.tets_parallel_phase_voltages_src_nfp_relop_single_block(rtl);

  FOR ALL : tets_parallel_phase_voltages_src_nfp_relop_single
    USE ENTITY work.tets_parallel_phase_voltages_src_nfp_relop_single(rtl);

  FOR ALL : tets_parallel_phase_voltages_src_nfp_add_single
    USE ENTITY work.tets_parallel_phase_voltages_src_nfp_add_single(rtl);

  FOR ALL : tets_parallel_phase_voltages_src_Subsystem
    USE ENTITY work.tets_parallel_phase_voltages_src_Subsystem(rtl);

  FOR ALL : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    USE ENTITY work.tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay12_reg                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay12_reg_next                 : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay11_reg                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay11_reg_next                 : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL delayMatch9_reg                  : std_logic_vector(0 TO 67);  -- ufix1 [68]
  SIGNAL delayMatch9_reg_next             : std_logic_vector(0 TO 67);  -- ufix1 [68]
  SIGNAL Delay3_out1_1                    : std_logic;
  SIGNAL Delay21_out1                     : std_logic;
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(0 TO 17);  -- ufix1 [18]
  SIGNAL delayMatch8_reg_next             : std_logic_vector(0 TO 17);  -- ufix1 [18]
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(0 TO 17);  -- ufix1 [18]
  SIGNAL delayMatch7_reg_next             : std_logic_vector(0 TO 17);  -- ufix1 [18]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL theta_el_signed                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay8_out1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL End_Cycle_3                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL End_Cycle_4                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch3_reg                  : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch3_reg_next             : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Delay9_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Compare_Limit_Low_out1           : std_logic;
  SIGNAL const_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Compare_Limit_High_out1          : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL delayMatch4_reg_next             : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL Compare_Limit_High_out1_1        : std_logic;
  SIGNAL delayMatch5_reg                  : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch5_reg_next             : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Add1_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL Compare_Limit_Low_out1_1         : std_logic;
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_Limit_High_out1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL End_Cycle_5                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay13_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Delay10_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Index_signed                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay2_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Switch_on3_out1                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay14_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL d_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_8  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_8  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_8  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_8  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_9  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_9  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_9  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_9  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_10 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_10 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_10 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_10 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_11 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_11 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_11 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_11 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_12 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_12 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_12 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_12 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_13 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_13 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_13 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_13 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_14 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_14 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_14 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_14 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_15 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_15 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_15 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_15 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_2_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_3_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_4_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_5_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_6_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_7_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_8_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_9_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_10_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_11_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_12_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_13_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_14_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_15_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_16_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_17_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_18_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_19_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_20_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_21_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_22_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_23_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_24_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_25_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_26_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_27_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_28_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_29_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_30_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_31_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_32_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_33_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_34_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_35_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_36_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_37_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_38_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_39_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_40_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_41_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_42_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_43_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_44_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_45_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_46_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_47_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_48_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_49_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_50_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_51_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_52_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_53_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_54_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_55_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_56_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_57_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_58_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_59_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_60_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_61_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_62_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_63_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_64_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24

BEGIN
  u_Detect_Rise_Positive1 : tets_parallel_phase_voltages_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Logical_Operator_out1,
              Y => End_Cycle
              );

  u_Detect_Rise_Positive : tets_parallel_phase_voltages_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay21_out1,
              Y => End_Cycle_1
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_sfix_24_En20_to_single : tets_parallel_phase_voltages_src_nfp_convert_sfix_24_En20_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay8_out1),  -- sfix24_En20
              nfp_out => End_Cycle_3  -- single
              );

  u_nfp_sub_comp : tets_parallel_phase_voltages_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => End_Cycle_4,  -- single
              nfp_in2 => Delay9_out1_1,  -- single
              nfp_out => Add1_out1  -- single
              );

  u_nfp_relop_comp : tets_parallel_phase_voltages_src_nfp_relop_single_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add1_out1,  -- single
              nfp_in2 => const,  -- single
              nfp_out1 => Compare_Limit_Low_out1
              );

  u_nfp_relop_comp_1 : tets_parallel_phase_voltages_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add1_out1,  -- single
              nfp_in2 => const_1,  -- single
              nfp_out1 => Compare_Limit_High_out1
              );

  u_nfp_sub_comp_1 : tets_parallel_phase_voltages_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add1_out1,  -- single
              nfp_in2 => Constant_out1,  -- single
              nfp_out => Add2_out1  -- single
              );

  u_nfp_add_comp : tets_parallel_phase_voltages_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Add1_out1,  -- single
              nfp_in2 => Constant1_out1,  -- single
              nfp_out => Add3_out1  -- single
              );

  u_Subsystem : tets_parallel_phase_voltages_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              theta_el_with_offset15 => Switch_on13_out1,  -- single
              u_dc_link_voltage15 => Switch_on1_out1,  -- single
              Index_15 => std_logic_vector(Switch_on3_out1),  -- int32
              d_voltage_per_switching_state => d_voltage_per_switching_state,  -- single
              q_voltage_per_switching_state => q_voltage_per_switching_state,  -- single
              x_voltage_per_switching_state => x_voltage_per_switching_state,  -- single
              y_voltage_per_switching_state => y_voltage_per_switching_state,  -- single
              d_voltage_per_switching_state1 => d_voltage_per_switching_state_1,  -- single
              q_voltage_per_switching_state1 => q_voltage_per_switching_state_1,  -- single
              x_voltage_per_switching_state1 => x_voltage_per_switching_state_1,  -- single
              y_voltage_per_switching_state1 => y_voltage_per_switching_state_1,  -- single
              d_voltage_per_switching_state2 => d_voltage_per_switching_state_2,  -- single
              q_voltage_per_switching_state2 => q_voltage_per_switching_state_2,  -- single
              x_voltage_per_switching_state2 => x_voltage_per_switching_state_2,  -- single
              y_voltage_per_switching_state2 => y_voltage_per_switching_state_2,  -- single
              d_voltage_per_switching_state3 => d_voltage_per_switching_state_3,  -- single
              q_voltage_per_switching_state3 => q_voltage_per_switching_state_3,  -- single
              x_voltage_per_switching_state3 => x_voltage_per_switching_state_3,  -- single
              y_voltage_per_switching_state3 => y_voltage_per_switching_state_3,  -- single
              d_voltage_per_switching_state4 => d_voltage_per_switching_state_4,  -- single
              q_voltage_per_switching_state4 => q_voltage_per_switching_state_4,  -- single
              x_voltage_per_switching_state4 => x_voltage_per_switching_state_4,  -- single
              y_voltage_per_switching_state4 => y_voltage_per_switching_state_4,  -- single
              d_voltage_per_switching_state5 => d_voltage_per_switching_state_5,  -- single
              q_voltage_per_switching_state5 => q_voltage_per_switching_state_5,  -- single
              x_voltage_per_switching_state5 => x_voltage_per_switching_state_5,  -- single
              y_voltage_per_switching_state5 => y_voltage_per_switching_state_5,  -- single
              d_voltage_per_switching_state6 => d_voltage_per_switching_state_6,  -- single
              q_voltage_per_switching_state6 => q_voltage_per_switching_state_6,  -- single
              x_voltage_per_switching_state6 => x_voltage_per_switching_state_6,  -- single
              y_voltage_per_switching_state6 => y_voltage_per_switching_state_6,  -- single
              d_voltage_per_switching_state7 => d_voltage_per_switching_state_7,  -- single
              q_voltage_per_switching_state7 => q_voltage_per_switching_state_7,  -- single
              x_voltage_per_switching_state7 => x_voltage_per_switching_state_7,  -- single
              y_voltage_per_switching_state7 => y_voltage_per_switching_state_7,  -- single
              d_voltage_per_switching_state8 => d_voltage_per_switching_state_8,  -- single
              q_voltage_per_switching_state8 => q_voltage_per_switching_state_8,  -- single
              x_voltage_per_switching_state8 => x_voltage_per_switching_state_8,  -- single
              y_voltage_per_switching_state8 => y_voltage_per_switching_state_8,  -- single
              d_voltage_per_switching_state9 => d_voltage_per_switching_state_9,  -- single
              q_voltage_per_switching_state9 => q_voltage_per_switching_state_9,  -- single
              x_voltage_per_switching_state9 => x_voltage_per_switching_state_9,  -- single
              y_voltage_per_switching_state9 => y_voltage_per_switching_state_9,  -- single
              d_voltage_per_switching_state10 => d_voltage_per_switching_state_10,  -- single
              q_voltage_per_switching_state10 => q_voltage_per_switching_state_10,  -- single
              x_voltage_per_switching_state10 => x_voltage_per_switching_state_10,  -- single
              y_voltage_per_switching_state10 => y_voltage_per_switching_state_10,  -- single
              d_voltage_per_switching_state11 => d_voltage_per_switching_state_11,  -- single
              q_voltage_per_switching_state11 => q_voltage_per_switching_state_11,  -- single
              x_voltage_per_switching_state11 => x_voltage_per_switching_state_11,  -- single
              y_voltage_per_switching_state11 => y_voltage_per_switching_state_11,  -- single
              d_voltage_per_switching_state12 => d_voltage_per_switching_state_12,  -- single
              q_voltage_per_switching_state12 => q_voltage_per_switching_state_12,  -- single
              x_voltage_per_switching_state12 => x_voltage_per_switching_state_12,  -- single
              y_voltage_per_switching_state12 => y_voltage_per_switching_state_12,  -- single
              d_voltage_per_switching_state13 => d_voltage_per_switching_state_13,  -- single
              q_voltage_per_switching_state13 => q_voltage_per_switching_state_13,  -- single
              x_voltage_per_switching_state13 => x_voltage_per_switching_state_13,  -- single
              y_voltage_per_switching_state13 => y_voltage_per_switching_state_13,  -- single
              d_voltage_per_switching_state14 => d_voltage_per_switching_state_14,  -- single
              q_voltage_per_switching_state14 => q_voltage_per_switching_state_14,  -- single
              x_voltage_per_switching_state14 => x_voltage_per_switching_state_14,  -- single
              y_voltage_per_switching_state14 => y_voltage_per_switching_state_14,  -- single
              d_voltage_per_switching_state15 => d_voltage_per_switching_state_15,  -- single
              q_voltage_per_switching_state15 => q_voltage_per_switching_state_15,  -- single
              x_voltage_per_switching_state15 => x_voltage_per_switching_state_15,  -- single
              y_voltage_per_switching_state15 => y_voltage_per_switching_state_15  -- single
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state,  -- single
              nfp_out => nfp_out_1_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_1 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state,  -- single
              nfp_out => nfp_out_2_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_2 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state,  -- single
              nfp_out => nfp_out_3_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_3 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state,  -- single
              nfp_out => nfp_out_4_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_4 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_1,  -- single
              nfp_out => nfp_out_5_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_5 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_1,  -- single
              nfp_out => nfp_out_6_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_6 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_1,  -- single
              nfp_out => nfp_out_7_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_7 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_1,  -- single
              nfp_out => nfp_out_8_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_8 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_2,  -- single
              nfp_out => nfp_out_9_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_9 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_2,  -- single
              nfp_out => nfp_out_10_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_10 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_2,  -- single
              nfp_out => nfp_out_11_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_11 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_2,  -- single
              nfp_out => nfp_out_12_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_12 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_3,  -- single
              nfp_out => nfp_out_13_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_13 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_3,  -- single
              nfp_out => nfp_out_14_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_14 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_3,  -- single
              nfp_out => nfp_out_15_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_15 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_3,  -- single
              nfp_out => nfp_out_16_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_16 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_4,  -- single
              nfp_out => nfp_out_17_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_17 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_4,  -- single
              nfp_out => nfp_out_18_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_18 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_4,  -- single
              nfp_out => nfp_out_19_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_19 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_4,  -- single
              nfp_out => nfp_out_20_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_20 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_5,  -- single
              nfp_out => nfp_out_21_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_21 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_5,  -- single
              nfp_out => nfp_out_22_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_22 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_5,  -- single
              nfp_out => nfp_out_23_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_23 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_5,  -- single
              nfp_out => nfp_out_24_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_24 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_6,  -- single
              nfp_out => nfp_out_25_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_25 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_6,  -- single
              nfp_out => nfp_out_26_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_26 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_6,  -- single
              nfp_out => nfp_out_27_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_27 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_6,  -- single
              nfp_out => nfp_out_28_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_28 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_7,  -- single
              nfp_out => nfp_out_29_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_29 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_7,  -- single
              nfp_out => nfp_out_30_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_30 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_7,  -- single
              nfp_out => nfp_out_31_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_31 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_7,  -- single
              nfp_out => nfp_out_32_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_32 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_8,  -- single
              nfp_out => nfp_out_33_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_33 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_8,  -- single
              nfp_out => nfp_out_34_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_34 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_8,  -- single
              nfp_out => nfp_out_35_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_35 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_8,  -- single
              nfp_out => nfp_out_36_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_36 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_9,  -- single
              nfp_out => nfp_out_37_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_37 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_9,  -- single
              nfp_out => nfp_out_38_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_38 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_9,  -- single
              nfp_out => nfp_out_39_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_39 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_9,  -- single
              nfp_out => nfp_out_40_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_40 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_10,  -- single
              nfp_out => nfp_out_41_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_41 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_10,  -- single
              nfp_out => nfp_out_42_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_42 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_10,  -- single
              nfp_out => nfp_out_43_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_43 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_10,  -- single
              nfp_out => nfp_out_44_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_44 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_11,  -- single
              nfp_out => nfp_out_45_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_45 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_11,  -- single
              nfp_out => nfp_out_46_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_46 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_11,  -- single
              nfp_out => nfp_out_47_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_47 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_11,  -- single
              nfp_out => nfp_out_48_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_48 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_12,  -- single
              nfp_out => nfp_out_49_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_49 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_12,  -- single
              nfp_out => nfp_out_50_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_50 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_12,  -- single
              nfp_out => nfp_out_51_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_51 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_12,  -- single
              nfp_out => nfp_out_52_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_52 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_13,  -- single
              nfp_out => nfp_out_53_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_53 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_13,  -- single
              nfp_out => nfp_out_54_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_54 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_13,  -- single
              nfp_out => nfp_out_55_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_55 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_13,  -- single
              nfp_out => nfp_out_56_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_56 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_14,  -- single
              nfp_out => nfp_out_57_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_57 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_14,  -- single
              nfp_out => nfp_out_58_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_58 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_14,  -- single
              nfp_out => nfp_out_59_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_59 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_14,  -- single
              nfp_out => nfp_out_60_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_60 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_15,  -- single
              nfp_out => nfp_out_61_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_61 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_15,  -- single
              nfp_out => nfp_out_62_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_62 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_15,  -- single
              nfp_out => nfp_out_63_1  -- sfix24_En11
              );

  u_parallel_phase_voltages_per_switching_state_6_Phase_voltages_per_switching_state_nfp_convert_single_to_sfix_24_En11_63 : tets_parallel_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_15,  -- single
              nfp_out => nfp_out_64_1  -- sfix24_En11
              );

  enb <= clk_enable;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_reg(0) <= '0';
        Delay12_reg(1) <= '0';
        Delay12_reg(2) <= '0';
      ELSIF enb = '1' THEN
        Delay12_reg(0) <= Delay12_reg_next(0);
        Delay12_reg(1) <= Delay12_reg_next(1);
        Delay12_reg(2) <= Delay12_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(2);
  Delay12_reg_next(0) <= valid_in_delay_compensation;
  Delay12_reg_next(1) <= Delay12_reg(0);
  Delay12_reg_next(2) <= Delay12_reg(1);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_reg(0) <= '0';
        Delay11_reg(1) <= '0';
        Delay11_reg(2) <= '0';
      ELSIF enb = '1' THEN
        Delay11_reg(0) <= Delay11_reg_next(0);
        Delay11_reg(1) <= Delay11_reg_next(1);
        Delay11_reg(2) <= Delay11_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(2);
  Delay11_reg_next(0) <= valid_in_min_cost_function_and_vopt;
  Delay11_reg_next(1) <= Delay11_reg(0);
  Delay11_reg_next(2) <= Delay11_reg(1);

  Logical_Operator_out1 <= Delay12_out1 OR Delay11_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch9_reg(0) <= '0';
        delayMatch9_reg(1) <= '0';
        delayMatch9_reg(2) <= '0';
        delayMatch9_reg(3) <= '0';
        delayMatch9_reg(4) <= '0';
        delayMatch9_reg(5) <= '0';
        delayMatch9_reg(6) <= '0';
        delayMatch9_reg(7) <= '0';
        delayMatch9_reg(8) <= '0';
        delayMatch9_reg(9) <= '0';
        delayMatch9_reg(10) <= '0';
        delayMatch9_reg(11) <= '0';
        delayMatch9_reg(12) <= '0';
        delayMatch9_reg(13) <= '0';
        delayMatch9_reg(14) <= '0';
        delayMatch9_reg(15) <= '0';
        delayMatch9_reg(16) <= '0';
        delayMatch9_reg(17) <= '0';
        delayMatch9_reg(18) <= '0';
        delayMatch9_reg(19) <= '0';
        delayMatch9_reg(20) <= '0';
        delayMatch9_reg(21) <= '0';
        delayMatch9_reg(22) <= '0';
        delayMatch9_reg(23) <= '0';
        delayMatch9_reg(24) <= '0';
        delayMatch9_reg(25) <= '0';
        delayMatch9_reg(26) <= '0';
        delayMatch9_reg(27) <= '0';
        delayMatch9_reg(28) <= '0';
        delayMatch9_reg(29) <= '0';
        delayMatch9_reg(30) <= '0';
        delayMatch9_reg(31) <= '0';
        delayMatch9_reg(32) <= '0';
        delayMatch9_reg(33) <= '0';
        delayMatch9_reg(34) <= '0';
        delayMatch9_reg(35) <= '0';
        delayMatch9_reg(36) <= '0';
        delayMatch9_reg(37) <= '0';
        delayMatch9_reg(38) <= '0';
        delayMatch9_reg(39) <= '0';
        delayMatch9_reg(40) <= '0';
        delayMatch9_reg(41) <= '0';
        delayMatch9_reg(42) <= '0';
        delayMatch9_reg(43) <= '0';
        delayMatch9_reg(44) <= '0';
        delayMatch9_reg(45) <= '0';
        delayMatch9_reg(46) <= '0';
        delayMatch9_reg(47) <= '0';
        delayMatch9_reg(48) <= '0';
        delayMatch9_reg(49) <= '0';
        delayMatch9_reg(50) <= '0';
        delayMatch9_reg(51) <= '0';
        delayMatch9_reg(52) <= '0';
        delayMatch9_reg(53) <= '0';
        delayMatch9_reg(54) <= '0';
        delayMatch9_reg(55) <= '0';
        delayMatch9_reg(56) <= '0';
        delayMatch9_reg(57) <= '0';
        delayMatch9_reg(58) <= '0';
        delayMatch9_reg(59) <= '0';
        delayMatch9_reg(60) <= '0';
        delayMatch9_reg(61) <= '0';
        delayMatch9_reg(62) <= '0';
        delayMatch9_reg(63) <= '0';
        delayMatch9_reg(64) <= '0';
        delayMatch9_reg(65) <= '0';
        delayMatch9_reg(66) <= '0';
        delayMatch9_reg(67) <= '0';
      ELSIF enb = '1' THEN
        delayMatch9_reg(0) <= delayMatch9_reg_next(0);
        delayMatch9_reg(1) <= delayMatch9_reg_next(1);
        delayMatch9_reg(2) <= delayMatch9_reg_next(2);
        delayMatch9_reg(3) <= delayMatch9_reg_next(3);
        delayMatch9_reg(4) <= delayMatch9_reg_next(4);
        delayMatch9_reg(5) <= delayMatch9_reg_next(5);
        delayMatch9_reg(6) <= delayMatch9_reg_next(6);
        delayMatch9_reg(7) <= delayMatch9_reg_next(7);
        delayMatch9_reg(8) <= delayMatch9_reg_next(8);
        delayMatch9_reg(9) <= delayMatch9_reg_next(9);
        delayMatch9_reg(10) <= delayMatch9_reg_next(10);
        delayMatch9_reg(11) <= delayMatch9_reg_next(11);
        delayMatch9_reg(12) <= delayMatch9_reg_next(12);
        delayMatch9_reg(13) <= delayMatch9_reg_next(13);
        delayMatch9_reg(14) <= delayMatch9_reg_next(14);
        delayMatch9_reg(15) <= delayMatch9_reg_next(15);
        delayMatch9_reg(16) <= delayMatch9_reg_next(16);
        delayMatch9_reg(17) <= delayMatch9_reg_next(17);
        delayMatch9_reg(18) <= delayMatch9_reg_next(18);
        delayMatch9_reg(19) <= delayMatch9_reg_next(19);
        delayMatch9_reg(20) <= delayMatch9_reg_next(20);
        delayMatch9_reg(21) <= delayMatch9_reg_next(21);
        delayMatch9_reg(22) <= delayMatch9_reg_next(22);
        delayMatch9_reg(23) <= delayMatch9_reg_next(23);
        delayMatch9_reg(24) <= delayMatch9_reg_next(24);
        delayMatch9_reg(25) <= delayMatch9_reg_next(25);
        delayMatch9_reg(26) <= delayMatch9_reg_next(26);
        delayMatch9_reg(27) <= delayMatch9_reg_next(27);
        delayMatch9_reg(28) <= delayMatch9_reg_next(28);
        delayMatch9_reg(29) <= delayMatch9_reg_next(29);
        delayMatch9_reg(30) <= delayMatch9_reg_next(30);
        delayMatch9_reg(31) <= delayMatch9_reg_next(31);
        delayMatch9_reg(32) <= delayMatch9_reg_next(32);
        delayMatch9_reg(33) <= delayMatch9_reg_next(33);
        delayMatch9_reg(34) <= delayMatch9_reg_next(34);
        delayMatch9_reg(35) <= delayMatch9_reg_next(35);
        delayMatch9_reg(36) <= delayMatch9_reg_next(36);
        delayMatch9_reg(37) <= delayMatch9_reg_next(37);
        delayMatch9_reg(38) <= delayMatch9_reg_next(38);
        delayMatch9_reg(39) <= delayMatch9_reg_next(39);
        delayMatch9_reg(40) <= delayMatch9_reg_next(40);
        delayMatch9_reg(41) <= delayMatch9_reg_next(41);
        delayMatch9_reg(42) <= delayMatch9_reg_next(42);
        delayMatch9_reg(43) <= delayMatch9_reg_next(43);
        delayMatch9_reg(44) <= delayMatch9_reg_next(44);
        delayMatch9_reg(45) <= delayMatch9_reg_next(45);
        delayMatch9_reg(46) <= delayMatch9_reg_next(46);
        delayMatch9_reg(47) <= delayMatch9_reg_next(47);
        delayMatch9_reg(48) <= delayMatch9_reg_next(48);
        delayMatch9_reg(49) <= delayMatch9_reg_next(49);
        delayMatch9_reg(50) <= delayMatch9_reg_next(50);
        delayMatch9_reg(51) <= delayMatch9_reg_next(51);
        delayMatch9_reg(52) <= delayMatch9_reg_next(52);
        delayMatch9_reg(53) <= delayMatch9_reg_next(53);
        delayMatch9_reg(54) <= delayMatch9_reg_next(54);
        delayMatch9_reg(55) <= delayMatch9_reg_next(55);
        delayMatch9_reg(56) <= delayMatch9_reg_next(56);
        delayMatch9_reg(57) <= delayMatch9_reg_next(57);
        delayMatch9_reg(58) <= delayMatch9_reg_next(58);
        delayMatch9_reg(59) <= delayMatch9_reg_next(59);
        delayMatch9_reg(60) <= delayMatch9_reg_next(60);
        delayMatch9_reg(61) <= delayMatch9_reg_next(61);
        delayMatch9_reg(62) <= delayMatch9_reg_next(62);
        delayMatch9_reg(63) <= delayMatch9_reg_next(63);
        delayMatch9_reg(64) <= delayMatch9_reg_next(64);
        delayMatch9_reg(65) <= delayMatch9_reg_next(65);
        delayMatch9_reg(66) <= delayMatch9_reg_next(66);
        delayMatch9_reg(67) <= delayMatch9_reg_next(67);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  Delay3_out1_1 <= delayMatch9_reg(67);
  delayMatch9_reg_next(0) <= Delay3_out1;
  delayMatch9_reg_next(1) <= delayMatch9_reg(0);
  delayMatch9_reg_next(2) <= delayMatch9_reg(1);
  delayMatch9_reg_next(3) <= delayMatch9_reg(2);
  delayMatch9_reg_next(4) <= delayMatch9_reg(3);
  delayMatch9_reg_next(5) <= delayMatch9_reg(4);
  delayMatch9_reg_next(6) <= delayMatch9_reg(5);
  delayMatch9_reg_next(7) <= delayMatch9_reg(6);
  delayMatch9_reg_next(8) <= delayMatch9_reg(7);
  delayMatch9_reg_next(9) <= delayMatch9_reg(8);
  delayMatch9_reg_next(10) <= delayMatch9_reg(9);
  delayMatch9_reg_next(11) <= delayMatch9_reg(10);
  delayMatch9_reg_next(12) <= delayMatch9_reg(11);
  delayMatch9_reg_next(13) <= delayMatch9_reg(12);
  delayMatch9_reg_next(14) <= delayMatch9_reg(13);
  delayMatch9_reg_next(15) <= delayMatch9_reg(14);
  delayMatch9_reg_next(16) <= delayMatch9_reg(15);
  delayMatch9_reg_next(17) <= delayMatch9_reg(16);
  delayMatch9_reg_next(18) <= delayMatch9_reg(17);
  delayMatch9_reg_next(19) <= delayMatch9_reg(18);
  delayMatch9_reg_next(20) <= delayMatch9_reg(19);
  delayMatch9_reg_next(21) <= delayMatch9_reg(20);
  delayMatch9_reg_next(22) <= delayMatch9_reg(21);
  delayMatch9_reg_next(23) <= delayMatch9_reg(22);
  delayMatch9_reg_next(24) <= delayMatch9_reg(23);
  delayMatch9_reg_next(25) <= delayMatch9_reg(24);
  delayMatch9_reg_next(26) <= delayMatch9_reg(25);
  delayMatch9_reg_next(27) <= delayMatch9_reg(26);
  delayMatch9_reg_next(28) <= delayMatch9_reg(27);
  delayMatch9_reg_next(29) <= delayMatch9_reg(28);
  delayMatch9_reg_next(30) <= delayMatch9_reg(29);
  delayMatch9_reg_next(31) <= delayMatch9_reg(30);
  delayMatch9_reg_next(32) <= delayMatch9_reg(31);
  delayMatch9_reg_next(33) <= delayMatch9_reg(32);
  delayMatch9_reg_next(34) <= delayMatch9_reg(33);
  delayMatch9_reg_next(35) <= delayMatch9_reg(34);
  delayMatch9_reg_next(36) <= delayMatch9_reg(35);
  delayMatch9_reg_next(37) <= delayMatch9_reg(36);
  delayMatch9_reg_next(38) <= delayMatch9_reg(37);
  delayMatch9_reg_next(39) <= delayMatch9_reg(38);
  delayMatch9_reg_next(40) <= delayMatch9_reg(39);
  delayMatch9_reg_next(41) <= delayMatch9_reg(40);
  delayMatch9_reg_next(42) <= delayMatch9_reg(41);
  delayMatch9_reg_next(43) <= delayMatch9_reg(42);
  delayMatch9_reg_next(44) <= delayMatch9_reg(43);
  delayMatch9_reg_next(45) <= delayMatch9_reg(44);
  delayMatch9_reg_next(46) <= delayMatch9_reg(45);
  delayMatch9_reg_next(47) <= delayMatch9_reg(46);
  delayMatch9_reg_next(48) <= delayMatch9_reg(47);
  delayMatch9_reg_next(49) <= delayMatch9_reg(48);
  delayMatch9_reg_next(50) <= delayMatch9_reg(49);
  delayMatch9_reg_next(51) <= delayMatch9_reg(50);
  delayMatch9_reg_next(52) <= delayMatch9_reg(51);
  delayMatch9_reg_next(53) <= delayMatch9_reg(52);
  delayMatch9_reg_next(54) <= delayMatch9_reg(53);
  delayMatch9_reg_next(55) <= delayMatch9_reg(54);
  delayMatch9_reg_next(56) <= delayMatch9_reg(55);
  delayMatch9_reg_next(57) <= delayMatch9_reg(56);
  delayMatch9_reg_next(58) <= delayMatch9_reg(57);
  delayMatch9_reg_next(59) <= delayMatch9_reg(58);
  delayMatch9_reg_next(60) <= delayMatch9_reg(59);
  delayMatch9_reg_next(61) <= delayMatch9_reg(60);
  delayMatch9_reg_next(62) <= delayMatch9_reg(61);
  delayMatch9_reg_next(63) <= delayMatch9_reg(62);
  delayMatch9_reg_next(64) <= delayMatch9_reg(63);
  delayMatch9_reg_next(65) <= delayMatch9_reg(64);
  delayMatch9_reg_next(66) <= delayMatch9_reg(65);
  delayMatch9_reg_next(67) <= delayMatch9_reg(66);

  done <= Delay3_out1_1;

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay21_out1 <= valid_in_ADC;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg(0) <= '0';
        delayMatch8_reg(1) <= '0';
        delayMatch8_reg(2) <= '0';
        delayMatch8_reg(3) <= '0';
        delayMatch8_reg(4) <= '0';
        delayMatch8_reg(5) <= '0';
        delayMatch8_reg(6) <= '0';
        delayMatch8_reg(7) <= '0';
        delayMatch8_reg(8) <= '0';
        delayMatch8_reg(9) <= '0';
        delayMatch8_reg(10) <= '0';
        delayMatch8_reg(11) <= '0';
        delayMatch8_reg(12) <= '0';
        delayMatch8_reg(13) <= '0';
        delayMatch8_reg(14) <= '0';
        delayMatch8_reg(15) <= '0';
        delayMatch8_reg(16) <= '0';
        delayMatch8_reg(17) <= '0';
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
        delayMatch8_reg(2) <= delayMatch8_reg_next(2);
        delayMatch8_reg(3) <= delayMatch8_reg_next(3);
        delayMatch8_reg(4) <= delayMatch8_reg_next(4);
        delayMatch8_reg(5) <= delayMatch8_reg_next(5);
        delayMatch8_reg(6) <= delayMatch8_reg_next(6);
        delayMatch8_reg(7) <= delayMatch8_reg_next(7);
        delayMatch8_reg(8) <= delayMatch8_reg_next(8);
        delayMatch8_reg(9) <= delayMatch8_reg_next(9);
        delayMatch8_reg(10) <= delayMatch8_reg_next(10);
        delayMatch8_reg(11) <= delayMatch8_reg_next(11);
        delayMatch8_reg(12) <= delayMatch8_reg_next(12);
        delayMatch8_reg(13) <= delayMatch8_reg_next(13);
        delayMatch8_reg(14) <= delayMatch8_reg_next(14);
        delayMatch8_reg(15) <= delayMatch8_reg_next(15);
        delayMatch8_reg(16) <= delayMatch8_reg_next(16);
        delayMatch8_reg(17) <= delayMatch8_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  End_Cycle_2 <= delayMatch8_reg(17);
  delayMatch8_reg_next(0) <= End_Cycle_1;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);
  delayMatch8_reg_next(2) <= delayMatch8_reg(1);
  delayMatch8_reg_next(3) <= delayMatch8_reg(2);
  delayMatch8_reg_next(4) <= delayMatch8_reg(3);
  delayMatch8_reg_next(5) <= delayMatch8_reg(4);
  delayMatch8_reg_next(6) <= delayMatch8_reg(5);
  delayMatch8_reg_next(7) <= delayMatch8_reg(6);
  delayMatch8_reg_next(8) <= delayMatch8_reg(7);
  delayMatch8_reg_next(9) <= delayMatch8_reg(8);
  delayMatch8_reg_next(10) <= delayMatch8_reg(9);
  delayMatch8_reg_next(11) <= delayMatch8_reg(10);
  delayMatch8_reg_next(12) <= delayMatch8_reg(11);
  delayMatch8_reg_next(13) <= delayMatch8_reg(12);
  delayMatch8_reg_next(14) <= delayMatch8_reg(13);
  delayMatch8_reg_next(15) <= delayMatch8_reg(14);
  delayMatch8_reg_next(16) <= delayMatch8_reg(15);
  delayMatch8_reg_next(17) <= delayMatch8_reg(16);

  
  switch_compare_1 <= '1' WHEN End_Cycle_2 = '1' ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch7_reg(0) <= '0';
        delayMatch7_reg(1) <= '0';
        delayMatch7_reg(2) <= '0';
        delayMatch7_reg(3) <= '0';
        delayMatch7_reg(4) <= '0';
        delayMatch7_reg(5) <= '0';
        delayMatch7_reg(6) <= '0';
        delayMatch7_reg(7) <= '0';
        delayMatch7_reg(8) <= '0';
        delayMatch7_reg(9) <= '0';
        delayMatch7_reg(10) <= '0';
        delayMatch7_reg(11) <= '0';
        delayMatch7_reg(12) <= '0';
        delayMatch7_reg(13) <= '0';
        delayMatch7_reg(14) <= '0';
        delayMatch7_reg(15) <= '0';
        delayMatch7_reg(16) <= '0';
        delayMatch7_reg(17) <= '0';
      ELSIF enb = '1' THEN
        delayMatch7_reg(0) <= delayMatch7_reg_next(0);
        delayMatch7_reg(1) <= delayMatch7_reg_next(1);
        delayMatch7_reg(2) <= delayMatch7_reg_next(2);
        delayMatch7_reg(3) <= delayMatch7_reg_next(3);
        delayMatch7_reg(4) <= delayMatch7_reg_next(4);
        delayMatch7_reg(5) <= delayMatch7_reg_next(5);
        delayMatch7_reg(6) <= delayMatch7_reg_next(6);
        delayMatch7_reg(7) <= delayMatch7_reg_next(7);
        delayMatch7_reg(8) <= delayMatch7_reg_next(8);
        delayMatch7_reg(9) <= delayMatch7_reg_next(9);
        delayMatch7_reg(10) <= delayMatch7_reg_next(10);
        delayMatch7_reg(11) <= delayMatch7_reg_next(11);
        delayMatch7_reg(12) <= delayMatch7_reg_next(12);
        delayMatch7_reg(13) <= delayMatch7_reg_next(13);
        delayMatch7_reg(14) <= delayMatch7_reg_next(14);
        delayMatch7_reg(15) <= delayMatch7_reg_next(15);
        delayMatch7_reg(16) <= delayMatch7_reg_next(16);
        delayMatch7_reg(17) <= delayMatch7_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  stateControl_2 <= delayMatch7_reg(17);
  delayMatch7_reg_next(0) <= stateControl_1;
  delayMatch7_reg_next(1) <= delayMatch7_reg(0);
  delayMatch7_reg_next(2) <= delayMatch7_reg(1);
  delayMatch7_reg_next(3) <= delayMatch7_reg(2);
  delayMatch7_reg_next(4) <= delayMatch7_reg(3);
  delayMatch7_reg_next(5) <= delayMatch7_reg(4);
  delayMatch7_reg_next(6) <= delayMatch7_reg(5);
  delayMatch7_reg_next(7) <= delayMatch7_reg(6);
  delayMatch7_reg_next(8) <= delayMatch7_reg(7);
  delayMatch7_reg_next(9) <= delayMatch7_reg(8);
  delayMatch7_reg_next(10) <= delayMatch7_reg(9);
  delayMatch7_reg_next(11) <= delayMatch7_reg(10);
  delayMatch7_reg_next(12) <= delayMatch7_reg(11);
  delayMatch7_reg_next(13) <= delayMatch7_reg(12);
  delayMatch7_reg_next(14) <= delayMatch7_reg(13);
  delayMatch7_reg_next(15) <= delayMatch7_reg(14);
  delayMatch7_reg_next(16) <= delayMatch7_reg(15);
  delayMatch7_reg_next(17) <= delayMatch7_reg(16);

  theta_el_signed <= signed(theta_el);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay8_out1 <= theta_el_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  End_Cycle_4 <= End_Cycle_3;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1 <= theta_el_offset_AXI;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg(0) <= X"00000000";
        delayMatch3_reg(1) <= X"00000000";
        delayMatch3_reg(2) <= X"00000000";
        delayMatch3_reg(3) <= X"00000000";
        delayMatch3_reg(4) <= X"00000000";
        delayMatch3_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
        delayMatch3_reg(3) <= delayMatch3_reg_next(3);
        delayMatch3_reg(4) <= delayMatch3_reg_next(4);
        delayMatch3_reg(5) <= delayMatch3_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Delay9_out1_1 <= delayMatch3_reg(5);
  delayMatch3_reg_next(0) <= Delay9_out1;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);
  delayMatch3_reg_next(3) <= delayMatch3_reg(2);
  delayMatch3_reg_next(4) <= delayMatch3_reg(3);
  delayMatch3_reg_next(5) <= delayMatch3_reg(4);

  const <= X"00000000";

  const_1 <= X"40c90fdb";

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg(0) <= '0';
        delayMatch4_reg(1) <= '0';
        delayMatch4_reg(2) <= '0';
        delayMatch4_reg(3) <= '0';
        delayMatch4_reg(4) <= '0';
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
        delayMatch4_reg(2) <= delayMatch4_reg_next(2);
        delayMatch4_reg(3) <= delayMatch4_reg_next(3);
        delayMatch4_reg(4) <= delayMatch4_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Compare_Limit_High_out1_1 <= delayMatch4_reg(4);
  delayMatch4_reg_next(0) <= Compare_Limit_High_out1;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);
  delayMatch4_reg_next(2) <= delayMatch4_reg(1);
  delayMatch4_reg_next(3) <= delayMatch4_reg(2);
  delayMatch4_reg_next(4) <= delayMatch4_reg(3);

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch5_reg(0) <= X"00000000";
        delayMatch5_reg(1) <= X"00000000";
        delayMatch5_reg(2) <= X"00000000";
        delayMatch5_reg(3) <= X"00000000";
        delayMatch5_reg(4) <= X"00000000";
        delayMatch5_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= delayMatch5_reg_next(0);
        delayMatch5_reg(1) <= delayMatch5_reg_next(1);
        delayMatch5_reg(2) <= delayMatch5_reg_next(2);
        delayMatch5_reg(3) <= delayMatch5_reg_next(3);
        delayMatch5_reg(4) <= delayMatch5_reg_next(4);
        delayMatch5_reg(5) <= delayMatch5_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  Add1_out1_1 <= delayMatch5_reg(5);
  delayMatch5_reg_next(0) <= Add1_out1;
  delayMatch5_reg_next(1) <= delayMatch5_reg(0);
  delayMatch5_reg_next(2) <= delayMatch5_reg(1);
  delayMatch5_reg_next(3) <= delayMatch5_reg(2);
  delayMatch5_reg_next(4) <= delayMatch5_reg(3);
  delayMatch5_reg_next(5) <= delayMatch5_reg(4);

  Constant_out1 <= X"40c90fdb";

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= '0';
        delayMatch6_reg(1) <= '0';
        delayMatch6_reg(2) <= '0';
        delayMatch6_reg(3) <= '0';
        delayMatch6_reg(4) <= '0';
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  Compare_Limit_Low_out1_1 <= delayMatch6_reg(4);
  delayMatch6_reg_next(0) <= Compare_Limit_Low_out1;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);

  
  Switch_Limit_High_out1 <= Add1_out1_1 WHEN Compare_Limit_High_out1_1 = '0' ELSE
      Add2_out1;

  Constant1_out1 <= X"40c90fdb";

  
  End_Cycle_5 <= Switch_Limit_High_out1 WHEN Compare_Limit_Low_out1_1 = '0' ELSE
      Add3_out1;

  
  Switch_on13_out1_1 <= Delay13_out1 WHEN stateControl_2 = '0' ELSE
      Switch_on13_out1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch_on13_out1_1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch_on13_out1 <= Delay13_out1 WHEN switch_compare_1 = '0' ELSE
      End_Cycle_5;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1 <= u_dc_link_voltage_AXI;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay10_out1;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Index_signed <= signed(Index);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Index_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch_on3_out1 <= Delay14_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay2_out1;

  phase_voltages_per_switching_state_0 <= nfp_out_1_1;

  phase_voltages_per_switching_state_1 <= nfp_out_2_1;

  phase_voltages_per_switching_state_2 <= nfp_out_3_1;

  phase_voltages_per_switching_state_3 <= nfp_out_4_1;

  phase_voltages_per_switching_state_4 <= nfp_out_5_1;

  phase_voltages_per_switching_state_5 <= nfp_out_6_1;

  phase_voltages_per_switching_state_6 <= nfp_out_7_1;

  phase_voltages_per_switching_state_7 <= nfp_out_8_1;

  phase_voltages_per_switching_state_8 <= nfp_out_9_1;

  phase_voltages_per_switching_state_9 <= nfp_out_10_1;

  phase_voltages_per_switching_state_10 <= nfp_out_11_1;

  phase_voltages_per_switching_state_11 <= nfp_out_12_1;

  phase_voltages_per_switching_state_12 <= nfp_out_13_1;

  phase_voltages_per_switching_state_13 <= nfp_out_14_1;

  phase_voltages_per_switching_state_14 <= nfp_out_15_1;

  phase_voltages_per_switching_state_15 <= nfp_out_16_1;

  phase_voltages_per_switching_state_16 <= nfp_out_17_1;

  phase_voltages_per_switching_state_17 <= nfp_out_18_1;

  phase_voltages_per_switching_state_18 <= nfp_out_19_1;

  phase_voltages_per_switching_state_19 <= nfp_out_20_1;

  phase_voltages_per_switching_state_20 <= nfp_out_21_1;

  phase_voltages_per_switching_state_21 <= nfp_out_22_1;

  phase_voltages_per_switching_state_22 <= nfp_out_23_1;

  phase_voltages_per_switching_state_23 <= nfp_out_24_1;

  phase_voltages_per_switching_state_24 <= nfp_out_25_1;

  phase_voltages_per_switching_state_25 <= nfp_out_26_1;

  phase_voltages_per_switching_state_26 <= nfp_out_27_1;

  phase_voltages_per_switching_state_27 <= nfp_out_28_1;

  phase_voltages_per_switching_state_28 <= nfp_out_29_1;

  phase_voltages_per_switching_state_29 <= nfp_out_30_1;

  phase_voltages_per_switching_state_30 <= nfp_out_31_1;

  phase_voltages_per_switching_state_31 <= nfp_out_32_1;

  phase_voltages_per_switching_state_32 <= nfp_out_33_1;

  phase_voltages_per_switching_state_33 <= nfp_out_34_1;

  phase_voltages_per_switching_state_34 <= nfp_out_35_1;

  phase_voltages_per_switching_state_35 <= nfp_out_36_1;

  phase_voltages_per_switching_state_36 <= nfp_out_37_1;

  phase_voltages_per_switching_state_37 <= nfp_out_38_1;

  phase_voltages_per_switching_state_38 <= nfp_out_39_1;

  phase_voltages_per_switching_state_39 <= nfp_out_40_1;

  phase_voltages_per_switching_state_40 <= nfp_out_41_1;

  phase_voltages_per_switching_state_41 <= nfp_out_42_1;

  phase_voltages_per_switching_state_42 <= nfp_out_43_1;

  phase_voltages_per_switching_state_43 <= nfp_out_44_1;

  phase_voltages_per_switching_state_44 <= nfp_out_45_1;

  phase_voltages_per_switching_state_45 <= nfp_out_46_1;

  phase_voltages_per_switching_state_46 <= nfp_out_47_1;

  phase_voltages_per_switching_state_47 <= nfp_out_48_1;

  phase_voltages_per_switching_state_48 <= nfp_out_49_1;

  phase_voltages_per_switching_state_49 <= nfp_out_50_1;

  phase_voltages_per_switching_state_50 <= nfp_out_51_1;

  phase_voltages_per_switching_state_51 <= nfp_out_52_1;

  phase_voltages_per_switching_state_52 <= nfp_out_53_1;

  phase_voltages_per_switching_state_53 <= nfp_out_54_1;

  phase_voltages_per_switching_state_54 <= nfp_out_55_1;

  phase_voltages_per_switching_state_55 <= nfp_out_56_1;

  phase_voltages_per_switching_state_56 <= nfp_out_57_1;

  phase_voltages_per_switching_state_57 <= nfp_out_58_1;

  phase_voltages_per_switching_state_58 <= nfp_out_59_1;

  phase_voltages_per_switching_state_59 <= nfp_out_60_1;

  phase_voltages_per_switching_state_60 <= nfp_out_61_1;

  phase_voltages_per_switching_state_61 <= nfp_out_62_1;

  phase_voltages_per_switching_state_62 <= nfp_out_63_1;

  phase_voltages_per_switching_state_63 <= nfp_out_64_1;

  ce_out <= clk_enable;

END rtl;

