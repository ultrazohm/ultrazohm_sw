-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/gmStateSpaceHDL_uz_inverter_3ph/uz_invert_ip_src_uz_inverter_3ph.vhd
-- Created: 2022-06-09 09:27:23
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 25x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- u_abc_ps_0                    ce_out        1e-06
-- u_abc_ps_1                    ce_out        1e-06
-- u_abc_ps_2                    ce_out        1e-06
-- u_abc_pl_0                    ce_out        1e-06
-- u_abc_pl_1                    ce_out        1e-06
-- u_abc_pl_2                    ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_invert_ip_src_uz_inverter_3ph
-- Source Path: gmStateSpaceHDL_uz_inverter_3ph/uz_inverter_3ph
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_invert_ip_src_uz_inverter_3ph_pkg.ALL;

ENTITY uz_invert_ip_src_uz_inverter_3ph IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        switch_pspl_abc                   :   IN    std_logic;
        switch_pspl_gate                  :   IN    std_logic;
        i_abc_ps_0                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_1                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_2                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_pl_0                        :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        i_abc_pl_1                        :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        i_abc_pl_2                        :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        gate_ps_0                         :   IN    std_logic;  -- boolean
        gate_ps_1                         :   IN    std_logic;  -- boolean
        gate_ps_2                         :   IN    std_logic;  -- boolean
        gate_ps_3                         :   IN    std_logic;  -- boolean
        gate_ps_4                         :   IN    std_logic;  -- boolean
        gate_ps_5                         :   IN    std_logic;  -- boolean
        gate_pl_0                         :   IN    std_logic;  -- ufix1
        gate_pl_1                         :   IN    std_logic;  -- ufix1
        gate_pl_2                         :   IN    std_logic;  -- ufix1
        gate_pl_3                         :   IN    std_logic;  -- ufix1
        gate_pl_4                         :   IN    std_logic;  -- ufix1
        gate_pl_5                         :   IN    std_logic;  -- ufix1
        u_dc                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        u_abc_ps_0                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc_ps_1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc_ps_2                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc_pl_0                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        u_abc_pl_1                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        u_abc_pl_2                        :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
        );
END uz_invert_ip_src_uz_inverter_3ph;


ARCHITECTURE rtl OF uz_invert_ip_src_uz_inverter_3ph IS

  -- Component Declarations
  COMPONENT uz_invert_ip_src_uz_inverter_3ph_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_25_0                      :   OUT   std_logic;
          enb_1_25_1                      :   OUT   std_logic;
          enb_1_100_0                     :   OUT   std_logic;
          enb_1_100_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_Compare_To_Constant
    GENERIC( const                        : integer
             );
    PORT( u                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_nfp_uminus_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_25_0                      :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_nfp_relop_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_nfp_convert_sfix_27_En18_to_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_nfp_convert_single2double_block
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_dot_product_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in1                             :   IN    vector_of_std_logic_vector64(0 TO 1);  -- double [2]
          in2                             :   IN    vector_of_std_logic_vector64(0 TO 1);  -- double [2]
          out1                            :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_dot_product_3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in1                             :   IN    vector_of_std_logic_vector64(0 TO 2);  -- double [3]
          in2                             :   IN    vector_of_std_logic_vector64(0 TO 2);  -- double [3]
          out1                            :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_Subsystem1
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_Subsystem1_block
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_Subsystem1_block1
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_Subsystem1_block2
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_Subsystem1_block3
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_Subsystem1_block4
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_Subsystem1_block5
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_Subsystem1_block6
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_invert_ip_src_nfp_convert_double_to_fixed_27_En16
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_invert_ip_src_uz_inverter_3ph_tc
    USE ENTITY work.uz_invert_ip_src_uz_inverter_3ph_tc(rtl);

  FOR ALL : uz_invert_ip_src_Compare_To_Constant
    USE ENTITY work.uz_invert_ip_src_Compare_To_Constant(rtl);

  FOR ALL : uz_invert_ip_src_nfp_convert_single2double
    USE ENTITY work.uz_invert_ip_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_invert_ip_src_nfp_uminus_double
    USE ENTITY work.uz_invert_ip_src_nfp_uminus_double(rtl);

  FOR ALL : uz_invert_ip_src_SimpleDualPortRAM_generic
    USE ENTITY work.uz_invert_ip_src_SimpleDualPortRAM_generic(rtl);

  FOR ALL : uz_invert_ip_src_nfp_relop_double
    USE ENTITY work.uz_invert_ip_src_nfp_relop_double(rtl);

  FOR ALL : uz_invert_ip_src_nfp_convert_sfix_27_En18_to_double
    USE ENTITY work.uz_invert_ip_src_nfp_convert_sfix_27_En18_to_double(rtl);

  FOR ALL : uz_invert_ip_src_nfp_convert_single2double_block
    USE ENTITY work.uz_invert_ip_src_nfp_convert_single2double_block(rtl);

  FOR ALL : uz_invert_ip_src_dot_product_2
    USE ENTITY work.uz_invert_ip_src_dot_product_2(rtl);

  FOR ALL : uz_invert_ip_src_dot_product_3
    USE ENTITY work.uz_invert_ip_src_dot_product_3(rtl);

  FOR ALL : uz_invert_ip_src_Subsystem1
    USE ENTITY work.uz_invert_ip_src_Subsystem1(rtl);

  FOR ALL : uz_invert_ip_src_Subsystem1_block
    USE ENTITY work.uz_invert_ip_src_Subsystem1_block(rtl);

  FOR ALL : uz_invert_ip_src_Subsystem1_block1
    USE ENTITY work.uz_invert_ip_src_Subsystem1_block1(rtl);

  FOR ALL : uz_invert_ip_src_Subsystem1_block2
    USE ENTITY work.uz_invert_ip_src_Subsystem1_block2(rtl);

  FOR ALL : uz_invert_ip_src_Subsystem1_block3
    USE ENTITY work.uz_invert_ip_src_Subsystem1_block3(rtl);

  FOR ALL : uz_invert_ip_src_Subsystem1_block4
    USE ENTITY work.uz_invert_ip_src_Subsystem1_block4(rtl);

  FOR ALL : uz_invert_ip_src_Subsystem1_block5
    USE ENTITY work.uz_invert_ip_src_Subsystem1_block5(rtl);

  FOR ALL : uz_invert_ip_src_nfp_add_double
    USE ENTITY work.uz_invert_ip_src_nfp_add_double(rtl);

  FOR ALL : uz_invert_ip_src_Subsystem1_block6
    USE ENTITY work.uz_invert_ip_src_Subsystem1_block6(rtl);

  FOR ALL : uz_invert_ip_src_nfp_convert_double2single
    USE ENTITY work.uz_invert_ip_src_nfp_convert_double2single(rtl);

  FOR ALL : uz_invert_ip_src_nfp_convert_double_to_fixed_27_En16
    USE ENTITY work.uz_invert_ip_src_nfp_convert_double_to_fixed_27_En16(rtl);

  -- Signals
  SIGNAL enb_1_100_1                      : std_logic;
  SIGNAL enb_1_25_0                       : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_100_0                      : std_logic;
  SIGNAL enb_1_25_1                       : std_logic;
  SIGNAL configuration1                   : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Valid_Out1_out1                  : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL delayMatch1_reg_next             : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Valid_Out1_out1_1                : std_logic;
  SIGNAL Valid_Out1_out1_2                : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Valid_Out1_out1_3                : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL delayMatch7_reg_next             : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay2_out1_1                    : std_logic;
  SIGNAL X0_out1                          : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL delayMatch14_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL delayMatch14_reg_next            : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay_out1_1                     : std_logic;
  SIGNAL FixPt_Constant_out1              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Wrap_To_Zero_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL FixPt_Sum1_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL FixPt_Switch_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch16_reg                 : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL delayMatch16_reg_next            : vector_of_unsigned8(0 TO 3);  -- ufix8 [4]
  SIGNAL Wrap_To_Zero_out1_1              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Output_out1                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL State_Delay_ctrl_const_out       : std_logic;
  SIGNAL delayMatch15_reg                 : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL delayMatch15_reg_next            : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL State_Delay_ctrl_const_out_1     : std_logic;
  SIGNAL State_Delay_ctrl_delay_out       : std_logic;
  SIGNAL State_Delay_Initial_Val_out      : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL Constant_out1_1                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL G                                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition181_bypass_reg    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Simulink_PS_Converter            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition18_out1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL out0                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero                        : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL constZero_0                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne                         : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL constOne_0                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_0                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_1                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_2                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_2                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_3                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_3                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_4                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_4                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_5                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_5                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_6                              : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL constZero_6                      : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL constZero_0_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_6                       : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL constOne_0_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_0_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_1_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_1_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_2_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_2_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_2_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_3_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_3_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_3_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_4_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_4_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_4_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constZero_5_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_5_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_5_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_7                              : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL G_8                              : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL S1                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition12_out1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch8_regin                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch8_waddr                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch8_wrenb                : std_logic;  -- ufix1
  SIGNAL delayMatch8_raddr                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch8_regout               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition12_out1_1         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_3                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL out0_1                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_4                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL S4                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition15_out1           : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL Rate_Transition17_out1           : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL mergedInput                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin                : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL mergedDelay_regout               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition15_out1_1         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_5                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL out0_2                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_6                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL slicedInput_1                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition17_out1_1         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_7                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL out0_3                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_8                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL S3                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition14_out1           : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL S2                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition13_out1           : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL mergedInput_1                    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin_1              : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_waddr_1              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL mergedDelay_wrenb_1              : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr_1              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL mergedDelay_regout_1             : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned_1    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedOutput_1                   : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_2                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition14_out1_1         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_9                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL out0_4                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_10                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL slicedInput_3                    : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition13_out1_1         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_11                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL out0_5                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_12                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL S5                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition16_out1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch13_regin               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch13_waddr               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch13_wrenb               : std_logic;  -- ufix1
  SIGNAL delayMatch13_raddr               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch13_regout              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition16_out1_1         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_13                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Default_Index_out1               : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Mode_Vector8_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Mode_Vector7_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Mode_Vector6_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Mode_Vector5_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Mode_Vector4_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Mode_Vector3_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Mode_Vector2_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Mode_Vector1_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL configuration1_1                 : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL configuration2                   : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL configuration3                   : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL configuration4                   : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL configuration5                   : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL configuration6                   : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL configuration7                   : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL configuration8                   : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL switch_pspl_abc_1                : std_logic;
  SIGNAL Iabc_PL                          : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL Iabc_PL_1                        : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Iabc_PL_2                        : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Iabc                             : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Iabc_1                           : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL switch_pspl_abc_2                : std_logic;
  SIGNAL Data_Type_Conversion4_out1       : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Data_Type_Conversion3_out1       : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Iab                              : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Iab_0                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition101_bypass_reg    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Ia                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition10_out1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL col1                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL Iab_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition111_bypass_reg    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Ib                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Rate_Transition11_out1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL col2                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL col3                             : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL col4                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL col5                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL col6                             : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL col7                             : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL col8                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL col9                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL col10                            : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL col11                            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL col12                            : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL configuration_rsvd               : vector_of_std_logic_vector32(0 TO 27);  -- ufix32 [28]
  SIGNAL row12                            : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL row11                            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL row10                            : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL row9                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL row8                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL row7                             : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL row6                             : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL row5                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL row4                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL row3                             : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL row2                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL Data_Type_Conversion_out1        : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Subsystem8_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem7_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem6_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem5_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem4_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem3_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem2_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL State_Delay_out1                 : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL tmp6                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL out0_6                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL tmp5                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL tmp4                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL out0_7                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL tmp3                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL out0_8                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL tmp2                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL tmp1                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL modes                            : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Subsystem1_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem1_out1_unsigned         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Switch1_out1                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL row1                             : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL out0_9                           : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL State_Delay_bypass_reg           : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL State_Delay_bypass_reg_next      : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL State_Update_out1                : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL State_Delay_out                  : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL Switch3_out1                     : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL Switch3_out1_1                   : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL Delay3_bypass_reg                : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL Delay3_bypass_reg_next           : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL Switch3_out1_2                   : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL Delay3_out1                      : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL Switch_out1                      : vector_of_std_logic_vector64(0 TO 11);  -- ufix64 [12]
  SIGNAL row1_1                           : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL col1_1                           : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL dot_product1_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Output_Demux_out1                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch17_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch17_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Output_Demux_out1_1              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Uab                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Uab_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Uab_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL row2_1                           : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL col2_1                           : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL dot_product2_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Output_Demux_out2                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch18_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch18_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Output_Demux_out2_1              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Ubc                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Ubc_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Ubc_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL row3_1                           : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL col3_1                           : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL dot_product3_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Output_Demux_out3                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL delayMatch19_reg                 : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL delayMatch19_reg_next            : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Output_Demux_out3_1              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Uca                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Uca_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Uca_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion_out1_1      : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL t_bypass_reg                     : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL t_bypass_reg_next                : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Data_Type_Conversion_out1_2      : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Data_Type_Conversion1_out1       : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL Data_Type_Conversion1_out1_1     : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL t1_bypass_reg                    : vector_of_signed27(0 TO 2);  -- sfix27 [3]
  SIGNAL t1_bypass_reg_next               : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Data_Type_Conversion1_out1_2     : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]

BEGIN
  -- Interface System
  -- 
  -- U(k)

  u_uz_inverter_3ph_tc : uz_invert_ip_src_uz_inverter_3ph_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_25_0 => enb_1_25_0,
              enb_1_25_1 => enb_1_25_1,
              enb_1_100_0 => enb_1_100_0,
              enb_1_100_1 => enb_1_100_1
              );

  u_Compare_To_Constant : uz_invert_ip_src_Compare_To_Constant
    GENERIC MAP( const => 0
                 )
    PORT MAP( u => Output_out1,  -- uint8
              y => Compare_To_Constant_out1
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double : uz_invert_ip_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => u_dc,  -- single
              nfp_out => G  -- double
              );

  u_nfp_uminus_comp : uz_invert_ip_src_nfp_uminus_double
    PORT MAP( nfp_in => Rate_Transition18_out1,  -- double
              nfp_out => out0  -- double
              );

  u_ShiftRegisterRAM_generic : uz_invert_ip_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 64
                 )
    PORT MAP( clk => clk,
              enb_1_25_0 => enb_1_25_0,
              wr_din => delayMatch8_regin,
              wr_addr => std_logic_vector(delayMatch8_waddr),
              wr_en => delayMatch8_wrenb,  -- ufix1
              rd_addr => std_logic_vector(delayMatch8_raddr),
              rd_dout => delayMatch8_regout
              );

  u_nfp_relop_comp : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Rate_Transition12_out1_1,  -- double
              nfp_in2 => const_3,  -- double
              nfp_out1 => modes(1)
              );

  u_nfp_uminus_comp_1 : uz_invert_ip_src_nfp_uminus_double
    PORT MAP( nfp_in => Rate_Transition18_out1,  -- double
              nfp_out => out0_1  -- double
              );

  u_ShiftRegisterRAM : uz_invert_ip_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_25_0 => enb_1_25_0,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              rd_dout => mergedDelay_regout
              );

  u_nfp_relop_comp_1 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Rate_Transition15_out1_1,  -- double
              nfp_in2 => const_5,  -- double
              nfp_out1 => modes(3)
              );

  u_nfp_uminus_comp_2 : uz_invert_ip_src_nfp_uminus_double
    PORT MAP( nfp_in => Rate_Transition18_out1,  -- double
              nfp_out => out0_2  -- double
              );

  u_nfp_relop_comp_2 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Rate_Transition17_out1_1,  -- double
              nfp_in2 => const_7,  -- double
              nfp_out1 => modes(5)
              );

  u_nfp_uminus_comp_3 : uz_invert_ip_src_nfp_uminus_double
    PORT MAP( nfp_in => Rate_Transition18_out1,  -- double
              nfp_out => out0_3  -- double
              );

  u_ShiftRegisterRAM_1 : uz_invert_ip_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_25_0 => enb_1_25_0,
              wr_din => std_logic_vector(mergedDelay_regin_1),
              wr_addr => std_logic_vector(mergedDelay_waddr_1),
              wr_en => mergedDelay_wrenb_1,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr_1),
              rd_dout => mergedDelay_regout_1
              );

  u_nfp_relop_comp_3 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Rate_Transition14_out1_1,  -- double
              nfp_in2 => const_9,  -- double
              nfp_out1 => modes(7)
              );

  u_nfp_uminus_comp_4 : uz_invert_ip_src_nfp_uminus_double
    PORT MAP( nfp_in => Rate_Transition18_out1,  -- double
              nfp_out => out0_4  -- double
              );

  u_nfp_relop_comp_4 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Rate_Transition13_out1_1,  -- double
              nfp_in2 => const_11,  -- double
              nfp_out1 => modes(9)
              );

  u_nfp_uminus_comp_5 : uz_invert_ip_src_nfp_uminus_double
    PORT MAP( nfp_in => Rate_Transition18_out1,  -- double
              nfp_out => out0_5  -- double
              );

  u_ShiftRegisterRAM_2 : uz_invert_ip_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 64
                 )
    PORT MAP( clk => clk,
              enb_1_25_0 => enb_1_25_0,
              wr_din => delayMatch13_regin,
              wr_addr => std_logic_vector(delayMatch13_waddr),
              wr_en => delayMatch13_wrenb,  -- ufix1
              rd_addr => std_logic_vector(delayMatch13_raddr),
              rd_dout => delayMatch13_regout
              );

  u_nfp_relop_comp_5 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Rate_Transition16_out1_1,  -- double
              nfp_in2 => const_13,  -- double
              nfp_out1 => modes(11)
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_sfix_27_En18_to_double : uz_invert_ip_src_nfp_convert_sfix_27_En18_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Iabc_PL_2(0)),  -- sfix27_En18
              nfp_out => Data_Type_Conversion4_out1(0)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_sfix_27_En18_to_double_1 : uz_invert_ip_src_nfp_convert_sfix_27_En18_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Iabc_PL_2(1)),  -- sfix27_En18
              nfp_out => Data_Type_Conversion4_out1(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_1 : uz_invert_ip_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iabc_1(0),  -- single
              nfp_out => Data_Type_Conversion3_out1(0)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_2 : uz_invert_ip_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iabc_1(1),  -- single
              nfp_out => Data_Type_Conversion3_out1(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_sfix_27_En18_to_double_2 : uz_invert_ip_src_nfp_convert_sfix_27_En18_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Iabc_PL_2(2)),  -- sfix27_En18
              nfp_out => Data_Type_Conversion4_out1(2)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_3 : uz_invert_ip_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iabc_1(2),  -- single
              nfp_out => Data_Type_Conversion3_out1(2)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_4 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(27),  -- single
              nfp_out => row12(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_5 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(11),  -- single
              nfp_out => row12(0)  -- double
              );

  u_dot_product_2 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row12,  -- double [2]
              in2 => col12,  -- double [2]
              out1 => out0_9(11)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_6 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(26),  -- single
              nfp_out => row11(2)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_7 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(19),  -- single
              nfp_out => row11(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_8 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(10),  -- single
              nfp_out => row11(0)  -- double
              );

  u_dot_product_3 : uz_invert_ip_src_dot_product_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row11,  -- double [3]
              in2 => col11,  -- double [3]
              out1 => out0_9(10)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_9 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(18),  -- single
              nfp_out => row10(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_10 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(9),  -- single
              nfp_out => row10(0)  -- double
              );

  u_dot_product_2_1 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row10,  -- double [2]
              in2 => col10,  -- double [2]
              out1 => out0_9(9)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_11 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(25),  -- single
              nfp_out => row9(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_12 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(8),  -- single
              nfp_out => row9(0)  -- double
              );

  u_dot_product_2_2 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row9,  -- double [2]
              in2 => col9,  -- double [2]
              out1 => out0_9(8)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_13 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(24),  -- single
              nfp_out => row8(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_14 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(7),  -- single
              nfp_out => row8(0)  -- double
              );

  u_dot_product_2_3 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row8,  -- double [2]
              in2 => col8,  -- double [2]
              out1 => out0_9(7)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_15 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(23),  -- single
              nfp_out => row7(2)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_16 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(17),  -- single
              nfp_out => row7(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_17 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(6),  -- single
              nfp_out => row7(0)  -- double
              );

  u_dot_product_3_1 : uz_invert_ip_src_dot_product_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row7,  -- double [3]
              in2 => col7,  -- double [3]
              out1 => out0_9(6)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_18 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(22),  -- single
              nfp_out => row6(2)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_19 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(16),  -- single
              nfp_out => row6(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_20 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(5),  -- single
              nfp_out => row6(0)  -- double
              );

  u_dot_product_3_2 : uz_invert_ip_src_dot_product_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row6,  -- double [3]
              in2 => col6,  -- double [3]
              out1 => out0_9(5)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_21 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(15),  -- single
              nfp_out => row5(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_22 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(4),  -- single
              nfp_out => row5(0)  -- double
              );

  u_dot_product_2_4 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row5,  -- double [2]
              in2 => col5,  -- double [2]
              out1 => out0_9(4)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_23 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(14),  -- single
              nfp_out => row4(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_24 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(3),  -- single
              nfp_out => row4(0)  -- double
              );

  u_dot_product_2_5 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row4,  -- double [2]
              in2 => col4,  -- double [2]
              out1 => out0_9(3)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_25 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(21),  -- single
              nfp_out => row3(2)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_26 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(13),  -- single
              nfp_out => row3(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_27 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(2),  -- single
              nfp_out => row3(0)  -- double
              );

  u_dot_product_3_3 : uz_invert_ip_src_dot_product_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row3,  -- double [3]
              in2 => col3,  -- double [3]
              out1 => out0_9(2)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_28 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(20),  -- single
              nfp_out => row2(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_29 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(1),  -- single
              nfp_out => row2(0)  -- double
              );

  u_dot_product_2_6 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row2,  -- double [2]
              in2 => col2,  -- double [2]
              out1 => out0_9(1)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_30 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(12),  -- single
              nfp_out => row1(1)  -- double
              );

  u_Subsystem8 : uz_invert_ip_src_Subsystem1
    GENERIC MAP( Index => 7
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1,  -- boolean [12]
              In2 => std_logic_vector(Default_Index_out1),  -- ufix3
              In3 => Mode_Vector8_out1,  -- boolean [12]
              Out1 => Subsystem8_out1  -- ufix3
              );

  u_Subsystem7 : uz_invert_ip_src_Subsystem1_block
    GENERIC MAP( Index => 6
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1,  -- boolean [12]
              In2 => Subsystem8_out1,  -- ufix3
              In3 => Mode_Vector7_out1,  -- boolean [12]
              Out1 => Subsystem7_out1  -- ufix3
              );

  u_Subsystem6 : uz_invert_ip_src_Subsystem1_block1
    GENERIC MAP( Index => 5
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1,  -- boolean [12]
              In2 => Subsystem7_out1,  -- ufix3
              In3 => Mode_Vector6_out1,  -- boolean [12]
              Out1 => Subsystem6_out1  -- ufix3
              );

  u_Subsystem5 : uz_invert_ip_src_Subsystem1_block2
    GENERIC MAP( Index => 4
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1,  -- boolean [12]
              In2 => Subsystem6_out1,  -- ufix3
              In3 => Mode_Vector5_out1,  -- boolean [12]
              Out1 => Subsystem5_out1  -- ufix3
              );

  u_Subsystem4 : uz_invert_ip_src_Subsystem1_block3
    GENERIC MAP( Index => 3
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1,  -- boolean [12]
              In2 => Subsystem5_out1,  -- ufix3
              In3 => Mode_Vector4_out1,  -- boolean [12]
              Out1 => Subsystem4_out1  -- ufix3
              );

  u_Subsystem3 : uz_invert_ip_src_Subsystem1_block4
    GENERIC MAP( Index => 2
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1,  -- boolean [12]
              In2 => Subsystem4_out1,  -- ufix3
              In3 => Mode_Vector3_out1,  -- boolean [12]
              Out1 => Subsystem3_out1  -- ufix3
              );

  u_Subsystem2 : uz_invert_ip_src_Subsystem1_block5
    GENERIC MAP( Index => 1
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1,  -- boolean [12]
              In2 => Subsystem3_out1,  -- ufix3
              In3 => Mode_Vector2_out1,  -- boolean [12]
              Out1 => Subsystem2_out1  -- ufix3
              );

  u_nfp_add_comp : uz_invert_ip_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => State_Delay_out1(2),  -- double
              nfp_in2 => out0_5,  -- double
              nfp_out => tmp6  -- double
              );

  u_nfp_relop_comp_6 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp6,  -- double
              nfp_in2 => const_12,  -- double
              nfp_out1 => modes(10)
              );

  u_nfp_uminus_comp_6 : uz_invert_ip_src_nfp_uminus_double
    PORT MAP( nfp_in => State_Delay_out1(0),  -- double
              nfp_out => out0_6  -- double
              );

  u_nfp_add_comp_1 : uz_invert_ip_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_6,  -- double
              nfp_in2 => out0_4,  -- double
              nfp_out => tmp5  -- double
              );

  u_nfp_relop_comp_7 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp5,  -- double
              nfp_in2 => const_10,  -- double
              nfp_out1 => modes(8)
              );

  u_nfp_add_comp_2 : uz_invert_ip_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => State_Delay_out1(1),  -- double
              nfp_in2 => out0_3,  -- double
              nfp_out => tmp4  -- double
              );

  u_nfp_relop_comp_8 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp4,  -- double
              nfp_in2 => const_8,  -- double
              nfp_out1 => modes(6)
              );

  u_nfp_uminus_comp_7 : uz_invert_ip_src_nfp_uminus_double
    PORT MAP( nfp_in => State_Delay_out1(2),  -- double
              nfp_out => out0_7  -- double
              );

  u_nfp_add_comp_3 : uz_invert_ip_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_7,  -- double
              nfp_in2 => out0_2,  -- double
              nfp_out => tmp3  -- double
              );

  u_nfp_relop_comp_9 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp3,  -- double
              nfp_in2 => const_6,  -- double
              nfp_out1 => modes(4)
              );

  u_nfp_uminus_comp_8 : uz_invert_ip_src_nfp_uminus_double
    PORT MAP( nfp_in => State_Delay_out1(1),  -- double
              nfp_out => out0_8  -- double
              );

  u_nfp_add_comp_4 : uz_invert_ip_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_8,  -- double
              nfp_in2 => out0_1,  -- double
              nfp_out => tmp2  -- double
              );

  u_nfp_relop_comp_10 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp2,  -- double
              nfp_in2 => const_4,  -- double
              nfp_out1 => modes(2)
              );

  u_nfp_add_comp_5 : uz_invert_ip_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => State_Delay_out1(0),  -- double
              nfp_in2 => out0,  -- double
              nfp_out => tmp1  -- double
              );

  u_nfp_relop_comp_11 : uz_invert_ip_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp1,  -- double
              nfp_in2 => const_1,  -- double
              nfp_out1 => modes(0)
              );

  u_Subsystem1 : uz_invert_ip_src_Subsystem1_block6
    GENERIC MAP( Index => 0
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1,  -- boolean [12]
              In2 => Subsystem2_out1,  -- ufix3
              In3 => Mode_Vector1_out1,  -- boolean [12]
              Out1 => Subsystem1_out1  -- ufix3
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_31 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration_rsvd(0),  -- single
              nfp_out => row1(0)  -- double
              );

  u_dot_product_2_7 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row1,  -- double [2]
              in2 => col1,  -- double [2]
              out1 => out0_9(0)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_32 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration1(0),  -- single
              nfp_out => row1_1(0)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_33 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration1(2),  -- single
              nfp_out => row1_1(1)  -- double
              );

  u_dot_product_2_8 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row1_1,  -- double [2]
              in2 => col1_1,  -- double [2]
              out1 => dot_product1_1  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_double2single : uz_invert_ip_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Uab_2,  -- double
              nfp_out => Data_Type_Conversion_out1_1(0)  -- single
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_34 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration1(3),  -- single
              nfp_out => row2_1(0)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_35 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration1(4),  -- single
              nfp_out => row2_1(1)  -- double
              );

  u_dot_product_2_9 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row2_1,  -- double [2]
              in2 => col2_1,  -- double [2]
              out1 => dot_product2_1  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_double2single_1 : uz_invert_ip_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Ubc_2,  -- double
              nfp_out => Data_Type_Conversion_out1_1(1)  -- single
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_36 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration1(1),  -- single
              nfp_out => row3_1(0)  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_single2double_37 : uz_invert_ip_src_nfp_convert_single2double_block
    PORT MAP( nfp_in => configuration1(5),  -- single
              nfp_out => row3_1(1)  -- double
              );

  u_dot_product_2_10 : uz_invert_ip_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row3_1,  -- double [2]
              in2 => col3_1,  -- double [2]
              out1 => dot_product3_1  -- double
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_double2single_2 : uz_invert_ip_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Uca_2,  -- double
              nfp_out => Data_Type_Conversion_out1_1(2)  -- single
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_double_to_fixed_27_En16 : uz_invert_ip_src_nfp_convert_double_to_fixed_27_En16
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Uab_2,  -- double
              nfp_out => Data_Type_Conversion1_out1(0)  -- sfix27_En16
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_double_to_fixed_27_En16_1 : uz_invert_ip_src_nfp_convert_double_to_fixed_27_En16
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Ubc_2,  -- double
              nfp_out => Data_Type_Conversion1_out1(1)  -- sfix27_En16
              );

  u_gmStateSpaceHDL_uz_inverter_3ph_uz_inverter_3ph_nfp_convert_double_to_fixed_27_En16_2 : uz_invert_ip_src_nfp_convert_double_to_fixed_27_En16
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Uca_2,  -- double
              nfp_out => Data_Type_Conversion1_out1(2)  -- sfix27_En16
              );

  configuration1(0) <= X"3f800000";
  configuration1(1) <= X"bf800000";
  configuration1(2) <= X"bf800000";
  configuration1(3) <= X"3f800000";
  configuration1(4) <= X"bf800000";
  configuration1(5) <= X"3f800000";

  Valid_Out1_out1 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg(0) <= '0';
        delayMatch1_reg(1) <= '0';
        delayMatch1_reg(2) <= '0';
        delayMatch1_reg(3) <= '0';
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Valid_Out1_out1_1 <= delayMatch1_reg(3);
  delayMatch1_reg_next(0) <= Valid_Out1_out1;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Valid_Out1_out1_2 <= '0';
      ELSIF enb_1_25_0 = '1' THEN
        Valid_Out1_out1_2 <= Valid_Out1_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= '0';
        reduced_reg(1) <= '0';
        reduced_reg(2) <= '0';
      ELSIF enb_1_25_0 = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Valid_Out1_out1_3 <= reduced_reg(2);
  reduced_reg_next(0) <= Valid_Out1_out1_2;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch7_reg(0) <= '0';
        delayMatch7_reg(1) <= '0';
        delayMatch7_reg(2) <= '0';
        delayMatch7_reg(3) <= '0';
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch7_reg(0) <= delayMatch7_reg_next(0);
        delayMatch7_reg(1) <= delayMatch7_reg_next(1);
        delayMatch7_reg(2) <= delayMatch7_reg_next(2);
        delayMatch7_reg(3) <= delayMatch7_reg_next(3);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Delay2_out1 <= delayMatch7_reg(3);
  delayMatch7_reg_next(0) <= Valid_Out1_out1_3;
  delayMatch7_reg_next(1) <= delayMatch7_reg(0);
  delayMatch7_reg_next(2) <= delayMatch7_reg(1);
  delayMatch7_reg_next(3) <= delayMatch7_reg(2);

  Delay2_out1_1 <= Delay2_out1;

  X0_out1(0) <= X"c058ffffa3b9af51";
  X0_out1(1) <= X"c058ffffa3b9af51";
  X0_out1(2) <= X"c058ffffa3b9af51";
  X0_out1(3) <= X"bdee3c8f6b7f412b";
  X0_out1(4) <= X"3f6205bbc2244100";
  X0_out1(5) <= X"bf60624db4b51a91";
  X0_out1(6) <= X"3f2a36e2babb5db4";
  X0_out1(7) <= X"bdee3c8f6b7f412b";
  X0_out1(8) <= X"3f6205bbc2244100";
  X0_out1(9) <= X"3f2a36e2babb5db4";
  X0_out1(10) <= X"3f6205bbc2244100";
  X0_out1(11) <= X"3f2a36e2babb5db4";

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch14_reg(0) <= '0';
        delayMatch14_reg(1) <= '0';
        delayMatch14_reg(2) <= '0';
        delayMatch14_reg(3) <= '0';
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
        delayMatch14_reg(3) <= delayMatch14_reg_next(3);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  Delay_out1 <= delayMatch14_reg(3);
  delayMatch14_reg_next(0) <= Valid_Out1_out1_2;
  delayMatch14_reg_next(1) <= delayMatch14_reg(0);
  delayMatch14_reg_next(2) <= delayMatch14_reg(1);
  delayMatch14_reg_next(3) <= delayMatch14_reg(2);

  Delay_out1_1 <= Delay_out1;

  FixPt_Constant_out1 <= to_unsigned(16#01#, 8);

  Constant_out1 <= to_unsigned(16#00#, 8);

  FixPt_Sum1_out1 <= Wrap_To_Zero_out1 + FixPt_Constant_out1;

  
  switch_compare_1 <= '1' WHEN FixPt_Sum1_out1 > to_unsigned(16#03#, 8) ELSE
      '0';

  
  FixPt_Switch_out1 <= FixPt_Sum1_out1 WHEN switch_compare_1 = '0' ELSE
      Constant_out1;

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Wrap_To_Zero_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_25_0 = '1' THEN
        Wrap_To_Zero_out1 <= FixPt_Switch_out1;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch16_reg(0) <= to_unsigned(16#00#, 8);
        delayMatch16_reg(1) <= to_unsigned(16#00#, 8);
        delayMatch16_reg(2) <= to_unsigned(16#00#, 8);
        delayMatch16_reg(3) <= to_unsigned(16#00#, 8);
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch16_reg(0) <= delayMatch16_reg_next(0);
        delayMatch16_reg(1) <= delayMatch16_reg_next(1);
        delayMatch16_reg(2) <= delayMatch16_reg_next(2);
        delayMatch16_reg(3) <= delayMatch16_reg_next(3);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  Wrap_To_Zero_out1_1 <= delayMatch16_reg(3);
  delayMatch16_reg_next(0) <= Wrap_To_Zero_out1;
  delayMatch16_reg_next(1) <= delayMatch16_reg(0);
  delayMatch16_reg_next(2) <= delayMatch16_reg(1);
  delayMatch16_reg_next(3) <= delayMatch16_reg(2);

  Output_out1 <= std_logic_vector(Wrap_To_Zero_out1_1);

  Bitwise_Operator_out1 <= Delay_out1_1 AND Compare_To_Constant_out1;

  State_Delay_ctrl_const_out <= '1';

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= '0';
        delayMatch15_reg(1) <= '0';
        delayMatch15_reg(2) <= '0';
        delayMatch15_reg(3) <= '0';
        delayMatch15_reg(4) <= '0';
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
        delayMatch15_reg(3) <= delayMatch15_reg_next(3);
        delayMatch15_reg(4) <= delayMatch15_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  State_Delay_ctrl_const_out_1 <= delayMatch15_reg(4);
  delayMatch15_reg_next(0) <= State_Delay_ctrl_const_out;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);
  delayMatch15_reg_next(3) <= delayMatch15_reg(2);
  delayMatch15_reg_next(4) <= delayMatch15_reg(3);

  State_Delay_ctrl_delay_out <= State_Delay_ctrl_const_out_1;

  State_Delay_Initial_Val_out(0) <= X"c058ffffa3b9af51";
  State_Delay_Initial_Val_out(1) <= X"c058ffffa3b9af51";
  State_Delay_Initial_Val_out(2) <= X"c058ffffa3b9af51";
  State_Delay_Initial_Val_out(3) <= X"bdee3c8f6b7f412b";
  State_Delay_Initial_Val_out(4) <= X"3f6205bbc2244100";
  State_Delay_Initial_Val_out(5) <= X"bf60624db4b51a91";
  State_Delay_Initial_Val_out(6) <= X"3f2a36e2babb5db4";
  State_Delay_Initial_Val_out(7) <= X"bdee3c8f6b7f412b";
  State_Delay_Initial_Val_out(8) <= X"3f6205bbc2244100";
  State_Delay_Initial_Val_out(9) <= X"3f2a36e2babb5db4";
  State_Delay_Initial_Val_out(10) <= X"3f6205bbc2244100";
  State_Delay_Initial_Val_out(11) <= X"3f2a36e2babb5db4";

  Constant_out1_1 <= to_unsigned(16#0#, 3);

  Rate_Transition181_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition181_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Rate_Transition181_bypass_reg <= G;
      END IF;
    END IF;
  END PROCESS Rate_Transition181_bypass_process;

  
  Simulink_PS_Converter <= G WHEN enb_1_100_1 = '1' ELSE
      Rate_Transition181_bypass_reg;

  Rate_Transition18_out1 <= Simulink_PS_Converter;

  const_1 <= X"3fe999999999999a";

  constZero(0) <= X"0000000000000000";
  constZero(1) <= X"0000000000000000";
  constZero(2) <= X"0000000000000000";
  constZero(3) <= X"0000000000000000";
  constZero(4) <= X"0000000000000000";
  constZero(5) <= X"0000000000000000";

  constZero_0 <= constZero(0);

  constOne(0) <= X"3ff0000000000000";
  constOne(1) <= X"3ff0000000000000";
  constOne(2) <= X"3ff0000000000000";
  constOne(3) <= X"3ff0000000000000";
  constOne(4) <= X"3ff0000000000000";
  constOne(5) <= X"3ff0000000000000";

  constOne_0 <= constOne(0);

  
  G_0 <= constZero_0 WHEN gate_pl_0 = '0' ELSE
      constOne_0;

  constZero_1 <= constZero(1);

  constOne_1 <= constOne(1);

  
  G_1 <= constZero_1 WHEN gate_pl_1 = '0' ELSE
      constOne_1;

  constZero_2 <= constZero(2);

  constOne_2 <= constOne(2);

  
  G_2 <= constZero_2 WHEN gate_pl_2 = '0' ELSE
      constOne_2;

  constZero_3 <= constZero(3);

  constOne_3 <= constOne(3);

  
  G_3 <= constZero_3 WHEN gate_pl_3 = '0' ELSE
      constOne_3;

  constZero_4 <= constZero(4);

  constOne_4 <= constOne(4);

  
  G_4 <= constZero_4 WHEN gate_pl_4 = '0' ELSE
      constOne_4;

  constZero_5 <= constZero(5);

  constOne_5 <= constOne(5);

  
  G_5 <= constZero_5 WHEN gate_pl_5 = '0' ELSE
      constOne_5;

  G_6(0) <= G_0;
  G_6(1) <= G_1;
  G_6(2) <= G_2;
  G_6(3) <= G_3;
  G_6(4) <= G_4;
  G_6(5) <= G_5;

  constZero_6(0) <= X"0000000000000000";
  constZero_6(1) <= X"0000000000000000";
  constZero_6(2) <= X"0000000000000000";
  constZero_6(3) <= X"0000000000000000";
  constZero_6(4) <= X"0000000000000000";
  constZero_6(5) <= X"0000000000000000";

  constZero_0_1 <= constZero_6(0);

  constOne_6(0) <= X"3ff0000000000000";
  constOne_6(1) <= X"3ff0000000000000";
  constOne_6(2) <= X"3ff0000000000000";
  constOne_6(3) <= X"3ff0000000000000";
  constOne_6(4) <= X"3ff0000000000000";
  constOne_6(5) <= X"3ff0000000000000";

  constOne_0_1 <= constOne_6(0);

  
  G_0_1 <= constZero_0_1 WHEN gate_ps_0 = '0' ELSE
      constOne_0_1;

  constZero_1_1 <= constZero_6(1);

  constOne_1_1 <= constOne_6(1);

  
  G_1_1 <= constZero_1_1 WHEN gate_ps_1 = '0' ELSE
      constOne_1_1;

  constZero_2_1 <= constZero_6(2);

  constOne_2_1 <= constOne_6(2);

  
  G_2_1 <= constZero_2_1 WHEN gate_ps_2 = '0' ELSE
      constOne_2_1;

  constZero_3_1 <= constZero_6(3);

  constOne_3_1 <= constOne_6(3);

  
  G_3_1 <= constZero_3_1 WHEN gate_ps_3 = '0' ELSE
      constOne_3_1;

  constZero_4_1 <= constZero_6(4);

  constOne_4_1 <= constOne_6(4);

  
  G_4_1 <= constZero_4_1 WHEN gate_ps_4 = '0' ELSE
      constOne_4_1;

  constZero_5_1 <= constZero_6(5);

  constOne_5_1 <= constOne_6(5);

  
  G_5_1 <= constZero_5_1 WHEN gate_ps_5 = '0' ELSE
      constOne_5_1;

  G_7(0) <= G_0_1;
  G_7(1) <= G_1_1;
  G_7(2) <= G_2_1;
  G_7(3) <= G_3_1;
  G_7(4) <= G_4_1;
  G_7(5) <= G_5_1;

  
  G_8(0) <= G_6(0) WHEN switch_pspl_gate = '0' ELSE
      G_7(0);
  
  G_8(1) <= G_6(1) WHEN switch_pspl_gate = '0' ELSE
      G_7(1);
  
  G_8(2) <= G_6(2) WHEN switch_pspl_gate = '0' ELSE
      G_7(2);
  
  G_8(3) <= G_6(3) WHEN switch_pspl_gate = '0' ELSE
      G_7(3);
  
  G_8(4) <= G_6(4) WHEN switch_pspl_gate = '0' ELSE
      G_7(4);
  
  G_8(5) <= G_6(5) WHEN switch_pspl_gate = '0' ELSE
      G_7(5);

  S1 <= G_8(0);

  Rate_Transition12_out1 <= S1;

  -- Input register for RAM-based shift register delayMatch8
  delayMatch8_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_regin <= X"0000000000000000";
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch8_regin <= Rate_Transition12_out1;
      END IF;
    END IF;
  END PROCESS delayMatch8_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Write address counter for RAM-based shift register delayMatch8
  delayMatch8_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_waddr <= to_unsigned(16#0#, 2);
      ELSIF enb_1_25_0 = '1' THEN
        IF delayMatch8_waddr >= to_unsigned(16#1#, 2) THEN 
          delayMatch8_waddr <= to_unsigned(16#0#, 2);
        ELSE 
          delayMatch8_waddr <= delayMatch8_waddr + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch8_wr_process;


  delayMatch8_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Read address counter for RAM-based shift register delayMatch8
  delayMatch8_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_raddr <= to_unsigned(16#1#, 2);
      ELSIF enb_1_25_0 = '1' THEN
        IF delayMatch8_raddr >= to_unsigned(16#1#, 2) THEN 
          delayMatch8_raddr <= to_unsigned(16#0#, 2);
        ELSE 
          delayMatch8_raddr <= delayMatch8_raddr + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch8_rd_process;


  -- Output register for RAM-based shift register delayMatch8
  delayMatch8_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition12_out1_1 <= X"0000000000000000";
      ELSIF enb_1_25_0 = '1' THEN
        Rate_Transition12_out1_1 <= delayMatch8_regout;
      END IF;
    END IF;
  END PROCESS delayMatch8_regoutc_process;


  const_3 <= X"3fe0000000000000";

  const_4 <= X"3fe999999999999a";

  S4 <= G_8(3);

  Rate_Transition15_out1 <= unsigned(S4);

  Rate_Transition17_out1 <= unsigned(G_8(5));

  mergedInput <= Rate_Transition15_out1 & Rate_Transition17_out1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_regin <= to_unsigned(0, 128);
      ELSIF enb_1_25_0 = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_waddr <= to_unsigned(16#0#, 2);
      ELSIF enb_1_25_0 = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#1#, 2) THEN 
          mergedDelay_waddr <= to_unsigned(16#0#, 2);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_raddr <= to_unsigned(16#1#, 2);
      ELSIF enb_1_25_0 = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#1#, 2) THEN 
          mergedDelay_raddr <= to_unsigned(16#0#, 2);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedOutput <= to_unsigned(0, 128);
      ELSIF enb_1_25_0 = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  slicedInput <= mergedOutput(127 DOWNTO 64);

  Rate_Transition15_out1_1 <= std_logic_vector(resize(slicedInput, 64));

  const_5 <= X"3fe0000000000000";

  const_6 <= X"3fe999999999999a";

  slicedInput_1 <= mergedOutput(63 DOWNTO 0);

  Rate_Transition17_out1_1 <= std_logic_vector(resize(slicedInput_1, 64));

  const_7 <= X"3fe0000000000000";

  const_8 <= X"3fe999999999999a";

  S3 <= G_8(2);

  Rate_Transition14_out1 <= unsigned(S3);

  S2 <= G_8(1);

  Rate_Transition13_out1 <= unsigned(S2);

  mergedInput_1 <= Rate_Transition14_out1 & Rate_Transition13_out1;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_regin_1 <= to_unsigned(0, 128);
      ELSIF enb_1_25_0 = '1' THEN
        mergedDelay_regin_1 <= mergedInput_1;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_1_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_waddr_1 <= to_unsigned(16#0#, 2);
      ELSIF enb_1_25_0 = '1' THEN
        IF mergedDelay_waddr_1 >= to_unsigned(16#1#, 2) THEN 
          mergedDelay_waddr_1 <= to_unsigned(16#0#, 2);
        ELSE 
          mergedDelay_waddr_1 <= mergedDelay_waddr_1 + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_1_process;


  mergedDelay_wrenb_1 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedDelay_raddr_1 <= to_unsigned(16#1#, 2);
      ELSIF enb_1_25_0 = '1' THEN
        IF mergedDelay_raddr_1 >= to_unsigned(16#1#, 2) THEN 
          mergedDelay_raddr_1 <= to_unsigned(16#0#, 2);
        ELSE 
          mergedDelay_raddr_1 <= mergedDelay_raddr_1 + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_1_process;


  mergedDelay_regout_unsigned_1 <= unsigned(mergedDelay_regout_1);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mergedOutput_1 <= to_unsigned(0, 128);
      ELSIF enb_1_25_0 = '1' THEN
        mergedOutput_1 <= mergedDelay_regout_unsigned_1;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_1_process;


  slicedInput_2 <= mergedOutput_1(127 DOWNTO 64);

  Rate_Transition14_out1_1 <= std_logic_vector(resize(slicedInput_2, 64));

  const_9 <= X"3fa999999999999a";

  const_10 <= X"3fe999999999999a";

  slicedInput_3 <= mergedOutput_1(63 DOWNTO 0);

  Rate_Transition13_out1_1 <= std_logic_vector(resize(slicedInput_3, 64));

  const_11 <= X"3fe0000000000000";

  const_12 <= X"3fe999999999999a";

  S5 <= G_8(4);

  Rate_Transition16_out1 <= S5;

  -- Input register for RAM-based shift register delayMatch13
  delayMatch13_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_regin <= X"0000000000000000";
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch13_regin <= Rate_Transition16_out1;
      END IF;
    END IF;
  END PROCESS delayMatch13_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Write address counter for RAM-based shift register delayMatch13
  delayMatch13_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_waddr <= to_unsigned(16#0#, 2);
      ELSIF enb_1_25_0 = '1' THEN
        IF delayMatch13_waddr >= to_unsigned(16#1#, 2) THEN 
          delayMatch13_waddr <= to_unsigned(16#0#, 2);
        ELSE 
          delayMatch13_waddr <= delayMatch13_waddr + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch13_wr_process;


  delayMatch13_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 1
  -- 
  -- Read address counter for RAM-based shift register delayMatch13
  delayMatch13_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_raddr <= to_unsigned(16#1#, 2);
      ELSIF enb_1_25_0 = '1' THEN
        IF delayMatch13_raddr >= to_unsigned(16#1#, 2) THEN 
          delayMatch13_raddr <= to_unsigned(16#0#, 2);
        ELSE 
          delayMatch13_raddr <= delayMatch13_raddr + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS delayMatch13_rd_process;


  -- Output register for RAM-based shift register delayMatch13
  delayMatch13_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition16_out1_1 <= X"0000000000000000";
      ELSIF enb_1_25_0 = '1' THEN
        Rate_Transition16_out1_1 <= delayMatch13_regout;
      END IF;
    END IF;
  END PROCESS delayMatch13_regoutc_process;


  const_13 <= X"3fa999999999999a";

  Default_Index_out1 <= to_unsigned(16#0#, 3);

  Mode_Vector8_out1(0) <= '0';
  Mode_Vector8_out1(1) <= '1';
  Mode_Vector8_out1(2) <= '0';
  Mode_Vector8_out1(3) <= '0';
  Mode_Vector8_out1(4) <= '0';
  Mode_Vector8_out1(5) <= '1';
  Mode_Vector8_out1(6) <= '0';
  Mode_Vector8_out1(7) <= '1';
  Mode_Vector8_out1(8) <= '0';
  Mode_Vector8_out1(9) <= '0';
  Mode_Vector8_out1(10) <= '0';
  Mode_Vector8_out1(11) <= '0';

  Mode_Vector7_out1(0) <= '0';
  Mode_Vector7_out1(1) <= '0';
  Mode_Vector7_out1(2) <= '0';
  Mode_Vector7_out1(3) <= '0';
  Mode_Vector7_out1(4) <= '0';
  Mode_Vector7_out1(5) <= '1';
  Mode_Vector7_out1(6) <= '0';
  Mode_Vector7_out1(7) <= '1';
  Mode_Vector7_out1(8) <= '0';
  Mode_Vector7_out1(9) <= '1';
  Mode_Vector7_out1(10) <= '0';
  Mode_Vector7_out1(11) <= '0';

  Mode_Vector6_out1(0) <= '0';
  Mode_Vector6_out1(1) <= '1';
  Mode_Vector6_out1(2) <= '0';
  Mode_Vector6_out1(3) <= '0';
  Mode_Vector6_out1(4) <= '0';
  Mode_Vector6_out1(5) <= '0';
  Mode_Vector6_out1(6) <= '0';
  Mode_Vector6_out1(7) <= '1';
  Mode_Vector6_out1(8) <= '0';
  Mode_Vector6_out1(9) <= '0';
  Mode_Vector6_out1(10) <= '0';
  Mode_Vector6_out1(11) <= '1';

  Mode_Vector5_out1(0) <= '0';
  Mode_Vector5_out1(1) <= '0';
  Mode_Vector5_out1(2) <= '0';
  Mode_Vector5_out1(3) <= '0';
  Mode_Vector5_out1(4) <= '0';
  Mode_Vector5_out1(5) <= '0';
  Mode_Vector5_out1(6) <= '0';
  Mode_Vector5_out1(7) <= '1';
  Mode_Vector5_out1(8) <= '0';
  Mode_Vector5_out1(9) <= '1';
  Mode_Vector5_out1(10) <= '0';
  Mode_Vector5_out1(11) <= '1';

  Mode_Vector4_out1(0) <= '0';
  Mode_Vector4_out1(1) <= '1';
  Mode_Vector4_out1(2) <= '0';
  Mode_Vector4_out1(3) <= '1';
  Mode_Vector4_out1(4) <= '0';
  Mode_Vector4_out1(5) <= '0';
  Mode_Vector4_out1(6) <= '0';
  Mode_Vector4_out1(7) <= '0';
  Mode_Vector4_out1(8) <= '0';
  Mode_Vector4_out1(9) <= '0';
  Mode_Vector4_out1(10) <= '0';
  Mode_Vector4_out1(11) <= '1';

  Mode_Vector3_out1(0) <= '0';
  Mode_Vector3_out1(1) <= '0';
  Mode_Vector3_out1(2) <= '0';
  Mode_Vector3_out1(3) <= '1';
  Mode_Vector3_out1(4) <= '0';
  Mode_Vector3_out1(5) <= '0';
  Mode_Vector3_out1(6) <= '0';
  Mode_Vector3_out1(7) <= '0';
  Mode_Vector3_out1(8) <= '0';
  Mode_Vector3_out1(9) <= '1';
  Mode_Vector3_out1(10) <= '0';
  Mode_Vector3_out1(11) <= '1';

  Mode_Vector2_out1(0) <= '0';
  Mode_Vector2_out1(1) <= '1';
  Mode_Vector2_out1(2) <= '0';
  Mode_Vector2_out1(3) <= '1';
  Mode_Vector2_out1(4) <= '0';
  Mode_Vector2_out1(5) <= '1';
  Mode_Vector2_out1(6) <= '0';
  Mode_Vector2_out1(7) <= '0';
  Mode_Vector2_out1(8) <= '0';
  Mode_Vector2_out1(9) <= '0';
  Mode_Vector2_out1(10) <= '0';
  Mode_Vector2_out1(11) <= '0';

  Mode_Vector1_out1(0) <= '0';
  Mode_Vector1_out1(1) <= '0';
  Mode_Vector1_out1(2) <= '0';
  Mode_Vector1_out1(3) <= '1';
  Mode_Vector1_out1(4) <= '0';
  Mode_Vector1_out1(5) <= '1';
  Mode_Vector1_out1(6) <= '0';
  Mode_Vector1_out1(7) <= '0';
  Mode_Vector1_out1(8) <= '0';
  Mode_Vector1_out1(9) <= '1';
  Mode_Vector1_out1(10) <= '0';
  Mode_Vector1_out1(11) <= '0';

  configuration1_1(0) <= X"bf7ffffc";
  configuration1_1(1) <= X"bf7ffffc";
  configuration1_1(2) <= X"bf7ffffc";
  configuration1_1(3) <= X"ac1acfab";
  configuration1_1(4) <= X"37b88ca1";
  configuration1_1(5) <= X"b7a7c5ab";
  configuration1_1(6) <= X"360637bc";
  configuration1_1(7) <= X"ac1acfab";
  configuration1_1(8) <= X"37b88ca1";
  configuration1_1(9) <= X"360637bc";
  configuration1_1(10) <= X"37b88ca1";
  configuration1_1(11) <= X"360637bc";
  configuration1_1(12) <= X"bc23d708";
  configuration1_1(13) <= X"3c23d708";
  configuration1_1(14) <= X"33d6bf92";
  configuration1_1(15) <= X"bf7ffffc";
  configuration1_1(16) <= X"33d6bf92";
  configuration1_1(17) <= X"b22bcc75";
  configuration1_1(18) <= X"322bcc75";
  configuration1_1(19) <= X"3f7ffffc";
  configuration1_1(20) <= X"bc23d708";
  configuration1_1(21) <= X"3c23d708";
  configuration1_1(22) <= X"33d6bf92";
  configuration1_1(23) <= X"b22bcc75";
  configuration1_1(24) <= X"33d6bf92";
  configuration1_1(25) <= X"bf7ffffc";
  configuration1_1(26) <= X"3f7ffffc";
  configuration1_1(27) <= X"322bcc75";

  configuration2(0) <= X"3f7ffffc";
  configuration2(1) <= X"bf7ffffc";
  configuration2(2) <= X"bf7ffffc";
  configuration2(3) <= X"b7a7c5ab";
  configuration2(4) <= X"360637bc";
  configuration2(5) <= X"b7a7c5ab";
  configuration2(6) <= X"360637bc";
  configuration2(7) <= X"ac1acfab";
  configuration2(8) <= X"37b88ca1";
  configuration2(9) <= X"37b88ca1";
  configuration2(10) <= X"37b88ca1";
  configuration2(11) <= X"360637bc";
  configuration2(12) <= X"bc23d708";
  configuration2(13) <= X"3c23d708";
  configuration2(14) <= X"33d6bf92";
  configuration2(15) <= X"b22bcc75";
  configuration2(16) <= X"33d6bf92";
  configuration2(17) <= X"b22bcc75";
  configuration2(18) <= X"3f7ffffc";
  configuration2(19) <= X"3f7ffffc";
  configuration2(20) <= X"bc23d708";
  configuration2(21) <= X"3c23d708";
  configuration2(22) <= X"33d6bf92";
  configuration2(23) <= X"b22bcc75";
  configuration2(24) <= X"33d6bf92";
  configuration2(25) <= X"bf7ffffc";
  configuration2(26) <= X"3f7ffffc";
  configuration2(27) <= X"322bcc75";

  configuration3(0) <= X"bf7ffffc";
  configuration3(1) <= X"bf7ffffc";
  configuration3(2) <= X"3f7ffffc";
  configuration3(3) <= X"ac1acfab";
  configuration3(4) <= X"37b88ca1";
  configuration3(5) <= X"ac1acfab";
  configuration3(6) <= X"37b88ca1";
  configuration3(7) <= X"ac1acfab";
  configuration3(8) <= X"37b88ca1";
  configuration3(9) <= X"360637bc";
  configuration3(10) <= X"360637bc";
  configuration3(11) <= X"360637bc";
  configuration3(12) <= X"bc23d708";
  configuration3(13) <= X"3c23d708";
  configuration3(14) <= X"33d6bf92";
  configuration3(15) <= X"bf7ffffc";
  configuration3(16) <= X"33d6bf92";
  configuration3(17) <= X"bf7ffffc";
  configuration3(18) <= X"322bcc75";
  configuration3(19) <= X"322bcc75";
  configuration3(20) <= X"bc23d708";
  configuration3(21) <= X"3c23d708";
  configuration3(22) <= X"33d6bf92";
  configuration3(23) <= X"bf7ffffc";
  configuration3(24) <= X"33d6bf92";
  configuration3(25) <= X"bf7ffffc";
  configuration3(26) <= X"322bcc75";
  configuration3(27) <= X"322bcc75";

  configuration4(0) <= X"3f7ffffc";
  configuration4(1) <= X"bf7ffffc";
  configuration4(2) <= X"3f7ffffc";
  configuration4(3) <= X"b7a7c5ab";
  configuration4(4) <= X"360637bc";
  configuration4(5) <= X"ac1acfab";
  configuration4(6) <= X"37b88ca1";
  configuration4(7) <= X"ac1acfab";
  configuration4(8) <= X"37b88ca1";
  configuration4(9) <= X"37b88ca1";
  configuration4(10) <= X"360637bc";
  configuration4(11) <= X"360637bc";
  configuration4(12) <= X"bc23d708";
  configuration4(13) <= X"3c23d708";
  configuration4(14) <= X"33d6bf92";
  configuration4(15) <= X"b22bcc75";
  configuration4(16) <= X"33d6bf92";
  configuration4(17) <= X"bf7ffffc";
  configuration4(18) <= X"3f7ffffc";
  configuration4(19) <= X"322bcc75";
  configuration4(20) <= X"bc23d708";
  configuration4(21) <= X"3c23d708";
  configuration4(22) <= X"33d6bf92";
  configuration4(23) <= X"bf7ffffc";
  configuration4(24) <= X"33d6bf92";
  configuration4(25) <= X"bf7ffffc";
  configuration4(26) <= X"322bcc75";
  configuration4(27) <= X"322bcc75";

  configuration5(0) <= X"bf7ffffc";
  configuration5(1) <= X"3f7ffffc";
  configuration5(2) <= X"3f7ffffc";
  configuration5(3) <= X"ac1acfab";
  configuration5(4) <= X"37b88ca1";
  configuration5(5) <= X"ac1acfab";
  configuration5(6) <= X"37b88ca1";
  configuration5(7) <= X"b7a7c5ab";
  configuration5(8) <= X"360637bc";
  configuration5(9) <= X"360637bc";
  configuration5(10) <= X"360637bc";
  configuration5(11) <= X"37b88ca1";
  configuration5(12) <= X"bc23d708";
  configuration5(13) <= X"3c23d708";
  configuration5(14) <= X"33d6bf92";
  configuration5(15) <= X"bf7ffffc";
  configuration5(16) <= X"33d6bf92";
  configuration5(17) <= X"bf7ffffc";
  configuration5(18) <= X"322bcc75";
  configuration5(19) <= X"322bcc75";
  configuration5(20) <= X"bc23d708";
  configuration5(21) <= X"3c23d708";
  configuration5(22) <= X"33d6bf92";
  configuration5(23) <= X"bf7ffffc";
  configuration5(24) <= X"33d6bf92";
  configuration5(25) <= X"b22bcc75";
  configuration5(26) <= X"322bcc75";
  configuration5(27) <= X"3f7ffffc";

  configuration6(0) <= X"3f7ffffc";
  configuration6(1) <= X"3f7ffffc";
  configuration6(2) <= X"3f7ffffc";
  configuration6(3) <= X"b7a7c5ab";
  configuration6(4) <= X"360637bc";
  configuration6(5) <= X"ac1acfab";
  configuration6(6) <= X"37b88ca1";
  configuration6(7) <= X"b7a7c5ab";
  configuration6(8) <= X"360637bc";
  configuration6(9) <= X"37b88ca1";
  configuration6(10) <= X"360637bc";
  configuration6(11) <= X"37b88ca1";
  configuration6(12) <= X"bc23d708";
  configuration6(13) <= X"3c23d708";
  configuration6(14) <= X"33d6bf92";
  configuration6(15) <= X"b22bcc75";
  configuration6(16) <= X"33d6bf92";
  configuration6(17) <= X"bf7ffffc";
  configuration6(18) <= X"3f7ffffc";
  configuration6(19) <= X"322bcc75";
  configuration6(20) <= X"bc23d708";
  configuration6(21) <= X"3c23d708";
  configuration6(22) <= X"33d6bf92";
  configuration6(23) <= X"bf7ffffc";
  configuration6(24) <= X"33d6bf92";
  configuration6(25) <= X"b22bcc75";
  configuration6(26) <= X"322bcc75";
  configuration6(27) <= X"3f7ffffc";

  configuration7(0) <= X"bf7ffffc";
  configuration7(1) <= X"3f7ffffc";
  configuration7(2) <= X"bf7ffffc";
  configuration7(3) <= X"ac1acfab";
  configuration7(4) <= X"37b88ca1";
  configuration7(5) <= X"b7a7c5ab";
  configuration7(6) <= X"360637bc";
  configuration7(7) <= X"b7a7c5ab";
  configuration7(8) <= X"360637bc";
  configuration7(9) <= X"360637bc";
  configuration7(10) <= X"37b88ca1";
  configuration7(11) <= X"37b88ca1";
  configuration7(12) <= X"bc23d708";
  configuration7(13) <= X"3c23d708";
  configuration7(14) <= X"33d6bf92";
  configuration7(15) <= X"bf7ffffc";
  configuration7(16) <= X"33d6bf92";
  configuration7(17) <= X"b22bcc75";
  configuration7(18) <= X"322bcc75";
  configuration7(19) <= X"3f7ffffc";
  configuration7(20) <= X"bc23d708";
  configuration7(21) <= X"3c23d708";
  configuration7(22) <= X"33d6bf92";
  configuration7(23) <= X"b22bcc75";
  configuration7(24) <= X"33d6bf92";
  configuration7(25) <= X"b22bcc75";
  configuration7(26) <= X"3f7ffffc";
  configuration7(27) <= X"3f7ffffc";

  configuration8(0) <= X"3f7ffffc";
  configuration8(1) <= X"3f7ffffc";
  configuration8(2) <= X"bf7ffffc";
  configuration8(3) <= X"b7a7c5ab";
  configuration8(4) <= X"360637bc";
  configuration8(5) <= X"b7a7c5ab";
  configuration8(6) <= X"360637bc";
  configuration8(7) <= X"b7a7c5ab";
  configuration8(8) <= X"360637bc";
  configuration8(9) <= X"37b88ca1";
  configuration8(10) <= X"37b88ca1";
  configuration8(11) <= X"37b88ca1";
  configuration8(12) <= X"bc23d708";
  configuration8(13) <= X"3c23d708";
  configuration8(14) <= X"33d6bf92";
  configuration8(15) <= X"b22bcc75";
  configuration8(16) <= X"33d6bf92";
  configuration8(17) <= X"b22bcc75";
  configuration8(18) <= X"3f7ffffc";
  configuration8(19) <= X"3f7ffffc";
  configuration8(20) <= X"bc23d708";
  configuration8(21) <= X"3c23d708";
  configuration8(22) <= X"33d6bf92";
  configuration8(23) <= X"b22bcc75";
  configuration8(24) <= X"33d6bf92";
  configuration8(25) <= X"b22bcc75";
  configuration8(26) <= X"3f7ffffc";
  configuration8(27) <= X"3f7ffffc";

  switch_pspl_abc_1 <= switch_pspl_abc;

  Iabc_PL(0) <= i_abc_pl_0;
  Iabc_PL(1) <= i_abc_pl_1;
  Iabc_PL(2) <= i_abc_pl_2;

  outputgen1: FOR k IN 0 TO 2 GENERATE
    Iabc_PL_1(k) <= signed(Iabc_PL(k));
  END GENERATE;

  Iabc_PL_2 <= Iabc_PL_1;

  Iabc(0) <= i_abc_ps_0;
  Iabc(1) <= i_abc_ps_1;
  Iabc(2) <= i_abc_ps_2;

  Iabc_1 <= Iabc;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg(0) <= '0';
        delayMatch_reg(1) <= '0';
        delayMatch_reg(2) <= '0';
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  switch_pspl_abc_2 <= delayMatch_reg(2);
  delayMatch_reg_next(0) <= switch_pspl_abc_1;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);



  
  Iab(0) <= Data_Type_Conversion4_out1(0) WHEN switch_pspl_abc_2 = '0' ELSE
      Data_Type_Conversion3_out1(0);
  
  Iab(1) <= Data_Type_Conversion4_out1(1) WHEN switch_pspl_abc_2 = '0' ELSE
      Data_Type_Conversion3_out1(1);
  
  Iab(2) <= Data_Type_Conversion4_out1(2) WHEN switch_pspl_abc_2 = '0' ELSE
      Data_Type_Conversion3_out1(2);

  Iab_0 <= Iab(0);

  Rate_Transition101_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition101_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Rate_Transition101_bypass_reg <= Iab_0;
      END IF;
    END IF;
  END PROCESS Rate_Transition101_bypass_process;

  
  Ia <= Iab_0 WHEN enb_1_100_1 = '1' ELSE
      Rate_Transition101_bypass_reg;

  Rate_Transition10_out1 <= Ia;

  col1(0) <= Rate_Transition18_out1;
  col1(1) <= Rate_Transition10_out1;

  Iab_1 <= Iab(1);

  Rate_Transition111_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition111_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Rate_Transition111_bypass_reg <= Iab_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition111_bypass_process;

  
  Ib <= Iab_1 WHEN enb_1_100_1 = '1' ELSE
      Rate_Transition111_bypass_reg;

  Rate_Transition11_out1 <= Ib;

  col2(0) <= Rate_Transition18_out1;
  col2(1) <= Rate_Transition11_out1;

  col3(0) <= Rate_Transition18_out1;
  col3(1) <= Rate_Transition10_out1;
  col3(2) <= Rate_Transition11_out1;

  col4(0) <= Rate_Transition18_out1;
  col4(1) <= Rate_Transition10_out1;

  col5(0) <= Rate_Transition18_out1;
  col5(1) <= Rate_Transition10_out1;

  col6(0) <= Rate_Transition18_out1;
  col6(1) <= Rate_Transition10_out1;
  col6(2) <= Rate_Transition11_out1;

  col7(0) <= Rate_Transition18_out1;
  col7(1) <= Rate_Transition10_out1;
  col7(2) <= Rate_Transition11_out1;

  col8(0) <= Rate_Transition18_out1;
  col8(1) <= Rate_Transition11_out1;

  col9(0) <= Rate_Transition18_out1;
  col9(1) <= Rate_Transition11_out1;

  col10(0) <= Rate_Transition18_out1;
  col10(1) <= Rate_Transition10_out1;

  col11(0) <= Rate_Transition18_out1;
  col11(1) <= Rate_Transition10_out1;
  col11(2) <= Rate_Transition11_out1;

  col12(0) <= Rate_Transition18_out1;
  col12(1) <= Rate_Transition11_out1;













  
  Data_Type_Conversion_out1(0) <= '1' WHEN modes(0) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(1) <= '1' WHEN modes(1) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(2) <= '1' WHEN modes(2) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(3) <= '1' WHEN modes(3) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(4) <= '1' WHEN modes(4) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(5) <= '1' WHEN modes(5) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(6) <= '1' WHEN modes(6) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(7) <= '1' WHEN modes(7) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(8) <= '1' WHEN modes(8) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(9) <= '1' WHEN modes(9) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(10) <= '1' WHEN modes(10) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1(11) <= '1' WHEN modes(11) /= '0' ELSE
      '0';

  Subsystem1_out1_unsigned <= unsigned(Subsystem1_out1);

  
  Switch1_out1 <= Constant_out1_1 WHEN Delay_out1_1 = '0' ELSE
      Subsystem1_out1_unsigned;

  
  configuration_rsvd(0) <= configuration1_1(0) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(0) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(0) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(0) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(0) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(0) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(0) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(0);
  
  configuration_rsvd(1) <= configuration1_1(1) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(1) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(1) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(1) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(1) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(1) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(1) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(1);
  
  configuration_rsvd(2) <= configuration1_1(2) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(2) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(2) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(2) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(2) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(2) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(2) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(2);
  
  configuration_rsvd(3) <= configuration1_1(3) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(3) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(3) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(3) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(3) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(3) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(3) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(3);
  
  configuration_rsvd(4) <= configuration1_1(4) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(4) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(4) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(4) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(4) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(4) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(4) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(4);
  
  configuration_rsvd(5) <= configuration1_1(5) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(5) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(5) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(5) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(5) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(5) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(5) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(5);
  
  configuration_rsvd(6) <= configuration1_1(6) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(6) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(6) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(6) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(6) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(6) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(6) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(6);
  
  configuration_rsvd(7) <= configuration1_1(7) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(7) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(7) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(7) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(7) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(7) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(7) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(7);
  
  configuration_rsvd(8) <= configuration1_1(8) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(8) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(8) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(8) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(8) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(8) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(8) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(8);
  
  configuration_rsvd(9) <= configuration1_1(9) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(9) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(9) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(9) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(9) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(9) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(9) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(9);
  
  configuration_rsvd(10) <= configuration1_1(10) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(10) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(10) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(10) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(10) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(10) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(10) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(10);
  
  configuration_rsvd(11) <= configuration1_1(11) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(11) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(11) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(11) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(11) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(11) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(11) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(11);
  
  configuration_rsvd(12) <= configuration1_1(12) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(12) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(12) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(12) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(12) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(12) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(12) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(12);
  
  configuration_rsvd(13) <= configuration1_1(13) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(13) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(13) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(13) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(13) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(13) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(13) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(13);
  
  configuration_rsvd(14) <= configuration1_1(14) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(14) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(14) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(14) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(14) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(14) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(14) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(14);
  
  configuration_rsvd(15) <= configuration1_1(15) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(15) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(15) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(15) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(15) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(15) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(15) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(15);
  
  configuration_rsvd(16) <= configuration1_1(16) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(16) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(16) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(16) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(16) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(16) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(16) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(16);
  
  configuration_rsvd(17) <= configuration1_1(17) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(17) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(17) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(17) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(17) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(17) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(17) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(17);
  
  configuration_rsvd(18) <= configuration1_1(18) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(18) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(18) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(18) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(18) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(18) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(18) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(18);
  
  configuration_rsvd(19) <= configuration1_1(19) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(19) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(19) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(19) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(19) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(19) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(19) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(19);
  
  configuration_rsvd(20) <= configuration1_1(20) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(20) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(20) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(20) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(20) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(20) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(20) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(20);
  
  configuration_rsvd(21) <= configuration1_1(21) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(21) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(21) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(21) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(21) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(21) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(21) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(21);
  
  configuration_rsvd(22) <= configuration1_1(22) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(22) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(22) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(22) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(22) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(22) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(22) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(22);
  
  configuration_rsvd(23) <= configuration1_1(23) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(23) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(23) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(23) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(23) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(23) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(23) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(23);
  
  configuration_rsvd(24) <= configuration1_1(24) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(24) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(24) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(24) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(24) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(24) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(24) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(24);
  
  configuration_rsvd(25) <= configuration1_1(25) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(25) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(25) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(25) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(25) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(25) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(25) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(25);
  
  configuration_rsvd(26) <= configuration1_1(26) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(26) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(26) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(26) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(26) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(26) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(26) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(26);
  
  configuration_rsvd(27) <= configuration1_1(27) WHEN Switch1_out1 = to_unsigned(16#0#, 3) ELSE
      configuration2(27) WHEN Switch1_out1 = to_unsigned(16#1#, 3) ELSE
      configuration3(27) WHEN Switch1_out1 = to_unsigned(16#2#, 3) ELSE
      configuration4(27) WHEN Switch1_out1 = to_unsigned(16#3#, 3) ELSE
      configuration5(27) WHEN Switch1_out1 = to_unsigned(16#4#, 3) ELSE
      configuration6(27) WHEN Switch1_out1 = to_unsigned(16#5#, 3) ELSE
      configuration7(27) WHEN Switch1_out1 = to_unsigned(16#6#, 3) ELSE
      configuration8(27);



  State_Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        State_Delay_bypass_reg(0) <= X"0000000000000000";
        State_Delay_bypass_reg(1) <= X"0000000000000000";
        State_Delay_bypass_reg(2) <= X"0000000000000000";
        State_Delay_bypass_reg(3) <= X"0000000000000000";
        State_Delay_bypass_reg(4) <= X"0000000000000000";
        State_Delay_bypass_reg(5) <= X"0000000000000000";
        State_Delay_bypass_reg(6) <= X"0000000000000000";
        State_Delay_bypass_reg(7) <= X"0000000000000000";
        State_Delay_bypass_reg(8) <= X"0000000000000000";
        State_Delay_bypass_reg(9) <= X"0000000000000000";
        State_Delay_bypass_reg(10) <= X"0000000000000000";
        State_Delay_bypass_reg(11) <= X"0000000000000000";
      ELSIF enb_1_25_1 = '1' THEN
        State_Delay_bypass_reg(0) <= State_Delay_bypass_reg_next(0);
        State_Delay_bypass_reg(1) <= State_Delay_bypass_reg_next(1);
        State_Delay_bypass_reg(2) <= State_Delay_bypass_reg_next(2);
        State_Delay_bypass_reg(3) <= State_Delay_bypass_reg_next(3);
        State_Delay_bypass_reg(4) <= State_Delay_bypass_reg_next(4);
        State_Delay_bypass_reg(5) <= State_Delay_bypass_reg_next(5);
        State_Delay_bypass_reg(6) <= State_Delay_bypass_reg_next(6);
        State_Delay_bypass_reg(7) <= State_Delay_bypass_reg_next(7);
        State_Delay_bypass_reg(8) <= State_Delay_bypass_reg_next(8);
        State_Delay_bypass_reg(9) <= State_Delay_bypass_reg_next(9);
        State_Delay_bypass_reg(10) <= State_Delay_bypass_reg_next(10);
        State_Delay_bypass_reg(11) <= State_Delay_bypass_reg_next(11);
      END IF;
    END IF;
  END PROCESS State_Delay_bypass_process;

  
  State_Update_out1(0) <= out0_9(0) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(0);
  
  State_Update_out1(1) <= out0_9(1) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(1);
  
  State_Update_out1(2) <= out0_9(2) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(2);
  
  State_Update_out1(3) <= out0_9(3) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(3);
  
  State_Update_out1(4) <= out0_9(4) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(4);
  
  State_Update_out1(5) <= out0_9(5) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(5);
  
  State_Update_out1(6) <= out0_9(6) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(6);
  
  State_Update_out1(7) <= out0_9(7) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(7);
  
  State_Update_out1(8) <= out0_9(8) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(8);
  
  State_Update_out1(9) <= out0_9(9) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(9);
  
  State_Update_out1(10) <= out0_9(10) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(10);
  
  State_Update_out1(11) <= out0_9(11) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(11);
  State_Delay_bypass_reg_next(0) <= out0_9(0);
  State_Delay_bypass_reg_next(1) <= out0_9(1);
  State_Delay_bypass_reg_next(2) <= out0_9(2);
  State_Delay_bypass_reg_next(3) <= out0_9(3);
  State_Delay_bypass_reg_next(4) <= out0_9(4);
  State_Delay_bypass_reg_next(5) <= out0_9(5);
  State_Delay_bypass_reg_next(6) <= out0_9(6);
  State_Delay_bypass_reg_next(7) <= out0_9(7);
  State_Delay_bypass_reg_next(8) <= out0_9(8);
  State_Delay_bypass_reg_next(9) <= out0_9(9);
  State_Delay_bypass_reg_next(10) <= out0_9(10);
  State_Delay_bypass_reg_next(11) <= out0_9(11);

  State_Delay_out <= State_Update_out1;

  
  State_Delay_out1(0) <= State_Delay_Initial_Val_out(0) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(0);
  
  State_Delay_out1(1) <= State_Delay_Initial_Val_out(1) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(1);
  
  State_Delay_out1(2) <= State_Delay_Initial_Val_out(2) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(2);
  
  State_Delay_out1(3) <= State_Delay_Initial_Val_out(3) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(3);
  
  State_Delay_out1(4) <= State_Delay_Initial_Val_out(4) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(4);
  
  State_Delay_out1(5) <= State_Delay_Initial_Val_out(5) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(5);
  
  State_Delay_out1(6) <= State_Delay_Initial_Val_out(6) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(6);
  
  State_Delay_out1(7) <= State_Delay_Initial_Val_out(7) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(7);
  
  State_Delay_out1(8) <= State_Delay_Initial_Val_out(8) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(8);
  
  State_Delay_out1(9) <= State_Delay_Initial_Val_out(9) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(9);
  
  State_Delay_out1(10) <= State_Delay_Initial_Val_out(10) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(10);
  
  State_Delay_out1(11) <= State_Delay_Initial_Val_out(11) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(11);

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch3_out1_1(0) <= X"0000000000000000";
        Switch3_out1_1(1) <= X"0000000000000000";
        Switch3_out1_1(2) <= X"0000000000000000";
        Switch3_out1_1(3) <= X"0000000000000000";
        Switch3_out1_1(4) <= X"0000000000000000";
        Switch3_out1_1(5) <= X"0000000000000000";
        Switch3_out1_1(6) <= X"0000000000000000";
        Switch3_out1_1(7) <= X"0000000000000000";
        Switch3_out1_1(8) <= X"0000000000000000";
        Switch3_out1_1(9) <= X"0000000000000000";
        Switch3_out1_1(10) <= X"0000000000000000";
        Switch3_out1_1(11) <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Switch3_out1_1(0) <= Switch3_out1(0);
        Switch3_out1_1(1) <= Switch3_out1(1);
        Switch3_out1_1(2) <= Switch3_out1(2);
        Switch3_out1_1(3) <= Switch3_out1(3);
        Switch3_out1_1(4) <= Switch3_out1(4);
        Switch3_out1_1(5) <= Switch3_out1(5);
        Switch3_out1_1(6) <= Switch3_out1(6);
        Switch3_out1_1(7) <= Switch3_out1(7);
        Switch3_out1_1(8) <= Switch3_out1(8);
        Switch3_out1_1(9) <= Switch3_out1(9);
        Switch3_out1_1(10) <= Switch3_out1(10);
        Switch3_out1_1(11) <= Switch3_out1(11);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_bypass_reg(0) <= X"0000000000000000";
        Delay3_bypass_reg(1) <= X"0000000000000000";
        Delay3_bypass_reg(2) <= X"0000000000000000";
        Delay3_bypass_reg(3) <= X"0000000000000000";
        Delay3_bypass_reg(4) <= X"0000000000000000";
        Delay3_bypass_reg(5) <= X"0000000000000000";
        Delay3_bypass_reg(6) <= X"0000000000000000";
        Delay3_bypass_reg(7) <= X"0000000000000000";
        Delay3_bypass_reg(8) <= X"0000000000000000";
        Delay3_bypass_reg(9) <= X"0000000000000000";
        Delay3_bypass_reg(10) <= X"0000000000000000";
        Delay3_bypass_reg(11) <= X"0000000000000000";
      ELSIF enb_1_25_1 = '1' THEN
        Delay3_bypass_reg(0) <= Delay3_bypass_reg_next(0);
        Delay3_bypass_reg(1) <= Delay3_bypass_reg_next(1);
        Delay3_bypass_reg(2) <= Delay3_bypass_reg_next(2);
        Delay3_bypass_reg(3) <= Delay3_bypass_reg_next(3);
        Delay3_bypass_reg(4) <= Delay3_bypass_reg_next(4);
        Delay3_bypass_reg(5) <= Delay3_bypass_reg_next(5);
        Delay3_bypass_reg(6) <= Delay3_bypass_reg_next(6);
        Delay3_bypass_reg(7) <= Delay3_bypass_reg_next(7);
        Delay3_bypass_reg(8) <= Delay3_bypass_reg_next(8);
        Delay3_bypass_reg(9) <= Delay3_bypass_reg_next(9);
        Delay3_bypass_reg(10) <= Delay3_bypass_reg_next(10);
        Delay3_bypass_reg(11) <= Delay3_bypass_reg_next(11);
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Switch3_out1_2(0) <= Switch3_out1_1(0) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(0);
  
  Switch3_out1_2(1) <= Switch3_out1_1(1) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(1);
  
  Switch3_out1_2(2) <= Switch3_out1_1(2) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(2);
  
  Switch3_out1_2(3) <= Switch3_out1_1(3) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(3);
  
  Switch3_out1_2(4) <= Switch3_out1_1(4) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(4);
  
  Switch3_out1_2(5) <= Switch3_out1_1(5) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(5);
  
  Switch3_out1_2(6) <= Switch3_out1_1(6) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(6);
  
  Switch3_out1_2(7) <= Switch3_out1_1(7) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(7);
  
  Switch3_out1_2(8) <= Switch3_out1_1(8) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(8);
  
  Switch3_out1_2(9) <= Switch3_out1_1(9) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(9);
  
  Switch3_out1_2(10) <= Switch3_out1_1(10) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(10);
  
  Switch3_out1_2(11) <= Switch3_out1_1(11) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(11);
  Delay3_bypass_reg_next(0) <= Switch3_out1_1(0);
  Delay3_bypass_reg_next(1) <= Switch3_out1_1(1);
  Delay3_bypass_reg_next(2) <= Switch3_out1_1(2);
  Delay3_bypass_reg_next(3) <= Switch3_out1_1(3);
  Delay3_bypass_reg_next(4) <= Switch3_out1_1(4);
  Delay3_bypass_reg_next(5) <= Switch3_out1_1(5);
  Delay3_bypass_reg_next(6) <= Switch3_out1_1(6);
  Delay3_bypass_reg_next(7) <= Switch3_out1_1(7);
  Delay3_bypass_reg_next(8) <= Switch3_out1_1(8);
  Delay3_bypass_reg_next(9) <= Switch3_out1_1(9);
  Delay3_bypass_reg_next(10) <= Switch3_out1_1(10);
  Delay3_bypass_reg_next(11) <= Switch3_out1_1(11);

  Delay3_out1 <= Switch3_out1_2;

  
  Switch3_out1(0) <= Delay3_out1(0) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(0);
  
  Switch3_out1(1) <= Delay3_out1(1) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(1);
  
  Switch3_out1(2) <= Delay3_out1(2) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(2);
  
  Switch3_out1(3) <= Delay3_out1(3) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(3);
  
  Switch3_out1(4) <= Delay3_out1(4) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(4);
  
  Switch3_out1(5) <= Delay3_out1(5) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(5);
  
  Switch3_out1(6) <= Delay3_out1(6) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(6);
  
  Switch3_out1(7) <= Delay3_out1(7) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(7);
  
  Switch3_out1(8) <= Delay3_out1(8) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(8);
  
  Switch3_out1(9) <= Delay3_out1(9) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(9);
  
  Switch3_out1(10) <= Delay3_out1(10) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(10);
  
  Switch3_out1(11) <= Delay3_out1(11) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(11);

  
  Switch_out1(0) <= X0_out1(0) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(0);
  
  Switch_out1(1) <= X0_out1(1) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(1);
  
  Switch_out1(2) <= X0_out1(2) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(2);
  
  Switch_out1(3) <= X0_out1(3) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(3);
  
  Switch_out1(4) <= X0_out1(4) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(4);
  
  Switch_out1(5) <= X0_out1(5) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(5);
  
  Switch_out1(6) <= X0_out1(6) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(6);
  
  Switch_out1(7) <= X0_out1(7) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(7);
  
  Switch_out1(8) <= X0_out1(8) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(8);
  
  Switch_out1(9) <= X0_out1(9) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(9);
  
  Switch_out1(10) <= X0_out1(10) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(10);
  
  Switch_out1(11) <= X0_out1(11) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(11);


  col1_1(0) <= Switch_out1(0);
  col1_1(1) <= Switch_out1(1);

  Rate_Transition191_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Output_Demux_out1 <= X"0000000000000000";
      ELSIF enb_1_25_1 = '1' THEN
        Output_Demux_out1 <= dot_product1_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition191_output_process;


  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch17_reg(0) <= X"0000000000000000";
        delayMatch17_reg(1) <= X"0000000000000000";
        delayMatch17_reg(2) <= X"0000000000000000";
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch17_reg(0) <= delayMatch17_reg_next(0);
        delayMatch17_reg(1) <= delayMatch17_reg_next(1);
        delayMatch17_reg(2) <= delayMatch17_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  Output_Demux_out1_1 <= delayMatch17_reg(2);
  delayMatch17_reg_next(0) <= Output_Demux_out1;
  delayMatch17_reg_next(1) <= delayMatch17_reg(0);
  delayMatch17_reg_next(2) <= delayMatch17_reg(1);

  Rate_Transition19_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Uab <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Uab <= Output_Demux_out1_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition19_output_process;


  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Uab_1 <= X"0000000000000000";
      ELSIF enb_1_100_0 = '1' THEN
        Uab_1 <= Uab;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Uab_2 <= Uab_1;


  col2_1(0) <= Switch_out1(1);
  col2_1(1) <= Switch_out1(2);

  Rate_Transition201_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Output_Demux_out2 <= X"0000000000000000";
      ELSIF enb_1_25_1 = '1' THEN
        Output_Demux_out2 <= dot_product2_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition201_output_process;


  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch18_reg(0) <= X"0000000000000000";
        delayMatch18_reg(1) <= X"0000000000000000";
        delayMatch18_reg(2) <= X"0000000000000000";
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch18_reg(0) <= delayMatch18_reg_next(0);
        delayMatch18_reg(1) <= delayMatch18_reg_next(1);
        delayMatch18_reg(2) <= delayMatch18_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  Output_Demux_out2_1 <= delayMatch18_reg(2);
  delayMatch18_reg_next(0) <= Output_Demux_out2;
  delayMatch18_reg_next(1) <= delayMatch18_reg(0);
  delayMatch18_reg_next(2) <= delayMatch18_reg(1);

  Rate_Transition20_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Ubc <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Ubc <= Output_Demux_out2_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition20_output_process;


  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Ubc_1 <= X"0000000000000000";
      ELSIF enb_1_100_0 = '1' THEN
        Ubc_1 <= Ubc;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Ubc_2 <= Ubc_1;


  col3_1(0) <= Switch_out1(0);
  col3_1(1) <= Switch_out1(2);

  Rate_Transition211_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Output_Demux_out3 <= X"0000000000000000";
      ELSIF enb_1_25_1 = '1' THEN
        Output_Demux_out3 <= dot_product3_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition211_output_process;


  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch19_reg(0) <= X"0000000000000000";
        delayMatch19_reg(1) <= X"0000000000000000";
        delayMatch19_reg(2) <= X"0000000000000000";
      ELSIF enb_1_25_0 = '1' THEN
        delayMatch19_reg(0) <= delayMatch19_reg_next(0);
        delayMatch19_reg(1) <= delayMatch19_reg_next(1);
        delayMatch19_reg(2) <= delayMatch19_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch19_process;

  Output_Demux_out3_1 <= delayMatch19_reg(2);
  delayMatch19_reg_next(0) <= Output_Demux_out3;
  delayMatch19_reg_next(1) <= delayMatch19_reg(0);
  delayMatch19_reg_next(2) <= delayMatch19_reg(1);

  Rate_Transition21_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Uca <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Uca <= Output_Demux_out3_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition21_output_process;


  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Uca_1 <= X"0000000000000000";
      ELSIF enb_1_100_0 = '1' THEN
        Uca_1 <= Uca;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Uca_2 <= Uca_1;


  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t_bypass_reg(0) <= X"00000000";
        t_bypass_reg(1) <= X"00000000";
        t_bypass_reg(2) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t_bypass_reg(0) <= t_bypass_reg_next(0);
        t_bypass_reg(1) <= t_bypass_reg_next(1);
        t_bypass_reg(2) <= t_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Data_Type_Conversion_out1_2(0) <= Data_Type_Conversion_out1_1(0) WHEN enb_1_100_1 = '1' ELSE
      t_bypass_reg(0);
  
  Data_Type_Conversion_out1_2(1) <= Data_Type_Conversion_out1_1(1) WHEN enb_1_100_1 = '1' ELSE
      t_bypass_reg(1);
  
  Data_Type_Conversion_out1_2(2) <= Data_Type_Conversion_out1_1(2) WHEN enb_1_100_1 = '1' ELSE
      t_bypass_reg(2);
  t_bypass_reg_next(0) <= Data_Type_Conversion_out1_1(0);
  t_bypass_reg_next(1) <= Data_Type_Conversion_out1_1(1);
  t_bypass_reg_next(2) <= Data_Type_Conversion_out1_1(2);


  outputgen: FOR k IN 0 TO 2 GENERATE
    Data_Type_Conversion1_out1_1(k) <= signed(Data_Type_Conversion1_out1(k));
  END GENERATE;

  t1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t1_bypass_reg(0) <= to_signed(16#0000000#, 27);
        t1_bypass_reg(1) <= to_signed(16#0000000#, 27);
        t1_bypass_reg(2) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        t1_bypass_reg(0) <= t1_bypass_reg_next(0);
        t1_bypass_reg(1) <= t1_bypass_reg_next(1);
        t1_bypass_reg(2) <= t1_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t1_bypass_process;

  
  Data_Type_Conversion1_out1_2(0) <= Data_Type_Conversion1_out1_1(0) WHEN enb_1_100_1 = '1' ELSE
      t1_bypass_reg(0);
  
  Data_Type_Conversion1_out1_2(1) <= Data_Type_Conversion1_out1_1(1) WHEN enb_1_100_1 = '1' ELSE
      t1_bypass_reg(1);
  
  Data_Type_Conversion1_out1_2(2) <= Data_Type_Conversion1_out1_1(2) WHEN enb_1_100_1 = '1' ELSE
      t1_bypass_reg(2);
  t1_bypass_reg_next(0) <= Data_Type_Conversion1_out1_1(0);
  t1_bypass_reg_next(1) <= Data_Type_Conversion1_out1_1(1);
  t1_bypass_reg_next(2) <= Data_Type_Conversion1_out1_1(2);

  u_abc_pl_0 <= std_logic_vector(Data_Type_Conversion1_out1_2(0));

  u_abc_pl_1 <= std_logic_vector(Data_Type_Conversion1_out1_2(1));

  u_abc_pl_2 <= std_logic_vector(Data_Type_Conversion1_out1_2(2));

  ce_out <= enb_1_100_1;

  u_abc_ps_0 <= Data_Type_Conversion_out1_2(0);

  u_abc_ps_1 <= Data_Type_Conversion_out1_2(1);

  u_abc_ps_2 <= Data_Type_Conversion_out1_2(2);

END rtl;

