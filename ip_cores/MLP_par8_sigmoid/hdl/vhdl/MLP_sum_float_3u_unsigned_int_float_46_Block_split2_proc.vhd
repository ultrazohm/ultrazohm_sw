-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_sum_float_3u_unsigned_int_float_46_Block_split2_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_full_n : IN STD_LOGIC;
    p_n_out_write : OUT STD_LOGIC;
    l_numElem_cast_out_out_din : OUT STD_LOGIC_VECTOR (28 downto 0);
    l_numElem_cast_out_out_full_n : IN STD_LOGIC;
    l_numElem_cast_out_out_write : OUT STD_LOGIC );
end;


architecture behav of MLP_sum_float_3u_unsigned_int_float_46_Block_split2_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_n_blk_n : STD_LOGIC;
    signal p_n_out_blk_n : STD_LOGIC;
    signal l_numElem_cast_out_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (l_numElem_cast_out_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_n_empty_n, p_n_out_full_n, l_numElem_cast_out_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_n_empty_n, p_n_out_full_n, l_numElem_cast_out_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (l_numElem_cast_out_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_n_out_full_n, l_numElem_cast_out_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (l_numElem_cast_out_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_n_out_full_n, l_numElem_cast_out_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (l_numElem_cast_out_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    l_numElem_cast_out_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, l_numElem_cast_out_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l_numElem_cast_out_out_blk_n <= l_numElem_cast_out_out_full_n;
        else 
            l_numElem_cast_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_numElem_cast_out_out_din <= p_n_dout(31 downto 3);

    l_numElem_cast_out_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_n_out_full_n, l_numElem_cast_out_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (l_numElem_cast_out_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            l_numElem_cast_out_out_write <= ap_const_logic_1;
        else 
            l_numElem_cast_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_blk_n <= p_n_out_full_n;
        else 
            p_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_n_out_din <= p_n_dout;

    p_n_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_n_out_full_n, l_numElem_cast_out_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (l_numElem_cast_out_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_write <= ap_const_logic_1;
        else 
            p_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_n_out_full_n, l_numElem_cast_out_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (l_numElem_cast_out_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
