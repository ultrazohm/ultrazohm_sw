-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_mpc_cost_and_optim_state_machine\uz_park_transform_ip.vhd
-- Created: 2022-10-04 11:12:36
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_park_transform_ip
-- Source Path: uz_park_transform_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_park_transform_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        u1                                :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18
        u2                                :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18
        angle_el                          :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18
        trigger                           :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        y1                                :   OUT   std_logic_vector(26 DOWNTO 0);  -- ufix27
        y2                                :   OUT   std_logic_vector(26 DOWNTO 0);  -- ufix27
        sin                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
        cos                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
        park_done                         :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END uz_park_transform_ip;


ARCHITECTURE rtl OF uz_park_transform_ip IS

  -- Component Declarations
  COMPONENT uz_park_transform_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_park_transform_ip_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_y1_AXI                     :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          read_y2_AXI                     :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_factor_angle_el_AXI       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT uz_park_transform_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          u1                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          u2                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          angle_el                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
          trigger                         :   IN    std_logic;  -- ufix1
          factor_angle_el_AXI             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
          ce_out                          :   OUT   std_logic;  -- ufix1
          y1                              :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          y2                              :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          y1_AXI                          :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          y2_AXI                          :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          sin                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          cos                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          park_done                       :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_park_transform_ip_reset_sync
    USE ENTITY work.uz_park_transform_ip_reset_sync(rtl);

  FOR ALL : uz_park_transform_ip_axi_lite
    USE ENTITY work.uz_park_transform_ip_axi_lite(rtl);

  FOR ALL : uz_park_transform_ip_dut
    USE ENTITY work.uz_park_transform_ip_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL u1_unsigned                      : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL u1_sig                           : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL u2_unsigned                      : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL u2_sig                           : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL angle_el_unsigned                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL angle_el_sig                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL y1_AXI_sig                       : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL y2_AXI_sig                       : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_factor_angle_el_AXI        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL y1_sig                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL y2_sig                           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL sin_sig                          : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL cos_sig                          : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL park_done_sig                    : std_logic;  -- ufix1
  SIGNAL y1_sig_signed                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL y1_tmp                           : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL y2_sig_signed                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL y2_tmp                           : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL sin_sig_signed                   : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL sin_tmp                          : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL cos_sig_signed                   : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL cos_tmp                          : unsigned(17 DOWNTO 0);  -- ufix18

BEGIN
  u_uz_park_transform_ip_reset_sync_inst : uz_park_transform_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_uz_park_transform_ip_axi_lite_inst : uz_park_transform_ip_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_y1_AXI => y1_AXI_sig,  -- sfix27_En16
              read_y2_AXI => y2_AXI_sig,  -- sfix27_En16
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_factor_angle_el_AXI => write_factor_angle_el_AXI,  -- sfix18_En14
              reset_internal => reset_internal  -- ufix1
              );

  u_uz_park_transform_ip_dut_inst : uz_park_transform_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              u1 => std_logic_vector(u1_sig),  -- sfix18_En11
              u2 => std_logic_vector(u2_sig),  -- sfix18_En11
              angle_el => std_logic_vector(angle_el_sig),  -- sfix18_En14
              trigger => trigger,  -- ufix1
              factor_angle_el_AXI => write_factor_angle_el_AXI,  -- sfix18_En14
              ce_out => ce_out_sig,  -- ufix1
              y1 => y1_sig,  -- sfix27_En16
              y2 => y2_sig,  -- sfix27_En16
              y1_AXI => y1_AXI_sig,  -- sfix27_En16
              y2_AXI => y2_AXI_sig,  -- sfix27_En16
              sin => sin_sig,  -- sfix18_En16
              cos => cos_sig,  -- sfix18_En16
              park_done => park_done_sig  -- ufix1
              );

  ip_timestamp <= unsigned'(X"83BA8D18");

  reset_cm <=  NOT IPCORE_RESETN;

  u1_unsigned <= unsigned(u1);

  u1_sig <= signed(u1_unsigned);

  u2_unsigned <= unsigned(u2);

  u2_sig <= signed(u2_unsigned);

  angle_el_unsigned <= unsigned(angle_el);

  angle_el_sig <= signed(angle_el_unsigned);

  reset_before_sync <= reset_cm OR reset_internal;

  y1_sig_signed <= signed(y1_sig);

  y1_tmp <= unsigned(y1_sig_signed);

  y1 <= std_logic_vector(y1_tmp);

  y2_sig_signed <= signed(y2_sig);

  y2_tmp <= unsigned(y2_sig_signed);

  y2 <= std_logic_vector(y2_tmp);

  sin_sig_signed <= signed(sin_sig);

  sin_tmp <= unsigned(sin_sig_signed);

  sin <= std_logic_vector(sin_tmp);

  cos_sig_signed <= signed(cos_sig);

  cos_tmp <= unsigned(cos_sig_signed);

  cos <= std_logic_vector(cos_tmp);

  park_done <= park_done_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

