-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\inc_enc_v26\Incremental_Encoder_v26_src_Direction.vhd
-- Created: 2023-04-14 13:51:34
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Incremental_Encoder_v26_src_Direction
-- Source Path: inc_enc_v26/IncEnc_V26/Direction
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Incremental_Encoder_v26_src_Direction IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_245467_0                    :   IN    std_logic;
        A                                 :   IN    std_logic;
        B                                 :   IN    std_logic;
        Dir                               :   OUT   std_logic_vector(3 DOWNTO 0)  -- sfix4
        );
END Incremental_Encoder_v26_src_Direction;


ARCHITECTURE rtl OF Incremental_Encoder_v26_src_Direction IS

  -- Signals
  SIGNAL Edge_A                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL count_old_out1                   : std_logic;
  SIGNAL count_old_switch_out1            : std_logic;
  SIGNAL Add_sub_cast                     : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Add_sub_cast_1                   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL TrnRight_sub_cast                : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Trn_Right                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL nothing1_out1                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL TurnRight_out1                   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL T_count_switch_out1              : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Edge_B                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL count_old1_out1                  : std_logic;
  SIGNAL count_old_switch1_out1           : std_logic;
  SIGNAL Add1_sub_cast                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Add1_sub_cast_1                  : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL TrnLeft_sub_cast                 : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL TrnLeft_1                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL nothing_out1                     : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL TurnLeft_out1                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL speed_old_switch_out1            : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Change_out1                      : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Change_1                         : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Add2_out1                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL new_value_out1                   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Dir_tmp                          : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Save_Direction_out1              : signed(3 DOWNTO 0);  -- sfix4

BEGIN
  
  count_old_switch_out1 <= count_old_out1 WHEN Edge_A = to_signed(16#0#, 4) ELSE
      A;

  count_old_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_old_out1 <= '0';
      ELSIF enb_1_245467_0 = '1' THEN
        count_old_out1 <= count_old_switch_out1;
      END IF;
    END IF;
  END PROCESS count_old_process;


  Add_sub_cast <= '0' & '0' & '0' & A;
  Add_sub_cast_1 <= '0' & '0' & '0' & count_old_out1;
  Edge_A <= Add_sub_cast - Add_sub_cast_1;

  TrnRight_sub_cast <= '0' & '0' & '0' & B;
  Trn_Right <= Edge_A - TrnRight_sub_cast;

  
  switch_compare_1 <= '1' WHEN Trn_Right >= to_signed(16#1#, 4) ELSE
      '0';

  nothing1_out1 <= to_signed(16#0#, 4);

  TurnRight_out1 <= to_signed(16#1#, 4);

  
  T_count_switch_out1 <= nothing1_out1 WHEN switch_compare_1 = '0' ELSE
      TurnRight_out1;

  
  count_old_switch1_out1 <= count_old1_out1 WHEN Edge_B = to_signed(16#0#, 4) ELSE
      B;

  count_old1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_old1_out1 <= '0';
      ELSIF enb_1_245467_0 = '1' THEN
        count_old1_out1 <= count_old_switch1_out1;
      END IF;
    END IF;
  END PROCESS count_old1_process;


  Add1_sub_cast <= '0' & '0' & '0' & B;
  Add1_sub_cast_1 <= '0' & '0' & '0' & count_old1_out1;
  Edge_B <= Add1_sub_cast - Add1_sub_cast_1;

  TrnLeft_sub_cast <= '0' & '0' & '0' & A;
  TrnLeft_1 <= Edge_B - TrnLeft_sub_cast;

  
  switch_compare_1_1 <= '1' WHEN TrnLeft_1 >= to_signed(16#1#, 4) ELSE
      '0';

  nothing_out1 <= to_signed(16#0#, 4);

  TurnLeft_out1 <= to_signed(-16#1#, 4);

  
  speed_old_switch_out1 <= nothing_out1 WHEN switch_compare_1_1 = '0' ELSE
      TurnLeft_out1;

  Change_out1 <= T_count_switch_out1 + speed_old_switch_out1;

  Change1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Change_1 <= to_signed(16#0#, 4);
      ELSIF enb_1_245467_0 = '1' THEN
        Change_1 <= Change_out1;
      END IF;
    END IF;
  END PROCESS Change1_process;


  Add2_out1 <= T_count_switch_out1 + speed_old_switch_out1;

  new_value_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        new_value_out1 <= to_signed(16#0#, 4);
      ELSIF enb_1_245467_0 = '1' THEN
        new_value_out1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS new_value_process;


  
  Save_Direction_out1 <= Dir_tmp WHEN Change_1 = to_signed(16#0#, 4) ELSE
      new_value_out1;

  count_old2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Dir_tmp <= to_signed(16#0#, 4);
      ELSIF enb_1_245467_0 = '1' THEN
        Dir_tmp <= Save_Direction_out1;
      END IF;
    END IF;
  END PROCESS count_old2_process;


  Dir <= std_logic_vector(Dir_tmp);

END rtl;

