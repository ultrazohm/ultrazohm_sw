// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_gem2StreamTranspose_float_4u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_k_dout,
        p_k_empty_n,
        p_k_read,
        p_in_address0,
        p_in_ce0,
        p_in_q0,
        p_in_address1,
        p_in_ce1,
        p_in_q1,
        p_in_offset_dout,
        p_in_offset_empty_n,
        p_in_offset_read,
        p_n_out_din,
        p_n_out_full_n,
        p_n_out_write,
        p_k_out_din,
        p_k_out_full_n,
        p_k_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [127:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
input  [31:0] p_k_dout;
input   p_k_empty_n;
output   p_k_read;
output  [13:0] p_in_address0;
output   p_in_ce0;
input  [31:0] p_in_q0;
output  [13:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;
input  [13:0] p_in_offset_dout;
input   p_in_offset_empty_n;
output   p_in_offset_read;
output  [31:0] p_n_out_din;
input   p_n_out_full_n;
output   p_n_out_write;
output  [31:0] p_k_out_din;
input   p_k_out_full_n;
output   p_k_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_out_write;
reg p_n_read;
reg p_k_read;
reg[13:0] p_in_address0;
reg p_in_ce0;
reg[13:0] p_in_address1;
reg p_in_ce1;
reg p_in_offset_read;
reg p_n_out_write;
reg p_k_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln172_reg_434;
reg   [0:0] icmp_ln172_reg_434_pp0_iter2_reg;
reg    p_n_blk_n;
reg    p_k_blk_n;
reg    p_in_offset_blk_n;
reg    p_n_out_blk_n;
reg    p_k_out_blk_n;
reg   [61:0] indvar_flatten_reg_160;
reg   [29:0] k_reg_172;
reg   [31:0] i_reg_183;
reg   [13:0] p_in_offset_read_reg_404;
reg    ap_block_state1;
wire  signed [13:0] empty_fu_194_p1;
reg  signed [13:0] empty_reg_412;
wire   [29:0] trunc_ln_fu_198_p4;
reg   [29:0] trunc_ln_reg_419;
wire  signed [11:0] trunc_ln180_fu_208_p1;
reg  signed [11:0] trunc_ln180_reg_424;
wire   [61:0] bound_fu_220_p2;
reg   [61:0] bound_reg_429;
wire   [0:0] icmp_ln172_fu_226_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln172_reg_434_pp0_iter1_reg;
wire   [0:0] icmp_ln174_fu_231_p2;
reg   [0:0] icmp_ln174_reg_438;
wire   [29:0] select_ln172_fu_236_p3;
reg   [29:0] select_ln172_reg_443;
wire  signed [11:0] empty_83_fu_244_p1;
wire   [13:0] shl_ln_fu_248_p3;
reg   [13:0] shl_ln_reg_453;
wire   [61:0] add_ln172_fu_262_p2;
reg   [61:0] add_ln172_reg_464;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_state7_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
wire   [29:0] add_ln174_fu_278_p2;
reg   [29:0] add_ln174_reg_479;
wire   [31:0] select_ln172_1_fu_289_p3;
reg   [31:0] select_ln172_1_reg_484;
reg    ap_enable_reg_pp0_iter1;
wire   [13:0] trunc_ln172_fu_296_p1;
reg   [13:0] trunc_ln172_reg_489;
reg   [31:0] p_in_load_reg_507;
reg   [31:0] p_in_load_10_reg_512;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state4;
reg   [61:0] ap_phi_mux_indvar_flatten_phi_fu_164_p4;
wire    ap_block_pp0_stage0;
reg   [29:0] ap_phi_mux_k_phi_fu_176_p4;
reg   [31:0] ap_phi_mux_i_phi_fu_187_p4;
wire   [63:0] zext_ln180_fu_317_p1;
wire   [63:0] zext_ln180_1_fu_326_p1;
wire   [63:0] zext_ln180_2_fu_335_p1;
wire   [63:0] zext_ln180_3_fu_344_p1;
reg    ap_block_pp0_stage1_01001;
wire   [31:0] bound_fu_220_p0;
wire   [29:0] bound_fu_220_p1;
wire   [31:0] add_ln172_1_fu_283_p2;
wire  signed [11:0] grp_fu_376_p2;
wire   [13:0] shl_ln180_1_fu_300_p3;
wire   [13:0] add_ln180_fu_307_p2;
wire   [13:0] add_ln180_1_fu_312_p2;
wire  signed [13:0] grp_fu_382_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln180_3_fu_322_p2;
wire  signed [13:0] grp_fu_390_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln180_5_fu_331_p2;
wire  signed [13:0] grp_fu_397_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln180_7_fu_340_p2;
wire   [31:0] l_v_27_fu_359_p1;
wire   [31:0] l_v_26_fu_355_p1;
wire   [31:0] l_v_25_fu_352_p1;
wire   [31:0] l_v_fu_349_p1;
wire  signed [13:0] grp_fu_382_p1;
wire   [13:0] grp_fu_382_p2;
wire  signed [13:0] grp_fu_390_p1;
wire  signed [13:0] grp_fu_397_p1;
reg    grp_fu_376_ce;
reg    grp_fu_382_ce;
reg    grp_fu_390_ce;
reg    grp_fu_397_ce;
wire    ap_CS_fsm_state8;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [61:0] bound_fu_220_p00;
wire   [61:0] bound_fu_220_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

BGD_mul_32ns_30ns_62_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 62 ))
mul_32ns_30ns_62_1_1_U141(
    .din0(bound_fu_220_p0),
    .din1(bound_fu_220_p1),
    .dout(bound_fu_220_p2)
);

BGD_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_83_fu_244_p1),
    .din1(trunc_ln180_reg_424),
    .ce(grp_fu_376_ce),
    .dout(grp_fu_376_p2)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U143(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_412),
    .din1(grp_fu_382_p1),
    .din2(grp_fu_382_p2),
    .ce(grp_fu_382_ce),
    .dout(grp_fu_382_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U144(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_412),
    .din1(grp_fu_390_p1),
    .din2(trunc_ln172_reg_489),
    .ce(grp_fu_390_ce),
    .dout(grp_fu_390_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U145(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_412),
    .din1(grp_fu_397_p1),
    .din2(trunc_ln172_reg_489),
    .ce(grp_fu_397_ce),
    .dout(grp_fu_397_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if (((1'b1 == ap_condition_pp0_exit_iter1_state4) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_enable_reg_pp0_iter1 <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter1_state4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln172_reg_434_pp0_iter1_reg == 1'd0))) begin
        i_reg_183 <= select_ln172_1_reg_484;
    end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_183 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_434 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_160 <= add_ln172_reg_464;
    end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_160 <= 62'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_434 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        k_reg_172 <= add_ln174_reg_479;
    end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_172 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln172_reg_464 <= add_ln172_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_434 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln174_reg_479 <= add_ln174_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_429 <= bound_fu_220_p2;
        empty_reg_412 <= empty_fu_194_p1;
        p_in_offset_read_reg_404 <= p_in_offset_dout;
        trunc_ln180_reg_424 <= trunc_ln180_fu_208_p1;
        trunc_ln_reg_419 <= {{p_n_dout[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln172_reg_434 <= icmp_ln172_fu_226_p2;
        icmp_ln172_reg_434_pp0_iter1_reg <= icmp_ln172_reg_434;
        icmp_ln172_reg_434_pp0_iter2_reg <= icmp_ln172_reg_434_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln172_fu_226_p2 == 1'd0))) begin
        icmp_ln174_reg_438 <= icmp_ln174_fu_231_p2;
        select_ln172_reg_443 <= select_ln172_fu_236_p3;
        shl_ln_reg_453[13 : 2] <= shl_ln_fu_248_p3[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln172_reg_434_pp0_iter1_reg == 1'd0))) begin
        p_in_load_10_reg_512 <= p_in_q0;
        p_in_load_reg_507 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_434 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln172_1_reg_484 <= select_ln172_1_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_434 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln172_reg_489 <= trunc_ln172_fu_296_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_434 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln172_reg_434_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_i_phi_fu_187_p4 = select_ln172_1_reg_484;
    end else begin
        ap_phi_mux_i_phi_fu_187_p4 = i_reg_183;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_434 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_164_p4 = add_ln172_reg_464;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_164_p4 = indvar_flatten_reg_160;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_434 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_k_phi_fu_176_p4 = add_ln174_reg_479;
    end else begin
        ap_phi_mux_k_phi_fu_176_p4 = k_reg_172;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_376_ce = 1'b1;
    end else begin
        grp_fu_376_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_382_ce = 1'b1;
    end else begin
        grp_fu_382_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_390_ce = 1'b1;
    end else begin
        grp_fu_390_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_397_ce = 1'b1;
    end else begin
        grp_fu_397_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_in_address0 = zext_ln180_3_fu_344_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_in_address0 = zext_ln180_1_fu_326_p1;
    end else begin
        p_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_in_address1 = zext_ln180_2_fu_335_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_in_address1 = zext_ln180_fu_317_p1;
    end else begin
        p_in_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_in_ce0 = 1'b1;
    end else begin
        p_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_blk_n = p_in_offset_empty_n;
    end else begin
        p_in_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read = 1'b1;
    end else begin
        p_in_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_blk_n = p_k_empty_n;
    end else begin
        p_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_blk_n = p_k_out_full_n;
    end else begin
        p_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_write = 1'b1;
    end else begin
        p_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_read = 1'b1;
    end else begin
        p_k_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_blk_n = p_n_out_full_n;
    end else begin
        p_n_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_write = 1'b1;
    end else begin
        p_n_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_434_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_434_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter1_state4)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter1_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln172_1_fu_283_p2 = (32'd1 + ap_phi_mux_i_phi_fu_187_p4);

assign add_ln172_fu_262_p2 = (indvar_flatten_reg_160 + 62'd1);

assign add_ln174_fu_278_p2 = (30'd1 + select_ln172_reg_443);

assign add_ln180_1_fu_312_p2 = (add_ln180_fu_307_p2 + p_in_offset_read_reg_404);

assign add_ln180_3_fu_322_p2 = ($signed(grp_fu_382_p3) + $signed(p_in_offset_read_reg_404));

assign add_ln180_5_fu_331_p2 = ($signed(grp_fu_390_p3) + $signed(p_in_offset_read_reg_404));

assign add_ln180_7_fu_340_p2 = ($signed(grp_fu_397_p3) + $signed(p_in_offset_read_reg_404));

assign add_ln180_fu_307_p2 = (trunc_ln172_reg_489 + shl_ln180_1_fu_300_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln172_reg_434_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln172_reg_434_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln172_reg_434_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage1_iter2 = ((icmp_ln172_reg_434_pp0_iter2_reg == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_220_p0 = bound_fu_220_p00;

assign bound_fu_220_p00 = p_k_dout;

assign bound_fu_220_p1 = bound_fu_220_p10;

assign bound_fu_220_p10 = trunc_ln_fu_198_p4;

assign empty_83_fu_244_p1 = select_ln172_fu_236_p3[11:0];

assign empty_fu_194_p1 = p_k_dout[13:0];

assign grp_fu_382_p1 = (shl_ln_fu_248_p3 | 14'd1);

assign grp_fu_382_p2 = select_ln172_1_fu_289_p3[13:0];

assign grp_fu_390_p1 = (shl_ln_reg_453 | 14'd2);

assign grp_fu_397_p1 = (shl_ln_reg_453 | 14'd3);

assign icmp_ln172_fu_226_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_164_p4 == bound_reg_429) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_231_p2 = ((ap_phi_mux_k_phi_fu_176_p4 == trunc_ln_reg_419) ? 1'b1 : 1'b0);

assign l_v_25_fu_352_p1 = p_in_load_10_reg_512;

assign l_v_26_fu_355_p1 = p_in_q1;

assign l_v_27_fu_359_p1 = p_in_q0;

assign l_v_fu_349_p1 = p_in_load_reg_507;

assign p_k_out_din = p_k_dout;

assign p_n_out_din = p_n_dout;

assign p_out_din = {{{{l_v_27_fu_359_p1}, {l_v_26_fu_355_p1}}, {l_v_25_fu_352_p1}}, {l_v_fu_349_p1}};

assign select_ln172_1_fu_289_p3 = ((icmp_ln174_reg_438[0:0] === 1'b1) ? add_ln172_1_fu_283_p2 : ap_phi_mux_i_phi_fu_187_p4);

assign select_ln172_fu_236_p3 = ((icmp_ln174_fu_231_p2[0:0] === 1'b1) ? 30'd0 : ap_phi_mux_k_phi_fu_176_p4);

assign shl_ln180_1_fu_300_p3 = {{grp_fu_376_p2}, {2'd0}};

assign shl_ln_fu_248_p3 = {{empty_83_fu_244_p1}, {2'd0}};

assign start_out = real_start;

assign trunc_ln172_fu_296_p1 = select_ln172_1_fu_289_p3[13:0];

assign trunc_ln180_fu_208_p1 = p_k_dout[11:0];

assign trunc_ln_fu_198_p4 = {{p_n_dout[31:2]}};

assign zext_ln180_1_fu_326_p1 = add_ln180_3_fu_322_p2;

assign zext_ln180_2_fu_335_p1 = add_ln180_5_fu_331_p2;

assign zext_ln180_3_fu_344_p1 = add_ln180_7_fu_340_p2;

assign zext_ln180_fu_317_p1 = add_ln180_1_fu_312_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_453[1:0] <= 2'b00;
end

endmodule //BGD_gem2StreamTranspose_float_4u_s
