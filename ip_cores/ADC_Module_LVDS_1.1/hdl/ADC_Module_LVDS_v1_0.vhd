-- -------------------------------------------------------------
-- Created: 2017-06-26 14:30:00
-- 
-- Generated by Vivado and edited by Herrmann, Wilhelmi g. H.
-- 
-- 
-- -------------------------------------------------------------
-- Description
-- -------------------------------------------------------------
-- Top Level VHD-File and instantiation of the AXI-Slave Interface 
-- and the ADC_Block with the SPI-Master and Voltage, Current 
-- Calculation
-- -------------------------------------------------------------
-- Version 1.1
-- -------------------------------------------------------------
library IEEE;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ADC_Module_LVDS_v1_1 is
	generic (
		-- Users to add parameters here
		Number_of_ADCs           : integer := 1;
        INPUT_CLK_FREQUENCY : integer := 100000000; -- Hz 
        SPI_CLK_FREQUENCY   : integer :=  20000000; -- Hz / value will be used to calculate the Reload-Value of the Clock divider
        PRE_DELAY           : integer := 0; -- 0 := 10ns / DELAY BETWEEN CNV TO ACTIVE AND DATA TRANSMISSION
        -- Datasheet 9.5ns  => 0 := 10ns
        POST_DELAY          : integer := 0; -- 0 := 10ns / DELAY BETWEEN END OF DATA TRANSMISSION AND CNV TO DISABLE 
        -- Datasheet 19.1   => 1 := 20ns                       -- 1    
        CONV_DELAY          : integer := 0; -- 0 := 10ns / DELAY BETWEEN CS TO DISABLE AND CS TO ENABLE
        -- Datasheet 25     => 2 := 30ns    
        CONTINUOUS_TRIGGERED_MODE   : boolean := false; -- 0 := Continous Mode; 1 := Triggered Mode
        W_LENGTH            : integer := 16; -- WORDLENGTH
		-- User parameters ends
		-- Do not modify the parameters beyond this line

		-- Parameters of Axi Slave Bus Interface S00_AXI
		C_S00_AXI_DATA_WIDTH	: integer	:= 32;
		C_S00_AXI_ADDR_WIDTH	: integer	:= 4
	);
	port (
		-- Users to add ports here
        clk             : in std_logic;
        reset_n         : in std_logic;
        enable_spi      : in std_logic;
        SCLK_spi_p      : out std_logic_vector(Number_of_ADCs-1 downto 0);
        SCLK_spi_n      : out std_logic_vector(Number_of_ADCs-1 downto 0);
     --   SCLK            : out std_logic;
        SS_N_spi        : out std_logic_vector(Number_of_ADCs-1 downto 0);
        DATA_IN_P        : in std_logic_vector(Number_of_ADCs-1 downto 0);
        DATA_IN_N        : in std_logic_vector(Number_of_ADCs-1 downto 0);
        TRIGGER_TRANSMISSION : in STD_LOGIC;
        ADC_SET_OFFSET : in STD_LOGIC;
        rx_data_16bit   : out std_logic_vector(16*Number_of_ADCs-1 downto 0);
        calculated_voltage : out std_logic_vector(16*Number_of_ADCs-1 downto 0);
        calculated_current : out std_logic_vector(16*Number_of_ADCs-1 downto 0);
        calculated_current_valid : out std_logic_vector(Number_of_ADCs-1 downto 0);
        calculated_voltage_valid : out std_logic_vector(Number_of_ADCs-1 downto 0);
		-- User ports ends
		-- Do not modify the ports beyond this line


		-- Ports of Axi Slave Bus Interface S00_AXI
		s00_axi_aclk	: in std_logic;
		s00_axi_aresetn	: in std_logic;
		s00_axi_awaddr	: in std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);
		s00_axi_awprot	: in std_logic_vector(2 downto 0);
		s00_axi_awvalid	: in std_logic;
		s00_axi_awready	: out std_logic;
		s00_axi_wdata	: in std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);
		s00_axi_wstrb	: in std_logic_vector((C_S00_AXI_DATA_WIDTH/8)-1 downto 0);
		s00_axi_wvalid	: in std_logic;
		s00_axi_wready	: out std_logic;
		s00_axi_bresp	: out std_logic_vector(1 downto 0);
		s00_axi_bvalid	: out std_logic;
		s00_axi_bready	: in std_logic;
		s00_axi_araddr	: in std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);
		s00_axi_arprot	: in std_logic_vector(2 downto 0);
		s00_axi_arvalid	: in std_logic;
		s00_axi_arready	: out std_logic;
		s00_axi_rdata	: out std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);
		s00_axi_rresp	: out std_logic_vector(1 downto 0);
		s00_axi_rvalid	: out std_logic;
		s00_axi_rready	: in std_logic
	);
end ADC_Module_LVDS_v1_1;

architecture arch_imp of ADC_Module_LVDS_v1_1 is

	-- component declaration
	component ADC_Module_LVDS_v1_1_S00_AXI is
		generic (
		C_S_AXI_DATA_WIDTH	: integer	:= 32;
		C_S_AXI_ADDR_WIDTH	: integer	:= 4
		);
		port (
		S_AXI_ACLK	: in std_logic;
		S_AXI_ARESETN	: in std_logic;
		S_AXI_AWADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
		S_AXI_AWPROT	: in std_logic_vector(2 downto 0);
		S_AXI_AWVALID	: in std_logic;
		S_AXI_AWREADY	: out std_logic;
		S_AXI_WDATA	: in std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
		S_AXI_WSTRB	: in std_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);
		S_AXI_WVALID	: in std_logic;
		S_AXI_WREADY	: out std_logic;
		S_AXI_BRESP	: out std_logic_vector(1 downto 0);
		S_AXI_BVALID	: out std_logic;
		S_AXI_BREADY	: in std_logic;
		S_AXI_ARADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
		S_AXI_ARPROT	: in std_logic_vector(2 downto 0);
		S_AXI_ARVALID	: in std_logic;
		S_AXI_ARREADY	: out std_logic;
		S_AXI_RDATA	: out std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
		S_AXI_RRESP	: out std_logic_vector(1 downto 0);
		S_AXI_RVALID	: out std_logic;
		S_AXI_RREADY	: in std_logic
		);
	end component ADC_Module_LVDS_v1_1_S00_AXI;
	
    component ADC_Module_v1_0 is
    generic (
        -- Users to add parameters here
		Number_of_ADCs           : integer := 1;
        INPUT_CLK_FREQUENCY : integer := 100000000; -- Hz 
        SPI_CLK_FREQUENCY   : integer :=  25000000; -- Hz / value will be used to calculate the Reload-Value of the Clock divider
        PRE_DELAY           : integer := 0; -- 0 := 10ns / DELAY BETWEEN CNV TO ACTIVE AND DATA TRANSMISSION
        -- Datasheet 9.5ns  => 0 := 10ns
        POST_DELAY          : integer := 1; -- 0 := 10ns / DELAY BETWEEN END OF DATA TRANSMISSION AND CNV TO DISABLE 
        -- Datasheet 19.1ns  => 1 := 20ns                          
        CONV_DELAY          : integer := 2; -- 0 := 10ns / DELAY BETWEEN CS TO DISABLE AND CS TO ENABLE
        -- Datasheet 25ns    => 2 := 30ns    
        CONTINUOUS_TRIGGERED_MODE   : boolean := false; -- 0 := Continous Mode; 1 := Triggered Mode
        W_LENGTH            : integer := 16 -- WORDLENGTH
        -- User parameters ends
        -- Do not modify the parameters beyond this line 

        -- Parameters of Axi Slave Bus Interface S00_AXI
    );
    port (
        -- Users to add ports here
        clk             : in std_logic;
        reset_n         : in std_logic;
        enable_spi      : in std_logic;
        SCLK_spi_p      : out std_logic_vector(Number_of_ADCs-1 downto 0);
        SCLK_spi_n      : out std_logic_vector(Number_of_ADCs-1 downto 0);
        SS_N_spi        : out std_logic_vector(Number_of_ADCs-1 downto 0);
        DATA_IN_P        : in std_logic_vector(Number_of_ADCs-1 downto 0);
        DATA_IN_N        : in std_logic_vector(Number_of_ADCs-1 downto 0);
        TRIGGER_TRANSMISSION : in STD_LOGIC;
        ADC_SET_OFFSET : in STD_LOGIC;
     --   Voltage_0_Current_1 : in std_logic;
       -- DATA_OUT        : out std_logic_vector(ADC_Number-1 downto 0);
        rx_data_16bit   : out std_logic_vector(16*Number_of_ADCs-1 downto 0);
        calculated_voltage : out std_logic_vector(16*Number_of_ADCs-1 downto 0);
        calculated_current : out std_logic_vector(16*Number_of_ADCs-1 downto 0);
        calculated_current_valid : out std_logic_vector(Number_of_ADCs-1 downto 0);
        calculated_voltage_valid : out std_logic_vector(Number_of_ADCs-1 downto 0)
        );
    end component ADC_Module_v1_0;

begin

-- Instantiation of Axi Bus Interface S00_AXI
ADC_Module_LVDS_v1_1_S00_AXI_inst : ADC_Module_LVDS_v1_1_S00_AXI
	generic map (
		C_S_AXI_DATA_WIDTH	=> C_S00_AXI_DATA_WIDTH,
		C_S_AXI_ADDR_WIDTH	=> C_S00_AXI_ADDR_WIDTH
	)
	port map (
		S_AXI_ACLK	=> s00_axi_aclk,
		S_AXI_ARESETN	=> s00_axi_aresetn,
		S_AXI_AWADDR	=> s00_axi_awaddr,
		S_AXI_AWPROT	=> s00_axi_awprot,
		S_AXI_AWVALID	=> s00_axi_awvalid,
		S_AXI_AWREADY	=> s00_axi_awready,
		S_AXI_WDATA	=> s00_axi_wdata,
		S_AXI_WSTRB	=> s00_axi_wstrb,
		S_AXI_WVALID	=> s00_axi_wvalid,
		S_AXI_WREADY	=> s00_axi_wready,
		S_AXI_BRESP	=> s00_axi_bresp,
		S_AXI_BVALID	=> s00_axi_bvalid,
		S_AXI_BREADY	=> s00_axi_bready,
		S_AXI_ARADDR	=> s00_axi_araddr,
		S_AXI_ARPROT	=> s00_axi_arprot,
		S_AXI_ARVALID	=> s00_axi_arvalid,
		S_AXI_ARREADY	=> s00_axi_arready,
		S_AXI_RDATA	=> s00_axi_rdata,
		S_AXI_RRESP	=> s00_axi_rresp,
		S_AXI_RVALID	=> s00_axi_rvalid,
		S_AXI_RREADY	=> s00_axi_rready
	);

	-- Add user logic here
    DUT : ADC_Module_v1_0
     generic map(Number_of_ADCs => Number_of_ADCs,
                 INPUT_CLK_FREQUENCY => INPUT_CLK_FREQUENCY,  
                 SPI_CLK_FREQUENCY => SPI_CLK_FREQUENCY,
                 PRE_DELAY => PRE_DELAY, 
                 POST_DELAY => POST_DELAY,  
                 CONTINUOUS_TRIGGERED_MODE => CONTINUOUS_TRIGGERED_MODE,
                 W_LENGTH => W_LENGTH
                 )
    port map(
               clk => clk,
               reset_n => reset_n,
               enable_spi => enable_spi,
               SCLK_spi_p   => SCLK_spi_p,
               SCLK_spi_n   => SCLK_spi_n,
               SS_N_spi => SS_N_spi, 
         --      SCLK => SCLK,     
               DATA_IN_P => DATA_IN_P,
               DATA_IN_N => DATA_IN_N,
               TRIGGER_TRANSMISSION => TRIGGER_TRANSMISSION,
               ADC_set_offset => ADC_SET_OFFSET,
               rx_data_16bit => rx_data_16bit,
               calculated_voltage => calculated_voltage,
               calculated_current => calculated_current,
               calculated_current_valid => calculated_current_valid,
               calculated_voltage_valid => calculated_voltage_valid
             );
             
             
             
             
             
	-- User logic ends

end arch_imp;
