// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_vec2GemStream_float_8u_129 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_m_dout,
        p_m_empty_n,
        p_m_read,
        p_in_address0,
        p_in_ce0,
        p_in_q0,
        p_in_address1,
        p_in_ce1,
        p_in_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [255:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_m_dout;
input   p_m_empty_n;
output   p_m_read;
output  [6:0] p_in_address0;
output   p_in_ce0;
input  [31:0] p_in_q0;
output  [6:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_out_write;
reg p_m_read;
reg[6:0] p_in_address0;
reg p_in_ce0;
reg[6:0] p_in_address1;
reg p_in_ce1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln86_reg_382;
reg    p_m_blk_n;
reg   [60:0] indvar_flatten_reg_162;
reg   [28:0] i_reg_173;
wire   [28:0] trunc_ln_fu_184_p4;
reg   [28:0] trunc_ln_reg_372;
reg    ap_block_state1;
wire   [60:0] bound_fu_202_p2;
reg   [60:0] bound_reg_377;
wire   [0:0] icmp_ln86_fu_208_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [60:0] add_ln86_fu_213_p2;
reg   [60:0] add_ln86_reg_386;
reg    ap_enable_reg_pp0_iter0;
wire   [28:0] select_ln86_fu_224_p3;
reg   [28:0] select_ln86_reg_391;
wire   [6:0] tmp_1_fu_236_p3;
reg   [6:0] tmp_1_reg_396;
reg   [31:0] p_in_load_reg_416;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] p_in_load_1_reg_421;
reg   [31:0] p_in_load_2_reg_436;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] p_in_load_3_reg_441;
reg   [31:0] p_in_load_4_reg_456;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] p_in_load_5_reg_461;
wire   [28:0] add_ln87_fu_320_p2;
reg   [28:0] add_ln87_reg_476;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage3_subdone;
reg   [60:0] ap_phi_mux_indvar_flatten_phi_fu_166_p4;
reg   [28:0] ap_phi_mux_i_phi_fu_177_p4;
wire   [63:0] zext_ln92_fu_244_p1;
wire   [63:0] zext_ln92_1_fu_255_p1;
wire   [63:0] zext_ln92_2_fu_265_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln92_3_fu_275_p1;
wire   [63:0] zext_ln92_4_fu_285_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln92_5_fu_295_p1;
wire   [63:0] zext_ln92_6_fu_305_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln92_7_fu_315_p1;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] bound_fu_202_p0;
wire   [31:0] bound_fu_202_p1;
wire   [0:0] icmp_ln87_fu_219_p2;
wire   [3:0] empty_fu_232_p1;
wire   [6:0] or_ln92_fu_249_p2;
wire   [6:0] or_ln92_1_fu_260_p2;
wire   [6:0] or_ln92_2_fu_270_p2;
wire   [6:0] or_ln92_3_fu_280_p2;
wire   [6:0] or_ln92_4_fu_290_p2;
wire   [6:0] or_ln92_5_fu_300_p2;
wire   [6:0] or_ln92_6_fu_310_p2;
wire   [31:0] l_v_7_fu_347_p1;
wire   [31:0] l_v_6_fu_343_p1;
wire   [31:0] l_v_5_fu_340_p1;
wire   [31:0] l_v_4_fu_337_p1;
wire   [31:0] l_v_3_fu_334_p1;
wire   [31:0] l_v_2_fu_331_p1;
wire   [31:0] l_v_1_fu_328_p1;
wire   [31:0] l_v_fu_325_p1;
wire    ap_CS_fsm_state7;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [60:0] bound_fu_202_p00;
wire   [60:0] bound_fu_202_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

MLP_mul_29ns_32ns_61_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 61 ))
mul_29ns_32ns_61_1_1_U202(
    .din0(bound_fu_202_p0),
    .din1(bound_fu_202_p1),
    .dout(bound_fu_202_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_173 <= add_ln87_reg_476;
    end else if ((~((p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_173 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_162 <= add_ln86_reg_386;
    end else if ((~((p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_162 <= 61'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln86_reg_386 <= add_ln86_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln86_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln87_reg_476 <= add_ln87_fu_320_p2;
        p_in_load_4_reg_456 <= p_in_q1;
        p_in_load_5_reg_461 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_377 <= bound_fu_202_p2;
        trunc_ln_reg_372 <= {{p_m_dout[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_reg_382 <= icmp_ln86_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln86_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_in_load_1_reg_421 <= p_in_q0;
        p_in_load_reg_416 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln86_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_in_load_2_reg_436 <= p_in_q1;
        p_in_load_3_reg_441 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_208_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln86_reg_391 <= select_ln86_fu_224_p3;
        tmp_1_reg_396[6 : 3] <= tmp_1_fu_236_p3[6 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln86_fu_208_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_177_p4 = add_ln87_reg_476;
    end else begin
        ap_phi_mux_i_phi_fu_177_p4 = i_reg_173;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = add_ln86_reg_386;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = indvar_flatten_reg_162;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_in_address0 = zext_ln92_7_fu_315_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_in_address0 = zext_ln92_5_fu_295_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_in_address0 = zext_ln92_3_fu_275_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_in_address0 = zext_ln92_1_fu_255_p1;
        end else begin
            p_in_address0 = 'bx;
        end
    end else begin
        p_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_in_address1 = zext_ln92_6_fu_305_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_in_address1 = zext_ln92_4_fu_285_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_in_address1 = zext_ln92_2_fu_265_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_in_address1 = zext_ln92_fu_244_p1;
        end else begin
            p_in_address1 = 'bx;
        end
    end else begin
        p_in_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_in_ce0 = 1'b1;
    end else begin
        p_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_blk_n = p_m_empty_n;
    end else begin
        p_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_read = 1'b1;
    end else begin
        p_m_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln86_fu_208_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln86_fu_208_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_213_p2 = (ap_phi_mux_indvar_flatten_phi_fu_166_p4 + 61'd1);

assign add_ln87_fu_320_p2 = (29'd1 + select_ln86_reg_391);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln86_reg_382 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln86_reg_382 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln86_reg_382 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((icmp_ln86_reg_382 == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_202_p0 = bound_fu_202_p00;

assign bound_fu_202_p00 = trunc_ln_fu_184_p4;

assign bound_fu_202_p1 = bound_fu_202_p10;

assign bound_fu_202_p10 = p_m_dout;

assign empty_fu_232_p1 = select_ln86_fu_224_p3[3:0];

assign icmp_ln86_fu_208_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_166_p4 == bound_reg_377) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_219_p2 = ((ap_phi_mux_i_phi_fu_177_p4 == trunc_ln_reg_372) ? 1'b1 : 1'b0);

assign l_v_1_fu_328_p1 = p_in_load_1_reg_421;

assign l_v_2_fu_331_p1 = p_in_load_2_reg_436;

assign l_v_3_fu_334_p1 = p_in_load_3_reg_441;

assign l_v_4_fu_337_p1 = p_in_load_4_reg_456;

assign l_v_5_fu_340_p1 = p_in_load_5_reg_461;

assign l_v_6_fu_343_p1 = p_in_q1;

assign l_v_7_fu_347_p1 = p_in_q0;

assign l_v_fu_325_p1 = p_in_load_reg_416;

assign or_ln92_1_fu_260_p2 = (tmp_1_reg_396 | 7'd2);

assign or_ln92_2_fu_270_p2 = (tmp_1_reg_396 | 7'd3);

assign or_ln92_3_fu_280_p2 = (tmp_1_reg_396 | 7'd4);

assign or_ln92_4_fu_290_p2 = (tmp_1_reg_396 | 7'd5);

assign or_ln92_5_fu_300_p2 = (tmp_1_reg_396 | 7'd6);

assign or_ln92_6_fu_310_p2 = (tmp_1_reg_396 | 7'd7);

assign or_ln92_fu_249_p2 = (tmp_1_fu_236_p3 | 7'd1);

assign p_out_din = {{{{{{{{l_v_7_fu_347_p1}, {l_v_6_fu_343_p1}}, {l_v_5_fu_340_p1}}, {l_v_4_fu_337_p1}}, {l_v_3_fu_334_p1}}, {l_v_2_fu_331_p1}}, {l_v_1_fu_328_p1}}, {l_v_fu_325_p1}};

assign select_ln86_fu_224_p3 = ((icmp_ln87_fu_219_p2[0:0] === 1'b1) ? 29'd0 : ap_phi_mux_i_phi_fu_177_p4);

assign tmp_1_fu_236_p3 = {{empty_fu_232_p1}, {3'd0}};

assign trunc_ln_fu_184_p4 = {{p_m_dout[31:3]}};

assign zext_ln92_1_fu_255_p1 = or_ln92_fu_249_p2;

assign zext_ln92_2_fu_265_p1 = or_ln92_1_fu_260_p2;

assign zext_ln92_3_fu_275_p1 = or_ln92_2_fu_270_p2;

assign zext_ln92_4_fu_285_p1 = or_ln92_3_fu_280_p2;

assign zext_ln92_5_fu_295_p1 = or_ln92_4_fu_290_p2;

assign zext_ln92_6_fu_305_p1 = or_ln92_5_fu_300_p2;

assign zext_ln92_7_fu_315_p1 = or_ln92_6_fu_310_p2;

assign zext_ln92_fu_244_p1 = tmp_1_fu_236_p3;

always @ (posedge ap_clk) begin
    tmp_1_reg_396[2:0] <= 3'b000;
end

endmodule //MLP_vec2GemStream_float_8u_129
