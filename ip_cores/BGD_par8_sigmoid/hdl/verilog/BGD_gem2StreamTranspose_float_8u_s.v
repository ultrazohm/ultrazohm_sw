// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_gem2StreamTranspose_float_8u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_k_dout,
        p_k_empty_n,
        p_k_read,
        p_in_address0,
        p_in_ce0,
        p_in_q0,
        p_in_address1,
        p_in_ce1,
        p_in_q1,
        p_in_offset_dout,
        p_in_offset_empty_n,
        p_in_offset_read,
        p_n_out_din,
        p_n_out_full_n,
        p_n_out_write,
        p_k_out_din,
        p_k_out_full_n,
        p_k_out_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [255:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
input  [31:0] p_k_dout;
input   p_k_empty_n;
output   p_k_read;
output  [15:0] p_in_address0;
output   p_in_ce0;
input  [31:0] p_in_q0;
output  [15:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;
input  [15:0] p_in_offset_dout;
input   p_in_offset_empty_n;
output   p_in_offset_read;
output  [31:0] p_n_out_din;
input   p_n_out_full_n;
output   p_n_out_write;
output  [31:0] p_k_out_din;
input   p_k_out_full_n;
output   p_k_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_out_write;
reg p_n_read;
reg p_k_read;
reg[15:0] p_in_address0;
reg p_in_ce0;
reg[15:0] p_in_address1;
reg p_in_ce1;
reg p_in_offset_read;
reg p_n_out_write;
reg p_k_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3;
reg   [0:0] icmp_ln172_reg_587;
reg   [0:0] icmp_ln172_reg_587_pp0_iter1_reg;
reg    p_n_blk_n;
reg    p_k_blk_n;
reg    p_in_offset_blk_n;
reg    p_n_out_blk_n;
reg    p_k_out_blk_n;
reg   [60:0] indvar_flatten_reg_202;
reg   [28:0] k_reg_213;
reg   [31:0] i_reg_224;
reg   [15:0] p_in_offset_read_reg_549;
reg    ap_block_state1;
wire   [28:0] trunc_ln_fu_235_p4;
reg   [28:0] trunc_ln_reg_561;
wire  signed [12:0] trunc_ln180_fu_245_p1;
reg  signed [12:0] trunc_ln180_reg_566;
wire  signed [15:0] trunc_ln180_1_fu_249_p1;
reg  signed [15:0] trunc_ln180_1_reg_571;
wire   [60:0] bound_fu_261_p2;
reg   [60:0] bound_reg_582;
wire   [0:0] icmp_ln172_fu_267_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [60:0] add_ln172_fu_272_p2;
reg   [60:0] add_ln172_reg_591;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln174_fu_278_p2;
reg   [0:0] icmp_ln174_reg_596;
wire   [28:0] select_ln172_fu_283_p3;
reg   [28:0] select_ln172_reg_601;
wire  signed [12:0] empty_fu_291_p1;
wire   [15:0] shl_ln_fu_295_p3;
reg   [15:0] shl_ln_reg_611;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] select_ln172_1_fu_331_p3;
reg   [31:0] select_ln172_1_reg_640;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [15:0] trunc_ln172_fu_338_p1;
reg   [15:0] trunc_ln172_reg_645;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state9_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
wire  signed [15:0] grp_fu_508_p3;
reg  signed [15:0] add_ln180_4_reg_672;
wire   [28:0] add_ln174_fu_388_p2;
reg   [28:0] add_ln174_reg_687;
reg   [31:0] p_in_load_reg_692;
reg   [31:0] p_in_load_22_reg_697;
wire  signed [15:0] grp_fu_522_p3;
reg  signed [15:0] add_ln180_8_reg_712;
reg   [31:0] p_in_load_23_reg_717;
reg   [31:0] p_in_load_24_reg_722;
reg   [31:0] p_in_load_25_reg_737;
reg   [31:0] p_in_load_26_reg_742;
wire    ap_block_pp0_stage2_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_block_pp0_stage3_subdone;
reg   [60:0] ap_phi_mux_indvar_flatten_phi_fu_206_p4;
wire    ap_block_pp0_stage0;
reg   [28:0] ap_phi_mux_k_phi_fu_217_p4;
reg   [31:0] ap_phi_mux_i_phi_fu_228_p4;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln180_fu_364_p1;
wire   [63:0] zext_ln180_1_fu_373_p1;
wire   [63:0] zext_ln180_2_fu_397_p1;
wire   [63:0] zext_ln180_3_fu_406_p1;
wire   [63:0] zext_ln180_4_fu_415_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln180_5_fu_424_p1;
wire   [63:0] zext_ln180_6_fu_433_p1;
wire   [63:0] zext_ln180_7_fu_442_p1;
reg    ap_block_pp0_stage3_01001;
wire   [31:0] bound_fu_261_p0;
wire   [28:0] bound_fu_261_p1;
wire   [31:0] add_ln172_1_fu_325_p2;
wire  signed [12:0] grp_fu_494_p2;
wire   [15:0] shl_ln180_1_fu_347_p3;
wire   [15:0] add_ln180_fu_354_p2;
wire   [15:0] add_ln180_1_fu_359_p2;
wire  signed [15:0] grp_fu_500_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln180_3_fu_369_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln180_5_fu_393_p2;
wire  signed [15:0] grp_fu_515_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln180_7_fu_402_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln180_9_fu_411_p2;
wire  signed [15:0] grp_fu_528_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln180_11_fu_420_p2;
wire  signed [15:0] grp_fu_535_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln180_13_fu_429_p2;
wire  signed [15:0] grp_fu_542_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln180_15_fu_438_p2;
wire   [31:0] l_v_63_fu_469_p1;
wire   [31:0] l_v_62_fu_465_p1;
wire   [31:0] l_v_61_fu_462_p1;
wire   [31:0] l_v_60_fu_459_p1;
wire   [31:0] l_v_59_fu_456_p1;
wire   [31:0] l_v_58_fu_453_p1;
wire   [31:0] l_v_57_fu_450_p1;
wire   [31:0] l_v_fu_447_p1;
wire  signed [15:0] grp_fu_500_p1;
wire  signed [15:0] grp_fu_508_p1;
wire  signed [15:0] grp_fu_515_p1;
wire  signed [15:0] grp_fu_522_p1;
wire  signed [15:0] grp_fu_528_p1;
wire  signed [15:0] grp_fu_535_p1;
wire  signed [15:0] grp_fu_542_p1;
reg    grp_fu_494_ce;
reg    grp_fu_500_ce;
reg    grp_fu_508_ce;
reg    grp_fu_515_ce;
reg    grp_fu_522_ce;
reg    grp_fu_528_ce;
reg    grp_fu_535_ce;
reg    grp_fu_542_ce;
wire    ap_CS_fsm_state10;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [60:0] bound_fu_261_p00;
wire   [60:0] bound_fu_261_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

BGD_mul_32ns_29ns_61_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 61 ))
mul_32ns_29ns_61_1_1_U144(
    .din0(bound_fu_261_p0),
    .din1(bound_fu_261_p1),
    .dout(bound_fu_261_p2)
);

BGD_mul_mul_13s_13s_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 13 ))
mul_mul_13s_13s_13_4_1_U145(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_fu_291_p1),
    .din1(trunc_ln180_reg_566),
    .ce(grp_fu_494_ce),
    .dout(grp_fu_494_p2)
);

BGD_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U146(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln180_1_reg_571),
    .din1(grp_fu_500_p1),
    .din2(trunc_ln172_fu_338_p1),
    .ce(grp_fu_500_ce),
    .dout(grp_fu_500_p3)
);

BGD_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln180_1_reg_571),
    .din1(grp_fu_508_p1),
    .din2(trunc_ln172_fu_338_p1),
    .ce(grp_fu_508_ce),
    .dout(grp_fu_508_p3)
);

BGD_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln180_1_reg_571),
    .din1(grp_fu_515_p1),
    .din2(trunc_ln172_reg_645),
    .ce(grp_fu_515_ce),
    .dout(grp_fu_515_p3)
);

BGD_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U149(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln180_1_reg_571),
    .din1(grp_fu_522_p1),
    .din2(trunc_ln172_reg_645),
    .ce(grp_fu_522_ce),
    .dout(grp_fu_522_p3)
);

BGD_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln180_1_reg_571),
    .din1(grp_fu_528_p1),
    .din2(trunc_ln172_reg_645),
    .ce(grp_fu_528_ce),
    .dout(grp_fu_528_p3)
);

BGD_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U151(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln180_1_reg_571),
    .din1(grp_fu_535_p1),
    .din2(trunc_ln172_reg_645),
    .ce(grp_fu_535_ce),
    .dout(grp_fu_535_p3)
);

BGD_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln180_1_reg_571),
    .din1(grp_fu_542_p1),
    .din2(trunc_ln172_reg_645),
    .ce(grp_fu_542_ce),
    .dout(grp_fu_542_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        i_reg_224 <= select_ln172_1_reg_640;
    end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_224 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_202 <= add_ln172_reg_591;
    end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_202 <= 61'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_213 <= add_ln174_reg_687;
    end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_213 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln172_reg_591 <= add_ln172_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln174_reg_687 <= add_ln174_fu_388_p2;
        add_ln180_4_reg_672 <= grp_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln180_8_reg_712 <= grp_fu_522_p3;
        p_in_load_22_reg_697 <= p_in_q0;
        p_in_load_reg_692 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_582 <= bound_fu_261_p2;
        p_in_offset_read_reg_549 <= p_in_offset_dout;
        trunc_ln180_1_reg_571 <= trunc_ln180_1_fu_249_p1;
        trunc_ln180_reg_566 <= trunc_ln180_fu_245_p1;
        trunc_ln_reg_561 <= {{p_n_dout[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln172_reg_587 <= icmp_ln172_fu_267_p2;
        icmp_ln172_reg_587_pp0_iter1_reg <= icmp_ln172_reg_587;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln172_fu_267_p2 == 1'd0))) begin
        icmp_ln174_reg_596 <= icmp_ln174_fu_278_p2;
        select_ln172_reg_601 <= select_ln172_fu_283_p3;
        shl_ln_reg_611[15 : 3] <= shl_ln_fu_295_p3[15 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_in_load_23_reg_717 <= p_in_q1;
        p_in_load_24_reg_722 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_in_load_25_reg_737 <= p_in_q1;
        p_in_load_26_reg_742 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln172_1_reg_640 <= select_ln172_1_fu_331_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        trunc_ln172_reg_645 <= trunc_ln172_fu_338_p1;
    end
end

always @ (*) begin
    if ((icmp_ln172_reg_587 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_mux_i_phi_fu_228_p4 = select_ln172_1_reg_640;
    end else begin
        ap_phi_mux_i_phi_fu_228_p4 = i_reg_224;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_206_p4 = add_ln172_reg_591;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_206_p4 = indvar_flatten_reg_202;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_k_phi_fu_217_p4 = add_ln174_reg_687;
    end else begin
        ap_phi_mux_k_phi_fu_217_p4 = k_reg_213;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_494_ce = 1'b1;
    end else begin
        grp_fu_494_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_500_ce = 1'b1;
    end else begin
        grp_fu_500_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_508_ce = 1'b1;
    end else begin
        grp_fu_508_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_515_ce = 1'b1;
    end else begin
        grp_fu_515_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_522_ce = 1'b1;
    end else begin
        grp_fu_522_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_528_ce = 1'b1;
    end else begin
        grp_fu_528_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_535_ce = 1'b1;
    end else begin
        grp_fu_535_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_542_ce = 1'b1;
    end else begin
        grp_fu_542_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_in_address0 = zext_ln180_7_fu_442_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_in_address0 = zext_ln180_5_fu_424_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_in_address0 = zext_ln180_3_fu_406_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address0 = zext_ln180_1_fu_373_p1;
    end else begin
        p_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_in_address1 = zext_ln180_6_fu_433_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_in_address1 = zext_ln180_4_fu_415_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_in_address1 = zext_ln180_2_fu_397_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address1 = zext_ln180_fu_364_p1;
    end else begin
        p_in_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_in_ce0 = 1'b1;
    end else begin
        p_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_blk_n = p_in_offset_empty_n;
    end else begin
        p_in_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read = 1'b1;
    end else begin
        p_in_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_blk_n = p_k_empty_n;
    end else begin
        p_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_blk_n = p_k_out_full_n;
    end else begin
        p_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_write = 1'b1;
    end else begin
        p_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_read = 1'b1;
    end else begin
        p_k_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_blk_n = p_n_out_full_n;
    end else begin
        p_n_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_write = 1'b1;
    end else begin
        p_n_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((icmp_ln172_reg_587 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((icmp_ln172_reg_587 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln172_1_fu_325_p2 = (32'd1 + ap_phi_mux_i_phi_fu_228_p4);

assign add_ln172_fu_272_p2 = (ap_phi_mux_indvar_flatten_phi_fu_206_p4 + 61'd1);

assign add_ln174_fu_388_p2 = (29'd1 + select_ln172_reg_601);

assign add_ln180_11_fu_420_p2 = ($signed(grp_fu_528_p3) + $signed(p_in_offset_read_reg_549));

assign add_ln180_13_fu_429_p2 = ($signed(grp_fu_535_p3) + $signed(p_in_offset_read_reg_549));

assign add_ln180_15_fu_438_p2 = ($signed(grp_fu_542_p3) + $signed(p_in_offset_read_reg_549));

assign add_ln180_1_fu_359_p2 = (add_ln180_fu_354_p2 + p_in_offset_read_reg_549);

assign add_ln180_3_fu_369_p2 = ($signed(grp_fu_500_p3) + $signed(p_in_offset_read_reg_549));

assign add_ln180_5_fu_393_p2 = ($signed(add_ln180_4_reg_672) + $signed(p_in_offset_read_reg_549));

assign add_ln180_7_fu_402_p2 = ($signed(grp_fu_515_p3) + $signed(p_in_offset_read_reg_549));

assign add_ln180_9_fu_411_p2 = ($signed(add_ln180_8_reg_712) + $signed(p_in_offset_read_reg_549));

assign add_ln180_fu_354_p2 = (trunc_ln172_reg_645 + shl_ln180_1_fu_347_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage3_iter1 = ((icmp_ln172_reg_587_pp0_iter1_reg == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_261_p0 = bound_fu_261_p00;

assign bound_fu_261_p00 = p_k_dout;

assign bound_fu_261_p1 = bound_fu_261_p10;

assign bound_fu_261_p10 = trunc_ln_fu_235_p4;

assign empty_fu_291_p1 = select_ln172_fu_283_p3[12:0];

assign grp_fu_500_p1 = (shl_ln_fu_295_p3 | 16'd1);

assign grp_fu_508_p1 = (shl_ln_fu_295_p3 | 16'd2);

assign grp_fu_515_p1 = (shl_ln_reg_611 | 16'd3);

assign grp_fu_522_p1 = (shl_ln_reg_611 | 16'd4);

assign grp_fu_528_p1 = (shl_ln_reg_611 | 16'd5);

assign grp_fu_535_p1 = (shl_ln_reg_611 | 16'd6);

assign grp_fu_542_p1 = (shl_ln_reg_611 | 16'd7);

assign icmp_ln172_fu_267_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_206_p4 == bound_reg_582) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_278_p2 = ((ap_phi_mux_k_phi_fu_217_p4 == trunc_ln_reg_561) ? 1'b1 : 1'b0);

assign l_v_57_fu_450_p1 = p_in_load_22_reg_697;

assign l_v_58_fu_453_p1 = p_in_load_23_reg_717;

assign l_v_59_fu_456_p1 = p_in_load_24_reg_722;

assign l_v_60_fu_459_p1 = p_in_load_25_reg_737;

assign l_v_61_fu_462_p1 = p_in_load_26_reg_742;

assign l_v_62_fu_465_p1 = p_in_q1;

assign l_v_63_fu_469_p1 = p_in_q0;

assign l_v_fu_447_p1 = p_in_load_reg_692;

assign p_k_out_din = p_k_dout;

assign p_n_out_din = p_n_dout;

assign p_out_din = {{{{{{{{l_v_63_fu_469_p1}, {l_v_62_fu_465_p1}}, {l_v_61_fu_462_p1}}, {l_v_60_fu_459_p1}}, {l_v_59_fu_456_p1}}, {l_v_58_fu_453_p1}}, {l_v_57_fu_450_p1}}, {l_v_fu_447_p1}};

assign select_ln172_1_fu_331_p3 = ((icmp_ln174_reg_596[0:0] === 1'b1) ? add_ln172_1_fu_325_p2 : ap_phi_mux_i_phi_fu_228_p4);

assign select_ln172_fu_283_p3 = ((icmp_ln174_fu_278_p2[0:0] === 1'b1) ? 29'd0 : ap_phi_mux_k_phi_fu_217_p4);

assign shl_ln180_1_fu_347_p3 = {{grp_fu_494_p2}, {3'd0}};

assign shl_ln_fu_295_p3 = {{empty_fu_291_p1}, {3'd0}};

assign start_out = real_start;

assign trunc_ln172_fu_338_p1 = select_ln172_1_fu_331_p3[15:0];

assign trunc_ln180_1_fu_249_p1 = p_k_dout[15:0];

assign trunc_ln180_fu_245_p1 = p_k_dout[12:0];

assign trunc_ln_fu_235_p4 = {{p_n_dout[31:3]}};

assign zext_ln180_1_fu_373_p1 = add_ln180_3_fu_369_p2;

assign zext_ln180_2_fu_397_p1 = add_ln180_5_fu_393_p2;

assign zext_ln180_3_fu_406_p1 = add_ln180_7_fu_402_p2;

assign zext_ln180_4_fu_415_p1 = add_ln180_9_fu_411_p2;

assign zext_ln180_5_fu_424_p1 = add_ln180_11_fu_420_p2;

assign zext_ln180_6_fu_433_p1 = add_ln180_13_fu_429_p2;

assign zext_ln180_7_fu_442_p1 = add_ln180_15_fu_438_p2;

assign zext_ln180_fu_364_p1 = add_ln180_1_fu_359_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_611[2:0] <= 3'b000;
end

endmodule //BGD_gem2StreamTranspose_float_8u_s
