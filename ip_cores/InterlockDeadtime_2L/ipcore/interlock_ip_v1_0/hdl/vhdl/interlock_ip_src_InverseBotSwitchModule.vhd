-- -------------------------------------------------------------
-- 
-- File Name: /home/ts/Dokumente/ultrazohm_testbench/ultrazohm_sw/ip_cores/InterlockDeadtime_2L/hdlsrc/interlock_deadtime/interlock_ip_src_InverseBotSwitchModule.vhd
-- Created: 2020-12-14 18:30:50
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: interlock_ip_src_InverseBotSwitchModule
-- Source Path: interlock_deadtime/interlock_deadtime/InverseBotSwitchModule
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY interlock_ip_src_InverseBotSwitchModule IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        gate_delay_out                    :   IN    std_logic_vector(0 TO 1);  -- boolean [2]
        inverse_bottom_switch             :   IN    std_logic;
        gate_enable_out                   :   OUT   std_logic_vector(0 TO 1)  -- boolean [2]
        );
END interlock_ip_src_InverseBotSwitchModule;


ARCHITECTURE rtl OF interlock_ip_src_InverseBotSwitchModule IS

  -- Signals
  SIGNAL PipeDelay_out1                   : std_logic;
  SIGNAL gate_delay_out_1                 : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL Index_Vector_out1                : std_logic;
  SIGNAL Mux_out1                         : std_logic_vector(0 TO 1);  -- boolean [2]

BEGIN
  PipeDelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipeDelay_out1 <= '0';
      ELSIF enb = '1' THEN
        PipeDelay_out1 <= inverse_bottom_switch;
      END IF;
    END IF;
  END PROCESS PipeDelay_process;


  gate_delay_out_1 <= gate_delay_out(1);

  NOT_out1 <=  NOT gate_delay_out_1;

  
  Index_Vector_out1 <= gate_delay_out_1 WHEN PipeDelay_out1 = '0' ELSE
      NOT_out1;

  Mux_out1(0) <= gate_delay_out(0);
  Mux_out1(1) <= Index_Vector_out1;

  gate_enable_out <= Mux_out1;

END rtl;

