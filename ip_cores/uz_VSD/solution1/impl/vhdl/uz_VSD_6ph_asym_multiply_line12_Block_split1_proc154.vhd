-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_VSD_6ph_asym_multiply_line12_Block_split1_proc154 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    scalar_val_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    scalar_val_0_empty_n : IN STD_LOGIC;
    scalar_val_0_read : OUT STD_LOGIC;
    val_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_0_out_full_n : IN STD_LOGIC;
    val_0_out_write : OUT STD_LOGIC;
    scalar_val_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    scalar_val_1_empty_n : IN STD_LOGIC;
    scalar_val_1_read : OUT STD_LOGIC;
    val_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_1_out_full_n : IN STD_LOGIC;
    val_1_out_write : OUT STD_LOGIC;
    scalar_val_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    scalar_val_2_empty_n : IN STD_LOGIC;
    scalar_val_2_read : OUT STD_LOGIC;
    val_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_2_out_full_n : IN STD_LOGIC;
    val_2_out_write : OUT STD_LOGIC;
    scalar_val_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    scalar_val_3_empty_n : IN STD_LOGIC;
    scalar_val_3_read : OUT STD_LOGIC;
    val_3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_3_out_full_n : IN STD_LOGIC;
    val_3_out_write : OUT STD_LOGIC;
    scalar_val_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    scalar_val_4_empty_n : IN STD_LOGIC;
    scalar_val_4_read : OUT STD_LOGIC;
    val_4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_4_out_full_n : IN STD_LOGIC;
    val_4_out_write : OUT STD_LOGIC;
    scalar_val_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    scalar_val_5_empty_n : IN STD_LOGIC;
    scalar_val_5_read : OUT STD_LOGIC;
    val_5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_5_out_full_n : IN STD_LOGIC;
    val_5_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of uz_VSD_6ph_asym_multiply_line12_Block_split1_proc154 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_BF000002 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3F5DB3D7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010111011011001111010111";
    constant ap_const_lv32_BEFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "10111110111111111111111111111101";
    constant ap_const_lv32_BF5DB3D7 : STD_LOGIC_VECTOR (31 downto 0) := "10111111010111011011001111010111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal scalar_val_0_blk_n : STD_LOGIC;
    signal val_0_out_blk_n : STD_LOGIC;
    signal scalar_val_1_blk_n : STD_LOGIC;
    signal val_1_out_blk_n : STD_LOGIC;
    signal scalar_val_2_blk_n : STD_LOGIC;
    signal val_2_out_blk_n : STD_LOGIC;
    signal scalar_val_3_blk_n : STD_LOGIC;
    signal val_3_out_blk_n : STD_LOGIC;
    signal scalar_val_4_blk_n : STD_LOGIC;
    signal val_4_out_blk_n : STD_LOGIC;
    signal scalar_val_5_blk_n : STD_LOGIC;
    signal val_5_out_blk_n : STD_LOGIC;
    signal scalar_val_0_read_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal scalar_val_1_read_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_2_read_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_3_read_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_4_read_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_val_5_read_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component uz_VSD_6ph_asym_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fmul_32ns_32ns_32_3_max_dsp_1_U109 : component uz_VSD_6ph_asym_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => scalar_val_0_read_reg_198,
        din1 => ap_const_lv32_BF000002,
        ce => ap_const_logic_1,
        dout => grp_fu_138_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U110 : component uz_VSD_6ph_asym_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => scalar_val_1_read_reg_203,
        din1 => ap_const_lv32_3F5DB3D7,
        ce => ap_const_logic_1,
        dout => grp_fu_143_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U111 : component uz_VSD_6ph_asym_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => scalar_val_2_read_reg_208,
        din1 => ap_const_lv32_BEFFFFFD,
        ce => ap_const_logic_1,
        dout => grp_fu_148_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U112 : component uz_VSD_6ph_asym_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => scalar_val_3_read_reg_213,
        din1 => ap_const_lv32_BF5DB3D7,
        ce => ap_const_logic_1,
        dout => grp_fu_153_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U113 : component uz_VSD_6ph_asym_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => scalar_val_5_read_reg_223,
        din1 => ap_const_lv32_80000000,
        ce => ap_const_logic_1,
        dout => grp_fu_158_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                scalar_val_0_read_reg_198 <= scalar_val_0_dout;
                scalar_val_1_read_reg_203 <= scalar_val_1_dout;
                scalar_val_2_read_reg_208 <= scalar_val_2_dout;
                scalar_val_3_read_reg_213 <= scalar_val_3_dout;
                scalar_val_4_read_reg_218 <= scalar_val_4_dout;
                scalar_val_5_read_reg_223 <= scalar_val_5_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_fu_138_p2;
    ap_return_1 <= grp_fu_143_p2;
    ap_return_2 <= grp_fu_148_p2;
    ap_return_3 <= grp_fu_153_p2;
    ap_return_4 <= scalar_val_4_read_reg_218;
    ap_return_5 <= grp_fu_158_p2;

    scalar_val_0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_0_blk_n <= scalar_val_0_empty_n;
        else 
            scalar_val_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scalar_val_0_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_0_read <= ap_const_logic_1;
        else 
            scalar_val_0_read <= ap_const_logic_0;
        end if; 
    end process;


    scalar_val_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_1_blk_n <= scalar_val_1_empty_n;
        else 
            scalar_val_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scalar_val_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_1_read <= ap_const_logic_1;
        else 
            scalar_val_1_read <= ap_const_logic_0;
        end if; 
    end process;


    scalar_val_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_2_blk_n <= scalar_val_2_empty_n;
        else 
            scalar_val_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scalar_val_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_2_read <= ap_const_logic_1;
        else 
            scalar_val_2_read <= ap_const_logic_0;
        end if; 
    end process;


    scalar_val_3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_3_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_3_blk_n <= scalar_val_3_empty_n;
        else 
            scalar_val_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scalar_val_3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_3_read <= ap_const_logic_1;
        else 
            scalar_val_3_read <= ap_const_logic_0;
        end if; 
    end process;


    scalar_val_4_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_4_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_4_blk_n <= scalar_val_4_empty_n;
        else 
            scalar_val_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scalar_val_4_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_4_read <= ap_const_logic_1;
        else 
            scalar_val_4_read <= ap_const_logic_0;
        end if; 
    end process;


    scalar_val_5_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_5_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_5_blk_n <= scalar_val_5_empty_n;
        else 
            scalar_val_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scalar_val_5_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            scalar_val_5_read <= ap_const_logic_1;
        else 
            scalar_val_5_read <= ap_const_logic_0;
        end if; 
    end process;


    val_0_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_0_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_0_out_blk_n <= val_0_out_full_n;
        else 
            val_0_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    val_0_out_din <= scalar_val_0_dout;

    val_0_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_0_out_write <= ap_const_logic_1;
        else 
            val_0_out_write <= ap_const_logic_0;
        end if; 
    end process;


    val_1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_1_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_1_out_blk_n <= val_1_out_full_n;
        else 
            val_1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    val_1_out_din <= scalar_val_1_dout;

    val_1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_1_out_write <= ap_const_logic_1;
        else 
            val_1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    val_2_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_2_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_2_out_blk_n <= val_2_out_full_n;
        else 
            val_2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    val_2_out_din <= scalar_val_2_dout;

    val_2_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_2_out_write <= ap_const_logic_1;
        else 
            val_2_out_write <= ap_const_logic_0;
        end if; 
    end process;


    val_3_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_3_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_3_out_blk_n <= val_3_out_full_n;
        else 
            val_3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    val_3_out_din <= scalar_val_3_dout;

    val_3_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_3_out_write <= ap_const_logic_1;
        else 
            val_3_out_write <= ap_const_logic_0;
        end if; 
    end process;


    val_4_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_4_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_4_out_blk_n <= val_4_out_full_n;
        else 
            val_4_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    val_4_out_din <= scalar_val_4_dout;

    val_4_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_4_out_write <= ap_const_logic_1;
        else 
            val_4_out_write <= ap_const_logic_0;
        end if; 
    end process;


    val_5_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_5_out_blk_n <= val_5_out_full_n;
        else 
            val_5_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    val_5_out_din <= scalar_val_5_dout;

    val_5_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, scalar_val_0_empty_n, val_0_out_full_n, scalar_val_1_empty_n, val_1_out_full_n, scalar_val_2_empty_n, val_2_out_full_n, scalar_val_3_empty_n, val_3_out_full_n, scalar_val_4_empty_n, val_4_out_full_n, scalar_val_5_empty_n, val_5_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (val_5_out_full_n = ap_const_logic_0) or (scalar_val_5_empty_n = ap_const_logic_0) or (val_4_out_full_n = ap_const_logic_0) or (scalar_val_4_empty_n = ap_const_logic_0) or (val_3_out_full_n = ap_const_logic_0) or (scalar_val_3_empty_n = ap_const_logic_0) or (val_2_out_full_n = ap_const_logic_0) or (scalar_val_2_empty_n = ap_const_logic_0) or (val_1_out_full_n = ap_const_logic_0) or (scalar_val_1_empty_n = ap_const_logic_0) or (val_0_out_full_n = ap_const_logic_0) or (scalar_val_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            val_5_out_write <= ap_const_logic_1;
        else 
            val_5_out_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
