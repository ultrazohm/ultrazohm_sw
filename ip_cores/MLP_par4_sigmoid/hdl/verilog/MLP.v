// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MLP_MLP,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.561000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=92,HLS_SYN_DSP=0,HLS_SYN_FF=27336,HLS_SYN_LUT=29350,HLS_VERSION=2020_1}" *)

module MLP (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_read_r_AWVALID,
        m_axi_read_r_AWREADY,
        m_axi_read_r_AWADDR,
        m_axi_read_r_AWID,
        m_axi_read_r_AWLEN,
        m_axi_read_r_AWSIZE,
        m_axi_read_r_AWBURST,
        m_axi_read_r_AWLOCK,
        m_axi_read_r_AWCACHE,
        m_axi_read_r_AWPROT,
        m_axi_read_r_AWQOS,
        m_axi_read_r_AWREGION,
        m_axi_read_r_AWUSER,
        m_axi_read_r_WVALID,
        m_axi_read_r_WREADY,
        m_axi_read_r_WDATA,
        m_axi_read_r_WSTRB,
        m_axi_read_r_WLAST,
        m_axi_read_r_WID,
        m_axi_read_r_WUSER,
        m_axi_read_r_ARVALID,
        m_axi_read_r_ARREADY,
        m_axi_read_r_ARADDR,
        m_axi_read_r_ARID,
        m_axi_read_r_ARLEN,
        m_axi_read_r_ARSIZE,
        m_axi_read_r_ARBURST,
        m_axi_read_r_ARLOCK,
        m_axi_read_r_ARCACHE,
        m_axi_read_r_ARPROT,
        m_axi_read_r_ARQOS,
        m_axi_read_r_ARREGION,
        m_axi_read_r_ARUSER,
        m_axi_read_r_RVALID,
        m_axi_read_r_RREADY,
        m_axi_read_r_RDATA,
        m_axi_read_r_RLAST,
        m_axi_read_r_RID,
        m_axi_read_r_RUSER,
        m_axi_read_r_RRESP,
        m_axi_read_r_BVALID,
        m_axi_read_r_BREADY,
        m_axi_read_r_BRESP,
        m_axi_read_r_BID,
        m_axi_read_r_BUSER,
        m_axi_write_r_AWVALID,
        m_axi_write_r_AWREADY,
        m_axi_write_r_AWADDR,
        m_axi_write_r_AWID,
        m_axi_write_r_AWLEN,
        m_axi_write_r_AWSIZE,
        m_axi_write_r_AWBURST,
        m_axi_write_r_AWLOCK,
        m_axi_write_r_AWCACHE,
        m_axi_write_r_AWPROT,
        m_axi_write_r_AWQOS,
        m_axi_write_r_AWREGION,
        m_axi_write_r_AWUSER,
        m_axi_write_r_WVALID,
        m_axi_write_r_WREADY,
        m_axi_write_r_WDATA,
        m_axi_write_r_WSTRB,
        m_axi_write_r_WLAST,
        m_axi_write_r_WID,
        m_axi_write_r_WUSER,
        m_axi_write_r_ARVALID,
        m_axi_write_r_ARREADY,
        m_axi_write_r_ARADDR,
        m_axi_write_r_ARID,
        m_axi_write_r_ARLEN,
        m_axi_write_r_ARSIZE,
        m_axi_write_r_ARBURST,
        m_axi_write_r_ARLOCK,
        m_axi_write_r_ARCACHE,
        m_axi_write_r_ARPROT,
        m_axi_write_r_ARQOS,
        m_axi_write_r_ARREGION,
        m_axi_write_r_ARUSER,
        m_axi_write_r_RVALID,
        m_axi_write_r_RREADY,
        m_axi_write_r_RDATA,
        m_axi_write_r_RLAST,
        m_axi_write_r_RID,
        m_axi_write_r_RUSER,
        m_axi_write_r_RRESP,
        m_axi_write_r_BVALID,
        m_axi_write_r_BREADY,
        m_axi_write_r_BRESP,
        m_axi_write_r_BID,
        m_axi_write_r_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 66'd1;
parameter    ap_ST_fsm_state2 = 66'd2;
parameter    ap_ST_fsm_state3 = 66'd4;
parameter    ap_ST_fsm_state4 = 66'd8;
parameter    ap_ST_fsm_state5 = 66'd16;
parameter    ap_ST_fsm_state6 = 66'd32;
parameter    ap_ST_fsm_state7 = 66'd64;
parameter    ap_ST_fsm_state8 = 66'd128;
parameter    ap_ST_fsm_state9 = 66'd256;
parameter    ap_ST_fsm_pp0_stage0 = 66'd512;
parameter    ap_ST_fsm_state13 = 66'd1024;
parameter    ap_ST_fsm_state14 = 66'd2048;
parameter    ap_ST_fsm_state15 = 66'd4096;
parameter    ap_ST_fsm_state16 = 66'd8192;
parameter    ap_ST_fsm_state17 = 66'd16384;
parameter    ap_ST_fsm_state18 = 66'd32768;
parameter    ap_ST_fsm_state19 = 66'd65536;
parameter    ap_ST_fsm_state20 = 66'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 66'd262144;
parameter    ap_ST_fsm_state24 = 66'd524288;
parameter    ap_ST_fsm_state25 = 66'd1048576;
parameter    ap_ST_fsm_state26 = 66'd2097152;
parameter    ap_ST_fsm_state27 = 66'd4194304;
parameter    ap_ST_fsm_state28 = 66'd8388608;
parameter    ap_ST_fsm_state29 = 66'd16777216;
parameter    ap_ST_fsm_state30 = 66'd33554432;
parameter    ap_ST_fsm_state31 = 66'd67108864;
parameter    ap_ST_fsm_pp2_stage0 = 66'd134217728;
parameter    ap_ST_fsm_state35 = 66'd268435456;
parameter    ap_ST_fsm_state36 = 66'd536870912;
parameter    ap_ST_fsm_pp3_stage0 = 66'd1073741824;
parameter    ap_ST_fsm_pp3_stage1 = 66'd2147483648;
parameter    ap_ST_fsm_state40 = 66'd4294967296;
parameter    ap_ST_fsm_state41 = 66'd8589934592;
parameter    ap_ST_fsm_state42 = 66'd17179869184;
parameter    ap_ST_fsm_state43 = 66'd34359738368;
parameter    ap_ST_fsm_state44 = 66'd68719476736;
parameter    ap_ST_fsm_state45 = 66'd137438953472;
parameter    ap_ST_fsm_state46 = 66'd274877906944;
parameter    ap_ST_fsm_state47 = 66'd549755813888;
parameter    ap_ST_fsm_state48 = 66'd1099511627776;
parameter    ap_ST_fsm_state49 = 66'd2199023255552;
parameter    ap_ST_fsm_state50 = 66'd4398046511104;
parameter    ap_ST_fsm_state51 = 66'd8796093022208;
parameter    ap_ST_fsm_state52 = 66'd17592186044416;
parameter    ap_ST_fsm_state53 = 66'd35184372088832;
parameter    ap_ST_fsm_state54 = 66'd70368744177664;
parameter    ap_ST_fsm_state55 = 66'd140737488355328;
parameter    ap_ST_fsm_state56 = 66'd281474976710656;
parameter    ap_ST_fsm_state57 = 66'd562949953421312;
parameter    ap_ST_fsm_state58 = 66'd1125899906842624;
parameter    ap_ST_fsm_state59 = 66'd2251799813685248;
parameter    ap_ST_fsm_state60 = 66'd4503599627370496;
parameter    ap_ST_fsm_pp4_stage0 = 66'd9007199254740992;
parameter    ap_ST_fsm_state64 = 66'd18014398509481984;
parameter    ap_ST_fsm_state65 = 66'd36028797018963968;
parameter    ap_ST_fsm_state66 = 66'd72057594037927936;
parameter    ap_ST_fsm_state67 = 66'd144115188075855872;
parameter    ap_ST_fsm_state68 = 66'd288230376151711744;
parameter    ap_ST_fsm_state69 = 66'd576460752303423488;
parameter    ap_ST_fsm_pp5_stage0 = 66'd1152921504606846976;
parameter    ap_ST_fsm_state73 = 66'd2305843009213693952;
parameter    ap_ST_fsm_state74 = 66'd4611686018427387904;
parameter    ap_ST_fsm_state75 = 66'd9223372036854775808;
parameter    ap_ST_fsm_state76 = 66'd18446744073709551616;
parameter    ap_ST_fsm_state77 = 66'd36893488147419103232;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_READ_R_ID_WIDTH = 1;
parameter    C_M_AXI_READ_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_READ_R_DATA_WIDTH = 32;
parameter    C_M_AXI_READ_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_READ_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_READ_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_READ_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_READ_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_READ_R_USER_VALUE = 0;
parameter    C_M_AXI_READ_R_PROT_VALUE = 0;
parameter    C_M_AXI_READ_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_WRITE_R_ID_WIDTH = 1;
parameter    C_M_AXI_WRITE_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_WRITE_R_DATA_WIDTH = 32;
parameter    C_M_AXI_WRITE_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_WRITE_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WRITE_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_WRITE_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_WRITE_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_WRITE_R_USER_VALUE = 0;
parameter    C_M_AXI_WRITE_R_PROT_VALUE = 0;
parameter    C_M_AXI_WRITE_R_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_READ_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WRITE_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_read_r_AWVALID;
input   m_axi_read_r_AWREADY;
output  [C_M_AXI_READ_R_ADDR_WIDTH - 1:0] m_axi_read_r_AWADDR;
output  [C_M_AXI_READ_R_ID_WIDTH - 1:0] m_axi_read_r_AWID;
output  [7:0] m_axi_read_r_AWLEN;
output  [2:0] m_axi_read_r_AWSIZE;
output  [1:0] m_axi_read_r_AWBURST;
output  [1:0] m_axi_read_r_AWLOCK;
output  [3:0] m_axi_read_r_AWCACHE;
output  [2:0] m_axi_read_r_AWPROT;
output  [3:0] m_axi_read_r_AWQOS;
output  [3:0] m_axi_read_r_AWREGION;
output  [C_M_AXI_READ_R_AWUSER_WIDTH - 1:0] m_axi_read_r_AWUSER;
output   m_axi_read_r_WVALID;
input   m_axi_read_r_WREADY;
output  [C_M_AXI_READ_R_DATA_WIDTH - 1:0] m_axi_read_r_WDATA;
output  [C_M_AXI_READ_R_WSTRB_WIDTH - 1:0] m_axi_read_r_WSTRB;
output   m_axi_read_r_WLAST;
output  [C_M_AXI_READ_R_ID_WIDTH - 1:0] m_axi_read_r_WID;
output  [C_M_AXI_READ_R_WUSER_WIDTH - 1:0] m_axi_read_r_WUSER;
output   m_axi_read_r_ARVALID;
input   m_axi_read_r_ARREADY;
output  [C_M_AXI_READ_R_ADDR_WIDTH - 1:0] m_axi_read_r_ARADDR;
output  [C_M_AXI_READ_R_ID_WIDTH - 1:0] m_axi_read_r_ARID;
output  [7:0] m_axi_read_r_ARLEN;
output  [2:0] m_axi_read_r_ARSIZE;
output  [1:0] m_axi_read_r_ARBURST;
output  [1:0] m_axi_read_r_ARLOCK;
output  [3:0] m_axi_read_r_ARCACHE;
output  [2:0] m_axi_read_r_ARPROT;
output  [3:0] m_axi_read_r_ARQOS;
output  [3:0] m_axi_read_r_ARREGION;
output  [C_M_AXI_READ_R_ARUSER_WIDTH - 1:0] m_axi_read_r_ARUSER;
input   m_axi_read_r_RVALID;
output   m_axi_read_r_RREADY;
input  [C_M_AXI_READ_R_DATA_WIDTH - 1:0] m_axi_read_r_RDATA;
input   m_axi_read_r_RLAST;
input  [C_M_AXI_READ_R_ID_WIDTH - 1:0] m_axi_read_r_RID;
input  [C_M_AXI_READ_R_RUSER_WIDTH - 1:0] m_axi_read_r_RUSER;
input  [1:0] m_axi_read_r_RRESP;
input   m_axi_read_r_BVALID;
output   m_axi_read_r_BREADY;
input  [1:0] m_axi_read_r_BRESP;
input  [C_M_AXI_READ_R_ID_WIDTH - 1:0] m_axi_read_r_BID;
input  [C_M_AXI_READ_R_BUSER_WIDTH - 1:0] m_axi_read_r_BUSER;
output   m_axi_write_r_AWVALID;
input   m_axi_write_r_AWREADY;
output  [C_M_AXI_WRITE_R_ADDR_WIDTH - 1:0] m_axi_write_r_AWADDR;
output  [C_M_AXI_WRITE_R_ID_WIDTH - 1:0] m_axi_write_r_AWID;
output  [7:0] m_axi_write_r_AWLEN;
output  [2:0] m_axi_write_r_AWSIZE;
output  [1:0] m_axi_write_r_AWBURST;
output  [1:0] m_axi_write_r_AWLOCK;
output  [3:0] m_axi_write_r_AWCACHE;
output  [2:0] m_axi_write_r_AWPROT;
output  [3:0] m_axi_write_r_AWQOS;
output  [3:0] m_axi_write_r_AWREGION;
output  [C_M_AXI_WRITE_R_AWUSER_WIDTH - 1:0] m_axi_write_r_AWUSER;
output   m_axi_write_r_WVALID;
input   m_axi_write_r_WREADY;
output  [C_M_AXI_WRITE_R_DATA_WIDTH - 1:0] m_axi_write_r_WDATA;
output  [C_M_AXI_WRITE_R_WSTRB_WIDTH - 1:0] m_axi_write_r_WSTRB;
output   m_axi_write_r_WLAST;
output  [C_M_AXI_WRITE_R_ID_WIDTH - 1:0] m_axi_write_r_WID;
output  [C_M_AXI_WRITE_R_WUSER_WIDTH - 1:0] m_axi_write_r_WUSER;
output   m_axi_write_r_ARVALID;
input   m_axi_write_r_ARREADY;
output  [C_M_AXI_WRITE_R_ADDR_WIDTH - 1:0] m_axi_write_r_ARADDR;
output  [C_M_AXI_WRITE_R_ID_WIDTH - 1:0] m_axi_write_r_ARID;
output  [7:0] m_axi_write_r_ARLEN;
output  [2:0] m_axi_write_r_ARSIZE;
output  [1:0] m_axi_write_r_ARBURST;
output  [1:0] m_axi_write_r_ARLOCK;
output  [3:0] m_axi_write_r_ARCACHE;
output  [2:0] m_axi_write_r_ARPROT;
output  [3:0] m_axi_write_r_ARQOS;
output  [3:0] m_axi_write_r_ARREGION;
output  [C_M_AXI_WRITE_R_ARUSER_WIDTH - 1:0] m_axi_write_r_ARUSER;
input   m_axi_write_r_RVALID;
output   m_axi_write_r_RREADY;
input  [C_M_AXI_WRITE_R_DATA_WIDTH - 1:0] m_axi_write_r_RDATA;
input   m_axi_write_r_RLAST;
input  [C_M_AXI_WRITE_R_ID_WIDTH - 1:0] m_axi_write_r_RID;
input  [C_M_AXI_WRITE_R_RUSER_WIDTH - 1:0] m_axi_write_r_RUSER;
input  [1:0] m_axi_write_r_RRESP;
input   m_axi_write_r_BVALID;
output   m_axi_write_r_BREADY;
input  [1:0] m_axi_write_r_BRESP;
input  [C_M_AXI_WRITE_R_ID_WIDTH - 1:0] m_axi_write_r_BID;
input  [C_M_AXI_WRITE_R_BUSER_WIDTH - 1:0] m_axi_write_r_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [65:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] input_r;
wire   [63:0] output_r;
wire   [63:0] axiWeightInput;
wire   [63:0] axiBiasInput;
wire   [63:0] axiLayerOutput;
wire   [31:0] numberInputs;
wire   [31:0] numberOutputs;
wire   [31:0] numberLayers;
wire  signed [31:0] numberNeurons;
wire   [31:0] loadParameters;
wire   [31:0] exportLayers;
reg   [15:0] bramWeight_address0;
reg    bramWeight_ce0;
reg    bramWeight_we0;
wire   [31:0] bramWeight_d0;
wire   [31:0] bramWeight_q0;
reg   [15:0] bramWeight_address1;
reg    bramWeight_ce1;
wire   [31:0] bramWeight_q1;
reg   [8:0] bramBias_address0;
reg    bramBias_ce0;
reg    bramBias_we0;
wire   [31:0] bramBias_d0;
wire   [31:0] bramBias_q0;
reg    read_r_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    read_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond316_reg_1115;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond294_reg_1169;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond305_reg_1145;
wire    ap_CS_fsm_state14;
reg    write_r_blk_n_AW;
wire    ap_CS_fsm_state60;
reg   [0:0] icmp_ln107_reg_1335;
reg    write_r_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] exitcond272_reg_1345;
reg   [0:0] exitcond272_reg_1345_pp4_iter1_reg;
reg    write_r_blk_n_B;
wire    ap_CS_fsm_state68;
reg   [0:0] icmp_ln63_reg_1183;
wire    ap_CS_fsm_state69;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_pp5_stage0;
reg   [0:0] exitcond1_reg_1374;
reg   [0:0] exitcond1_reg_1374_pp5_iter1_reg;
wire    ap_CS_fsm_state77;
reg   [0:0] icmp_ln110_reg_1364;
wire    read_r_AWREADY;
wire    read_r_WREADY;
reg    read_r_ARVALID;
wire    read_r_ARREADY;
reg   [31:0] read_r_ARADDR;
reg   [31:0] read_r_ARLEN;
wire    read_r_RVALID;
reg    read_r_RREADY;
wire   [31:0] read_r_RDATA;
wire    read_r_RLAST;
wire   [0:0] read_r_RID;
wire   [0:0] read_r_RUSER;
wire   [1:0] read_r_RRESP;
wire    read_r_BVALID;
wire   [1:0] read_r_BRESP;
wire   [0:0] read_r_BID;
wire   [0:0] read_r_BUSER;
reg    write_r_AWVALID;
wire    write_r_AWREADY;
reg   [31:0] write_r_AWADDR;
reg   [31:0] write_r_AWLEN;
reg    write_r_WVALID;
wire    write_r_WREADY;
reg   [31:0] write_r_WDATA;
wire    write_r_ARREADY;
wire    write_r_RVALID;
wire   [31:0] write_r_RDATA;
wire    write_r_RLAST;
wire   [0:0] write_r_RID;
wire   [0:0] write_r_RUSER;
wire   [1:0] write_r_RRESP;
wire    write_r_BVALID;
reg    write_r_BREADY;
wire   [1:0] write_r_BRESP;
wire   [0:0] write_r_BID;
wire   [0:0] write_r_BUSER;
reg   [31:0] loop_index23_reg_425;
reg   [31:0] loop_index23_reg_425_pp0_iter1_reg;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] loop_index17_reg_437;
reg   [31:0] loop_index17_reg_437_pp1_iter1_reg;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] loop_index11_reg_449;
reg   [31:0] loop_index11_reg_449_pp2_iter1_reg;
wire    ap_block_state32_pp2_stage0_iter0;
reg    ap_block_state33_pp2_stage0_iter1;
wire    ap_block_state34_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [29:0] i_12_reg_461;
reg   [31:0] loop_index5_reg_494;
reg   [31:0] loop_index_reg_505;
reg   [63:0] axiLayerOutput_read_reg_1010;
reg   [63:0] axiBiasInput_read_reg_1015;
reg   [63:0] axiWeightInput_read_reg_1020;
reg   [63:0] output_read_reg_1025;
reg   [63:0] input_read_reg_1030;
wire   [0:0] icmp_ln45_fu_574_p2;
reg   [31:0] numberInputs_read_reg_1039;
wire   [8:0] trunc_ln45_fu_580_p1;
reg   [8:0] trunc_ln45_reg_1050;
wire   [15:0] trunc_ln45_1_fu_584_p1;
reg   [15:0] trunc_ln45_1_reg_1056;
reg   [31:0] numberNeurons_read_reg_1062;
reg  signed [31:0] numberLayers_read_reg_1076;
reg   [31:0] numberOutputs_read_reg_1082;
wire   [31:0] mul_ln50_fu_594_p2;
reg   [31:0] mul_ln50_reg_1094;
wire   [31:0] valuesToCopy_fu_609_p2;
reg   [31:0] valuesToCopy_reg_1099;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln53_fu_614_p2;
reg   [31:0] read_addr_reg_1109;
wire   [0:0] exitcond316_fu_639_p2;
reg   [0:0] exitcond316_reg_1115_pp0_iter1_reg;
wire   [31:0] empty_150_fu_644_p2;
reg   [31:0] empty_150_reg_1119;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] read_addr_read_reg_1124;
wire   [31:0] valuesToCopy_2_fu_659_p2;
reg   [31:0] valuesToCopy_2_reg_1129;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln58_fu_664_p2;
reg   [31:0] read_addr_1_reg_1139;
wire   [0:0] exitcond305_fu_689_p2;
reg   [0:0] exitcond305_reg_1145_pp1_iter1_reg;
wire   [31:0] empty_152_fu_694_p2;
reg   [31:0] empty_152_reg_1149;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] read_addr_1_read_reg_1154;
wire   [0:0] icmp_ln61_fu_709_p2;
wire    ap_CS_fsm_state24;
reg   [31:0] read_addr_2_reg_1163;
wire   [0:0] exitcond294_fu_733_p2;
reg   [0:0] exitcond294_reg_1169_pp2_iter1_reg;
wire   [31:0] empty_155_fu_738_p2;
reg   [31:0] empty_155_reg_1173;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] read_addr_2_read_reg_1178;
wire   [0:0] icmp_ln63_fu_753_p2;
wire    ap_CS_fsm_state35;
reg   [29:0] trunc_ln1_reg_1187;
wire   [0:0] icmp_ln137_fu_768_p2;
reg   [0:0] icmp_ln137_reg_1192;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state37_pp3_stage0_iter0;
wire    ap_block_state39_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [29:0] add_ln137_fu_773_p2;
reg   [29:0] add_ln137_reg_1196;
reg    ap_enable_reg_pp3_iter0;
wire   [8:0] tmp_s_fu_783_p3;
reg   [8:0] tmp_s_reg_1201;
wire   [63:0] zext_ln143_fu_791_p1;
reg   [63:0] zext_ln143_reg_1207;
wire   [63:0] zext_ln143_11_fu_802_p1;
reg   [63:0] zext_ln143_11_reg_1217;
wire   [63:0] zext_ln143_12_fu_812_p1;
reg   [63:0] zext_ln143_12_reg_1227;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state38_pp3_stage1_iter0;
wire    ap_block_pp3_stage1_11001;
wire   [63:0] zext_ln143_13_fu_822_p1;
reg   [63:0] zext_ln143_13_reg_1237;
wire  signed [8:0] trunc_ln78_fu_827_p1;
reg  signed [8:0] trunc_ln78_reg_1247;
wire    ap_CS_fsm_state45;
wire    grp_copyArray_float_4u_1_fu_555_ap_ready;
wire    grp_copyArray_float_4u_1_fu_555_ap_done;
wire  signed [31:0] sub21_fu_830_p2;
reg  signed [31:0] sub21_reg_1252;
wire  signed [15:0] trunc_ln84_fu_835_p1;
reg  signed [15:0] trunc_ln84_reg_1258;
wire   [31:0] add_ln86_fu_843_p2;
reg   [31:0] add_ln86_reg_1268;
wire    ap_CS_fsm_state46;
wire   [15:0] add_ln84_1_fu_853_p2;
reg   [15:0] add_ln84_1_reg_1273;
wire   [0:0] icmp_ln81_fu_838_p2;
wire   [8:0] mul_ln86_fu_869_p2;
reg   [8:0] mul_ln86_reg_1283;
wire  signed [15:0] grp_fu_998_p2;
reg   [15:0] mul_ln86_1_reg_1294;
wire    ap_CS_fsm_state49;
wire   [8:0] add_ln92_fu_887_p2;
reg   [8:0] add_ln92_reg_1299;
wire    ap_CS_fsm_state50;
wire    grp_processLayer_float_4u_2u_s_fu_528_ap_ready;
wire    grp_processLayer_float_4u_2u_s_fu_528_ap_done;
wire    ap_sync_grp_processLayer_float_4u_2u_s_fu_528_ap_ready;
wire    ap_sync_grp_processLayer_float_4u_2u_s_fu_528_ap_done;
reg    ap_block_state50_on_subcall_done;
wire  signed [15:0] grp_fu_1004_p2;
reg   [15:0] mul_ln99_1_reg_1304;
wire    ap_CS_fsm_state57;
wire   [31:0] grp_fu_570_p2;
reg   [31:0] mul_ln99_reg_1309;
wire   [8:0] trunc_ln101_fu_891_p1;
reg   [8:0] trunc_ln101_reg_1314;
wire   [31:0] add_ln106_fu_896_p2;
reg   [31:0] add_ln106_reg_1319;
wire    ap_CS_fsm_state58;
wire    grp_outputLayer_float_4u_2u_s_fu_541_ap_ready;
wire    grp_outputLayer_float_4u_2u_s_fu_541_ap_done;
wire    ap_sync_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready;
wire    ap_sync_grp_outputLayer_float_4u_2u_s_fu_541_ap_done;
reg    ap_block_state58_on_subcall_done;
wire   [8:0] trunc_ln106_fu_900_p1;
reg   [8:0] trunc_ln106_reg_1324;
wire   [31:0] add_ln107_fu_904_p2;
reg   [31:0] add_ln107_reg_1329;
wire    ap_CS_fsm_state59;
wire   [0:0] icmp_ln107_fu_908_p2;
reg    ap_block_state60_io;
wire    grp_copyArray_float_4u_s_fu_562_ap_ready;
wire    grp_copyArray_float_4u_s_fu_562_ap_done;
wire   [0:0] exitcond272_fu_934_p2;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state61_pp4_stage0_iter0;
wire    ap_block_state62_pp4_stage0_iter1;
wire    ap_block_state63_pp4_stage0_iter2;
reg    ap_block_state63_io;
reg    ap_block_pp4_stage0_11001;
wire   [31:0] empty_159_fu_939_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [31:0] bramLayerResults_q0;
reg   [31:0] bramLayerResults_load_reg_1359;
reg    ap_enable_reg_pp4_iter1;
wire   [0:0] icmp_ln110_fu_954_p2;
reg    ap_predicate_op326_writeresp_state68;
reg    ap_block_state68;
reg   [31:0] write_addr_1_reg_1368;
wire   [0:0] exitcond1_fu_978_p2;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state70_pp5_stage0_iter0;
wire    ap_block_state71_pp5_stage0_iter1;
wire    ap_block_state72_pp5_stage0_iter2;
reg    ap_block_state72_io;
reg    ap_block_pp5_stage0_11001;
wire   [31:0] empty_163_fu_983_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [31:0] layerBuffer0_q0;
reg   [31:0] layerBuffer0_load_reg_1388;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state31;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state32;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state37;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage1_subdone;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state61;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state70;
reg    ap_enable_reg_pp5_iter1;
reg   [4:0] inputData_address0;
reg    inputData_ce0;
reg    inputData_we0;
wire   [31:0] inputData_d0;
wire   [31:0] inputData_q0;
reg   [4:0] inputData_address1;
reg    inputData_ce1;
wire   [31:0] inputData_q1;
reg   [6:0] layerBuffer0_address0;
reg    layerBuffer0_ce0;
reg    layerBuffer0_we0;
reg   [31:0] layerBuffer0_d0;
reg   [6:0] layerBuffer0_address1;
reg    layerBuffer0_ce1;
wire   [31:0] layerBuffer0_q1;
reg   [6:0] layerBuffer1_address0;
reg    layerBuffer1_ce0;
reg    layerBuffer1_we0;
wire   [31:0] layerBuffer1_q0;
reg   [6:0] layerBuffer1_address1;
reg    layerBuffer1_ce1;
reg    layerBuffer1_we1;
wire   [31:0] layerBuffer1_q1;
reg   [8:0] bramLayerResults_address0;
reg    bramLayerResults_ce0;
reg    bramLayerResults_we0;
reg   [31:0] bramLayerResults_d0;
reg   [8:0] bramLayerResults_address1;
reg    bramLayerResults_ce1;
reg    bramLayerResults_we1;
reg   [31:0] bramLayerResults_d1;
wire   [15:0] grp_processLayer_float_4u_2u_1_fu_516_p_weights_address0;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_weights_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_516_p_weights_d0;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_weights_we0;
wire   [15:0] grp_processLayer_float_4u_2u_1_fu_516_p_weights_address1;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_weights_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_516_p_weights_d1;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_weights_we1;
wire   [4:0] grp_processLayer_float_4u_2u_1_fu_516_p_input_address0;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_input_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_516_p_input_d0;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_input_we0;
wire   [4:0] grp_processLayer_float_4u_2u_1_fu_516_p_input_address1;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_input_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_516_p_input_d1;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_input_we1;
wire   [8:0] grp_processLayer_float_4u_2u_1_fu_516_p_bias_address0;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_bias_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_516_p_bias_d0;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_bias_we0;
wire   [8:0] grp_processLayer_float_4u_2u_1_fu_516_p_bias_address1;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_bias_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_516_p_bias_d1;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_bias_we1;
wire   [6:0] grp_processLayer_float_4u_2u_1_fu_516_p_output_address0;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_output_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_516_p_output_d0;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_output_we0;
wire   [6:0] grp_processLayer_float_4u_2u_1_fu_516_p_output_address1;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_output_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_516_p_output_d1;
wire    grp_processLayer_float_4u_2u_1_fu_516_p_output_we1;
wire    grp_processLayer_float_4u_2u_1_fu_516_ap_start;
wire    grp_processLayer_float_4u_2u_1_fu_516_ap_done;
wire    grp_processLayer_float_4u_2u_1_fu_516_ap_ready;
wire    grp_processLayer_float_4u_2u_1_fu_516_ap_idle;
reg    grp_processLayer_float_4u_2u_1_fu_516_ap_continue;
wire   [15:0] grp_processLayer_float_4u_2u_s_fu_528_p_weights_address0;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_weights_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_528_p_weights_d0;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_weights_we0;
wire   [15:0] grp_processLayer_float_4u_2u_s_fu_528_p_weights_address1;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_weights_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_528_p_weights_d1;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_weights_we1;
wire   [6:0] grp_processLayer_float_4u_2u_s_fu_528_p_input_address0;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_input_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_528_p_input_d0;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_input_we0;
wire   [6:0] grp_processLayer_float_4u_2u_s_fu_528_p_input_address1;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_input_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_528_p_input_d1;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_input_we1;
wire   [8:0] grp_processLayer_float_4u_2u_s_fu_528_p_bias_address0;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_bias_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_528_p_bias_d0;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_bias_we0;
wire   [8:0] grp_processLayer_float_4u_2u_s_fu_528_p_bias_address1;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_bias_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_528_p_bias_d1;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_bias_we1;
wire   [6:0] grp_processLayer_float_4u_2u_s_fu_528_p_output_address0;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_output_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_528_p_output_d0;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_output_we0;
wire   [6:0] grp_processLayer_float_4u_2u_s_fu_528_p_output_address1;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_output_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_528_p_output_d1;
wire    grp_processLayer_float_4u_2u_s_fu_528_p_output_we1;
wire    grp_processLayer_float_4u_2u_s_fu_528_ap_start;
wire    grp_processLayer_float_4u_2u_s_fu_528_ap_idle;
reg    grp_processLayer_float_4u_2u_s_fu_528_ap_continue;
wire   [15:0] grp_outputLayer_float_4u_2u_s_fu_541_p_weights_address0;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_weights_ce0;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_541_p_weights_d0;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_weights_we0;
wire   [15:0] grp_outputLayer_float_4u_2u_s_fu_541_p_weights_address1;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_weights_ce1;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_541_p_weights_d1;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_weights_we1;
wire   [6:0] grp_outputLayer_float_4u_2u_s_fu_541_p_input_address0;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_input_ce0;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_541_p_input_d0;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_input_we0;
wire   [6:0] grp_outputLayer_float_4u_2u_s_fu_541_p_input_address1;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_input_ce1;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_541_p_input_d1;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_input_we1;
wire   [8:0] grp_outputLayer_float_4u_2u_s_fu_541_p_bias_address0;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_bias_ce0;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_541_p_bias_d0;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_bias_we0;
wire   [8:0] grp_outputLayer_float_4u_2u_s_fu_541_p_bias_address1;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_bias_ce1;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_541_p_bias_d1;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_bias_we1;
wire   [6:0] grp_outputLayer_float_4u_2u_s_fu_541_p_output_address0;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_output_ce0;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_541_p_output_d0;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_output_we0;
wire   [6:0] grp_outputLayer_float_4u_2u_s_fu_541_p_output_address1;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_output_ce1;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_541_p_output_d1;
wire    grp_outputLayer_float_4u_2u_s_fu_541_p_output_we1;
wire    grp_outputLayer_float_4u_2u_s_fu_541_ap_start;
wire    grp_outputLayer_float_4u_2u_s_fu_541_ap_idle;
reg    grp_outputLayer_float_4u_2u_s_fu_541_ap_continue;
wire    grp_copyArray_float_4u_1_fu_555_ap_start;
wire    grp_copyArray_float_4u_1_fu_555_ap_idle;
wire   [6:0] grp_copyArray_float_4u_1_fu_555_p_input_address0;
wire    grp_copyArray_float_4u_1_fu_555_p_input_ce0;
wire   [6:0] grp_copyArray_float_4u_1_fu_555_p_input_address1;
wire    grp_copyArray_float_4u_1_fu_555_p_input_ce1;
wire   [6:0] grp_copyArray_float_4u_1_fu_555_p_output_address0;
wire    grp_copyArray_float_4u_1_fu_555_p_output_ce0;
wire    grp_copyArray_float_4u_1_fu_555_p_output_we0;
wire   [31:0] grp_copyArray_float_4u_1_fu_555_p_output_d0;
wire   [6:0] grp_copyArray_float_4u_1_fu_555_p_output_address1;
wire    grp_copyArray_float_4u_1_fu_555_p_output_ce1;
wire    grp_copyArray_float_4u_1_fu_555_p_output_we1;
wire   [31:0] grp_copyArray_float_4u_1_fu_555_p_output_d1;
wire    grp_copyArray_float_4u_s_fu_562_ap_start;
wire    grp_copyArray_float_4u_s_fu_562_ap_idle;
wire   [6:0] grp_copyArray_float_4u_s_fu_562_p_input_address0;
wire    grp_copyArray_float_4u_s_fu_562_p_input_ce0;
wire   [6:0] grp_copyArray_float_4u_s_fu_562_p_input_address1;
wire    grp_copyArray_float_4u_s_fu_562_p_input_ce1;
wire   [8:0] grp_copyArray_float_4u_s_fu_562_p_output_address0;
wire    grp_copyArray_float_4u_s_fu_562_p_output_ce0;
wire    grp_copyArray_float_4u_s_fu_562_p_output_we0;
wire   [31:0] grp_copyArray_float_4u_s_fu_562_p_output_d0;
wire   [8:0] grp_copyArray_float_4u_s_fu_562_p_output_address1;
wire    grp_copyArray_float_4u_s_fu_562_p_output_ce1;
wire    grp_copyArray_float_4u_s_fu_562_p_output_we1;
wire   [31:0] grp_copyArray_float_4u_s_fu_562_p_output_d1;
reg   [8:0] grp_copyArray_float_4u_s_fu_562_p_output_offset;
reg   [31:0] grp_copyArray_float_4u_s_fu_562_size;
reg   [31:0] ap_phi_mux_loop_index23_phi_fu_429_p4;
reg   [31:0] ap_phi_mux_loop_index17_phi_fu_441_p4;
reg   [31:0] ap_phi_mux_loop_index11_phi_fu_453_p4;
reg   [29:0] ap_phi_mux_i_12_phi_fu_465_p4;
wire    ap_block_pp3_stage0;
reg   [31:0] i_reg_472;
wire    ap_CS_fsm_state54;
reg   [15:0] phi_mul_reg_483;
reg    grp_processLayer_float_4u_2u_1_fu_516_ap_start_reg;
wire    ap_CS_fsm_state36;
wire    ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_ready;
wire    ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_done;
reg    ap_block_state36_on_subcall_done;
reg    ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_ready;
reg    ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_done;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
reg    ap_block_state41_on_subcall_done;
reg    grp_processLayer_float_4u_2u_s_fu_528_ap_start_reg;
reg    ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_ready;
reg    ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_done;
reg    grp_outputLayer_float_4u_2u_s_fu_541_ap_start_reg;
reg    ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready;
reg    ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_done;
reg    grp_copyArray_float_4u_1_fu_555_ap_start_reg;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state53;
reg    grp_copyArray_float_4u_s_fu_562_ap_start_reg;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state52;
wire   [63:0] loop_index23_cast_fu_650_p1;
wire   [63:0] loop_index17_cast_fu_700_p1;
wire   [63:0] loop_index11_cast_fu_744_p1;
wire    ap_block_pp3_stage1;
wire   [63:0] loop_index5_cast_fu_945_p1;
wire   [63:0] loop_index_cast_fu_989_p1;
wire  signed [63:0] p_cast1_cast_fu_629_p1;
wire  signed [63:0] p_cast2_cast_fu_679_p1;
wire  signed [63:0] p_cast_cast_fu_723_p1;
wire  signed [63:0] p_cast6_cast_fu_923_p1;
wire  signed [63:0] p_cast7_cast_fu_968_p1;
wire   [31:0] empty_160_fu_950_p1;
wire    ap_block_pp4_stage0_01001;
reg    ap_block_state77;
wire   [31:0] empty_164_fu_994_p1;
wire    ap_block_pp5_stage0_01001;
wire  signed [31:0] add_ln50_fu_588_p0;
wire  signed [31:0] mul_ln50_fu_594_p1;
wire   [31:0] add_ln51_1_fu_600_p2;
wire  signed [31:0] valuesToCopy_fu_609_p1;
wire   [61:0] p_cast1_fu_620_p4;
wire   [61:0] p_cast2_fu_670_p4;
wire   [61:0] p_cast_fu_714_p4;
wire   [6:0] empty_157_fu_779_p1;
wire   [8:0] or_ln143_fu_796_p2;
wire   [8:0] or_ln143_3_fu_807_p2;
wire   [8:0] or_ln143_4_fu_817_p2;
wire   [8:0] trunc_ln84_1_fu_849_p1;
wire  signed [8:0] mul_ln86_fu_869_p1;
wire   [31:0] mul_ln97_fu_874_p2;
wire   [15:0] trunc_ln97_fu_878_p1;
wire   [61:0] p_cast6_fu_914_p4;
wire   [61:0] p_cast7_fu_959_p4;
wire  signed [15:0] grp_fu_998_p1;
wire  signed [15:0] grp_fu_1004_p0;
reg   [65:0] ap_NS_fsm;
reg    ap_block_state43_on_subcall_done;
reg    ap_block_state52_on_subcall_done;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;

// power-on initialization
initial begin
#0 ap_CS_fsm = 66'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 grp_processLayer_float_4u_2u_1_fu_516_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_ready = 1'b0;
#0 ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_done = 1'b0;
#0 grp_processLayer_float_4u_2u_s_fu_528_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_ready = 1'b0;
#0 ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_done = 1'b0;
#0 grp_outputLayer_float_4u_2u_s_fu_541_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready = 1'b0;
#0 ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_done = 1'b0;
#0 grp_copyArray_float_4u_1_fu_555_ap_start_reg = 1'b0;
#0 grp_copyArray_float_4u_s_fu_562_ap_start_reg = 1'b0;
end

MLP_bramWeight #(
    .DataWidth( 32 ),
    .AddressRange( 40960 ),
    .AddressWidth( 16 ))
bramWeight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_address0),
    .ce0(bramWeight_ce0),
    .we0(bramWeight_we0),
    .d0(bramWeight_d0),
    .q0(bramWeight_q0),
    .address1(bramWeight_address1),
    .ce1(bramWeight_ce1),
    .q1(bramWeight_q1)
);

MLP_bramBias #(
    .DataWidth( 32 ),
    .AddressRange( 416 ),
    .AddressWidth( 9 ))
bramBias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramBias_address0),
    .ce0(bramBias_ce0),
    .we0(bramBias_we0),
    .d0(bramBias_d0),
    .q0(bramBias_q0)
);

MLP_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_r(input_r),
    .output_r(output_r),
    .axiWeightInput(axiWeightInput),
    .axiBiasInput(axiBiasInput),
    .axiLayerOutput(axiLayerOutput),
    .numberInputs(numberInputs),
    .numberOutputs(numberOutputs),
    .numberLayers(numberLayers),
    .numberNeurons(numberNeurons),
    .loadParameters(loadParameters),
    .exportLayers(exportLayers)
);

MLP_read_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 128 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_READ_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_READ_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_READ_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_READ_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_READ_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_READ_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_READ_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_READ_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_READ_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_READ_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_READ_R_CACHE_VALUE ))
read_r_m_axi_U(
    .AWVALID(m_axi_read_r_AWVALID),
    .AWREADY(m_axi_read_r_AWREADY),
    .AWADDR(m_axi_read_r_AWADDR),
    .AWID(m_axi_read_r_AWID),
    .AWLEN(m_axi_read_r_AWLEN),
    .AWSIZE(m_axi_read_r_AWSIZE),
    .AWBURST(m_axi_read_r_AWBURST),
    .AWLOCK(m_axi_read_r_AWLOCK),
    .AWCACHE(m_axi_read_r_AWCACHE),
    .AWPROT(m_axi_read_r_AWPROT),
    .AWQOS(m_axi_read_r_AWQOS),
    .AWREGION(m_axi_read_r_AWREGION),
    .AWUSER(m_axi_read_r_AWUSER),
    .WVALID(m_axi_read_r_WVALID),
    .WREADY(m_axi_read_r_WREADY),
    .WDATA(m_axi_read_r_WDATA),
    .WSTRB(m_axi_read_r_WSTRB),
    .WLAST(m_axi_read_r_WLAST),
    .WID(m_axi_read_r_WID),
    .WUSER(m_axi_read_r_WUSER),
    .ARVALID(m_axi_read_r_ARVALID),
    .ARREADY(m_axi_read_r_ARREADY),
    .ARADDR(m_axi_read_r_ARADDR),
    .ARID(m_axi_read_r_ARID),
    .ARLEN(m_axi_read_r_ARLEN),
    .ARSIZE(m_axi_read_r_ARSIZE),
    .ARBURST(m_axi_read_r_ARBURST),
    .ARLOCK(m_axi_read_r_ARLOCK),
    .ARCACHE(m_axi_read_r_ARCACHE),
    .ARPROT(m_axi_read_r_ARPROT),
    .ARQOS(m_axi_read_r_ARQOS),
    .ARREGION(m_axi_read_r_ARREGION),
    .ARUSER(m_axi_read_r_ARUSER),
    .RVALID(m_axi_read_r_RVALID),
    .RREADY(m_axi_read_r_RREADY),
    .RDATA(m_axi_read_r_RDATA),
    .RLAST(m_axi_read_r_RLAST),
    .RID(m_axi_read_r_RID),
    .RUSER(m_axi_read_r_RUSER),
    .RRESP(m_axi_read_r_RRESP),
    .BVALID(m_axi_read_r_BVALID),
    .BREADY(m_axi_read_r_BREADY),
    .BRESP(m_axi_read_r_BRESP),
    .BID(m_axi_read_r_BID),
    .BUSER(m_axi_read_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(read_r_ARVALID),
    .I_ARREADY(read_r_ARREADY),
    .I_ARADDR(read_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(read_r_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(read_r_RVALID),
    .I_RREADY(read_r_RREADY),
    .I_RDATA(read_r_RDATA),
    .I_RID(read_r_RID),
    .I_RUSER(read_r_RUSER),
    .I_RRESP(read_r_RRESP),
    .I_RLAST(read_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(read_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(read_r_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(read_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(read_r_BRESP),
    .I_BID(read_r_BID),
    .I_BUSER(read_r_BUSER)
);

MLP_write_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 128 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_WRITE_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_WRITE_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_WRITE_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_WRITE_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_WRITE_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_WRITE_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_WRITE_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_WRITE_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_WRITE_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_WRITE_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_WRITE_R_CACHE_VALUE ))
write_r_m_axi_U(
    .AWVALID(m_axi_write_r_AWVALID),
    .AWREADY(m_axi_write_r_AWREADY),
    .AWADDR(m_axi_write_r_AWADDR),
    .AWID(m_axi_write_r_AWID),
    .AWLEN(m_axi_write_r_AWLEN),
    .AWSIZE(m_axi_write_r_AWSIZE),
    .AWBURST(m_axi_write_r_AWBURST),
    .AWLOCK(m_axi_write_r_AWLOCK),
    .AWCACHE(m_axi_write_r_AWCACHE),
    .AWPROT(m_axi_write_r_AWPROT),
    .AWQOS(m_axi_write_r_AWQOS),
    .AWREGION(m_axi_write_r_AWREGION),
    .AWUSER(m_axi_write_r_AWUSER),
    .WVALID(m_axi_write_r_WVALID),
    .WREADY(m_axi_write_r_WREADY),
    .WDATA(m_axi_write_r_WDATA),
    .WSTRB(m_axi_write_r_WSTRB),
    .WLAST(m_axi_write_r_WLAST),
    .WID(m_axi_write_r_WID),
    .WUSER(m_axi_write_r_WUSER),
    .ARVALID(m_axi_write_r_ARVALID),
    .ARREADY(m_axi_write_r_ARREADY),
    .ARADDR(m_axi_write_r_ARADDR),
    .ARID(m_axi_write_r_ARID),
    .ARLEN(m_axi_write_r_ARLEN),
    .ARSIZE(m_axi_write_r_ARSIZE),
    .ARBURST(m_axi_write_r_ARBURST),
    .ARLOCK(m_axi_write_r_ARLOCK),
    .ARCACHE(m_axi_write_r_ARCACHE),
    .ARPROT(m_axi_write_r_ARPROT),
    .ARQOS(m_axi_write_r_ARQOS),
    .ARREGION(m_axi_write_r_ARREGION),
    .ARUSER(m_axi_write_r_ARUSER),
    .RVALID(m_axi_write_r_RVALID),
    .RREADY(m_axi_write_r_RREADY),
    .RDATA(m_axi_write_r_RDATA),
    .RLAST(m_axi_write_r_RLAST),
    .RID(m_axi_write_r_RID),
    .RUSER(m_axi_write_r_RUSER),
    .RRESP(m_axi_write_r_RRESP),
    .BVALID(m_axi_write_r_BVALID),
    .BREADY(m_axi_write_r_BREADY),
    .BRESP(m_axi_write_r_BRESP),
    .BID(m_axi_write_r_BID),
    .BUSER(m_axi_write_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(write_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(write_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(write_r_RDATA),
    .I_RID(write_r_RID),
    .I_RUSER(write_r_RUSER),
    .I_RRESP(write_r_RRESP),
    .I_RLAST(write_r_RLAST),
    .I_AWVALID(write_r_AWVALID),
    .I_AWREADY(write_r_AWREADY),
    .I_AWADDR(write_r_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(write_r_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(write_r_WVALID),
    .I_WREADY(write_r_WREADY),
    .I_WDATA(write_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(write_r_BVALID),
    .I_BREADY(write_r_BREADY),
    .I_BRESP(write_r_BRESP),
    .I_BID(write_r_BID),
    .I_BUSER(write_r_BUSER)
);

MLP_inputData #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
inputData_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inputData_address0),
    .ce0(inputData_ce0),
    .we0(inputData_we0),
    .d0(inputData_d0),
    .q0(inputData_q0),
    .address1(inputData_address1),
    .ce1(inputData_ce1),
    .q1(inputData_q1)
);

MLP_layerBuffer0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
layerBuffer0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layerBuffer0_address0),
    .ce0(layerBuffer0_ce0),
    .we0(layerBuffer0_we0),
    .d0(layerBuffer0_d0),
    .q0(layerBuffer0_q0),
    .address1(layerBuffer0_address1),
    .ce1(layerBuffer0_ce1),
    .q1(layerBuffer0_q1)
);

MLP_layerBuffer1 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
layerBuffer1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layerBuffer1_address0),
    .ce0(layerBuffer1_ce0),
    .we0(layerBuffer1_we0),
    .d0(grp_copyArray_float_4u_1_fu_555_p_output_d0),
    .q0(layerBuffer1_q0),
    .address1(layerBuffer1_address1),
    .ce1(layerBuffer1_ce1),
    .we1(layerBuffer1_we1),
    .d1(grp_copyArray_float_4u_1_fu_555_p_output_d1),
    .q1(layerBuffer1_q1)
);

MLP_bramLayerResults #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
bramLayerResults_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramLayerResults_address0),
    .ce0(bramLayerResults_ce0),
    .we0(bramLayerResults_we0),
    .d0(bramLayerResults_d0),
    .q0(bramLayerResults_q0),
    .address1(bramLayerResults_address1),
    .ce1(bramLayerResults_ce1),
    .we1(bramLayerResults_we1),
    .d1(bramLayerResults_d1)
);

MLP_processLayer_float_4u_2u_1 grp_processLayer_float_4u_2u_1_fu_516(
    .p_weights_address0(grp_processLayer_float_4u_2u_1_fu_516_p_weights_address0),
    .p_weights_ce0(grp_processLayer_float_4u_2u_1_fu_516_p_weights_ce0),
    .p_weights_d0(grp_processLayer_float_4u_2u_1_fu_516_p_weights_d0),
    .p_weights_q0(bramWeight_q0),
    .p_weights_we0(grp_processLayer_float_4u_2u_1_fu_516_p_weights_we0),
    .p_weights_address1(grp_processLayer_float_4u_2u_1_fu_516_p_weights_address1),
    .p_weights_ce1(grp_processLayer_float_4u_2u_1_fu_516_p_weights_ce1),
    .p_weights_d1(grp_processLayer_float_4u_2u_1_fu_516_p_weights_d1),
    .p_weights_q1(bramWeight_q1),
    .p_weights_we1(grp_processLayer_float_4u_2u_1_fu_516_p_weights_we1),
    .p_input_address0(grp_processLayer_float_4u_2u_1_fu_516_p_input_address0),
    .p_input_ce0(grp_processLayer_float_4u_2u_1_fu_516_p_input_ce0),
    .p_input_d0(grp_processLayer_float_4u_2u_1_fu_516_p_input_d0),
    .p_input_q0(inputData_q0),
    .p_input_we0(grp_processLayer_float_4u_2u_1_fu_516_p_input_we0),
    .p_input_address1(grp_processLayer_float_4u_2u_1_fu_516_p_input_address1),
    .p_input_ce1(grp_processLayer_float_4u_2u_1_fu_516_p_input_ce1),
    .p_input_d1(grp_processLayer_float_4u_2u_1_fu_516_p_input_d1),
    .p_input_q1(inputData_q1),
    .p_input_we1(grp_processLayer_float_4u_2u_1_fu_516_p_input_we1),
    .p_bias_address0(grp_processLayer_float_4u_2u_1_fu_516_p_bias_address0),
    .p_bias_ce0(grp_processLayer_float_4u_2u_1_fu_516_p_bias_ce0),
    .p_bias_d0(grp_processLayer_float_4u_2u_1_fu_516_p_bias_d0),
    .p_bias_q0(bramBias_q0),
    .p_bias_we0(grp_processLayer_float_4u_2u_1_fu_516_p_bias_we0),
    .p_bias_address1(grp_processLayer_float_4u_2u_1_fu_516_p_bias_address1),
    .p_bias_ce1(grp_processLayer_float_4u_2u_1_fu_516_p_bias_ce1),
    .p_bias_d1(grp_processLayer_float_4u_2u_1_fu_516_p_bias_d1),
    .p_bias_q1(32'd0),
    .p_bias_we1(grp_processLayer_float_4u_2u_1_fu_516_p_bias_we1),
    .p_output_address0(grp_processLayer_float_4u_2u_1_fu_516_p_output_address0),
    .p_output_ce0(grp_processLayer_float_4u_2u_1_fu_516_p_output_ce0),
    .p_output_d0(grp_processLayer_float_4u_2u_1_fu_516_p_output_d0),
    .p_output_q0(32'd0),
    .p_output_we0(grp_processLayer_float_4u_2u_1_fu_516_p_output_we0),
    .p_output_address1(grp_processLayer_float_4u_2u_1_fu_516_p_output_address1),
    .p_output_ce1(grp_processLayer_float_4u_2u_1_fu_516_p_output_ce1),
    .p_output_d1(grp_processLayer_float_4u_2u_1_fu_516_p_output_d1),
    .p_output_q1(32'd0),
    .p_output_we1(grp_processLayer_float_4u_2u_1_fu_516_p_output_we1),
    .p_n(numberNeurons_read_reg_1062),
    .p_k(numberInputs_read_reg_1039),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_n_ap_vld(1'b1),
    .p_k_ap_vld(1'b1),
    .ap_start(grp_processLayer_float_4u_2u_1_fu_516_ap_start),
    .ap_done(grp_processLayer_float_4u_2u_1_fu_516_ap_done),
    .ap_ready(grp_processLayer_float_4u_2u_1_fu_516_ap_ready),
    .ap_idle(grp_processLayer_float_4u_2u_1_fu_516_ap_idle),
    .ap_continue(grp_processLayer_float_4u_2u_1_fu_516_ap_continue)
);

MLP_processLayer_float_4u_2u_s grp_processLayer_float_4u_2u_s_fu_528(
    .p_weights_address0(grp_processLayer_float_4u_2u_s_fu_528_p_weights_address0),
    .p_weights_ce0(grp_processLayer_float_4u_2u_s_fu_528_p_weights_ce0),
    .p_weights_d0(grp_processLayer_float_4u_2u_s_fu_528_p_weights_d0),
    .p_weights_q0(bramWeight_q0),
    .p_weights_we0(grp_processLayer_float_4u_2u_s_fu_528_p_weights_we0),
    .p_weights_address1(grp_processLayer_float_4u_2u_s_fu_528_p_weights_address1),
    .p_weights_ce1(grp_processLayer_float_4u_2u_s_fu_528_p_weights_ce1),
    .p_weights_d1(grp_processLayer_float_4u_2u_s_fu_528_p_weights_d1),
    .p_weights_q1(bramWeight_q1),
    .p_weights_we1(grp_processLayer_float_4u_2u_s_fu_528_p_weights_we1),
    .p_weights_offset(mul_ln86_1_reg_1294),
    .p_input_address0(grp_processLayer_float_4u_2u_s_fu_528_p_input_address0),
    .p_input_ce0(grp_processLayer_float_4u_2u_s_fu_528_p_input_ce0),
    .p_input_d0(grp_processLayer_float_4u_2u_s_fu_528_p_input_d0),
    .p_input_q0(layerBuffer1_q0),
    .p_input_we0(grp_processLayer_float_4u_2u_s_fu_528_p_input_we0),
    .p_input_address1(grp_processLayer_float_4u_2u_s_fu_528_p_input_address1),
    .p_input_ce1(grp_processLayer_float_4u_2u_s_fu_528_p_input_ce1),
    .p_input_d1(grp_processLayer_float_4u_2u_s_fu_528_p_input_d1),
    .p_input_q1(layerBuffer1_q1),
    .p_input_we1(grp_processLayer_float_4u_2u_s_fu_528_p_input_we1),
    .p_bias_address0(grp_processLayer_float_4u_2u_s_fu_528_p_bias_address0),
    .p_bias_ce0(grp_processLayer_float_4u_2u_s_fu_528_p_bias_ce0),
    .p_bias_d0(grp_processLayer_float_4u_2u_s_fu_528_p_bias_d0),
    .p_bias_q0(bramBias_q0),
    .p_bias_we0(grp_processLayer_float_4u_2u_s_fu_528_p_bias_we0),
    .p_bias_address1(grp_processLayer_float_4u_2u_s_fu_528_p_bias_address1),
    .p_bias_ce1(grp_processLayer_float_4u_2u_s_fu_528_p_bias_ce1),
    .p_bias_d1(grp_processLayer_float_4u_2u_s_fu_528_p_bias_d1),
    .p_bias_q1(32'd0),
    .p_bias_we1(grp_processLayer_float_4u_2u_s_fu_528_p_bias_we1),
    .p_bias_offset(mul_ln86_reg_1283),
    .p_output_address0(grp_processLayer_float_4u_2u_s_fu_528_p_output_address0),
    .p_output_ce0(grp_processLayer_float_4u_2u_s_fu_528_p_output_ce0),
    .p_output_d0(grp_processLayer_float_4u_2u_s_fu_528_p_output_d0),
    .p_output_q0(32'd0),
    .p_output_we0(grp_processLayer_float_4u_2u_s_fu_528_p_output_we0),
    .p_output_address1(grp_processLayer_float_4u_2u_s_fu_528_p_output_address1),
    .p_output_ce1(grp_processLayer_float_4u_2u_s_fu_528_p_output_ce1),
    .p_output_d1(grp_processLayer_float_4u_2u_s_fu_528_p_output_d1),
    .p_output_q1(32'd0),
    .p_output_we1(grp_processLayer_float_4u_2u_s_fu_528_p_output_we1),
    .p_n(numberNeurons_read_reg_1062),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_weights_offset_ap_vld(1'b1),
    .p_bias_offset_ap_vld(1'b1),
    .p_n_ap_vld(1'b1),
    .ap_start(grp_processLayer_float_4u_2u_s_fu_528_ap_start),
    .ap_done(grp_processLayer_float_4u_2u_s_fu_528_ap_done),
    .ap_ready(grp_processLayer_float_4u_2u_s_fu_528_ap_ready),
    .ap_idle(grp_processLayer_float_4u_2u_s_fu_528_ap_idle),
    .ap_continue(grp_processLayer_float_4u_2u_s_fu_528_ap_continue)
);

MLP_outputLayer_float_4u_2u_s grp_outputLayer_float_4u_2u_s_fu_541(
    .p_weights_address0(grp_outputLayer_float_4u_2u_s_fu_541_p_weights_address0),
    .p_weights_ce0(grp_outputLayer_float_4u_2u_s_fu_541_p_weights_ce0),
    .p_weights_d0(grp_outputLayer_float_4u_2u_s_fu_541_p_weights_d0),
    .p_weights_q0(bramWeight_q0),
    .p_weights_we0(grp_outputLayer_float_4u_2u_s_fu_541_p_weights_we0),
    .p_weights_address1(grp_outputLayer_float_4u_2u_s_fu_541_p_weights_address1),
    .p_weights_ce1(grp_outputLayer_float_4u_2u_s_fu_541_p_weights_ce1),
    .p_weights_d1(grp_outputLayer_float_4u_2u_s_fu_541_p_weights_d1),
    .p_weights_q1(bramWeight_q1),
    .p_weights_we1(grp_outputLayer_float_4u_2u_s_fu_541_p_weights_we1),
    .p_weights_offset(mul_ln99_1_reg_1304),
    .p_input_address0(grp_outputLayer_float_4u_2u_s_fu_541_p_input_address0),
    .p_input_ce0(grp_outputLayer_float_4u_2u_s_fu_541_p_input_ce0),
    .p_input_d0(grp_outputLayer_float_4u_2u_s_fu_541_p_input_d0),
    .p_input_q0(layerBuffer1_q0),
    .p_input_we0(grp_outputLayer_float_4u_2u_s_fu_541_p_input_we0),
    .p_input_address1(grp_outputLayer_float_4u_2u_s_fu_541_p_input_address1),
    .p_input_ce1(grp_outputLayer_float_4u_2u_s_fu_541_p_input_ce1),
    .p_input_d1(grp_outputLayer_float_4u_2u_s_fu_541_p_input_d1),
    .p_input_q1(layerBuffer1_q1),
    .p_input_we1(grp_outputLayer_float_4u_2u_s_fu_541_p_input_we1),
    .p_bias_address0(grp_outputLayer_float_4u_2u_s_fu_541_p_bias_address0),
    .p_bias_ce0(grp_outputLayer_float_4u_2u_s_fu_541_p_bias_ce0),
    .p_bias_d0(grp_outputLayer_float_4u_2u_s_fu_541_p_bias_d0),
    .p_bias_q0(bramBias_q0),
    .p_bias_we0(grp_outputLayer_float_4u_2u_s_fu_541_p_bias_we0),
    .p_bias_address1(grp_outputLayer_float_4u_2u_s_fu_541_p_bias_address1),
    .p_bias_ce1(grp_outputLayer_float_4u_2u_s_fu_541_p_bias_ce1),
    .p_bias_d1(grp_outputLayer_float_4u_2u_s_fu_541_p_bias_d1),
    .p_bias_q1(32'd0),
    .p_bias_we1(grp_outputLayer_float_4u_2u_s_fu_541_p_bias_we1),
    .p_bias_offset(trunc_ln101_reg_1314),
    .p_output_address0(grp_outputLayer_float_4u_2u_s_fu_541_p_output_address0),
    .p_output_ce0(grp_outputLayer_float_4u_2u_s_fu_541_p_output_ce0),
    .p_output_d0(grp_outputLayer_float_4u_2u_s_fu_541_p_output_d0),
    .p_output_q0(32'd0),
    .p_output_we0(grp_outputLayer_float_4u_2u_s_fu_541_p_output_we0),
    .p_output_address1(grp_outputLayer_float_4u_2u_s_fu_541_p_output_address1),
    .p_output_ce1(grp_outputLayer_float_4u_2u_s_fu_541_p_output_ce1),
    .p_output_d1(grp_outputLayer_float_4u_2u_s_fu_541_p_output_d1),
    .p_output_q1(32'd0),
    .p_output_we1(grp_outputLayer_float_4u_2u_s_fu_541_p_output_we1),
    .p_n(numberOutputs_read_reg_1082),
    .p_k(numberNeurons_read_reg_1062),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_weights_offset_ap_vld(1'b1),
    .p_bias_offset_ap_vld(1'b1),
    .p_n_ap_vld(1'b1),
    .p_k_ap_vld(1'b1),
    .ap_start(grp_outputLayer_float_4u_2u_s_fu_541_ap_start),
    .ap_done(grp_outputLayer_float_4u_2u_s_fu_541_ap_done),
    .ap_ready(grp_outputLayer_float_4u_2u_s_fu_541_ap_ready),
    .ap_idle(grp_outputLayer_float_4u_2u_s_fu_541_ap_idle),
    .ap_continue(grp_outputLayer_float_4u_2u_s_fu_541_ap_continue)
);

MLP_copyArray_float_4u_1 grp_copyArray_float_4u_1_fu_555(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copyArray_float_4u_1_fu_555_ap_start),
    .ap_done(grp_copyArray_float_4u_1_fu_555_ap_done),
    .ap_idle(grp_copyArray_float_4u_1_fu_555_ap_idle),
    .ap_ready(grp_copyArray_float_4u_1_fu_555_ap_ready),
    .p_input_address0(grp_copyArray_float_4u_1_fu_555_p_input_address0),
    .p_input_ce0(grp_copyArray_float_4u_1_fu_555_p_input_ce0),
    .p_input_q0(layerBuffer0_q0),
    .p_input_address1(grp_copyArray_float_4u_1_fu_555_p_input_address1),
    .p_input_ce1(grp_copyArray_float_4u_1_fu_555_p_input_ce1),
    .p_input_q1(layerBuffer0_q1),
    .p_output_address0(grp_copyArray_float_4u_1_fu_555_p_output_address0),
    .p_output_ce0(grp_copyArray_float_4u_1_fu_555_p_output_ce0),
    .p_output_we0(grp_copyArray_float_4u_1_fu_555_p_output_we0),
    .p_output_d0(grp_copyArray_float_4u_1_fu_555_p_output_d0),
    .p_output_address1(grp_copyArray_float_4u_1_fu_555_p_output_address1),
    .p_output_ce1(grp_copyArray_float_4u_1_fu_555_p_output_ce1),
    .p_output_we1(grp_copyArray_float_4u_1_fu_555_p_output_we1),
    .p_output_d1(grp_copyArray_float_4u_1_fu_555_p_output_d1),
    .size(numberNeurons_read_reg_1062)
);

MLP_copyArray_float_4u_s grp_copyArray_float_4u_s_fu_562(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copyArray_float_4u_s_fu_562_ap_start),
    .ap_done(grp_copyArray_float_4u_s_fu_562_ap_done),
    .ap_idle(grp_copyArray_float_4u_s_fu_562_ap_idle),
    .ap_ready(grp_copyArray_float_4u_s_fu_562_ap_ready),
    .p_input_address0(grp_copyArray_float_4u_s_fu_562_p_input_address0),
    .p_input_ce0(grp_copyArray_float_4u_s_fu_562_p_input_ce0),
    .p_input_q0(layerBuffer0_q0),
    .p_input_address1(grp_copyArray_float_4u_s_fu_562_p_input_address1),
    .p_input_ce1(grp_copyArray_float_4u_s_fu_562_p_input_ce1),
    .p_input_q1(layerBuffer0_q1),
    .p_output_address0(grp_copyArray_float_4u_s_fu_562_p_output_address0),
    .p_output_ce0(grp_copyArray_float_4u_s_fu_562_p_output_ce0),
    .p_output_we0(grp_copyArray_float_4u_s_fu_562_p_output_we0),
    .p_output_d0(grp_copyArray_float_4u_s_fu_562_p_output_d0),
    .p_output_address1(grp_copyArray_float_4u_s_fu_562_p_output_address1),
    .p_output_ce1(grp_copyArray_float_4u_s_fu_562_p_output_ce1),
    .p_output_we1(grp_copyArray_float_4u_s_fu_562_p_output_we1),
    .p_output_d1(grp_copyArray_float_4u_s_fu_562_p_output_d1),
    .p_output_offset(grp_copyArray_float_4u_s_fu_562_p_output_offset),
    .size(grp_copyArray_float_4u_s_fu_562_size)
);

MLP_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U495(
    .din0(numberLayers_read_reg_1076),
    .din1(numberNeurons_read_reg_1062),
    .dout(grp_fu_570_p2)
);

MLP_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U496(
    .din0(numberNeurons),
    .din1(mul_ln50_fu_594_p1),
    .dout(mul_ln50_fu_594_p2)
);

MLP_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U497(
    .din0(numberNeurons_read_reg_1062),
    .din1(valuesToCopy_fu_609_p1),
    .dout(valuesToCopy_fu_609_p2)
);

MLP_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U498(
    .din0(trunc_ln78_reg_1247),
    .din1(mul_ln86_fu_869_p1),
    .dout(mul_ln86_fu_869_p2)
);

MLP_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U499(
    .din0(numberNeurons_read_reg_1062),
    .din1(sub21_reg_1252),
    .dout(mul_ln97_fu_874_p2)
);

MLP_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U500(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln84_reg_1258),
    .din1(grp_fu_998_p1),
    .ce(1'b1),
    .dout(grp_fu_998_p2)
);

MLP_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U501(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1004_p0),
    .din1(trunc_ln84_reg_1258),
    .ce(1'b1),
    .dout(grp_fu_1004_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state32) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state32)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state37) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((icmp_ln63_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((icmp_ln63_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state61))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((~((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) | (1'b1 == ap_block_state60_io)) & (icmp_ln107_reg_1335 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state61)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state61);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((~((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) | (1'b1 == ap_block_state60_io)) & (icmp_ln107_reg_1335 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state70))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((write_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state70)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state70);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((write_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state58_on_subcall_done) & (1'b1 == ap_CS_fsm_state58))) begin
            ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_done <= 1'b0;
        end else if ((grp_outputLayer_float_4u_2u_s_fu_541_ap_done == 1'b1)) begin
            ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state58_on_subcall_done) & (1'b1 == ap_CS_fsm_state58))) begin
            ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready <= 1'b0;
        end else if ((grp_outputLayer_float_4u_2u_s_fu_541_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_done <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state41_on_subcall_done) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36)))) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_done <= 1'b0;
        end else if ((grp_processLayer_float_4u_2u_1_fu_516_ap_done == 1'b1)) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_ready <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state41_on_subcall_done) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36)))) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_ready <= 1'b0;
        end else if ((grp_processLayer_float_4u_2u_1_fu_516_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_done <= 1'b0;
        end else if ((grp_processLayer_float_4u_2u_s_fu_528_ap_done == 1'b1)) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_ready <= 1'b0;
        end else if ((grp_processLayer_float_4u_2u_s_fu_528_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copyArray_float_4u_1_fu_555_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state44))) begin
            grp_copyArray_float_4u_1_fu_555_ap_start_reg <= 1'b1;
        end else if ((grp_copyArray_float_4u_1_fu_555_ap_ready == 1'b1)) begin
            grp_copyArray_float_4u_1_fu_555_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copyArray_float_4u_s_fu_562_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state42))) begin
            grp_copyArray_float_4u_s_fu_562_ap_start_reg <= 1'b1;
        end else if ((grp_copyArray_float_4u_s_fu_562_ap_ready == 1'b1)) begin
            grp_copyArray_float_4u_s_fu_562_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_outputLayer_float_4u_2u_s_fu_541_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state57) | ((ap_sync_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state58)))) begin
            grp_outputLayer_float_4u_2u_s_fu_541_ap_start_reg <= 1'b1;
        end else if ((grp_outputLayer_float_4u_2u_s_fu_541_ap_ready == 1'b1)) begin
            grp_outputLayer_float_4u_2u_s_fu_541_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_processLayer_float_4u_2u_1_fu_516_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state41) & (ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_ready == 1'b0)) | ((1'b1 == ap_CS_fsm_state36) & (ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_ready == 1'b0)) | ((icmp_ln63_fu_753_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35)))) begin
            grp_processLayer_float_4u_2u_1_fu_516_ap_start_reg <= 1'b1;
        end else if ((grp_processLayer_float_4u_2u_1_fu_516_ap_ready == 1'b1)) begin
            grp_processLayer_float_4u_2u_1_fu_516_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_processLayer_float_4u_2u_s_fu_528_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state49) | ((ap_sync_grp_processLayer_float_4u_2u_s_fu_528_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state50)))) begin
            grp_processLayer_float_4u_2u_s_fu_528_ap_start_reg <= 1'b1;
        end else if ((grp_processLayer_float_4u_2u_s_fu_528_ap_ready == 1'b1)) begin
            grp_processLayer_float_4u_2u_s_fu_528_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln137_reg_1192 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_12_reg_461 <= add_ln137_reg_1196;
    end else if (((icmp_ln63_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        i_12_reg_461 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_copyArray_float_4u_1_fu_555_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state54)) begin
            i_reg_472 <= add_ln86_reg_1268;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            i_reg_472 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        loop_index11_reg_449 <= 32'd0;
    end else if (((exitcond294_reg_1169 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        loop_index11_reg_449 <= empty_155_reg_1173;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        loop_index17_reg_437 <= 32'd0;
    end else if (((exitcond305_reg_1145 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_index17_reg_437 <= empty_152_reg_1149;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        loop_index23_reg_425 <= 32'd0;
    end else if (((exitcond316_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loop_index23_reg_425 <= empty_150_reg_1119;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) | (1'b1 == ap_block_state60_io)) & (icmp_ln107_reg_1335 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
        loop_index5_reg_494 <= 32'd0;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (exitcond272_fu_934_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        loop_index5_reg_494 <= empty_159_fu_939_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((write_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
        loop_index_reg_505 <= 32'd0;
    end else if (((ap_enable_reg_pp5_iter0 == 1'b1) & (exitcond1_fu_978_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        loop_index_reg_505 <= empty_163_fu_983_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_copyArray_float_4u_1_fu_555_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state54)) begin
            phi_mul_reg_483 <= add_ln84_1_reg_1273;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            phi_mul_reg_483 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_reg_1183 == 1'd1) & (1'b0 == ap_block_state58_on_subcall_done) & (1'b1 == ap_CS_fsm_state58))) begin
        add_ln106_reg_1319 <= add_ln106_fu_896_p2;
        trunc_ln106_reg_1324 <= trunc_ln106_fu_900_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        add_ln107_reg_1329 <= add_ln107_fu_904_p2;
        icmp_ln107_reg_1335 <= icmp_ln107_fu_908_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln137_reg_1196 <= add_ln137_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln81_fu_838_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        add_ln84_1_reg_1273 <= add_ln84_1_fu_853_p2;
        mul_ln86_reg_1283 <= mul_ln86_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        add_ln86_reg_1268 <= add_ln86_fu_843_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_reg_1183 == 1'd1) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        add_ln92_reg_1299 <= add_ln92_fu_887_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        axiBiasInput_read_reg_1015 <= axiBiasInput;
        axiLayerOutput_read_reg_1010 <= axiLayerOutput;
        axiWeightInput_read_reg_1020 <= axiWeightInput;
        input_read_reg_1030 <= input_r;
        numberInputs_read_reg_1039 <= numberInputs;
        numberLayers_read_reg_1076 <= numberLayers;
        numberNeurons_read_reg_1062 <= numberNeurons;
        numberOutputs_read_reg_1082 <= numberOutputs;
        output_read_reg_1025 <= output_r;
        trunc_ln45_1_reg_1056 <= trunc_ln45_1_fu_584_p1;
        trunc_ln45_reg_1050 <= trunc_ln45_fu_580_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (exitcond272_reg_1345 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        bramLayerResults_load_reg_1359 <= bramLayerResults_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_150_reg_1119 <= empty_150_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_152_reg_1149 <= empty_152_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        empty_155_reg_1173 <= empty_155_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        exitcond1_reg_1374 <= exitcond1_fu_978_p2;
        exitcond1_reg_1374_pp5_iter1_reg <= exitcond1_reg_1374;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        exitcond272_reg_1345 <= exitcond272_fu_934_p2;
        exitcond272_reg_1345_pp4_iter1_reg <= exitcond272_reg_1345;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond294_reg_1169 <= exitcond294_fu_733_p2;
        exitcond294_reg_1169_pp2_iter1_reg <= exitcond294_reg_1169;
        loop_index11_reg_449_pp2_iter1_reg <= loop_index11_reg_449;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond305_reg_1145 <= exitcond305_fu_689_p2;
        exitcond305_reg_1145_pp1_iter1_reg <= exitcond305_reg_1145;
        loop_index17_reg_437_pp1_iter1_reg <= loop_index17_reg_437;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond316_reg_1115 <= exitcond316_fu_639_p2;
        exitcond316_reg_1115_pp0_iter1_reg <= exitcond316_reg_1115;
        loop_index23_reg_425_pp0_iter1_reg <= loop_index23_reg_425;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op326_writeresp_state68 == 1'b1) & (write_r_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state68))) begin
        icmp_ln110_reg_1364 <= icmp_ln110_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln137_reg_1192 <= icmp_ln137_fu_768_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        icmp_ln63_reg_1183 <= icmp_ln63_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1374 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        layerBuffer0_load_reg_1388 <= layerBuffer0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln45_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln50_reg_1094 <= mul_ln50_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        mul_ln86_1_reg_1294 <= grp_fu_998_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        mul_ln99_1_reg_1304 <= grp_fu_1004_p2;
        mul_ln99_reg_1309 <= grp_fu_570_p2;
        trunc_ln101_reg_1314 <= trunc_ln101_fu_891_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond305_reg_1145 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        read_addr_1_read_reg_1154 <= read_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_664_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        read_addr_1_reg_1139 <= p_cast2_cast_fu_679_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond294_reg_1169 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        read_addr_2_read_reg_1178 <= read_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_709_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        read_addr_2_reg_1163 <= p_cast_cast_fu_723_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond316_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_addr_read_reg_1124 <= read_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_614_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        read_addr_reg_1109 <= p_cast1_cast_fu_629_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_copyArray_float_4u_1_fu_555_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        sub21_reg_1252 <= sub21_fu_830_p2;
        trunc_ln78_reg_1247 <= trunc_ln78_fu_827_p1;
        trunc_ln84_reg_1258 <= trunc_ln84_fu_835_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_768_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_s_reg_1201[8 : 2] <= tmp_s_fu_783_p3[8 : 2];
        zext_ln143_11_reg_1217[8 : 2] <= zext_ln143_11_fu_802_p1[8 : 2];
        zext_ln143_reg_1207[8 : 2] <= zext_ln143_fu_791_p1[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        trunc_ln1_reg_1187 <= {{numberInputs_read_reg_1039[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        valuesToCopy_2_reg_1129 <= valuesToCopy_2_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valuesToCopy_reg_1099 <= valuesToCopy_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op326_writeresp_state68 == 1'b1) & (write_r_BVALID == 1'b0)) & (icmp_ln110_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state68))) begin
        write_addr_1_reg_1368 <= p_cast7_cast_fu_968_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_reg_1192 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        zext_ln143_12_reg_1227[8 : 2] <= zext_ln143_12_fu_812_p1[8 : 2];
        zext_ln143_13_reg_1237[8 : 2] <= zext_ln143_13_fu_822_p1[8 : 2];
    end
end

always @ (*) begin
    if ((exitcond316_fu_639_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond305_fu_689_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond294_fu_733_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln137_fu_768_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state37 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state37 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond272_fu_934_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state61 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state61 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_978_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state70 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state70 = 1'b0;
    end
end

always @ (*) begin
    if ((~((write_r_BVALID == 1'b0) & (icmp_ln110_reg_1364 == 1'd0)) & (1'b1 == ap_CS_fsm_state77))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln137_reg_1192 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_i_12_phi_fu_465_p4 = add_ln137_reg_1196;
    end else begin
        ap_phi_mux_i_12_phi_fu_465_p4 = i_12_reg_461;
    end
end

always @ (*) begin
    if (((exitcond294_reg_1169 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_loop_index11_phi_fu_453_p4 = empty_155_reg_1173;
    end else begin
        ap_phi_mux_loop_index11_phi_fu_453_p4 = loop_index11_reg_449;
    end
end

always @ (*) begin
    if (((exitcond305_reg_1145 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_loop_index17_phi_fu_441_p4 = empty_152_reg_1149;
    end else begin
        ap_phi_mux_loop_index17_phi_fu_441_p4 = loop_index17_reg_437;
    end
end

always @ (*) begin
    if (((exitcond316_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_loop_index23_phi_fu_429_p4 = empty_150_reg_1119;
    end else begin
        ap_phi_mux_loop_index23_phi_fu_429_p4 = loop_index23_reg_425;
    end
end

always @ (*) begin
    if ((~((write_r_BVALID == 1'b0) & (icmp_ln110_reg_1364 == 1'd0)) & (1'b1 == ap_CS_fsm_state77))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        bramBias_address0 = loop_index17_cast_fu_700_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        bramBias_address0 = grp_outputLayer_float_4u_2u_s_fu_541_p_bias_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramBias_address0 = grp_processLayer_float_4u_2u_s_fu_528_p_bias_address0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramBias_address0 = grp_processLayer_float_4u_2u_1_fu_516_p_bias_address0;
    end else begin
        bramBias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bramBias_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        bramBias_ce0 = grp_outputLayer_float_4u_2u_s_fu_541_p_bias_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramBias_ce0 = grp_processLayer_float_4u_2u_s_fu_528_p_bias_ce0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramBias_ce0 = grp_processLayer_float_4u_2u_1_fu_516_p_bias_ce0;
    end else begin
        bramBias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond305_reg_1145_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bramBias_we0 = 1'b1;
    end else begin
        bramBias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        bramLayerResults_address0 = loop_index5_cast_fu_945_p1;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        bramLayerResults_address0 = zext_ln143_13_reg_1237;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        bramLayerResults_address0 = zext_ln143_11_reg_1217;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_address0 = grp_copyArray_float_4u_s_fu_562_p_output_address0;
    end else begin
        bramLayerResults_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        bramLayerResults_address1 = zext_ln143_12_reg_1227;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        bramLayerResults_address1 = zext_ln143_reg_1207;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_address1 = grp_copyArray_float_4u_s_fu_562_p_output_address1;
    end else begin
        bramLayerResults_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        bramLayerResults_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_ce0 = grp_copyArray_float_4u_s_fu_562_p_output_ce0;
    end else begin
        bramLayerResults_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        bramLayerResults_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_ce1 = grp_copyArray_float_4u_s_fu_562_p_output_ce1;
    end else begin
        bramLayerResults_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        bramLayerResults_d0 = inputData_q1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        bramLayerResults_d0 = inputData_q0;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_d0 = grp_copyArray_float_4u_s_fu_562_p_output_d0;
    end else begin
        bramLayerResults_d0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        bramLayerResults_d1 = inputData_q0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        bramLayerResults_d1 = inputData_q1;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_d1 = grp_copyArray_float_4u_s_fu_562_p_output_d1;
    end else begin
        bramLayerResults_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln137_reg_1192 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln137_reg_1192 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        bramLayerResults_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_we0 = grp_copyArray_float_4u_s_fu_562_p_output_we0;
    end else begin
        bramLayerResults_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln137_reg_1192 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln137_reg_1192 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        bramLayerResults_we1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_we1 = grp_copyArray_float_4u_s_fu_562_p_output_we1;
    end else begin
        bramLayerResults_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bramWeight_address0 = loop_index23_cast_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        bramWeight_address0 = grp_outputLayer_float_4u_2u_s_fu_541_p_weights_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramWeight_address0 = grp_processLayer_float_4u_2u_s_fu_528_p_weights_address0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramWeight_address0 = grp_processLayer_float_4u_2u_1_fu_516_p_weights_address0;
    end else begin
        bramWeight_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        bramWeight_address1 = grp_outputLayer_float_4u_2u_s_fu_541_p_weights_address1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramWeight_address1 = grp_processLayer_float_4u_2u_s_fu_528_p_weights_address1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramWeight_address1 = grp_processLayer_float_4u_2u_1_fu_516_p_weights_address1;
    end else begin
        bramWeight_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bramWeight_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        bramWeight_ce0 = grp_outputLayer_float_4u_2u_s_fu_541_p_weights_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramWeight_ce0 = grp_processLayer_float_4u_2u_s_fu_528_p_weights_ce0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramWeight_ce0 = grp_processLayer_float_4u_2u_1_fu_516_p_weights_ce0;
    end else begin
        bramWeight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        bramWeight_ce1 = grp_outputLayer_float_4u_2u_s_fu_541_p_weights_ce1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramWeight_ce1 = grp_processLayer_float_4u_2u_s_fu_528_p_weights_ce1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramWeight_ce1 = grp_processLayer_float_4u_2u_1_fu_516_p_weights_ce1;
    end else begin
        bramWeight_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond316_reg_1115_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bramWeight_we0 = 1'b1;
    end else begin
        bramWeight_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_copyArray_float_4u_s_fu_562_p_output_offset = trunc_ln106_reg_1324;
    end else if (((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        grp_copyArray_float_4u_s_fu_562_p_output_offset = add_ln92_reg_1299;
    end else if (((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        grp_copyArray_float_4u_s_fu_562_p_output_offset = trunc_ln45_reg_1050;
    end else begin
        grp_copyArray_float_4u_s_fu_562_p_output_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_copyArray_float_4u_s_fu_562_size = numberOutputs_read_reg_1082;
    end else if ((((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        grp_copyArray_float_4u_s_fu_562_size = numberNeurons_read_reg_1062;
    end else begin
        grp_copyArray_float_4u_s_fu_562_size = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state58_on_subcall_done) & (1'b1 == ap_CS_fsm_state58))) begin
        grp_outputLayer_float_4u_2u_s_fu_541_ap_continue = 1'b1;
    end else begin
        grp_outputLayer_float_4u_2u_s_fu_541_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state41_on_subcall_done) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36)))) begin
        grp_processLayer_float_4u_2u_1_fu_516_ap_continue = 1'b1;
    end else begin
        grp_processLayer_float_4u_2u_1_fu_516_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        grp_processLayer_float_4u_2u_s_fu_528_ap_continue = 1'b1;
    end else begin
        grp_processLayer_float_4u_2u_s_fu_528_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        inputData_address0 = zext_ln143_12_fu_812_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        inputData_address0 = zext_ln143_11_fu_802_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        inputData_address0 = loop_index11_cast_fu_744_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        inputData_address0 = grp_processLayer_float_4u_2u_1_fu_516_p_input_address0;
    end else begin
        inputData_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        inputData_address1 = zext_ln143_13_fu_822_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        inputData_address1 = zext_ln143_fu_791_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        inputData_address1 = grp_processLayer_float_4u_2u_1_fu_516_p_input_address1;
    end else begin
        inputData_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        inputData_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        inputData_ce0 = grp_processLayer_float_4u_2u_1_fu_516_p_input_ce0;
    end else begin
        inputData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        inputData_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        inputData_ce1 = grp_processLayer_float_4u_2u_1_fu_516_p_input_ce1;
    end else begin
        inputData_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond294_reg_1169_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        inputData_we0 = 1'b1;
    end else begin
        inputData_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        layerBuffer0_address0 = loop_index_cast_fu_989_p1;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        layerBuffer0_address0 = grp_copyArray_float_4u_s_fu_562_p_input_address0;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer0_address0 = grp_copyArray_float_4u_1_fu_555_p_input_address0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        layerBuffer0_address0 = grp_outputLayer_float_4u_2u_s_fu_541_p_output_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer0_address0 = grp_processLayer_float_4u_2u_s_fu_528_p_output_address0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        layerBuffer0_address0 = grp_processLayer_float_4u_2u_1_fu_516_p_output_address0;
    end else begin
        layerBuffer0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        layerBuffer0_address1 = grp_copyArray_float_4u_s_fu_562_p_input_address1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer0_address1 = grp_copyArray_float_4u_1_fu_555_p_input_address1;
    end else begin
        layerBuffer0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        layerBuffer0_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        layerBuffer0_ce0 = grp_copyArray_float_4u_s_fu_562_p_input_ce0;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer0_ce0 = grp_copyArray_float_4u_1_fu_555_p_input_ce0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        layerBuffer0_ce0 = grp_outputLayer_float_4u_2u_s_fu_541_p_output_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer0_ce0 = grp_processLayer_float_4u_2u_s_fu_528_p_output_ce0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        layerBuffer0_ce0 = grp_processLayer_float_4u_2u_1_fu_516_p_output_ce0;
    end else begin
        layerBuffer0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln63_reg_1183 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        layerBuffer0_ce1 = grp_copyArray_float_4u_s_fu_562_p_input_ce1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer0_ce1 = grp_copyArray_float_4u_1_fu_555_p_input_ce1;
    end else begin
        layerBuffer0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        layerBuffer0_d0 = grp_outputLayer_float_4u_2u_s_fu_541_p_output_d0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer0_d0 = grp_processLayer_float_4u_2u_s_fu_528_p_output_d0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        layerBuffer0_d0 = grp_processLayer_float_4u_2u_1_fu_516_p_output_d0;
    end else begin
        layerBuffer0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        layerBuffer0_we0 = grp_outputLayer_float_4u_2u_s_fu_541_p_output_we0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer0_we0 = grp_processLayer_float_4u_2u_s_fu_528_p_output_we0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        layerBuffer0_we0 = grp_processLayer_float_4u_2u_1_fu_516_p_output_we0;
    end else begin
        layerBuffer0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_address0 = grp_copyArray_float_4u_1_fu_555_p_output_address0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        layerBuffer1_address0 = grp_outputLayer_float_4u_2u_s_fu_541_p_input_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer1_address0 = grp_processLayer_float_4u_2u_s_fu_528_p_input_address0;
    end else begin
        layerBuffer1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_address1 = grp_copyArray_float_4u_1_fu_555_p_output_address1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        layerBuffer1_address1 = grp_outputLayer_float_4u_2u_s_fu_541_p_input_address1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer1_address1 = grp_processLayer_float_4u_2u_s_fu_528_p_input_address1;
    end else begin
        layerBuffer1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_ce0 = grp_copyArray_float_4u_1_fu_555_p_output_ce0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        layerBuffer1_ce0 = grp_outputLayer_float_4u_2u_s_fu_541_p_input_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer1_ce0 = grp_processLayer_float_4u_2u_s_fu_528_p_input_ce0;
    end else begin
        layerBuffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_ce1 = grp_copyArray_float_4u_1_fu_555_p_output_ce1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        layerBuffer1_ce1 = grp_outputLayer_float_4u_2u_s_fu_541_p_input_ce1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer1_ce1 = grp_processLayer_float_4u_2u_s_fu_528_p_input_ce1;
    end else begin
        layerBuffer1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_we0 = grp_copyArray_float_4u_1_fu_555_p_output_we0;
    end else begin
        layerBuffer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_we1 = grp_copyArray_float_4u_1_fu_555_p_output_we1;
    end else begin
        layerBuffer1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((read_r_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            read_r_ARADDR = read_addr_2_reg_1163;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            read_r_ARADDR = read_addr_1_reg_1139;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            read_r_ARADDR = read_addr_reg_1109;
        end else begin
            read_r_ARADDR = 'bx;
        end
    end else begin
        read_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((read_r_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            read_r_ARLEN = numberInputs_read_reg_1039;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            read_r_ARLEN = valuesToCopy_2_reg_1129;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            read_r_ARLEN = valuesToCopy_reg_1099;
        end else begin
            read_r_ARLEN = 'bx;
        end
    end else begin
        read_r_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((read_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((read_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((read_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        read_r_ARVALID = 1'b1;
    end else begin
        read_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond305_reg_1145 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond294_reg_1169 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond316_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        read_r_RREADY = 1'b1;
    end else begin
        read_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state3))) begin
        read_r_blk_n_AR = m_axi_read_r_ARREADY;
    end else begin
        read_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond305_reg_1145 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond294_reg_1169 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond316_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        read_r_blk_n_R = m_axi_read_r_RVALID;
    end else begin
        read_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((write_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
        write_r_AWADDR = write_addr_1_reg_1368;
    end else if ((~((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) | (1'b1 == ap_block_state60_io)) & (icmp_ln107_reg_1335 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
        write_r_AWADDR = p_cast6_cast_fu_923_p1;
    end else begin
        write_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((write_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
        write_r_AWLEN = numberOutputs_read_reg_1082;
    end else if ((~((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) | (1'b1 == ap_block_state60_io)) & (icmp_ln107_reg_1335 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
        write_r_AWLEN = add_ln107_reg_1329;
    end else begin
        write_r_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((~((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) | (1'b1 == ap_block_state60_io)) & (icmp_ln107_reg_1335 == 1'd0) & (1'b1 == ap_CS_fsm_state60)) | ((write_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69)))) begin
        write_r_AWVALID = 1'b1;
    end else begin
        write_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op326_writeresp_state68 == 1'b1) & (write_r_BVALID == 1'b0)) & (ap_predicate_op326_writeresp_state68 == 1'b1) & (1'b1 == ap_CS_fsm_state68)) | (~((write_r_BVALID == 1'b0) & (icmp_ln110_reg_1364 == 1'd0)) & (icmp_ln110_reg_1364 == 1'd0) & (1'b1 == ap_CS_fsm_state77)))) begin
        write_r_BREADY = 1'b1;
    end else begin
        write_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_1374_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_01001))) begin
        write_r_WDATA = empty_164_fu_994_p1;
    end else if (((exitcond272_reg_1345_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_01001))) begin
        write_r_WDATA = empty_160_fu_950_p1;
    end else begin
        write_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond1_reg_1374_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001)) | ((exitcond272_reg_1345_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        write_r_WVALID = 1'b1;
    end else begin
        write_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | ((icmp_ln107_reg_1335 == 1'd0) & (1'b1 == ap_CS_fsm_state60)))) begin
        write_r_blk_n_AW = m_axi_write_r_AWREADY;
    end else begin
        write_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln110_reg_1364 == 1'd0) & (1'b1 == ap_CS_fsm_state77)) | ((icmp_ln63_reg_1183 == 1'd1) & (icmp_ln107_reg_1335 == 1'd0) & (1'b1 == ap_CS_fsm_state68)))) begin
        write_r_blk_n_B = m_axi_write_r_BVALID;
    end else begin
        write_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond1_reg_1374_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0)) | ((exitcond272_reg_1345_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0)))) begin
        write_r_blk_n_W = m_axi_write_r_WREADY;
    end else begin
        write_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln45_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((ap_start == 1'b1) & (icmp_ln45_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln53_fu_614_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((read_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond316_fu_639_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond316_fu_639_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln58_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((read_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond305_fu_689_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond305_fu_689_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln61_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((read_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond294_fu_733_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond294_fu_733_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((icmp_ln63_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln137_fu_768_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln137_fu_768_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b0 == ap_block_state41_on_subcall_done) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b0 == ap_block_state43_on_subcall_done) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((grp_copyArray_float_4u_1_fu_555_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln81_fu_838_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((icmp_ln63_reg_1183 == 1'd0) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else if (((icmp_ln63_reg_1183 == 1'd1) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((1'b0 == ap_block_state52_on_subcall_done) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if (((grp_copyArray_float_4u_1_fu_555_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((icmp_ln63_reg_1183 == 1'd0) & (1'b0 == ap_block_state58_on_subcall_done) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else if (((icmp_ln63_reg_1183 == 1'd1) & (1'b0 == ap_block_state58_on_subcall_done) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if ((~((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) | (1'b1 == ap_block_state60_io)) & (icmp_ln107_reg_1335 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((~((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) | (1'b1 == ap_block_state60_io)) & (icmp_ln107_reg_1335 == 1'd1) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (exitcond272_fu_934_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (exitcond272_fu_934_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if ((~((ap_predicate_op326_writeresp_state68 == 1'b1) & (write_r_BVALID == 1'b0)) & (icmp_ln110_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else if ((~((ap_predicate_op326_writeresp_state68 == 1'b1) & (write_r_BVALID == 1'b0)) & (icmp_ln110_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((write_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter0 == 1'b1) & (exitcond1_fu_978_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)) & ~((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter0 == 1'b1) & (exitcond1_fu_978_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)) | ((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if ((~((write_r_BVALID == 1'b0) & (icmp_ln110_reg_1364 == 1'd0)) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_fu_896_p2 = (numberInputs_read_reg_1039 + mul_ln99_reg_1309);

assign add_ln107_fu_904_p2 = (numberOutputs_read_reg_1082 + add_ln106_reg_1319);

assign add_ln137_fu_773_p2 = (ap_phi_mux_i_12_phi_fu_465_p4 + 30'd1);

assign add_ln50_fu_588_p0 = numberLayers;

assign add_ln51_1_fu_600_p2 = (numberInputs_read_reg_1039 + mul_ln50_reg_1094);

assign add_ln84_1_fu_853_p2 = ($signed(trunc_ln84_reg_1258) + $signed(phi_mul_reg_483));

assign add_ln86_fu_843_p2 = (i_reg_472 + 32'd1);

assign add_ln92_fu_887_p2 = (mul_ln86_reg_1283 + trunc_ln45_reg_1050);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((read_r_RVALID == 1'b0) & (exitcond316_reg_1115 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((read_r_RVALID == 1'b0) & (exitcond316_reg_1115 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((read_r_RVALID == 1'b0) & (exitcond305_reg_1145 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((read_r_RVALID == 1'b0) & (exitcond305_reg_1145 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((read_r_RVALID == 1'b0) & (exitcond294_reg_1169 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((read_r_RVALID == 1'b0) & (exitcond294_reg_1169 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state63_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state63_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((1'b1 == ap_block_state72_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((1'b1 == ap_block_state72_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((read_r_RVALID == 1'b0) & (exitcond316_reg_1115 == 1'd0));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter1 = ((read_r_RVALID == 1'b0) & (exitcond305_reg_1145 == 1'd0));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_pp2_stage0_iter1 = ((read_r_RVALID == 1'b0) & (exitcond294_reg_1169 == 1'd0));
end

assign ap_block_state34_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_on_subcall_done = ((ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_ready & ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_done) == 1'b0);
end

assign ap_block_state37_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_on_subcall_done = ((ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_ready & ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state43_on_subcall_done = ((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) & (icmp_ln63_reg_1183 == 1'd1));
end

always @ (*) begin
    ap_block_state50_on_subcall_done = ((ap_sync_grp_processLayer_float_4u_2u_s_fu_528_ap_ready & ap_sync_grp_processLayer_float_4u_2u_s_fu_528_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state52_on_subcall_done = ((grp_copyArray_float_4u_s_fu_562_ap_done == 1'b0) & (icmp_ln63_reg_1183 == 1'd1));
end

always @ (*) begin
    ap_block_state58_on_subcall_done = ((ap_sync_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready & ap_sync_grp_outputLayer_float_4u_2u_s_fu_541_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state60_io = ((write_r_AWREADY == 1'b0) & (icmp_ln107_reg_1335 == 1'd0));
end

assign ap_block_state61_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state63_io = ((write_r_WREADY == 1'b0) & (exitcond272_reg_1345_pp4_iter1_reg == 1'd0));
end

assign ap_block_state63_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state68 = ((ap_predicate_op326_writeresp_state68 == 1'b1) & (write_r_BVALID == 1'b0));
end

assign ap_block_state70_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_io = ((write_r_WREADY == 1'b0) & (exitcond1_reg_1374_pp5_iter1_reg == 1'd0));
end

assign ap_block_state72_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state77 = ((write_r_BVALID == 1'b0) & (icmp_ln110_reg_1364 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

always @ (*) begin
    ap_predicate_op326_writeresp_state68 = ((icmp_ln63_reg_1183 == 1'd1) & (icmp_ln107_reg_1335 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_outputLayer_float_4u_2u_s_fu_541_ap_done = (grp_outputLayer_float_4u_2u_s_fu_541_ap_done | ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_done);

assign ap_sync_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready = (grp_outputLayer_float_4u_2u_s_fu_541_ap_ready | ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_541_ap_ready);

assign ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_done = (grp_processLayer_float_4u_2u_1_fu_516_ap_done | ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_done);

assign ap_sync_grp_processLayer_float_4u_2u_1_fu_516_ap_ready = (grp_processLayer_float_4u_2u_1_fu_516_ap_ready | ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_516_ap_ready);

assign ap_sync_grp_processLayer_float_4u_2u_s_fu_528_ap_done = (grp_processLayer_float_4u_2u_s_fu_528_ap_done | ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_done);

assign ap_sync_grp_processLayer_float_4u_2u_s_fu_528_ap_ready = (grp_processLayer_float_4u_2u_s_fu_528_ap_ready | ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_528_ap_ready);

assign bramBias_d0 = read_addr_1_read_reg_1154;

assign bramWeight_d0 = read_addr_read_reg_1124;

assign empty_150_fu_644_p2 = (ap_phi_mux_loop_index23_phi_fu_429_p4 + 32'd1);

assign empty_152_fu_694_p2 = (ap_phi_mux_loop_index17_phi_fu_441_p4 + 32'd1);

assign empty_155_fu_738_p2 = (ap_phi_mux_loop_index11_phi_fu_453_p4 + 32'd1);

assign empty_157_fu_779_p1 = ap_phi_mux_i_12_phi_fu_465_p4[6:0];

assign empty_159_fu_939_p2 = (loop_index5_reg_494 + 32'd1);

assign empty_160_fu_950_p1 = bramLayerResults_load_reg_1359;

assign empty_163_fu_983_p2 = (loop_index_reg_505 + 32'd1);

assign empty_164_fu_994_p1 = layerBuffer0_load_reg_1388;

assign exitcond1_fu_978_p2 = ((loop_index_reg_505 == numberOutputs_read_reg_1082) ? 1'b1 : 1'b0);

assign exitcond272_fu_934_p2 = ((loop_index5_reg_494 == add_ln107_reg_1329) ? 1'b1 : 1'b0);

assign exitcond294_fu_733_p2 = ((ap_phi_mux_loop_index11_phi_fu_453_p4 == numberInputs_read_reg_1039) ? 1'b1 : 1'b0);

assign exitcond305_fu_689_p2 = ((ap_phi_mux_loop_index17_phi_fu_441_p4 == valuesToCopy_2_reg_1129) ? 1'b1 : 1'b0);

assign exitcond316_fu_639_p2 = ((ap_phi_mux_loop_index23_phi_fu_429_p4 == valuesToCopy_reg_1099) ? 1'b1 : 1'b0);

assign grp_copyArray_float_4u_1_fu_555_ap_start = grp_copyArray_float_4u_1_fu_555_ap_start_reg;

assign grp_copyArray_float_4u_s_fu_562_ap_start = grp_copyArray_float_4u_s_fu_562_ap_start_reg;

assign grp_fu_1004_p0 = (trunc_ln97_fu_878_p1 + trunc_ln45_1_reg_1056);

assign grp_fu_998_p1 = (trunc_ln45_1_reg_1056 + phi_mul_reg_483);

assign grp_outputLayer_float_4u_2u_s_fu_541_ap_start = grp_outputLayer_float_4u_2u_s_fu_541_ap_start_reg;

assign grp_processLayer_float_4u_2u_1_fu_516_ap_start = grp_processLayer_float_4u_2u_1_fu_516_ap_start_reg;

assign grp_processLayer_float_4u_2u_s_fu_528_ap_start = grp_processLayer_float_4u_2u_s_fu_528_ap_start_reg;

assign icmp_ln107_fu_908_p2 = ((add_ln107_fu_904_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_954_p2 = ((numberOutputs_read_reg_1082 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_768_p2 = ((ap_phi_mux_i_12_phi_fu_465_p4 == trunc_ln1_reg_1187) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_574_p2 = ((loadParameters == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_614_p2 = ((valuesToCopy_fu_609_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_664_p2 = ((valuesToCopy_2_fu_659_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_709_p2 = ((numberInputs_read_reg_1039 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_753_p2 = ((exportLayers != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_838_p2 = ((i_reg_472 == sub21_reg_1252) ? 1'b1 : 1'b0);

assign inputData_d0 = read_addr_2_read_reg_1178;

assign loop_index11_cast_fu_744_p1 = loop_index11_reg_449_pp2_iter1_reg;

assign loop_index17_cast_fu_700_p1 = loop_index17_reg_437_pp1_iter1_reg;

assign loop_index23_cast_fu_650_p1 = loop_index23_reg_425_pp0_iter1_reg;

assign loop_index5_cast_fu_945_p1 = loop_index5_reg_494;

assign loop_index_cast_fu_989_p1 = loop_index_reg_505;

assign mul_ln50_fu_594_p1 = ($signed(add_ln50_fu_588_p0) + $signed(32'd4294967295));

assign mul_ln86_fu_869_p1 = (9'd1 + trunc_ln84_1_fu_849_p1);

assign or_ln143_3_fu_807_p2 = (tmp_s_reg_1201 | 9'd2);

assign or_ln143_4_fu_817_p2 = (tmp_s_reg_1201 | 9'd3);

assign or_ln143_fu_796_p2 = (tmp_s_fu_783_p3 | 9'd1);

assign p_cast1_cast_fu_629_p1 = $signed(p_cast1_fu_620_p4);

assign p_cast1_fu_620_p4 = {{axiWeightInput_read_reg_1020[63:2]}};

assign p_cast2_cast_fu_679_p1 = $signed(p_cast2_fu_670_p4);

assign p_cast2_fu_670_p4 = {{axiBiasInput_read_reg_1015[63:2]}};

assign p_cast6_cast_fu_923_p1 = $signed(p_cast6_fu_914_p4);

assign p_cast6_fu_914_p4 = {{axiLayerOutput_read_reg_1010[63:2]}};

assign p_cast7_cast_fu_968_p1 = $signed(p_cast7_fu_959_p4);

assign p_cast7_fu_959_p4 = {{output_read_reg_1025[63:2]}};

assign p_cast_cast_fu_723_p1 = $signed(p_cast_fu_714_p4);

assign p_cast_fu_714_p4 = {{input_read_reg_1030[63:2]}};

assign sub21_fu_830_p2 = ($signed(32'd4294967295) + $signed(numberLayers_read_reg_1076));

assign tmp_s_fu_783_p3 = {{empty_157_fu_779_p1}, {2'd0}};

assign trunc_ln101_fu_891_p1 = grp_fu_570_p2[8:0];

assign trunc_ln106_fu_900_p1 = add_ln106_fu_896_p2[8:0];

assign trunc_ln45_1_fu_584_p1 = numberInputs[15:0];

assign trunc_ln45_fu_580_p1 = numberInputs[8:0];

assign trunc_ln78_fu_827_p1 = numberNeurons_read_reg_1062[8:0];

assign trunc_ln84_1_fu_849_p1 = i_reg_472[8:0];

assign trunc_ln84_fu_835_p1 = numberNeurons_read_reg_1062[15:0];

assign trunc_ln97_fu_878_p1 = mul_ln97_fu_874_p2[15:0];

assign valuesToCopy_2_fu_659_p2 = (numberOutputs_read_reg_1082 + grp_fu_570_p2);

assign valuesToCopy_fu_609_p1 = (add_ln51_1_fu_600_p2 + numberOutputs_read_reg_1082);

assign zext_ln143_11_fu_802_p1 = or_ln143_fu_796_p2;

assign zext_ln143_12_fu_812_p1 = or_ln143_3_fu_807_p2;

assign zext_ln143_13_fu_822_p1 = or_ln143_4_fu_817_p2;

assign zext_ln143_fu_791_p1 = tmp_s_fu_783_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_1201[1:0] <= 2'b00;
    zext_ln143_reg_1207[1:0] <= 2'b00;
    zext_ln143_reg_1207[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln143_11_reg_1217[1:0] <= 2'b01;
    zext_ln143_11_reg_1217[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln143_12_reg_1227[1:0] <= 2'b10;
    zext_ln143_12_reg_1227[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln143_13_reg_1237[1:0] <= 2'b11;
    zext_ln143_13_reg_1237[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //MLP
