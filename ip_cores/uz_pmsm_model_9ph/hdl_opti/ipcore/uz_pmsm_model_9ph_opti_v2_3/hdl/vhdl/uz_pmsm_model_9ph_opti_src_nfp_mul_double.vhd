-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_src_nfp_mul_double.vhd
-- Created: 2022-06-01 13:39:44
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_src_nfp_mul_double
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph/nfp_mul_double
-- Hierarchy Level: 1
-- 
-- {Latency Strategy = "Min", Denormal Handling = "on"}
-- {Mantissa Multiply Strategy = "FullMultiplier"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_src_nfp_mul_double IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_20_0                        :   IN    std_logic;
        nfp_in1                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        nfp_in2                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        nfp_out                           :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
        );
END uz_pmsm_model_9ph_opti_src_nfp_mul_double;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_src_nfp_mul_double IS

  -- Signals
  SIGNAL nfp_in1_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL aMantissa                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay4_PS_1_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL nfp_in2_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bSign                            : std_logic;  -- ufix1
  SIGNAL bExponent                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL bMantissa                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay1_PS_1_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL bExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExpInforNaN_bExpInforNa_out1 : std_logic;  -- ufix1
  SIGNAL Delay5_PS_1_out1                 : std_logic;  -- ufix1
  SIGNAL Delay2_PS_1_out1                 : std_logic;  -- ufix1
  SIGNAL tmp_out1                         : std_logic;  -- ufix1
  SIGNAL Delay_PS_1_out1                  : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL bMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL if_bMantZero_out1                : std_logic;  -- ufix1
  SIGNAL Delay3_PS_1_out1                 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL if_aMantZero_out1                : std_logic;  -- ufix1
  SIGNAL if_aExpInforNaN_1_out1           : std_logic;  -- ufix1
  SIGNAL if_aExpInforNaN_bExpInforNa_2_out1 : std_logic;  -- ufix1
  SIGNAL Delay6_PS_9_reg                  : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL Delay6_PS_9_reg_next             : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL Delay6_PS_9_out1                 : std_logic;  -- ufix1
  SIGNAL Delay11_PS_2_8_reg               : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay11_PS_2_8_reg_next          : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay11_PS_2_8_out1              : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL alphaaExponent_0_aMantZero_out1  : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1_1           : std_logic;  -- ufix1
  SIGNAL alphabExponent_0_bMantZero_out1  : std_logic;  -- ufix1
  SIGNAL alphaaIsZero_bIsZero_out1        : std_logic;  -- ufix1
  SIGNAL Delay10_PS_2_8_reg               : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay10_PS_2_8_reg_next          : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay10_PS_2_8_out1              : std_logic;  -- ufix1
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1                  : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL BitSlice1_out1                   : std_logic;  -- ufix1
  SIGNAL Delay2_PS_2_out1                 : std_logic;  -- ufix1
  SIGNAL y                                : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Bit_Slice2_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice13_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1          : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_1        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_1        : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_1        : std_logic;  -- ufix1
  SIGNAL Bit_Slice8_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_2               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_2               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_2        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_2        : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_2        : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_2               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_3        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_3        : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_3        : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_4               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_4               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_4        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_4        : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_4        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_4               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_5               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_5               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_5               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_5               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_5        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_5        : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice8_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_1                : std_logic;  -- ufix1
  SIGNAL Constant_out1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice1_out1_1                : std_logic;  -- ufix1
  SIGNAL Constant1_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch2_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Constant2_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch1_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant3_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant4_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator2_out1_1         : std_logic;  -- ufix1
  SIGNAL Switch3_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch4_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant5_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant6_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch6_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant7_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant8_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch8_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator12_out1_5        : std_logic;  -- ufix1
  SIGNAL Switch9_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch10_out1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL Switch13_out1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1                      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_2                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_2                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator3_out1_1         : std_logic;  -- ufix1
  SIGNAL Switch2_out1_1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch1_out1_1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_3                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1_3                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_3                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_4                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_4                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch3_out1_1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_5                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch5_out1                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch6_out1_1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay5_PS_2_out1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL bitsll_mant_b_ib_out1            : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL if_bitget_mant_b_mant_b_WordLen_1_out1 : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1_1  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_1                : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL BitSlice1_out1_1                 : std_logic;  -- ufix1
  SIGNAL Delay2_PS_2_out1_1               : std_logic;  -- ufix1
  SIGNAL y_1                              : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Bit_Slice2_out1_2                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Slice13_out1_6               : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_6               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_6               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_6               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_6        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_6        : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_6        : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_8                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1_5               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_5               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_5               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_7               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_7               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_7               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_7               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_7        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_7        : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_7        : std_logic;  -- ufix1
  SIGNAL Bit_Slice8_out1_2                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1_6               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_6               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_6               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_8               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_8               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_8               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_8               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_8        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_8        : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_8        : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1_2                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1_7               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_7               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_7               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_9               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_9               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_9               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_9               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_9        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_9        : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_9        : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_2                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1_8               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_8               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_8               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_10              : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_10              : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_10              : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_10        : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_10              : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_12               : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_10       : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_10       : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_10       : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_2                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice16_out1_9               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_9               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_9               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_11              : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_11              : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_11              : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_11        : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_11              : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_13               : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_11       : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_11       : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_2                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice8_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_3                : std_logic;  -- ufix1
  SIGNAL Constant_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice1_out1_3                : std_logic;  -- ufix1
  SIGNAL Constant1_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch2_out1_2                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL Constant2_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch1_out1_2                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant3_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant4_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator2_out1_3         : std_logic;  -- ufix1
  SIGNAL Switch3_out1_2                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch4_out1_1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant5_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant6_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch6_out1_2                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant7_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant8_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch8_out1_1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator12_out1_11       : std_logic;  -- ufix1
  SIGNAL Switch9_out1_1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch10_out1_1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_6                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL Switch13_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_1                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_7                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1_6                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_8                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_8                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_8                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_8                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_8                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_8                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_8                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_8                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1_7                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1_7                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_8                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Logical_Operator3_out1_3         : std_logic;  -- ufix1
  SIGNAL Switch2_out1_3                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch1_out1_3                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_9                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_9                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_9                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_9                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_9                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_9                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_9                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_9                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1_8                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_8                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1_8                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1_8                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1_8                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1_8                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_9                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_10                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_10               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_10                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_10               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_10               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_10                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_10                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_10               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant14_out1_9                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch18_out1_9                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant15_out1_9                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant16_out1_9                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch20_out1_9                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch21_out1_9                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_10                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch3_out1_3                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant9_out1_11                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant10_out1_11               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch12_out1_11                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant11_out1_11               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant12_out1_11               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch15_out1_11                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch16_out1_11                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant13_out1_11               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch13_out1_11                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch5_out1_1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch6_out1_3                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay5_PS_2_out1_1               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL bitsll_mant_b_ib_out1_1          : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL if_bitget_mant_b_mant_b_WordLen_1_out1_1 : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL z2_out1                          : unsigned(105 DOWNTO 0);  -- ufix106
  SIGNAL Delay2_PS_4_7_reg                : vector_of_unsigned106(0 TO 1);  -- ufix106 [2]
  SIGNAL Delay2_PS_4_7_reg_next           : vector_of_unsigned106(0 TO 1);  -- ufix106 [2]
  SIGNAL Delay2_PS_4_7_out1               : unsigned(105 DOWNTO 0);  -- ufix106
  SIGNAL BitSlice1_out1_2                 : std_logic;  -- ufix1
  SIGNAL alpha1_out1_2                    : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL DTC3_out1                        : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL alpha1_ib_out1                   : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL DTC4_out1                        : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL C_out1                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_Exponent_0_out1               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay4_PS_2_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL DTC5_out1                        : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL if_bitget_mant_b_mant_b_WordLen_out1 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL alpha1_out1_3                    : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL DTC3_out1_1                      : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL alpha1_ib_out1_1                 : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL DTC4_out1_1                      : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL C_out1_1                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_Exponent_0_out1_1             : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay4_PS_2_out1_1               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL DTC5_out1_1                      : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL if_bitget_mant_b_mant_b_WordLen_out1_1 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL exp_a_norm_exp_b_norm_out1       : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Delay1_PS_4_5_out1               : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL C2_out1                          : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL exp_sum_cfType_ExponentBias_out1 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Delay3_PS_6_out1                 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL exp_out_cast_cfType_Exponen_out1 : std_logic;  -- ufix1
  SIGNAL exp_out_cast_cfType_Exponen_1_out1 : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_10        : std_logic;  -- ufix1
  SIGNAL if_bitget_mant_ext_mant_ext_Word_2_out1 : std_logic;  -- ufix1
  SIGNAL exp_out_cfType_MantissaLeng_out1 : std_logic;  -- ufix1
  SIGNAL exp_out_cfType_MantissaLeng_1_out1 : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_12        : std_logic;  -- ufix1
  SIGNAL if_bitget_mant_ext_mant_ext_Word_4_out1 : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1                   : std_logic;  -- ufix1
  SIGNAL exp_out_0_out1                   : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_4         : std_logic;  -- ufix1
  SIGNAL if_bitget_mant_ext_mant_ext_Word_3_out1 : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_4                : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL Bit_Slice_out1                   : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL if_bitget_mant_ext_mant_ext_Word_1_out1 : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL const_1_out1                     : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL alphaExp_Incr_1_out1             : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL DTC1_out1                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Unary_Minus_in0                  : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Unary_Minus_out1                 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL DTC4_out1_2                      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL if_bitget_mant_ext_mant_ext_Word_6_out1 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL bitsrl_mant_ext_shift_length_out1 : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL Logical_Operator_out1_4          : std_logic;  -- ufix1
  SIGNAL if_exp_out_cast_cfType_Expone_2_out1 : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL BitSlice_out1                    : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL alpha0_out1_2                    : std_logic;  -- ufix1
  SIGNAL C5_out1                          : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL if_exp_out_cast_cfType_Expone_1_out1 : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Bit_Concat_out1_2                : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL BitSlice_out1_1                  : std_logic;  -- ufix1
  SIGNAL BitSlice1_out1_3                 : std_logic;  -- ufix1
  SIGNAL Delay3_PS_8_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_4                : unsigned(50 DOWNTO 0);  -- ufix51
  SIGNAL Compare_To_Zero_out1_2           : std_logic;  -- ufix1
  SIGNAL BitSlice52ndBitS                 : std_logic;  -- ufix1
  SIGNAL LogicalOperatorAndOutS           : std_logic;  -- ufix1
  SIGNAL LogicalOperatorOrOutS            : std_logic;  -- ufix1
  SIGNAL Bit_Slice33_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Slice33_out1_is_not0         : std_logic;
  SIGNAL Bit_Slice33_out1_is_not0_1       : std_logic;
  SIGNAL Logical_Operator11_out1          : std_logic;  -- ufix1
  SIGNAL const_53_out1                    : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Exp_Incr_53_out1                 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL DTC2_out1                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL const_52_out1                    : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Exp_Incr_52_out1                 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL DTC3_out1_2                      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL if_bitget_mant_ext_mant_ext_Word_5_out1 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Slice1_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_5                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice32_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce12_out1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice30_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce11_out1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice24_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce10_out1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice28_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce9_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice22_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce8_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice20_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce7_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice16_out1_10              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce6_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_10              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce5_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice18_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce4_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_12              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce3_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_12              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce2_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice8_out1_4                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce1_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_4                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator8_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator9_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator10_out1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1_12       : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_14        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_12       : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_12        : std_logic;  -- ufix1
  SIGNAL Bit_Slice31_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_15        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_14        : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_4                : std_logic;  -- ufix1
  SIGNAL Bit_Slice25_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_17        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_14        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_15        : std_logic;  -- ufix1
  SIGNAL Bit_Slice29_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_18        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_14        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_15        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice23_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_11        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_19        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_15        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_17        : std_logic;  -- ufix1
  SIGNAL Bit_Slice21_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_12        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_20        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_21        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_17        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_19        : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_11        : std_logic;  -- ufix1
  SIGNAL Bit_Slice17_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_14        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_12               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_22        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_17        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_14        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_19        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_20        : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_10              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_12               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_15        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_13               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_23        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_15        : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_20        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_21        : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_14        : std_logic;  -- ufix1
  SIGNAL Bit_Slice19_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_13               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_17        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_14               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_15        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_24        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_19        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_21        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_22        : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_12              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_14               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_18        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_15               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_25        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_20        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_17        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_26        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_22        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_23        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_23        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_24        : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_12              : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_15               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_19        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_16               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_17        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_27        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_21        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_19        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_24        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_25        : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_14               : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_16               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_20        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_17               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_28        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_22        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_20        : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_21        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_25        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_26        : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_19        : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1_4                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_17               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_22        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_18               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_20        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_29        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_23        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_21        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_26        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_27        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_14                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_18               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_23        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_19               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_21        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_24        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_22        : std_logic;  -- ufix1
  SIGNAL Bit_Slice27_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_30        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_23        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_31        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_24        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_32        : std_logic;  -- ufix1
  SIGNAL Constant_out1_2                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_27        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_28        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_28        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_29        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_29        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_30        : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_24        : std_logic;  -- ufix1
  SIGNAL if_exp_out_cast_cfType_Expone_3_out1 : std_logic;  -- ufix1
  SIGNAL Delay2_PS_8_out1                 : std_logic;  -- ufix1
  SIGNAL Delay2_PS_8_out1_1               : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL BitSlice4_out1                   : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Delay1_PS_8_out1                 : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL const_2_out1                     : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Mant_tmp_Incr_out1               : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL BitSlice2_out1                   : std_logic;  -- ufix1
  SIGNAL const_1_out1_1                   : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Exp_Incr_1_out1                  : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Logical_Operator1_out1_22        : std_logic;  -- ufix1
  SIGNAL if_exp_out_cfType_MantissaLen_1_out1 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL BitSlice2_out1_1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C2_out1_1                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_exp_out_cfType_MantissaLen_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C4_out1                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_exp_out_cast_cfType_Expone_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay_PS_8_out1                  : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL const_1_out1_2                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Exp_Incr_out1                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C_out1_2                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_aIsZero_bIsZero_out1          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C2_out1_2                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_aExpInforNaN_bExpInforNa_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay7_PS_9_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Logical_Operator_out1_5          : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1_1                 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C1_out1                          : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aIsZero_bIsZero_1_out1        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C1_out1_1                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aIsZero_out1                  : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C_out1_3                         : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_bIsZero_out1                  : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aExpInforNaN_out1             : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay9_PS_2_8_reg                : vector_of_unsigned52(0 TO 3);  -- ufix52 [4]
  SIGNAL Delay9_PS_2_8_reg_next           : vector_of_unsigned52(0 TO 3);  -- ufix52 [4]
  SIGNAL Delay9_PS_2_8_out1               : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aExpInforNaN_bExpInforNa_1_out1 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay8_PS_9_out1                 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL nfp_out_pack                     : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 64 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in1_unsigned(63);
  aExponent <= nfp_in1_unsigned(62 DOWNTO 52);
  aMantissa <= nfp_in1_unsigned(51 DOWNTO 0);

  Delay4_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_PS_1_out1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_20_0 = '1' THEN
        Delay4_PS_1_out1 <= aExponent;
      END IF;
    END IF;
  END PROCESS Delay4_PS_1_process;


  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay4_PS_1_out1 = to_unsigned(16#7FF#, 11) ELSE
      '0';

  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 64 bit word into FP sign, exponent, mantissa
  bSign <= nfp_in2_unsigned(63);
  bExponent <= nfp_in2_unsigned(62 DOWNTO 52);
  bMantissa <= nfp_in2_unsigned(51 DOWNTO 0);

  Delay1_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_PS_1_out1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_PS_1_out1 <= bExponent;
      END IF;
    END IF;
  END PROCESS Delay1_PS_1_process;


  
  bExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay1_PS_1_out1 = to_unsigned(16#7FF#, 11) ELSE
      '0';

  alphaaExpInforNaN_bExpInforNa_out1 <= aExponent_cfType_Exponent_I_out1 OR bExponent_cfType_Exponent_I_out1;

  Delay5_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_PS_1_out1 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay5_PS_1_out1 <= aSign;
      END IF;
    END IF;
  END PROCESS Delay5_PS_1_process;


  Delay2_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_PS_1_out1 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay2_PS_1_out1 <= bSign;
      END IF;
    END IF;
  END PROCESS Delay2_PS_1_process;


  tmp_out1 <= Delay5_PS_1_out1 XOR Delay2_PS_1_out1;

  Delay_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_PS_1_out1 <= to_unsigned(0, 52);
      ELSIF enb_1_20_0 = '1' THEN
        Delay_PS_1_out1 <= bMantissa;
      END IF;
    END IF;
  END PROCESS Delay_PS_1_process;


  
  bMantissa_0_out1 <= '1' WHEN Delay_PS_1_out1 = to_unsigned(0, 52) ELSE
      '0';

  
  if_bMantZero_out1 <= Delay2_PS_1_out1 WHEN bMantissa_0_out1 = '0' ELSE
      tmp_out1;

  Delay3_PS_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_PS_1_out1 <= to_unsigned(0, 52);
      ELSIF enb_1_20_0 = '1' THEN
        Delay3_PS_1_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS Delay3_PS_1_process;


  
  aMantissa_0_out1 <= '1' WHEN Delay3_PS_1_out1 = to_unsigned(0, 52) ELSE
      '0';

  
  if_aMantZero_out1 <= Delay5_PS_1_out1 WHEN aMantissa_0_out1 = '0' ELSE
      tmp_out1;

  
  if_aExpInforNaN_1_out1 <= if_bMantZero_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      if_aMantZero_out1;

  
  if_aExpInforNaN_bExpInforNa_2_out1 <= tmp_out1 WHEN alphaaExpInforNaN_bExpInforNa_out1 = '0' ELSE
      if_aExpInforNaN_1_out1;

  Delay6_PS_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_PS_9_reg(0) <= '0';
        Delay6_PS_9_reg(1) <= '0';
        Delay6_PS_9_reg(2) <= '0';
        Delay6_PS_9_reg(3) <= '0';
        Delay6_PS_9_reg(4) <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay6_PS_9_reg(0) <= Delay6_PS_9_reg_next(0);
        Delay6_PS_9_reg(1) <= Delay6_PS_9_reg_next(1);
        Delay6_PS_9_reg(2) <= Delay6_PS_9_reg_next(2);
        Delay6_PS_9_reg(3) <= Delay6_PS_9_reg_next(3);
        Delay6_PS_9_reg(4) <= Delay6_PS_9_reg_next(4);
      END IF;
    END IF;
  END PROCESS Delay6_PS_9_process;

  Delay6_PS_9_out1 <= Delay6_PS_9_reg(4);
  Delay6_PS_9_reg_next(0) <= if_aExpInforNaN_bExpInforNa_2_out1;
  Delay6_PS_9_reg_next(1) <= Delay6_PS_9_reg(0);
  Delay6_PS_9_reg_next(2) <= Delay6_PS_9_reg(1);
  Delay6_PS_9_reg_next(3) <= Delay6_PS_9_reg(2);
  Delay6_PS_9_reg_next(4) <= Delay6_PS_9_reg(3);

  Delay11_PS_2_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_PS_2_8_reg(0) <= '0';
        Delay11_PS_2_8_reg(1) <= '0';
        Delay11_PS_2_8_reg(2) <= '0';
        Delay11_PS_2_8_reg(3) <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay11_PS_2_8_reg(0) <= Delay11_PS_2_8_reg_next(0);
        Delay11_PS_2_8_reg(1) <= Delay11_PS_2_8_reg_next(1);
        Delay11_PS_2_8_reg(2) <= Delay11_PS_2_8_reg_next(2);
        Delay11_PS_2_8_reg(3) <= Delay11_PS_2_8_reg_next(3);
      END IF;
    END IF;
  END PROCESS Delay11_PS_2_8_process;

  Delay11_PS_2_8_out1 <= Delay11_PS_2_8_reg(3);
  Delay11_PS_2_8_reg_next(0) <= alphaaExpInforNaN_bExpInforNa_out1;
  Delay11_PS_2_8_reg_next(1) <= Delay11_PS_2_8_reg(0);
  Delay11_PS_2_8_reg_next(2) <= Delay11_PS_2_8_reg(1);
  Delay11_PS_2_8_reg_next(3) <= Delay11_PS_2_8_reg(2);

  
  Compare_To_Zero_out1 <= '1' WHEN Delay4_PS_1_out1 = to_unsigned(16#000#, 11) ELSE
      '0';

  alphaaExponent_0_aMantZero_out1 <= Compare_To_Zero_out1 AND aMantissa_0_out1;

  
  Compare_To_Zero_out1_1 <= '1' WHEN Delay1_PS_1_out1 = to_unsigned(16#000#, 11) ELSE
      '0';

  alphabExponent_0_bMantZero_out1 <= Compare_To_Zero_out1_1 AND bMantissa_0_out1;

  alphaaIsZero_bIsZero_out1 <= alphaaExponent_0_aMantZero_out1 OR alphabExponent_0_bMantZero_out1;

  Delay10_PS_2_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_PS_2_8_reg(0) <= '0';
        Delay10_PS_2_8_reg(1) <= '0';
        Delay10_PS_2_8_reg(2) <= '0';
        Delay10_PS_2_8_reg(3) <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay10_PS_2_8_reg(0) <= Delay10_PS_2_8_reg_next(0);
        Delay10_PS_2_8_reg(1) <= Delay10_PS_2_8_reg_next(1);
        Delay10_PS_2_8_reg(2) <= Delay10_PS_2_8_reg_next(2);
        Delay10_PS_2_8_reg(3) <= Delay10_PS_2_8_reg_next(3);
      END IF;
    END IF;
  END PROCESS Delay10_PS_2_8_process;

  Delay10_PS_2_8_out1 <= Delay10_PS_2_8_reg(3);
  Delay10_PS_2_8_reg_next(0) <= alphaaIsZero_bIsZero_out1;
  Delay10_PS_2_8_reg_next(1) <= Delay10_PS_2_8_reg(0);
  Delay10_PS_2_8_reg_next(2) <= Delay10_PS_2_8_reg(1);
  Delay10_PS_2_8_reg_next(3) <= Delay10_PS_2_8_reg(2);

  alpha1_out1 <= '1';

  alpha0_out1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1 <= alpha1_out1 WHEN Compare_To_Zero_out1 = '0' ELSE
      alpha0_out1;

  Bit_Concat_out1 <= if_Exponent_0_cfType_Exp_out1 & Delay3_PS_1_out1;

  BitSlice1_out1 <= Bit_Concat_out1(52);

  Delay2_PS_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_PS_2_out1 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay2_PS_2_out1 <= BitSlice1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_2_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        y <= to_unsigned(0, 53);
      ELSIF enb_1_20_0 = '1' THEN
        y <= Bit_Concat_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Bit_Slice2_out1 <= Bit_Concat_out1(52 DOWNTO 48);

  Bit_Slice13_out1 <= Bit_Slice2_out1(4);

  Bit_Slice12_out1 <= Bit_Slice2_out1(3);

  Bit_Slice11_out1 <= Bit_Slice2_out1(2);

  Logical_Operator4_out1 <= Bit_Slice12_out1 OR Bit_Slice11_out1;

  Bit_Slice10_out1 <= Bit_Slice2_out1(1);

  Bit_Slice9_out1 <= Bit_Slice2_out1(0);

  Logical_Operator14_out1 <= Bit_Slice10_out1 OR Bit_Slice9_out1;

  Logical_Operator13_out1 <= Logical_Operator4_out1 OR Logical_Operator14_out1;

  Logical_Operator12_out1 <= Bit_Slice13_out1 OR Logical_Operator13_out1;

  Bit_Slice9_out1_1 <= Bit_Concat_out1(47 DOWNTO 40);

  Bit_Slice16_out1 <= Bit_Slice9_out1_1(7);

  Bit_Slice15_out1 <= Bit_Slice9_out1_1(6);

  Logical_Operator5_out1 <= Bit_Slice16_out1 OR Bit_Slice15_out1;

  Bit_Slice14_out1 <= Bit_Slice9_out1_1(5);

  Bit_Slice13_out1_1 <= Bit_Slice9_out1_1(4);

  Logical_Operator7_out1 <= Bit_Slice14_out1 OR Bit_Slice13_out1_1;

  Logical_Operator6_out1 <= Logical_Operator5_out1 OR Logical_Operator7_out1;

  Bit_Slice12_out1_1 <= Bit_Slice9_out1_1(3);

  Bit_Slice11_out1_1 <= Bit_Slice9_out1_1(2);

  Logical_Operator4_out1_1 <= Bit_Slice12_out1_1 OR Bit_Slice11_out1_1;

  Bit_Slice10_out1_1 <= Bit_Slice9_out1_1(1);

  Bit_Slice9_out1_2 <= Bit_Slice9_out1_1(0);

  Logical_Operator14_out1_1 <= Bit_Slice10_out1_1 OR Bit_Slice9_out1_2;

  Logical_Operator13_out1_1 <= Logical_Operator4_out1_1 OR Logical_Operator14_out1_1;

  Logical_Operator12_out1_1 <= Logical_Operator6_out1 OR Logical_Operator13_out1_1;

  Bit_Slice8_out1 <= Bit_Concat_out1(39 DOWNTO 32);

  Bit_Slice16_out1_1 <= Bit_Slice8_out1(7);

  Bit_Slice15_out1_1 <= Bit_Slice8_out1(6);

  Logical_Operator5_out1_1 <= Bit_Slice16_out1_1 OR Bit_Slice15_out1_1;

  Bit_Slice14_out1_1 <= Bit_Slice8_out1(5);

  Bit_Slice13_out1_2 <= Bit_Slice8_out1(4);

  Logical_Operator7_out1_1 <= Bit_Slice14_out1_1 OR Bit_Slice13_out1_2;

  Logical_Operator6_out1_1 <= Logical_Operator5_out1_1 OR Logical_Operator7_out1_1;

  Bit_Slice12_out1_2 <= Bit_Slice8_out1(3);

  Bit_Slice11_out1_2 <= Bit_Slice8_out1(2);

  Logical_Operator4_out1_2 <= Bit_Slice12_out1_2 OR Bit_Slice11_out1_2;

  Bit_Slice10_out1_2 <= Bit_Slice8_out1(1);

  Bit_Slice9_out1_3 <= Bit_Slice8_out1(0);

  Logical_Operator14_out1_2 <= Bit_Slice10_out1_2 OR Bit_Slice9_out1_3;

  Logical_Operator13_out1_2 <= Logical_Operator4_out1_2 OR Logical_Operator14_out1_2;

  Logical_Operator12_out1_2 <= Logical_Operator6_out1_1 OR Logical_Operator13_out1_2;

  Logical_Operator2_out1 <= Logical_Operator12_out1_1 OR Logical_Operator12_out1_2;

  Bit_Slice7_out1 <= Bit_Concat_out1(31 DOWNTO 24);

  Bit_Slice16_out1_2 <= Bit_Slice7_out1(7);

  Bit_Slice15_out1_2 <= Bit_Slice7_out1(6);

  Logical_Operator5_out1_2 <= Bit_Slice16_out1_2 OR Bit_Slice15_out1_2;

  Bit_Slice14_out1_2 <= Bit_Slice7_out1(5);

  Bit_Slice13_out1_3 <= Bit_Slice7_out1(4);

  Logical_Operator7_out1_2 <= Bit_Slice14_out1_2 OR Bit_Slice13_out1_3;

  Logical_Operator6_out1_2 <= Logical_Operator5_out1_2 OR Logical_Operator7_out1_2;

  Bit_Slice12_out1_3 <= Bit_Slice7_out1(3);

  Bit_Slice11_out1_3 <= Bit_Slice7_out1(2);

  Logical_Operator4_out1_3 <= Bit_Slice12_out1_3 OR Bit_Slice11_out1_3;

  Bit_Slice10_out1_3 <= Bit_Slice7_out1(1);

  Bit_Slice9_out1_4 <= Bit_Slice7_out1(0);

  Logical_Operator14_out1_3 <= Bit_Slice10_out1_3 OR Bit_Slice9_out1_4;

  Logical_Operator13_out1_3 <= Logical_Operator4_out1_3 OR Logical_Operator14_out1_3;

  Logical_Operator12_out1_3 <= Logical_Operator6_out1_2 OR Logical_Operator13_out1_3;

  Bit_Slice6_out1 <= Bit_Concat_out1(23 DOWNTO 16);

  Bit_Slice16_out1_3 <= Bit_Slice6_out1(7);

  Bit_Slice15_out1_3 <= Bit_Slice6_out1(6);

  Logical_Operator5_out1_3 <= Bit_Slice16_out1_3 OR Bit_Slice15_out1_3;

  Bit_Slice14_out1_3 <= Bit_Slice6_out1(5);

  Bit_Slice13_out1_4 <= Bit_Slice6_out1(4);

  Logical_Operator7_out1_3 <= Bit_Slice14_out1_3 OR Bit_Slice13_out1_4;

  Logical_Operator6_out1_3 <= Logical_Operator5_out1_3 OR Logical_Operator7_out1_3;

  Bit_Slice12_out1_4 <= Bit_Slice6_out1(3);

  Bit_Slice11_out1_4 <= Bit_Slice6_out1(2);

  Logical_Operator4_out1_4 <= Bit_Slice12_out1_4 OR Bit_Slice11_out1_4;

  Bit_Slice10_out1_4 <= Bit_Slice6_out1(1);

  Bit_Slice9_out1_5 <= Bit_Slice6_out1(0);

  Logical_Operator14_out1_4 <= Bit_Slice10_out1_4 OR Bit_Slice9_out1_5;

  Logical_Operator13_out1_4 <= Logical_Operator4_out1_4 OR Logical_Operator14_out1_4;

  Logical_Operator12_out1_4 <= Logical_Operator6_out1_3 OR Logical_Operator13_out1_4;

  Bit_Slice1_out1 <= Bit_Concat_out1(15 DOWNTO 8);

  Bit_Slice16_out1_4 <= Bit_Slice1_out1(7);

  Bit_Slice15_out1_4 <= Bit_Slice1_out1(6);

  Logical_Operator5_out1_4 <= Bit_Slice16_out1_4 OR Bit_Slice15_out1_4;

  Bit_Slice14_out1_4 <= Bit_Slice1_out1(5);

  Bit_Slice13_out1_5 <= Bit_Slice1_out1(4);

  Logical_Operator7_out1_4 <= Bit_Slice14_out1_4 OR Bit_Slice13_out1_5;

  Logical_Operator6_out1_4 <= Logical_Operator5_out1_4 OR Logical_Operator7_out1_4;

  Bit_Slice12_out1_5 <= Bit_Slice1_out1(3);

  Bit_Slice11_out1_5 <= Bit_Slice1_out1(2);

  Logical_Operator4_out1_5 <= Bit_Slice12_out1_5 OR Bit_Slice11_out1_5;

  Bit_Slice10_out1_5 <= Bit_Slice1_out1(1);

  Bit_Slice9_out1_6 <= Bit_Slice1_out1(0);

  Logical_Operator14_out1_5 <= Bit_Slice10_out1_5 OR Bit_Slice9_out1_6;

  Logical_Operator13_out1_5 <= Logical_Operator4_out1_5 OR Logical_Operator14_out1_5;

  Bit_Slice4_out1 <= Bit_Concat_out1(7 DOWNTO 0);

  Bit_Slice8_out1_1 <= Bit_Slice4_out1(7);

  Bit_Slice7_out1_1 <= Bit_Slice4_out1(6);

  Logical_Operator1_out1 <= Bit_Slice8_out1_1 OR Bit_Slice7_out1_1;

  Bit_Slice6_out1_1 <= Bit_Slice4_out1(5);

  Bit_Slice5_out1 <= Bit_Slice4_out1(4);

  Logical_Operator3_out1 <= Bit_Slice6_out1_1 OR Bit_Slice5_out1;

  Bit_Slice3_out1 <= Bit_Slice4_out1(3);

  Bit_Slice2_out1_1 <= Bit_Slice4_out1(2);

  Bit_Slice4_out1_1 <= Bit_Slice4_out1(0);

  Constant_out1 <= to_unsigned(16#35#, 6);

  Bit_Slice1_out1_1 <= Bit_Slice4_out1(1);

  Constant1_out1 <= to_unsigned(16#34#, 6);

  
  Switch2_out1 <= Constant_out1 WHEN Bit_Slice4_out1_1 = '0' ELSE
      Constant1_out1;

  Logical_Operator_out1 <= Bit_Slice3_out1 OR Bit_Slice2_out1_1;

  Constant2_out1 <= to_unsigned(16#33#, 6);

  
  Switch1_out1 <= Switch2_out1 WHEN Bit_Slice1_out1_1 = '0' ELSE
      Constant2_out1;

  Constant3_out1 <= to_unsigned(16#32#, 6);

  Constant4_out1 <= to_unsigned(16#31#, 6);

  Logical_Operator2_out1_1 <= Logical_Operator1_out1 OR Logical_Operator3_out1;

  
  Switch3_out1 <= Constant3_out1 WHEN Bit_Slice3_out1 = '0' ELSE
      Constant4_out1;

  
  Switch4_out1 <= Switch1_out1 WHEN Logical_Operator_out1 = '0' ELSE
      Switch3_out1;

  Constant5_out1 <= to_unsigned(16#30#, 6);

  Constant6_out1 <= to_unsigned(16#2F#, 6);

  
  Switch6_out1 <= Constant5_out1 WHEN Bit_Slice6_out1_1 = '0' ELSE
      Constant6_out1;

  Constant7_out1 <= to_unsigned(16#2E#, 6);

  Constant8_out1 <= to_unsigned(16#2D#, 6);

  
  Switch8_out1 <= Constant7_out1 WHEN Bit_Slice8_out1_1 = '0' ELSE
      Constant8_out1;

  Logical_Operator12_out1_5 <= Logical_Operator6_out1_4 OR Logical_Operator13_out1_5;

  
  Switch9_out1 <= Switch6_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      Switch8_out1;

  
  Switch10_out1 <= Switch4_out1 WHEN Logical_Operator2_out1_1 = '0' ELSE
      Switch9_out1;

  Constant9_out1 <= to_unsigned(16#2C#, 6);

  Constant10_out1 <= to_unsigned(16#2B#, 6);

  
  Switch12_out1 <= Constant9_out1 WHEN Bit_Slice10_out1_5 = '0' ELSE
      Constant10_out1;

  Constant11_out1 <= to_unsigned(16#2A#, 6);

  Constant12_out1 <= to_unsigned(16#29#, 6);

  
  Switch15_out1 <= Constant11_out1 WHEN Bit_Slice12_out1_5 = '0' ELSE
      Constant12_out1;

  
  Switch16_out1 <= Switch12_out1 WHEN Logical_Operator4_out1_5 = '0' ELSE
      Switch15_out1;

  Constant13_out1 <= to_unsigned(16#28#, 6);

  Constant14_out1 <= to_unsigned(16#27#, 6);

  
  Switch18_out1 <= Constant13_out1 WHEN Bit_Slice14_out1_4 = '0' ELSE
      Constant14_out1;

  Constant15_out1 <= to_unsigned(16#26#, 6);

  Constant16_out1 <= to_unsigned(16#25#, 6);

  
  Switch20_out1 <= Constant15_out1 WHEN Bit_Slice16_out1_4 = '0' ELSE
      Constant16_out1;

  
  Switch21_out1 <= Switch18_out1 WHEN Logical_Operator5_out1_4 = '0' ELSE
      Switch20_out1;

  Logical_Operator_out1_1 <= Logical_Operator12_out1_3 OR Logical_Operator12_out1_4;

  
  Switch13_out1 <= Switch16_out1 WHEN Logical_Operator6_out1_4 = '0' ELSE
      Switch21_out1;

  
  Switch_out1 <= Switch10_out1 WHEN Logical_Operator12_out1_5 = '0' ELSE
      Switch13_out1;

  Constant9_out1_1 <= to_unsigned(16#24#, 6);

  Constant10_out1_1 <= to_unsigned(16#23#, 6);

  
  Switch12_out1_1 <= Constant9_out1_1 WHEN Bit_Slice10_out1_4 = '0' ELSE
      Constant10_out1_1;

  Constant11_out1_1 <= to_unsigned(16#22#, 6);

  Constant12_out1_1 <= to_unsigned(16#21#, 6);

  
  Switch15_out1_1 <= Constant11_out1_1 WHEN Bit_Slice12_out1_4 = '0' ELSE
      Constant12_out1_1;

  
  Switch16_out1_1 <= Switch12_out1_1 WHEN Logical_Operator4_out1_4 = '0' ELSE
      Switch15_out1_1;

  Constant13_out1_1 <= to_unsigned(16#20#, 6);

  Constant14_out1_1 <= to_unsigned(16#1F#, 6);

  
  Switch18_out1_1 <= Constant13_out1_1 WHEN Bit_Slice14_out1_3 = '0' ELSE
      Constant14_out1_1;

  Constant15_out1_1 <= to_unsigned(16#1E#, 6);

  Constant16_out1_1 <= to_unsigned(16#1D#, 6);

  
  Switch20_out1_1 <= Constant15_out1_1 WHEN Bit_Slice16_out1_3 = '0' ELSE
      Constant16_out1_1;

  
  Switch21_out1_1 <= Switch18_out1_1 WHEN Logical_Operator5_out1_3 = '0' ELSE
      Switch20_out1_1;

  
  Switch13_out1_1 <= Switch16_out1_1 WHEN Logical_Operator6_out1_3 = '0' ELSE
      Switch21_out1_1;

  Constant9_out1_2 <= to_unsigned(16#1C#, 6);

  Constant10_out1_2 <= to_unsigned(16#1B#, 6);

  
  Switch12_out1_2 <= Constant9_out1_2 WHEN Bit_Slice10_out1_3 = '0' ELSE
      Constant10_out1_2;

  Constant11_out1_2 <= to_unsigned(16#1A#, 6);

  Constant12_out1_2 <= to_unsigned(16#19#, 6);

  
  Switch15_out1_2 <= Constant11_out1_2 WHEN Bit_Slice12_out1_3 = '0' ELSE
      Constant12_out1_2;

  
  Switch16_out1_2 <= Switch12_out1_2 WHEN Logical_Operator4_out1_3 = '0' ELSE
      Switch15_out1_2;

  Constant13_out1_2 <= to_unsigned(16#18#, 6);

  Constant14_out1_2 <= to_unsigned(16#17#, 6);

  
  Switch18_out1_2 <= Constant13_out1_2 WHEN Bit_Slice14_out1_2 = '0' ELSE
      Constant14_out1_2;

  Constant15_out1_2 <= to_unsigned(16#16#, 6);

  Constant16_out1_2 <= to_unsigned(16#15#, 6);

  
  Switch20_out1_2 <= Constant15_out1_2 WHEN Bit_Slice16_out1_2 = '0' ELSE
      Constant16_out1_2;

  
  Switch21_out1_2 <= Switch18_out1_2 WHEN Logical_Operator5_out1_2 = '0' ELSE
      Switch20_out1_2;

  
  Switch13_out1_2 <= Switch16_out1_2 WHEN Logical_Operator6_out1_2 = '0' ELSE
      Switch21_out1_2;

  Logical_Operator3_out1_1 <= Logical_Operator12_out1 OR Logical_Operator2_out1;

  
  Switch2_out1_1 <= Switch13_out1_1 WHEN Logical_Operator12_out1_3 = '0' ELSE
      Switch13_out1_2;

  
  Switch1_out1_1 <= Switch_out1 WHEN Logical_Operator_out1_1 = '0' ELSE
      Switch2_out1_1;

  Constant9_out1_3 <= to_unsigned(16#14#, 6);

  Constant10_out1_3 <= to_unsigned(16#13#, 6);

  
  Switch12_out1_3 <= Constant9_out1_3 WHEN Bit_Slice10_out1_2 = '0' ELSE
      Constant10_out1_3;

  Constant11_out1_3 <= to_unsigned(16#12#, 6);

  Constant12_out1_3 <= to_unsigned(16#11#, 6);

  
  Switch15_out1_3 <= Constant11_out1_3 WHEN Bit_Slice12_out1_2 = '0' ELSE
      Constant12_out1_3;

  
  Switch16_out1_3 <= Switch12_out1_3 WHEN Logical_Operator4_out1_2 = '0' ELSE
      Switch15_out1_3;

  Constant13_out1_3 <= to_unsigned(16#10#, 6);

  Constant14_out1_3 <= to_unsigned(16#0F#, 6);

  
  Switch18_out1_3 <= Constant13_out1_3 WHEN Bit_Slice14_out1_1 = '0' ELSE
      Constant14_out1_3;

  Constant15_out1_3 <= to_unsigned(16#0E#, 6);

  Constant16_out1_3 <= to_unsigned(16#0D#, 6);

  
  Switch20_out1_3 <= Constant15_out1_3 WHEN Bit_Slice16_out1_1 = '0' ELSE
      Constant16_out1_3;

  
  Switch21_out1_3 <= Switch18_out1_3 WHEN Logical_Operator5_out1_1 = '0' ELSE
      Switch20_out1_3;

  
  Switch13_out1_3 <= Switch16_out1_3 WHEN Logical_Operator6_out1_1 = '0' ELSE
      Switch21_out1_3;

  Constant9_out1_4 <= to_unsigned(16#0C#, 6);

  Constant10_out1_4 <= to_unsigned(16#0B#, 6);

  
  Switch12_out1_4 <= Constant9_out1_4 WHEN Bit_Slice10_out1_1 = '0' ELSE
      Constant10_out1_4;

  Constant11_out1_4 <= to_unsigned(16#0A#, 6);

  Constant12_out1_4 <= to_unsigned(16#09#, 6);

  
  Switch15_out1_4 <= Constant11_out1_4 WHEN Bit_Slice12_out1_1 = '0' ELSE
      Constant12_out1_4;

  
  Switch16_out1_4 <= Switch12_out1_4 WHEN Logical_Operator4_out1_1 = '0' ELSE
      Switch15_out1_4;

  Constant13_out1_4 <= to_unsigned(16#08#, 6);

  Constant14_out1_4 <= to_unsigned(16#07#, 6);

  
  Switch18_out1_4 <= Constant13_out1_4 WHEN Bit_Slice14_out1 = '0' ELSE
      Constant14_out1_4;

  Constant15_out1_4 <= to_unsigned(16#06#, 6);

  Constant16_out1_4 <= to_unsigned(16#05#, 6);

  
  Switch20_out1_4 <= Constant15_out1_4 WHEN Bit_Slice16_out1 = '0' ELSE
      Constant16_out1_4;

  
  Switch21_out1_4 <= Switch18_out1_4 WHEN Logical_Operator5_out1 = '0' ELSE
      Switch20_out1_4;

  
  Switch13_out1_4 <= Switch16_out1_4 WHEN Logical_Operator6_out1 = '0' ELSE
      Switch21_out1_4;

  
  Switch3_out1_1 <= Switch13_out1_3 WHEN Logical_Operator12_out1_1 = '0' ELSE
      Switch13_out1_4;

  Constant9_out1_5 <= to_unsigned(16#06#, 6);

  Constant10_out1_5 <= to_unsigned(16#05#, 6);

  
  Switch12_out1_5 <= Constant9_out1_5 WHEN Bit_Slice10_out1 = '0' ELSE
      Constant10_out1_5;

  Constant11_out1_5 <= to_unsigned(16#04#, 6);

  Constant12_out1_5 <= to_unsigned(16#03#, 6);

  
  Switch15_out1_5 <= Constant11_out1_5 WHEN Bit_Slice12_out1 = '0' ELSE
      Constant12_out1_5;

  
  Switch16_out1_5 <= Switch12_out1_5 WHEN Logical_Operator4_out1 = '0' ELSE
      Switch15_out1_5;

  Constant13_out1_5 <= to_unsigned(16#02#, 6);

  
  Switch13_out1_5 <= Switch16_out1_5 WHEN Bit_Slice13_out1 = '0' ELSE
      Constant13_out1_5;

  
  Switch5_out1 <= Switch3_out1_1 WHEN Logical_Operator12_out1 = '0' ELSE
      Switch13_out1_5;

  
  Switch6_out1_1 <= Switch1_out1_1 WHEN Logical_Operator3_out1_1 = '0' ELSE
      Switch5_out1;

  Delay5_PS_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_PS_2_out1 <= to_unsigned(16#00#, 6);
      ELSIF enb_1_20_0 = '1' THEN
        Delay5_PS_2_out1 <= Switch6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_PS_2_process;


  bitsll_mant_b_ib_out1 <= y sll to_integer(Delay5_PS_2_out1);

  
  if_bitget_mant_b_mant_b_WordLen_1_out1 <= bitsll_mant_b_ib_out1 WHEN Delay2_PS_2_out1 = '0' ELSE
      y;

  alpha1_out1_1 <= '1';

  alpha0_out1_1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1_1 <= alpha1_out1_1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      alpha0_out1_1;

  Bit_Concat_out1_1 <= if_Exponent_0_cfType_Exp_out1_1 & Delay_PS_1_out1;

  BitSlice1_out1_1 <= Bit_Concat_out1_1(52);

  Delay2_PS_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_PS_2_out1_1 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay2_PS_2_out1_1 <= BitSlice1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_2_1_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        y_1 <= to_unsigned(0, 53);
      ELSIF enb_1_20_0 = '1' THEN
        y_1 <= Bit_Concat_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Bit_Slice2_out1_2 <= Bit_Concat_out1_1(52 DOWNTO 48);

  Bit_Slice13_out1_6 <= Bit_Slice2_out1_2(4);

  Bit_Slice12_out1_6 <= Bit_Slice2_out1_2(3);

  Bit_Slice11_out1_6 <= Bit_Slice2_out1_2(2);

  Logical_Operator4_out1_6 <= Bit_Slice12_out1_6 OR Bit_Slice11_out1_6;

  Bit_Slice10_out1_6 <= Bit_Slice2_out1_2(1);

  Bit_Slice9_out1_7 <= Bit_Slice2_out1_2(0);

  Logical_Operator14_out1_6 <= Bit_Slice10_out1_6 OR Bit_Slice9_out1_7;

  Logical_Operator13_out1_6 <= Logical_Operator4_out1_6 OR Logical_Operator14_out1_6;

  Logical_Operator12_out1_6 <= Bit_Slice13_out1_6 OR Logical_Operator13_out1_6;

  Bit_Slice9_out1_8 <= Bit_Concat_out1_1(47 DOWNTO 40);

  Bit_Slice16_out1_5 <= Bit_Slice9_out1_8(7);

  Bit_Slice15_out1_5 <= Bit_Slice9_out1_8(6);

  Logical_Operator5_out1_5 <= Bit_Slice16_out1_5 OR Bit_Slice15_out1_5;

  Bit_Slice14_out1_5 <= Bit_Slice9_out1_8(5);

  Bit_Slice13_out1_7 <= Bit_Slice9_out1_8(4);

  Logical_Operator7_out1_5 <= Bit_Slice14_out1_5 OR Bit_Slice13_out1_7;

  Logical_Operator6_out1_5 <= Logical_Operator5_out1_5 OR Logical_Operator7_out1_5;

  Bit_Slice12_out1_7 <= Bit_Slice9_out1_8(3);

  Bit_Slice11_out1_7 <= Bit_Slice9_out1_8(2);

  Logical_Operator4_out1_7 <= Bit_Slice12_out1_7 OR Bit_Slice11_out1_7;

  Bit_Slice10_out1_7 <= Bit_Slice9_out1_8(1);

  Bit_Slice9_out1_9 <= Bit_Slice9_out1_8(0);

  Logical_Operator14_out1_7 <= Bit_Slice10_out1_7 OR Bit_Slice9_out1_9;

  Logical_Operator13_out1_7 <= Logical_Operator4_out1_7 OR Logical_Operator14_out1_7;

  Logical_Operator12_out1_7 <= Logical_Operator6_out1_5 OR Logical_Operator13_out1_7;

  Bit_Slice8_out1_2 <= Bit_Concat_out1_1(39 DOWNTO 32);

  Bit_Slice16_out1_6 <= Bit_Slice8_out1_2(7);

  Bit_Slice15_out1_6 <= Bit_Slice8_out1_2(6);

  Logical_Operator5_out1_6 <= Bit_Slice16_out1_6 OR Bit_Slice15_out1_6;

  Bit_Slice14_out1_6 <= Bit_Slice8_out1_2(5);

  Bit_Slice13_out1_8 <= Bit_Slice8_out1_2(4);

  Logical_Operator7_out1_6 <= Bit_Slice14_out1_6 OR Bit_Slice13_out1_8;

  Logical_Operator6_out1_6 <= Logical_Operator5_out1_6 OR Logical_Operator7_out1_6;

  Bit_Slice12_out1_8 <= Bit_Slice8_out1_2(3);

  Bit_Slice11_out1_8 <= Bit_Slice8_out1_2(2);

  Logical_Operator4_out1_8 <= Bit_Slice12_out1_8 OR Bit_Slice11_out1_8;

  Bit_Slice10_out1_8 <= Bit_Slice8_out1_2(1);

  Bit_Slice9_out1_10 <= Bit_Slice8_out1_2(0);

  Logical_Operator14_out1_8 <= Bit_Slice10_out1_8 OR Bit_Slice9_out1_10;

  Logical_Operator13_out1_8 <= Logical_Operator4_out1_8 OR Logical_Operator14_out1_8;

  Logical_Operator12_out1_8 <= Logical_Operator6_out1_6 OR Logical_Operator13_out1_8;

  Logical_Operator2_out1_2 <= Logical_Operator12_out1_7 OR Logical_Operator12_out1_8;

  Bit_Slice7_out1_2 <= Bit_Concat_out1_1(31 DOWNTO 24);

  Bit_Slice16_out1_7 <= Bit_Slice7_out1_2(7);

  Bit_Slice15_out1_7 <= Bit_Slice7_out1_2(6);

  Logical_Operator5_out1_7 <= Bit_Slice16_out1_7 OR Bit_Slice15_out1_7;

  Bit_Slice14_out1_7 <= Bit_Slice7_out1_2(5);

  Bit_Slice13_out1_9 <= Bit_Slice7_out1_2(4);

  Logical_Operator7_out1_7 <= Bit_Slice14_out1_7 OR Bit_Slice13_out1_9;

  Logical_Operator6_out1_7 <= Logical_Operator5_out1_7 OR Logical_Operator7_out1_7;

  Bit_Slice12_out1_9 <= Bit_Slice7_out1_2(3);

  Bit_Slice11_out1_9 <= Bit_Slice7_out1_2(2);

  Logical_Operator4_out1_9 <= Bit_Slice12_out1_9 OR Bit_Slice11_out1_9;

  Bit_Slice10_out1_9 <= Bit_Slice7_out1_2(1);

  Bit_Slice9_out1_11 <= Bit_Slice7_out1_2(0);

  Logical_Operator14_out1_9 <= Bit_Slice10_out1_9 OR Bit_Slice9_out1_11;

  Logical_Operator13_out1_9 <= Logical_Operator4_out1_9 OR Logical_Operator14_out1_9;

  Logical_Operator12_out1_9 <= Logical_Operator6_out1_7 OR Logical_Operator13_out1_9;

  Bit_Slice6_out1_2 <= Bit_Concat_out1_1(23 DOWNTO 16);

  Bit_Slice16_out1_8 <= Bit_Slice6_out1_2(7);

  Bit_Slice15_out1_8 <= Bit_Slice6_out1_2(6);

  Logical_Operator5_out1_8 <= Bit_Slice16_out1_8 OR Bit_Slice15_out1_8;

  Bit_Slice14_out1_8 <= Bit_Slice6_out1_2(5);

  Bit_Slice13_out1_10 <= Bit_Slice6_out1_2(4);

  Logical_Operator7_out1_8 <= Bit_Slice14_out1_8 OR Bit_Slice13_out1_10;

  Logical_Operator6_out1_8 <= Logical_Operator5_out1_8 OR Logical_Operator7_out1_8;

  Bit_Slice12_out1_10 <= Bit_Slice6_out1_2(3);

  Bit_Slice11_out1_10 <= Bit_Slice6_out1_2(2);

  Logical_Operator4_out1_10 <= Bit_Slice12_out1_10 OR Bit_Slice11_out1_10;

  Bit_Slice10_out1_10 <= Bit_Slice6_out1_2(1);

  Bit_Slice9_out1_12 <= Bit_Slice6_out1_2(0);

  Logical_Operator14_out1_10 <= Bit_Slice10_out1_10 OR Bit_Slice9_out1_12;

  Logical_Operator13_out1_10 <= Logical_Operator4_out1_10 OR Logical_Operator14_out1_10;

  Logical_Operator12_out1_10 <= Logical_Operator6_out1_8 OR Logical_Operator13_out1_10;

  Bit_Slice1_out1_2 <= Bit_Concat_out1_1(15 DOWNTO 8);

  Bit_Slice16_out1_9 <= Bit_Slice1_out1_2(7);

  Bit_Slice15_out1_9 <= Bit_Slice1_out1_2(6);

  Logical_Operator5_out1_9 <= Bit_Slice16_out1_9 OR Bit_Slice15_out1_9;

  Bit_Slice14_out1_9 <= Bit_Slice1_out1_2(5);

  Bit_Slice13_out1_11 <= Bit_Slice1_out1_2(4);

  Logical_Operator7_out1_9 <= Bit_Slice14_out1_9 OR Bit_Slice13_out1_11;

  Logical_Operator6_out1_9 <= Logical_Operator5_out1_9 OR Logical_Operator7_out1_9;

  Bit_Slice12_out1_11 <= Bit_Slice1_out1_2(3);

  Bit_Slice11_out1_11 <= Bit_Slice1_out1_2(2);

  Logical_Operator4_out1_11 <= Bit_Slice12_out1_11 OR Bit_Slice11_out1_11;

  Bit_Slice10_out1_11 <= Bit_Slice1_out1_2(1);

  Bit_Slice9_out1_13 <= Bit_Slice1_out1_2(0);

  Logical_Operator14_out1_11 <= Bit_Slice10_out1_11 OR Bit_Slice9_out1_13;

  Logical_Operator13_out1_11 <= Logical_Operator4_out1_11 OR Logical_Operator14_out1_11;

  Bit_Slice4_out1_2 <= Bit_Concat_out1_1(7 DOWNTO 0);

  Bit_Slice8_out1_3 <= Bit_Slice4_out1_2(7);

  Bit_Slice7_out1_3 <= Bit_Slice4_out1_2(6);

  Logical_Operator1_out1_1 <= Bit_Slice8_out1_3 OR Bit_Slice7_out1_3;

  Bit_Slice6_out1_3 <= Bit_Slice4_out1_2(5);

  Bit_Slice5_out1_1 <= Bit_Slice4_out1_2(4);

  Logical_Operator3_out1_2 <= Bit_Slice6_out1_3 OR Bit_Slice5_out1_1;

  Bit_Slice3_out1_1 <= Bit_Slice4_out1_2(3);

  Bit_Slice2_out1_3 <= Bit_Slice4_out1_2(2);

  Bit_Slice4_out1_3 <= Bit_Slice4_out1_2(0);

  Constant_out1_1 <= to_unsigned(16#35#, 6);

  Bit_Slice1_out1_3 <= Bit_Slice4_out1_2(1);

  Constant1_out1_1 <= to_unsigned(16#34#, 6);

  
  Switch2_out1_2 <= Constant_out1_1 WHEN Bit_Slice4_out1_3 = '0' ELSE
      Constant1_out1_1;

  Logical_Operator_out1_2 <= Bit_Slice3_out1_1 OR Bit_Slice2_out1_3;

  Constant2_out1_1 <= to_unsigned(16#33#, 6);

  
  Switch1_out1_2 <= Switch2_out1_2 WHEN Bit_Slice1_out1_3 = '0' ELSE
      Constant2_out1_1;

  Constant3_out1_1 <= to_unsigned(16#32#, 6);

  Constant4_out1_1 <= to_unsigned(16#31#, 6);

  Logical_Operator2_out1_3 <= Logical_Operator1_out1_1 OR Logical_Operator3_out1_2;

  
  Switch3_out1_2 <= Constant3_out1_1 WHEN Bit_Slice3_out1_1 = '0' ELSE
      Constant4_out1_1;

  
  Switch4_out1_1 <= Switch1_out1_2 WHEN Logical_Operator_out1_2 = '0' ELSE
      Switch3_out1_2;

  Constant5_out1_1 <= to_unsigned(16#30#, 6);

  Constant6_out1_1 <= to_unsigned(16#2F#, 6);

  
  Switch6_out1_2 <= Constant5_out1_1 WHEN Bit_Slice6_out1_3 = '0' ELSE
      Constant6_out1_1;

  Constant7_out1_1 <= to_unsigned(16#2E#, 6);

  Constant8_out1_1 <= to_unsigned(16#2D#, 6);

  
  Switch8_out1_1 <= Constant7_out1_1 WHEN Bit_Slice8_out1_3 = '0' ELSE
      Constant8_out1_1;

  Logical_Operator12_out1_11 <= Logical_Operator6_out1_9 OR Logical_Operator13_out1_11;

  
  Switch9_out1_1 <= Switch6_out1_2 WHEN Logical_Operator1_out1_1 = '0' ELSE
      Switch8_out1_1;

  
  Switch10_out1_1 <= Switch4_out1_1 WHEN Logical_Operator2_out1_3 = '0' ELSE
      Switch9_out1_1;

  Constant9_out1_6 <= to_unsigned(16#2C#, 6);

  Constant10_out1_6 <= to_unsigned(16#2B#, 6);

  
  Switch12_out1_6 <= Constant9_out1_6 WHEN Bit_Slice10_out1_11 = '0' ELSE
      Constant10_out1_6;

  Constant11_out1_6 <= to_unsigned(16#2A#, 6);

  Constant12_out1_6 <= to_unsigned(16#29#, 6);

  
  Switch15_out1_6 <= Constant11_out1_6 WHEN Bit_Slice12_out1_11 = '0' ELSE
      Constant12_out1_6;

  
  Switch16_out1_6 <= Switch12_out1_6 WHEN Logical_Operator4_out1_11 = '0' ELSE
      Switch15_out1_6;

  Constant13_out1_6 <= to_unsigned(16#28#, 6);

  Constant14_out1_5 <= to_unsigned(16#27#, 6);

  
  Switch18_out1_5 <= Constant13_out1_6 WHEN Bit_Slice14_out1_9 = '0' ELSE
      Constant14_out1_5;

  Constant15_out1_5 <= to_unsigned(16#26#, 6);

  Constant16_out1_5 <= to_unsigned(16#25#, 6);

  
  Switch20_out1_5 <= Constant15_out1_5 WHEN Bit_Slice16_out1_9 = '0' ELSE
      Constant16_out1_5;

  
  Switch21_out1_5 <= Switch18_out1_5 WHEN Logical_Operator5_out1_9 = '0' ELSE
      Switch20_out1_5;

  Logical_Operator_out1_3 <= Logical_Operator12_out1_9 OR Logical_Operator12_out1_10;

  
  Switch13_out1_6 <= Switch16_out1_6 WHEN Logical_Operator6_out1_9 = '0' ELSE
      Switch21_out1_5;

  
  Switch_out1_1 <= Switch10_out1_1 WHEN Logical_Operator12_out1_11 = '0' ELSE
      Switch13_out1_6;

  Constant9_out1_7 <= to_unsigned(16#24#, 6);

  Constant10_out1_7 <= to_unsigned(16#23#, 6);

  
  Switch12_out1_7 <= Constant9_out1_7 WHEN Bit_Slice10_out1_10 = '0' ELSE
      Constant10_out1_7;

  Constant11_out1_7 <= to_unsigned(16#22#, 6);

  Constant12_out1_7 <= to_unsigned(16#21#, 6);

  
  Switch15_out1_7 <= Constant11_out1_7 WHEN Bit_Slice12_out1_10 = '0' ELSE
      Constant12_out1_7;

  
  Switch16_out1_7 <= Switch12_out1_7 WHEN Logical_Operator4_out1_10 = '0' ELSE
      Switch15_out1_7;

  Constant13_out1_7 <= to_unsigned(16#20#, 6);

  Constant14_out1_6 <= to_unsigned(16#1F#, 6);

  
  Switch18_out1_6 <= Constant13_out1_7 WHEN Bit_Slice14_out1_8 = '0' ELSE
      Constant14_out1_6;

  Constant15_out1_6 <= to_unsigned(16#1E#, 6);

  Constant16_out1_6 <= to_unsigned(16#1D#, 6);

  
  Switch20_out1_6 <= Constant15_out1_6 WHEN Bit_Slice16_out1_8 = '0' ELSE
      Constant16_out1_6;

  
  Switch21_out1_6 <= Switch18_out1_6 WHEN Logical_Operator5_out1_8 = '0' ELSE
      Switch20_out1_6;

  
  Switch13_out1_7 <= Switch16_out1_7 WHEN Logical_Operator6_out1_8 = '0' ELSE
      Switch21_out1_6;

  Constant9_out1_8 <= to_unsigned(16#1C#, 6);

  Constant10_out1_8 <= to_unsigned(16#1B#, 6);

  
  Switch12_out1_8 <= Constant9_out1_8 WHEN Bit_Slice10_out1_9 = '0' ELSE
      Constant10_out1_8;

  Constant11_out1_8 <= to_unsigned(16#1A#, 6);

  Constant12_out1_8 <= to_unsigned(16#19#, 6);

  
  Switch15_out1_8 <= Constant11_out1_8 WHEN Bit_Slice12_out1_9 = '0' ELSE
      Constant12_out1_8;

  
  Switch16_out1_8 <= Switch12_out1_8 WHEN Logical_Operator4_out1_9 = '0' ELSE
      Switch15_out1_8;

  Constant13_out1_8 <= to_unsigned(16#18#, 6);

  Constant14_out1_7 <= to_unsigned(16#17#, 6);

  
  Switch18_out1_7 <= Constant13_out1_8 WHEN Bit_Slice14_out1_7 = '0' ELSE
      Constant14_out1_7;

  Constant15_out1_7 <= to_unsigned(16#16#, 6);

  Constant16_out1_7 <= to_unsigned(16#15#, 6);

  
  Switch20_out1_7 <= Constant15_out1_7 WHEN Bit_Slice16_out1_7 = '0' ELSE
      Constant16_out1_7;

  
  Switch21_out1_7 <= Switch18_out1_7 WHEN Logical_Operator5_out1_7 = '0' ELSE
      Switch20_out1_7;

  
  Switch13_out1_8 <= Switch16_out1_8 WHEN Logical_Operator6_out1_7 = '0' ELSE
      Switch21_out1_7;

  Logical_Operator3_out1_3 <= Logical_Operator12_out1_6 OR Logical_Operator2_out1_2;

  
  Switch2_out1_3 <= Switch13_out1_7 WHEN Logical_Operator12_out1_9 = '0' ELSE
      Switch13_out1_8;

  
  Switch1_out1_3 <= Switch_out1_1 WHEN Logical_Operator_out1_3 = '0' ELSE
      Switch2_out1_3;

  Constant9_out1_9 <= to_unsigned(16#14#, 6);

  Constant10_out1_9 <= to_unsigned(16#13#, 6);

  
  Switch12_out1_9 <= Constant9_out1_9 WHEN Bit_Slice10_out1_8 = '0' ELSE
      Constant10_out1_9;

  Constant11_out1_9 <= to_unsigned(16#12#, 6);

  Constant12_out1_9 <= to_unsigned(16#11#, 6);

  
  Switch15_out1_9 <= Constant11_out1_9 WHEN Bit_Slice12_out1_8 = '0' ELSE
      Constant12_out1_9;

  
  Switch16_out1_9 <= Switch12_out1_9 WHEN Logical_Operator4_out1_8 = '0' ELSE
      Switch15_out1_9;

  Constant13_out1_9 <= to_unsigned(16#10#, 6);

  Constant14_out1_8 <= to_unsigned(16#0F#, 6);

  
  Switch18_out1_8 <= Constant13_out1_9 WHEN Bit_Slice14_out1_6 = '0' ELSE
      Constant14_out1_8;

  Constant15_out1_8 <= to_unsigned(16#0E#, 6);

  Constant16_out1_8 <= to_unsigned(16#0D#, 6);

  
  Switch20_out1_8 <= Constant15_out1_8 WHEN Bit_Slice16_out1_6 = '0' ELSE
      Constant16_out1_8;

  
  Switch21_out1_8 <= Switch18_out1_8 WHEN Logical_Operator5_out1_6 = '0' ELSE
      Switch20_out1_8;

  
  Switch13_out1_9 <= Switch16_out1_9 WHEN Logical_Operator6_out1_6 = '0' ELSE
      Switch21_out1_8;

  Constant9_out1_10 <= to_unsigned(16#0C#, 6);

  Constant10_out1_10 <= to_unsigned(16#0B#, 6);

  
  Switch12_out1_10 <= Constant9_out1_10 WHEN Bit_Slice10_out1_7 = '0' ELSE
      Constant10_out1_10;

  Constant11_out1_10 <= to_unsigned(16#0A#, 6);

  Constant12_out1_10 <= to_unsigned(16#09#, 6);

  
  Switch15_out1_10 <= Constant11_out1_10 WHEN Bit_Slice12_out1_7 = '0' ELSE
      Constant12_out1_10;

  
  Switch16_out1_10 <= Switch12_out1_10 WHEN Logical_Operator4_out1_7 = '0' ELSE
      Switch15_out1_10;

  Constant13_out1_10 <= to_unsigned(16#08#, 6);

  Constant14_out1_9 <= to_unsigned(16#07#, 6);

  
  Switch18_out1_9 <= Constant13_out1_10 WHEN Bit_Slice14_out1_5 = '0' ELSE
      Constant14_out1_9;

  Constant15_out1_9 <= to_unsigned(16#06#, 6);

  Constant16_out1_9 <= to_unsigned(16#05#, 6);

  
  Switch20_out1_9 <= Constant15_out1_9 WHEN Bit_Slice16_out1_5 = '0' ELSE
      Constant16_out1_9;

  
  Switch21_out1_9 <= Switch18_out1_9 WHEN Logical_Operator5_out1_5 = '0' ELSE
      Switch20_out1_9;

  
  Switch13_out1_10 <= Switch16_out1_10 WHEN Logical_Operator6_out1_5 = '0' ELSE
      Switch21_out1_9;

  
  Switch3_out1_3 <= Switch13_out1_9 WHEN Logical_Operator12_out1_7 = '0' ELSE
      Switch13_out1_10;

  Constant9_out1_11 <= to_unsigned(16#04#, 6);

  Constant10_out1_11 <= to_unsigned(16#03#, 6);

  
  Switch12_out1_11 <= Constant9_out1_11 WHEN Bit_Slice10_out1_6 = '0' ELSE
      Constant10_out1_11;

  Constant11_out1_11 <= to_unsigned(16#02#, 6);

  Constant12_out1_11 <= to_unsigned(16#01#, 6);

  
  Switch15_out1_11 <= Constant11_out1_11 WHEN Bit_Slice12_out1_6 = '0' ELSE
      Constant12_out1_11;

  
  Switch16_out1_11 <= Switch12_out1_11 WHEN Logical_Operator4_out1_6 = '0' ELSE
      Switch15_out1_11;

  Constant13_out1_11 <= to_unsigned(16#00#, 6);

  
  Switch13_out1_11 <= Switch16_out1_11 WHEN Bit_Slice13_out1_6 = '0' ELSE
      Constant13_out1_11;

  
  Switch5_out1_1 <= Switch3_out1_3 WHEN Logical_Operator12_out1_6 = '0' ELSE
      Switch13_out1_11;

  
  Switch6_out1_3 <= Switch1_out1_3 WHEN Logical_Operator3_out1_3 = '0' ELSE
      Switch5_out1_1;

  Delay5_PS_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_PS_2_out1_1 <= to_unsigned(16#00#, 6);
      ELSIF enb_1_20_0 = '1' THEN
        Delay5_PS_2_out1_1 <= Switch6_out1_3;
      END IF;
    END IF;
  END PROCESS Delay5_PS_2_1_process;


  bitsll_mant_b_ib_out1_1 <= y_1 sll to_integer(Delay5_PS_2_out1_1);

  
  if_bitget_mant_b_mant_b_WordLen_1_out1_1 <= bitsll_mant_b_ib_out1_1 WHEN Delay2_PS_2_out1_1 = '0' ELSE
      y_1;

  z2_out1 <= if_bitget_mant_b_mant_b_WordLen_1_out1 * if_bitget_mant_b_mant_b_WordLen_1_out1_1;

  Delay2_PS_4_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_PS_4_7_reg(0) <= to_unsigned(0, 106);
        Delay2_PS_4_7_reg(1) <= to_unsigned(0, 106);
      ELSIF enb_1_20_0 = '1' THEN
        Delay2_PS_4_7_reg(0) <= Delay2_PS_4_7_reg_next(0);
        Delay2_PS_4_7_reg(1) <= Delay2_PS_4_7_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay2_PS_4_7_process;

  Delay2_PS_4_7_out1 <= Delay2_PS_4_7_reg(1);
  Delay2_PS_4_7_reg_next(0) <= z2_out1;
  Delay2_PS_4_7_reg_next(1) <= Delay2_PS_4_7_reg(0);

  BitSlice1_out1_2 <= Delay2_PS_4_7_out1(105);

  alpha1_out1_2 <= to_signed(16#01#, 7);

  DTC3_out1 <= signed(resize(Delay5_PS_2_out1, 7));

  alpha1_ib_out1 <= alpha1_out1_2 - DTC3_out1;

  DTC4_out1 <= resize(alpha1_ib_out1, 14);

  C_out1 <= to_unsigned(16#001#, 11);

  
  if_Exponent_0_out1 <= Delay4_PS_1_out1 WHEN Compare_To_Zero_out1 = '0' ELSE
      C_out1;

  Delay4_PS_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_PS_2_out1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_20_0 = '1' THEN
        Delay4_PS_2_out1 <= if_Exponent_0_out1;
      END IF;
    END IF;
  END PROCESS Delay4_PS_2_process;


  DTC5_out1 <= signed(resize(Delay4_PS_2_out1, 14));

  
  if_bitget_mant_b_mant_b_WordLen_out1 <= DTC4_out1 WHEN Delay2_PS_2_out1 = '0' ELSE
      DTC5_out1;

  alpha1_out1_3 <= to_signed(16#01#, 7);

  DTC3_out1_1 <= signed(resize(Delay5_PS_2_out1_1, 7));

  alpha1_ib_out1_1 <= alpha1_out1_3 - DTC3_out1_1;

  DTC4_out1_1 <= resize(alpha1_ib_out1_1, 14);

  C_out1_1 <= to_unsigned(16#001#, 11);

  
  if_Exponent_0_out1_1 <= Delay1_PS_1_out1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      C_out1_1;

  Delay4_PS_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_PS_2_out1_1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_20_0 = '1' THEN
        Delay4_PS_2_out1_1 <= if_Exponent_0_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_PS_2_1_process;


  DTC5_out1_1 <= signed(resize(Delay4_PS_2_out1_1, 14));

  
  if_bitget_mant_b_mant_b_WordLen_out1_1 <= DTC4_out1_1 WHEN Delay2_PS_2_out1_1 = '0' ELSE
      DTC5_out1_1;

  exp_a_norm_exp_b_norm_out1 <= if_bitget_mant_b_mant_b_WordLen_out1 + if_bitget_mant_b_mant_b_WordLen_out1_1;

  Delay1_PS_4_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_PS_4_5_out1 <= to_signed(16#0000#, 14);
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_PS_4_5_out1 <= exp_a_norm_exp_b_norm_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_4_5_process;


  C2_out1 <= to_signed(-16#03FF#, 14);

  exp_sum_cfType_ExponentBias_out1 <= Delay1_PS_4_5_out1 + C2_out1;

  Delay3_PS_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_PS_6_out1 <= to_signed(16#0000#, 14);
      ELSIF enb_1_20_0 = '1' THEN
        Delay3_PS_6_out1 <= exp_sum_cfType_ExponentBias_out1;
      END IF;
    END IF;
  END PROCESS Delay3_PS_6_process;


  
  exp_out_cast_cfType_Exponen_out1 <= '1' WHEN Delay3_PS_6_out1 > to_signed(16#07FE#, 14) ELSE
      '0';

  
  exp_out_cast_cfType_Exponen_1_out1 <= '1' WHEN Delay3_PS_6_out1 = to_signed(16#07FE#, 14) ELSE
      '0';

  Logical_Operator5_out1_10 <= exp_out_cast_cfType_Exponen_1_out1 OR exp_out_cast_cfType_Exponen_out1;

  
  if_bitget_mant_ext_mant_ext_Word_2_out1 <= exp_out_cast_cfType_Exponen_out1 WHEN BitSlice1_out1_2 = '0' ELSE
      Logical_Operator5_out1_10;

  
  exp_out_cfType_MantissaLeng_out1 <= '1' WHEN Delay3_PS_6_out1 < to_signed(-16#0035#, 14) ELSE
      '0';

  
  exp_out_cfType_MantissaLeng_1_out1 <= '1' WHEN Delay3_PS_6_out1 = to_signed(-16#0035#, 14) ELSE
      '0';

  Logical_Operator4_out1_12 <= exp_out_cfType_MantissaLeng_out1 OR exp_out_cfType_MantissaLeng_1_out1;

  
  if_bitget_mant_ext_mant_ext_Word_4_out1 <= Logical_Operator4_out1_12 WHEN BitSlice1_out1_2 = '0' ELSE
      exp_out_cfType_MantissaLeng_out1;

  BitSlice3_out1 <= Delay3_PS_6_out1(13);

  
  exp_out_0_out1 <= '1' WHEN Delay3_PS_6_out1 = to_signed(16#0000#, 14) ELSE
      '0';

  Logical_Operator3_out1_4 <= BitSlice3_out1 OR exp_out_0_out1;

  
  if_bitget_mant_ext_mant_ext_Word_3_out1 <= Logical_Operator3_out1_4 WHEN BitSlice1_out1_2 = '0' ELSE
      BitSlice3_out1;

  Bit_Slice1_out1_4 <= Delay2_PS_4_7_out1(104 DOWNTO 51);

  Bit_Slice_out1 <= Delay2_PS_4_7_out1(105 DOWNTO 52);

  
  if_bitget_mant_ext_mant_ext_Word_1_out1 <= Bit_Slice1_out1_4 WHEN BitSlice1_out1_2 = '0' ELSE
      Bit_Slice_out1;

  const_1_out1 <= to_signed(16#001#, 11);

  alphaExp_Incr_1_out1 <= resize(const_1_out1, 14) - Delay3_PS_6_out1;

  DTC1_out1 <= unsigned(alphaExp_Incr_1_out1(5 DOWNTO 0));

  Unary_Minus_in0 <=  - (resize(Delay3_PS_6_out1, 15));
  Unary_Minus_out1 <= Unary_Minus_in0(13 DOWNTO 0);

  DTC4_out1_2 <= unsigned(Unary_Minus_out1(5 DOWNTO 0));

  
  if_bitget_mant_ext_mant_ext_Word_6_out1 <= DTC1_out1 WHEN BitSlice1_out1_2 = '0' ELSE
      DTC4_out1_2;

  bitsrl_mant_ext_shift_length_out1 <= SHIFT_RIGHT(if_bitget_mant_ext_mant_ext_Word_1_out1, to_integer(if_bitget_mant_ext_mant_ext_Word_6_out1));

  Logical_Operator_out1_4 <= if_bitget_mant_ext_mant_ext_Word_2_out1 OR if_bitget_mant_ext_mant_ext_Word_4_out1;

  
  if_exp_out_cast_cfType_Expone_2_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1 WHEN if_bitget_mant_ext_mant_ext_Word_3_out1 = '0' ELSE
      bitsrl_mant_ext_shift_length_out1;

  BitSlice_out1 <= if_exp_out_cast_cfType_Expone_2_out1(52 DOWNTO 0);

  alpha0_out1_2 <= '0';

  C5_out1 <= to_unsigned(0, 53);

  
  if_exp_out_cast_cfType_Expone_1_out1 <= BitSlice_out1 WHEN Logical_Operator_out1_4 = '0' ELSE
      C5_out1;

  Bit_Concat_out1_2 <= alpha0_out1_2 & if_exp_out_cast_cfType_Expone_1_out1;

  BitSlice_out1_1 <= Bit_Concat_out1_2(0);

  BitSlice1_out1_3 <= Bit_Concat_out1_2(1);

  Delay3_PS_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_PS_8_out1 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay3_PS_8_out1 <= BitSlice1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay3_PS_8_process;


  Bit_Slice2_out1_4 <= Delay2_PS_4_7_out1(50 DOWNTO 0);

  
  Compare_To_Zero_out1_2 <= '1' WHEN Bit_Slice2_out1_4 /= to_unsigned(0, 51) ELSE
      '0';

  BitSlice52ndBitS <= Delay2_PS_4_7_out1(51);

  LogicalOperatorAndOutS <= BitSlice1_out1_2 AND BitSlice52ndBitS;

  LogicalOperatorOrOutS <= Compare_To_Zero_out1_2 OR LogicalOperatorAndOutS;

  Bit_Slice33_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(53 DOWNTO 52);

  
  Bit_Slice33_out1_is_not0 <= '1' WHEN Bit_Slice33_out1 /= to_unsigned(16#0#, 2) ELSE
      '0';

  
  Bit_Slice33_out1_is_not0_1 <= '1' WHEN Bit_Slice33_out1 /= to_unsigned(16#0#, 2) ELSE
      '0';

  Logical_Operator11_out1 <= Bit_Slice33_out1_is_not0 OR Bit_Slice33_out1_is_not0_1;

  const_53_out1 <= to_signed(16#0035#, 14);

  Exp_Incr_53_out1 <= const_53_out1 + Delay3_PS_6_out1;

  DTC2_out1 <= unsigned(Exp_Incr_53_out1(5 DOWNTO 0));

  const_52_out1 <= to_signed(16#0034#, 14);

  Exp_Incr_52_out1 <= const_52_out1 + Delay3_PS_6_out1;

  DTC3_out1_2 <= unsigned(Exp_Incr_52_out1(5 DOWNTO 0));

  
  if_bitget_mant_ext_mant_ext_Word_5_out1 <= DTC2_out1 WHEN BitSlice1_out1_2 = '0' ELSE
      DTC3_out1_2;

  Bit_Slice1_out1_5 <= if_bitget_mant_ext_mant_ext_Word_5_out1(2);

  Logical_Operator2_out1_4 <= Logical_Operator11_out1 AND Bit_Slice1_out1_5;

  Logical_Operator1_out1_2 <= Logical_Operator2_out1_4 OR Logical_Operator11_out1;

  Bit_Slice3_out1_2 <= if_bitget_mant_ext_mant_ext_Word_5_out1(3);

  Bit_Slice5_out1_2 <= if_bitget_mant_ext_mant_ext_Word_5_out1(0);

  Logical_Operator2_out1_5 <= Logical_Operator11_out1 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_6 <= Bit_Slice33_out1(1);

  Logical_Operator1_out1_3 <= Logical_Operator2_out1_5 OR Bit_Slice1_out1_6;

  Bit_Slice2_out1_5 <= if_bitget_mant_ext_mant_ext_Word_5_out1(1);

  Bit_Slice_out1_1 <= Bit_Slice33_out1(0);

  Logical_Operator7_out1_10 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_5 <= Bit_Slice_out1_1 AND Logical_Operator7_out1_10;

  Bit_Slice32_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(51 DOWNTO 48);

  Bit_Reduce12_out1 <= (Bit_Slice32_out1(3) OR Bit_Slice32_out1(2) OR Bit_Slice32_out1(1) OR Bit_Slice32_out1(0));

  Bit_Slice30_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(47 DOWNTO 44);

  Bit_Reduce11_out1 <= (Bit_Slice30_out1(3) OR Bit_Slice30_out1(2) OR Bit_Slice30_out1(1) OR Bit_Slice30_out1(0));

  Bit_Slice24_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(43 DOWNTO 40);

  Bit_Reduce10_out1 <= (Bit_Slice24_out1(3) OR Bit_Slice24_out1(2) OR Bit_Slice24_out1(1) OR Bit_Slice24_out1(0));

  Bit_Slice28_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(39 DOWNTO 36);

  Bit_Reduce9_out1 <= (Bit_Slice28_out1(3) OR Bit_Slice28_out1(2) OR Bit_Slice28_out1(1) OR Bit_Slice28_out1(0));

  Bit_Slice22_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(35 DOWNTO 32);

  Bit_Reduce8_out1 <= (Bit_Slice22_out1(3) OR Bit_Slice22_out1(2) OR Bit_Slice22_out1(1) OR Bit_Slice22_out1(0));

  Bit_Slice20_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(31 DOWNTO 28);

  Bit_Reduce7_out1 <= (Bit_Slice20_out1(3) OR Bit_Slice20_out1(2) OR Bit_Slice20_out1(1) OR Bit_Slice20_out1(0));

  Bit_Slice16_out1_10 <= if_bitget_mant_ext_mant_ext_Word_1_out1(27 DOWNTO 24);

  Bit_Reduce6_out1 <= (Bit_Slice16_out1_10(3) OR Bit_Slice16_out1_10(2) OR Bit_Slice16_out1_10(1) OR Bit_Slice16_out1_10(0));

  Bit_Slice14_out1_10 <= if_bitget_mant_ext_mant_ext_Word_1_out1(23 DOWNTO 20);

  Bit_Reduce5_out1 <= (Bit_Slice14_out1_10(3) OR Bit_Slice14_out1_10(2) OR Bit_Slice14_out1_10(1) OR Bit_Slice14_out1_10(0));

  Bit_Slice18_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(19 DOWNTO 16);

  Bit_Reduce4_out1 <= (Bit_Slice18_out1(3) OR Bit_Slice18_out1(2) OR Bit_Slice18_out1(1) OR Bit_Slice18_out1(0));

  Bit_Slice12_out1_12 <= if_bitget_mant_ext_mant_ext_Word_1_out1(15 DOWNTO 12);

  Bit_Reduce3_out1 <= (Bit_Slice12_out1_12(3) OR Bit_Slice12_out1_12(2) OR Bit_Slice12_out1_12(1) OR Bit_Slice12_out1_12(0));

  Bit_Slice10_out1_12 <= if_bitget_mant_ext_mant_ext_Word_1_out1(11 DOWNTO 8);

  Bit_Reduce2_out1 <= (Bit_Slice10_out1_12(3) OR Bit_Slice10_out1_12(2) OR Bit_Slice10_out1_12(1) OR Bit_Slice10_out1_12(0));

  Bit_Slice8_out1_4 <= if_bitget_mant_ext_mant_ext_Word_1_out1(7 DOWNTO 4);

  Bit_Reduce1_out1 <= (Bit_Slice8_out1_4(3) OR Bit_Slice8_out1_4(2) OR Bit_Slice8_out1_4(1) OR Bit_Slice8_out1_4(0));

  Bit_Slice6_out1_4 <= if_bitget_mant_ext_mant_ext_Word_1_out1(3 DOWNTO 0);

  Bit_Reduce_out1 <= (Bit_Slice6_out1_4(3) OR Bit_Slice6_out1_4(2) OR Bit_Slice6_out1_4(1) OR Bit_Slice6_out1_4(0));

  Logical_Operator1_out1_4 <= Bit_Reduce1_out1 OR Bit_Reduce_out1;

  Logical_Operator2_out1_6 <= Bit_Reduce2_out1 OR Logical_Operator1_out1_4;

  Logical_Operator3_out1_6 <= Bit_Reduce3_out1 OR Logical_Operator2_out1_6;

  Logical_Operator4_out1_13 <= Bit_Reduce4_out1 OR Logical_Operator3_out1_6;

  Logical_Operator5_out1_11 <= Bit_Reduce5_out1 OR Logical_Operator4_out1_13;

  Logical_Operator6_out1_10 <= Bit_Reduce6_out1 OR Logical_Operator5_out1_11;

  Logical_Operator7_out1_11 <= Bit_Reduce7_out1 OR Logical_Operator6_out1_10;

  Logical_Operator8_out1 <= Bit_Reduce8_out1 OR Logical_Operator7_out1_11;

  Logical_Operator9_out1 <= Bit_Reduce9_out1 OR Logical_Operator8_out1;

  Logical_Operator10_out1 <= Bit_Reduce10_out1 OR Logical_Operator9_out1;

  Logical_Operator12_out1_12 <= Bit_Reduce11_out1 OR Logical_Operator10_out1;

  Logical_Operator4_out1_14 <= Logical_Operator1_out1_3 AND Bit_Slice2_out1_5;

  Logical_Operator13_out1_12 <= Bit_Reduce12_out1 OR Logical_Operator12_out1_12;

  Logical_Operator6_out1_11 <= Logical_Operator3_out1_5 OR Logical_Operator13_out1_12;

  Logical_Operator5_out1_12 <= Logical_Operator4_out1_14 OR Logical_Operator6_out1_11;

  Bit_Slice31_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(50 DOWNTO 48);

  Bit_Slice2_out1_6 <= Bit_Slice31_out1(2);

  Logical_Operator2_out1_7 <= Bit_Slice2_out1_6 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_7 <= Bit_Slice31_out1(1);

  Logical_Operator1_out1_5 <= Logical_Operator2_out1_7 OR Bit_Slice1_out1_7;

  Logical_Operator4_out1_15 <= Logical_Operator1_out1_5 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_2 <= Bit_Slice31_out1(0);

  Logical_Operator7_out1_12 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_7 <= Bit_Slice_out1_2 AND Logical_Operator7_out1_12;

  Logical_Operator4_out1_16 <= Logical_Operator1_out1_2 AND Bit_Slice3_out1_2;

  Logical_Operator3_out1_8 <= Logical_Operator5_out1_12 AND Bit_Slice1_out1_5;

  Logical_Operator6_out1_12 <= Logical_Operator3_out1_7 OR Logical_Operator12_out1_12;

  Logical_Operator5_out1_13 <= Logical_Operator4_out1_15 OR Logical_Operator6_out1_12;

  Logical_Operator6_out1_13 <= Logical_Operator3_out1_8 OR Logical_Operator5_out1_13;

  Logical_Operator5_out1_14 <= Logical_Operator4_out1_16 OR Logical_Operator6_out1_13;

  Bit_Slice4_out1_4 <= if_bitget_mant_ext_mant_ext_Word_5_out1(4);

  Bit_Slice25_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(46 DOWNTO 44);

  Bit_Slice2_out1_7 <= Bit_Slice25_out1(2);

  Logical_Operator2_out1_8 <= Bit_Slice2_out1_7 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_8 <= Bit_Slice25_out1(1);

  Logical_Operator1_out1_6 <= Logical_Operator2_out1_8 OR Bit_Slice1_out1_8;

  Logical_Operator4_out1_17 <= Logical_Operator1_out1_6 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_3 <= Bit_Slice25_out1(0);

  Logical_Operator7_out1_13 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_9 <= Bit_Slice_out1_3 AND Logical_Operator7_out1_13;

  Logical_Operator6_out1_14 <= Logical_Operator3_out1_9 OR Logical_Operator10_out1;

  Logical_Operator5_out1_15 <= Logical_Operator4_out1_17 OR Logical_Operator6_out1_14;

  Bit_Slice29_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(42 DOWNTO 40);

  Bit_Slice2_out1_8 <= Bit_Slice29_out1(2);

  Logical_Operator2_out1_9 <= Bit_Slice2_out1_8 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_9 <= Bit_Slice29_out1(1);

  Logical_Operator1_out1_7 <= Logical_Operator2_out1_9 OR Bit_Slice1_out1_9;

  Logical_Operator4_out1_18 <= Logical_Operator1_out1_7 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_4 <= Bit_Slice29_out1(0);

  Logical_Operator7_out1_14 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_10 <= Bit_Slice_out1_4 AND Logical_Operator7_out1_14;

  Logical_Operator2_out1_10 <= Logical_Operator5_out1_15 AND Bit_Slice1_out1_5;

  Logical_Operator6_out1_15 <= Logical_Operator3_out1_10 OR Logical_Operator9_out1;

  Logical_Operator5_out1_16 <= Logical_Operator4_out1_18 OR Logical_Operator6_out1_15;

  Logical_Operator1_out1_8 <= Logical_Operator2_out1_10 OR Logical_Operator5_out1_16;

  Bit_Slice23_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(38 DOWNTO 36);

  Bit_Slice2_out1_9 <= Bit_Slice23_out1(2);

  Logical_Operator2_out1_11 <= Bit_Slice2_out1_9 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_10 <= Bit_Slice23_out1(1);

  Logical_Operator1_out1_9 <= Logical_Operator2_out1_11 OR Bit_Slice1_out1_10;

  Logical_Operator4_out1_19 <= Logical_Operator1_out1_9 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_5 <= Bit_Slice23_out1(0);

  Logical_Operator7_out1_15 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_11 <= Bit_Slice_out1_5 AND Logical_Operator7_out1_15;

  Logical_Operator6_out1_16 <= Logical_Operator3_out1_11 OR Logical_Operator8_out1;

  Logical_Operator5_out1_17 <= Logical_Operator4_out1_19 OR Logical_Operator6_out1_16;

  Bit_Slice21_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(34 DOWNTO 32);

  Bit_Slice2_out1_10 <= Bit_Slice21_out1(2);

  Logical_Operator2_out1_12 <= Bit_Slice2_out1_10 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_11 <= Bit_Slice21_out1(1);

  Logical_Operator1_out1_10 <= Logical_Operator2_out1_12 OR Bit_Slice1_out1_11;

  Logical_Operator4_out1_20 <= Logical_Operator1_out1_10 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_6 <= Bit_Slice21_out1(0);

  Logical_Operator7_out1_16 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_12 <= Bit_Slice_out1_6 AND Logical_Operator7_out1_16;

  Logical_Operator2_out1_13 <= Logical_Operator5_out1_14 AND Bit_Slice4_out1_4;

  Logical_Operator4_out1_21 <= Logical_Operator1_out1_8 AND Bit_Slice3_out1_2;

  Logical_Operator3_out1_13 <= Logical_Operator5_out1_17 AND Bit_Slice1_out1_5;

  Logical_Operator6_out1_17 <= Logical_Operator3_out1_12 OR Logical_Operator7_out1_11;

  Logical_Operator5_out1_18 <= Logical_Operator4_out1_20 OR Logical_Operator6_out1_17;

  Logical_Operator6_out1_18 <= Logical_Operator3_out1_13 OR Logical_Operator5_out1_18;

  Logical_Operator5_out1_19 <= Logical_Operator4_out1_21 OR Logical_Operator6_out1_18;

  Logical_Operator1_out1_11 <= Logical_Operator2_out1_13 OR Logical_Operator5_out1_19;

  Bit_Slice17_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(30 DOWNTO 28);

  Bit_Slice2_out1_11 <= Bit_Slice17_out1(2);

  Logical_Operator2_out1_14 <= Bit_Slice2_out1_11 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_12 <= Bit_Slice17_out1(1);

  Logical_Operator1_out1_12 <= Logical_Operator2_out1_14 OR Bit_Slice1_out1_12;

  Logical_Operator4_out1_22 <= Logical_Operator1_out1_12 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_7 <= Bit_Slice17_out1(0);

  Logical_Operator7_out1_17 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_14 <= Bit_Slice_out1_7 AND Logical_Operator7_out1_17;

  Logical_Operator6_out1_19 <= Logical_Operator3_out1_14 OR Logical_Operator6_out1_10;

  Logical_Operator5_out1_20 <= Logical_Operator4_out1_22 OR Logical_Operator6_out1_19;

  Bit_Slice15_out1_10 <= if_bitget_mant_ext_mant_ext_Word_1_out1(26 DOWNTO 24);

  Bit_Slice2_out1_12 <= Bit_Slice15_out1_10(2);

  Logical_Operator2_out1_15 <= Bit_Slice2_out1_12 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_13 <= Bit_Slice15_out1_10(1);

  Logical_Operator1_out1_13 <= Logical_Operator2_out1_15 OR Bit_Slice1_out1_13;

  Logical_Operator4_out1_23 <= Logical_Operator1_out1_13 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_8 <= Bit_Slice15_out1_10(0);

  Logical_Operator7_out1_18 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_15 <= Bit_Slice_out1_8 AND Logical_Operator7_out1_18;

  Logical_Operator2_out1_16 <= Logical_Operator5_out1_20 AND Bit_Slice1_out1_5;

  Logical_Operator6_out1_20 <= Logical_Operator3_out1_15 OR Logical_Operator5_out1_11;

  Logical_Operator5_out1_21 <= Logical_Operator4_out1_23 OR Logical_Operator6_out1_20;

  Logical_Operator1_out1_14 <= Logical_Operator2_out1_16 OR Logical_Operator5_out1_21;

  Bit_Slice19_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(22 DOWNTO 20);

  Bit_Slice2_out1_13 <= Bit_Slice19_out1(2);

  Logical_Operator2_out1_17 <= Bit_Slice2_out1_13 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_14 <= Bit_Slice19_out1(1);

  Logical_Operator1_out1_15 <= Logical_Operator2_out1_17 OR Bit_Slice1_out1_14;

  Logical_Operator4_out1_24 <= Logical_Operator1_out1_15 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_9 <= Bit_Slice19_out1(0);

  Logical_Operator7_out1_19 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_16 <= Bit_Slice_out1_9 AND Logical_Operator7_out1_19;

  Logical_Operator6_out1_21 <= Logical_Operator3_out1_16 OR Logical_Operator4_out1_13;

  Logical_Operator5_out1_22 <= Logical_Operator4_out1_24 OR Logical_Operator6_out1_21;

  Bit_Slice13_out1_12 <= if_bitget_mant_ext_mant_ext_Word_1_out1(18 DOWNTO 16);

  Bit_Slice2_out1_14 <= Bit_Slice13_out1_12(2);

  Logical_Operator2_out1_18 <= Bit_Slice2_out1_14 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_15 <= Bit_Slice13_out1_12(1);

  Logical_Operator1_out1_16 <= Logical_Operator2_out1_18 OR Bit_Slice1_out1_15;

  Logical_Operator4_out1_25 <= Logical_Operator1_out1_16 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_10 <= Bit_Slice13_out1_12(0);

  Logical_Operator7_out1_20 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_17 <= Bit_Slice_out1_10 AND Logical_Operator7_out1_20;

  Logical_Operator4_out1_26 <= Logical_Operator1_out1_14 AND Bit_Slice3_out1_2;

  Logical_Operator3_out1_18 <= Logical_Operator5_out1_22 AND Bit_Slice1_out1_5;

  Logical_Operator6_out1_22 <= Logical_Operator3_out1_17 OR Logical_Operator3_out1_6;

  Logical_Operator5_out1_23 <= Logical_Operator4_out1_25 OR Logical_Operator6_out1_22;

  Logical_Operator6_out1_23 <= Logical_Operator3_out1_18 OR Logical_Operator5_out1_23;

  Logical_Operator5_out1_24 <= Logical_Operator4_out1_26 OR Logical_Operator6_out1_23;

  Bit_Slice11_out1_12 <= if_bitget_mant_ext_mant_ext_Word_1_out1(14 DOWNTO 12);

  Bit_Slice2_out1_15 <= Bit_Slice11_out1_12(2);

  Logical_Operator2_out1_19 <= Bit_Slice2_out1_15 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_16 <= Bit_Slice11_out1_12(1);

  Logical_Operator1_out1_17 <= Logical_Operator2_out1_19 OR Bit_Slice1_out1_16;

  Logical_Operator4_out1_27 <= Logical_Operator1_out1_17 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_11 <= Bit_Slice11_out1_12(0);

  Logical_Operator7_out1_21 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_19 <= Bit_Slice_out1_11 AND Logical_Operator7_out1_21;

  Logical_Operator6_out1_24 <= Logical_Operator3_out1_19 OR Logical_Operator2_out1_6;

  Logical_Operator5_out1_25 <= Logical_Operator4_out1_27 OR Logical_Operator6_out1_24;

  Bit_Slice9_out1_14 <= if_bitget_mant_ext_mant_ext_Word_1_out1(10 DOWNTO 8);

  Bit_Slice2_out1_16 <= Bit_Slice9_out1_14(2);

  Logical_Operator2_out1_20 <= Bit_Slice2_out1_16 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_17 <= Bit_Slice9_out1_14(1);

  Logical_Operator1_out1_18 <= Logical_Operator2_out1_20 OR Bit_Slice1_out1_17;

  Logical_Operator4_out1_28 <= Logical_Operator1_out1_18 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_12 <= Bit_Slice9_out1_14(0);

  Logical_Operator7_out1_22 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_20 <= Bit_Slice_out1_12 AND Logical_Operator7_out1_22;

  Logical_Operator2_out1_21 <= Logical_Operator5_out1_25 AND Bit_Slice1_out1_5;

  Logical_Operator6_out1_25 <= Logical_Operator3_out1_20 OR Logical_Operator1_out1_4;

  Logical_Operator5_out1_26 <= Logical_Operator4_out1_28 OR Logical_Operator6_out1_25;

  Logical_Operator1_out1_19 <= Logical_Operator2_out1_21 OR Logical_Operator5_out1_26;

  Bit_Slice7_out1_4 <= if_bitget_mant_ext_mant_ext_Word_1_out1(6 DOWNTO 4);

  Bit_Slice2_out1_17 <= Bit_Slice7_out1_4(2);

  Logical_Operator2_out1_22 <= Bit_Slice2_out1_17 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_18 <= Bit_Slice7_out1_4(1);

  Logical_Operator1_out1_20 <= Logical_Operator2_out1_22 OR Bit_Slice1_out1_18;

  Logical_Operator4_out1_29 <= Logical_Operator1_out1_20 AND Bit_Slice2_out1_5;

  Bit_Slice_out1_13 <= Bit_Slice7_out1_4(0);

  Logical_Operator7_out1_23 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_21 <= Bit_Slice_out1_13 AND Logical_Operator7_out1_23;

  Logical_Operator6_out1_26 <= Logical_Operator3_out1_21 OR Bit_Reduce_out1;

  Logical_Operator5_out1_27 <= Logical_Operator4_out1_29 OR Logical_Operator6_out1_26;

  Bit_Slice_out1_14 <= if_bitget_mant_ext_mant_ext_Word_1_out1(2 DOWNTO 0);

  Bit_Slice2_out1_18 <= Bit_Slice_out1_14(2);

  Logical_Operator2_out1_23 <= Bit_Slice2_out1_18 AND Bit_Slice5_out1_2;

  Bit_Slice1_out1_19 <= Bit_Slice_out1_14(1);

  Logical_Operator1_out1_21 <= Logical_Operator2_out1_23 OR Bit_Slice1_out1_19;

  Bit_Slice_out1_15 <= Bit_Slice_out1_14(0);

  Logical_Operator7_out1_24 <= Bit_Slice5_out1_2 OR Bit_Slice2_out1_5;

  Logical_Operator3_out1_22 <= Bit_Slice_out1_15 AND Logical_Operator7_out1_24;

  Bit_Slice27_out1 <= if_bitget_mant_ext_mant_ext_Word_5_out1(5);

  Logical_Operator4_out1_30 <= Logical_Operator1_out1_11 AND Bit_Slice27_out1;

  Logical_Operator3_out1_23 <= Logical_Operator5_out1_24 AND Bit_Slice4_out1_4;

  Logical_Operator4_out1_31 <= Logical_Operator1_out1_19 AND Bit_Slice3_out1_2;

  Logical_Operator3_out1_24 <= Logical_Operator5_out1_27 AND Bit_Slice1_out1_5;

  Logical_Operator4_out1_32 <= Logical_Operator1_out1_21 AND Bit_Slice2_out1_5;

  Constant_out1_2 <= '0';

  Logical_Operator6_out1_27 <= Logical_Operator3_out1_22 OR Constant_out1_2;

  Logical_Operator5_out1_28 <= Logical_Operator4_out1_32 OR Logical_Operator6_out1_27;

  Logical_Operator6_out1_28 <= Logical_Operator3_out1_24 OR Logical_Operator5_out1_28;

  Logical_Operator5_out1_29 <= Logical_Operator4_out1_31 OR Logical_Operator6_out1_28;

  Logical_Operator6_out1_29 <= Logical_Operator3_out1_23 OR Logical_Operator5_out1_29;

  Logical_Operator5_out1_30 <= Logical_Operator4_out1_30 OR Logical_Operator6_out1_29;

  Logical_Operator2_out1_24 <= LogicalOperatorOrOutS OR Logical_Operator5_out1_30;

  
  if_exp_out_cast_cfType_Expone_3_out1 <= LogicalOperatorOrOutS WHEN if_bitget_mant_ext_mant_ext_Word_3_out1 = '0' ELSE
      Logical_Operator2_out1_24;

  Delay2_PS_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_PS_8_out1 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay2_PS_8_out1 <= BitSlice_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_8_process;


  Delay2_PS_8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_PS_8_out1_1 <= '0';
      ELSIF enb_1_20_0 = '1' THEN
        Delay2_PS_8_out1_1 <= if_exp_out_cast_cfType_Expone_3_out1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_8_1_process;


  alphabitget_Mant_tmp_2_0_out1 <= Delay3_PS_8_out1 OR Delay2_PS_8_out1_1;

  alphabitget_Mant_tmp_1_0_out1 <= Delay2_PS_8_out1 AND alphabitget_Mant_tmp_2_0_out1;

  BitSlice4_out1 <= Bit_Concat_out1_2(53 DOWNTO 1);

  Delay1_PS_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_PS_8_out1 <= to_unsigned(0, 53);
      ELSIF enb_1_20_0 = '1' THEN
        Delay1_PS_8_out1 <= BitSlice4_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_8_process;


  const_2_out1 <= to_unsigned(1, 53);

  Mant_tmp_Incr_out1 <= Delay1_PS_8_out1 + const_2_out1;

  
  if_bitget_Mant_tmp_1_0_out1 <= Delay1_PS_8_out1 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_Incr_out1;

  BitSlice2_out1 <= if_bitget_Mant_tmp_1_0_out1(52);

  const_1_out1_1 <= to_signed(16#0001#, 14);

  Exp_Incr_1_out1 <= Delay3_PS_6_out1 + const_1_out1_1;

  Logical_Operator1_out1_22 <= if_bitget_mant_ext_mant_ext_Word_4_out1 OR if_bitget_mant_ext_mant_ext_Word_3_out1;

  
  if_exp_out_cfType_MantissaLen_1_out1 <= Delay3_PS_6_out1 WHEN BitSlice1_out1_2 = '0' ELSE
      Exp_Incr_1_out1;

  BitSlice2_out1_1 <= unsigned(if_exp_out_cfType_MantissaLen_1_out1(10 DOWNTO 0));

  C2_out1_1 <= to_unsigned(16#000#, 11);

  
  if_exp_out_cfType_MantissaLen_out1 <= BitSlice2_out1_1 WHEN Logical_Operator1_out1_22 = '0' ELSE
      C2_out1_1;

  C4_out1 <= to_unsigned(16#7FF#, 11);

  
  if_exp_out_cast_cfType_Expone_out1 <= if_exp_out_cfType_MantissaLen_out1 WHEN if_bitget_mant_ext_mant_ext_Word_2_out1 = '0' ELSE
      C4_out1;

  Delay_PS_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_PS_8_out1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_20_0 = '1' THEN
        Delay_PS_8_out1 <= if_exp_out_cast_cfType_Expone_out1;
      END IF;
    END IF;
  END PROCESS Delay_PS_8_process;


  const_1_out1_2 <= to_unsigned(16#001#, 11);

  Exp_Incr_out1 <= Delay_PS_8_out1 + const_1_out1_2;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= Delay_PS_8_out1 WHEN BitSlice2_out1 = '0' ELSE
      Exp_Incr_out1;

  C_out1_2 <= to_unsigned(16#000#, 11);

  
  if_aIsZero_bIsZero_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN Delay10_PS_2_8_out1 = '0' ELSE
      C_out1_2;

  C2_out1_2 <= to_unsigned(16#7FF#, 11);

  
  if_aExpInforNaN_bExpInforNa_out1 <= if_aIsZero_bIsZero_out1 WHEN Delay11_PS_2_8_out1 = '0' ELSE
      C2_out1_2;

  Delay7_PS_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_PS_9_out1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_20_0 = '1' THEN
        Delay7_PS_9_out1 <= if_aExpInforNaN_bExpInforNa_out1;
      END IF;
    END IF;
  END PROCESS Delay7_PS_9_process;


  Logical_Operator_out1_5 <= Delay10_PS_2_8_out1 OR BitSlice2_out1;

  BitSlice3_out1_1 <= if_bitget_Mant_tmp_1_0_out1(51 DOWNTO 0);

  C1_out1 <= to_unsigned(0, 52);

  
  if_aIsZero_bIsZero_1_out1 <= BitSlice3_out1_1 WHEN Logical_Operator_out1_5 = '0' ELSE
      C1_out1;

  C1_out1_1 <= unsigned'(X"8000000000000");

  
  if_aIsZero_out1 <= Delay_PS_1_out1 WHEN alphaaExponent_0_aMantZero_out1 = '0' ELSE
      C1_out1_1;

  C_out1_3 <= unsigned'(X"8000000000000");

  
  if_bIsZero_out1 <= Delay3_PS_1_out1 WHEN alphabExponent_0_bMantZero_out1 = '0' ELSE
      C_out1_3;

  
  if_aExpInforNaN_out1 <= if_aIsZero_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      if_bIsZero_out1;

  Delay9_PS_2_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_PS_2_8_reg(0) <= to_unsigned(0, 52);
        Delay9_PS_2_8_reg(1) <= to_unsigned(0, 52);
        Delay9_PS_2_8_reg(2) <= to_unsigned(0, 52);
        Delay9_PS_2_8_reg(3) <= to_unsigned(0, 52);
      ELSIF enb_1_20_0 = '1' THEN
        Delay9_PS_2_8_reg(0) <= Delay9_PS_2_8_reg_next(0);
        Delay9_PS_2_8_reg(1) <= Delay9_PS_2_8_reg_next(1);
        Delay9_PS_2_8_reg(2) <= Delay9_PS_2_8_reg_next(2);
        Delay9_PS_2_8_reg(3) <= Delay9_PS_2_8_reg_next(3);
      END IF;
    END IF;
  END PROCESS Delay9_PS_2_8_process;

  Delay9_PS_2_8_out1 <= Delay9_PS_2_8_reg(3);
  Delay9_PS_2_8_reg_next(0) <= if_aExpInforNaN_out1;
  Delay9_PS_2_8_reg_next(1) <= Delay9_PS_2_8_reg(0);
  Delay9_PS_2_8_reg_next(2) <= Delay9_PS_2_8_reg(1);
  Delay9_PS_2_8_reg_next(3) <= Delay9_PS_2_8_reg(2);

  
  if_aExpInforNaN_bExpInforNa_1_out1 <= if_aIsZero_bIsZero_1_out1 WHEN Delay11_PS_2_8_out1 = '0' ELSE
      Delay9_PS_2_8_out1;

  Delay8_PS_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_PS_9_out1 <= to_unsigned(0, 52);
      ELSIF enb_1_20_0 = '1' THEN
        Delay8_PS_9_out1 <= if_aExpInforNaN_bExpInforNa_1_out1;
      END IF;
    END IF;
  END PROCESS Delay8_PS_9_process;


  -- Combine FP sign, exponent, mantissa into 64 bit word
  nfp_out_pack <= Delay6_PS_9_out1 & Delay7_PS_9_out1 & Delay8_PS_9_out1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

