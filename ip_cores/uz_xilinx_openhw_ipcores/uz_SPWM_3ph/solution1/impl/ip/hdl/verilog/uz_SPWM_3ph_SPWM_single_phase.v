// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uz_SPWM_3ph_SPWM_single_phase (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        voltage,
        u_dc,
        DC,
        DC_ap_vld
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] voltage;
input  [31:0] u_dc;
output  [31:0] DC;
output   DC_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] DC;
reg DC_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_56_p2;
reg   [31:0] div_reg_164;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_51_p2;
reg   [31:0] DC_temp_reg_169;
wire    ap_CS_fsm_state13;
reg    ap_block_state1;
wire   [31:0] select_ln20_3_fu_145_p3;
reg   [31:0] DC_preg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire   [31:0] bitcast_ln18_fu_72_p1;
wire   [7:0] tmp_fu_75_p4;
wire   [22:0] trunc_ln18_fu_85_p1;
wire   [0:0] icmp_ln18_3_fu_95_p2;
wire   [0:0] icmp_ln18_fu_89_p2;
wire   [0:0] or_ln18_fu_101_p2;
wire   [0:0] grp_fu_62_p2;
wire   [0:0] grp_fu_67_p2;
wire   [0:0] and_ln18_fu_107_p2;
wire   [0:0] and_ln20_fu_113_p2;
wire   [0:0] xor_ln18_fu_119_p2;
wire   [0:0] and_ln20_3_fu_125_p2;
wire   [0:0] or_ln20_fu_139_p2;
wire   [31:0] select_ln20_fu_131_p3;
reg    grp_fu_56_ce;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 15'd1;
#0 DC_preg = 32'd0;
end

uz_SPWM_3ph_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_reg_164),
    .din1(32'd1056964608),
    .ce(1'b1),
    .dout(grp_fu_51_p2)
);

uz_SPWM_3ph_fdiv_32ns_32ns_32_9_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_9_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(voltage),
    .din1(u_dc),
    .ce(grp_fu_56_ce),
    .dout(grp_fu_56_p2)
);

uz_SPWM_3ph_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(DC_temp_reg_169),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_62_p2)
);

uz_SPWM_3ph_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(DC_temp_reg_169),
    .din1(32'd1065353216),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_67_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        DC_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            DC_preg <= select_ln20_3_fu_145_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        DC_temp_reg_169 <= grp_fu_51_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        div_reg_164 <= grp_fu_56_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        DC = select_ln20_3_fu_145_p3;
    end else begin
        DC = DC_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        DC_ap_vld = 1'b1;
    end else begin
        DC_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_56_ce = 1'b0;
    end else begin
        grp_fu_56_ce = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln18_fu_107_p2 = (or_ln18_fu_101_p2 & grp_fu_62_p2);

assign and_ln20_3_fu_125_p2 = (xor_ln18_fu_119_p2 & and_ln20_fu_113_p2);

assign and_ln20_fu_113_p2 = (or_ln18_fu_101_p2 & grp_fu_67_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bitcast_ln18_fu_72_p1 = DC_temp_reg_169;

assign icmp_ln18_3_fu_95_p2 = ((trunc_ln18_fu_85_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_89_p2 = ((tmp_fu_75_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln18_fu_101_p2 = (icmp_ln18_fu_89_p2 | icmp_ln18_3_fu_95_p2);

assign or_ln20_fu_139_p2 = (and_ln20_3_fu_125_p2 | and_ln18_fu_107_p2);

assign select_ln20_3_fu_145_p3 = ((or_ln20_fu_139_p2[0:0] == 1'b1) ? select_ln20_fu_131_p3 : bitcast_ln18_fu_72_p1);

assign select_ln20_fu_131_p3 = ((and_ln20_3_fu_125_p2[0:0] == 1'b1) ? 32'd1065353216 : 32'd0);

assign tmp_fu_75_p4 = {{bitcast_ln18_fu_72_p1[30:23]}};

assign trunc_ln18_fu_85_p1 = bitcast_ln18_fu_72_p1[22:0];

assign xor_ln18_fu_119_p2 = (1'd1 ^ and_ln18_fu_107_p2);

endmodule //uz_SPWM_3ph_SPWM_single_phase
