-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\UZ_D_GaN_Inverter\UZ_D_GaN_Inverter_src_PWMdutyFreqDetection.vhd
-- Created: 2022-02-02 11:26:32
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: UZ_D_GaN_Inverter_src_PWMdutyFreqDetection
-- Source Path: UZ_D_GaN_Inverter/UZ_D_GaN_Inverter/PWMdutyFreqDetection
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.UZ_D_GaN_Inverter_src_UZ_D_GaN_Inverter_pkg.ALL;

ENTITY UZ_D_GaN_Inverter_src_PWMdutyFreqDetection IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In1                               :   IN    std_logic;  -- ufix1
        en_in_AXI                         :   IN    std_logic;
        AXI_period                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_hightime                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_lowtime                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_dutycyc                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
        );
END UZ_D_GaN_Inverter_src_PWMdutyFreqDetection;


ARCHITECTURE rtl OF UZ_D_GaN_Inverter_src_PWMdutyFreqDetection IS

  -- Component Declarations
  COMPONENT UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_HDL_Reciprocal
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Rise_Positive
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Rise_Positive(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_HDL_Reciprocal
    USE ENTITY work.UZ_D_GaN_Inverter_src_HDL_Reciprocal(rtl);

  -- Signals
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL Detect_Fall_Nonpositive_out1     : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Delay17_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_period_1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_period_2                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch6_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch6_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL reduced_reg                      : vector_of_unsigned32(0 TO 25);  -- ufix32 [26]
  SIGNAL Switch6_out1_2                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL AXI_hightime_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_hightime_2                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch5_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch5_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL reduced_reg_1                    : vector_of_unsigned32(0 TO 25);  -- ufix32 [26]
  SIGNAL Switch5_out1_2                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL AXI_lowtime_1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch4_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch4_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL reduced_reg_2                    : vector_of_unsigned32(0 TO 25);  -- ufix32 [26]
  SIGNAL Switch4_out1_2                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 26);  -- ufix1 [27]
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL reduced_reg_3                    : vector_of_unsigned32(0 TO 20);  -- ufix32 [21]
  SIGNAL AXI_hightime_3                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL reduced_reg_4                    : vector_of_unsigned32(0 TO 3);  -- ufix32 [4]
  SIGNAL AXI_period_3                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Reciprocal_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL HDL_Reciprocal_out1_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Product_in_pipe1_reg             : vector_of_unsigned32(0 TO 9);  -- ufix32 [10]
  SIGNAL HDL_Reciprocal_out1_1            : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Product_mul_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En31
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Product_out_pipe_reg             : vector_of_signed32(0 TO 4);  -- sfix32 [5]
  SIGNAL Product_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Gain_mul_temp                    : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL AXI_dutycyc_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Switch3_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay5_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL AXI_hightime_4                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_period_4                     : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  -- update output only after end of pulse (faling edge)

  u_Detect_Fall_Nonpositive : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => Switch2_out1,
              Y => Detect_Fall_Nonpositive_out1
              );

  u_Detect_Rise_Positive : UZ_D_GaN_Inverter_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => Switch2_out1,
              Y => Detect_Rise_Positive_out1
              );

  u_HDL_Reciprocal : UZ_D_GaN_Inverter_src_HDL_Reciprocal
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din => std_logic_vector(AXI_period_3),  -- uint32
              dout => HDL_Reciprocal_out1  -- ufix32_En31
              );

  
  switch_compare_1 <= '1' WHEN en_in_AXI > '0' ELSE
      '0';

  Constant_out1 <= '0';

  
  Switch2_out1 <= Constant_out1 WHEN switch_compare_1 = '0' ELSE
      In1;

  
  Compare_To_Constant_out1 <= '1' WHEN Detect_Fall_Nonpositive_out1 = '1' ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2500000
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(1, 32);
      ELSIF enb = '1' THEN
        IF Detect_Rise_Positive_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(1, 32);
        ELSIF en_in_AXI = '1' THEN 
          IF HDL_Counter_out1 >= to_unsigned(2500000, 32) THEN 
            HDL_Counter_out1 <= to_unsigned(1, 32);
          ELSE 
            HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(1, 32);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(1, 32) ELSE
      '0';

  
  switch_compare_1_2 <= '1' WHEN Compare_To_Constant1_out1 > '0' ELSE
      '0';

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay17_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        AXI_period_2 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        AXI_period_2 <= AXI_period_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  
  AXI_period_1 <= AXI_period_2 WHEN switch_compare_1_2 = '0' ELSE
      Delay17_out1;

  
  Switch6_out1_1 <= Switch6_out1 WHEN switch_compare_1_1 = '0' ELSE
      AXI_period_1;

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch6_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Switch6_out1 <= Switch6_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= Switch6_out1;
        reduced_reg(1 TO 25) <= reduced_reg(0 TO 24);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  Switch6_out1_2 <= reduced_reg(25);

  AXI_period <= std_logic_vector(Switch6_out1_2);

  
  switch_compare_1_3 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  
  switch_compare_1_4 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        AXI_hightime_2 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        AXI_hightime_2 <= AXI_hightime_1;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  
  AXI_hightime_1 <= AXI_hightime_2 WHEN switch_compare_1_4 = '0' ELSE
      Delay17_out1;

  
  Switch5_out1_1 <= Switch5_out1 WHEN switch_compare_1_3 = '0' ELSE
      AXI_hightime_1;

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch5_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Switch5_out1 <= Switch5_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_4_process;


  reduced_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1 <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= Switch5_out1;
        reduced_reg_1(1 TO 25) <= reduced_reg_1(0 TO 24);
      END IF;
    END IF;
  END PROCESS reduced_5_process;

  Switch5_out1_2 <= reduced_reg_1(25);

  AXI_hightime <= std_logic_vector(Switch5_out1_2);

  
  switch_compare_1_5 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  AXI_lowtime_1 <= AXI_period_1 - AXI_hightime_1;

  
  Switch4_out1_1 <= Switch4_out1 WHEN switch_compare_1_5 = '0' ELSE
      AXI_lowtime_1;

  reduced_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch4_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Switch4_out1 <= Switch4_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_6_process;


  reduced_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2 <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= Switch4_out1;
        reduced_reg_2(1 TO 25) <= reduced_reg_2(0 TO 24);
      END IF;
    END IF;
  END PROCESS reduced_7_process;

  Switch4_out1_2 <= reduced_reg_2(25);

  AXI_lowtime <= std_logic_vector(Switch4_out1_2);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= Compare_To_Constant_out1;
        delayMatch1_reg(1 TO 26) <= delayMatch1_reg(0 TO 25);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Compare_To_Constant_out1_1 <= delayMatch1_reg(26);

  
  switch_compare_1_6 <= '1' WHEN Compare_To_Constant_out1_1 > '0' ELSE
      '0';

  reduced_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_3 <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        reduced_reg_3(0) <= AXI_hightime_2;
        reduced_reg_3(1 TO 20) <= reduced_reg_3(0 TO 19);
      END IF;
    END IF;
  END PROCESS reduced_8_process;

  AXI_hightime_3 <= reduced_reg_3(20);

  reduced_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_4 <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        reduced_reg_4(0) <= AXI_period_2;
        reduced_reg_4(1 TO 3) <= reduced_reg_4(0 TO 2);
      END IF;
    END IF;
  END PROCESS reduced_9_process;

  AXI_period_3 <= reduced_reg_4(3);

  HDL_Reciprocal_out1_unsigned <= unsigned(HDL_Reciprocal_out1);

  Product_in_pipe1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_in_pipe1_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        Product_in_pipe1_reg(0) <= HDL_Reciprocal_out1_unsigned;
        Product_in_pipe1_reg(1 TO 9) <= Product_in_pipe1_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS Product_in_pipe1_process;

  HDL_Reciprocal_out1_1 <= Product_in_pipe1_reg(9);

  Product_mul_temp <= AXI_hightime_3 * HDL_Reciprocal_out1_1;
  Product_out1 <= signed(Product_mul_temp(32 DOWNTO 1));

  Product_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_out_pipe_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        Product_out_pipe_reg(0) <= Product_out1;
        Product_out_pipe_reg(1 TO 4) <= Product_out_pipe_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS Product_out_pipe_process;

  Product_out1_1 <= Product_out_pipe_reg(4);

  -- CSD Encoding (1677721600) : 01100100000000000000000000000000; Cost (Adders) = 2
  Gain_mul_temp <= (resize(Product_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64) + resize(Product_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64)) + resize(Product_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  AXI_dutycyc_1 <= Gain_mul_temp(61 DOWNTO 30);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch3_out1 <= Delay5_out1 WHEN switch_compare_1_6 = '0' ELSE
      AXI_dutycyc_1;

  AXI_dutycyc <= std_logic_vector(Switch3_out1);

END rtl;

