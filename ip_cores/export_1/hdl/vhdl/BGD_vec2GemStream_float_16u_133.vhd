-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_vec2GemStream_float_16u_133 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    p_out_full_n : IN STD_LOGIC;
    p_out_write : OUT STD_LOGIC;
    p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_m_empty_n : IN STD_LOGIC;
    p_m_read : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_in_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    p_in_ce1 : OUT STD_LOGIC;
    p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_offset_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    p_in_offset_empty_n : IN STD_LOGIC;
    p_in_offset_read : OUT STD_LOGIC );
end;


architecture behav of BGD_vec2GemStream_float_16u_133 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_const_lv15_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000011";
    constant ap_const_lv15_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_const_lv15_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000101";
    constant ap_const_lv15_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000110";
    constant ap_const_lv15_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000111";
    constant ap_const_lv15_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_const_lv15_9 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001001";
    constant ap_const_lv15_A : STD_LOGIC_VECTOR (14 downto 0) := "000000000001010";
    constant ap_const_lv15_B : STD_LOGIC_VECTOR (14 downto 0) := "000000000001011";
    constant ap_const_lv15_C : STD_LOGIC_VECTOR (14 downto 0) := "000000000001100";
    constant ap_const_lv15_D : STD_LOGIC_VECTOR (14 downto 0) := "000000000001101";
    constant ap_const_lv15_E : STD_LOGIC_VECTOR (14 downto 0) := "000000000001110";
    constant ap_const_lv15_F : STD_LOGIC_VECTOR (14 downto 0) := "000000000001111";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln86_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_m_blk_n : STD_LOGIC;
    signal p_n_blk_n : STD_LOGIC;
    signal p_in_offset_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_264 : STD_LOGIC_VECTOR (59 downto 0);
    signal i_reg_275 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_in_offset_read_reg_671 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_fu_286_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln_reg_691 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_fu_304_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_reg_696 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln86_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln86_fu_315_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln86_reg_705 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln86_fu_326_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln86_reg_710 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_1_fu_338_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_reg_715 : STD_LOGIC_VECTOR (14 downto 0);
    signal l_val_m_Val_0_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal l_val_m_Val_1_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal l_val_m_Val_2_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal l_val_m_Val_3_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal l_val_m_Val_4_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal l_val_m_Val_5_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal l_val_m_Val_6_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal l_val_m_Val_7_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal l_val_m_Val_8_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal l_val_m_Val_9_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal l_val_m_Val_10_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal l_val_m_Val_11_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal l_val_m_Val_12_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal l_val_m_Val_13_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal add_ln92_15_fu_571_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_15_reg_879 : STD_LOGIC_VECTOR (14 downto 0);
    signal l_val_m_Val_14_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state17_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal add_ln87_fu_580_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln87_reg_894 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_268_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_phi_mux_i_phi_fu_279_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln92_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_1_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln92_2_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln92_3_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln92_4_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln92_5_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln92_6_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln92_7_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln92_8_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln92_9_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln92_10_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln92_11_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal zext_ln92_12_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal zext_ln92_13_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal zext_ln92_14_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal zext_ln92_15_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_304_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln87_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_334_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln92_fu_346_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_fu_356_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_1_fu_361_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_1_fu_371_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_2_fu_376_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_2_fu_386_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_3_fu_391_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_3_fu_401_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_4_fu_406_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_4_fu_416_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_5_fu_421_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_5_fu_431_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_6_fu_436_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_6_fu_446_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_7_fu_451_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_7_fu_461_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_8_fu_466_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_8_fu_476_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_9_fu_481_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_9_fu_491_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_10_fu_496_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_10_fu_506_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_11_fu_511_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_11_fu_521_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_12_fu_526_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_12_fu_536_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_13_fu_541_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_13_fu_551_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_14_fu_556_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln92_14_fu_566_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal l_v_15_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_14_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_13_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_12_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_11_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_10_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_9_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_8_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_7_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_6_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_5_fu_600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_4_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_3_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_2_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_1_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_fu_585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_304_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_fu_304_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component BGD_mul_28ns_32ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;



begin
    mul_28ns_32ns_60_1_1_U31 : component BGD_mul_28ns_32ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 32,
        dout_WIDTH => 60)
    port map (
        din0 => bound_fu_304_p0,
        din1 => bound_fu_304_p1,
        dout => bound_fu_304_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_275 <= add_ln87_reg_894;
            elsif ((not(((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_275 <= ap_const_lv28_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_264 <= add_ln86_reg_705;
            elsif ((not(((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_264 <= ap_const_lv60_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln86_reg_705 <= add_ln86_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln87_reg_894 <= add_ln87_fu_580_p2;
                l_val_m_Val_14_reg_884 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                add_ln92_15_reg_879 <= add_ln92_15_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_696 <= bound_fu_304_p2;
                p_in_offset_read_reg_671 <= p_in_offset_dout;
                trunc_ln_reg_691 <= p_n_dout(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln86_reg_701 <= icmp_ln86_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_0_reg_739 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_10_reg_839 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_11_reg_849 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_12_reg_859 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_13_reg_869 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_1_reg_749 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_2_reg_759 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_3_reg_769 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_4_reg_779 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_5_reg_789 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_6_reg_799 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_7_reg_809 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_8_reg_819 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_9_reg_829 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln86_fu_310_p2 = ap_const_lv1_0))) then
                select_ln86_reg_710 <= select_ln86_fu_326_p3;
                    tmp_1_reg_715(14 downto 4) <= tmp_1_fu_338_p3(14 downto 4);
            end if;
        end if;
    end process;
    tmp_1_reg_715(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n, icmp_ln86_fu_310_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_fu_310_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln86_fu_310_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln86_fu_315_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_268_p4) + unsigned(ap_const_lv60_1));
    add_ln87_fu_580_p2 <= std_logic_vector(unsigned(ap_const_lv28_1) + unsigned(select_ln86_reg_710));
    add_ln92_10_fu_496_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_9_fu_491_p2));
    add_ln92_11_fu_511_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_10_fu_506_p2));
    add_ln92_12_fu_526_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_11_fu_521_p2));
    add_ln92_13_fu_541_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_12_fu_536_p2));
    add_ln92_14_fu_556_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_13_fu_551_p2));
    add_ln92_15_fu_571_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_14_fu_566_p2));
    add_ln92_1_fu_361_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_fu_356_p2));
    add_ln92_2_fu_376_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_1_fu_371_p2));
    add_ln92_3_fu_391_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_2_fu_386_p2));
    add_ln92_4_fu_406_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_3_fu_401_p2));
    add_ln92_5_fu_421_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_4_fu_416_p2));
    add_ln92_6_fu_436_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_5_fu_431_p2));
    add_ln92_7_fu_451_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_6_fu_446_p2));
    add_ln92_8_fu_466_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_7_fu_461_p2));
    add_ln92_9_fu_481_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(or_ln92_8_fu_476_p2));
    add_ln92_fu_346_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_671) + unsigned(tmp_1_fu_338_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln86_reg_701)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln86_reg_701)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln86_reg_701)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n)
    begin
                ap_block_state1 <= ((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_pp0_stage0_iter1_assign_proc : process(p_out_full_n, icmp_ln86_reg_701)
    begin
                ap_block_state18_pp0_stage0_iter1 <= ((icmp_ln86_reg_701 = ap_const_lv1_0) and (p_out_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln86_fu_310_p2)
    begin
        if ((icmp_ln86_fu_310_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_279_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln86_reg_701, i_reg_275, add_ln87_reg_894)
    begin
        if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_279_p4 <= add_ln87_reg_894;
        else 
            ap_phi_mux_i_phi_fu_279_p4 <= i_reg_275;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_268_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln86_reg_701, indvar_flatten_reg_264, add_ln86_reg_705)
    begin
        if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_268_p4 <= add_ln86_reg_705;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_268_p4 <= indvar_flatten_reg_264;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_304_p0 <= bound_fu_304_p00(28 - 1 downto 0);
    bound_fu_304_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_286_p4),60));
    bound_fu_304_p1 <= bound_fu_304_p10(32 - 1 downto 0);
    bound_fu_304_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_m_dout),60));
    empty_fu_334_p1 <= select_ln86_fu_326_p3(11 - 1 downto 0);
    icmp_ln86_fu_310_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_268_p4 = bound_reg_696) else "0";
    icmp_ln87_fu_321_p2 <= "1" when (ap_phi_mux_i_phi_fu_279_p4 = trunc_ln_reg_691) else "0";
    l_v_10_fu_615_p1 <= l_val_m_Val_10_reg_839;
    l_v_11_fu_618_p1 <= l_val_m_Val_11_reg_849;
    l_v_12_fu_621_p1 <= l_val_m_Val_12_reg_859;
    l_v_13_fu_624_p1 <= l_val_m_Val_13_reg_869;
    l_v_14_fu_627_p1 <= l_val_m_Val_14_reg_884;
    l_v_15_fu_630_p1 <= p_in_q1;
    l_v_1_fu_588_p1 <= l_val_m_Val_1_reg_749;
    l_v_2_fu_591_p1 <= l_val_m_Val_2_reg_759;
    l_v_3_fu_594_p1 <= l_val_m_Val_3_reg_769;
    l_v_4_fu_597_p1 <= l_val_m_Val_4_reg_779;
    l_v_5_fu_600_p1 <= l_val_m_Val_5_reg_789;
    l_v_6_fu_603_p1 <= l_val_m_Val_6_reg_799;
    l_v_7_fu_606_p1 <= l_val_m_Val_7_reg_809;
    l_v_8_fu_609_p1 <= l_val_m_Val_8_reg_819;
    l_v_9_fu_612_p1 <= l_val_m_Val_9_reg_829;
    l_v_fu_585_p1 <= l_val_m_Val_0_reg_739;
    or_ln92_10_fu_506_p2 <= (tmp_1_reg_715 or ap_const_lv15_B);
    or_ln92_11_fu_521_p2 <= (tmp_1_reg_715 or ap_const_lv15_C);
    or_ln92_12_fu_536_p2 <= (tmp_1_reg_715 or ap_const_lv15_D);
    or_ln92_13_fu_551_p2 <= (tmp_1_reg_715 or ap_const_lv15_E);
    or_ln92_14_fu_566_p2 <= (tmp_1_reg_715 or ap_const_lv15_F);
    or_ln92_1_fu_371_p2 <= (tmp_1_reg_715 or ap_const_lv15_2);
    or_ln92_2_fu_386_p2 <= (tmp_1_reg_715 or ap_const_lv15_3);
    or_ln92_3_fu_401_p2 <= (tmp_1_reg_715 or ap_const_lv15_4);
    or_ln92_4_fu_416_p2 <= (tmp_1_reg_715 or ap_const_lv15_5);
    or_ln92_5_fu_431_p2 <= (tmp_1_reg_715 or ap_const_lv15_6);
    or_ln92_6_fu_446_p2 <= (tmp_1_reg_715 or ap_const_lv15_7);
    or_ln92_7_fu_461_p2 <= (tmp_1_reg_715 or ap_const_lv15_8);
    or_ln92_8_fu_476_p2 <= (tmp_1_reg_715 or ap_const_lv15_9);
    or_ln92_9_fu_491_p2 <= (tmp_1_reg_715 or ap_const_lv15_A);
    or_ln92_fu_356_p2 <= (tmp_1_reg_715 or ap_const_lv15_1);

    p_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, zext_ln92_fu_351_p1, zext_ln92_1_fu_366_p1, ap_block_pp0_stage1, zext_ln92_2_fu_381_p1, ap_block_pp0_stage2, zext_ln92_3_fu_396_p1, ap_block_pp0_stage3, zext_ln92_4_fu_411_p1, ap_block_pp0_stage4, zext_ln92_5_fu_426_p1, ap_block_pp0_stage5, zext_ln92_6_fu_441_p1, ap_block_pp0_stage6, zext_ln92_7_fu_456_p1, ap_block_pp0_stage7, zext_ln92_8_fu_471_p1, ap_block_pp0_stage8, zext_ln92_9_fu_486_p1, ap_block_pp0_stage9, zext_ln92_10_fu_501_p1, ap_block_pp0_stage10, zext_ln92_11_fu_516_p1, ap_block_pp0_stage11, zext_ln92_12_fu_531_p1, ap_block_pp0_stage12, zext_ln92_13_fu_546_p1, ap_block_pp0_stage13, zext_ln92_14_fu_561_p1, ap_block_pp0_stage14, zext_ln92_15_fu_576_p1, ap_block_pp0_stage15)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                p_in_address1 <= zext_ln92_15_fu_576_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                p_in_address1 <= zext_ln92_14_fu_561_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
                p_in_address1 <= zext_ln92_13_fu_546_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                p_in_address1 <= zext_ln92_12_fu_531_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                p_in_address1 <= zext_ln92_11_fu_516_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                p_in_address1 <= zext_ln92_10_fu_501_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                p_in_address1 <= zext_ln92_9_fu_486_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                p_in_address1 <= zext_ln92_8_fu_471_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                p_in_address1 <= zext_ln92_7_fu_456_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                p_in_address1 <= zext_ln92_6_fu_441_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                p_in_address1 <= zext_ln92_5_fu_426_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                p_in_address1 <= zext_ln92_4_fu_411_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_in_address1 <= zext_ln92_3_fu_396_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_in_address1 <= zext_ln92_2_fu_381_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_in_address1 <= zext_ln92_1_fu_366_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_in_address1 <= zext_ln92_fu_351_p1(15 - 1 downto 0);
            else 
                p_in_address1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            p_in_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            p_in_ce1 <= ap_const_logic_1;
        else 
            p_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_blk_n <= p_in_offset_empty_n;
        else 
            p_in_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_in_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n)
    begin
        if ((not(((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_read <= ap_const_logic_1;
        else 
            p_in_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    p_m_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_blk_n <= p_m_empty_n;
        else 
            p_m_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_m_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n)
    begin
        if ((not(((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_read <= ap_const_logic_1;
        else 
            p_m_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n)
    begin
        if ((not(((p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_out_blk_n_assign_proc : process(p_out_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln86_reg_701)
    begin
        if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_blk_n <= p_out_full_n;
        else 
            p_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_din <= (((((((((((((((l_v_15_fu_630_p1 & l_v_14_fu_627_p1) & l_v_13_fu_624_p1) & l_v_12_fu_621_p1) & l_v_11_fu_618_p1) & l_v_10_fu_615_p1) & l_v_9_fu_612_p1) & l_v_8_fu_609_p1) & l_v_7_fu_606_p1) & l_v_6_fu_603_p1) & l_v_5_fu_600_p1) & l_v_4_fu_597_p1) & l_v_3_fu_594_p1) & l_v_2_fu_591_p1) & l_v_1_fu_588_p1) & l_v_fu_585_p1);

    p_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln86_reg_701, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln86_reg_701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_write <= ap_const_logic_1;
        else 
            p_out_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln86_fu_326_p3 <= 
        ap_const_lv28_0 when (icmp_ln87_fu_321_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_279_p4;
    tmp_1_fu_338_p3 <= (empty_fu_334_p1 & ap_const_lv4_0);
    trunc_ln_fu_286_p4 <= p_n_dout(31 downto 4);
    zext_ln92_10_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_10_fu_496_p2),64));
    zext_ln92_11_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_11_fu_511_p2),64));
    zext_ln92_12_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_12_fu_526_p2),64));
    zext_ln92_13_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_13_fu_541_p2),64));
    zext_ln92_14_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_14_fu_556_p2),64));
    zext_ln92_15_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_15_reg_879),64));
    zext_ln92_1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_1_fu_361_p2),64));
    zext_ln92_2_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_2_fu_376_p2),64));
    zext_ln92_3_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_3_fu_391_p2),64));
    zext_ln92_4_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_4_fu_406_p2),64));
    zext_ln92_5_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_5_fu_421_p2),64));
    zext_ln92_6_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_6_fu_436_p2),64));
    zext_ln92_7_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_7_fu_451_p2),64));
    zext_ln92_8_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_8_fu_466_p2),64));
    zext_ln92_9_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_9_fu_481_p2),64));
    zext_ln92_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_fu_346_p2),64));
end behav;
