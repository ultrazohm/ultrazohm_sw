-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj123/hdlsrc/uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph.vhd
-- Created: 2022-06-05 23:09:46
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 100x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- currents_dq_output_axi_0      ce_out        1e-06
-- currents_dq_output_axi_1      ce_out        1e-06
-- currents_dq_output_axi_2      ce_out        1e-06
-- currents_dq_output_axi_3      ce_out        1e-06
-- currents_dq_output_axi_4      ce_out        1e-06
-- currents_dq_output_axi_5      ce_out        1e-06
-- currents_dq_output_axi_6      ce_out        1e-06
-- currents_dq_output_axi_7      ce_out        1e-06
-- currents_dq_output_axi_8      ce_out        1e-06
-- theta_el_axi                  ce_out        1e-06
-- M_Mi_axi                      ce_out        1e-06
-- omega_out_axi                 ce_out        1e-06
-- currents_dq_output_0          ce_out        1e-06
-- currents_dq_output_1          ce_out        1e-06
-- currents_dq_output_2          ce_out        1e-06
-- currents_dq_output_3          ce_out        1e-06
-- currents_dq_output_4          ce_out        1e-06
-- currents_dq_output_5          ce_out        1e-06
-- currents_dq_output_6          ce_out        1e-06
-- currents_dq_output_7          ce_out        1e-06
-- currents_dq_output_8          ce_out        1e-06
-- theta_el1                     ce_out        1e-06
-- voltage_input_dq_axi_fb_0     ce_out        1e-06
-- voltage_input_dq_axi_fb_1     ce_out        1e-06
-- voltage_input_dq_axi_fb_2     ce_out        1e-06
-- voltage_input_dq_axi_fb_3     ce_out        1e-06
-- voltage_input_dq_axi_fb_4     ce_out        1e-06
-- voltage_input_dq_axi_fb_5     ce_out        1e-06
-- voltage_input_dq_axi_fb_6     ce_out        1e-06
-- voltage_input_dq_axi_fb_7     ce_out        1e-06
-- voltage_input_dq_axi_fb_8     ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph
-- Source Path: uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph/dq_model_9ph
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        load_torque                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        alphareset_integrators            :   IN    std_logic;
        simulate_mechanical               :   IN    std_logic;
        omega_mech                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_0                :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        voltage_input_dq_1                :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        voltage_input_dq_2                :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        voltage_input_dq_3                :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        voltage_input_dq_4                :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        voltage_input_dq_5                :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        voltage_input_dq_6                :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        voltage_input_dq_7                :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        voltage_input_dq_8                :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        physical_parameters_1_J           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_mu            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_M_R0          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_d         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_1_L_q         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_R_1           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_polepair      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_psi_pm        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y1          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_x2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_y2          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        physical_parameters_L_z3          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        use_axi_input                     :   IN    std_logic;
        voltage_input_dq_axi_0            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_1            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_2            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_3            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_4            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_5            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_6            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_7            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_8            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        currents_dq_output_axi_0          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output_axi_1          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output_axi_2          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output_axi_3          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output_axi_4          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output_axi_5          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output_axi_6          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output_axi_7          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output_axi_8          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        theta_el_axi                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        M_Mi_axi                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        omega_out_axi                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        currents_dq_output_0              :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        currents_dq_output_1              :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        currents_dq_output_2              :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        currents_dq_output_3              :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        currents_dq_output_4              :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        currents_dq_output_5              :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        currents_dq_output_6              :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        currents_dq_output_7              :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        currents_dq_output_8              :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        theta_el1                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
        voltage_input_dq_axi_fb_0         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_fb_1         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_fb_2         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_fb_3         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_fb_4         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_fb_5         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_fb_6         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_fb_7         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        voltage_input_dq_axi_fb_8         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_100_0                     :   OUT   std_logic;
          enb_1_100_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_18_En14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph_tc
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph_tc(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_add_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double_block
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double_block(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12(rtl);

  FOR ALL : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_18_En14
    USE ENTITY work.uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_18_En14(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_100_1                      : std_logic;
  SIGNAL enb_1_100_0                      : std_logic;
  SIGNAL alpha1_L_d                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alphareset_integrators_1         : std_logic;
  SIGNAL reset_integrators                : std_logic;
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL use_axi_input_1                  : std_logic;
  SIGNAL voltage_input_dq                 : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL voltage_input_dq_9               : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL voltage_input_dq_10              : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL voltage_input_dq_axi             : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL voltage_input_dq_axi_9           : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL use_axi_input_2                  : std_logic;
  SIGNAL Data_Type_Conversion11_out1      : vector_of_std_logic_vector64(0 TO 8);  -- ufix64 [9]
  SIGNAL Data_Type_Conversion10_out1      : vector_of_std_logic_vector64(0 TO 8);  -- ufix64 [9]
  SIGNAL Switch2_out1                     : vector_of_std_logic_vector64(0 TO 8);  -- ufix64 [9]
  SIGNAL R_1                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL simulate_mechanical_1            : std_logic;
  SIGNAL simulate_mechanical_2            : std_logic;
  SIGNAL Data_Type_Conversion13_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alphareset_integrators_2         : std_logic;
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_J                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_1              : std_logic;
  SIGNAL kconst_3                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_L_q                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL physical_parameters_polepair_1   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL polepair                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL polepair_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_pm                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_q                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_3                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_4                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL pmsm_out2                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_d_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product2_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_5                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product7_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_d                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_el                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_op_stage1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered1_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_q_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL pmsm_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product3_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_1                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_2                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_3                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay2_bypass_reg                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_4                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_out1_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product11_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered10_bypass_reg      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_3                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL mechanical_system_out1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch1_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_el_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product8_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_op_stage1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_4                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered5_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_5                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_2                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_d_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_2              : std_logic;
  SIGNAL kconst_4                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion7_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_6                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_7                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide1_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_6                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered3_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_7                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_3                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_3              : std_logic;
  SIGNAL kconst_5                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_8                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_9                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide3_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide2_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_8                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered2_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_9                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_4                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_4              : std_logic;
  SIGNAL kconst_6                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_10                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_11                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide5_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide4_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_10                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered6_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_11                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_5                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_5              : std_logic;
  SIGNAL kconst_7                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion10_out1_1    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_12                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_13                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide7_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide6_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_12                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered7_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_13                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_6                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_3                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_6              : std_logic;
  SIGNAL kconst_8                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion11_out1_1    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_14                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_15                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide9_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide8_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add4_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_14                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered8_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_15                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_7                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_4                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_7              : std_logic;
  SIGNAL kconst_9                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_16                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_17                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide11_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide10_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add5_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_16                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered9_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_17                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_8                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_5                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_8              : std_logic;
  SIGNAL kconst_10                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_z3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_18                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_19                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide13_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide12_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add6_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_18                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered4_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_19                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_9                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_6                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion3_out1_1     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t4_bypass_reg                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t4_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Data_Type_Conversion3_out1_2     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL alphareset_integrators_3         : std_logic;
  SIGNAL kconst_11                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL const_1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_20                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_21                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Angular_Position                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_20                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_21                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_10                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion6_out1_1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL t2_bypass_reg                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion6_out1_2     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1_1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1_2     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1_3     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1_1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1_2     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1_3     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion8_out1_1     : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL Data_Type_Conversion8_out1_2     : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL t3_bypass_reg                    : vector_of_signed25(0 TO 8);  -- sfix25 [9]
  SIGNAL t3_bypass_reg_next               : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Data_Type_Conversion8_out1_3     : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL theta_el                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion9_out1_1     : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion9_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL t1_bypass_reg                    : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL Data_Type_Conversion9_out1_2     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Data_Type_Conversion12_out1_1    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t5_bypass_reg                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t5_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Data_Type_Conversion12_out1_2    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]

BEGIN
  -- This signal introduces an algebraic loop if simulate_mechanical is true!
  -- 
  -- PMSM electric and magentic
  -- 
  -- Mechanical
  -- 
  -- o1 equation
  -- 
  -- DQ equations
  -- 
  -- o2 equation
  -- 
  -- x1 equation
  -- 
  -- y1 equation
  -- 
  -- x2 equation
  -- 
  -- y2 equation
  -- 
  -- zero equation
  -- 
  -- load torque negative!!!
  -- 
  -- https://de.mathworks.com/help/releases/R2021a/hdlcoder/ug/troubleshoot-generate-implementation-model-from-simscape-pmsm.html?searchHighlight=troubleshoot-generate-implementation-model-from-simscape-pmsm&s_tid=doc_srchtitle

  u_dq_model_9ph_tc : uz_pmsm_model_9ph_only_dq2_src_dq_model_9ph_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_100_0 => enb_1_100_0,
              enb_1_100_1 => enb_1_100_1
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => alpha1_L_d,  -- single
              nfp_out => Data_Type_Conversion1_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_sfix_25_En12_to_double : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(voltage_input_dq_10(0)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion11_out1(0)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_sfix_25_En12_to_double_1 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(voltage_input_dq_10(1)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion11_out1(1)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_sfix_25_En12_to_double_2 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(voltage_input_dq_10(2)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion11_out1(2)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_sfix_25_En12_to_double_3 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(voltage_input_dq_10(3)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion11_out1(3)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_sfix_25_En12_to_double_4 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(voltage_input_dq_10(4)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion11_out1(4)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_sfix_25_En12_to_double_5 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(voltage_input_dq_10(5)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion11_out1(5)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_sfix_25_En12_to_double_6 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(voltage_input_dq_10(6)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion11_out1(6)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_sfix_25_En12_to_double_7 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(voltage_input_dq_10(7)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion11_out1(7)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_1 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => voltage_input_dq_axi_9(0),  -- single
              nfp_out => Data_Type_Conversion10_out1(0)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_2 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => voltage_input_dq_axi_9(1),  -- single
              nfp_out => Data_Type_Conversion10_out1(1)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_3 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => voltage_input_dq_axi_9(2),  -- single
              nfp_out => Data_Type_Conversion10_out1(2)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_4 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => voltage_input_dq_axi_9(3),  -- single
              nfp_out => Data_Type_Conversion10_out1(3)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_5 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => voltage_input_dq_axi_9(4),  -- single
              nfp_out => Data_Type_Conversion10_out1(4)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_6 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => voltage_input_dq_axi_9(5),  -- single
              nfp_out => Data_Type_Conversion10_out1(5)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_7 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => voltage_input_dq_axi_9(6),  -- single
              nfp_out => Data_Type_Conversion10_out1(6)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_8 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => voltage_input_dq_axi_9(7),  -- single
              nfp_out => Data_Type_Conversion10_out1(7)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_sfix_25_En12_to_double_8 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(voltage_input_dq_10(8)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion11_out1(8)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_9 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => voltage_input_dq_axi_9(8),  -- single
              nfp_out => Data_Type_Conversion10_out1(8)  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_10 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => R_1,  -- single
              nfp_out => Data_Type_Conversion4_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_11 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => omega_mech,  -- single
              nfp_out => Data_Type_Conversion13_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_12 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => alpha1_J,  -- single
              nfp_out => Data_Type_Conversion2_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_13 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => alpha1_L_q,  -- single
              nfp_out => Data_Type_Conversion2_out1_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_14 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => polepair,  -- single
              nfp_out => Data_Type_Conversion1_out1_1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_15 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => load_torque,  -- single
              nfp_out => Data_Type_Conversion7_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_16 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => polepair_1,  -- single
              nfp_out => Data_Type_Conversion5_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_17 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_pm,  -- single
              nfp_out => Data_Type_Conversion6_out1  -- double
              );

  u_nfp_mul_comp : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => i_d_2,  -- double
              nfp_in2 => pmsm_out2,  -- double
              nfp_out => Product2_out1  -- double
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_q_1,  -- double
              nfp_in2 => Data_Type_Conversion4_out1,  -- double
              nfp_out => Product7_out1  -- double
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el,  -- double
              nfp_in2 => psi_d,  -- double
              nfp_out => Product1_out1  -- double
              );

  u_nfp_sub_comp : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch2_out1(1),  -- double
              nfp_in2 => Product1_out1,  -- double
              nfp_out => Sum1_op_stage1  -- double
              );

  u_nfp_sub_comp_1 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum1_op_stage1,  -- double
              nfp_in2 => Product7_out1,  -- double
              nfp_out => Sum1_out1  -- double
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_3,  -- double
              nfp_in2 => Sum1_out1,  -- double
              nfp_out => Gain_out1  -- double
              );

  u_nfp_add_comp : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1,  -- double
              nfp_in2 => Delay1_out1_5,  -- double
              nfp_out => Sum3_out1  -- double
              );

  u_nfp_mul_comp_4 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_q_1,  -- double
              nfp_in2 => Data_Type_Conversion2_out1_1,  -- double
              nfp_out => I_q  -- double
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => pmsm_out1,  -- double
              nfp_in2 => I_q,  -- double
              nfp_out => Product3_out1  -- double
              );

  u_nfp_sub_comp_2 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product3_out1,  -- double
              nfp_in2 => Product2_out1,  -- double
              nfp_out => Sum3_out1_1  -- double
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_2,  -- double
              nfp_in2 => Sum3_out1_1,  -- double
              nfp_out => M_Mi  -- double
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_1,  -- double
              nfp_in2 => Data_Type_Conversion1_out1_1,  -- double
              nfp_out => M_Mi_2  -- double
              );

  u_nfp_add_comp_1 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay_out1_1,  -- double
              nfp_in2 => Data_Type_Conversion7_out1,  -- double
              nfp_out => Sum1_out1_1  -- double
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion2_out1,  -- double
              nfp_in2 => Sum1_out1_1,  -- double
              nfp_out => Product11_out1  -- double
              );

  u_nfp_mul_comp_9 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_1,  -- double
              nfp_in2 => Product11_out1,  -- double
              nfp_out => Gain_out1_1  -- double
              );

  u_nfp_add_comp_2 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_1,  -- double
              nfp_in2 => Delay1_out1_4,  -- double
              nfp_out => Sum3_out1_2  -- double
              );

  u_nfp_mul_comp_10 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch1_out1,  -- double
              nfp_in2 => Data_Type_Conversion5_out1,  -- double
              nfp_out => omega_el  -- double
              );

  u_nfp_mul_comp_11 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el_1,  -- double
              nfp_in2 => psi_q,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_mul_comp_12 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_d,  -- double
              nfp_in2 => Data_Type_Conversion4_out1,  -- double
              nfp_out => Product8_out1  -- double
              );

  u_nfp_sub_comp_3 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch2_out1(0),  -- double
              nfp_in2 => Product8_out1,  -- double
              nfp_out => Sum_op_stage1  -- double
              );

  u_nfp_add_comp_3 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_op_stage1,  -- double
              nfp_in2 => Product_out1,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_nfp_mul_comp_13 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst,  -- double
              nfp_in2 => Sum_out1,  -- double
              nfp_out => Gain_out1_2  -- double
              );

  u_nfp_add_comp_4 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_2,  -- double
              nfp_in2 => Delay1_out1_1,  -- double
              nfp_out => Sum3_out1_3  -- double
              );

  u_nfp_sub_comp_4 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_d_1,  -- double
              nfp_in2 => Data_Type_Conversion6_out1,  -- double
              nfp_out => Sum2_out1  -- double
              );

  u_nfp_mul_comp_14 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion1_out1,  -- double
              nfp_in2 => Sum2_out1,  -- double
              nfp_out => I_d  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => I_d,  -- double
              nfp_out => Data_Type_Conversion3_out1_1(0)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_1 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => I_q,  -- double
              nfp_out => Data_Type_Conversion3_out1_1(1)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_18 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => L_z1,  -- single
              nfp_out => Data_Type_Conversion7_out1_1  -- double
              );

  u_nfp_mul_comp_15 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide1_out1,  -- double
              nfp_out => Divide_out1  -- double
              );

  u_nfp_sub_comp_5 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch2_out1(2),  -- double
              nfp_in2 => Divide_out1,  -- double
              nfp_out => Add_out1  -- double
              );

  u_nfp_mul_comp_16 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_4,  -- double
              nfp_in2 => Add_out1,  -- double
              nfp_out => Gain_out1_3  -- double
              );

  u_nfp_add_comp_5 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_3,  -- double
              nfp_in2 => Delay1_out1_7,  -- double
              nfp_out => Sum3_out1_4  -- double
              );

  u_nfp_mul_comp_17 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi,  -- double
              nfp_in2 => Data_Type_Conversion7_out1_1,  -- double
              nfp_out => Divide1_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_2 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide1_out1,  -- double
              nfp_out => Data_Type_Conversion3_out1_1(2)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_19 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => L_z2,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- double
              );

  u_nfp_mul_comp_18 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide3_out1,  -- double
              nfp_out => Divide2_out1  -- double
              );

  u_nfp_sub_comp_6 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch2_out1(3),  -- double
              nfp_in2 => Divide2_out1,  -- double
              nfp_out => Add1_out1  -- double
              );

  u_nfp_mul_comp_19 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_5,  -- double
              nfp_in2 => Add1_out1,  -- double
              nfp_out => Gain_out1_4  -- double
              );

  u_nfp_add_comp_6 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_4,  -- double
              nfp_in2 => Delay1_out1_9,  -- double
              nfp_out => Sum3_out1_5  -- double
              );

  u_nfp_mul_comp_20 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_1,  -- double
              nfp_in2 => Data_Type_Conversion8_out1,  -- double
              nfp_out => Divide3_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_3 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide3_out1,  -- double
              nfp_out => Data_Type_Conversion3_out1_1(3)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_20 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => L_x1,  -- single
              nfp_out => Data_Type_Conversion9_out1  -- double
              );

  u_nfp_mul_comp_21 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide5_out1,  -- double
              nfp_out => Divide4_out1  -- double
              );

  u_nfp_sub_comp_7 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch2_out1(4),  -- double
              nfp_in2 => Divide4_out1,  -- double
              nfp_out => Add2_out1  -- double
              );

  u_nfp_mul_comp_22 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_6,  -- double
              nfp_in2 => Add2_out1,  -- double
              nfp_out => Gain_out1_5  -- double
              );

  u_nfp_add_comp_7 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_5,  -- double
              nfp_in2 => Delay1_out1_11,  -- double
              nfp_out => Sum3_out1_6  -- double
              );

  u_nfp_mul_comp_23 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_2,  -- double
              nfp_in2 => Data_Type_Conversion9_out1,  -- double
              nfp_out => Divide5_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_4 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide5_out1,  -- double
              nfp_out => Data_Type_Conversion3_out1_1(4)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_21 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => L_y1,  -- single
              nfp_out => Data_Type_Conversion10_out1_1  -- double
              );

  u_nfp_mul_comp_24 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide7_out1,  -- double
              nfp_out => Divide6_out1  -- double
              );

  u_nfp_sub_comp_8 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch2_out1(5),  -- double
              nfp_in2 => Divide6_out1,  -- double
              nfp_out => Add3_out1  -- double
              );

  u_nfp_mul_comp_25 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_7,  -- double
              nfp_in2 => Add3_out1,  -- double
              nfp_out => Gain_out1_6  -- double
              );

  u_nfp_add_comp_8 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_6,  -- double
              nfp_in2 => Delay1_out1_13,  -- double
              nfp_out => Sum3_out1_7  -- double
              );

  u_nfp_mul_comp_26 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_3,  -- double
              nfp_in2 => Data_Type_Conversion10_out1_1,  -- double
              nfp_out => Divide7_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_5 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide7_out1,  -- double
              nfp_out => Data_Type_Conversion3_out1_1(5)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_22 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => L_x2,  -- single
              nfp_out => Data_Type_Conversion11_out1_1  -- double
              );

  u_nfp_mul_comp_27 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide9_out1,  -- double
              nfp_out => Divide8_out1  -- double
              );

  u_nfp_sub_comp_9 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch2_out1(6),  -- double
              nfp_in2 => Divide8_out1,  -- double
              nfp_out => Add4_out1  -- double
              );

  u_nfp_mul_comp_28 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_8,  -- double
              nfp_in2 => Add4_out1,  -- double
              nfp_out => Gain_out1_7  -- double
              );

  u_nfp_add_comp_9 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_7,  -- double
              nfp_in2 => Delay1_out1_15,  -- double
              nfp_out => Sum3_out1_8  -- double
              );

  u_nfp_mul_comp_29 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_4,  -- double
              nfp_in2 => Data_Type_Conversion11_out1_1,  -- double
              nfp_out => Divide9_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_6 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide9_out1,  -- double
              nfp_out => Data_Type_Conversion3_out1_1(6)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_23 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => L_y2,  -- single
              nfp_out => Data_Type_Conversion12_out1  -- double
              );

  u_nfp_mul_comp_30 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide11_out1,  -- double
              nfp_out => Divide10_out1  -- double
              );

  u_nfp_sub_comp_10 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch2_out1(7),  -- double
              nfp_in2 => Divide10_out1,  -- double
              nfp_out => Add5_out1  -- double
              );

  u_nfp_mul_comp_31 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_9,  -- double
              nfp_in2 => Add5_out1,  -- double
              nfp_out => Gain_out1_8  -- double
              );

  u_nfp_add_comp_10 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_8,  -- double
              nfp_in2 => Delay1_out1_17,  -- double
              nfp_out => Sum3_out1_9  -- double
              );

  u_nfp_mul_comp_32 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_5,  -- double
              nfp_in2 => Data_Type_Conversion12_out1,  -- double
              nfp_out => Divide11_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_7 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide11_out1,  -- double
              nfp_out => Data_Type_Conversion3_out1_1(7)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_single2double_24 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => L_z3,  -- single
              nfp_out => Data_Type_Conversion3_out1  -- double
              );

  u_nfp_mul_comp_33 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion4_out1,  -- double
              nfp_in2 => Divide13_out1,  -- double
              nfp_out => Divide12_out1  -- double
              );

  u_nfp_sub_comp_11 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch2_out1(8),  -- double
              nfp_in2 => Divide12_out1,  -- double
              nfp_out => Add6_out1  -- double
              );

  u_nfp_mul_comp_34 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_10,  -- double
              nfp_in2 => Add6_out1,  -- double
              nfp_out => Gain_out1_9  -- double
              );

  u_nfp_add_comp_11 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_9,  -- double
              nfp_in2 => Delay1_out1_19,  -- double
              nfp_out => Sum3_out1_10  -- double
              );

  u_nfp_mul_comp_35 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psi_6,  -- double
              nfp_in2 => Data_Type_Conversion3_out1,  -- double
              nfp_out => Divide13_out1  -- double
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_8 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide13_out1,  -- double
              nfp_out => Data_Type_Conversion3_out1_1(8)  -- single
              );

  u_nfp_mul_comp_36 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch1_out1,  -- double
              nfp_in2 => Data_Type_Conversion1_out1_1,  -- double
              nfp_out => Product_out1_1  -- double
              );

  u_nfp_mul_comp_37 : uz_pmsm_model_9ph_only_dq2_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_11,  -- double
              nfp_in2 => Product_out1_1,  -- double
              nfp_out => Gain_out1_10  -- double
              );

  u_nfp_add_comp_12 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant_out1,  -- double
              nfp_in2 => Switch_out1,  -- double
              nfp_out => Sum2_out1_1  -- double
              );

  u_nfp_sub_comp_12 : uz_pmsm_model_9ph_only_dq2_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_out1_1,  -- double
              nfp_in2 => Constant_out1,  -- double
              nfp_out => Sum1_out1_2  -- double
              );

  u_nfp_add_comp_13 : uz_pmsm_model_9ph_only_dq2_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_21,  -- double
              nfp_in2 => Gain_out1_10,  -- double
              nfp_out => Sum_out1_1  -- double
              );

  u_nfp_relop_comp : uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_out1_1,  -- double
              nfp_in2 => const,  -- double
              nfp_out1 => Compare_To_Constant_out1
              );

  u_nfp_relop_comp_1 : uz_pmsm_model_9ph_only_dq2_src_nfp_relop_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1,  -- double
              nfp_in2 => const_1,  -- double
              nfp_out1 => Compare_To_Constant1_out1
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_9 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Delay1_out1_20,  -- double
              nfp_out => Data_Type_Conversion6_out1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_10 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => M_Mi_2,  -- double
              nfp_out => Data_Type_Conversion4_out1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_11 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch1_out1,  -- double
              nfp_out => Data_Type_Conversion5_out1_1  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_25_En12 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => I_d,  -- double
              nfp_out => Data_Type_Conversion8_out1_1(0)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_25_En12_1 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => I_q,  -- double
              nfp_out => Data_Type_Conversion8_out1_1(1)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_25_En12_2 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide1_out1,  -- double
              nfp_out => Data_Type_Conversion8_out1_1(2)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_25_En12_3 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide3_out1,  -- double
              nfp_out => Data_Type_Conversion8_out1_1(3)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_25_En12_4 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide5_out1,  -- double
              nfp_out => Data_Type_Conversion8_out1_1(4)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_25_En12_5 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide7_out1,  -- double
              nfp_out => Data_Type_Conversion8_out1_1(5)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_25_En12_6 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide9_out1,  -- double
              nfp_out => Data_Type_Conversion8_out1_1(6)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_25_En12_7 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide11_out1,  -- double
              nfp_out => Data_Type_Conversion8_out1_1(7)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_25_En12_8 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide13_out1,  -- double
              nfp_out => Data_Type_Conversion8_out1_1(8)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double_to_fixed_18_En14 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double_to_fixed_18_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => theta_el,  -- double
              nfp_out => Data_Type_Conversion9_out1_1  -- sfix18_En14
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_12 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out1(0),  -- double
              nfp_out => Data_Type_Conversion12_out1_1(0)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_13 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out1(1),  -- double
              nfp_out => Data_Type_Conversion12_out1_1(1)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_14 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out1(2),  -- double
              nfp_out => Data_Type_Conversion12_out1_1(2)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_15 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out1(3),  -- double
              nfp_out => Data_Type_Conversion12_out1_1(3)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_16 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out1(4),  -- double
              nfp_out => Data_Type_Conversion12_out1_1(4)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_17 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out1(5),  -- double
              nfp_out => Data_Type_Conversion12_out1_1(5)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_18 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out1(6),  -- double
              nfp_out => Data_Type_Conversion12_out1_1(6)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_19 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out1(7),  -- double
              nfp_out => Data_Type_Conversion12_out1_1(7)  -- single
              );

  u_uz_pmsm_model_9ph_21b_all_double_uz_pmsm_model_9ph_dq_model_9ph_nfp_convert_double2single_20 : uz_pmsm_model_9ph_only_dq2_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch2_out1(8),  -- double
              nfp_out => Data_Type_Conversion12_out1_1(8)  -- single
              );

  alpha1_L_d <= physical_parameters_1_L_d;

  alphareset_integrators_1 <= alphareset_integrators;

  delayMatch27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators <= '0';
      ELSIF enb = '1' THEN
        reset_integrators <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch27_process;


  kconst <= X"3eb0c6f7a0b5ed8d";

  use_axi_input_1 <= use_axi_input;

  voltage_input_dq(0) <= voltage_input_dq_0;
  voltage_input_dq(1) <= voltage_input_dq_1;
  voltage_input_dq(2) <= voltage_input_dq_2;
  voltage_input_dq(3) <= voltage_input_dq_3;
  voltage_input_dq(4) <= voltage_input_dq_4;
  voltage_input_dq(5) <= voltage_input_dq_5;
  voltage_input_dq(6) <= voltage_input_dq_6;
  voltage_input_dq(7) <= voltage_input_dq_7;
  voltage_input_dq(8) <= voltage_input_dq_8;

  outputgen1: FOR k IN 0 TO 8 GENERATE
    voltage_input_dq_9(k) <= signed(voltage_input_dq(k));
  END GENERATE;

  voltage_input_dq_10 <= voltage_input_dq_9;

  voltage_input_dq_axi(0) <= voltage_input_dq_axi_0;
  voltage_input_dq_axi(1) <= voltage_input_dq_axi_1;
  voltage_input_dq_axi(2) <= voltage_input_dq_axi_2;
  voltage_input_dq_axi(3) <= voltage_input_dq_axi_3;
  voltage_input_dq_axi(4) <= voltage_input_dq_axi_4;
  voltage_input_dq_axi(5) <= voltage_input_dq_axi_5;
  voltage_input_dq_axi(6) <= voltage_input_dq_axi_6;
  voltage_input_dq_axi(7) <= voltage_input_dq_axi_7;
  voltage_input_dq_axi(8) <= voltage_input_dq_axi_8;

  voltage_input_dq_axi_9 <= voltage_input_dq_axi;

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        use_axi_input_2 <= '0';
      ELSIF enb = '1' THEN
        use_axi_input_2 <= use_axi_input_1;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;




  
  Switch2_out1(0) <= Data_Type_Conversion11_out1(0) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion10_out1(0);
  
  Switch2_out1(1) <= Data_Type_Conversion11_out1(1) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion10_out1(1);
  
  Switch2_out1(2) <= Data_Type_Conversion11_out1(2) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion10_out1(2);
  
  Switch2_out1(3) <= Data_Type_Conversion11_out1(3) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion10_out1(3);
  
  Switch2_out1(4) <= Data_Type_Conversion11_out1(4) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion10_out1(4);
  
  Switch2_out1(5) <= Data_Type_Conversion11_out1(5) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion10_out1(5);
  
  Switch2_out1(6) <= Data_Type_Conversion11_out1(6) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion10_out1(6);
  
  Switch2_out1(7) <= Data_Type_Conversion11_out1(7) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion10_out1(7);
  
  Switch2_out1(8) <= Data_Type_Conversion11_out1(8) WHEN use_axi_input_2 = '0' ELSE
      Data_Type_Conversion10_out1(8);

  R_1 <= physical_parameters_R_1;

  simulate_mechanical_1 <= simulate_mechanical;

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        simulate_mechanical_2 <= '0';
      ELSIF enb = '1' THEN
        simulate_mechanical_2 <= simulate_mechanical_1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  delayMatch38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alphareset_integrators_2 <= '0';
      ELSIF enb = '1' THEN
        alphareset_integrators_2 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch38_process;


  kconst_1 <= X"3eb0c6f7a0b5ed8d";

  alpha1_J <= physical_parameters_1_J;

  kconst_2 <= X"4012000000000000";

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_1 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_1 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  kconst_3 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv <= X"0000000000000000";

  alpha1_L_q <= physical_parameters_1_L_q;

  physical_parameters_polepair_1 <= physical_parameters_polepair;

  polepair <= physical_parameters_polepair_1;

  Delay1_iv_1 <= X"0000000000000000";

  polepair_1 <= physical_parameters_polepair_1;

  Delay1_iv_2 <= X"0000000000000000";

  psi_pm <= physical_parameters_psi_pm;

  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch26_process;


  delayMatch25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_q <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_q <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch25_process;


  delayMatch37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_4 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_4 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS delayMatch37_process;


  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pmsm_out2 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        pmsm_out2 <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  I_d_1 <= I_d;

  i_d_2 <= I_d_1;

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_5 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_5 <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  I_q_1 <= I_q;

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_d <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_d <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  
  Delay1_toDel <= Sum3_out1 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv;

  Delay1_lowered1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered1_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered1_bypass_reg <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS Delay1_lowered1_bypass_process;

  
  Delay1_toDel_1 <= Delay1_toDel WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered1_bypass_reg;

  Delay1_delOut <= Delay1_toDel_1;

  
  Delay1_out1_2 <= Delay1_delOut WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv;

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_q_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_q_1 <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pmsm_out1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        pmsm_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  M_Mi_1 <= M_Mi;

  M_Mi_3 <= M_Mi_2;

  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay2_bypass_reg <= M_Mi_3;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  M_Mi_4 <= M_Mi_3 WHEN enb_1_100_1 = '1' ELSE
      Delay2_bypass_reg;

  Delay_out1 <= M_Mi_4;

  delayMatch36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay_out1_1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS delayMatch36_process;


  
  Delay1_toDel_2 <= Sum3_out1_2 WHEN alphareset_integrators_2 = '0' ELSE
      Delay1_iv_1;

  Delay1_lowered10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered10_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered10_bypass_reg <= Delay1_toDel_2;
      END IF;
    END IF;
  END PROCESS Delay1_lowered10_bypass_process;

  
  Delay1_toDel_3 <= Delay1_toDel_2 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered10_bypass_reg;

  Delay1_delOut_1 <= Delay1_toDel_3;

  
  Delay1_out1_3 <= Delay1_delOut_1 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_1;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        mechanical_system_out1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        mechanical_system_out1 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  Switch1_out1 <= Data_Type_Conversion13_out1 WHEN simulate_mechanical_2 = '0' ELSE
      mechanical_system_out1;

  omega_el_1 <= omega_el;

  
  Delay1_toDel_4 <= Sum3_out1_3 WHEN reset_integrators = '0' ELSE
      Delay1_iv_2;

  Delay1_lowered5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered5_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered5_bypass_reg <= Delay1_toDel_4;
      END IF;
    END IF;
  END PROCESS Delay1_lowered5_bypass_process;

  
  Delay1_toDel_5 <= Delay1_toDel_4 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered5_bypass_reg;

  Delay1_delOut_2 <= Delay1_toDel_5;

  
  Delay1_out1 <= Delay1_delOut_2 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_2;

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_d_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_d_1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_2 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_2 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch22_process;


  kconst_4 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_3 <= X"0000000000000000";

  L_z1 <= physical_parameters_L_z1;

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_7 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_7 <= Delay1_out1_6;
      END IF;
    END IF;
  END PROCESS delayMatch21_process;


  
  Delay1_toDel_6 <= Sum3_out1_4 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_3;

  Delay1_lowered3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered3_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered3_bypass_reg <= Delay1_toDel_6;
      END IF;
    END IF;
  END PROCESS Delay1_lowered3_bypass_process;

  
  Delay1_toDel_7 <= Delay1_toDel_6 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered3_bypass_reg;

  Delay1_delOut_3 <= Delay1_toDel_7;

  
  Delay1_out1_6 <= Delay1_delOut_3 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_3;

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi <= Delay1_out1_6;
      END IF;
    END IF;
  END PROCESS delayMatch12_process;


  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_3 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_3 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch20_process;


  kconst_5 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_4 <= X"0000000000000000";

  L_z2 <= physical_parameters_L_z2;

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_9 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_9 <= Delay1_out1_8;
      END IF;
    END IF;
  END PROCESS delayMatch19_process;


  
  Delay1_toDel_8 <= Sum3_out1_5 WHEN reset_integrators_3 = '0' ELSE
      Delay1_iv_4;

  Delay1_lowered2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered2_bypass_reg <= Delay1_toDel_8;
      END IF;
    END IF;
  END PROCESS Delay1_lowered2_bypass_process;

  
  Delay1_toDel_9 <= Delay1_toDel_8 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered2_bypass_reg;

  Delay1_delOut_4 <= Delay1_toDel_9;

  
  Delay1_out1_8 <= Delay1_delOut_4 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_4;

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_1 <= Delay1_out1_8;
      END IF;
    END IF;
  END PROCESS delayMatch13_process;


  delayMatch29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_4 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_4 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch29_process;


  kconst_6 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_5 <= X"0000000000000000";

  L_x1 <= physical_parameters_L_x1;

  delayMatch28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_11 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_11 <= Delay1_out1_10;
      END IF;
    END IF;
  END PROCESS delayMatch28_process;


  
  Delay1_toDel_10 <= Sum3_out1_6 WHEN reset_integrators_4 = '0' ELSE
      Delay1_iv_5;

  Delay1_lowered6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered6_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered6_bypass_reg <= Delay1_toDel_10;
      END IF;
    END IF;
  END PROCESS Delay1_lowered6_bypass_process;

  
  Delay1_toDel_11 <= Delay1_toDel_10 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered6_bypass_reg;

  Delay1_delOut_5 <= Delay1_toDel_11;

  
  Delay1_out1_10 <= Delay1_delOut_5 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_5;

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_2 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_2 <= Delay1_out1_10;
      END IF;
    END IF;
  END PROCESS delayMatch14_process;


  delayMatch31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_5 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_5 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch31_process;


  kconst_7 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_6 <= X"0000000000000000";

  L_y1 <= physical_parameters_L_y1;

  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_13 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_13 <= Delay1_out1_12;
      END IF;
    END IF;
  END PROCESS delayMatch30_process;


  
  Delay1_toDel_12 <= Sum3_out1_7 WHEN reset_integrators_5 = '0' ELSE
      Delay1_iv_6;

  Delay1_lowered7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered7_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered7_bypass_reg <= Delay1_toDel_12;
      END IF;
    END IF;
  END PROCESS Delay1_lowered7_bypass_process;

  
  Delay1_toDel_13 <= Delay1_toDel_12 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered7_bypass_reg;

  Delay1_delOut_6 <= Delay1_toDel_13;

  
  Delay1_out1_12 <= Delay1_delOut_6 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_6;

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_3 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_3 <= Delay1_out1_12;
      END IF;
    END IF;
  END PROCESS delayMatch15_process;


  delayMatch33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_6 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_6 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch33_process;


  kconst_8 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_7 <= X"0000000000000000";

  L_x2 <= physical_parameters_L_x2;

  delayMatch32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_15 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_15 <= Delay1_out1_14;
      END IF;
    END IF;
  END PROCESS delayMatch32_process;


  
  Delay1_toDel_14 <= Sum3_out1_8 WHEN reset_integrators_6 = '0' ELSE
      Delay1_iv_7;

  Delay1_lowered8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered8_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered8_bypass_reg <= Delay1_toDel_14;
      END IF;
    END IF;
  END PROCESS Delay1_lowered8_bypass_process;

  
  Delay1_toDel_15 <= Delay1_toDel_14 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered8_bypass_reg;

  Delay1_delOut_7 <= Delay1_toDel_15;

  
  Delay1_out1_14 <= Delay1_delOut_7 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_7;

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_4 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_4 <= Delay1_out1_14;
      END IF;
    END IF;
  END PROCESS delayMatch16_process;


  delayMatch35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_7 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_7 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch35_process;


  kconst_9 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_8 <= X"0000000000000000";

  L_y2 <= physical_parameters_L_y2;

  delayMatch34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_17 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_17 <= Delay1_out1_16;
      END IF;
    END IF;
  END PROCESS delayMatch34_process;


  
  Delay1_toDel_16 <= Sum3_out1_9 WHEN reset_integrators_7 = '0' ELSE
      Delay1_iv_8;

  Delay1_lowered9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered9_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered9_bypass_reg <= Delay1_toDel_16;
      END IF;
    END IF;
  END PROCESS Delay1_lowered9_bypass_process;

  
  Delay1_toDel_17 <= Delay1_toDel_16 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered9_bypass_reg;

  Delay1_delOut_8 <= Delay1_toDel_17;

  
  Delay1_out1_16 <= Delay1_delOut_8 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_8;

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_5 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_5 <= Delay1_out1_16;
      END IF;
    END IF;
  END PROCESS delayMatch17_process;


  delayMatch24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_8 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_8 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch24_process;


  kconst_10 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_9 <= X"0000000000000000";

  L_z3 <= physical_parameters_L_z3;

  delayMatch23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_19 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_19 <= Delay1_out1_18;
      END IF;
    END IF;
  END PROCESS delayMatch23_process;


  
  Delay1_toDel_18 <= Sum3_out1_10 WHEN reset_integrators_8 = '0' ELSE
      Delay1_iv_9;

  Delay1_lowered4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered4_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered4_bypass_reg <= Delay1_toDel_18;
      END IF;
    END IF;
  END PROCESS Delay1_lowered4_bypass_process;

  
  Delay1_toDel_19 <= Delay1_toDel_18 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered4_bypass_reg;

  Delay1_delOut_9 <= Delay1_toDel_19;

  
  Delay1_out1_18 <= Delay1_delOut_9 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_9;

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        psi_6 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        psi_6 <= Delay1_out1_18;
      END IF;
    END IF;
  END PROCESS delayMatch18_process;



  t4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t4_bypass_reg(0) <= X"00000000";
        t4_bypass_reg(1) <= X"00000000";
        t4_bypass_reg(2) <= X"00000000";
        t4_bypass_reg(3) <= X"00000000";
        t4_bypass_reg(4) <= X"00000000";
        t4_bypass_reg(5) <= X"00000000";
        t4_bypass_reg(6) <= X"00000000";
        t4_bypass_reg(7) <= X"00000000";
        t4_bypass_reg(8) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t4_bypass_reg(0) <= t4_bypass_reg_next(0);
        t4_bypass_reg(1) <= t4_bypass_reg_next(1);
        t4_bypass_reg(2) <= t4_bypass_reg_next(2);
        t4_bypass_reg(3) <= t4_bypass_reg_next(3);
        t4_bypass_reg(4) <= t4_bypass_reg_next(4);
        t4_bypass_reg(5) <= t4_bypass_reg_next(5);
        t4_bypass_reg(6) <= t4_bypass_reg_next(6);
        t4_bypass_reg(7) <= t4_bypass_reg_next(7);
        t4_bypass_reg(8) <= t4_bypass_reg_next(8);
      END IF;
    END IF;
  END PROCESS t4_bypass_process;

  
  Data_Type_Conversion3_out1_2(0) <= Data_Type_Conversion3_out1_1(0) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(0);
  
  Data_Type_Conversion3_out1_2(1) <= Data_Type_Conversion3_out1_1(1) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(1);
  
  Data_Type_Conversion3_out1_2(2) <= Data_Type_Conversion3_out1_1(2) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(2);
  
  Data_Type_Conversion3_out1_2(3) <= Data_Type_Conversion3_out1_1(3) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(3);
  
  Data_Type_Conversion3_out1_2(4) <= Data_Type_Conversion3_out1_1(4) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(4);
  
  Data_Type_Conversion3_out1_2(5) <= Data_Type_Conversion3_out1_1(5) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(5);
  
  Data_Type_Conversion3_out1_2(6) <= Data_Type_Conversion3_out1_1(6) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(6);
  
  Data_Type_Conversion3_out1_2(7) <= Data_Type_Conversion3_out1_1(7) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(7);
  
  Data_Type_Conversion3_out1_2(8) <= Data_Type_Conversion3_out1_1(8) WHEN enb_1_100_1 = '1' ELSE
      t4_bypass_reg(8);
  t4_bypass_reg_next(0) <= Data_Type_Conversion3_out1_1(0);
  t4_bypass_reg_next(1) <= Data_Type_Conversion3_out1_1(1);
  t4_bypass_reg_next(2) <= Data_Type_Conversion3_out1_1(2);
  t4_bypass_reg_next(3) <= Data_Type_Conversion3_out1_1(3);
  t4_bypass_reg_next(4) <= Data_Type_Conversion3_out1_1(4);
  t4_bypass_reg_next(5) <= Data_Type_Conversion3_out1_1(5);
  t4_bypass_reg_next(6) <= Data_Type_Conversion3_out1_1(6);
  t4_bypass_reg_next(7) <= Data_Type_Conversion3_out1_1(7);
  t4_bypass_reg_next(8) <= Data_Type_Conversion3_out1_1(8);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alphareset_integrators_3 <= '0';
      ELSIF enb = '1' THEN
        alphareset_integrators_3 <= alphareset_integrators_1;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  kconst_11 <= X"3eb0c6f7a0b5ed8d";

  const <= X"400921fb60000000";

  Constant_out1 <= X"401921fb54442d18";

  const_1 <= X"c00921fb60000000";

  Delay1_iv_10 <= X"0000000000000000";

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_21 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_out1_21 <= Delay1_out1_20;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  
  Switch_out1 <= Sum_out1_1 WHEN Compare_To_Constant_out1 = '0' ELSE
      Sum1_out1_2;

  
  Angular_Position <= Switch_out1 WHEN Compare_To_Constant1_out1 = '0' ELSE
      Sum2_out1_1;

  
  Delay1_toDel_20 <= Angular_Position WHEN alphareset_integrators_3 = '0' ELSE
      Delay1_iv_10;

  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel_20;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_21 <= Delay1_toDel_20 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut_10 <= Delay1_toDel_21;

  
  Delay1_out1_20 <= Delay1_delOut_10 WHEN alphareset_integrators_1 = '0' ELSE
      Delay1_iv_10;

  t2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t2_bypass_reg <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t2_bypass_reg <= Data_Type_Conversion6_out1_1;
      END IF;
    END IF;
  END PROCESS t2_bypass_process;

  
  Data_Type_Conversion6_out1_2 <= Data_Type_Conversion6_out1_1 WHEN enb_1_100_1 = '1' ELSE
      t2_bypass_reg;

  Delay1_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion4_out1_2 <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Data_Type_Conversion4_out1_2 <= Data_Type_Conversion4_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_output_process;


  delayMatch39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion4_out1_3 <= X"00000000";
      ELSIF enb_1_100_0 = '1' THEN
        Data_Type_Conversion4_out1_3 <= Data_Type_Conversion4_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch39_process;


  Delay_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion5_out1_2 <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        Data_Type_Conversion5_out1_2 <= Data_Type_Conversion5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_output_process;


  delayMatch40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion5_out1_3 <= X"00000000";
      ELSIF enb_1_100_0 = '1' THEN
        Data_Type_Conversion5_out1_3 <= Data_Type_Conversion5_out1_2;
      END IF;
    END IF;
  END PROCESS delayMatch40_process;



  outputgen: FOR k IN 0 TO 8 GENERATE
    Data_Type_Conversion8_out1_2(k) <= signed(Data_Type_Conversion8_out1_1(k));
  END GENERATE;

  t3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t3_bypass_reg(0) <= to_signed(16#0000000#, 25);
        t3_bypass_reg(1) <= to_signed(16#0000000#, 25);
        t3_bypass_reg(2) <= to_signed(16#0000000#, 25);
        t3_bypass_reg(3) <= to_signed(16#0000000#, 25);
        t3_bypass_reg(4) <= to_signed(16#0000000#, 25);
        t3_bypass_reg(5) <= to_signed(16#0000000#, 25);
        t3_bypass_reg(6) <= to_signed(16#0000000#, 25);
        t3_bypass_reg(7) <= to_signed(16#0000000#, 25);
        t3_bypass_reg(8) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_100_1 = '1' THEN
        t3_bypass_reg(0) <= t3_bypass_reg_next(0);
        t3_bypass_reg(1) <= t3_bypass_reg_next(1);
        t3_bypass_reg(2) <= t3_bypass_reg_next(2);
        t3_bypass_reg(3) <= t3_bypass_reg_next(3);
        t3_bypass_reg(4) <= t3_bypass_reg_next(4);
        t3_bypass_reg(5) <= t3_bypass_reg_next(5);
        t3_bypass_reg(6) <= t3_bypass_reg_next(6);
        t3_bypass_reg(7) <= t3_bypass_reg_next(7);
        t3_bypass_reg(8) <= t3_bypass_reg_next(8);
      END IF;
    END IF;
  END PROCESS t3_bypass_process;

  
  Data_Type_Conversion8_out1_3(0) <= Data_Type_Conversion8_out1_2(0) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(0);
  
  Data_Type_Conversion8_out1_3(1) <= Data_Type_Conversion8_out1_2(1) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(1);
  
  Data_Type_Conversion8_out1_3(2) <= Data_Type_Conversion8_out1_2(2) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(2);
  
  Data_Type_Conversion8_out1_3(3) <= Data_Type_Conversion8_out1_2(3) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(3);
  
  Data_Type_Conversion8_out1_3(4) <= Data_Type_Conversion8_out1_2(4) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(4);
  
  Data_Type_Conversion8_out1_3(5) <= Data_Type_Conversion8_out1_2(5) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(5);
  
  Data_Type_Conversion8_out1_3(6) <= Data_Type_Conversion8_out1_2(6) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(6);
  
  Data_Type_Conversion8_out1_3(7) <= Data_Type_Conversion8_out1_2(7) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(7);
  
  Data_Type_Conversion8_out1_3(8) <= Data_Type_Conversion8_out1_2(8) WHEN enb_1_100_1 = '1' ELSE
      t3_bypass_reg(8);
  t3_bypass_reg_next(0) <= Data_Type_Conversion8_out1_2(0);
  t3_bypass_reg_next(1) <= Data_Type_Conversion8_out1_2(1);
  t3_bypass_reg_next(2) <= Data_Type_Conversion8_out1_2(2);
  t3_bypass_reg_next(3) <= Data_Type_Conversion8_out1_2(3);
  t3_bypass_reg_next(4) <= Data_Type_Conversion8_out1_2(4);
  t3_bypass_reg_next(5) <= Data_Type_Conversion8_out1_2(5);
  t3_bypass_reg_next(6) <= Data_Type_Conversion8_out1_2(6);
  t3_bypass_reg_next(7) <= Data_Type_Conversion8_out1_2(7);
  t3_bypass_reg_next(8) <= Data_Type_Conversion8_out1_2(8);

  currents_dq_output_0 <= std_logic_vector(Data_Type_Conversion8_out1_3(0));

  currents_dq_output_1 <= std_logic_vector(Data_Type_Conversion8_out1_3(1));

  currents_dq_output_2 <= std_logic_vector(Data_Type_Conversion8_out1_3(2));

  currents_dq_output_3 <= std_logic_vector(Data_Type_Conversion8_out1_3(3));

  currents_dq_output_4 <= std_logic_vector(Data_Type_Conversion8_out1_3(4));

  currents_dq_output_5 <= std_logic_vector(Data_Type_Conversion8_out1_3(5));

  currents_dq_output_6 <= std_logic_vector(Data_Type_Conversion8_out1_3(6));

  currents_dq_output_7 <= std_logic_vector(Data_Type_Conversion8_out1_3(7));

  currents_dq_output_8 <= std_logic_vector(Data_Type_Conversion8_out1_3(8));

  theta_el <= Delay1_out1_20;

  Data_Type_Conversion9_out1_signed <= signed(Data_Type_Conversion9_out1_1);

  t1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t1_bypass_reg <= to_signed(16#00000#, 18);
      ELSIF enb_1_100_1 = '1' THEN
        t1_bypass_reg <= Data_Type_Conversion9_out1_signed;
      END IF;
    END IF;
  END PROCESS t1_bypass_process;

  
  Data_Type_Conversion9_out1_2 <= Data_Type_Conversion9_out1_signed WHEN enb_1_100_1 = '1' ELSE
      t1_bypass_reg;

  theta_el1 <= std_logic_vector(Data_Type_Conversion9_out1_2);


  t5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t5_bypass_reg(0) <= X"00000000";
        t5_bypass_reg(1) <= X"00000000";
        t5_bypass_reg(2) <= X"00000000";
        t5_bypass_reg(3) <= X"00000000";
        t5_bypass_reg(4) <= X"00000000";
        t5_bypass_reg(5) <= X"00000000";
        t5_bypass_reg(6) <= X"00000000";
        t5_bypass_reg(7) <= X"00000000";
        t5_bypass_reg(8) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t5_bypass_reg(0) <= t5_bypass_reg_next(0);
        t5_bypass_reg(1) <= t5_bypass_reg_next(1);
        t5_bypass_reg(2) <= t5_bypass_reg_next(2);
        t5_bypass_reg(3) <= t5_bypass_reg_next(3);
        t5_bypass_reg(4) <= t5_bypass_reg_next(4);
        t5_bypass_reg(5) <= t5_bypass_reg_next(5);
        t5_bypass_reg(6) <= t5_bypass_reg_next(6);
        t5_bypass_reg(7) <= t5_bypass_reg_next(7);
        t5_bypass_reg(8) <= t5_bypass_reg_next(8);
      END IF;
    END IF;
  END PROCESS t5_bypass_process;

  
  Data_Type_Conversion12_out1_2(0) <= Data_Type_Conversion12_out1_1(0) WHEN enb_1_100_1 = '1' ELSE
      t5_bypass_reg(0);
  
  Data_Type_Conversion12_out1_2(1) <= Data_Type_Conversion12_out1_1(1) WHEN enb_1_100_1 = '1' ELSE
      t5_bypass_reg(1);
  
  Data_Type_Conversion12_out1_2(2) <= Data_Type_Conversion12_out1_1(2) WHEN enb_1_100_1 = '1' ELSE
      t5_bypass_reg(2);
  
  Data_Type_Conversion12_out1_2(3) <= Data_Type_Conversion12_out1_1(3) WHEN enb_1_100_1 = '1' ELSE
      t5_bypass_reg(3);
  
  Data_Type_Conversion12_out1_2(4) <= Data_Type_Conversion12_out1_1(4) WHEN enb_1_100_1 = '1' ELSE
      t5_bypass_reg(4);
  
  Data_Type_Conversion12_out1_2(5) <= Data_Type_Conversion12_out1_1(5) WHEN enb_1_100_1 = '1' ELSE
      t5_bypass_reg(5);
  
  Data_Type_Conversion12_out1_2(6) <= Data_Type_Conversion12_out1_1(6) WHEN enb_1_100_1 = '1' ELSE
      t5_bypass_reg(6);
  
  Data_Type_Conversion12_out1_2(7) <= Data_Type_Conversion12_out1_1(7) WHEN enb_1_100_1 = '1' ELSE
      t5_bypass_reg(7);
  
  Data_Type_Conversion12_out1_2(8) <= Data_Type_Conversion12_out1_1(8) WHEN enb_1_100_1 = '1' ELSE
      t5_bypass_reg(8);
  t5_bypass_reg_next(0) <= Data_Type_Conversion12_out1_1(0);
  t5_bypass_reg_next(1) <= Data_Type_Conversion12_out1_1(1);
  t5_bypass_reg_next(2) <= Data_Type_Conversion12_out1_1(2);
  t5_bypass_reg_next(3) <= Data_Type_Conversion12_out1_1(3);
  t5_bypass_reg_next(4) <= Data_Type_Conversion12_out1_1(4);
  t5_bypass_reg_next(5) <= Data_Type_Conversion12_out1_1(5);
  t5_bypass_reg_next(6) <= Data_Type_Conversion12_out1_1(6);
  t5_bypass_reg_next(7) <= Data_Type_Conversion12_out1_1(7);
  t5_bypass_reg_next(8) <= Data_Type_Conversion12_out1_1(8);

  ce_out <= enb_1_100_1;

  currents_dq_output_axi_0 <= Data_Type_Conversion3_out1_2(0);

  currents_dq_output_axi_1 <= Data_Type_Conversion3_out1_2(1);

  currents_dq_output_axi_2 <= Data_Type_Conversion3_out1_2(2);

  currents_dq_output_axi_3 <= Data_Type_Conversion3_out1_2(3);

  currents_dq_output_axi_4 <= Data_Type_Conversion3_out1_2(4);

  currents_dq_output_axi_5 <= Data_Type_Conversion3_out1_2(5);

  currents_dq_output_axi_6 <= Data_Type_Conversion3_out1_2(6);

  currents_dq_output_axi_7 <= Data_Type_Conversion3_out1_2(7);

  currents_dq_output_axi_8 <= Data_Type_Conversion3_out1_2(8);

  theta_el_axi <= Data_Type_Conversion6_out1_2;

  M_Mi_axi <= Data_Type_Conversion4_out1_3;

  omega_out_axi <= Data_Type_Conversion5_out1_3;

  voltage_input_dq_axi_fb_0 <= Data_Type_Conversion12_out1_2(0);

  voltage_input_dq_axi_fb_1 <= Data_Type_Conversion12_out1_2(1);

  voltage_input_dq_axi_fb_2 <= Data_Type_Conversion12_out1_2(2);

  voltage_input_dq_axi_fb_3 <= Data_Type_Conversion12_out1_2(3);

  voltage_input_dq_axi_fb_4 <= Data_Type_Conversion12_out1_2(4);

  voltage_input_dq_axi_fb_5 <= Data_Type_Conversion12_out1_2(5);

  voltage_input_dq_axi_fb_6 <= Data_Type_Conversion12_out1_2(6);

  voltage_input_dq_axi_fb_7 <= Data_Type_Conversion12_out1_2(7);

  voltage_input_dq_axi_fb_8 <= Data_Type_Conversion12_out1_2(8);

END rtl;

