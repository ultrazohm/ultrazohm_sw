-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\Min_cost_function_and_vopt_FCS_MPC_6Phase_PMSM\hdlsrc\min_cost_function_and_vopt_FCS_MPC_6Phase_PMSM\min_cost_function_and_vopt_FCS_MPC_6Phase_addr_decoder.vhd
-- Created: 2022-08-29 13:17:35
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: min_cost_function_and_vopt_FCS_MPC_6Phase_addr_decoder
-- Source Path: min_cost_function_and_vopt_FCS_MPC_6Phase/min_cost_function_and_vopt_FCS_MPC_6Phase_axi_lite/min_cost_function_and_vopt_FCS_MPC_6Phase_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY min_cost_function_and_vopt_FCS_MPC_6Phase_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_last_applied_optimal_voltage_uy_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        read_last_applied_optimal_voltage_ux_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        read_last_applied_optimal_voltage_uq_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        read_last_applied_optimal_voltage_ud_AXI :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        read_done_complete_AXI            :   IN    std_logic;  -- ufix1
        read_Index_out_AXI                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_use_AXI                     :   OUT   std_logic;  -- ufix1
        write_J_in_AXI                    :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        write_Index_in_AXI                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        write_d_phase_voltage_per_switchimng_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        write_q_phase_voltage_per_switchimng_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        write_x_phase_voltage_per_switchimng_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        write_y_phase_voltage_per_switchimng_state_AXI :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        write_valid_in_AXI                :   OUT   std_logic  -- ufix1
        );
END min_cost_function_and_vopt_FCS_MPC_6Phase_addr_decoder;


ARCHITECTURE rtl OF min_cost_function_and_vopt_FCS_MPC_6Phase_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL read_last_applied_optimal_voltage_uy_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL read_last_applied_optimal_voltage_ux_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL read_last_applied_optimal_voltage_uq_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL read_last_applied_optimal_voltage_ud_AXI_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL read_Index_out_AXI_signed        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_Index_out_AXI_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_done_complete_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_last_applied_optimal_voltage_ud_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_last_applied_optimal_voltage_uq_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_last_applied_optimal_voltage_ux_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_last_applied_optimal_voltage_uy_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_last_applied_optimal_voltage_uy_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_slice_last_applied_optimal_voltage_uy_AXI_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_last_applied_optimal_voltage_uy_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_last_applied_optimal_voltage_ux_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_slice_last_applied_optimal_voltage_ux_AXI_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_last_applied_optimal_voltage_ux_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_last_applied_optimal_voltage_uq_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_slice_last_applied_optimal_voltage_uq_AXI_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_last_applied_optimal_voltage_uq_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_last_applied_optimal_voltage_ud_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_slice_last_applied_optimal_voltage_ud_AXI_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_last_applied_optimal_voltage_ud_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_done_complete_AXI       : std_logic;  -- ufix1
  SIGNAL data_slice_done_complete_AXI_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_done_complete_AXI_1_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Index_out_AXI           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_slice_Index_out_AXI_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Index_out_AXI_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_use_AXI_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_use_AXI_1_1              : std_logic;  -- ufix1
  SIGNAL data_in_use_AXI                  : std_logic;  -- ufix1
  SIGNAL data_reg_use_AXI_1_1             : std_logic;  -- ufix1
  SIGNAL decode_sel_J_in_AXI_1_1          : std_logic;  -- ufix1
  SIGNAL reg_enb_J_in_AXI_1_1             : std_logic;  -- ufix1
  SIGNAL data_in_J_in_AXI                 : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL data_reg_J_in_AXI_1_1            : signed(19 DOWNTO 0);  -- sfix20_En11
  SIGNAL decode_sel_Index_in_AXI_1_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_Index_in_AXI_1_1         : std_logic;  -- ufix1
  SIGNAL data_in_Index_in_AXI             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_reg_Index_in_AXI_1_1        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_d_phase_voltage_per_switchimng_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_d_phase_voltage_per_switchimng_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_d_phase_voltage_per_switchimng_state_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_d_phase_voltage_per_switchimng_state_AXI_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL decode_sel_q_phase_voltage_per_switchimng_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_q_phase_voltage_per_switchimng_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_q_phase_voltage_per_switchimng_state_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_q_phase_voltage_per_switchimng_state_AXI_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL decode_sel_x_phase_voltage_per_switchimng_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_x_phase_voltage_per_switchimng_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_x_phase_voltage_per_switchimng_state_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_x_phase_voltage_per_switchimng_state_AXI_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL decode_sel_y_phase_voltage_per_switchimng_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_y_phase_voltage_per_switchimng_state_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_y_phase_voltage_per_switchimng_state_AXI : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_y_phase_voltage_per_switchimng_state_AXI_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL decode_sel_valid_in_AXI_1_1      : std_logic;  -- ufix1
  SIGNAL reg_enb_valid_in_AXI_1_1         : std_logic;  -- ufix1
  SIGNAL data_in_valid_in_AXI             : std_logic;  -- ufix1
  SIGNAL data_reg_valid_in_AXI_1_1        : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1_1 <= '1';

  enb <= const_1_1;

  read_last_applied_optimal_voltage_uy_AXI_signed <= signed(read_last_applied_optimal_voltage_uy_AXI);

  read_last_applied_optimal_voltage_ux_AXI_signed <= signed(read_last_applied_optimal_voltage_ux_AXI);

  read_last_applied_optimal_voltage_uq_AXI_signed <= signed(read_last_applied_optimal_voltage_uq_AXI);

  read_last_applied_optimal_voltage_ud_AXI_signed <= signed(read_last_applied_optimal_voltage_ud_AXI);

  read_Index_out_AXI_signed <= signed(read_Index_out_AXI);

  
  decode_sel_Index_out_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  
  decode_sel_done_complete_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  
  decode_sel_last_applied_optimal_voltage_ud_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  
  decode_sel_last_applied_optimal_voltage_uq_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  
  decode_sel_last_applied_optimal_voltage_ux_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  
  decode_sel_last_applied_optimal_voltage_uy_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_last_applied_optimal_voltage_uy_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_last_applied_optimal_voltage_uy_AXI <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_last_applied_optimal_voltage_uy_AXI <= read_last_applied_optimal_voltage_uy_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_last_applied_optimal_voltage_uy_AXI_process;


  data_slice_last_applied_optimal_voltage_uy_AXI_1 <= unsigned(resize(read_reg_last_applied_optimal_voltage_uy_AXI, 32));

  
  decode_rd_last_applied_optimal_voltage_uy_AXI_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_last_applied_optimal_voltage_uy_AXI_1_1 = '0' ELSE
      data_slice_last_applied_optimal_voltage_uy_AXI_1;

  reg_last_applied_optimal_voltage_ux_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_last_applied_optimal_voltage_ux_AXI <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_last_applied_optimal_voltage_ux_AXI <= read_last_applied_optimal_voltage_ux_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_last_applied_optimal_voltage_ux_AXI_process;


  data_slice_last_applied_optimal_voltage_ux_AXI_1 <= unsigned(resize(read_reg_last_applied_optimal_voltage_ux_AXI, 32));

  
  decode_rd_last_applied_optimal_voltage_ux_AXI_1_1 <= decode_rd_last_applied_optimal_voltage_uy_AXI_1_1 WHEN decode_sel_last_applied_optimal_voltage_ux_AXI_1_1 = '0' ELSE
      data_slice_last_applied_optimal_voltage_ux_AXI_1;

  reg_last_applied_optimal_voltage_uq_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_last_applied_optimal_voltage_uq_AXI <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_last_applied_optimal_voltage_uq_AXI <= read_last_applied_optimal_voltage_uq_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_last_applied_optimal_voltage_uq_AXI_process;


  data_slice_last_applied_optimal_voltage_uq_AXI_1 <= unsigned(resize(read_reg_last_applied_optimal_voltage_uq_AXI, 32));

  
  decode_rd_last_applied_optimal_voltage_uq_AXI_1_1 <= decode_rd_last_applied_optimal_voltage_ux_AXI_1_1 WHEN decode_sel_last_applied_optimal_voltage_uq_AXI_1_1 = '0' ELSE
      data_slice_last_applied_optimal_voltage_uq_AXI_1;

  reg_last_applied_optimal_voltage_ud_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_last_applied_optimal_voltage_ud_AXI <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_last_applied_optimal_voltage_ud_AXI <= read_last_applied_optimal_voltage_ud_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_last_applied_optimal_voltage_ud_AXI_process;


  data_slice_last_applied_optimal_voltage_ud_AXI_1 <= unsigned(resize(read_reg_last_applied_optimal_voltage_ud_AXI, 32));

  
  decode_rd_last_applied_optimal_voltage_ud_AXI_1_1 <= decode_rd_last_applied_optimal_voltage_uq_AXI_1_1 WHEN decode_sel_last_applied_optimal_voltage_ud_AXI_1_1 = '0' ELSE
      data_slice_last_applied_optimal_voltage_ud_AXI_1;

  reg_done_complete_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_done_complete_AXI <= '0';
      ELSIF enb = '1' THEN
        read_reg_done_complete_AXI <= read_done_complete_AXI;
      END IF;
    END IF;
  END PROCESS reg_done_complete_AXI_process;


  data_slice_done_complete_AXI_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_done_complete_AXI;

  
  decode_rd_done_complete_AXI_1_1 <= decode_rd_last_applied_optimal_voltage_ud_AXI_1_1 WHEN decode_sel_done_complete_AXI_1_1 = '0' ELSE
      data_slice_done_complete_AXI_1;

  reg_Index_out_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_Index_out_AXI <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        read_reg_Index_out_AXI <= read_Index_out_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_Index_out_AXI_process;


  data_slice_Index_out_AXI_1 <= unsigned(read_reg_Index_out_AXI);

  
  decode_rd_Index_out_AXI_1_1 <= decode_rd_done_complete_AXI_1_1 WHEN decode_sel_Index_out_AXI_1_1 = '0' ELSE
      data_slice_Index_out_AXI_1;

  data_read <= std_logic_vector(decode_rd_Index_out_AXI_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  
  decode_sel_use_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_use_AXI_1_1 <= decode_sel_use_AXI_1_1 AND wr_enb;

  data_in_use_AXI <= data_write_unsigned(0);

  reg_use_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_use_AXI_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_use_AXI_1_1 = '1' THEN
        data_reg_use_AXI_1_1 <= data_in_use_AXI;
      END IF;
    END IF;
  END PROCESS reg_use_AXI_1_1_process;


  
  decode_sel_J_in_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_J_in_AXI_1_1 <= decode_sel_J_in_AXI_1_1 AND wr_enb;

  data_in_J_in_AXI <= signed(data_write_unsigned(19 DOWNTO 0));

  reg_J_in_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_J_in_AXI_1_1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' AND reg_enb_J_in_AXI_1_1 = '1' THEN
        data_reg_J_in_AXI_1_1 <= data_in_J_in_AXI;
      END IF;
    END IF;
  END PROCESS reg_J_in_AXI_1_1_process;


  write_J_in_AXI <= std_logic_vector(data_reg_J_in_AXI_1_1);

  
  decode_sel_Index_in_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_Index_in_AXI_1_1 <= decode_sel_Index_in_AXI_1_1 AND wr_enb;

  data_in_Index_in_AXI <= signed(data_write_unsigned);

  reg_Index_in_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Index_in_AXI_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_Index_in_AXI_1_1 = '1' THEN
        data_reg_Index_in_AXI_1_1 <= data_in_Index_in_AXI;
      END IF;
    END IF;
  END PROCESS reg_Index_in_AXI_1_1_process;


  write_Index_in_AXI <= std_logic_vector(data_reg_Index_in_AXI_1_1);

  
  decode_sel_d_phase_voltage_per_switchimng_state_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_d_phase_voltage_per_switchimng_state_AXI_1_1 <= decode_sel_d_phase_voltage_per_switchimng_state_AXI_1_1 AND wr_enb;

  data_in_d_phase_voltage_per_switchimng_state_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_d_phase_voltage_per_switchimng_state_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_d_phase_voltage_per_switchimng_state_AXI_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_d_phase_voltage_per_switchimng_state_AXI_1_1 = '1' THEN
        data_reg_d_phase_voltage_per_switchimng_state_AXI_1_1 <= data_in_d_phase_voltage_per_switchimng_state_AXI;
      END IF;
    END IF;
  END PROCESS reg_d_phase_voltage_per_switchimng_state_AXI_1_1_process;


  write_d_phase_voltage_per_switchimng_state_AXI <= std_logic_vector(data_reg_d_phase_voltage_per_switchimng_state_AXI_1_1);

  
  decode_sel_q_phase_voltage_per_switchimng_state_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_q_phase_voltage_per_switchimng_state_AXI_1_1 <= decode_sel_q_phase_voltage_per_switchimng_state_AXI_1_1 AND wr_enb;

  data_in_q_phase_voltage_per_switchimng_state_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_q_phase_voltage_per_switchimng_state_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_q_phase_voltage_per_switchimng_state_AXI_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_q_phase_voltage_per_switchimng_state_AXI_1_1 = '1' THEN
        data_reg_q_phase_voltage_per_switchimng_state_AXI_1_1 <= data_in_q_phase_voltage_per_switchimng_state_AXI;
      END IF;
    END IF;
  END PROCESS reg_q_phase_voltage_per_switchimng_state_AXI_1_1_process;


  write_q_phase_voltage_per_switchimng_state_AXI <= std_logic_vector(data_reg_q_phase_voltage_per_switchimng_state_AXI_1_1);

  
  decode_sel_x_phase_voltage_per_switchimng_state_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_x_phase_voltage_per_switchimng_state_AXI_1_1 <= decode_sel_x_phase_voltage_per_switchimng_state_AXI_1_1 AND wr_enb;

  data_in_x_phase_voltage_per_switchimng_state_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_x_phase_voltage_per_switchimng_state_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_x_phase_voltage_per_switchimng_state_AXI_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_x_phase_voltage_per_switchimng_state_AXI_1_1 = '1' THEN
        data_reg_x_phase_voltage_per_switchimng_state_AXI_1_1 <= data_in_x_phase_voltage_per_switchimng_state_AXI;
      END IF;
    END IF;
  END PROCESS reg_x_phase_voltage_per_switchimng_state_AXI_1_1_process;


  write_x_phase_voltage_per_switchimng_state_AXI <= std_logic_vector(data_reg_x_phase_voltage_per_switchimng_state_AXI_1_1);

  
  decode_sel_y_phase_voltage_per_switchimng_state_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_y_phase_voltage_per_switchimng_state_AXI_1_1 <= decode_sel_y_phase_voltage_per_switchimng_state_AXI_1_1 AND wr_enb;

  data_in_y_phase_voltage_per_switchimng_state_AXI <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_y_phase_voltage_per_switchimng_state_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_y_phase_voltage_per_switchimng_state_AXI_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_y_phase_voltage_per_switchimng_state_AXI_1_1 = '1' THEN
        data_reg_y_phase_voltage_per_switchimng_state_AXI_1_1 <= data_in_y_phase_voltage_per_switchimng_state_AXI;
      END IF;
    END IF;
  END PROCESS reg_y_phase_voltage_per_switchimng_state_AXI_1_1_process;


  write_y_phase_voltage_per_switchimng_state_AXI <= std_logic_vector(data_reg_y_phase_voltage_per_switchimng_state_AXI_1_1);

  
  decode_sel_valid_in_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_valid_in_AXI_1_1 <= decode_sel_valid_in_AXI_1_1 AND wr_enb;

  data_in_valid_in_AXI <= data_write_unsigned(0);

  reg_valid_in_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_valid_in_AXI_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_valid_in_AXI_1_1 = '1' THEN
        data_reg_valid_in_AXI_1_1 <= data_in_valid_in_AXI;
      END IF;
    END IF;
  END PROCESS reg_valid_in_AXI_1_1_process;


  write_axi_enable <= data_reg_axi_enable_1_1;

  write_use_AXI <= data_reg_use_AXI_1_1;

  write_valid_in_AXI <= data_reg_valid_in_AXI_1_1;

END rtl;

