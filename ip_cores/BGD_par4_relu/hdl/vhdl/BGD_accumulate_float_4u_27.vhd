-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_accumulate_float_4u_27 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_values_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    p_values_empty_n : IN STD_LOGIC;
    p_values_read : OUT STD_LOGIC;
    p_accumulator_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_accumulator_ce0 : OUT STD_LOGIC;
    p_accumulator_we0 : OUT STD_LOGIC;
    p_accumulator_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_accumulator_ce1 : OUT STD_LOGIC;
    p_accumulator_we1 : OUT STD_LOGIC;
    p_accumulator_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_size_empty_n : IN STD_LOGIC;
    p_size_read : OUT STD_LOGIC );
end;


architecture behav of BGD_accumulate_float_4u_27 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_values_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln409_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_size_blk_n : STD_LOGIC;
    signal i_reg_125 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln409_reg_269_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal trunc_ln_reg_264 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln409_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln409_reg_269_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln409_fu_160_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln409_reg_273 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_170_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_278 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_reg_284 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_reg_284_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_1_reg_289 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_1_reg_289_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_1_reg_289_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln674_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_Result_i_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_16_i_reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_i_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_1_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_2_reg_325 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_2_reg_325_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_2_reg_325_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_3_reg_331 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_3_reg_331_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal p_accumulator_addr_3_reg_331_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln101_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_2_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_load_3_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_20_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_21_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_22_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_2_i_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal add3_3_i_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_129_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln416_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_1_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_2_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_3_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_136_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_166_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln416_fu_183_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln416_1_fu_228_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln416_2_fu_238_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_136_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component BGD_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U437 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_136_p0,
        din1 => grp_fu_136_p1,
        ce => grp_fu_136_ce,
        dout => grp_fu_136_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_125 <= ap_const_lv30_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln409_reg_269 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_125 <= add_ln409_reg_273;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_269_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add3_2_i_reg_366 <= grp_fu_136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln409_reg_269_pp0_iter2_reg = ap_const_lv1_0))) then
                add3_3_i_reg_371 <= grp_fu_136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln409_reg_273 <= add_ln409_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln409_reg_269 <= icmp_ln409_fu_155_p2;
                icmp_ln409_reg_269_pp0_iter1_reg <= icmp_ln409_reg_269;
                icmp_ln409_reg_269_pp0_iter2_reg <= icmp_ln409_reg_269_pp0_iter1_reg;
                    p_accumulator_addr_1_reg_289_pp0_iter1_reg(8 downto 2) <= p_accumulator_addr_1_reg_289(8 downto 2);
                    p_accumulator_addr_1_reg_289_pp0_iter2_reg(8 downto 2) <= p_accumulator_addr_1_reg_289_pp0_iter1_reg(8 downto 2);
                    p_accumulator_addr_reg_284_pp0_iter1_reg(8 downto 2) <= p_accumulator_addr_reg_284(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_269 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Result_16_i_reg_305 <= p_values_dout(95 downto 64);
                p_Result_17_i_reg_310 <= p_values_dout(127 downto 96);
                p_Result_i_reg_300 <= p_values_dout(63 downto 32);
                    p_accumulator_addr_2_reg_325(8 downto 2) <= zext_ln416_2_fu_233_p1(9 - 1 downto 0)(8 downto 2);
                    p_accumulator_addr_3_reg_331(8 downto 2) <= zext_ln416_3_fu_243_p1(9 - 1 downto 0)(8 downto 2);
                trunc_ln674_reg_295 <= trunc_ln674_fu_194_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln409_fu_155_p2 = ap_const_lv1_0))) then
                    p_accumulator_addr_1_reg_289(8 downto 2) <= zext_ln416_1_fu_189_p1(9 - 1 downto 0)(8 downto 2);
                    p_accumulator_addr_reg_284(8 downto 2) <= zext_ln416_fu_178_p1(9 - 1 downto 0)(8 downto 2);
                    tmp_s_reg_278(8 downto 2) <= tmp_s_fu_170_p3(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    p_accumulator_addr_2_reg_325_pp0_iter1_reg(8 downto 2) <= p_accumulator_addr_2_reg_325(8 downto 2);
                    p_accumulator_addr_2_reg_325_pp0_iter2_reg(8 downto 2) <= p_accumulator_addr_2_reg_325_pp0_iter1_reg(8 downto 2);
                    p_accumulator_addr_3_reg_331_pp0_iter1_reg(8 downto 2) <= p_accumulator_addr_3_reg_331(8 downto 2);
                    p_accumulator_addr_3_reg_331_pp0_iter2_reg(8 downto 2) <= p_accumulator_addr_3_reg_331_pp0_iter1_reg(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_269 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_accumulator_load_1_reg_320 <= p_accumulator_q0;
                p_accumulator_load_reg_315 <= p_accumulator_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln409_reg_269 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                p_accumulator_load_2_reg_341 <= p_accumulator_q1;
                p_accumulator_load_3_reg_346 <= p_accumulator_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln409_reg_269_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln409_reg_269_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_140 <= grp_fu_136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln_reg_264 <= p_size_dout(31 downto 2);
            end if;
        end if;
    end process;
    tmp_s_reg_278(1 downto 0) <= "00";
    p_accumulator_addr_reg_284(1 downto 0) <= "00";
    p_accumulator_addr_reg_284_pp0_iter1_reg(1 downto 0) <= "00";
    p_accumulator_addr_1_reg_289(1 downto 0) <= "01";
    p_accumulator_addr_1_reg_289_pp0_iter1_reg(1 downto 0) <= "01";
    p_accumulator_addr_1_reg_289_pp0_iter2_reg(1 downto 0) <= "01";
    p_accumulator_addr_2_reg_325(1 downto 0) <= "10";
    p_accumulator_addr_2_reg_325_pp0_iter1_reg(1 downto 0) <= "10";
    p_accumulator_addr_2_reg_325_pp0_iter2_reg(1 downto 0) <= "10";
    p_accumulator_addr_3_reg_331(1 downto 0) <= "11";
    p_accumulator_addr_3_reg_331_pp0_iter1_reg(1 downto 0) <= "11";
    p_accumulator_addr_3_reg_331_pp0_iter2_reg(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_size_empty_n, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, icmp_ln409_fu_155_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln409_fu_155_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln409_fu_155_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln409_fu_160_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_129_p4) + unsigned(ap_const_lv30_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(p_values_empty_n, ap_enable_reg_pp0_iter0, icmp_ln409_reg_269)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln409_reg_269 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (p_values_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(p_values_empty_n, ap_enable_reg_pp0_iter0, icmp_ln409_reg_269)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln409_reg_269 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (p_values_empty_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_size_empty_n)
    begin
                ap_block_state1 <= ((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(p_values_empty_n, icmp_ln409_reg_269)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln409_reg_269 = ap_const_lv1_0) and (p_values_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln409_fu_155_p2)
    begin
        if ((icmp_ln409_fu_155_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_129_p4_assign_proc : process(icmp_ln409_reg_269, i_reg_125, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, add_ln409_reg_273, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln409_reg_269 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_129_p4 <= add_ln409_reg_273;
        else 
            ap_phi_mux_i_phi_fu_129_p4 <= i_reg_125;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln101_20_fu_252_p1 <= p_Result_i_reg_300;
    bitcast_ln101_21_fu_256_p1 <= p_Result_16_i_reg_305;
    bitcast_ln101_22_fu_260_p1 <= p_Result_17_i_reg_310;
    bitcast_ln101_fu_248_p1 <= trunc_ln674_reg_295;
    empty_fu_166_p1 <= ap_phi_mux_i_phi_fu_129_p4(7 - 1 downto 0);

    grp_fu_136_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_136_ce <= ap_const_logic_1;
        else 
            grp_fu_136_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_136_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, p_accumulator_load_reg_315, p_accumulator_load_1_reg_320, p_accumulator_load_2_reg_341, p_accumulator_load_3_reg_346, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_136_p0 <= p_accumulator_load_3_reg_346;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_136_p0 <= p_accumulator_load_2_reg_341;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_136_p0 <= p_accumulator_load_1_reg_320;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_136_p0 <= p_accumulator_load_reg_315;
        else 
            grp_fu_136_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_136_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, bitcast_ln101_fu_248_p1, bitcast_ln101_20_fu_252_p1, bitcast_ln101_21_fu_256_p1, bitcast_ln101_22_fu_260_p1, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_136_p1 <= bitcast_ln101_22_fu_260_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_136_p1 <= bitcast_ln101_21_fu_256_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_136_p1 <= bitcast_ln101_20_fu_252_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_136_p1 <= bitcast_ln101_fu_248_p1;
        else 
            grp_fu_136_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln409_fu_155_p2 <= "1" when (ap_phi_mux_i_phi_fu_129_p4 = trunc_ln_reg_264) else "0";
    or_ln416_1_fu_228_p2 <= (tmp_s_reg_278 or ap_const_lv9_2);
    or_ln416_2_fu_238_p2 <= (tmp_s_reg_278 or ap_const_lv9_3);
    or_ln416_fu_183_p2 <= (tmp_s_fu_170_p3 or ap_const_lv9_1);

    p_accumulator_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, p_accumulator_addr_2_reg_325_pp0_iter2_reg, p_accumulator_addr_3_reg_331_pp0_iter2_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln416_1_fu_189_p1, zext_ln416_3_fu_243_p1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_accumulator_address0 <= p_accumulator_addr_3_reg_331_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            p_accumulator_address0 <= p_accumulator_addr_2_reg_325_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_accumulator_address0 <= zext_ln416_3_fu_243_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_accumulator_address0 <= zext_ln416_1_fu_189_p1(9 - 1 downto 0);
        else 
            p_accumulator_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    p_accumulator_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, p_accumulator_addr_reg_284_pp0_iter1_reg, p_accumulator_addr_1_reg_289_pp0_iter2_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln416_fu_178_p1, zext_ln416_2_fu_233_p1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            p_accumulator_address1 <= p_accumulator_addr_1_reg_289_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_accumulator_address1 <= p_accumulator_addr_reg_284_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_accumulator_address1 <= zext_ln416_2_fu_233_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_accumulator_address1 <= zext_ln416_fu_178_p1(9 - 1 downto 0);
        else 
            p_accumulator_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    p_accumulator_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            p_accumulator_ce0 <= ap_const_logic_1;
        else 
            p_accumulator_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_accumulator_ce1 <= ap_const_logic_1;
        else 
            p_accumulator_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_d0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, add3_2_i_reg_366, ap_enable_reg_pp0_iter2, add3_3_i_reg_371, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_accumulator_d0 <= add3_3_i_reg_371;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_accumulator_d0 <= add3_2_i_reg_366;
            else 
                p_accumulator_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            p_accumulator_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    p_accumulator_d1 <= reg_140;

    p_accumulator_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, icmp_ln409_reg_269_pp0_iter2_reg, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln409_reg_269_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln409_reg_269_pp0_iter2_reg = ap_const_lv1_0)))) then 
            p_accumulator_we0 <= ap_const_logic_1;
        else 
            p_accumulator_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_we1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_11001, icmp_ln409_reg_269_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, icmp_ln409_reg_269_pp0_iter2_reg, ap_enable_reg_pp0_iter2)
    begin
        if ((((icmp_ln409_reg_269_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln409_reg_269_pp0_iter2_reg = ap_const_lv1_0)))) then 
            p_accumulator_we1 <= ap_const_logic_1;
        else 
            p_accumulator_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_size_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_size_blk_n <= p_size_empty_n;
        else 
            p_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_size_empty_n)
    begin
        if ((not(((p_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_size_read <= ap_const_logic_1;
        else 
            p_size_read <= ap_const_logic_0;
        end if; 
    end process;


    p_values_blk_n_assign_proc : process(p_values_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln409_reg_269)
    begin
        if (((icmp_ln409_reg_269 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_values_blk_n <= p_values_empty_n;
        else 
            p_values_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_values_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln409_reg_269, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln409_reg_269 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_values_read <= ap_const_logic_1;
        else 
            p_values_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_170_p3 <= (empty_fu_166_p1 & ap_const_lv2_0);
    trunc_ln674_fu_194_p1 <= p_values_dout(32 - 1 downto 0);
    zext_ln416_1_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_fu_183_p2),64));
    zext_ln416_2_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_1_fu_228_p2),64));
    zext_ln416_3_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln416_2_fu_238_p2),64));
    zext_ln416_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_170_p3),64));
end behav;
