-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_phase_voltages\hdlsrc\parallel_8_phase_voltages\parallel_8_sim_phase_voltages_src_MATLAB_Function13.vhd
-- Created: 2022-12-12 16:21:13
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_sim_phase_voltages_src_MATLAB_Function13
-- Source Path: parallel_8_phase_voltages/Phase_voltages_per_switching_state1/Subsystem/MATLAB Function13
-- Hierarchy Level: 2
-- 
-- Initial condition
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_8_sim_phase_voltages_src_Phase_voltages_per_switching_state1_pkg.ALL;

ENTITY parallel_8_sim_phase_voltages_src_MATLAB_Function13 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        sin_theta_el                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        cos_theta_el                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        u_dc_link_voltage                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Index                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        d_voltage_per_switching_state     :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        q_voltage_per_switching_state     :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        x_voltage_per_switching_state     :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        y_voltage_per_switching_state     :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END parallel_8_sim_phase_voltages_src_MATLAB_Function13;


ARCHITECTURE rtl OF parallel_8_sim_phase_voltages_src_MATLAB_Function13 IS

  -- Component Declarations
  COMPONENT parallel_8_sim_phase_voltages_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_phase_voltages_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_phase_voltages_src_nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_sim_phase_voltages_src_nfp_mul_single
    USE ENTITY work.parallel_8_sim_phase_voltages_src_nfp_mul_single(rtl);

  FOR ALL : parallel_8_sim_phase_voltages_src_nfp_add_single
    USE ENTITY work.parallel_8_sim_phase_voltages_src_nfp_add_single(rtl);

  FOR ALL : parallel_8_sim_phase_voltages_src_nfp_uminus_single
    USE ENTITY work.parallel_8_sim_phase_voltages_src_nfp_uminus_single(rtl);

  -- Signals
  SIGNAL delayMatch7_out_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch7_1_reg                : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch7_out_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch7_out_3                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch7_out_4                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch7_1_reg_1              : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch7_1_reg_2              : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch7_1_reg_3              : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch7_1_reg_next           : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch7_1_reg_next_1         : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch7_1_reg_next_2         : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch7_1_reg_next_3         : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL Factors_d_q_x_y                  : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL c33_Factors_alpha_beta_x_y       : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL Factors_alpha_beta_x_y           : matrix_of_std_logic_vector32(0 TO 3, 0 TO 7);  -- ufix32 [4x8]
  SIGNAL Index_signed                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL const_expression                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL adder_add_temp                   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Index_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL out0                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Factors_d_q_x_y_1                : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL c27_Factors_alpha_beta_x_y       : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL Factors_alpha_beta_x_y_1         : matrix_of_std_logic_vector32(0 TO 3, 0 TO 7);  -- ufix32 [4x8]
  SIGNAL out0_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Factors_d_q_x_y_2                : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Factors_d_q_x_y_0                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Factors_d_q_x_y_1_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Factors_d_q_x_y_2_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Factors_d_q_x_y_3                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch4_out_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch4_1_reg                : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch4_out_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch4_out_3                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch4_out_4                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch4_1_reg_1              : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch4_1_reg_2              : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch4_1_reg_3              : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch4_1_reg_next           : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch4_1_reg_next_1         : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch4_1_reg_next_2         : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL delayMatch4_1_reg_next_3         : vector_of_std_logic_vector32(0 TO 14);  -- ufix32 [15]
  SIGNAL Factors_d_q_x_y_4                : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL c32_Factors_alpha_beta_x_y       : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL Factors_alpha_beta_x_y_2         : matrix_of_std_logic_vector32(0 TO 3, 0 TO 7);  -- ufix32 [4x8]
  SIGNAL out0_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch2_reg                  : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL delayMatch2_reg_next             : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL out0_3                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_4                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL c31_Factors_alpha_beta_x_y       : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL Factors_alpha_beta_x_y_3         : matrix_of_std_logic_vector32(0 TO 3, 0 TO 7);  -- ufix32 [4x8]
  SIGNAL out0_5                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch3_reg                  : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL delayMatch3_reg_next             : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL out0_6                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_7                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_8                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Factors_d_q_x_y_5                : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL out0_9                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL c24_Factors_alpha_beta_x_y       : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL Factors_alpha_beta_x_y_4         : matrix_of_std_logic_vector32(0 TO 3, 0 TO 7);  -- ufix32 [4x8]
  SIGNAL out0_10                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch5_reg                  : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL delayMatch5_reg_next             : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL out0_11                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_12                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL c23_Factors_alpha_beta_x_y       : vector_of_std_logic_vector32(0 TO 31);  -- ufix32 [32]
  SIGNAL Factors_alpha_beta_x_y_5         : matrix_of_std_logic_vector32(0 TO 3, 0 TO 7);  -- ufix32 [4x8]
  SIGNAL out0_13                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch6_reg                  : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL delayMatch6_reg_next             : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL out0_14                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_15                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_16                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Factors_d_q_x_y_6                : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL nfp_out_1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_3_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_4_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_mul_comp : parallel_8_sim_phase_voltages_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => cos_theta_el,  -- single
              nfp_in2 => out0_3,  -- single
              nfp_out => out0_4  -- single
              );

  u_nfp_mul_comp_1 : parallel_8_sim_phase_voltages_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => sin_theta_el,  -- single
              nfp_in2 => out0_6,  -- single
              nfp_out => out0_7  -- single
              );

  u_nfp_add_comp : parallel_8_sim_phase_voltages_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_4,  -- single
              nfp_in2 => out0_7,  -- single
              nfp_out => out0_8  -- single
              );

  u_nfp_uminus_comp : parallel_8_sim_phase_voltages_src_nfp_uminus_single
    PORT MAP( nfp_in => sin_theta_el,  -- single
              nfp_out => out0_9  -- single
              );

  u_nfp_mul_comp_2 : parallel_8_sim_phase_voltages_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_9,  -- single
              nfp_in2 => out0_11,  -- single
              nfp_out => out0_12  -- single
              );

  u_nfp_mul_comp_3 : parallel_8_sim_phase_voltages_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => cos_theta_el,  -- single
              nfp_in2 => out0_14,  -- single
              nfp_out => out0_15  -- single
              );

  u_nfp_add_comp_1 : parallel_8_sim_phase_voltages_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_12,  -- single
              nfp_in2 => out0_15,  -- single
              nfp_out => out0_16  -- single
              );

  -- Calculation of the voltages per switching state in alpha beta coordinates
  u_nfp_mul_comp_4 : parallel_8_sim_phase_voltages_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => delayMatch7_out_1,  -- single
              nfp_in2 => Factors_d_q_x_y_6(0),  -- single
              nfp_out => nfp_out_1_1  -- single
              );

  u_nfp_mul_comp_5 : parallel_8_sim_phase_voltages_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => delayMatch7_out_2,  -- single
              nfp_in2 => Factors_d_q_x_y_6(1),  -- single
              nfp_out => nfp_out_2_1  -- single
              );

  u_nfp_mul_comp_6 : parallel_8_sim_phase_voltages_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => delayMatch7_out_3,  -- single
              nfp_in2 => Factors_d_q_x_y_6(2),  -- single
              nfp_out => nfp_out_3_1  -- single
              );

  u_nfp_mul_comp_7 : parallel_8_sim_phase_voltages_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => delayMatch7_out_4,  -- single
              nfp_in2 => Factors_d_q_x_y_6(3),  -- single
              nfp_out => nfp_out_4_1  -- single
              );

  delayMatch7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch7_1_reg(0) <= X"00000000";
        delayMatch7_1_reg(1) <= X"00000000";
        delayMatch7_1_reg(2) <= X"00000000";
        delayMatch7_1_reg(3) <= X"00000000";
        delayMatch7_1_reg(4) <= X"00000000";
        delayMatch7_1_reg(5) <= X"00000000";
        delayMatch7_1_reg(6) <= X"00000000";
        delayMatch7_1_reg(7) <= X"00000000";
        delayMatch7_1_reg(8) <= X"00000000";
        delayMatch7_1_reg(9) <= X"00000000";
        delayMatch7_1_reg(10) <= X"00000000";
        delayMatch7_1_reg(11) <= X"00000000";
        delayMatch7_1_reg(12) <= X"00000000";
        delayMatch7_1_reg(13) <= X"00000000";
        delayMatch7_1_reg(14) <= X"00000000";
        delayMatch7_1_reg_1(0) <= X"00000000";
        delayMatch7_1_reg_1(1) <= X"00000000";
        delayMatch7_1_reg_1(2) <= X"00000000";
        delayMatch7_1_reg_1(3) <= X"00000000";
        delayMatch7_1_reg_1(4) <= X"00000000";
        delayMatch7_1_reg_1(5) <= X"00000000";
        delayMatch7_1_reg_1(6) <= X"00000000";
        delayMatch7_1_reg_1(7) <= X"00000000";
        delayMatch7_1_reg_1(8) <= X"00000000";
        delayMatch7_1_reg_1(9) <= X"00000000";
        delayMatch7_1_reg_1(10) <= X"00000000";
        delayMatch7_1_reg_1(11) <= X"00000000";
        delayMatch7_1_reg_1(12) <= X"00000000";
        delayMatch7_1_reg_1(13) <= X"00000000";
        delayMatch7_1_reg_1(14) <= X"00000000";
        delayMatch7_1_reg_2(0) <= X"00000000";
        delayMatch7_1_reg_2(1) <= X"00000000";
        delayMatch7_1_reg_2(2) <= X"00000000";
        delayMatch7_1_reg_2(3) <= X"00000000";
        delayMatch7_1_reg_2(4) <= X"00000000";
        delayMatch7_1_reg_2(5) <= X"00000000";
        delayMatch7_1_reg_2(6) <= X"00000000";
        delayMatch7_1_reg_2(7) <= X"00000000";
        delayMatch7_1_reg_2(8) <= X"00000000";
        delayMatch7_1_reg_2(9) <= X"00000000";
        delayMatch7_1_reg_2(10) <= X"00000000";
        delayMatch7_1_reg_2(11) <= X"00000000";
        delayMatch7_1_reg_2(12) <= X"00000000";
        delayMatch7_1_reg_2(13) <= X"00000000";
        delayMatch7_1_reg_2(14) <= X"00000000";
        delayMatch7_1_reg_3(0) <= X"00000000";
        delayMatch7_1_reg_3(1) <= X"00000000";
        delayMatch7_1_reg_3(2) <= X"00000000";
        delayMatch7_1_reg_3(3) <= X"00000000";
        delayMatch7_1_reg_3(4) <= X"00000000";
        delayMatch7_1_reg_3(5) <= X"00000000";
        delayMatch7_1_reg_3(6) <= X"00000000";
        delayMatch7_1_reg_3(7) <= X"00000000";
        delayMatch7_1_reg_3(8) <= X"00000000";
        delayMatch7_1_reg_3(9) <= X"00000000";
        delayMatch7_1_reg_3(10) <= X"00000000";
        delayMatch7_1_reg_3(11) <= X"00000000";
        delayMatch7_1_reg_3(12) <= X"00000000";
        delayMatch7_1_reg_3(13) <= X"00000000";
        delayMatch7_1_reg_3(14) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch7_1_reg(0) <= delayMatch7_1_reg_next(0);
        delayMatch7_1_reg(1) <= delayMatch7_1_reg_next(1);
        delayMatch7_1_reg(2) <= delayMatch7_1_reg_next(2);
        delayMatch7_1_reg(3) <= delayMatch7_1_reg_next(3);
        delayMatch7_1_reg(4) <= delayMatch7_1_reg_next(4);
        delayMatch7_1_reg(5) <= delayMatch7_1_reg_next(5);
        delayMatch7_1_reg(6) <= delayMatch7_1_reg_next(6);
        delayMatch7_1_reg(7) <= delayMatch7_1_reg_next(7);
        delayMatch7_1_reg(8) <= delayMatch7_1_reg_next(8);
        delayMatch7_1_reg(9) <= delayMatch7_1_reg_next(9);
        delayMatch7_1_reg(10) <= delayMatch7_1_reg_next(10);
        delayMatch7_1_reg(11) <= delayMatch7_1_reg_next(11);
        delayMatch7_1_reg(12) <= delayMatch7_1_reg_next(12);
        delayMatch7_1_reg(13) <= delayMatch7_1_reg_next(13);
        delayMatch7_1_reg(14) <= delayMatch7_1_reg_next(14);
        delayMatch7_1_reg_1(0) <= delayMatch7_1_reg_next_1(0);
        delayMatch7_1_reg_1(1) <= delayMatch7_1_reg_next_1(1);
        delayMatch7_1_reg_1(2) <= delayMatch7_1_reg_next_1(2);
        delayMatch7_1_reg_1(3) <= delayMatch7_1_reg_next_1(3);
        delayMatch7_1_reg_1(4) <= delayMatch7_1_reg_next_1(4);
        delayMatch7_1_reg_1(5) <= delayMatch7_1_reg_next_1(5);
        delayMatch7_1_reg_1(6) <= delayMatch7_1_reg_next_1(6);
        delayMatch7_1_reg_1(7) <= delayMatch7_1_reg_next_1(7);
        delayMatch7_1_reg_1(8) <= delayMatch7_1_reg_next_1(8);
        delayMatch7_1_reg_1(9) <= delayMatch7_1_reg_next_1(9);
        delayMatch7_1_reg_1(10) <= delayMatch7_1_reg_next_1(10);
        delayMatch7_1_reg_1(11) <= delayMatch7_1_reg_next_1(11);
        delayMatch7_1_reg_1(12) <= delayMatch7_1_reg_next_1(12);
        delayMatch7_1_reg_1(13) <= delayMatch7_1_reg_next_1(13);
        delayMatch7_1_reg_1(14) <= delayMatch7_1_reg_next_1(14);
        delayMatch7_1_reg_2(0) <= delayMatch7_1_reg_next_2(0);
        delayMatch7_1_reg_2(1) <= delayMatch7_1_reg_next_2(1);
        delayMatch7_1_reg_2(2) <= delayMatch7_1_reg_next_2(2);
        delayMatch7_1_reg_2(3) <= delayMatch7_1_reg_next_2(3);
        delayMatch7_1_reg_2(4) <= delayMatch7_1_reg_next_2(4);
        delayMatch7_1_reg_2(5) <= delayMatch7_1_reg_next_2(5);
        delayMatch7_1_reg_2(6) <= delayMatch7_1_reg_next_2(6);
        delayMatch7_1_reg_2(7) <= delayMatch7_1_reg_next_2(7);
        delayMatch7_1_reg_2(8) <= delayMatch7_1_reg_next_2(8);
        delayMatch7_1_reg_2(9) <= delayMatch7_1_reg_next_2(9);
        delayMatch7_1_reg_2(10) <= delayMatch7_1_reg_next_2(10);
        delayMatch7_1_reg_2(11) <= delayMatch7_1_reg_next_2(11);
        delayMatch7_1_reg_2(12) <= delayMatch7_1_reg_next_2(12);
        delayMatch7_1_reg_2(13) <= delayMatch7_1_reg_next_2(13);
        delayMatch7_1_reg_2(14) <= delayMatch7_1_reg_next_2(14);
        delayMatch7_1_reg_3(0) <= delayMatch7_1_reg_next_3(0);
        delayMatch7_1_reg_3(1) <= delayMatch7_1_reg_next_3(1);
        delayMatch7_1_reg_3(2) <= delayMatch7_1_reg_next_3(2);
        delayMatch7_1_reg_3(3) <= delayMatch7_1_reg_next_3(3);
        delayMatch7_1_reg_3(4) <= delayMatch7_1_reg_next_3(4);
        delayMatch7_1_reg_3(5) <= delayMatch7_1_reg_next_3(5);
        delayMatch7_1_reg_3(6) <= delayMatch7_1_reg_next_3(6);
        delayMatch7_1_reg_3(7) <= delayMatch7_1_reg_next_3(7);
        delayMatch7_1_reg_3(8) <= delayMatch7_1_reg_next_3(8);
        delayMatch7_1_reg_3(9) <= delayMatch7_1_reg_next_3(9);
        delayMatch7_1_reg_3(10) <= delayMatch7_1_reg_next_3(10);
        delayMatch7_1_reg_3(11) <= delayMatch7_1_reg_next_3(11);
        delayMatch7_1_reg_3(12) <= delayMatch7_1_reg_next_3(12);
        delayMatch7_1_reg_3(13) <= delayMatch7_1_reg_next_3(13);
        delayMatch7_1_reg_3(14) <= delayMatch7_1_reg_next_3(14);
      END IF;
    END IF;
  END PROCESS delayMatch7_1_process;

  delayMatch7_1_reg_next(0) <= u_dc_link_voltage;
  delayMatch7_1_reg_next(1) <= delayMatch7_1_reg(0);
  delayMatch7_1_reg_next(2) <= delayMatch7_1_reg(1);
  delayMatch7_1_reg_next(3) <= delayMatch7_1_reg(2);
  delayMatch7_1_reg_next(4) <= delayMatch7_1_reg(3);
  delayMatch7_1_reg_next(5) <= delayMatch7_1_reg(4);
  delayMatch7_1_reg_next(6) <= delayMatch7_1_reg(5);
  delayMatch7_1_reg_next(7) <= delayMatch7_1_reg(6);
  delayMatch7_1_reg_next(8) <= delayMatch7_1_reg(7);
  delayMatch7_1_reg_next(9) <= delayMatch7_1_reg(8);
  delayMatch7_1_reg_next(10) <= delayMatch7_1_reg(9);
  delayMatch7_1_reg_next(11) <= delayMatch7_1_reg(10);
  delayMatch7_1_reg_next(12) <= delayMatch7_1_reg(11);
  delayMatch7_1_reg_next(13) <= delayMatch7_1_reg(12);
  delayMatch7_1_reg_next(14) <= delayMatch7_1_reg(13);
  delayMatch7_out_1 <= delayMatch7_1_reg(14);
  delayMatch7_1_reg_next_1(0) <= u_dc_link_voltage;
  delayMatch7_1_reg_next_1(1) <= delayMatch7_1_reg_1(0);
  delayMatch7_1_reg_next_1(2) <= delayMatch7_1_reg_1(1);
  delayMatch7_1_reg_next_1(3) <= delayMatch7_1_reg_1(2);
  delayMatch7_1_reg_next_1(4) <= delayMatch7_1_reg_1(3);
  delayMatch7_1_reg_next_1(5) <= delayMatch7_1_reg_1(4);
  delayMatch7_1_reg_next_1(6) <= delayMatch7_1_reg_1(5);
  delayMatch7_1_reg_next_1(7) <= delayMatch7_1_reg_1(6);
  delayMatch7_1_reg_next_1(8) <= delayMatch7_1_reg_1(7);
  delayMatch7_1_reg_next_1(9) <= delayMatch7_1_reg_1(8);
  delayMatch7_1_reg_next_1(10) <= delayMatch7_1_reg_1(9);
  delayMatch7_1_reg_next_1(11) <= delayMatch7_1_reg_1(10);
  delayMatch7_1_reg_next_1(12) <= delayMatch7_1_reg_1(11);
  delayMatch7_1_reg_next_1(13) <= delayMatch7_1_reg_1(12);
  delayMatch7_1_reg_next_1(14) <= delayMatch7_1_reg_1(13);
  delayMatch7_out_2 <= delayMatch7_1_reg_1(14);
  delayMatch7_1_reg_next_2(0) <= u_dc_link_voltage;
  delayMatch7_1_reg_next_2(1) <= delayMatch7_1_reg_2(0);
  delayMatch7_1_reg_next_2(2) <= delayMatch7_1_reg_2(1);
  delayMatch7_1_reg_next_2(3) <= delayMatch7_1_reg_2(2);
  delayMatch7_1_reg_next_2(4) <= delayMatch7_1_reg_2(3);
  delayMatch7_1_reg_next_2(5) <= delayMatch7_1_reg_2(4);
  delayMatch7_1_reg_next_2(6) <= delayMatch7_1_reg_2(5);
  delayMatch7_1_reg_next_2(7) <= delayMatch7_1_reg_2(6);
  delayMatch7_1_reg_next_2(8) <= delayMatch7_1_reg_2(7);
  delayMatch7_1_reg_next_2(9) <= delayMatch7_1_reg_2(8);
  delayMatch7_1_reg_next_2(10) <= delayMatch7_1_reg_2(9);
  delayMatch7_1_reg_next_2(11) <= delayMatch7_1_reg_2(10);
  delayMatch7_1_reg_next_2(12) <= delayMatch7_1_reg_2(11);
  delayMatch7_1_reg_next_2(13) <= delayMatch7_1_reg_2(12);
  delayMatch7_1_reg_next_2(14) <= delayMatch7_1_reg_2(13);
  delayMatch7_out_3 <= delayMatch7_1_reg_2(14);
  delayMatch7_1_reg_next_3(0) <= u_dc_link_voltage;
  delayMatch7_1_reg_next_3(1) <= delayMatch7_1_reg_3(0);
  delayMatch7_1_reg_next_3(2) <= delayMatch7_1_reg_3(1);
  delayMatch7_1_reg_next_3(3) <= delayMatch7_1_reg_3(2);
  delayMatch7_1_reg_next_3(4) <= delayMatch7_1_reg_3(3);
  delayMatch7_1_reg_next_3(5) <= delayMatch7_1_reg_3(4);
  delayMatch7_1_reg_next_3(6) <= delayMatch7_1_reg_3(5);
  delayMatch7_1_reg_next_3(7) <= delayMatch7_1_reg_3(6);
  delayMatch7_1_reg_next_3(8) <= delayMatch7_1_reg_3(7);
  delayMatch7_1_reg_next_3(9) <= delayMatch7_1_reg_3(8);
  delayMatch7_1_reg_next_3(10) <= delayMatch7_1_reg_3(9);
  delayMatch7_1_reg_next_3(11) <= delayMatch7_1_reg_3(10);
  delayMatch7_1_reg_next_3(12) <= delayMatch7_1_reg_3(11);
  delayMatch7_1_reg_next_3(13) <= delayMatch7_1_reg_3(12);
  delayMatch7_1_reg_next_3(14) <= delayMatch7_1_reg_3(13);
  delayMatch7_out_4 <= delayMatch7_1_reg_3(14);

  Factors_d_q_x_y(0) <= X"00000000";
  Factors_d_q_x_y(1) <= X"00000000";
  Factors_d_q_x_y(2) <= X"00000000";
  Factors_d_q_x_y(3) <= X"00000000";

  c33_Factors_alpha_beta_x_y(0) <= X"be93cd3a";
  c33_Factors_alpha_beta_x_y(1) <= X"3e2aaaab";
  c33_Factors_alpha_beta_x_y(2) <= X"3e93cd3a";
  c33_Factors_alpha_beta_x_y(3) <= X"3e2aaaab";
  c33_Factors_alpha_beta_x_y(4) <= X"3d36eb84";
  c33_Factors_alpha_beta_x_y(5) <= X"3e2aaaab";
  c33_Factors_alpha_beta_x_y(6) <= X"3f1f3bf2";
  c33_Factors_alpha_beta_x_y(7) <= X"3e2aaaab";
  c33_Factors_alpha_beta_x_y(8) <= X"bee92290";
  c33_Factors_alpha_beta_x_y(9) <= X"3ee92290";
  c33_Factors_alpha_beta_x_y(10) <= X"3df9df93";
  c33_Factors_alpha_beta_x_y(11) <= X"bdf9df93";
  c33_Factors_alpha_beta_x_y(12) <= X"bdf9df93";
  c33_Factors_alpha_beta_x_y(13) <= X"3ee92290";
  c33_Factors_alpha_beta_x_y(14) <= X"3ee92290";
  c33_Factors_alpha_beta_x_y(15) <= X"bdf9df93";
  c33_Factors_alpha_beta_x_y(16) <= X"bee92290";
  c33_Factors_alpha_beta_x_y(17) <= X"bdf9df93";
  c33_Factors_alpha_beta_x_y(18) <= X"3df9df93";
  c33_Factors_alpha_beta_x_y(19) <= X"3ee92290";
  c33_Factors_alpha_beta_x_y(20) <= X"bdf9df93";
  c33_Factors_alpha_beta_x_y(21) <= X"bdf9df93";
  c33_Factors_alpha_beta_x_y(22) <= X"3ee92290";
  c33_Factors_alpha_beta_x_y(23) <= X"3ee92290";
  c33_Factors_alpha_beta_x_y(24) <= X"bf1f3bf2";
  c33_Factors_alpha_beta_x_y(25) <= X"3e2aaaab";
  c33_Factors_alpha_beta_x_y(26) <= X"bd36eb84";
  c33_Factors_alpha_beta_x_y(27) <= X"3e2aaaab";
  c33_Factors_alpha_beta_x_y(28) <= X"be93cd3a";
  c33_Factors_alpha_beta_x_y(29) <= X"3e2aaaab";
  c33_Factors_alpha_beta_x_y(30) <= X"3e93cd3a";
  c33_Factors_alpha_beta_x_y(31) <= X"3e2aaaab";

  Factors_alpha_beta_x_yGEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Factors_alpha_beta_x_yGEN_LABEL: FOR d0 IN 0 TO 3 GENERATE
      Factors_alpha_beta_x_y(d0, d1) <= c33_Factors_alpha_beta_x_y(d0 + (d1 * 4));
    END GENERATE;
  END GENERATE;

  Index_signed <= signed(Index);

  const_expression <= to_signed(1, 32);

  adder_add_temp <= resize(Index_signed, 33) + resize(const_expression, 33);
  
  Index_1 <= X"7FFFFFFF" WHEN (adder_add_temp(32) = '0') AND (adder_add_temp(31) /= '0') ELSE
      X"80000000" WHEN (adder_add_temp(32) = '1') AND (adder_add_temp(31) /= '1') ELSE
      adder_add_temp(31 DOWNTO 0);

  -- Swichtingstates factors alpha beta x y
  -- Park-Transformation of the switchingstates factors
  Selector9_output : PROCESS (Factors_alpha_beta_x_y, Index_1)
  BEGIN
    out0 <= Factors_alpha_beta_x_y(2, 7);
    IF Index_1 = to_signed(7, 32) THEN 
      out0 <= Factors_alpha_beta_x_y(2, 6);
    END IF;
    IF Index_1 = to_signed(6, 32) THEN 
      out0 <= Factors_alpha_beta_x_y(2, 5);
    END IF;
    IF Index_1 = to_signed(5, 32) THEN 
      out0 <= Factors_alpha_beta_x_y(2, 4);
    END IF;
    IF Index_1 = to_signed(4, 32) THEN 
      out0 <= Factors_alpha_beta_x_y(2, 3);
    END IF;
    IF Index_1 = to_signed(3, 32) THEN 
      out0 <= Factors_alpha_beta_x_y(2, 2);
    END IF;
    IF Index_1 = to_signed(2, 32) THEN 
      out0 <= Factors_alpha_beta_x_y(2, 1);
    END IF;
    IF Index_1 = to_signed(1, 32) THEN 
      out0 <= Factors_alpha_beta_x_y(2, 0);
    END IF;
  END PROCESS Selector9_output;


  Factors_d_q_x_y_1(0) <= Factors_d_q_x_y(0);
  Factors_d_q_x_y_1(1) <= Factors_d_q_x_y(1);
  Factors_d_q_x_y_1(2) <= out0;
  Factors_d_q_x_y_1(3) <= Factors_d_q_x_y(3);

  c27_Factors_alpha_beta_x_y(0) <= X"be93cd3a";
  c27_Factors_alpha_beta_x_y(1) <= X"3e2aaaab";
  c27_Factors_alpha_beta_x_y(2) <= X"3e93cd3a";
  c27_Factors_alpha_beta_x_y(3) <= X"3e2aaaab";
  c27_Factors_alpha_beta_x_y(4) <= X"3d36eb84";
  c27_Factors_alpha_beta_x_y(5) <= X"3e2aaaab";
  c27_Factors_alpha_beta_x_y(6) <= X"3f1f3bf2";
  c27_Factors_alpha_beta_x_y(7) <= X"3e2aaaab";
  c27_Factors_alpha_beta_x_y(8) <= X"bee92290";
  c27_Factors_alpha_beta_x_y(9) <= X"3ee92290";
  c27_Factors_alpha_beta_x_y(10) <= X"3df9df93";
  c27_Factors_alpha_beta_x_y(11) <= X"bdf9df93";
  c27_Factors_alpha_beta_x_y(12) <= X"bdf9df93";
  c27_Factors_alpha_beta_x_y(13) <= X"3ee92290";
  c27_Factors_alpha_beta_x_y(14) <= X"3ee92290";
  c27_Factors_alpha_beta_x_y(15) <= X"bdf9df93";
  c27_Factors_alpha_beta_x_y(16) <= X"bee92290";
  c27_Factors_alpha_beta_x_y(17) <= X"bdf9df93";
  c27_Factors_alpha_beta_x_y(18) <= X"3df9df93";
  c27_Factors_alpha_beta_x_y(19) <= X"3ee92290";
  c27_Factors_alpha_beta_x_y(20) <= X"bdf9df93";
  c27_Factors_alpha_beta_x_y(21) <= X"bdf9df93";
  c27_Factors_alpha_beta_x_y(22) <= X"3ee92290";
  c27_Factors_alpha_beta_x_y(23) <= X"3ee92290";
  c27_Factors_alpha_beta_x_y(24) <= X"bf1f3bf2";
  c27_Factors_alpha_beta_x_y(25) <= X"3e2aaaab";
  c27_Factors_alpha_beta_x_y(26) <= X"bd36eb84";
  c27_Factors_alpha_beta_x_y(27) <= X"3e2aaaab";
  c27_Factors_alpha_beta_x_y(28) <= X"be93cd3a";
  c27_Factors_alpha_beta_x_y(29) <= X"3e2aaaab";
  c27_Factors_alpha_beta_x_y(30) <= X"3e93cd3a";
  c27_Factors_alpha_beta_x_y(31) <= X"3e2aaaab";

  Factors_alpha_beta_x_y_1GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Factors_alpha_beta_x_y_1GEN_LABEL: FOR d0 IN 0 TO 3 GENERATE
      Factors_alpha_beta_x_y_1(d0, d1) <= c27_Factors_alpha_beta_x_y(d0 + (d1 * 4));
    END GENERATE;
  END GENERATE;

  Selector6_output : PROCESS (Factors_alpha_beta_x_y_1, Index_1)
  BEGIN
    out0_1 <= Factors_alpha_beta_x_y_1(3, 7);
    IF Index_1 = to_signed(7, 32) THEN 
      out0_1 <= Factors_alpha_beta_x_y_1(3, 6);
    END IF;
    IF Index_1 = to_signed(6, 32) THEN 
      out0_1 <= Factors_alpha_beta_x_y_1(3, 5);
    END IF;
    IF Index_1 = to_signed(5, 32) THEN 
      out0_1 <= Factors_alpha_beta_x_y_1(3, 4);
    END IF;
    IF Index_1 = to_signed(4, 32) THEN 
      out0_1 <= Factors_alpha_beta_x_y_1(3, 3);
    END IF;
    IF Index_1 = to_signed(3, 32) THEN 
      out0_1 <= Factors_alpha_beta_x_y_1(3, 2);
    END IF;
    IF Index_1 = to_signed(2, 32) THEN 
      out0_1 <= Factors_alpha_beta_x_y_1(3, 1);
    END IF;
    IF Index_1 = to_signed(1, 32) THEN 
      out0_1 <= Factors_alpha_beta_x_y_1(3, 0);
    END IF;
  END PROCESS Selector6_output;


  Factors_d_q_x_y_2(0) <= Factors_d_q_x_y_1(0);
  Factors_d_q_x_y_2(1) <= Factors_d_q_x_y_1(1);
  Factors_d_q_x_y_2(2) <= Factors_d_q_x_y_1(2);
  Factors_d_q_x_y_2(3) <= out0_1;

  Factors_d_q_x_y_0 <= Factors_d_q_x_y_2(0);

  delayMatch4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_1_reg(0) <= X"00000000";
        delayMatch4_1_reg(1) <= X"00000000";
        delayMatch4_1_reg(2) <= X"00000000";
        delayMatch4_1_reg(3) <= X"00000000";
        delayMatch4_1_reg(4) <= X"00000000";
        delayMatch4_1_reg(5) <= X"00000000";
        delayMatch4_1_reg(6) <= X"00000000";
        delayMatch4_1_reg(7) <= X"00000000";
        delayMatch4_1_reg(8) <= X"00000000";
        delayMatch4_1_reg(9) <= X"00000000";
        delayMatch4_1_reg(10) <= X"00000000";
        delayMatch4_1_reg(11) <= X"00000000";
        delayMatch4_1_reg(12) <= X"00000000";
        delayMatch4_1_reg(13) <= X"00000000";
        delayMatch4_1_reg(14) <= X"00000000";
        delayMatch4_1_reg_1(0) <= X"00000000";
        delayMatch4_1_reg_1(1) <= X"00000000";
        delayMatch4_1_reg_1(2) <= X"00000000";
        delayMatch4_1_reg_1(3) <= X"00000000";
        delayMatch4_1_reg_1(4) <= X"00000000";
        delayMatch4_1_reg_1(5) <= X"00000000";
        delayMatch4_1_reg_1(6) <= X"00000000";
        delayMatch4_1_reg_1(7) <= X"00000000";
        delayMatch4_1_reg_1(8) <= X"00000000";
        delayMatch4_1_reg_1(9) <= X"00000000";
        delayMatch4_1_reg_1(10) <= X"00000000";
        delayMatch4_1_reg_1(11) <= X"00000000";
        delayMatch4_1_reg_1(12) <= X"00000000";
        delayMatch4_1_reg_1(13) <= X"00000000";
        delayMatch4_1_reg_1(14) <= X"00000000";
        delayMatch4_1_reg_2(0) <= X"00000000";
        delayMatch4_1_reg_2(1) <= X"00000000";
        delayMatch4_1_reg_2(2) <= X"00000000";
        delayMatch4_1_reg_2(3) <= X"00000000";
        delayMatch4_1_reg_2(4) <= X"00000000";
        delayMatch4_1_reg_2(5) <= X"00000000";
        delayMatch4_1_reg_2(6) <= X"00000000";
        delayMatch4_1_reg_2(7) <= X"00000000";
        delayMatch4_1_reg_2(8) <= X"00000000";
        delayMatch4_1_reg_2(9) <= X"00000000";
        delayMatch4_1_reg_2(10) <= X"00000000";
        delayMatch4_1_reg_2(11) <= X"00000000";
        delayMatch4_1_reg_2(12) <= X"00000000";
        delayMatch4_1_reg_2(13) <= X"00000000";
        delayMatch4_1_reg_2(14) <= X"00000000";
        delayMatch4_1_reg_3(0) <= X"00000000";
        delayMatch4_1_reg_3(1) <= X"00000000";
        delayMatch4_1_reg_3(2) <= X"00000000";
        delayMatch4_1_reg_3(3) <= X"00000000";
        delayMatch4_1_reg_3(4) <= X"00000000";
        delayMatch4_1_reg_3(5) <= X"00000000";
        delayMatch4_1_reg_3(6) <= X"00000000";
        delayMatch4_1_reg_3(7) <= X"00000000";
        delayMatch4_1_reg_3(8) <= X"00000000";
        delayMatch4_1_reg_3(9) <= X"00000000";
        delayMatch4_1_reg_3(10) <= X"00000000";
        delayMatch4_1_reg_3(11) <= X"00000000";
        delayMatch4_1_reg_3(12) <= X"00000000";
        delayMatch4_1_reg_3(13) <= X"00000000";
        delayMatch4_1_reg_3(14) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch4_1_reg(0) <= delayMatch4_1_reg_next(0);
        delayMatch4_1_reg(1) <= delayMatch4_1_reg_next(1);
        delayMatch4_1_reg(2) <= delayMatch4_1_reg_next(2);
        delayMatch4_1_reg(3) <= delayMatch4_1_reg_next(3);
        delayMatch4_1_reg(4) <= delayMatch4_1_reg_next(4);
        delayMatch4_1_reg(5) <= delayMatch4_1_reg_next(5);
        delayMatch4_1_reg(6) <= delayMatch4_1_reg_next(6);
        delayMatch4_1_reg(7) <= delayMatch4_1_reg_next(7);
        delayMatch4_1_reg(8) <= delayMatch4_1_reg_next(8);
        delayMatch4_1_reg(9) <= delayMatch4_1_reg_next(9);
        delayMatch4_1_reg(10) <= delayMatch4_1_reg_next(10);
        delayMatch4_1_reg(11) <= delayMatch4_1_reg_next(11);
        delayMatch4_1_reg(12) <= delayMatch4_1_reg_next(12);
        delayMatch4_1_reg(13) <= delayMatch4_1_reg_next(13);
        delayMatch4_1_reg(14) <= delayMatch4_1_reg_next(14);
        delayMatch4_1_reg_1(0) <= delayMatch4_1_reg_next_1(0);
        delayMatch4_1_reg_1(1) <= delayMatch4_1_reg_next_1(1);
        delayMatch4_1_reg_1(2) <= delayMatch4_1_reg_next_1(2);
        delayMatch4_1_reg_1(3) <= delayMatch4_1_reg_next_1(3);
        delayMatch4_1_reg_1(4) <= delayMatch4_1_reg_next_1(4);
        delayMatch4_1_reg_1(5) <= delayMatch4_1_reg_next_1(5);
        delayMatch4_1_reg_1(6) <= delayMatch4_1_reg_next_1(6);
        delayMatch4_1_reg_1(7) <= delayMatch4_1_reg_next_1(7);
        delayMatch4_1_reg_1(8) <= delayMatch4_1_reg_next_1(8);
        delayMatch4_1_reg_1(9) <= delayMatch4_1_reg_next_1(9);
        delayMatch4_1_reg_1(10) <= delayMatch4_1_reg_next_1(10);
        delayMatch4_1_reg_1(11) <= delayMatch4_1_reg_next_1(11);
        delayMatch4_1_reg_1(12) <= delayMatch4_1_reg_next_1(12);
        delayMatch4_1_reg_1(13) <= delayMatch4_1_reg_next_1(13);
        delayMatch4_1_reg_1(14) <= delayMatch4_1_reg_next_1(14);
        delayMatch4_1_reg_2(0) <= delayMatch4_1_reg_next_2(0);
        delayMatch4_1_reg_2(1) <= delayMatch4_1_reg_next_2(1);
        delayMatch4_1_reg_2(2) <= delayMatch4_1_reg_next_2(2);
        delayMatch4_1_reg_2(3) <= delayMatch4_1_reg_next_2(3);
        delayMatch4_1_reg_2(4) <= delayMatch4_1_reg_next_2(4);
        delayMatch4_1_reg_2(5) <= delayMatch4_1_reg_next_2(5);
        delayMatch4_1_reg_2(6) <= delayMatch4_1_reg_next_2(6);
        delayMatch4_1_reg_2(7) <= delayMatch4_1_reg_next_2(7);
        delayMatch4_1_reg_2(8) <= delayMatch4_1_reg_next_2(8);
        delayMatch4_1_reg_2(9) <= delayMatch4_1_reg_next_2(9);
        delayMatch4_1_reg_2(10) <= delayMatch4_1_reg_next_2(10);
        delayMatch4_1_reg_2(11) <= delayMatch4_1_reg_next_2(11);
        delayMatch4_1_reg_2(12) <= delayMatch4_1_reg_next_2(12);
        delayMatch4_1_reg_2(13) <= delayMatch4_1_reg_next_2(13);
        delayMatch4_1_reg_2(14) <= delayMatch4_1_reg_next_2(14);
        delayMatch4_1_reg_3(0) <= delayMatch4_1_reg_next_3(0);
        delayMatch4_1_reg_3(1) <= delayMatch4_1_reg_next_3(1);
        delayMatch4_1_reg_3(2) <= delayMatch4_1_reg_next_3(2);
        delayMatch4_1_reg_3(3) <= delayMatch4_1_reg_next_3(3);
        delayMatch4_1_reg_3(4) <= delayMatch4_1_reg_next_3(4);
        delayMatch4_1_reg_3(5) <= delayMatch4_1_reg_next_3(5);
        delayMatch4_1_reg_3(6) <= delayMatch4_1_reg_next_3(6);
        delayMatch4_1_reg_3(7) <= delayMatch4_1_reg_next_3(7);
        delayMatch4_1_reg_3(8) <= delayMatch4_1_reg_next_3(8);
        delayMatch4_1_reg_3(9) <= delayMatch4_1_reg_next_3(9);
        delayMatch4_1_reg_3(10) <= delayMatch4_1_reg_next_3(10);
        delayMatch4_1_reg_3(11) <= delayMatch4_1_reg_next_3(11);
        delayMatch4_1_reg_3(12) <= delayMatch4_1_reg_next_3(12);
        delayMatch4_1_reg_3(13) <= delayMatch4_1_reg_next_3(13);
        delayMatch4_1_reg_3(14) <= delayMatch4_1_reg_next_3(14);
      END IF;
    END IF;
  END PROCESS delayMatch4_1_process;

  delayMatch4_1_reg_next(0) <= Factors_d_q_x_y_0;
  delayMatch4_1_reg_next(1) <= delayMatch4_1_reg(0);
  delayMatch4_1_reg_next(2) <= delayMatch4_1_reg(1);
  delayMatch4_1_reg_next(3) <= delayMatch4_1_reg(2);
  delayMatch4_1_reg_next(4) <= delayMatch4_1_reg(3);
  delayMatch4_1_reg_next(5) <= delayMatch4_1_reg(4);
  delayMatch4_1_reg_next(6) <= delayMatch4_1_reg(5);
  delayMatch4_1_reg_next(7) <= delayMatch4_1_reg(6);
  delayMatch4_1_reg_next(8) <= delayMatch4_1_reg(7);
  delayMatch4_1_reg_next(9) <= delayMatch4_1_reg(8);
  delayMatch4_1_reg_next(10) <= delayMatch4_1_reg(9);
  delayMatch4_1_reg_next(11) <= delayMatch4_1_reg(10);
  delayMatch4_1_reg_next(12) <= delayMatch4_1_reg(11);
  delayMatch4_1_reg_next(13) <= delayMatch4_1_reg(12);
  delayMatch4_1_reg_next(14) <= delayMatch4_1_reg(13);
  delayMatch4_out_1 <= delayMatch4_1_reg(14);
  delayMatch4_1_reg_next_1(0) <= Factors_d_q_x_y_1_1;
  delayMatch4_1_reg_next_1(1) <= delayMatch4_1_reg_1(0);
  delayMatch4_1_reg_next_1(2) <= delayMatch4_1_reg_1(1);
  delayMatch4_1_reg_next_1(3) <= delayMatch4_1_reg_1(2);
  delayMatch4_1_reg_next_1(4) <= delayMatch4_1_reg_1(3);
  delayMatch4_1_reg_next_1(5) <= delayMatch4_1_reg_1(4);
  delayMatch4_1_reg_next_1(6) <= delayMatch4_1_reg_1(5);
  delayMatch4_1_reg_next_1(7) <= delayMatch4_1_reg_1(6);
  delayMatch4_1_reg_next_1(8) <= delayMatch4_1_reg_1(7);
  delayMatch4_1_reg_next_1(9) <= delayMatch4_1_reg_1(8);
  delayMatch4_1_reg_next_1(10) <= delayMatch4_1_reg_1(9);
  delayMatch4_1_reg_next_1(11) <= delayMatch4_1_reg_1(10);
  delayMatch4_1_reg_next_1(12) <= delayMatch4_1_reg_1(11);
  delayMatch4_1_reg_next_1(13) <= delayMatch4_1_reg_1(12);
  delayMatch4_1_reg_next_1(14) <= delayMatch4_1_reg_1(13);
  delayMatch4_out_2 <= delayMatch4_1_reg_1(14);
  delayMatch4_1_reg_next_2(0) <= Factors_d_q_x_y_2_1;
  delayMatch4_1_reg_next_2(1) <= delayMatch4_1_reg_2(0);
  delayMatch4_1_reg_next_2(2) <= delayMatch4_1_reg_2(1);
  delayMatch4_1_reg_next_2(3) <= delayMatch4_1_reg_2(2);
  delayMatch4_1_reg_next_2(4) <= delayMatch4_1_reg_2(3);
  delayMatch4_1_reg_next_2(5) <= delayMatch4_1_reg_2(4);
  delayMatch4_1_reg_next_2(6) <= delayMatch4_1_reg_2(5);
  delayMatch4_1_reg_next_2(7) <= delayMatch4_1_reg_2(6);
  delayMatch4_1_reg_next_2(8) <= delayMatch4_1_reg_2(7);
  delayMatch4_1_reg_next_2(9) <= delayMatch4_1_reg_2(8);
  delayMatch4_1_reg_next_2(10) <= delayMatch4_1_reg_2(9);
  delayMatch4_1_reg_next_2(11) <= delayMatch4_1_reg_2(10);
  delayMatch4_1_reg_next_2(12) <= delayMatch4_1_reg_2(11);
  delayMatch4_1_reg_next_2(13) <= delayMatch4_1_reg_2(12);
  delayMatch4_1_reg_next_2(14) <= delayMatch4_1_reg_2(13);
  delayMatch4_out_3 <= delayMatch4_1_reg_2(14);
  delayMatch4_1_reg_next_3(0) <= Factors_d_q_x_y_3;
  delayMatch4_1_reg_next_3(1) <= delayMatch4_1_reg_3(0);
  delayMatch4_1_reg_next_3(2) <= delayMatch4_1_reg_3(1);
  delayMatch4_1_reg_next_3(3) <= delayMatch4_1_reg_3(2);
  delayMatch4_1_reg_next_3(4) <= delayMatch4_1_reg_3(3);
  delayMatch4_1_reg_next_3(5) <= delayMatch4_1_reg_3(4);
  delayMatch4_1_reg_next_3(6) <= delayMatch4_1_reg_3(5);
  delayMatch4_1_reg_next_3(7) <= delayMatch4_1_reg_3(6);
  delayMatch4_1_reg_next_3(8) <= delayMatch4_1_reg_3(7);
  delayMatch4_1_reg_next_3(9) <= delayMatch4_1_reg_3(8);
  delayMatch4_1_reg_next_3(10) <= delayMatch4_1_reg_3(9);
  delayMatch4_1_reg_next_3(11) <= delayMatch4_1_reg_3(10);
  delayMatch4_1_reg_next_3(12) <= delayMatch4_1_reg_3(11);
  delayMatch4_1_reg_next_3(13) <= delayMatch4_1_reg_3(12);
  delayMatch4_1_reg_next_3(14) <= delayMatch4_1_reg_3(13);
  delayMatch4_out_4 <= delayMatch4_1_reg_3(14);

  Factors_d_q_x_y_1_1 <= Factors_d_q_x_y_2(1);

  Factors_d_q_x_y_2_1 <= Factors_d_q_x_y_2(2);

  Factors_d_q_x_y_3 <= Factors_d_q_x_y_2(3);

  Factors_d_q_x_y_4(0) <= delayMatch4_out_1;
  Factors_d_q_x_y_4(1) <= delayMatch4_out_2;
  Factors_d_q_x_y_4(2) <= delayMatch4_out_3;
  Factors_d_q_x_y_4(3) <= delayMatch4_out_4;

  c32_Factors_alpha_beta_x_y(0) <= X"be93cd3a";
  c32_Factors_alpha_beta_x_y(1) <= X"3e2aaaab";
  c32_Factors_alpha_beta_x_y(2) <= X"3e93cd3a";
  c32_Factors_alpha_beta_x_y(3) <= X"3e2aaaab";
  c32_Factors_alpha_beta_x_y(4) <= X"3d36eb84";
  c32_Factors_alpha_beta_x_y(5) <= X"3e2aaaab";
  c32_Factors_alpha_beta_x_y(6) <= X"3f1f3bf2";
  c32_Factors_alpha_beta_x_y(7) <= X"3e2aaaab";
  c32_Factors_alpha_beta_x_y(8) <= X"bee92290";
  c32_Factors_alpha_beta_x_y(9) <= X"3ee92290";
  c32_Factors_alpha_beta_x_y(10) <= X"3df9df93";
  c32_Factors_alpha_beta_x_y(11) <= X"bdf9df93";
  c32_Factors_alpha_beta_x_y(12) <= X"bdf9df93";
  c32_Factors_alpha_beta_x_y(13) <= X"3ee92290";
  c32_Factors_alpha_beta_x_y(14) <= X"3ee92290";
  c32_Factors_alpha_beta_x_y(15) <= X"bdf9df93";
  c32_Factors_alpha_beta_x_y(16) <= X"bee92290";
  c32_Factors_alpha_beta_x_y(17) <= X"bdf9df93";
  c32_Factors_alpha_beta_x_y(18) <= X"3df9df93";
  c32_Factors_alpha_beta_x_y(19) <= X"3ee92290";
  c32_Factors_alpha_beta_x_y(20) <= X"bdf9df93";
  c32_Factors_alpha_beta_x_y(21) <= X"bdf9df93";
  c32_Factors_alpha_beta_x_y(22) <= X"3ee92290";
  c32_Factors_alpha_beta_x_y(23) <= X"3ee92290";
  c32_Factors_alpha_beta_x_y(24) <= X"bf1f3bf2";
  c32_Factors_alpha_beta_x_y(25) <= X"3e2aaaab";
  c32_Factors_alpha_beta_x_y(26) <= X"bd36eb84";
  c32_Factors_alpha_beta_x_y(27) <= X"3e2aaaab";
  c32_Factors_alpha_beta_x_y(28) <= X"be93cd3a";
  c32_Factors_alpha_beta_x_y(29) <= X"3e2aaaab";
  c32_Factors_alpha_beta_x_y(30) <= X"3e93cd3a";
  c32_Factors_alpha_beta_x_y(31) <= X"3e2aaaab";

  Factors_alpha_beta_x_y_2GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Factors_alpha_beta_x_y_2GEN_LABEL: FOR d0 IN 0 TO 3 GENERATE
      Factors_alpha_beta_x_y_2(d0, d1) <= c32_Factors_alpha_beta_x_y(d0 + (d1 * 4));
    END GENERATE;
  END GENERATE;

  Selector8_output : PROCESS (Factors_alpha_beta_x_y_2, Index_1)
  BEGIN
    out0_2 <= Factors_alpha_beta_x_y_2(0, 7);
    IF Index_1 = to_signed(7, 32) THEN 
      out0_2 <= Factors_alpha_beta_x_y_2(0, 6);
    END IF;
    IF Index_1 = to_signed(6, 32) THEN 
      out0_2 <= Factors_alpha_beta_x_y_2(0, 5);
    END IF;
    IF Index_1 = to_signed(5, 32) THEN 
      out0_2 <= Factors_alpha_beta_x_y_2(0, 4);
    END IF;
    IF Index_1 = to_signed(4, 32) THEN 
      out0_2 <= Factors_alpha_beta_x_y_2(0, 3);
    END IF;
    IF Index_1 = to_signed(3, 32) THEN 
      out0_2 <= Factors_alpha_beta_x_y_2(0, 2);
    END IF;
    IF Index_1 = to_signed(2, 32) THEN 
      out0_2 <= Factors_alpha_beta_x_y_2(0, 1);
    END IF;
    IF Index_1 = to_signed(1, 32) THEN 
      out0_2 <= Factors_alpha_beta_x_y_2(0, 0);
    END IF;
  END PROCESS Selector8_output;


  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch2_reg(0) <= X"00000000";
        delayMatch2_reg(1) <= X"00000000";
        delayMatch2_reg(2) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  out0_3 <= delayMatch2_reg(2);
  delayMatch2_reg_next(0) <= out0_2;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);

  c31_Factors_alpha_beta_x_y(0) <= X"be93cd3a";
  c31_Factors_alpha_beta_x_y(1) <= X"3e2aaaab";
  c31_Factors_alpha_beta_x_y(2) <= X"3e93cd3a";
  c31_Factors_alpha_beta_x_y(3) <= X"3e2aaaab";
  c31_Factors_alpha_beta_x_y(4) <= X"3d36eb84";
  c31_Factors_alpha_beta_x_y(5) <= X"3e2aaaab";
  c31_Factors_alpha_beta_x_y(6) <= X"3f1f3bf2";
  c31_Factors_alpha_beta_x_y(7) <= X"3e2aaaab";
  c31_Factors_alpha_beta_x_y(8) <= X"bee92290";
  c31_Factors_alpha_beta_x_y(9) <= X"3ee92290";
  c31_Factors_alpha_beta_x_y(10) <= X"3df9df93";
  c31_Factors_alpha_beta_x_y(11) <= X"bdf9df93";
  c31_Factors_alpha_beta_x_y(12) <= X"bdf9df93";
  c31_Factors_alpha_beta_x_y(13) <= X"3ee92290";
  c31_Factors_alpha_beta_x_y(14) <= X"3ee92290";
  c31_Factors_alpha_beta_x_y(15) <= X"bdf9df93";
  c31_Factors_alpha_beta_x_y(16) <= X"bee92290";
  c31_Factors_alpha_beta_x_y(17) <= X"bdf9df93";
  c31_Factors_alpha_beta_x_y(18) <= X"3df9df93";
  c31_Factors_alpha_beta_x_y(19) <= X"3ee92290";
  c31_Factors_alpha_beta_x_y(20) <= X"bdf9df93";
  c31_Factors_alpha_beta_x_y(21) <= X"bdf9df93";
  c31_Factors_alpha_beta_x_y(22) <= X"3ee92290";
  c31_Factors_alpha_beta_x_y(23) <= X"3ee92290";
  c31_Factors_alpha_beta_x_y(24) <= X"bf1f3bf2";
  c31_Factors_alpha_beta_x_y(25) <= X"3e2aaaab";
  c31_Factors_alpha_beta_x_y(26) <= X"bd36eb84";
  c31_Factors_alpha_beta_x_y(27) <= X"3e2aaaab";
  c31_Factors_alpha_beta_x_y(28) <= X"be93cd3a";
  c31_Factors_alpha_beta_x_y(29) <= X"3e2aaaab";
  c31_Factors_alpha_beta_x_y(30) <= X"3e93cd3a";
  c31_Factors_alpha_beta_x_y(31) <= X"3e2aaaab";

  Factors_alpha_beta_x_y_3GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Factors_alpha_beta_x_y_3GEN_LABEL: FOR d0 IN 0 TO 3 GENERATE
      Factors_alpha_beta_x_y_3(d0, d1) <= c31_Factors_alpha_beta_x_y(d0 + (d1 * 4));
    END GENERATE;
  END GENERATE;

  Selector7_output : PROCESS (Factors_alpha_beta_x_y_3, Index_1)
  BEGIN
    out0_5 <= Factors_alpha_beta_x_y_3(1, 7);
    IF Index_1 = to_signed(7, 32) THEN 
      out0_5 <= Factors_alpha_beta_x_y_3(1, 6);
    END IF;
    IF Index_1 = to_signed(6, 32) THEN 
      out0_5 <= Factors_alpha_beta_x_y_3(1, 5);
    END IF;
    IF Index_1 = to_signed(5, 32) THEN 
      out0_5 <= Factors_alpha_beta_x_y_3(1, 4);
    END IF;
    IF Index_1 = to_signed(4, 32) THEN 
      out0_5 <= Factors_alpha_beta_x_y_3(1, 3);
    END IF;
    IF Index_1 = to_signed(3, 32) THEN 
      out0_5 <= Factors_alpha_beta_x_y_3(1, 2);
    END IF;
    IF Index_1 = to_signed(2, 32) THEN 
      out0_5 <= Factors_alpha_beta_x_y_3(1, 1);
    END IF;
    IF Index_1 = to_signed(1, 32) THEN 
      out0_5 <= Factors_alpha_beta_x_y_3(1, 0);
    END IF;
  END PROCESS Selector7_output;


  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg(0) <= X"00000000";
        delayMatch3_reg(1) <= X"00000000";
        delayMatch3_reg(2) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  out0_6 <= delayMatch3_reg(2);
  delayMatch3_reg_next(0) <= out0_5;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);

  Factors_d_q_x_y_5(0) <= out0_8;
  Factors_d_q_x_y_5(1) <= Factors_d_q_x_y_4(1);
  Factors_d_q_x_y_5(2) <= Factors_d_q_x_y_4(2);
  Factors_d_q_x_y_5(3) <= Factors_d_q_x_y_4(3);

  c24_Factors_alpha_beta_x_y(0) <= X"be93cd3a";
  c24_Factors_alpha_beta_x_y(1) <= X"3e2aaaab";
  c24_Factors_alpha_beta_x_y(2) <= X"3e93cd3a";
  c24_Factors_alpha_beta_x_y(3) <= X"3e2aaaab";
  c24_Factors_alpha_beta_x_y(4) <= X"3d36eb84";
  c24_Factors_alpha_beta_x_y(5) <= X"3e2aaaab";
  c24_Factors_alpha_beta_x_y(6) <= X"3f1f3bf2";
  c24_Factors_alpha_beta_x_y(7) <= X"3e2aaaab";
  c24_Factors_alpha_beta_x_y(8) <= X"bee92290";
  c24_Factors_alpha_beta_x_y(9) <= X"3ee92290";
  c24_Factors_alpha_beta_x_y(10) <= X"3df9df93";
  c24_Factors_alpha_beta_x_y(11) <= X"bdf9df93";
  c24_Factors_alpha_beta_x_y(12) <= X"bdf9df93";
  c24_Factors_alpha_beta_x_y(13) <= X"3ee92290";
  c24_Factors_alpha_beta_x_y(14) <= X"3ee92290";
  c24_Factors_alpha_beta_x_y(15) <= X"bdf9df93";
  c24_Factors_alpha_beta_x_y(16) <= X"bee92290";
  c24_Factors_alpha_beta_x_y(17) <= X"bdf9df93";
  c24_Factors_alpha_beta_x_y(18) <= X"3df9df93";
  c24_Factors_alpha_beta_x_y(19) <= X"3ee92290";
  c24_Factors_alpha_beta_x_y(20) <= X"bdf9df93";
  c24_Factors_alpha_beta_x_y(21) <= X"bdf9df93";
  c24_Factors_alpha_beta_x_y(22) <= X"3ee92290";
  c24_Factors_alpha_beta_x_y(23) <= X"3ee92290";
  c24_Factors_alpha_beta_x_y(24) <= X"bf1f3bf2";
  c24_Factors_alpha_beta_x_y(25) <= X"3e2aaaab";
  c24_Factors_alpha_beta_x_y(26) <= X"bd36eb84";
  c24_Factors_alpha_beta_x_y(27) <= X"3e2aaaab";
  c24_Factors_alpha_beta_x_y(28) <= X"be93cd3a";
  c24_Factors_alpha_beta_x_y(29) <= X"3e2aaaab";
  c24_Factors_alpha_beta_x_y(30) <= X"3e93cd3a";
  c24_Factors_alpha_beta_x_y(31) <= X"3e2aaaab";

  Factors_alpha_beta_x_y_4GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Factors_alpha_beta_x_y_4GEN_LABEL: FOR d0 IN 0 TO 3 GENERATE
      Factors_alpha_beta_x_y_4(d0, d1) <= c24_Factors_alpha_beta_x_y(d0 + (d1 * 4));
    END GENERATE;
  END GENERATE;

  Selector5_output : PROCESS (Factors_alpha_beta_x_y_4, Index_1)
  BEGIN
    out0_10 <= Factors_alpha_beta_x_y_4(0, 7);
    IF Index_1 = to_signed(7, 32) THEN 
      out0_10 <= Factors_alpha_beta_x_y_4(0, 6);
    END IF;
    IF Index_1 = to_signed(6, 32) THEN 
      out0_10 <= Factors_alpha_beta_x_y_4(0, 5);
    END IF;
    IF Index_1 = to_signed(5, 32) THEN 
      out0_10 <= Factors_alpha_beta_x_y_4(0, 4);
    END IF;
    IF Index_1 = to_signed(4, 32) THEN 
      out0_10 <= Factors_alpha_beta_x_y_4(0, 3);
    END IF;
    IF Index_1 = to_signed(3, 32) THEN 
      out0_10 <= Factors_alpha_beta_x_y_4(0, 2);
    END IF;
    IF Index_1 = to_signed(2, 32) THEN 
      out0_10 <= Factors_alpha_beta_x_y_4(0, 1);
    END IF;
    IF Index_1 = to_signed(1, 32) THEN 
      out0_10 <= Factors_alpha_beta_x_y_4(0, 0);
    END IF;
  END PROCESS Selector5_output;


  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch5_reg(0) <= X"00000000";
        delayMatch5_reg(1) <= X"00000000";
        delayMatch5_reg(2) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= delayMatch5_reg_next(0);
        delayMatch5_reg(1) <= delayMatch5_reg_next(1);
        delayMatch5_reg(2) <= delayMatch5_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  out0_11 <= delayMatch5_reg(2);
  delayMatch5_reg_next(0) <= out0_10;
  delayMatch5_reg_next(1) <= delayMatch5_reg(0);
  delayMatch5_reg_next(2) <= delayMatch5_reg(1);

  c23_Factors_alpha_beta_x_y(0) <= X"be93cd3a";
  c23_Factors_alpha_beta_x_y(1) <= X"3e2aaaab";
  c23_Factors_alpha_beta_x_y(2) <= X"3e93cd3a";
  c23_Factors_alpha_beta_x_y(3) <= X"3e2aaaab";
  c23_Factors_alpha_beta_x_y(4) <= X"3d36eb84";
  c23_Factors_alpha_beta_x_y(5) <= X"3e2aaaab";
  c23_Factors_alpha_beta_x_y(6) <= X"3f1f3bf2";
  c23_Factors_alpha_beta_x_y(7) <= X"3e2aaaab";
  c23_Factors_alpha_beta_x_y(8) <= X"bee92290";
  c23_Factors_alpha_beta_x_y(9) <= X"3ee92290";
  c23_Factors_alpha_beta_x_y(10) <= X"3df9df93";
  c23_Factors_alpha_beta_x_y(11) <= X"bdf9df93";
  c23_Factors_alpha_beta_x_y(12) <= X"bdf9df93";
  c23_Factors_alpha_beta_x_y(13) <= X"3ee92290";
  c23_Factors_alpha_beta_x_y(14) <= X"3ee92290";
  c23_Factors_alpha_beta_x_y(15) <= X"bdf9df93";
  c23_Factors_alpha_beta_x_y(16) <= X"bee92290";
  c23_Factors_alpha_beta_x_y(17) <= X"bdf9df93";
  c23_Factors_alpha_beta_x_y(18) <= X"3df9df93";
  c23_Factors_alpha_beta_x_y(19) <= X"3ee92290";
  c23_Factors_alpha_beta_x_y(20) <= X"bdf9df93";
  c23_Factors_alpha_beta_x_y(21) <= X"bdf9df93";
  c23_Factors_alpha_beta_x_y(22) <= X"3ee92290";
  c23_Factors_alpha_beta_x_y(23) <= X"3ee92290";
  c23_Factors_alpha_beta_x_y(24) <= X"bf1f3bf2";
  c23_Factors_alpha_beta_x_y(25) <= X"3e2aaaab";
  c23_Factors_alpha_beta_x_y(26) <= X"bd36eb84";
  c23_Factors_alpha_beta_x_y(27) <= X"3e2aaaab";
  c23_Factors_alpha_beta_x_y(28) <= X"be93cd3a";
  c23_Factors_alpha_beta_x_y(29) <= X"3e2aaaab";
  c23_Factors_alpha_beta_x_y(30) <= X"3e93cd3a";
  c23_Factors_alpha_beta_x_y(31) <= X"3e2aaaab";

  Factors_alpha_beta_x_y_5GEN_LABEL1: FOR d1 IN 0 TO 7 GENERATE
    Factors_alpha_beta_x_y_5GEN_LABEL: FOR d0 IN 0 TO 3 GENERATE
      Factors_alpha_beta_x_y_5(d0, d1) <= c23_Factors_alpha_beta_x_y(d0 + (d1 * 4));
    END GENERATE;
  END GENERATE;

  Selector4_output : PROCESS (Factors_alpha_beta_x_y_5, Index_1)
  BEGIN
    out0_13 <= Factors_alpha_beta_x_y_5(1, 7);
    IF Index_1 = to_signed(7, 32) THEN 
      out0_13 <= Factors_alpha_beta_x_y_5(1, 6);
    END IF;
    IF Index_1 = to_signed(6, 32) THEN 
      out0_13 <= Factors_alpha_beta_x_y_5(1, 5);
    END IF;
    IF Index_1 = to_signed(5, 32) THEN 
      out0_13 <= Factors_alpha_beta_x_y_5(1, 4);
    END IF;
    IF Index_1 = to_signed(4, 32) THEN 
      out0_13 <= Factors_alpha_beta_x_y_5(1, 3);
    END IF;
    IF Index_1 = to_signed(3, 32) THEN 
      out0_13 <= Factors_alpha_beta_x_y_5(1, 2);
    END IF;
    IF Index_1 = to_signed(2, 32) THEN 
      out0_13 <= Factors_alpha_beta_x_y_5(1, 1);
    END IF;
    IF Index_1 = to_signed(1, 32) THEN 
      out0_13 <= Factors_alpha_beta_x_y_5(1, 0);
    END IF;
  END PROCESS Selector4_output;


  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= X"00000000";
        delayMatch6_reg(1) <= X"00000000";
        delayMatch6_reg(2) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  out0_14 <= delayMatch6_reg(2);
  delayMatch6_reg_next(0) <= out0_13;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);

  Factors_d_q_x_y_6(0) <= Factors_d_q_x_y_5(0);
  Factors_d_q_x_y_6(1) <= out0_16;
  Factors_d_q_x_y_6(2) <= Factors_d_q_x_y_5(2);
  Factors_d_q_x_y_6(3) <= Factors_d_q_x_y_5(3);

  d_voltage_per_switching_state <= nfp_out_1_1;

  q_voltage_per_switching_state <= nfp_out_2_1;

  x_voltage_per_switching_state <= nfp_out_3_1;

  y_voltage_per_switching_state <= nfp_out_4_1;

END rtl;

