// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_updateParameter_float_4u_Block_split1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_learningRate_dout,
        p_learningRate_empty_n,
        p_learningRate_read,
        p_batchSize_dout,
        p_batchSize_empty_n,
        p_batchSize_read,
        l_multiplicator_out_out_din,
        l_multiplicator_out_out_full_n,
        l_multiplicator_out_out_write,
        l_multiplicator_out_out1_din,
        l_multiplicator_out_out1_full_n,
        l_multiplicator_out_out1_write
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_learningRate_dout;
input   p_learningRate_empty_n;
output   p_learningRate_read;
input  [31:0] p_batchSize_dout;
input   p_batchSize_empty_n;
output   p_batchSize_read;
output  [31:0] l_multiplicator_out_out_din;
input   l_multiplicator_out_out_full_n;
output   l_multiplicator_out_out_write;
output  [31:0] l_multiplicator_out_out1_din;
input   l_multiplicator_out_out1_full_n;
output   l_multiplicator_out_out1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_learningRate_read;
reg p_batchSize_read;
reg l_multiplicator_out_out_write;
reg l_multiplicator_out_out1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_learningRate_blk_n;
reg    p_batchSize_blk_n;
reg    l_multiplicator_out_out_blk_n;
wire    ap_CS_fsm_state12;
reg    l_multiplicator_out_out1_blk_n;
reg   [31:0] p_learningRate_read_reg_72;
reg    ap_block_state1;
reg   [31:0] p_batchSize_read_reg_77;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_54_p2;
reg   [31:0] l_multiplicator_reg_87;
wire    ap_CS_fsm_state11;
reg    ap_block_state12;
wire   [31:0] grp_fu_54_p0;
wire   [31:0] bitcast_ln584_fu_58_p1;
wire   [31:0] xor_ln584_fu_61_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
end

BGD_fdiv_32ns_32ns_32_10_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_10_no_dsp_1_U401(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_54_p0),
    .din1(p_batchSize_read_reg_77),
    .ce(1'b1),
    .dout(grp_fu_54_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((l_multiplicator_out_out1_full_n == 1'b0) | (l_multiplicator_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        l_multiplicator_reg_87 <= grp_fu_54_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_batchSize_empty_n == 1'b0) | (p_learningRate_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_batchSize_read_reg_77 <= p_batchSize_dout;
        p_learningRate_read_reg_72 <= p_learningRate_dout;
    end
end

always @ (*) begin
    if ((~((l_multiplicator_out_out1_full_n == 1'b0) | (l_multiplicator_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((l_multiplicator_out_out1_full_n == 1'b0) | (l_multiplicator_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        l_multiplicator_out_out1_blk_n = l_multiplicator_out_out1_full_n;
    end else begin
        l_multiplicator_out_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((l_multiplicator_out_out1_full_n == 1'b0) | (l_multiplicator_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        l_multiplicator_out_out1_write = 1'b1;
    end else begin
        l_multiplicator_out_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        l_multiplicator_out_out_blk_n = l_multiplicator_out_out_full_n;
    end else begin
        l_multiplicator_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((l_multiplicator_out_out1_full_n == 1'b0) | (l_multiplicator_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        l_multiplicator_out_out_write = 1'b1;
    end else begin
        l_multiplicator_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_batchSize_blk_n = p_batchSize_empty_n;
    end else begin
        p_batchSize_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_batchSize_empty_n == 1'b0) | (p_learningRate_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_batchSize_read = 1'b1;
    end else begin
        p_batchSize_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_learningRate_blk_n = p_learningRate_empty_n;
    end else begin
        p_learningRate_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_batchSize_empty_n == 1'b0) | (p_learningRate_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_learningRate_read = 1'b1;
    end else begin
        p_learningRate_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_batchSize_empty_n == 1'b0) | (p_learningRate_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if ((~((l_multiplicator_out_out1_full_n == 1'b0) | (l_multiplicator_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((p_batchSize_empty_n == 1'b0) | (p_learningRate_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state12 = ((l_multiplicator_out_out1_full_n == 1'b0) | (l_multiplicator_out_out_full_n == 1'b0));
end

assign bitcast_ln584_fu_58_p1 = p_learningRate_read_reg_72;

assign grp_fu_54_p0 = xor_ln584_fu_61_p2;

assign l_multiplicator_out_out1_din = l_multiplicator_reg_87;

assign l_multiplicator_out_out_din = l_multiplicator_reg_87;

assign xor_ln584_fu_61_p2 = (bitcast_ln584_fu_58_p1 ^ 32'd2147483648);

endmodule //BGD_updateParameter_float_4u_Block_split1_proc
