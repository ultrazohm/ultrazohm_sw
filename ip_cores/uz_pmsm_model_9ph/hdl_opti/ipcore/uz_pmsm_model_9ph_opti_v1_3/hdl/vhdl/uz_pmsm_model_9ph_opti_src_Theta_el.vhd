-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdl_opti\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_opti_src_Theta_el.vhd
-- Created: 2022-05-03 11:23:59
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_opti_src_Theta_el
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph/Theta_el
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_opti_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_opti_src_Theta_el IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_500_1                       :   IN    std_logic;
        enb                               :   IN    std_logic;
        w_mech                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        polepairs                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        reset_1                           :   IN    std_logic;
        theta_el                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END uz_pmsm_model_9ph_opti_src_Theta_el;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_opti_src_Theta_el IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_opti_src_nfp_rem_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_mul_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_add_double
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_add_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_convert_double2single(rtl);

  FOR ALL : uz_pmsm_model_9ph_opti_src_nfp_rem_single
    USE ENTITY work.uz_pmsm_model_9ph_opti_src_nfp_rem_single(rtl);

  -- Signals
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pi_out1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL theta_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch2_reg                  : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL delayMatch2_reg_next             : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]

BEGIN
  u_nfp_mul_comp : uz_pmsm_model_9ph_opti_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => w_mech,  -- single
              nfp_in2 => polepairs,  -- single
              nfp_out => Divide_out1  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double : uz_pmsm_model_9ph_opti_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide_out1,  -- single
              nfp_out => Data_Type_Conversion2_out1  -- double
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph_opti_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst,  -- double
              nfp_in2 => Data_Type_Conversion2_out1,  -- double
              nfp_out => Gain_out1  -- double
              );

  u_nfp_add_comp : uz_pmsm_model_9ph_opti_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1,  -- double
              nfp_in2 => Delay1_out1,  -- double
              nfp_out => Sum3_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single : uz_pmsm_model_9ph_opti_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Delay1_out1,  -- double
              nfp_out => Data_Type_Conversion1_out1  -- single
              );

  u_nfp_rem_comp : uz_pmsm_model_9ph_opti_src_nfp_rem_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion1_out1,  -- single
              nfp_in2 => Pi_out1,  -- single
              nfp_out => theta_el_1  -- single
              );

  kconst <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv <= X"0000000000000000";

  
  Delay1_toDel <= Sum3_out1 WHEN reset_1 = '0' ELSE
      Delay1_iv;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_1 <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_500_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_2 <= Delay1_toDel_1 WHEN enb_1_500_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut <= Delay1_toDel_2;

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_delOut_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_delOut_1 <= Delay1_delOut;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  
  Delay1_out1 <= Delay1_delOut_1 WHEN reset_1 = '0' ELSE
      Delay1_iv;

  Pi_out1 <= X"40c90fdb";

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch2_reg(0) <= X"00000000";
        delayMatch2_reg(1) <= X"00000000";
        delayMatch2_reg(2) <= X"00000000";
        delayMatch2_reg(3) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  theta_el <= delayMatch2_reg(3);
  delayMatch2_reg_next(0) <= theta_el_1;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);

END rtl;

