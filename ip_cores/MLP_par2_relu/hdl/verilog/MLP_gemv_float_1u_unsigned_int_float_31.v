// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_gemv_float_1u_unsigned_int_float_31 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        p_M_dout,
        p_M_empty_n,
        p_M_read,
        p_x_dout,
        p_x_empty_n,
        p_x_read,
        p_y_din,
        p_y_full_n,
        p_y_write,
        p_m_r_dout,
        p_m_r_empty_n,
        p_m_r_read,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_m_out_din,
        p_m_out_full_n,
        p_m_out_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [63:0] p_M_dout;
input   p_M_empty_n;
output   p_M_read;
input  [63:0] p_x_dout;
input   p_x_empty_n;
output   p_x_read;
output  [31:0] p_y_din;
input   p_y_full_n;
output   p_y_write;
input  [31:0] p_m_r_dout;
input   p_m_r_empty_n;
output   p_m_r_read;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
output  [31:0] p_m_out_din;
input   p_m_out_full_n;
output   p_m_out_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    dot37124_U0_ap_start;
wire    dot37124_U0_ap_done;
wire    dot37124_U0_ap_continue;
wire    dot37124_U0_ap_idle;
wire    dot37124_U0_ap_ready;
wire    dot37124_U0_p_m_read;
wire   [31:0] dot37124_U0_p_m_out_din;
wire    dot37124_U0_p_m_out_write;
wire    dot37124_U0_p_M_r_read;
wire    dot37124_U0_p_x_read;
wire   [31:0] dot37124_U0_p_y_din;
wire    dot37124_U0_p_y_write;
wire    dot37124_U0_p_n_read;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    dot37124_U0_start_full_n;
wire    dot37124_U0_start_write;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
end

MLP_dot37124 dot37124_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(dot37124_U0_ap_start),
    .ap_done(dot37124_U0_ap_done),
    .ap_continue(dot37124_U0_ap_continue),
    .ap_idle(dot37124_U0_ap_idle),
    .ap_ready(dot37124_U0_ap_ready),
    .p_m_dout(p_m_r_dout),
    .p_m_empty_n(p_m_r_empty_n),
    .p_m_read(dot37124_U0_p_m_read),
    .p_m_out_din(dot37124_U0_p_m_out_din),
    .p_m_out_full_n(p_m_out_full_n),
    .p_m_out_write(dot37124_U0_p_m_out_write),
    .p_M_r_dout(p_M_dout),
    .p_M_r_empty_n(p_M_empty_n),
    .p_M_r_read(dot37124_U0_p_M_r_read),
    .p_x_dout(p_x_dout),
    .p_x_empty_n(p_x_empty_n),
    .p_x_read(dot37124_U0_p_x_read),
    .p_y_din(dot37124_U0_p_y_din),
    .p_y_full_n(p_y_full_n),
    .p_y_write(dot37124_U0_p_y_write),
    .p_n_dout(p_n_dout),
    .p_n_empty_n(p_n_empty_n),
    .p_n_read(dot37124_U0_p_n_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = dot37124_U0_ap_done;

assign ap_idle = dot37124_U0_ap_idle;

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = dot37124_U0_ap_done;

assign ap_sync_ready = dot37124_U0_ap_ready;

assign dot37124_U0_ap_continue = ap_continue;

assign dot37124_U0_ap_start = real_start;

assign dot37124_U0_start_full_n = 1'b1;

assign dot37124_U0_start_write = 1'b0;

assign internal_ap_ready = ap_sync_ready;

assign p_M_read = dot37124_U0_p_M_r_read;

assign p_m_out_din = dot37124_U0_p_m_out_din;

assign p_m_out_write = dot37124_U0_p_m_out_write;

assign p_m_r_read = dot37124_U0_p_m_read;

assign p_n_read = dot37124_U0_p_n_read;

assign p_x_read = dot37124_U0_p_x_read;

assign p_y_din = dot37124_U0_p_y_din;

assign p_y_write = dot37124_U0_p_y_write;

assign start_out = real_start;

endmodule //MLP_gemv_float_1u_unsigned_int_float_31
