// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MLP_MLP,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.561000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=42,HLS_SYN_DSP=0,HLS_SYN_FF=27392,HLS_SYN_LUT=29291,HLS_VERSION=2020_1}" *)

module MLP (
        ap_clk,
        ap_rst_n,
        m_axi_axi_read_AWVALID,
        m_axi_axi_read_AWREADY,
        m_axi_axi_read_AWADDR,
        m_axi_axi_read_AWID,
        m_axi_axi_read_AWLEN,
        m_axi_axi_read_AWSIZE,
        m_axi_axi_read_AWBURST,
        m_axi_axi_read_AWLOCK,
        m_axi_axi_read_AWCACHE,
        m_axi_axi_read_AWPROT,
        m_axi_axi_read_AWQOS,
        m_axi_axi_read_AWREGION,
        m_axi_axi_read_AWUSER,
        m_axi_axi_read_WVALID,
        m_axi_axi_read_WREADY,
        m_axi_axi_read_WDATA,
        m_axi_axi_read_WSTRB,
        m_axi_axi_read_WLAST,
        m_axi_axi_read_WID,
        m_axi_axi_read_WUSER,
        m_axi_axi_read_ARVALID,
        m_axi_axi_read_ARREADY,
        m_axi_axi_read_ARADDR,
        m_axi_axi_read_ARID,
        m_axi_axi_read_ARLEN,
        m_axi_axi_read_ARSIZE,
        m_axi_axi_read_ARBURST,
        m_axi_axi_read_ARLOCK,
        m_axi_axi_read_ARCACHE,
        m_axi_axi_read_ARPROT,
        m_axi_axi_read_ARQOS,
        m_axi_axi_read_ARREGION,
        m_axi_axi_read_ARUSER,
        m_axi_axi_read_RVALID,
        m_axi_axi_read_RREADY,
        m_axi_axi_read_RDATA,
        m_axi_axi_read_RLAST,
        m_axi_axi_read_RID,
        m_axi_axi_read_RUSER,
        m_axi_axi_read_RRESP,
        m_axi_axi_read_BVALID,
        m_axi_axi_read_BREADY,
        m_axi_axi_read_BRESP,
        m_axi_axi_read_BID,
        m_axi_axi_read_BUSER,
        m_axi_axi_write_AWVALID,
        m_axi_axi_write_AWREADY,
        m_axi_axi_write_AWADDR,
        m_axi_axi_write_AWID,
        m_axi_axi_write_AWLEN,
        m_axi_axi_write_AWSIZE,
        m_axi_axi_write_AWBURST,
        m_axi_axi_write_AWLOCK,
        m_axi_axi_write_AWCACHE,
        m_axi_axi_write_AWPROT,
        m_axi_axi_write_AWQOS,
        m_axi_axi_write_AWREGION,
        m_axi_axi_write_AWUSER,
        m_axi_axi_write_WVALID,
        m_axi_axi_write_WREADY,
        m_axi_axi_write_WDATA,
        m_axi_axi_write_WSTRB,
        m_axi_axi_write_WLAST,
        m_axi_axi_write_WID,
        m_axi_axi_write_WUSER,
        m_axi_axi_write_ARVALID,
        m_axi_axi_write_ARREADY,
        m_axi_axi_write_ARADDR,
        m_axi_axi_write_ARID,
        m_axi_axi_write_ARLEN,
        m_axi_axi_write_ARSIZE,
        m_axi_axi_write_ARBURST,
        m_axi_axi_write_ARLOCK,
        m_axi_axi_write_ARCACHE,
        m_axi_axi_write_ARPROT,
        m_axi_axi_write_ARQOS,
        m_axi_axi_write_ARREGION,
        m_axi_axi_write_ARUSER,
        m_axi_axi_write_RVALID,
        m_axi_axi_write_RREADY,
        m_axi_axi_write_RDATA,
        m_axi_axi_write_RLAST,
        m_axi_axi_write_RID,
        m_axi_axi_write_RUSER,
        m_axi_axi_write_RRESP,
        m_axi_axi_write_BVALID,
        m_axi_axi_write_BREADY,
        m_axi_axi_write_BRESP,
        m_axi_axi_write_BID,
        m_axi_axi_write_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 69'd1;
parameter    ap_ST_fsm_state2 = 69'd2;
parameter    ap_ST_fsm_state3 = 69'd4;
parameter    ap_ST_fsm_state4 = 69'd8;
parameter    ap_ST_fsm_state5 = 69'd16;
parameter    ap_ST_fsm_state6 = 69'd32;
parameter    ap_ST_fsm_state7 = 69'd64;
parameter    ap_ST_fsm_state8 = 69'd128;
parameter    ap_ST_fsm_state9 = 69'd256;
parameter    ap_ST_fsm_pp0_stage0 = 69'd512;
parameter    ap_ST_fsm_state13 = 69'd1024;
parameter    ap_ST_fsm_state14 = 69'd2048;
parameter    ap_ST_fsm_state15 = 69'd4096;
parameter    ap_ST_fsm_state16 = 69'd8192;
parameter    ap_ST_fsm_state17 = 69'd16384;
parameter    ap_ST_fsm_state18 = 69'd32768;
parameter    ap_ST_fsm_state19 = 69'd65536;
parameter    ap_ST_fsm_state20 = 69'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 69'd262144;
parameter    ap_ST_fsm_state24 = 69'd524288;
parameter    ap_ST_fsm_state25 = 69'd1048576;
parameter    ap_ST_fsm_state26 = 69'd2097152;
parameter    ap_ST_fsm_state27 = 69'd4194304;
parameter    ap_ST_fsm_state28 = 69'd8388608;
parameter    ap_ST_fsm_state29 = 69'd16777216;
parameter    ap_ST_fsm_state30 = 69'd33554432;
parameter    ap_ST_fsm_state31 = 69'd67108864;
parameter    ap_ST_fsm_pp2_stage0 = 69'd134217728;
parameter    ap_ST_fsm_state35 = 69'd268435456;
parameter    ap_ST_fsm_state36 = 69'd536870912;
parameter    ap_ST_fsm_pp3_stage0 = 69'd1073741824;
parameter    ap_ST_fsm_pp3_stage1 = 69'd2147483648;
parameter    ap_ST_fsm_state40 = 69'd4294967296;
parameter    ap_ST_fsm_state41 = 69'd8589934592;
parameter    ap_ST_fsm_state42 = 69'd17179869184;
parameter    ap_ST_fsm_state43 = 69'd34359738368;
parameter    ap_ST_fsm_state44 = 69'd68719476736;
parameter    ap_ST_fsm_state45 = 69'd137438953472;
parameter    ap_ST_fsm_state46 = 69'd274877906944;
parameter    ap_ST_fsm_state47 = 69'd549755813888;
parameter    ap_ST_fsm_state48 = 69'd1099511627776;
parameter    ap_ST_fsm_state49 = 69'd2199023255552;
parameter    ap_ST_fsm_state50 = 69'd4398046511104;
parameter    ap_ST_fsm_state51 = 69'd8796093022208;
parameter    ap_ST_fsm_state52 = 69'd17592186044416;
parameter    ap_ST_fsm_state53 = 69'd35184372088832;
parameter    ap_ST_fsm_state54 = 69'd70368744177664;
parameter    ap_ST_fsm_state55 = 69'd140737488355328;
parameter    ap_ST_fsm_state56 = 69'd281474976710656;
parameter    ap_ST_fsm_state57 = 69'd562949953421312;
parameter    ap_ST_fsm_state58 = 69'd1125899906842624;
parameter    ap_ST_fsm_state59 = 69'd2251799813685248;
parameter    ap_ST_fsm_state60 = 69'd4503599627370496;
parameter    ap_ST_fsm_state61 = 69'd9007199254740992;
parameter    ap_ST_fsm_state62 = 69'd18014398509481984;
parameter    ap_ST_fsm_state63 = 69'd36028797018963968;
parameter    ap_ST_fsm_pp4_stage0 = 69'd72057594037927936;
parameter    ap_ST_fsm_state67 = 69'd144115188075855872;
parameter    ap_ST_fsm_state68 = 69'd288230376151711744;
parameter    ap_ST_fsm_state69 = 69'd576460752303423488;
parameter    ap_ST_fsm_state70 = 69'd1152921504606846976;
parameter    ap_ST_fsm_state71 = 69'd2305843009213693952;
parameter    ap_ST_fsm_state72 = 69'd4611686018427387904;
parameter    ap_ST_fsm_pp5_stage0 = 69'd9223372036854775808;
parameter    ap_ST_fsm_state76 = 69'd18446744073709551616;
parameter    ap_ST_fsm_state77 = 69'd36893488147419103232;
parameter    ap_ST_fsm_state78 = 69'd73786976294838206464;
parameter    ap_ST_fsm_state79 = 69'd147573952589676412928;
parameter    ap_ST_fsm_state80 = 69'd295147905179352825856;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_READ_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_READ_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_READ_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_USER_VALUE = 0;
parameter    C_M_AXI_AXI_READ_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_READ_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_WRITE_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_WRITE_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_WRITE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_USER_VALUE = 0;
parameter    C_M_AXI_AXI_WRITE_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_WRITE_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_READ_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_WRITE_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_axi_read_AWVALID;
input   m_axi_axi_read_AWREADY;
output  [C_M_AXI_AXI_READ_ADDR_WIDTH - 1:0] m_axi_axi_read_AWADDR;
output  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_AWID;
output  [7:0] m_axi_axi_read_AWLEN;
output  [2:0] m_axi_axi_read_AWSIZE;
output  [1:0] m_axi_axi_read_AWBURST;
output  [1:0] m_axi_axi_read_AWLOCK;
output  [3:0] m_axi_axi_read_AWCACHE;
output  [2:0] m_axi_axi_read_AWPROT;
output  [3:0] m_axi_axi_read_AWQOS;
output  [3:0] m_axi_axi_read_AWREGION;
output  [C_M_AXI_AXI_READ_AWUSER_WIDTH - 1:0] m_axi_axi_read_AWUSER;
output   m_axi_axi_read_WVALID;
input   m_axi_axi_read_WREADY;
output  [C_M_AXI_AXI_READ_DATA_WIDTH - 1:0] m_axi_axi_read_WDATA;
output  [C_M_AXI_AXI_READ_WSTRB_WIDTH - 1:0] m_axi_axi_read_WSTRB;
output   m_axi_axi_read_WLAST;
output  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_WID;
output  [C_M_AXI_AXI_READ_WUSER_WIDTH - 1:0] m_axi_axi_read_WUSER;
output   m_axi_axi_read_ARVALID;
input   m_axi_axi_read_ARREADY;
output  [C_M_AXI_AXI_READ_ADDR_WIDTH - 1:0] m_axi_axi_read_ARADDR;
output  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_ARID;
output  [7:0] m_axi_axi_read_ARLEN;
output  [2:0] m_axi_axi_read_ARSIZE;
output  [1:0] m_axi_axi_read_ARBURST;
output  [1:0] m_axi_axi_read_ARLOCK;
output  [3:0] m_axi_axi_read_ARCACHE;
output  [2:0] m_axi_axi_read_ARPROT;
output  [3:0] m_axi_axi_read_ARQOS;
output  [3:0] m_axi_axi_read_ARREGION;
output  [C_M_AXI_AXI_READ_ARUSER_WIDTH - 1:0] m_axi_axi_read_ARUSER;
input   m_axi_axi_read_RVALID;
output   m_axi_axi_read_RREADY;
input  [C_M_AXI_AXI_READ_DATA_WIDTH - 1:0] m_axi_axi_read_RDATA;
input   m_axi_axi_read_RLAST;
input  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_RID;
input  [C_M_AXI_AXI_READ_RUSER_WIDTH - 1:0] m_axi_axi_read_RUSER;
input  [1:0] m_axi_axi_read_RRESP;
input   m_axi_axi_read_BVALID;
output   m_axi_axi_read_BREADY;
input  [1:0] m_axi_axi_read_BRESP;
input  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_BID;
input  [C_M_AXI_AXI_READ_BUSER_WIDTH - 1:0] m_axi_axi_read_BUSER;
output   m_axi_axi_write_AWVALID;
input   m_axi_axi_write_AWREADY;
output  [C_M_AXI_AXI_WRITE_ADDR_WIDTH - 1:0] m_axi_axi_write_AWADDR;
output  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_AWID;
output  [7:0] m_axi_axi_write_AWLEN;
output  [2:0] m_axi_axi_write_AWSIZE;
output  [1:0] m_axi_axi_write_AWBURST;
output  [1:0] m_axi_axi_write_AWLOCK;
output  [3:0] m_axi_axi_write_AWCACHE;
output  [2:0] m_axi_axi_write_AWPROT;
output  [3:0] m_axi_axi_write_AWQOS;
output  [3:0] m_axi_axi_write_AWREGION;
output  [C_M_AXI_AXI_WRITE_AWUSER_WIDTH - 1:0] m_axi_axi_write_AWUSER;
output   m_axi_axi_write_WVALID;
input   m_axi_axi_write_WREADY;
output  [C_M_AXI_AXI_WRITE_DATA_WIDTH - 1:0] m_axi_axi_write_WDATA;
output  [C_M_AXI_AXI_WRITE_WSTRB_WIDTH - 1:0] m_axi_axi_write_WSTRB;
output   m_axi_axi_write_WLAST;
output  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_WID;
output  [C_M_AXI_AXI_WRITE_WUSER_WIDTH - 1:0] m_axi_axi_write_WUSER;
output   m_axi_axi_write_ARVALID;
input   m_axi_axi_write_ARREADY;
output  [C_M_AXI_AXI_WRITE_ADDR_WIDTH - 1:0] m_axi_axi_write_ARADDR;
output  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_ARID;
output  [7:0] m_axi_axi_write_ARLEN;
output  [2:0] m_axi_axi_write_ARSIZE;
output  [1:0] m_axi_axi_write_ARBURST;
output  [1:0] m_axi_axi_write_ARLOCK;
output  [3:0] m_axi_axi_write_ARCACHE;
output  [2:0] m_axi_axi_write_ARPROT;
output  [3:0] m_axi_axi_write_ARQOS;
output  [3:0] m_axi_axi_write_ARREGION;
output  [C_M_AXI_AXI_WRITE_ARUSER_WIDTH - 1:0] m_axi_axi_write_ARUSER;
input   m_axi_axi_write_RVALID;
output   m_axi_axi_write_RREADY;
input  [C_M_AXI_AXI_WRITE_DATA_WIDTH - 1:0] m_axi_axi_write_RDATA;
input   m_axi_axi_write_RLAST;
input  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_RID;
input  [C_M_AXI_AXI_WRITE_RUSER_WIDTH - 1:0] m_axi_axi_write_RUSER;
input  [1:0] m_axi_axi_write_RRESP;
input   m_axi_axi_write_BVALID;
output   m_axi_axi_write_BREADY;
input  [1:0] m_axi_axi_write_BRESP;
input  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_BID;
input  [C_M_AXI_AXI_WRITE_BUSER_WIDTH - 1:0] m_axi_axi_write_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [68:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] input_r;
wire   [63:0] output_r;
wire   [63:0] axiWeightInput;
wire   [63:0] axiBiasInput;
wire   [63:0] axiLayerOutput;
wire   [31:0] numberInputs;
wire   [31:0] numberOutputs;
wire   [31:0] numberLayers;
wire  signed [31:0] numberNeurons;
wire   [31:0] loadParameters;
wire   [31:0] exportLayers;
reg   [13:0] bramWeight_address0;
reg    bramWeight_ce0;
reg    bramWeight_we0;
wire   [31:0] bramWeight_d0;
wire   [31:0] bramWeight_q0;
reg   [13:0] bramWeight_address1;
reg    bramWeight_ce1;
wire   [31:0] bramWeight_q1;
reg   [8:0] bramBias_address0;
reg    bramBias_ce0;
reg    bramBias_we0;
wire   [31:0] bramBias_d0;
wire   [31:0] bramBias_q0;
reg    axi_read_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    axi_read_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond316_reg_1118;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond294_reg_1172;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond305_reg_1148;
wire    ap_CS_fsm_state14;
reg    axi_write_blk_n_AW;
wire    ap_CS_fsm_state63;
reg   [0:0] icmp_ln106_reg_1343;
reg    axi_write_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] exitcond272_reg_1353;
reg   [0:0] exitcond272_reg_1353_pp4_iter1_reg;
reg    axi_write_blk_n_B;
wire    ap_CS_fsm_state71;
reg   [0:0] icmp_ln62_reg_1186;
wire    ap_CS_fsm_state72;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_pp5_stage0;
reg   [0:0] exitcond1_reg_1382;
reg   [0:0] exitcond1_reg_1382_pp5_iter1_reg;
wire    ap_CS_fsm_state80;
reg   [0:0] icmp_ln109_reg_1372;
wire    axi_read_AWREADY;
wire    axi_read_WREADY;
reg    axi_read_ARVALID;
wire    axi_read_ARREADY;
reg   [31:0] axi_read_ARADDR;
reg   [31:0] axi_read_ARLEN;
wire    axi_read_RVALID;
reg    axi_read_RREADY;
wire   [31:0] axi_read_RDATA;
wire    axi_read_RLAST;
wire   [0:0] axi_read_RID;
wire   [0:0] axi_read_RUSER;
wire   [1:0] axi_read_RRESP;
wire    axi_read_BVALID;
wire   [1:0] axi_read_BRESP;
wire   [0:0] axi_read_BID;
wire   [0:0] axi_read_BUSER;
reg    axi_write_AWVALID;
wire    axi_write_AWREADY;
reg   [31:0] axi_write_AWADDR;
reg   [31:0] axi_write_AWLEN;
reg    axi_write_WVALID;
wire    axi_write_WREADY;
reg   [31:0] axi_write_WDATA;
wire    axi_write_ARREADY;
wire    axi_write_RVALID;
wire   [31:0] axi_write_RDATA;
wire    axi_write_RLAST;
wire   [0:0] axi_write_RID;
wire   [0:0] axi_write_RUSER;
wire   [1:0] axi_write_RRESP;
wire    axi_write_BVALID;
reg    axi_write_BREADY;
wire   [1:0] axi_write_BRESP;
wire   [0:0] axi_write_BID;
wire   [0:0] axi_write_BUSER;
reg   [31:0] loop_index23_reg_427;
reg   [31:0] loop_index23_reg_427_pp0_iter1_reg;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] loop_index17_reg_439;
reg   [31:0] loop_index17_reg_439_pp1_iter1_reg;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] loop_index11_reg_451;
reg   [31:0] loop_index11_reg_451_pp2_iter1_reg;
wire    ap_block_state32_pp2_stage0_iter0;
reg    ap_block_state33_pp2_stage0_iter1;
wire    ap_block_state34_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [29:0] i_12_reg_463;
reg   [31:0] loop_index5_reg_496;
reg   [31:0] loop_index_reg_507;
reg   [63:0] axiLayerOutput_read_reg_1013;
reg   [63:0] axiBiasInput_read_reg_1018;
reg   [63:0] axiWeightInput_read_reg_1023;
reg   [63:0] output_read_reg_1028;
reg   [63:0] input_read_reg_1033;
wire   [0:0] icmp_ln44_fu_576_p2;
reg   [31:0] numberInputs_read_reg_1042;
wire   [8:0] trunc_ln44_fu_582_p1;
reg   [8:0] trunc_ln44_reg_1053;
wire   [13:0] trunc_ln44_1_fu_586_p1;
reg   [13:0] trunc_ln44_1_reg_1059;
reg   [31:0] numberNeurons_read_reg_1065;
reg  signed [31:0] numberLayers_read_reg_1078;
reg   [31:0] numberOutputs_read_reg_1085;
wire   [31:0] mul_ln49_fu_596_p2;
reg   [31:0] mul_ln49_reg_1097;
wire   [31:0] valuesToCopy_fu_611_p2;
reg   [31:0] valuesToCopy_reg_1102;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln52_fu_616_p2;
reg   [31:0] axi_read_addr_reg_1112;
wire   [0:0] exitcond316_fu_641_p2;
reg   [0:0] exitcond316_reg_1118_pp0_iter1_reg;
wire   [31:0] empty_149_fu_646_p2;
reg   [31:0] empty_149_reg_1122;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] axi_read_addr_read_reg_1127;
wire   [31:0] valuesToCopy_2_fu_661_p2;
reg   [31:0] valuesToCopy_2_reg_1132;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln57_fu_666_p2;
reg   [31:0] axi_read_addr_1_reg_1142;
wire   [0:0] exitcond305_fu_691_p2;
reg   [0:0] exitcond305_reg_1148_pp1_iter1_reg;
wire   [31:0] empty_151_fu_696_p2;
reg   [31:0] empty_151_reg_1152;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] axi_read_addr_1_read_reg_1157;
wire   [0:0] icmp_ln60_fu_711_p2;
wire    ap_CS_fsm_state24;
reg   [31:0] axi_read_addr_2_reg_1166;
wire   [0:0] exitcond294_fu_735_p2;
reg   [0:0] exitcond294_reg_1172_pp2_iter1_reg;
wire   [31:0] empty_154_fu_740_p2;
reg   [31:0] empty_154_reg_1176;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] axi_read_addr_2_read_reg_1181;
wire   [0:0] icmp_ln62_fu_755_p2;
wire    ap_CS_fsm_state35;
reg   [29:0] trunc_ln1_reg_1190;
wire   [0:0] icmp_ln137_fu_770_p2;
reg   [0:0] icmp_ln137_reg_1195;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state37_pp3_stage0_iter0;
wire    ap_block_state39_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [29:0] add_ln137_fu_775_p2;
reg   [29:0] add_ln137_reg_1199;
reg    ap_enable_reg_pp3_iter0;
wire   [8:0] tmp_s_fu_785_p3;
reg   [8:0] tmp_s_reg_1204;
wire   [63:0] zext_ln143_fu_793_p1;
reg   [63:0] zext_ln143_reg_1210;
wire   [63:0] zext_ln143_11_fu_804_p1;
reg   [63:0] zext_ln143_11_reg_1220;
wire   [63:0] zext_ln143_12_fu_814_p1;
reg   [63:0] zext_ln143_12_reg_1230;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state38_pp3_stage1_iter0;
wire    ap_block_pp3_stage1_11001;
wire   [63:0] zext_ln143_13_fu_824_p1;
reg   [63:0] zext_ln143_13_reg_1240;
wire  signed [8:0] trunc_ln77_fu_829_p1;
reg  signed [8:0] trunc_ln77_reg_1250;
wire    ap_CS_fsm_state45;
wire    grp_copyArray_float_4u_1_fu_557_ap_ready;
wire    grp_copyArray_float_4u_1_fu_557_ap_done;
wire  signed [13:0] trunc_ln77_1_fu_832_p1;
reg  signed [13:0] trunc_ln77_1_reg_1255;
wire   [31:0] sub21_fu_838_p2;
reg   [31:0] sub21_reg_1263;
(* use_dsp48 = "no" *) wire  signed [13:0] sub21_cast_fu_843_p2;
reg  signed [13:0] sub21_cast_reg_1268;
wire   [31:0] add_ln85_fu_854_p2;
reg   [31:0] add_ln85_reg_1276;
wire    ap_CS_fsm_state46;
wire   [13:0] add_ln83_1_fu_864_p2;
reg   [13:0] add_ln83_1_reg_1281;
wire   [0:0] icmp_ln80_fu_849_p2;
wire   [8:0] mul_ln85_fu_880_p2;
reg   [8:0] mul_ln85_reg_1291;
wire  signed [13:0] grp_fu_996_p2;
reg   [13:0] mul_ln83_reg_1297;
wire    ap_CS_fsm_state49;
wire   [8:0] add_ln91_fu_885_p2;
reg   [8:0] add_ln91_reg_1302;
wire    ap_CS_fsm_state50;
wire    grp_processLayer_float_4u_2u_s_fu_530_ap_ready;
wire    grp_processLayer_float_4u_2u_s_fu_530_ap_done;
wire    ap_sync_grp_processLayer_float_4u_2u_s_fu_530_ap_ready;
wire    ap_sync_grp_processLayer_float_4u_2u_s_fu_530_ap_done;
reg    ap_block_state50_on_subcall_done;
wire  signed [13:0] grp_fu_1002_p3;
wire    ap_CS_fsm_state57;
wire  signed [13:0] grp_fu_1007_p2;
reg   [13:0] mul_ln96_1_reg_1312;
wire    ap_CS_fsm_state60;
wire   [31:0] grp_fu_572_p2;
reg   [31:0] mul_ln98_reg_1317;
wire   [8:0] trunc_ln100_fu_889_p1;
reg   [8:0] trunc_ln100_reg_1322;
wire   [31:0] add_ln105_fu_894_p2;
reg   [31:0] add_ln105_reg_1327;
wire    ap_CS_fsm_state61;
wire    grp_outputLayer_float_4u_2u_s_fu_543_ap_ready;
wire    grp_outputLayer_float_4u_2u_s_fu_543_ap_done;
wire    ap_sync_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready;
wire    ap_sync_grp_outputLayer_float_4u_2u_s_fu_543_ap_done;
reg    ap_block_state61_on_subcall_done;
wire   [8:0] trunc_ln105_fu_898_p1;
reg   [8:0] trunc_ln105_reg_1332;
wire   [31:0] add_ln106_fu_902_p2;
reg   [31:0] add_ln106_reg_1337;
wire    ap_CS_fsm_state62;
wire   [0:0] icmp_ln106_fu_906_p2;
reg    ap_block_state63_io;
wire    grp_copyArray_float_4u_s_fu_564_ap_ready;
wire    grp_copyArray_float_4u_s_fu_564_ap_done;
wire   [0:0] exitcond272_fu_932_p2;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state64_pp4_stage0_iter0;
wire    ap_block_state65_pp4_stage0_iter1;
wire    ap_block_state66_pp4_stage0_iter2;
reg    ap_block_state66_io;
reg    ap_block_pp4_stage0_11001;
wire   [31:0] empty_159_fu_937_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [31:0] bramLayerResults_q0;
reg   [31:0] bramLayerResults_load_reg_1367;
reg    ap_enable_reg_pp4_iter1;
wire   [0:0] icmp_ln109_fu_952_p2;
reg    ap_predicate_op333_writeresp_state71;
reg    ap_block_state71;
reg   [31:0] axi_write_addr_1_reg_1376;
wire   [0:0] exitcond1_fu_976_p2;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state73_pp5_stage0_iter0;
wire    ap_block_state74_pp5_stage0_iter1;
wire    ap_block_state75_pp5_stage0_iter2;
reg    ap_block_state75_io;
reg    ap_block_pp5_stage0_11001;
wire   [31:0] empty_163_fu_981_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [31:0] layerBuffer0_q0;
reg   [31:0] layerBuffer0_load_reg_1396;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state31;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state32;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state37;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage1_subdone;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state64;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state73;
reg    ap_enable_reg_pp5_iter1;
reg   [2:0] inputData_address0;
reg    inputData_ce0;
reg    inputData_we0;
wire   [31:0] inputData_d0;
wire   [31:0] inputData_q0;
reg   [2:0] inputData_address1;
reg    inputData_ce1;
wire   [31:0] inputData_q1;
reg   [5:0] layerBuffer0_address0;
reg    layerBuffer0_ce0;
reg    layerBuffer0_we0;
reg   [31:0] layerBuffer0_d0;
reg   [5:0] layerBuffer0_address1;
reg    layerBuffer0_ce1;
wire   [31:0] layerBuffer0_q1;
reg   [5:0] layerBuffer1_address0;
reg    layerBuffer1_ce0;
reg    layerBuffer1_we0;
wire   [31:0] layerBuffer1_q0;
reg   [5:0] layerBuffer1_address1;
reg    layerBuffer1_ce1;
reg    layerBuffer1_we1;
wire   [31:0] layerBuffer1_q1;
reg   [8:0] bramLayerResults_address0;
reg    bramLayerResults_ce0;
reg    bramLayerResults_we0;
reg   [31:0] bramLayerResults_d0;
reg   [8:0] bramLayerResults_address1;
reg    bramLayerResults_ce1;
reg    bramLayerResults_we1;
reg   [31:0] bramLayerResults_d1;
wire   [13:0] grp_processLayer_float_4u_2u_1_fu_518_p_weights_address0;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_weights_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_518_p_weights_d0;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_weights_we0;
wire   [13:0] grp_processLayer_float_4u_2u_1_fu_518_p_weights_address1;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_weights_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_518_p_weights_d1;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_weights_we1;
wire   [2:0] grp_processLayer_float_4u_2u_1_fu_518_p_input_address0;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_input_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_518_p_input_d0;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_input_we0;
wire   [2:0] grp_processLayer_float_4u_2u_1_fu_518_p_input_address1;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_input_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_518_p_input_d1;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_input_we1;
wire   [8:0] grp_processLayer_float_4u_2u_1_fu_518_p_bias_address0;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_bias_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_518_p_bias_d0;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_bias_we0;
wire   [8:0] grp_processLayer_float_4u_2u_1_fu_518_p_bias_address1;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_bias_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_518_p_bias_d1;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_bias_we1;
wire   [5:0] grp_processLayer_float_4u_2u_1_fu_518_p_output_address0;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_output_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_518_p_output_d0;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_output_we0;
wire   [5:0] grp_processLayer_float_4u_2u_1_fu_518_p_output_address1;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_output_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_1_fu_518_p_output_d1;
wire    grp_processLayer_float_4u_2u_1_fu_518_p_output_we1;
wire    grp_processLayer_float_4u_2u_1_fu_518_ap_start;
wire    grp_processLayer_float_4u_2u_1_fu_518_ap_done;
wire    grp_processLayer_float_4u_2u_1_fu_518_ap_ready;
wire    grp_processLayer_float_4u_2u_1_fu_518_ap_idle;
reg    grp_processLayer_float_4u_2u_1_fu_518_ap_continue;
wire   [13:0] grp_processLayer_float_4u_2u_s_fu_530_p_weights_address0;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_weights_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_530_p_weights_d0;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_weights_we0;
wire   [13:0] grp_processLayer_float_4u_2u_s_fu_530_p_weights_address1;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_weights_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_530_p_weights_d1;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_weights_we1;
wire   [5:0] grp_processLayer_float_4u_2u_s_fu_530_p_input_address0;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_input_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_530_p_input_d0;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_input_we0;
wire   [5:0] grp_processLayer_float_4u_2u_s_fu_530_p_input_address1;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_input_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_530_p_input_d1;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_input_we1;
wire   [8:0] grp_processLayer_float_4u_2u_s_fu_530_p_bias_address0;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_bias_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_530_p_bias_d0;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_bias_we0;
wire   [8:0] grp_processLayer_float_4u_2u_s_fu_530_p_bias_address1;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_bias_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_530_p_bias_d1;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_bias_we1;
wire   [5:0] grp_processLayer_float_4u_2u_s_fu_530_p_output_address0;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_output_ce0;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_530_p_output_d0;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_output_we0;
wire   [5:0] grp_processLayer_float_4u_2u_s_fu_530_p_output_address1;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_output_ce1;
wire   [31:0] grp_processLayer_float_4u_2u_s_fu_530_p_output_d1;
wire    grp_processLayer_float_4u_2u_s_fu_530_p_output_we1;
wire    grp_processLayer_float_4u_2u_s_fu_530_ap_start;
wire    grp_processLayer_float_4u_2u_s_fu_530_ap_idle;
reg    grp_processLayer_float_4u_2u_s_fu_530_ap_continue;
wire   [13:0] grp_outputLayer_float_4u_2u_s_fu_543_p_weights_address0;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_weights_ce0;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_543_p_weights_d0;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_weights_we0;
wire   [13:0] grp_outputLayer_float_4u_2u_s_fu_543_p_weights_address1;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_weights_ce1;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_543_p_weights_d1;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_weights_we1;
wire   [5:0] grp_outputLayer_float_4u_2u_s_fu_543_p_input_address0;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_input_ce0;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_543_p_input_d0;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_input_we0;
wire   [5:0] grp_outputLayer_float_4u_2u_s_fu_543_p_input_address1;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_input_ce1;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_543_p_input_d1;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_input_we1;
wire   [8:0] grp_outputLayer_float_4u_2u_s_fu_543_p_bias_address0;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_bias_ce0;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_543_p_bias_d0;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_bias_we0;
wire   [8:0] grp_outputLayer_float_4u_2u_s_fu_543_p_bias_address1;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_bias_ce1;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_543_p_bias_d1;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_bias_we1;
wire   [5:0] grp_outputLayer_float_4u_2u_s_fu_543_p_output_address0;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_output_ce0;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_543_p_output_d0;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_output_we0;
wire   [5:0] grp_outputLayer_float_4u_2u_s_fu_543_p_output_address1;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_output_ce1;
wire   [31:0] grp_outputLayer_float_4u_2u_s_fu_543_p_output_d1;
wire    grp_outputLayer_float_4u_2u_s_fu_543_p_output_we1;
wire    grp_outputLayer_float_4u_2u_s_fu_543_ap_start;
wire    grp_outputLayer_float_4u_2u_s_fu_543_ap_idle;
reg    grp_outputLayer_float_4u_2u_s_fu_543_ap_continue;
wire    grp_copyArray_float_4u_1_fu_557_ap_start;
wire    grp_copyArray_float_4u_1_fu_557_ap_idle;
wire   [5:0] grp_copyArray_float_4u_1_fu_557_p_input_address0;
wire    grp_copyArray_float_4u_1_fu_557_p_input_ce0;
wire   [5:0] grp_copyArray_float_4u_1_fu_557_p_input_address1;
wire    grp_copyArray_float_4u_1_fu_557_p_input_ce1;
wire   [5:0] grp_copyArray_float_4u_1_fu_557_p_output_address0;
wire    grp_copyArray_float_4u_1_fu_557_p_output_ce0;
wire    grp_copyArray_float_4u_1_fu_557_p_output_we0;
wire   [31:0] grp_copyArray_float_4u_1_fu_557_p_output_d0;
wire   [5:0] grp_copyArray_float_4u_1_fu_557_p_output_address1;
wire    grp_copyArray_float_4u_1_fu_557_p_output_ce1;
wire    grp_copyArray_float_4u_1_fu_557_p_output_we1;
wire   [31:0] grp_copyArray_float_4u_1_fu_557_p_output_d1;
wire    grp_copyArray_float_4u_s_fu_564_ap_start;
wire    grp_copyArray_float_4u_s_fu_564_ap_idle;
wire   [5:0] grp_copyArray_float_4u_s_fu_564_p_input_address0;
wire    grp_copyArray_float_4u_s_fu_564_p_input_ce0;
wire   [5:0] grp_copyArray_float_4u_s_fu_564_p_input_address1;
wire    grp_copyArray_float_4u_s_fu_564_p_input_ce1;
wire   [8:0] grp_copyArray_float_4u_s_fu_564_p_output_address0;
wire    grp_copyArray_float_4u_s_fu_564_p_output_ce0;
wire    grp_copyArray_float_4u_s_fu_564_p_output_we0;
wire   [31:0] grp_copyArray_float_4u_s_fu_564_p_output_d0;
wire   [8:0] grp_copyArray_float_4u_s_fu_564_p_output_address1;
wire    grp_copyArray_float_4u_s_fu_564_p_output_ce1;
wire    grp_copyArray_float_4u_s_fu_564_p_output_we1;
wire   [31:0] grp_copyArray_float_4u_s_fu_564_p_output_d1;
reg   [8:0] grp_copyArray_float_4u_s_fu_564_p_output_offset;
reg   [31:0] grp_copyArray_float_4u_s_fu_564_size;
reg   [31:0] ap_phi_mux_loop_index23_phi_fu_431_p4;
reg   [31:0] ap_phi_mux_loop_index17_phi_fu_443_p4;
reg   [31:0] ap_phi_mux_loop_index11_phi_fu_455_p4;
reg   [29:0] ap_phi_mux_i_12_phi_fu_467_p4;
wire    ap_block_pp3_stage0;
reg   [31:0] i_reg_474;
wire    ap_CS_fsm_state54;
reg   [13:0] phi_mul_reg_485;
reg    grp_processLayer_float_4u_2u_1_fu_518_ap_start_reg;
wire    ap_CS_fsm_state36;
wire    ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_ready;
wire    ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_done;
reg    ap_block_state36_on_subcall_done;
reg    ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_ready;
reg    ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_done;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
reg    ap_block_state41_on_subcall_done;
reg    grp_processLayer_float_4u_2u_s_fu_530_ap_start_reg;
reg    ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_ready;
reg    ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_done;
reg    grp_outputLayer_float_4u_2u_s_fu_543_ap_start_reg;
reg    ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready;
reg    ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_done;
reg    grp_copyArray_float_4u_1_fu_557_ap_start_reg;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state53;
reg    grp_copyArray_float_4u_s_fu_564_ap_start_reg;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state52;
wire   [63:0] loop_index23_cast_fu_652_p1;
wire   [63:0] loop_index17_cast_fu_702_p1;
wire   [63:0] loop_index11_cast_fu_746_p1;
wire    ap_block_pp3_stage1;
wire   [63:0] loop_index5_cast_fu_943_p1;
wire   [63:0] loop_index_cast_fu_987_p1;
wire  signed [63:0] p_cast1_cast_fu_631_p1;
wire  signed [63:0] p_cast2_cast_fu_681_p1;
wire  signed [63:0] p_cast_cast_fu_725_p1;
wire  signed [63:0] p_cast8_cast_fu_921_p1;
wire  signed [63:0] p_cast9_cast_fu_966_p1;
wire   [31:0] empty_160_fu_948_p1;
wire    ap_block_pp4_stage0_01001;
reg    ap_block_state80;
wire   [31:0] empty_164_fu_992_p1;
wire    ap_block_pp5_stage0_01001;
wire  signed [31:0] add_ln49_fu_590_p0;
wire  signed [31:0] mul_ln49_fu_596_p1;
wire   [31:0] add_ln50_1_fu_602_p2;
wire  signed [31:0] valuesToCopy_fu_611_p1;
wire   [61:0] p_cast1_fu_622_p4;
wire   [61:0] p_cast2_fu_672_p4;
wire   [61:0] p_cast_fu_716_p4;
wire   [6:0] empty_156_fu_781_p1;
wire   [8:0] or_ln143_fu_798_p2;
wire   [8:0] or_ln143_3_fu_809_p2;
wire   [8:0] or_ln143_4_fu_819_p2;
wire   [13:0] empty_157_fu_835_p1;
wire   [8:0] trunc_ln83_fu_860_p1;
wire  signed [8:0] mul_ln85_fu_880_p1;
wire   [61:0] p_cast8_fu_912_p4;
wire   [61:0] p_cast9_fu_957_p4;
wire  signed [13:0] grp_fu_996_p1;
wire    ap_CS_fsm_state56;
reg   [68:0] ap_NS_fsm;
reg    ap_block_state43_on_subcall_done;
reg    ap_block_state52_on_subcall_done;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;

// power-on initialization
initial begin
#0 ap_CS_fsm = 69'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 grp_processLayer_float_4u_2u_1_fu_518_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_ready = 1'b0;
#0 ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_done = 1'b0;
#0 grp_processLayer_float_4u_2u_s_fu_530_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_ready = 1'b0;
#0 ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_done = 1'b0;
#0 grp_outputLayer_float_4u_2u_s_fu_543_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready = 1'b0;
#0 ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_done = 1'b0;
#0 grp_copyArray_float_4u_1_fu_557_ap_start_reg = 1'b0;
#0 grp_copyArray_float_4u_s_fu_564_ap_start_reg = 1'b0;
end

MLP_bramWeight #(
    .DataWidth( 32 ),
    .AddressRange( 13312 ),
    .AddressWidth( 14 ))
bramWeight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_address0),
    .ce0(bramWeight_ce0),
    .we0(bramWeight_we0),
    .d0(bramWeight_d0),
    .q0(bramWeight_q0),
    .address1(bramWeight_address1),
    .ce1(bramWeight_ce1),
    .q1(bramWeight_q1)
);

MLP_bramBias #(
    .DataWidth( 32 ),
    .AddressRange( 264 ),
    .AddressWidth( 9 ))
bramBias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramBias_address0),
    .ce0(bramBias_ce0),
    .we0(bramBias_we0),
    .d0(bramBias_d0),
    .q0(bramBias_q0)
);

MLP_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_r(input_r),
    .output_r(output_r),
    .axiWeightInput(axiWeightInput),
    .axiBiasInput(axiBiasInput),
    .axiLayerOutput(axiLayerOutput),
    .numberInputs(numberInputs),
    .numberOutputs(numberOutputs),
    .numberLayers(numberLayers),
    .numberNeurons(numberNeurons),
    .loadParameters(loadParameters),
    .exportLayers(exportLayers),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

MLP_axi_read_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 128 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_READ_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_READ_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_READ_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_READ_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_READ_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_READ_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_READ_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_READ_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AXI_READ_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_READ_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_READ_CACHE_VALUE ))
axi_read_m_axi_U(
    .AWVALID(m_axi_axi_read_AWVALID),
    .AWREADY(m_axi_axi_read_AWREADY),
    .AWADDR(m_axi_axi_read_AWADDR),
    .AWID(m_axi_axi_read_AWID),
    .AWLEN(m_axi_axi_read_AWLEN),
    .AWSIZE(m_axi_axi_read_AWSIZE),
    .AWBURST(m_axi_axi_read_AWBURST),
    .AWLOCK(m_axi_axi_read_AWLOCK),
    .AWCACHE(m_axi_axi_read_AWCACHE),
    .AWPROT(m_axi_axi_read_AWPROT),
    .AWQOS(m_axi_axi_read_AWQOS),
    .AWREGION(m_axi_axi_read_AWREGION),
    .AWUSER(m_axi_axi_read_AWUSER),
    .WVALID(m_axi_axi_read_WVALID),
    .WREADY(m_axi_axi_read_WREADY),
    .WDATA(m_axi_axi_read_WDATA),
    .WSTRB(m_axi_axi_read_WSTRB),
    .WLAST(m_axi_axi_read_WLAST),
    .WID(m_axi_axi_read_WID),
    .WUSER(m_axi_axi_read_WUSER),
    .ARVALID(m_axi_axi_read_ARVALID),
    .ARREADY(m_axi_axi_read_ARREADY),
    .ARADDR(m_axi_axi_read_ARADDR),
    .ARID(m_axi_axi_read_ARID),
    .ARLEN(m_axi_axi_read_ARLEN),
    .ARSIZE(m_axi_axi_read_ARSIZE),
    .ARBURST(m_axi_axi_read_ARBURST),
    .ARLOCK(m_axi_axi_read_ARLOCK),
    .ARCACHE(m_axi_axi_read_ARCACHE),
    .ARPROT(m_axi_axi_read_ARPROT),
    .ARQOS(m_axi_axi_read_ARQOS),
    .ARREGION(m_axi_axi_read_ARREGION),
    .ARUSER(m_axi_axi_read_ARUSER),
    .RVALID(m_axi_axi_read_RVALID),
    .RREADY(m_axi_axi_read_RREADY),
    .RDATA(m_axi_axi_read_RDATA),
    .RLAST(m_axi_axi_read_RLAST),
    .RID(m_axi_axi_read_RID),
    .RUSER(m_axi_axi_read_RUSER),
    .RRESP(m_axi_axi_read_RRESP),
    .BVALID(m_axi_axi_read_BVALID),
    .BREADY(m_axi_axi_read_BREADY),
    .BRESP(m_axi_axi_read_BRESP),
    .BID(m_axi_axi_read_BID),
    .BUSER(m_axi_axi_read_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(axi_read_ARVALID),
    .I_ARREADY(axi_read_ARREADY),
    .I_ARADDR(axi_read_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(axi_read_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(axi_read_RVALID),
    .I_RREADY(axi_read_RREADY),
    .I_RDATA(axi_read_RDATA),
    .I_RID(axi_read_RID),
    .I_RUSER(axi_read_RUSER),
    .I_RRESP(axi_read_RRESP),
    .I_RLAST(axi_read_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(axi_read_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(axi_read_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(axi_read_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(axi_read_BRESP),
    .I_BID(axi_read_BID),
    .I_BUSER(axi_read_BUSER)
);

MLP_axi_write_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 128 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_WRITE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_WRITE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_WRITE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_WRITE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_WRITE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_WRITE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_WRITE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_WRITE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AXI_WRITE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_WRITE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_WRITE_CACHE_VALUE ))
axi_write_m_axi_U(
    .AWVALID(m_axi_axi_write_AWVALID),
    .AWREADY(m_axi_axi_write_AWREADY),
    .AWADDR(m_axi_axi_write_AWADDR),
    .AWID(m_axi_axi_write_AWID),
    .AWLEN(m_axi_axi_write_AWLEN),
    .AWSIZE(m_axi_axi_write_AWSIZE),
    .AWBURST(m_axi_axi_write_AWBURST),
    .AWLOCK(m_axi_axi_write_AWLOCK),
    .AWCACHE(m_axi_axi_write_AWCACHE),
    .AWPROT(m_axi_axi_write_AWPROT),
    .AWQOS(m_axi_axi_write_AWQOS),
    .AWREGION(m_axi_axi_write_AWREGION),
    .AWUSER(m_axi_axi_write_AWUSER),
    .WVALID(m_axi_axi_write_WVALID),
    .WREADY(m_axi_axi_write_WREADY),
    .WDATA(m_axi_axi_write_WDATA),
    .WSTRB(m_axi_axi_write_WSTRB),
    .WLAST(m_axi_axi_write_WLAST),
    .WID(m_axi_axi_write_WID),
    .WUSER(m_axi_axi_write_WUSER),
    .ARVALID(m_axi_axi_write_ARVALID),
    .ARREADY(m_axi_axi_write_ARREADY),
    .ARADDR(m_axi_axi_write_ARADDR),
    .ARID(m_axi_axi_write_ARID),
    .ARLEN(m_axi_axi_write_ARLEN),
    .ARSIZE(m_axi_axi_write_ARSIZE),
    .ARBURST(m_axi_axi_write_ARBURST),
    .ARLOCK(m_axi_axi_write_ARLOCK),
    .ARCACHE(m_axi_axi_write_ARCACHE),
    .ARPROT(m_axi_axi_write_ARPROT),
    .ARQOS(m_axi_axi_write_ARQOS),
    .ARREGION(m_axi_axi_write_ARREGION),
    .ARUSER(m_axi_axi_write_ARUSER),
    .RVALID(m_axi_axi_write_RVALID),
    .RREADY(m_axi_axi_write_RREADY),
    .RDATA(m_axi_axi_write_RDATA),
    .RLAST(m_axi_axi_write_RLAST),
    .RID(m_axi_axi_write_RID),
    .RUSER(m_axi_axi_write_RUSER),
    .RRESP(m_axi_axi_write_RRESP),
    .BVALID(m_axi_axi_write_BVALID),
    .BREADY(m_axi_axi_write_BREADY),
    .BRESP(m_axi_axi_write_BRESP),
    .BID(m_axi_axi_write_BID),
    .BUSER(m_axi_axi_write_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(axi_write_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(axi_write_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(axi_write_RDATA),
    .I_RID(axi_write_RID),
    .I_RUSER(axi_write_RUSER),
    .I_RRESP(axi_write_RRESP),
    .I_RLAST(axi_write_RLAST),
    .I_AWVALID(axi_write_AWVALID),
    .I_AWREADY(axi_write_AWREADY),
    .I_AWADDR(axi_write_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(axi_write_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(axi_write_WVALID),
    .I_WREADY(axi_write_WREADY),
    .I_WDATA(axi_write_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(axi_write_BVALID),
    .I_BREADY(axi_write_BREADY),
    .I_BRESP(axi_write_BRESP),
    .I_BID(axi_write_BID),
    .I_BUSER(axi_write_BUSER)
);

MLP_inputData #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
inputData_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inputData_address0),
    .ce0(inputData_ce0),
    .we0(inputData_we0),
    .d0(inputData_d0),
    .q0(inputData_q0),
    .address1(inputData_address1),
    .ce1(inputData_ce1),
    .q1(inputData_q1)
);

MLP_layerBuffer0 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
layerBuffer0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layerBuffer0_address0),
    .ce0(layerBuffer0_ce0),
    .we0(layerBuffer0_we0),
    .d0(layerBuffer0_d0),
    .q0(layerBuffer0_q0),
    .address1(layerBuffer0_address1),
    .ce1(layerBuffer0_ce1),
    .q1(layerBuffer0_q1)
);

MLP_layerBuffer1 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
layerBuffer1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layerBuffer1_address0),
    .ce0(layerBuffer1_ce0),
    .we0(layerBuffer1_we0),
    .d0(grp_copyArray_float_4u_1_fu_557_p_output_d0),
    .q0(layerBuffer1_q0),
    .address1(layerBuffer1_address1),
    .ce1(layerBuffer1_ce1),
    .we1(layerBuffer1_we1),
    .d1(grp_copyArray_float_4u_1_fu_557_p_output_d1),
    .q1(layerBuffer1_q1)
);

MLP_bramLayerResults #(
    .DataWidth( 32 ),
    .AddressRange( 272 ),
    .AddressWidth( 9 ))
bramLayerResults_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramLayerResults_address0),
    .ce0(bramLayerResults_ce0),
    .we0(bramLayerResults_we0),
    .d0(bramLayerResults_d0),
    .q0(bramLayerResults_q0),
    .address1(bramLayerResults_address1),
    .ce1(bramLayerResults_ce1),
    .we1(bramLayerResults_we1),
    .d1(bramLayerResults_d1)
);

MLP_processLayer_float_4u_2u_1 grp_processLayer_float_4u_2u_1_fu_518(
    .p_weights_address0(grp_processLayer_float_4u_2u_1_fu_518_p_weights_address0),
    .p_weights_ce0(grp_processLayer_float_4u_2u_1_fu_518_p_weights_ce0),
    .p_weights_d0(grp_processLayer_float_4u_2u_1_fu_518_p_weights_d0),
    .p_weights_q0(bramWeight_q0),
    .p_weights_we0(grp_processLayer_float_4u_2u_1_fu_518_p_weights_we0),
    .p_weights_address1(grp_processLayer_float_4u_2u_1_fu_518_p_weights_address1),
    .p_weights_ce1(grp_processLayer_float_4u_2u_1_fu_518_p_weights_ce1),
    .p_weights_d1(grp_processLayer_float_4u_2u_1_fu_518_p_weights_d1),
    .p_weights_q1(bramWeight_q1),
    .p_weights_we1(grp_processLayer_float_4u_2u_1_fu_518_p_weights_we1),
    .p_input_address0(grp_processLayer_float_4u_2u_1_fu_518_p_input_address0),
    .p_input_ce0(grp_processLayer_float_4u_2u_1_fu_518_p_input_ce0),
    .p_input_d0(grp_processLayer_float_4u_2u_1_fu_518_p_input_d0),
    .p_input_q0(inputData_q0),
    .p_input_we0(grp_processLayer_float_4u_2u_1_fu_518_p_input_we0),
    .p_input_address1(grp_processLayer_float_4u_2u_1_fu_518_p_input_address1),
    .p_input_ce1(grp_processLayer_float_4u_2u_1_fu_518_p_input_ce1),
    .p_input_d1(grp_processLayer_float_4u_2u_1_fu_518_p_input_d1),
    .p_input_q1(inputData_q1),
    .p_input_we1(grp_processLayer_float_4u_2u_1_fu_518_p_input_we1),
    .p_bias_address0(grp_processLayer_float_4u_2u_1_fu_518_p_bias_address0),
    .p_bias_ce0(grp_processLayer_float_4u_2u_1_fu_518_p_bias_ce0),
    .p_bias_d0(grp_processLayer_float_4u_2u_1_fu_518_p_bias_d0),
    .p_bias_q0(bramBias_q0),
    .p_bias_we0(grp_processLayer_float_4u_2u_1_fu_518_p_bias_we0),
    .p_bias_address1(grp_processLayer_float_4u_2u_1_fu_518_p_bias_address1),
    .p_bias_ce1(grp_processLayer_float_4u_2u_1_fu_518_p_bias_ce1),
    .p_bias_d1(grp_processLayer_float_4u_2u_1_fu_518_p_bias_d1),
    .p_bias_q1(32'd0),
    .p_bias_we1(grp_processLayer_float_4u_2u_1_fu_518_p_bias_we1),
    .p_output_address0(grp_processLayer_float_4u_2u_1_fu_518_p_output_address0),
    .p_output_ce0(grp_processLayer_float_4u_2u_1_fu_518_p_output_ce0),
    .p_output_d0(grp_processLayer_float_4u_2u_1_fu_518_p_output_d0),
    .p_output_q0(32'd0),
    .p_output_we0(grp_processLayer_float_4u_2u_1_fu_518_p_output_we0),
    .p_output_address1(grp_processLayer_float_4u_2u_1_fu_518_p_output_address1),
    .p_output_ce1(grp_processLayer_float_4u_2u_1_fu_518_p_output_ce1),
    .p_output_d1(grp_processLayer_float_4u_2u_1_fu_518_p_output_d1),
    .p_output_q1(32'd0),
    .p_output_we1(grp_processLayer_float_4u_2u_1_fu_518_p_output_we1),
    .p_n(numberNeurons_read_reg_1065),
    .p_k(numberInputs_read_reg_1042),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_n_ap_vld(1'b1),
    .p_k_ap_vld(1'b1),
    .ap_start(grp_processLayer_float_4u_2u_1_fu_518_ap_start),
    .ap_done(grp_processLayer_float_4u_2u_1_fu_518_ap_done),
    .ap_ready(grp_processLayer_float_4u_2u_1_fu_518_ap_ready),
    .ap_idle(grp_processLayer_float_4u_2u_1_fu_518_ap_idle),
    .ap_continue(grp_processLayer_float_4u_2u_1_fu_518_ap_continue)
);

MLP_processLayer_float_4u_2u_s grp_processLayer_float_4u_2u_s_fu_530(
    .p_weights_address0(grp_processLayer_float_4u_2u_s_fu_530_p_weights_address0),
    .p_weights_ce0(grp_processLayer_float_4u_2u_s_fu_530_p_weights_ce0),
    .p_weights_d0(grp_processLayer_float_4u_2u_s_fu_530_p_weights_d0),
    .p_weights_q0(bramWeight_q0),
    .p_weights_we0(grp_processLayer_float_4u_2u_s_fu_530_p_weights_we0),
    .p_weights_address1(grp_processLayer_float_4u_2u_s_fu_530_p_weights_address1),
    .p_weights_ce1(grp_processLayer_float_4u_2u_s_fu_530_p_weights_ce1),
    .p_weights_d1(grp_processLayer_float_4u_2u_s_fu_530_p_weights_d1),
    .p_weights_q1(bramWeight_q1),
    .p_weights_we1(grp_processLayer_float_4u_2u_s_fu_530_p_weights_we1),
    .p_weights_offset(mul_ln83_reg_1297),
    .p_input_address0(grp_processLayer_float_4u_2u_s_fu_530_p_input_address0),
    .p_input_ce0(grp_processLayer_float_4u_2u_s_fu_530_p_input_ce0),
    .p_input_d0(grp_processLayer_float_4u_2u_s_fu_530_p_input_d0),
    .p_input_q0(layerBuffer1_q0),
    .p_input_we0(grp_processLayer_float_4u_2u_s_fu_530_p_input_we0),
    .p_input_address1(grp_processLayer_float_4u_2u_s_fu_530_p_input_address1),
    .p_input_ce1(grp_processLayer_float_4u_2u_s_fu_530_p_input_ce1),
    .p_input_d1(grp_processLayer_float_4u_2u_s_fu_530_p_input_d1),
    .p_input_q1(layerBuffer1_q1),
    .p_input_we1(grp_processLayer_float_4u_2u_s_fu_530_p_input_we1),
    .p_bias_address0(grp_processLayer_float_4u_2u_s_fu_530_p_bias_address0),
    .p_bias_ce0(grp_processLayer_float_4u_2u_s_fu_530_p_bias_ce0),
    .p_bias_d0(grp_processLayer_float_4u_2u_s_fu_530_p_bias_d0),
    .p_bias_q0(bramBias_q0),
    .p_bias_we0(grp_processLayer_float_4u_2u_s_fu_530_p_bias_we0),
    .p_bias_address1(grp_processLayer_float_4u_2u_s_fu_530_p_bias_address1),
    .p_bias_ce1(grp_processLayer_float_4u_2u_s_fu_530_p_bias_ce1),
    .p_bias_d1(grp_processLayer_float_4u_2u_s_fu_530_p_bias_d1),
    .p_bias_q1(32'd0),
    .p_bias_we1(grp_processLayer_float_4u_2u_s_fu_530_p_bias_we1),
    .p_bias_offset(mul_ln85_reg_1291),
    .p_output_address0(grp_processLayer_float_4u_2u_s_fu_530_p_output_address0),
    .p_output_ce0(grp_processLayer_float_4u_2u_s_fu_530_p_output_ce0),
    .p_output_d0(grp_processLayer_float_4u_2u_s_fu_530_p_output_d0),
    .p_output_q0(32'd0),
    .p_output_we0(grp_processLayer_float_4u_2u_s_fu_530_p_output_we0),
    .p_output_address1(grp_processLayer_float_4u_2u_s_fu_530_p_output_address1),
    .p_output_ce1(grp_processLayer_float_4u_2u_s_fu_530_p_output_ce1),
    .p_output_d1(grp_processLayer_float_4u_2u_s_fu_530_p_output_d1),
    .p_output_q1(32'd0),
    .p_output_we1(grp_processLayer_float_4u_2u_s_fu_530_p_output_we1),
    .p_n(numberNeurons_read_reg_1065),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_weights_offset_ap_vld(1'b1),
    .p_bias_offset_ap_vld(1'b1),
    .p_n_ap_vld(1'b1),
    .ap_start(grp_processLayer_float_4u_2u_s_fu_530_ap_start),
    .ap_done(grp_processLayer_float_4u_2u_s_fu_530_ap_done),
    .ap_ready(grp_processLayer_float_4u_2u_s_fu_530_ap_ready),
    .ap_idle(grp_processLayer_float_4u_2u_s_fu_530_ap_idle),
    .ap_continue(grp_processLayer_float_4u_2u_s_fu_530_ap_continue)
);

MLP_outputLayer_float_4u_2u_s grp_outputLayer_float_4u_2u_s_fu_543(
    .p_weights_address0(grp_outputLayer_float_4u_2u_s_fu_543_p_weights_address0),
    .p_weights_ce0(grp_outputLayer_float_4u_2u_s_fu_543_p_weights_ce0),
    .p_weights_d0(grp_outputLayer_float_4u_2u_s_fu_543_p_weights_d0),
    .p_weights_q0(bramWeight_q0),
    .p_weights_we0(grp_outputLayer_float_4u_2u_s_fu_543_p_weights_we0),
    .p_weights_address1(grp_outputLayer_float_4u_2u_s_fu_543_p_weights_address1),
    .p_weights_ce1(grp_outputLayer_float_4u_2u_s_fu_543_p_weights_ce1),
    .p_weights_d1(grp_outputLayer_float_4u_2u_s_fu_543_p_weights_d1),
    .p_weights_q1(bramWeight_q1),
    .p_weights_we1(grp_outputLayer_float_4u_2u_s_fu_543_p_weights_we1),
    .p_weights_offset(mul_ln96_1_reg_1312),
    .p_input_address0(grp_outputLayer_float_4u_2u_s_fu_543_p_input_address0),
    .p_input_ce0(grp_outputLayer_float_4u_2u_s_fu_543_p_input_ce0),
    .p_input_d0(grp_outputLayer_float_4u_2u_s_fu_543_p_input_d0),
    .p_input_q0(layerBuffer1_q0),
    .p_input_we0(grp_outputLayer_float_4u_2u_s_fu_543_p_input_we0),
    .p_input_address1(grp_outputLayer_float_4u_2u_s_fu_543_p_input_address1),
    .p_input_ce1(grp_outputLayer_float_4u_2u_s_fu_543_p_input_ce1),
    .p_input_d1(grp_outputLayer_float_4u_2u_s_fu_543_p_input_d1),
    .p_input_q1(layerBuffer1_q1),
    .p_input_we1(grp_outputLayer_float_4u_2u_s_fu_543_p_input_we1),
    .p_bias_address0(grp_outputLayer_float_4u_2u_s_fu_543_p_bias_address0),
    .p_bias_ce0(grp_outputLayer_float_4u_2u_s_fu_543_p_bias_ce0),
    .p_bias_d0(grp_outputLayer_float_4u_2u_s_fu_543_p_bias_d0),
    .p_bias_q0(bramBias_q0),
    .p_bias_we0(grp_outputLayer_float_4u_2u_s_fu_543_p_bias_we0),
    .p_bias_address1(grp_outputLayer_float_4u_2u_s_fu_543_p_bias_address1),
    .p_bias_ce1(grp_outputLayer_float_4u_2u_s_fu_543_p_bias_ce1),
    .p_bias_d1(grp_outputLayer_float_4u_2u_s_fu_543_p_bias_d1),
    .p_bias_q1(32'd0),
    .p_bias_we1(grp_outputLayer_float_4u_2u_s_fu_543_p_bias_we1),
    .p_bias_offset(trunc_ln100_reg_1322),
    .p_output_address0(grp_outputLayer_float_4u_2u_s_fu_543_p_output_address0),
    .p_output_ce0(grp_outputLayer_float_4u_2u_s_fu_543_p_output_ce0),
    .p_output_d0(grp_outputLayer_float_4u_2u_s_fu_543_p_output_d0),
    .p_output_q0(32'd0),
    .p_output_we0(grp_outputLayer_float_4u_2u_s_fu_543_p_output_we0),
    .p_output_address1(grp_outputLayer_float_4u_2u_s_fu_543_p_output_address1),
    .p_output_ce1(grp_outputLayer_float_4u_2u_s_fu_543_p_output_ce1),
    .p_output_d1(grp_outputLayer_float_4u_2u_s_fu_543_p_output_d1),
    .p_output_q1(32'd0),
    .p_output_we1(grp_outputLayer_float_4u_2u_s_fu_543_p_output_we1),
    .p_n(numberOutputs_read_reg_1085),
    .p_k(numberNeurons_read_reg_1065),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_weights_offset_ap_vld(1'b1),
    .p_bias_offset_ap_vld(1'b1),
    .p_n_ap_vld(1'b1),
    .p_k_ap_vld(1'b1),
    .ap_start(grp_outputLayer_float_4u_2u_s_fu_543_ap_start),
    .ap_done(grp_outputLayer_float_4u_2u_s_fu_543_ap_done),
    .ap_ready(grp_outputLayer_float_4u_2u_s_fu_543_ap_ready),
    .ap_idle(grp_outputLayer_float_4u_2u_s_fu_543_ap_idle),
    .ap_continue(grp_outputLayer_float_4u_2u_s_fu_543_ap_continue)
);

MLP_copyArray_float_4u_1 grp_copyArray_float_4u_1_fu_557(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copyArray_float_4u_1_fu_557_ap_start),
    .ap_done(grp_copyArray_float_4u_1_fu_557_ap_done),
    .ap_idle(grp_copyArray_float_4u_1_fu_557_ap_idle),
    .ap_ready(grp_copyArray_float_4u_1_fu_557_ap_ready),
    .p_input_address0(grp_copyArray_float_4u_1_fu_557_p_input_address0),
    .p_input_ce0(grp_copyArray_float_4u_1_fu_557_p_input_ce0),
    .p_input_q0(layerBuffer0_q0),
    .p_input_address1(grp_copyArray_float_4u_1_fu_557_p_input_address1),
    .p_input_ce1(grp_copyArray_float_4u_1_fu_557_p_input_ce1),
    .p_input_q1(layerBuffer0_q1),
    .p_output_address0(grp_copyArray_float_4u_1_fu_557_p_output_address0),
    .p_output_ce0(grp_copyArray_float_4u_1_fu_557_p_output_ce0),
    .p_output_we0(grp_copyArray_float_4u_1_fu_557_p_output_we0),
    .p_output_d0(grp_copyArray_float_4u_1_fu_557_p_output_d0),
    .p_output_address1(grp_copyArray_float_4u_1_fu_557_p_output_address1),
    .p_output_ce1(grp_copyArray_float_4u_1_fu_557_p_output_ce1),
    .p_output_we1(grp_copyArray_float_4u_1_fu_557_p_output_we1),
    .p_output_d1(grp_copyArray_float_4u_1_fu_557_p_output_d1),
    .size(numberNeurons_read_reg_1065)
);

MLP_copyArray_float_4u_s grp_copyArray_float_4u_s_fu_564(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copyArray_float_4u_s_fu_564_ap_start),
    .ap_done(grp_copyArray_float_4u_s_fu_564_ap_done),
    .ap_idle(grp_copyArray_float_4u_s_fu_564_ap_idle),
    .ap_ready(grp_copyArray_float_4u_s_fu_564_ap_ready),
    .p_input_address0(grp_copyArray_float_4u_s_fu_564_p_input_address0),
    .p_input_ce0(grp_copyArray_float_4u_s_fu_564_p_input_ce0),
    .p_input_q0(layerBuffer0_q0),
    .p_input_address1(grp_copyArray_float_4u_s_fu_564_p_input_address1),
    .p_input_ce1(grp_copyArray_float_4u_s_fu_564_p_input_ce1),
    .p_input_q1(layerBuffer0_q1),
    .p_output_address0(grp_copyArray_float_4u_s_fu_564_p_output_address0),
    .p_output_ce0(grp_copyArray_float_4u_s_fu_564_p_output_ce0),
    .p_output_we0(grp_copyArray_float_4u_s_fu_564_p_output_we0),
    .p_output_d0(grp_copyArray_float_4u_s_fu_564_p_output_d0),
    .p_output_address1(grp_copyArray_float_4u_s_fu_564_p_output_address1),
    .p_output_ce1(grp_copyArray_float_4u_s_fu_564_p_output_ce1),
    .p_output_we1(grp_copyArray_float_4u_s_fu_564_p_output_we1),
    .p_output_d1(grp_copyArray_float_4u_s_fu_564_p_output_d1),
    .p_output_offset(grp_copyArray_float_4u_s_fu_564_p_output_offset),
    .size(grp_copyArray_float_4u_s_fu_564_size)
);

MLP_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U495(
    .din0(numberLayers_read_reg_1078),
    .din1(numberNeurons_read_reg_1065),
    .dout(grp_fu_572_p2)
);

MLP_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U496(
    .din0(numberNeurons),
    .din1(mul_ln49_fu_596_p1),
    .dout(mul_ln49_fu_596_p2)
);

MLP_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U497(
    .din0(numberNeurons_read_reg_1065),
    .din1(valuesToCopy_fu_611_p1),
    .dout(valuesToCopy_fu_611_p2)
);

MLP_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U498(
    .din0(trunc_ln77_reg_1250),
    .din1(mul_ln85_fu_880_p1),
    .dout(mul_ln85_fu_880_p2)
);

MLP_mul_mul_14s_14s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mul_mul_14s_14s_14_4_1_U499(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln77_1_reg_1255),
    .din1(grp_fu_996_p1),
    .ce(1'b1),
    .dout(grp_fu_996_p2)
);

MLP_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U500(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sub21_cast_reg_1268),
    .din1(trunc_ln77_1_reg_1255),
    .din2(trunc_ln44_1_reg_1059),
    .ce(1'b1),
    .dout(grp_fu_1002_p3)
);

MLP_mul_mul_14s_14s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mul_mul_14s_14s_14_4_1_U501(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1002_p3),
    .din1(trunc_ln77_1_reg_1255),
    .ce(1'b1),
    .dout(grp_fu_1007_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state32) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state32)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state37))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((icmp_ln62_fu_755_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((icmp_ln62_fu_755_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state64))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((~((1'b1 == ap_block_state63_io) | (grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0)) & (icmp_ln106_reg_1343 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state64)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state64);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((~((1'b1 == ap_block_state63_io) | (grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0)) & (icmp_ln106_reg_1343 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state73))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state73)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state73);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state61_on_subcall_done) & (1'b1 == ap_CS_fsm_state61))) begin
            ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_done <= 1'b0;
        end else if ((grp_outputLayer_float_4u_2u_s_fu_543_ap_done == 1'b1)) begin
            ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state61_on_subcall_done) & (1'b1 == ap_CS_fsm_state61))) begin
            ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready <= 1'b0;
        end else if ((grp_outputLayer_float_4u_2u_s_fu_543_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_done <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state41_on_subcall_done) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36)))) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_done <= 1'b0;
        end else if ((grp_processLayer_float_4u_2u_1_fu_518_ap_done == 1'b1)) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_ready <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state41_on_subcall_done) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36)))) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_ready <= 1'b0;
        end else if ((grp_processLayer_float_4u_2u_1_fu_518_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_done <= 1'b0;
        end else if ((grp_processLayer_float_4u_2u_s_fu_530_ap_done == 1'b1)) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_ready <= 1'b0;
        end else if ((grp_processLayer_float_4u_2u_s_fu_530_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copyArray_float_4u_1_fu_557_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state44))) begin
            grp_copyArray_float_4u_1_fu_557_ap_start_reg <= 1'b1;
        end else if ((grp_copyArray_float_4u_1_fu_557_ap_ready == 1'b1)) begin
            grp_copyArray_float_4u_1_fu_557_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copyArray_float_4u_s_fu_564_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state42))) begin
            grp_copyArray_float_4u_s_fu_564_ap_start_reg <= 1'b1;
        end else if ((grp_copyArray_float_4u_s_fu_564_ap_ready == 1'b1)) begin
            grp_copyArray_float_4u_s_fu_564_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_outputLayer_float_4u_2u_s_fu_543_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state60) | ((ap_sync_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state61)))) begin
            grp_outputLayer_float_4u_2u_s_fu_543_ap_start_reg <= 1'b1;
        end else if ((grp_outputLayer_float_4u_2u_s_fu_543_ap_ready == 1'b1)) begin
            grp_outputLayer_float_4u_2u_s_fu_543_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_processLayer_float_4u_2u_1_fu_518_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state41) & (ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_ready == 1'b0)) | ((1'b1 == ap_CS_fsm_state36) & (ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_ready == 1'b0)) | ((icmp_ln62_fu_755_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35)))) begin
            grp_processLayer_float_4u_2u_1_fu_518_ap_start_reg <= 1'b1;
        end else if ((grp_processLayer_float_4u_2u_1_fu_518_ap_ready == 1'b1)) begin
            grp_processLayer_float_4u_2u_1_fu_518_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_processLayer_float_4u_2u_s_fu_530_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state49) | ((ap_sync_grp_processLayer_float_4u_2u_s_fu_530_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state50)))) begin
            grp_processLayer_float_4u_2u_s_fu_530_ap_start_reg <= 1'b1;
        end else if ((grp_processLayer_float_4u_2u_s_fu_530_ap_ready == 1'b1)) begin
            grp_processLayer_float_4u_2u_s_fu_530_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_reg_1195 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        i_12_reg_463 <= add_ln137_reg_1199;
    end else if (((icmp_ln62_fu_755_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        i_12_reg_463 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_copyArray_float_4u_1_fu_557_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state54)) begin
            i_reg_474 <= add_ln85_reg_1276;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            i_reg_474 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        loop_index11_reg_451 <= 32'd0;
    end else if (((exitcond294_reg_1172 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        loop_index11_reg_451 <= empty_154_reg_1176;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        loop_index17_reg_439 <= 32'd0;
    end else if (((exitcond305_reg_1148 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_index17_reg_439 <= empty_151_reg_1152;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        loop_index23_reg_427 <= 32'd0;
    end else if (((exitcond316_reg_1118 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loop_index23_reg_427 <= empty_149_reg_1122;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state63_io) | (grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0)) & (icmp_ln106_reg_1343 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
        loop_index5_reg_496 <= 32'd0;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (exitcond272_fu_932_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        loop_index5_reg_496 <= empty_159_fu_937_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        loop_index_reg_507 <= 32'd0;
    end else if (((ap_enable_reg_pp5_iter0 == 1'b1) & (exitcond1_fu_976_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        loop_index_reg_507 <= empty_163_fu_981_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_copyArray_float_4u_1_fu_557_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state54)) begin
            phi_mul_reg_485 <= add_ln83_1_reg_1281;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            phi_mul_reg_485 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_reg_1186 == 1'd1) & (1'b0 == ap_block_state61_on_subcall_done) & (1'b1 == ap_CS_fsm_state61))) begin
        add_ln105_reg_1327 <= add_ln105_fu_894_p2;
        trunc_ln105_reg_1332 <= trunc_ln105_fu_898_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        add_ln106_reg_1337 <= add_ln106_fu_902_p2;
        icmp_ln106_reg_1343 <= icmp_ln106_fu_906_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln137_reg_1199 <= add_ln137_fu_775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_849_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        add_ln83_1_reg_1281 <= add_ln83_1_fu_864_p2;
        mul_ln85_reg_1291 <= mul_ln85_fu_880_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        add_ln85_reg_1276 <= add_ln85_fu_854_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_reg_1186 == 1'd1) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        add_ln91_reg_1302 <= add_ln91_fu_885_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        axiBiasInput_read_reg_1018 <= axiBiasInput;
        axiLayerOutput_read_reg_1013 <= axiLayerOutput;
        axiWeightInput_read_reg_1023 <= axiWeightInput;
        input_read_reg_1033 <= input_r;
        numberInputs_read_reg_1042 <= numberInputs;
        numberLayers_read_reg_1078 <= numberLayers;
        numberNeurons_read_reg_1065 <= numberNeurons;
        numberOutputs_read_reg_1085 <= numberOutputs;
        output_read_reg_1028 <= output_r;
        trunc_ln44_1_reg_1059 <= trunc_ln44_1_fu_586_p1;
        trunc_ln44_reg_1053 <= trunc_ln44_fu_582_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond305_reg_1148 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_read_addr_1_read_reg_1157 <= axi_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        axi_read_addr_1_reg_1142 <= p_cast2_cast_fu_681_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond294_reg_1172 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axi_read_addr_2_read_reg_1181 <= axi_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        axi_read_addr_2_reg_1166 <= p_cast_cast_fu_725_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond316_reg_1118 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_read_addr_read_reg_1127 <= axi_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        axi_read_addr_reg_1112 <= p_cast1_cast_fu_631_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op333_writeresp_state71 == 1'b1) & (axi_write_BVALID == 1'b0)) & (icmp_ln109_fu_952_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
        axi_write_addr_1_reg_1376 <= p_cast9_cast_fu_966_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (exitcond272_reg_1353 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        bramLayerResults_load_reg_1367 <= bramLayerResults_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_149_reg_1122 <= empty_149_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_151_reg_1152 <= empty_151_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        empty_154_reg_1176 <= empty_154_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        exitcond1_reg_1382 <= exitcond1_fu_976_p2;
        exitcond1_reg_1382_pp5_iter1_reg <= exitcond1_reg_1382;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        exitcond272_reg_1353 <= exitcond272_fu_932_p2;
        exitcond272_reg_1353_pp4_iter1_reg <= exitcond272_reg_1353;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond294_reg_1172 <= exitcond294_fu_735_p2;
        exitcond294_reg_1172_pp2_iter1_reg <= exitcond294_reg_1172;
        loop_index11_reg_451_pp2_iter1_reg <= loop_index11_reg_451;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond305_reg_1148 <= exitcond305_fu_691_p2;
        exitcond305_reg_1148_pp1_iter1_reg <= exitcond305_reg_1148;
        loop_index17_reg_439_pp1_iter1_reg <= loop_index17_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond316_reg_1118 <= exitcond316_fu_641_p2;
        exitcond316_reg_1118_pp0_iter1_reg <= exitcond316_reg_1118;
        loop_index23_reg_427_pp0_iter1_reg <= loop_index23_reg_427;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op333_writeresp_state71 == 1'b1) & (axi_write_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state71))) begin
        icmp_ln109_reg_1372 <= icmp_ln109_fu_952_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln137_reg_1195 <= icmp_ln137_fu_770_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        icmp_ln62_reg_1186 <= icmp_ln62_fu_755_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1382 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        layerBuffer0_load_reg_1396 <= layerBuffer0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln44_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln49_reg_1097 <= mul_ln49_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        mul_ln83_reg_1297 <= grp_fu_996_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        mul_ln96_1_reg_1312 <= grp_fu_1007_p2;
        mul_ln98_reg_1317 <= grp_fu_572_p2;
        trunc_ln100_reg_1322 <= trunc_ln100_fu_889_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_copyArray_float_4u_1_fu_557_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        sub21_cast_reg_1268 <= sub21_cast_fu_843_p2;
        sub21_reg_1263 <= sub21_fu_838_p2;
        trunc_ln77_1_reg_1255 <= trunc_ln77_1_fu_832_p1;
        trunc_ln77_reg_1250 <= trunc_ln77_fu_829_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_770_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_s_reg_1204[8 : 2] <= tmp_s_fu_785_p3[8 : 2];
        zext_ln143_11_reg_1220[8 : 2] <= zext_ln143_11_fu_804_p1[8 : 2];
        zext_ln143_reg_1210[8 : 2] <= zext_ln143_fu_793_p1[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_755_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        trunc_ln1_reg_1190 <= {{numberInputs_read_reg_1042[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        valuesToCopy_2_reg_1132 <= valuesToCopy_2_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valuesToCopy_reg_1102 <= valuesToCopy_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_reg_1195 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        zext_ln143_12_reg_1230[8 : 2] <= zext_ln143_12_fu_814_p1[8 : 2];
        zext_ln143_13_reg_1240[8 : 2] <= zext_ln143_13_fu_824_p1[8 : 2];
    end
end

always @ (*) begin
    if ((exitcond316_fu_641_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond305_fu_691_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond294_fu_735_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln137_fu_770_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state37 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state37 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond272_fu_932_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state64 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state64 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_976_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state73 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state73 = 1'b0;
    end
end

always @ (*) begin
    if ((~((axi_write_BVALID == 1'b0) & (icmp_ln109_reg_1372 == 1'd0)) & (1'b1 == ap_CS_fsm_state80))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln137_reg_1195 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_phi_mux_i_12_phi_fu_467_p4 = add_ln137_reg_1199;
    end else begin
        ap_phi_mux_i_12_phi_fu_467_p4 = i_12_reg_463;
    end
end

always @ (*) begin
    if (((exitcond294_reg_1172 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_loop_index11_phi_fu_455_p4 = empty_154_reg_1176;
    end else begin
        ap_phi_mux_loop_index11_phi_fu_455_p4 = loop_index11_reg_451;
    end
end

always @ (*) begin
    if (((exitcond305_reg_1148 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_loop_index17_phi_fu_443_p4 = empty_151_reg_1152;
    end else begin
        ap_phi_mux_loop_index17_phi_fu_443_p4 = loop_index17_reg_439;
    end
end

always @ (*) begin
    if (((exitcond316_reg_1118 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_loop_index23_phi_fu_431_p4 = empty_149_reg_1122;
    end else begin
        ap_phi_mux_loop_index23_phi_fu_431_p4 = loop_index23_reg_427;
    end
end

always @ (*) begin
    if ((~((axi_write_BVALID == 1'b0) & (icmp_ln109_reg_1372 == 1'd0)) & (1'b1 == ap_CS_fsm_state80))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((axi_read_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            axi_read_ARADDR = axi_read_addr_2_reg_1166;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            axi_read_ARADDR = axi_read_addr_1_reg_1142;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            axi_read_ARADDR = axi_read_addr_reg_1112;
        end else begin
            axi_read_ARADDR = 'bx;
        end
    end else begin
        axi_read_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((axi_read_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            axi_read_ARLEN = numberInputs_read_reg_1042;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            axi_read_ARLEN = valuesToCopy_2_reg_1132;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            axi_read_ARLEN = valuesToCopy_reg_1102;
        end else begin
            axi_read_ARLEN = 'bx;
        end
    end else begin
        axi_read_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        axi_read_ARVALID = 1'b1;
    end else begin
        axi_read_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond305_reg_1148 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond294_reg_1172 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond316_reg_1118 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        axi_read_RREADY = 1'b1;
    end else begin
        axi_read_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state3))) begin
        axi_read_blk_n_AR = m_axi_axi_read_ARREADY;
    end else begin
        axi_read_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond305_reg_1148 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond294_reg_1172 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond316_reg_1118 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        axi_read_blk_n_R = m_axi_axi_read_RVALID;
    end else begin
        axi_read_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        axi_write_AWADDR = axi_write_addr_1_reg_1376;
    end else if ((~((1'b1 == ap_block_state63_io) | (grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0)) & (icmp_ln106_reg_1343 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
        axi_write_AWADDR = p_cast8_cast_fu_921_p1;
    end else begin
        axi_write_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        axi_write_AWLEN = numberOutputs_read_reg_1085;
    end else if ((~((1'b1 == ap_block_state63_io) | (grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0)) & (icmp_ln106_reg_1343 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
        axi_write_AWLEN = add_ln106_reg_1337;
    end else begin
        axi_write_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state63_io) | (grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0)) & (icmp_ln106_reg_1343 == 1'd0) & (1'b1 == ap_CS_fsm_state63)) | ((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72)))) begin
        axi_write_AWVALID = 1'b1;
    end else begin
        axi_write_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op333_writeresp_state71 == 1'b1) & (axi_write_BVALID == 1'b0)) & (ap_predicate_op333_writeresp_state71 == 1'b1) & (1'b1 == ap_CS_fsm_state71)) | (~((axi_write_BVALID == 1'b0) & (icmp_ln109_reg_1372 == 1'd0)) & (icmp_ln109_reg_1372 == 1'd0) & (1'b1 == ap_CS_fsm_state80)))) begin
        axi_write_BREADY = 1'b1;
    end else begin
        axi_write_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_1382_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_01001))) begin
        axi_write_WDATA = empty_164_fu_992_p1;
    end else if (((exitcond272_reg_1353_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_01001))) begin
        axi_write_WDATA = empty_160_fu_948_p1;
    end else begin
        axi_write_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond1_reg_1382_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001)) | ((exitcond272_reg_1353_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        axi_write_WVALID = 1'b1;
    end else begin
        axi_write_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | ((icmp_ln106_reg_1343 == 1'd0) & (1'b1 == ap_CS_fsm_state63)))) begin
        axi_write_blk_n_AW = m_axi_axi_write_AWREADY;
    end else begin
        axi_write_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln109_reg_1372 == 1'd0) & (1'b1 == ap_CS_fsm_state80)) | ((icmp_ln62_reg_1186 == 1'd1) & (icmp_ln106_reg_1343 == 1'd0) & (1'b1 == ap_CS_fsm_state71)))) begin
        axi_write_blk_n_B = m_axi_axi_write_BVALID;
    end else begin
        axi_write_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond1_reg_1382_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0)) | ((exitcond272_reg_1353_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0)))) begin
        axi_write_blk_n_W = m_axi_axi_write_WREADY;
    end else begin
        axi_write_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        bramBias_address0 = loop_index17_cast_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        bramBias_address0 = grp_outputLayer_float_4u_2u_s_fu_543_p_bias_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramBias_address0 = grp_processLayer_float_4u_2u_s_fu_530_p_bias_address0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramBias_address0 = grp_processLayer_float_4u_2u_1_fu_518_p_bias_address0;
    end else begin
        bramBias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bramBias_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        bramBias_ce0 = grp_outputLayer_float_4u_2u_s_fu_543_p_bias_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramBias_ce0 = grp_processLayer_float_4u_2u_s_fu_530_p_bias_ce0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramBias_ce0 = grp_processLayer_float_4u_2u_1_fu_518_p_bias_ce0;
    end else begin
        bramBias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond305_reg_1148_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bramBias_we0 = 1'b1;
    end else begin
        bramBias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        bramLayerResults_address0 = loop_index5_cast_fu_943_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        bramLayerResults_address0 = zext_ln143_13_reg_1240;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        bramLayerResults_address0 = zext_ln143_11_reg_1220;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_address0 = grp_copyArray_float_4u_s_fu_564_p_output_address0;
    end else begin
        bramLayerResults_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        bramLayerResults_address1 = zext_ln143_12_reg_1230;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        bramLayerResults_address1 = zext_ln143_reg_1210;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_address1 = grp_copyArray_float_4u_s_fu_564_p_output_address1;
    end else begin
        bramLayerResults_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)))) begin
        bramLayerResults_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_ce0 = grp_copyArray_float_4u_s_fu_564_p_output_ce0;
    end else begin
        bramLayerResults_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)))) begin
        bramLayerResults_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_ce1 = grp_copyArray_float_4u_s_fu_564_p_output_ce1;
    end else begin
        bramLayerResults_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        bramLayerResults_d0 = inputData_q1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        bramLayerResults_d0 = inputData_q0;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_d0 = grp_copyArray_float_4u_s_fu_564_p_output_d0;
    end else begin
        bramLayerResults_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        bramLayerResults_d1 = inputData_q0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        bramLayerResults_d1 = inputData_q1;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_d1 = grp_copyArray_float_4u_s_fu_564_p_output_d1;
    end else begin
        bramLayerResults_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln137_reg_1195 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln137_reg_1195 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)))) begin
        bramLayerResults_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_we0 = grp_copyArray_float_4u_s_fu_564_p_output_we0;
    end else begin
        bramLayerResults_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln137_reg_1195 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln137_reg_1195 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)))) begin
        bramLayerResults_we1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        bramLayerResults_we1 = grp_copyArray_float_4u_s_fu_564_p_output_we1;
    end else begin
        bramLayerResults_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bramWeight_address0 = loop_index23_cast_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        bramWeight_address0 = grp_outputLayer_float_4u_2u_s_fu_543_p_weights_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramWeight_address0 = grp_processLayer_float_4u_2u_s_fu_530_p_weights_address0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramWeight_address0 = grp_processLayer_float_4u_2u_1_fu_518_p_weights_address0;
    end else begin
        bramWeight_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        bramWeight_address1 = grp_outputLayer_float_4u_2u_s_fu_543_p_weights_address1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramWeight_address1 = grp_processLayer_float_4u_2u_s_fu_530_p_weights_address1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramWeight_address1 = grp_processLayer_float_4u_2u_1_fu_518_p_weights_address1;
    end else begin
        bramWeight_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bramWeight_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        bramWeight_ce0 = grp_outputLayer_float_4u_2u_s_fu_543_p_weights_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramWeight_ce0 = grp_processLayer_float_4u_2u_s_fu_530_p_weights_ce0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramWeight_ce0 = grp_processLayer_float_4u_2u_1_fu_518_p_weights_ce0;
    end else begin
        bramWeight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        bramWeight_ce1 = grp_outputLayer_float_4u_2u_s_fu_543_p_weights_ce1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        bramWeight_ce1 = grp_processLayer_float_4u_2u_s_fu_530_p_weights_ce1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        bramWeight_ce1 = grp_processLayer_float_4u_2u_1_fu_518_p_weights_ce1;
    end else begin
        bramWeight_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond316_reg_1118_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bramWeight_we0 = 1'b1;
    end else begin
        bramWeight_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_copyArray_float_4u_s_fu_564_p_output_offset = trunc_ln105_reg_1332;
    end else if (((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        grp_copyArray_float_4u_s_fu_564_p_output_offset = add_ln91_reg_1302;
    end else if (((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        grp_copyArray_float_4u_s_fu_564_p_output_offset = trunc_ln44_reg_1053;
    end else begin
        grp_copyArray_float_4u_s_fu_564_p_output_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_copyArray_float_4u_s_fu_564_size = numberOutputs_read_reg_1085;
    end else if ((((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        grp_copyArray_float_4u_s_fu_564_size = numberNeurons_read_reg_1065;
    end else begin
        grp_copyArray_float_4u_s_fu_564_size = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state61_on_subcall_done) & (1'b1 == ap_CS_fsm_state61))) begin
        grp_outputLayer_float_4u_2u_s_fu_543_ap_continue = 1'b1;
    end else begin
        grp_outputLayer_float_4u_2u_s_fu_543_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state41_on_subcall_done) & (1'b1 == ap_CS_fsm_state41)) | ((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36)))) begin
        grp_processLayer_float_4u_2u_1_fu_518_ap_continue = 1'b1;
    end else begin
        grp_processLayer_float_4u_2u_1_fu_518_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        grp_processLayer_float_4u_2u_s_fu_530_ap_continue = 1'b1;
    end else begin
        grp_processLayer_float_4u_2u_s_fu_530_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        inputData_address0 = zext_ln143_12_fu_814_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        inputData_address0 = zext_ln143_11_fu_804_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        inputData_address0 = loop_index11_cast_fu_746_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        inputData_address0 = grp_processLayer_float_4u_2u_1_fu_518_p_input_address0;
    end else begin
        inputData_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        inputData_address1 = zext_ln143_13_fu_824_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        inputData_address1 = zext_ln143_fu_793_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        inputData_address1 = grp_processLayer_float_4u_2u_1_fu_518_p_input_address1;
    end else begin
        inputData_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        inputData_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        inputData_ce0 = grp_processLayer_float_4u_2u_1_fu_518_p_input_ce0;
    end else begin
        inputData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        inputData_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        inputData_ce1 = grp_processLayer_float_4u_2u_1_fu_518_p_input_ce1;
    end else begin
        inputData_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond294_reg_1172_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        inputData_we0 = 1'b1;
    end else begin
        inputData_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        layerBuffer0_address0 = loop_index_cast_fu_987_p1;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        layerBuffer0_address0 = grp_copyArray_float_4u_s_fu_564_p_input_address0;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer0_address0 = grp_copyArray_float_4u_1_fu_557_p_input_address0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        layerBuffer0_address0 = grp_outputLayer_float_4u_2u_s_fu_543_p_output_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer0_address0 = grp_processLayer_float_4u_2u_s_fu_530_p_output_address0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        layerBuffer0_address0 = grp_processLayer_float_4u_2u_1_fu_518_p_output_address0;
    end else begin
        layerBuffer0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        layerBuffer0_address1 = grp_copyArray_float_4u_s_fu_564_p_input_address1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer0_address1 = grp_copyArray_float_4u_1_fu_557_p_input_address1;
    end else begin
        layerBuffer0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        layerBuffer0_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        layerBuffer0_ce0 = grp_copyArray_float_4u_s_fu_564_p_input_ce0;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer0_ce0 = grp_copyArray_float_4u_1_fu_557_p_input_ce0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        layerBuffer0_ce0 = grp_outputLayer_float_4u_2u_s_fu_543_p_output_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer0_ce0 = grp_processLayer_float_4u_2u_s_fu_530_p_output_ce0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        layerBuffer0_ce0 = grp_processLayer_float_4u_2u_1_fu_518_p_output_ce0;
    end else begin
        layerBuffer0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln62_reg_1186 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        layerBuffer0_ce1 = grp_copyArray_float_4u_s_fu_564_p_input_ce1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer0_ce1 = grp_copyArray_float_4u_1_fu_557_p_input_ce1;
    end else begin
        layerBuffer0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        layerBuffer0_d0 = grp_outputLayer_float_4u_2u_s_fu_543_p_output_d0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer0_d0 = grp_processLayer_float_4u_2u_s_fu_530_p_output_d0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        layerBuffer0_d0 = grp_processLayer_float_4u_2u_1_fu_518_p_output_d0;
    end else begin
        layerBuffer0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        layerBuffer0_we0 = grp_outputLayer_float_4u_2u_s_fu_543_p_output_we0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer0_we0 = grp_processLayer_float_4u_2u_s_fu_530_p_output_we0;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        layerBuffer0_we0 = grp_processLayer_float_4u_2u_1_fu_518_p_output_we0;
    end else begin
        layerBuffer0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_address0 = grp_copyArray_float_4u_1_fu_557_p_output_address0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        layerBuffer1_address0 = grp_outputLayer_float_4u_2u_s_fu_543_p_input_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer1_address0 = grp_processLayer_float_4u_2u_s_fu_530_p_input_address0;
    end else begin
        layerBuffer1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_address1 = grp_copyArray_float_4u_1_fu_557_p_output_address1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        layerBuffer1_address1 = grp_outputLayer_float_4u_2u_s_fu_543_p_input_address1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer1_address1 = grp_processLayer_float_4u_2u_s_fu_530_p_input_address1;
    end else begin
        layerBuffer1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_ce0 = grp_copyArray_float_4u_1_fu_557_p_output_ce0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        layerBuffer1_ce0 = grp_outputLayer_float_4u_2u_s_fu_543_p_input_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer1_ce0 = grp_processLayer_float_4u_2u_s_fu_530_p_input_ce0;
    end else begin
        layerBuffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_ce1 = grp_copyArray_float_4u_1_fu_557_p_output_ce1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        layerBuffer1_ce1 = grp_outputLayer_float_4u_2u_s_fu_543_p_input_ce1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layerBuffer1_ce1 = grp_processLayer_float_4u_2u_s_fu_530_p_input_ce1;
    end else begin
        layerBuffer1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_we0 = grp_copyArray_float_4u_1_fu_557_p_output_we0;
    end else begin
        layerBuffer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state54))) begin
        layerBuffer1_we1 = grp_copyArray_float_4u_1_fu_557_p_output_we1;
    end else begin
        layerBuffer1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln44_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((ap_start == 1'b1) & (icmp_ln44_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln52_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond316_fu_641_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond316_fu_641_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln57_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond305_fu_691_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond305_fu_691_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln60_fu_711_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond294_fu_735_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond294_fu_735_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((icmp_ln62_fu_755_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b0 == ap_block_state36_on_subcall_done) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln137_fu_770_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln137_fu_770_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b0 == ap_block_state41_on_subcall_done) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b0 == ap_block_state43_on_subcall_done) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((grp_copyArray_float_4u_1_fu_557_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln80_fu_849_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((icmp_ln62_reg_1186 == 1'd0) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else if (((icmp_ln62_reg_1186 == 1'd1) & (1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((1'b0 == ap_block_state52_on_subcall_done) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if (((grp_copyArray_float_4u_1_fu_557_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((icmp_ln62_reg_1186 == 1'd0) & (1'b0 == ap_block_state61_on_subcall_done) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else if (((icmp_ln62_reg_1186 == 1'd1) & (1'b0 == ap_block_state61_on_subcall_done) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if ((~((1'b1 == ap_block_state63_io) | (grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0)) & (icmp_ln106_reg_1343 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((~((1'b1 == ap_block_state63_io) | (grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0)) & (icmp_ln106_reg_1343 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (exitcond272_fu_932_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (exitcond272_fu_932_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if ((~((ap_predicate_op333_writeresp_state71 == 1'b1) & (axi_write_BVALID == 1'b0)) & (icmp_ln109_fu_952_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else if ((~((ap_predicate_op333_writeresp_state71 == 1'b1) & (axi_write_BVALID == 1'b0)) & (icmp_ln109_fu_952_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter0 == 1'b1) & (exitcond1_fu_976_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)) & ~((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter0 == 1'b1) & (exitcond1_fu_976_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)) | ((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if ((~((axi_write_BVALID == 1'b0) & (icmp_ln109_reg_1372 == 1'd0)) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln105_fu_894_p2 = (numberInputs_read_reg_1042 + mul_ln98_reg_1317);

assign add_ln106_fu_902_p2 = (numberOutputs_read_reg_1085 + add_ln105_reg_1327);

assign add_ln137_fu_775_p2 = (ap_phi_mux_i_12_phi_fu_467_p4 + 30'd1);

assign add_ln49_fu_590_p0 = numberLayers;

assign add_ln50_1_fu_602_p2 = (numberInputs_read_reg_1042 + mul_ln49_reg_1097);

assign add_ln83_1_fu_864_p2 = ($signed(trunc_ln77_1_reg_1255) + $signed(phi_mul_reg_485));

assign add_ln85_fu_854_p2 = (i_reg_474 + 32'd1);

assign add_ln91_fu_885_p2 = (mul_ln85_reg_1291 + trunc_ln44_reg_1053);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((axi_read_RVALID == 1'b0) & (exitcond316_reg_1118 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((axi_read_RVALID == 1'b0) & (exitcond316_reg_1118 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((axi_read_RVALID == 1'b0) & (exitcond305_reg_1148 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((axi_read_RVALID == 1'b0) & (exitcond305_reg_1148 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((axi_read_RVALID == 1'b0) & (exitcond294_reg_1172 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((axi_read_RVALID == 1'b0) & (exitcond294_reg_1172 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state66_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state66_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((1'b1 == ap_block_state75_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((1'b1 == ap_block_state75_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((axi_read_RVALID == 1'b0) & (exitcond316_reg_1118 == 1'd0));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter1 = ((axi_read_RVALID == 1'b0) & (exitcond305_reg_1148 == 1'd0));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_pp2_stage0_iter1 = ((axi_read_RVALID == 1'b0) & (exitcond294_reg_1172 == 1'd0));
end

assign ap_block_state34_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_on_subcall_done = ((ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_ready & ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_done) == 1'b0);
end

assign ap_block_state37_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_on_subcall_done = ((ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_ready & ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state43_on_subcall_done = ((grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0) & (icmp_ln62_reg_1186 == 1'd1));
end

always @ (*) begin
    ap_block_state50_on_subcall_done = ((ap_sync_grp_processLayer_float_4u_2u_s_fu_530_ap_ready & ap_sync_grp_processLayer_float_4u_2u_s_fu_530_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state52_on_subcall_done = ((grp_copyArray_float_4u_s_fu_564_ap_done == 1'b0) & (icmp_ln62_reg_1186 == 1'd1));
end

always @ (*) begin
    ap_block_state61_on_subcall_done = ((ap_sync_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready & ap_sync_grp_outputLayer_float_4u_2u_s_fu_543_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state63_io = ((axi_write_AWREADY == 1'b0) & (icmp_ln106_reg_1343 == 1'd0));
end

assign ap_block_state64_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state66_io = ((axi_write_WREADY == 1'b0) & (exitcond272_reg_1353_pp4_iter1_reg == 1'd0));
end

assign ap_block_state66_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state71 = ((ap_predicate_op333_writeresp_state71 == 1'b1) & (axi_write_BVALID == 1'b0));
end

assign ap_block_state73_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75_io = ((axi_write_WREADY == 1'b0) & (exitcond1_reg_1382_pp5_iter1_reg == 1'd0));
end

assign ap_block_state75_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80 = ((axi_write_BVALID == 1'b0) & (icmp_ln109_reg_1372 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

always @ (*) begin
    ap_predicate_op333_writeresp_state71 = ((icmp_ln62_reg_1186 == 1'd1) & (icmp_ln106_reg_1343 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_outputLayer_float_4u_2u_s_fu_543_ap_done = (grp_outputLayer_float_4u_2u_s_fu_543_ap_done | ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_done);

assign ap_sync_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready = (grp_outputLayer_float_4u_2u_s_fu_543_ap_ready | ap_sync_reg_grp_outputLayer_float_4u_2u_s_fu_543_ap_ready);

assign ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_done = (grp_processLayer_float_4u_2u_1_fu_518_ap_done | ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_done);

assign ap_sync_grp_processLayer_float_4u_2u_1_fu_518_ap_ready = (grp_processLayer_float_4u_2u_1_fu_518_ap_ready | ap_sync_reg_grp_processLayer_float_4u_2u_1_fu_518_ap_ready);

assign ap_sync_grp_processLayer_float_4u_2u_s_fu_530_ap_done = (grp_processLayer_float_4u_2u_s_fu_530_ap_done | ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_done);

assign ap_sync_grp_processLayer_float_4u_2u_s_fu_530_ap_ready = (grp_processLayer_float_4u_2u_s_fu_530_ap_ready | ap_sync_reg_grp_processLayer_float_4u_2u_s_fu_530_ap_ready);

assign bramBias_d0 = axi_read_addr_1_read_reg_1157;

assign bramWeight_d0 = axi_read_addr_read_reg_1127;

assign empty_149_fu_646_p2 = (ap_phi_mux_loop_index23_phi_fu_431_p4 + 32'd1);

assign empty_151_fu_696_p2 = (ap_phi_mux_loop_index17_phi_fu_443_p4 + 32'd1);

assign empty_154_fu_740_p2 = (ap_phi_mux_loop_index11_phi_fu_455_p4 + 32'd1);

assign empty_156_fu_781_p1 = ap_phi_mux_i_12_phi_fu_467_p4[6:0];

assign empty_157_fu_835_p1 = numberLayers_read_reg_1078[13:0];

assign empty_159_fu_937_p2 = (loop_index5_reg_496 + 32'd1);

assign empty_160_fu_948_p1 = bramLayerResults_load_reg_1367;

assign empty_163_fu_981_p2 = (loop_index_reg_507 + 32'd1);

assign empty_164_fu_992_p1 = layerBuffer0_load_reg_1396;

assign exitcond1_fu_976_p2 = ((loop_index_reg_507 == numberOutputs_read_reg_1085) ? 1'b1 : 1'b0);

assign exitcond272_fu_932_p2 = ((loop_index5_reg_496 == add_ln106_reg_1337) ? 1'b1 : 1'b0);

assign exitcond294_fu_735_p2 = ((ap_phi_mux_loop_index11_phi_fu_455_p4 == numberInputs_read_reg_1042) ? 1'b1 : 1'b0);

assign exitcond305_fu_691_p2 = ((ap_phi_mux_loop_index17_phi_fu_443_p4 == valuesToCopy_2_reg_1132) ? 1'b1 : 1'b0);

assign exitcond316_fu_641_p2 = ((ap_phi_mux_loop_index23_phi_fu_431_p4 == valuesToCopy_reg_1102) ? 1'b1 : 1'b0);

assign grp_copyArray_float_4u_1_fu_557_ap_start = grp_copyArray_float_4u_1_fu_557_ap_start_reg;

assign grp_copyArray_float_4u_s_fu_564_ap_start = grp_copyArray_float_4u_s_fu_564_ap_start_reg;

assign grp_fu_996_p1 = (trunc_ln44_1_reg_1059 + phi_mul_reg_485);

assign grp_outputLayer_float_4u_2u_s_fu_543_ap_start = grp_outputLayer_float_4u_2u_s_fu_543_ap_start_reg;

assign grp_processLayer_float_4u_2u_1_fu_518_ap_start = grp_processLayer_float_4u_2u_1_fu_518_ap_start_reg;

assign grp_processLayer_float_4u_2u_s_fu_530_ap_start = grp_processLayer_float_4u_2u_s_fu_530_ap_start_reg;

assign icmp_ln106_fu_906_p2 = ((add_ln106_fu_902_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_952_p2 = ((numberOutputs_read_reg_1085 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_770_p2 = ((ap_phi_mux_i_12_phi_fu_467_p4 == trunc_ln1_reg_1190) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_576_p2 = ((loadParameters == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_616_p2 = ((valuesToCopy_fu_611_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_666_p2 = ((valuesToCopy_2_fu_661_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_711_p2 = ((numberInputs_read_reg_1042 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_755_p2 = ((exportLayers != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_849_p2 = ((i_reg_474 == sub21_reg_1263) ? 1'b1 : 1'b0);

assign inputData_d0 = axi_read_addr_2_read_reg_1181;

assign loop_index11_cast_fu_746_p1 = loop_index11_reg_451_pp2_iter1_reg;

assign loop_index17_cast_fu_702_p1 = loop_index17_reg_439_pp1_iter1_reg;

assign loop_index23_cast_fu_652_p1 = loop_index23_reg_427_pp0_iter1_reg;

assign loop_index5_cast_fu_943_p1 = loop_index5_reg_496;

assign loop_index_cast_fu_987_p1 = loop_index_reg_507;

assign mul_ln49_fu_596_p1 = ($signed(add_ln49_fu_590_p0) + $signed(32'd4294967295));

assign mul_ln85_fu_880_p1 = (9'd1 + trunc_ln83_fu_860_p1);

assign or_ln143_3_fu_809_p2 = (tmp_s_reg_1204 | 9'd2);

assign or_ln143_4_fu_819_p2 = (tmp_s_reg_1204 | 9'd3);

assign or_ln143_fu_798_p2 = (tmp_s_fu_785_p3 | 9'd1);

assign p_cast1_cast_fu_631_p1 = $signed(p_cast1_fu_622_p4);

assign p_cast1_fu_622_p4 = {{axiWeightInput_read_reg_1023[63:2]}};

assign p_cast2_cast_fu_681_p1 = $signed(p_cast2_fu_672_p4);

assign p_cast2_fu_672_p4 = {{axiBiasInput_read_reg_1018[63:2]}};

assign p_cast8_cast_fu_921_p1 = $signed(p_cast8_fu_912_p4);

assign p_cast8_fu_912_p4 = {{axiLayerOutput_read_reg_1013[63:2]}};

assign p_cast9_cast_fu_966_p1 = $signed(p_cast9_fu_957_p4);

assign p_cast9_fu_957_p4 = {{output_read_reg_1028[63:2]}};

assign p_cast_cast_fu_725_p1 = $signed(p_cast_fu_716_p4);

assign p_cast_fu_716_p4 = {{input_read_reg_1033[63:2]}};

assign sub21_cast_fu_843_p2 = ($signed(14'd16383) + $signed(empty_157_fu_835_p1));

assign sub21_fu_838_p2 = ($signed(32'd4294967295) + $signed(numberLayers_read_reg_1078));

assign tmp_s_fu_785_p3 = {{empty_156_fu_781_p1}, {2'd0}};

assign trunc_ln100_fu_889_p1 = grp_fu_572_p2[8:0];

assign trunc_ln105_fu_898_p1 = add_ln105_fu_894_p2[8:0];

assign trunc_ln44_1_fu_586_p1 = numberInputs[13:0];

assign trunc_ln44_fu_582_p1 = numberInputs[8:0];

assign trunc_ln77_1_fu_832_p1 = numberNeurons_read_reg_1065[13:0];

assign trunc_ln77_fu_829_p1 = numberNeurons_read_reg_1065[8:0];

assign trunc_ln83_fu_860_p1 = i_reg_474[8:0];

assign valuesToCopy_2_fu_661_p2 = (numberOutputs_read_reg_1085 + grp_fu_572_p2);

assign valuesToCopy_fu_611_p1 = (add_ln50_1_fu_602_p2 + numberOutputs_read_reg_1085);

assign zext_ln143_11_fu_804_p1 = or_ln143_fu_798_p2;

assign zext_ln143_12_fu_814_p1 = or_ln143_3_fu_809_p2;

assign zext_ln143_13_fu_824_p1 = or_ln143_4_fu_819_p2;

assign zext_ln143_fu_793_p1 = tmp_s_fu_785_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_1204[1:0] <= 2'b00;
    zext_ln143_reg_1210[1:0] <= 2'b00;
    zext_ln143_reg_1210[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln143_11_reg_1220[1:0] <= 2'b01;
    zext_ln143_11_reg_1220[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln143_12_reg_1230[1:0] <= 2'b10;
    zext_ln143_12_reg_1230[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln143_13_reg_1240[1:0] <= 2'b11;
    zext_ln143_13_reg_1240[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //MLP
