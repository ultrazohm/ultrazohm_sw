-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_switching_states\hdlsrc\parallel_8_switching_states\parallel_8_switching_states_src_HDL_DUT.vhd
-- Created: 2022-10-18 13:26:40
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- HB1T                          ce_out        1e-08
-- HB1B                          ce_out        1e-08
-- HB2T                          ce_out        1e-08
-- HB2B                          ce_out        1e-08
-- HB3T                          ce_out        1e-08
-- HB3B                          ce_out        1e-08
-- HB4T                          ce_out        1e-08
-- HB4B                          ce_out        1e-08
-- HB5T                          ce_out        1e-08
-- HB5B                          ce_out        1e-08
-- HB6T                          ce_out        1e-08
-- HB6B                          ce_out        1e-08
-- done                          ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_switching_states_src_HDL_DUT
-- Source Path: parallel_8_switching_states/HDL_DUT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY parallel_8_switching_states_src_HDL_DUT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        I                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        valid_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        HB1T                              :   OUT   std_logic;
        HB1B                              :   OUT   std_logic;
        HB2T                              :   OUT   std_logic;
        HB2B                              :   OUT   std_logic;
        HB3T                              :   OUT   std_logic;
        HB3B                              :   OUT   std_logic;
        HB4T                              :   OUT   std_logic;
        HB4B                              :   OUT   std_logic;
        HB5T                              :   OUT   std_logic;
        HB5B                              :   OUT   std_logic;
        HB6T                              :   OUT   std_logic;
        HB6B                              :   OUT   std_logic;
        done                              :   OUT   std_logic
        );
END parallel_8_switching_states_src_HDL_DUT;


ARCHITECTURE rtl OF parallel_8_switching_states_src_HDL_DUT IS

  -- Component Declarations
  COMPONENT parallel_8_switching_states_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_switching_states_src_MATLAB_Function1
    PORT( I                               :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          next_switching_state            :   OUT   std_logic_vector(0 TO 11)  -- boolean [12]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_switching_states_src_Detect_Rise_Positive
    USE ENTITY work.parallel_8_switching_states_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_8_switching_states_src_MATLAB_Function1
    USE ENTITY work.parallel_8_switching_states_src_MATLAB_Function1(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL I_signed                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Switch_on2_out1                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay2_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL next_switching_state             : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL next_switching_state_0           : std_logic;
  SIGNAL Delay15_out1                     : std_logic;
  SIGNAL next_switching_state_1           : std_logic;
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL next_switching_state_2           : std_logic;
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL next_switching_state_3           : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL next_switching_state_4           : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL next_switching_state_5           : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL next_switching_state_6           : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL next_switching_state_7           : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL next_switching_state_8           : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL next_switching_state_9           : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL next_switching_state_10          : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL next_switching_state_11          : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_Detect_Rise_Positive : parallel_8_switching_states_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay_out1,
              Y => End_Cycle
              );

  u_MATLAB_Function1 : parallel_8_switching_states_src_MATLAB_Function1
    PORT MAP( I => std_logic_vector(Switch_on2_out1),  -- int32
              next_switching_state => next_switching_state  -- boolean [12]
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  I_signed <= signed(I);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay1_out1 <= I_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_on2_out1 <= Delay2_out1 WHEN switch_compare_1 = '0' ELSE
      Delay1_out1;

  next_switching_state_0 <= next_switching_state(0);

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay15_out1 <= next_switching_state_0;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  next_switching_state_1 <= next_switching_state(1);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay14_out1 <= next_switching_state_1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  next_switching_state_2 <= next_switching_state(2);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay13_out1 <= next_switching_state_2;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  next_switching_state_3 <= next_switching_state(3);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1 <= next_switching_state_3;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  next_switching_state_4 <= next_switching_state(4);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_out1 <= next_switching_state_4;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  next_switching_state_5 <= next_switching_state(5);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_out1 <= next_switching_state_5;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  next_switching_state_6 <= next_switching_state(6);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1 <= next_switching_state_6;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  next_switching_state_7 <= next_switching_state(7);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_out1 <= next_switching_state_7;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  next_switching_state_8 <= next_switching_state(8);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= next_switching_state_8;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  next_switching_state_9 <= next_switching_state(9);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= next_switching_state_9;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  next_switching_state_10 <= next_switching_state(10);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= next_switching_state_10;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  next_switching_state_11 <= next_switching_state(11);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= next_switching_state_11;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  ce_out <= clk_enable;

  HB1T <= Delay15_out1;

  HB1B <= Delay14_out1;

  HB2T <= Delay13_out1;

  HB2B <= Delay12_out1;

  HB3T <= Delay11_out1;

  HB3B <= Delay10_out1;

  HB4T <= Delay9_out1;

  HB4B <= Delay8_out1;

  HB5T <= Delay7_out1;

  HB5B <= Delay6_out1;

  HB6T <= Delay5_out1;

  HB6B <= Delay4_out1;

  done <= Delay3_out1;

END rtl;

