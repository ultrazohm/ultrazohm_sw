-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_accumulate_float_1u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_values_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_values_empty_n : IN STD_LOGIC;
    p_values_read : OUT STD_LOGIC;
    p_accumulator_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_accumulator_ce0 : OUT STD_LOGIC;
    p_accumulator_we0 : OUT STD_LOGIC;
    p_accumulator_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_offset_dout : IN STD_LOGIC_VECTOR (6 downto 0);
    p_accumulator_offset_empty_n : IN STD_LOGIC;
    p_accumulator_offset_read : OUT STD_LOGIC;
    p_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_size_empty_n : IN STD_LOGIC;
    p_size_read : OUT STD_LOGIC;
    p_initZero_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    p_initZero_empty_n : IN STD_LOGIC;
    p_initZero_read : OUT STD_LOGIC );
end;


architecture behav of BGD_accumulate_float_1u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_values_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_accumulator_offset_blk_n : STD_LOGIC;
    signal p_size_blk_n : STD_LOGIC;
    signal p_initZero_blk_n : STD_LOGIC;
    signal p_accumulator_offset_read_reg_138 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal l_parBlocks_reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_initZero_read_reg_148 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln397_fu_107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln397_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_accumulator_addr_reg_161 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln397_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_values_read_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_accumulator_fu_127_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_accumulator_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add4_i_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_reg_87 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sum_cast_i_fu_122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_98_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln397_fu_113_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_i_fu_117_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component BGD_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U412 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_accumulator_reg_171,
        din1 => grp_fu_98_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_98_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_initZero_empty_n = ap_const_logic_0) or (p_size_empty_n = ap_const_logic_0) or (p_accumulator_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_87 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_87 <= add_ln397_reg_156;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add4_i_reg_181 <= grp_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln397_reg_156 <= add_ln397_fu_107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                l_accumulator_reg_171 <= l_accumulator_fu_127_p3;
                p_values_read_reg_166 <= p_values_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_initZero_empty_n = ap_const_logic_0) or (p_size_empty_n = ap_const_logic_0) or (p_accumulator_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                l_parBlocks_reg_143 <= p_size_dout;
                p_accumulator_offset_read_reg_138 <= p_accumulator_offset_dout;
                p_initZero_read_reg_148 <= p_initZero_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_accumulator_addr_reg_161 <= sum_cast_i_fu_122_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_values_empty_n, p_accumulator_offset_empty_n, p_size_empty_n, p_initZero_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln397_fu_102_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_initZero_empty_n = ap_const_logic_0) or (p_size_empty_n = ap_const_logic_0) or (p_accumulator_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln397_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state3 => 
                if (((p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln397_fu_107_p2 <= std_logic_vector(unsigned(i_reg_87) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_accumulator_offset_empty_n, p_size_empty_n, p_initZero_empty_n)
    begin
                ap_block_state1 <= ((p_initZero_empty_n = ap_const_logic_0) or (p_size_empty_n = ap_const_logic_0) or (p_accumulator_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_98_p1 <= p_values_read_reg_166;
    icmp_ln397_fu_102_p2 <= "1" when (i_reg_87 = l_parBlocks_reg_143) else "0";
    l_accumulator_fu_127_p3 <= 
        ap_const_lv32_0 when (p_initZero_read_reg_148(0) = '1') else 
        p_accumulator_q0;

    p_accumulator_address0_assign_proc : process(ap_CS_fsm_state2, p_accumulator_addr_reg_161, ap_CS_fsm_state9, sum_cast_i_fu_122_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_accumulator_address0 <= p_accumulator_addr_reg_161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_accumulator_address0 <= sum_cast_i_fu_122_p1(7 - 1 downto 0);
        else 
            p_accumulator_address0 <= "XXXXXXX";
        end if; 
    end process;


    p_accumulator_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            p_accumulator_ce0 <= ap_const_logic_1;
        else 
            p_accumulator_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_accumulator_d0 <= add4_i_reg_181;

    p_accumulator_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_accumulator_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_accumulator_offset_blk_n <= p_accumulator_offset_empty_n;
        else 
            p_accumulator_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_accumulator_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_accumulator_offset_empty_n, p_size_empty_n, p_initZero_empty_n)
    begin
        if ((not(((p_initZero_empty_n = ap_const_logic_0) or (p_size_empty_n = ap_const_logic_0) or (p_accumulator_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_accumulator_offset_read <= ap_const_logic_1;
        else 
            p_accumulator_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_accumulator_we0 <= ap_const_logic_1;
        else 
            p_accumulator_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_initZero_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_initZero_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_initZero_blk_n <= p_initZero_empty_n;
        else 
            p_initZero_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_initZero_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_accumulator_offset_empty_n, p_size_empty_n, p_initZero_empty_n)
    begin
        if ((not(((p_initZero_empty_n = ap_const_logic_0) or (p_size_empty_n = ap_const_logic_0) or (p_accumulator_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_initZero_read <= ap_const_logic_1;
        else 
            p_initZero_read <= ap_const_logic_0;
        end if; 
    end process;


    p_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_size_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_size_blk_n <= p_size_empty_n;
        else 
            p_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_accumulator_offset_empty_n, p_size_empty_n, p_initZero_empty_n)
    begin
        if ((not(((p_initZero_empty_n = ap_const_logic_0) or (p_size_empty_n = ap_const_logic_0) or (p_accumulator_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_size_read <= ap_const_logic_1;
        else 
            p_size_read <= ap_const_logic_0;
        end if; 
    end process;


    p_values_blk_n_assign_proc : process(p_values_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_values_blk_n <= p_values_empty_n;
        else 
            p_values_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_values_read_assign_proc : process(p_values_empty_n, ap_CS_fsm_state3)
    begin
        if (((p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_values_read <= ap_const_logic_1;
        else 
            p_values_read <= ap_const_logic_0;
        end if; 
    end process;

    sum_cast_i_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_117_p2),64));
    sum_i_fu_117_p2 <= std_logic_vector(unsigned(p_accumulator_offset_read_reg_138) + unsigned(trunc_ln397_fu_113_p1));
    trunc_ln397_fu_113_p1 <= i_reg_87(7 - 1 downto 0);
end behav;
