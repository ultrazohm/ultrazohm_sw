-- -------------------------------------------------------------
-- 
-- File Name: /home/ts/Dokumente/ultrazohm_testbench/ultrazohm_sw/ip_cores/InterlockDeadtime_2L/hdlsrc/interlock_deadtime/interlock_ip_dut.vhd
-- Created: 2020-12-14 18:30:55
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: interlock_ip_dut
-- Source Path: interlock_ip/interlock_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY interlock_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        S0                                :   IN    std_logic;  -- ufix1
        S1                                :   IN    std_logic;  -- ufix1
        S2                                :   IN    std_logic;  -- ufix1
        S3                                :   IN    std_logic;  -- ufix1
        S4                                :   IN    std_logic;  -- ufix1
        S5                                :   IN    std_logic;  -- ufix1
        AXI_DelayCycles                   :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
        AXI_EnableOutput                  :   IN    std_logic;  -- ufix1
        AXI_InverseBotSwitch              :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        s0_out                            :   OUT   std_logic;  -- ufix1
        s1_out                            :   OUT   std_logic;  -- ufix1
        s2_out                            :   OUT   std_logic;  -- ufix1
        s3_out                            :   OUT   std_logic;  -- ufix1
        s4_out                            :   OUT   std_logic;  -- ufix1
        s5_out                            :   OUT   std_logic;  -- ufix1
        AXI_fb_enable                     :   OUT   std_logic;  -- ufix1
        AXI_fb_DelayCycles                :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        AXI_fb_InverseBotSwitch           :   OUT   std_logic;  -- ufix1
        enableFB                          :   OUT   std_logic  -- ufix1
        );
END interlock_ip_dut;


ARCHITECTURE rtl OF interlock_ip_dut IS

  -- Component Declarations
  COMPONENT interlock_ip_src_interlock_deadtime
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          S0                              :   IN    std_logic;  -- ufix1
          S1                              :   IN    std_logic;  -- ufix1
          S2                              :   IN    std_logic;  -- ufix1
          S3                              :   IN    std_logic;  -- ufix1
          S4                              :   IN    std_logic;  -- ufix1
          S5                              :   IN    std_logic;  -- ufix1
          AXI_DelayCycles                 :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          AXI_EnableOutput                :   IN    std_logic;  -- ufix1
          AXI_InverseBotSwitch            :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          s0_out                          :   OUT   std_logic;  -- ufix1
          s1_out                          :   OUT   std_logic;  -- ufix1
          s2_out                          :   OUT   std_logic;  -- ufix1
          s3_out                          :   OUT   std_logic;  -- ufix1
          s4_out                          :   OUT   std_logic;  -- ufix1
          s5_out                          :   OUT   std_logic;  -- ufix1
          AXI_fb_enable                   :   OUT   std_logic;  -- ufix1
          AXI_fb_DelayCycles              :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          AXI_fb_InverseBotSwitch         :   OUT   std_logic;  -- ufix1
          enableFB                        :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : interlock_ip_src_interlock_deadtime
    USE ENTITY work.interlock_ip_src_interlock_deadtime(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL S0_sig                           : std_logic;  -- ufix1
  SIGNAL S1_sig                           : std_logic;  -- ufix1
  SIGNAL S2_sig                           : std_logic;  -- ufix1
  SIGNAL S3_sig                           : std_logic;  -- ufix1
  SIGNAL S4_sig                           : std_logic;  -- ufix1
  SIGNAL S5_sig                           : std_logic;  -- ufix1
  SIGNAL AXI_EnableOutput_sig             : std_logic;  -- ufix1
  SIGNAL AXI_InverseBotSwitch_sig         : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL s0_out_sig                       : std_logic;  -- ufix1
  SIGNAL s1_out_sig                       : std_logic;  -- ufix1
  SIGNAL s2_out_sig                       : std_logic;  -- ufix1
  SIGNAL s3_out_sig                       : std_logic;  -- ufix1
  SIGNAL s4_out_sig                       : std_logic;  -- ufix1
  SIGNAL s5_out_sig                       : std_logic;  -- ufix1
  SIGNAL AXI_fb_enable_sig                : std_logic;  -- ufix1
  SIGNAL AXI_fb_DelayCycles_sig           : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL AXI_fb_InverseBotSwitch_sig      : std_logic;  -- ufix1
  SIGNAL enableFB_sig                     : std_logic;  -- ufix1

BEGIN
  u_interlock_ip_src_interlock_deadtime : interlock_ip_src_interlock_deadtime
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset_x => reset_x,
              S0 => S0_sig,  -- ufix1
              S1 => S1_sig,  -- ufix1
              S2 => S2_sig,  -- ufix1
              S3 => S3_sig,  -- ufix1
              S4 => S4_sig,  -- ufix1
              S5 => S5_sig,  -- ufix1
              AXI_DelayCycles => AXI_DelayCycles,  -- ufix10
              AXI_EnableOutput => AXI_EnableOutput_sig,  -- ufix1
              AXI_InverseBotSwitch => AXI_InverseBotSwitch_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              s0_out => s0_out_sig,  -- ufix1
              s1_out => s1_out_sig,  -- ufix1
              s2_out => s2_out_sig,  -- ufix1
              s3_out => s3_out_sig,  -- ufix1
              s4_out => s4_out_sig,  -- ufix1
              s5_out => s5_out_sig,  -- ufix1
              AXI_fb_enable => AXI_fb_enable_sig,  -- ufix1
              AXI_fb_DelayCycles => AXI_fb_DelayCycles_sig,  -- ufix10
              AXI_fb_InverseBotSwitch => AXI_fb_InverseBotSwitch_sig,  -- ufix1
              enableFB => enableFB_sig  -- ufix1
              );

  S0_sig <= S0;

  S1_sig <= S1;

  S2_sig <= S2;

  S3_sig <= S3;

  S4_sig <= S4;

  S5_sig <= S5;

  AXI_EnableOutput_sig <= AXI_EnableOutput;

  AXI_InverseBotSwitch_sig <= AXI_InverseBotSwitch;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  s0_out <= s0_out_sig;

  s1_out <= s1_out_sig;

  s2_out <= s2_out_sig;

  s3_out <= s3_out_sig;

  s4_out <= s4_out_sig;

  s5_out <= s5_out_sig;

  AXI_fb_enable <= AXI_fb_enable_sig;

  AXI_fb_DelayCycles <= AXI_fb_DelayCycles_sig;

  AXI_fb_InverseBotSwitch <= AXI_fb_InverseBotSwitch_sig;

  enableFB <= enableFB_sig;

END rtl;

