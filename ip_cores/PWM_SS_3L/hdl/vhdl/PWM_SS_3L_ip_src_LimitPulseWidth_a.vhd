-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ThreeL_PWM_direct\PWM_SS_3L_ip_src_LimitPulseWidth_a.vhd
-- Created: 2020-04-06 17:35:11
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: PWM_SS_3L_ip_src_LimitPulseWidth_a
-- Source Path: ThreeL_PWM_direct/PWM_SS_Ctrl/GenPWM/LimitPulseWidth_a
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY PWM_SS_3L_ip_src_LimitPulseWidth_a IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        ref_sig                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        min_pulse_width                   :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        ref_sig_limited                   :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En12
        );
END PWM_SS_3L_ip_src_LimitPulseWidth_a;


ARCHITECTURE rtl OF PWM_SS_3L_ip_src_LimitPulseWidth_a IS

  -- Signals
  SIGNAL ref_sig_signed                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL min_pulse_width_signed           : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Saturation1_out1                 : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Saturation1_out1_1               : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL minus_cast                       : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL minus_cast_1                     : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL minus_out1                       : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL minus_out1_1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Constant3_out1                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Add1_out1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Add1_out1_1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Constant4_out1                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Add2_out1                        : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Add2_out1_1                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Relational_Operator3_relop1      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant5_out1                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Constant1_out1                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch2_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Constant2_out1                   : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch1_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch6_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12

BEGIN
  -- Set minimum pulse width between between 1 and 0
  -- Min pulse width of 5% = 0.05

  ref_sig_signed <= signed(ref_sig);

  min_pulse_width_signed <= signed(min_pulse_width);

  
  Saturation1_out1 <= to_signed(16#1000#, 14) WHEN min_pulse_width_signed > to_signed(16#1000#, 14) ELSE
      to_signed(16#0000#, 14) WHEN min_pulse_width_signed < to_signed(16#0000#, 14) ELSE
      min_pulse_width_signed;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Saturation1_out1_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Saturation1_out1_1 <= Saturation1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  Relational_Operator1_relop1 <= '1' WHEN ref_sig_signed < Saturation1_out1_1 ELSE
      '0';

  minus_cast <= resize(Saturation1_out1, 15);
  minus_cast_1 <=  - (minus_cast);
  minus_out1 <= minus_cast_1(13 DOWNTO 0);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        minus_out1_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        minus_out1_1 <= minus_out1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  
  Relational_Operator_relop1 <= '1' WHEN ref_sig_signed > minus_out1_1 ELSE
      '0';

  Logical_Operator1_out1 <= Relational_Operator1_relop1 AND Relational_Operator_relop1;

  Constant3_out1 <= to_signed(-16#1000#, 14);

  Add1_out1 <= Saturation1_out1 + Constant3_out1;

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add1_out1_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Add1_out1_1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  
  Relational_Operator2_relop1 <= '1' WHEN ref_sig_signed < Add1_out1_1 ELSE
      '0';

  Constant4_out1 <= to_signed(16#1000#, 14);

  Add2_out1 <= Constant4_out1 - Saturation1_out1;

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add2_out1_1 <= to_signed(16#0000#, 14);
      ELSIF enb = '1' THEN
        Add2_out1_1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  
  Relational_Operator3_relop1 <= '1' WHEN ref_sig_signed > Add2_out1_1 ELSE
      '0';

  Logical_Operator_out1 <= Relational_Operator3_relop1 OR (Logical_Operator1_out1 OR Relational_Operator2_relop1);

  
  switch_compare_1 <= '1' WHEN Logical_Operator_out1 > '0' ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Relational_Operator2_relop1 > '0' ELSE
      '0';

  Constant5_out1 <= to_signed(16#1029#, 14);

  
  switch_compare_1_2 <= '1' WHEN Logical_Operator1_out1 > '0' ELSE
      '0';

  Constant1_out1 <= to_signed(-16#1029#, 14);

  
  Switch2_out1 <= Constant5_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant1_out1;

  Constant2_out1 <= to_signed(16#0000#, 14);

  
  Switch1_out1 <= Switch2_out1 WHEN switch_compare_1_2 = '0' ELSE
      Constant2_out1;

  
  Switch6_out1 <= ref_sig_signed WHEN switch_compare_1 = '0' ELSE
      Switch1_out1;

  ref_sig_limited <= std_logic_vector(Switch6_out1);






END rtl;

