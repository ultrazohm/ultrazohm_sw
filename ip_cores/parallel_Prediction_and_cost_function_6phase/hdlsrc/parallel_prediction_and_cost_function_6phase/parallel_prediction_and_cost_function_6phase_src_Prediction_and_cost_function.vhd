-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_Prediction_and_cost_function_6phase\hdlsrc\parallel_prediction_and_cost_function_6phase\parallel_prediction_and_cost_function_6phase_src_Prediction_and_cost_function.vhd
-- Created: 2022-09-30 13:32:47
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- done                          ce_out        1e-08
-- Index                         ce_out        1e-08
-- J_0                           ce_out        1e-08
-- J_1                           ce_out        1e-08
-- J_2                           ce_out        1e-08
-- J_3                           ce_out        1e-08
-- J_4                           ce_out        1e-08
-- J_5                           ce_out        1e-08
-- J_6                           ce_out        1e-08
-- J_7                           ce_out        1e-08
-- J_8                           ce_out        1e-08
-- J_9                           ce_out        1e-08
-- J_10                          ce_out        1e-08
-- J_11                          ce_out        1e-08
-- J_12                          ce_out        1e-08
-- J_13                          ce_out        1e-08
-- J_14                          ce_out        1e-08
-- J_15                          ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_prediction_and_cost_function_6phase_src_Prediction_and_cost_function
-- Source Path: parallel_prediction_and_cost_function_6phase/Prediction_and_cost_function
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_prediction_and_cost_function_6phase_src_Prediction_and_cost_function_pkg.ALL;

ENTITY parallel_prediction_and_cost_function_6phase_src_Prediction_and_cost_function IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Lq_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ld_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        Rs_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_m_measured                  :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        pole_pairs_AXI                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psiPM_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iq_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ix_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iy_ref_AXI                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        use_AXI                           :   IN    std_logic;
        id_k_1_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1_AXI                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        omega_m_measured_AXI              :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        d_voltage_per_switching_state_AXI_61_64 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        q_voltage_per_switching_state_AXI_61_64 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        x_voltage_per_switching_state_AXI_61_64 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        y_volatge_per_switching_state_AXI_61_64 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        valid_in                          :   IN    std_logic;
        Reset_1                           :   IN    std_logic;
        valid_in_ADC                      :   IN    std_logic;
        dqxy_phase_voltage_per_switching_state_0 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_1 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_2 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_3 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_4 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_5 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_6 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_7 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_8 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_9 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_10 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_11 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_12 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_13 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_14 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_15 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_16 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_17 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_18 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_19 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_20 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_21 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_22 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_23 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_24 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_25 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_26 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_27 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_28 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_29 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_30 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_31 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_32 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_33 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_34 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_35 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_36 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_37 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_38 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_39 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_40 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_41 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_42 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_43 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_44 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_45 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_46 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_47 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_48 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_49 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_50 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_51 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_52 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_53 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_54 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_55 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_56 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_57 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_58 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_59 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_60 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_61 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_62 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        dqxy_phase_voltage_per_switching_state_63 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        ce_out                            :   OUT   std_logic;
        done                              :   OUT   std_logic;
        Index                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        J_0                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_1                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_2                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_3                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_4                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_5                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_6                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_7                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_8                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_9                               :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_10                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_11                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_12                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_13                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_14                              :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En11
        J_15                              :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En11
        );
END parallel_prediction_and_cost_function_6phase_src_Prediction_and_cost_function;


ARCHITECTURE rtl OF parallel_prediction_and_cost_function_6phase_src_Prediction_and_cost_function IS

  -- Component Declarations
  COMPONENT parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_Compare_To_Constant
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_18_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          d_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state1 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state2 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state3 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state4 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state5 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state6 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state7 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state8 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state8 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state8 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state8 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state9 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state9 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state9 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state9 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state10 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state10 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state10 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state10 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state11 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state11 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state11 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state11 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state12 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state12 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state12 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state12 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state13 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state13 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state13 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state13 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state14 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state14 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state14 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state14 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Ld15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lq15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lx15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Ly15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_k_16                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Rs15                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          omega_el15                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Lq15                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Ld15                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          psiPM15                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_phase_voltage_per_switching_state15 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          q_phase_voltage_per_switching_state15 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          x_phase_voltage_per_switching_state15 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          y_phase_voltage_per_switching_state15 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_ref15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_ref15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_ref15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_ref15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          J                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J1                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J2                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J3                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J4                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J5                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J6                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J7                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J8                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J9                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J10                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J11                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J12                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J13                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J14                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          J15                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive1
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive1(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_Compare_To_Constant
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_Compare_To_Constant(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_18_En11_to_single
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_18_En11_to_single(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive2
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive2(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_nfp_mul_single(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_Subsystem
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_Subsystem(rtl);

  FOR ALL : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    USE ENTITY work.parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay21_out1                     : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL Delay57_out1                     : std_logic;
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL count_step                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_reset                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL HDL_Counter_out1                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL count                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_2                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay58_reg                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay58_reg_next                 : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay58_out1                     : std_logic;
  SIGNAL delayMatch141_reg                : std_logic_vector(0 TO 82);  -- ufix1 [83]
  SIGNAL delayMatch141_reg_next           : std_logic_vector(0 TO 82);  -- ufix1 [83]
  SIGNAL Delay58_out1_1                   : std_logic;
  SIGNAL Delay59_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch142_reg                : vector_of_signed32(0 TO 82);  -- sfix32 [83]
  SIGNAL delayMatch142_reg_next           : vector_of_signed32(0 TO 82);  -- sfix32 [83]
  SIGNAL Delay59_out1_1                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL End_Cycle_3                      : std_logic;
  SIGNAL End_Cycle_4                      : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch2_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_0_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay136_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion85_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay135_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on90_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on90_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch4_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay137_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion84_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay134_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on89_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on89_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_2_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay138_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion83_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay133_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on88_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on88_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch8_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_3_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay139_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion82_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay132_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on87_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on87_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL delayMatch10_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch10_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_4_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay140_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion81_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay131_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on86_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on86_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL delayMatch12_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch12_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_5_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay141_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion80_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay130_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on85_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on85_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL delayMatch14_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch14_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_6_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay142_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion79_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay129_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on84_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on84_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL stateControl_15                  : std_logic;
  SIGNAL delayMatch16_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch16_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_16                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_7_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay143_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion78_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay128_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on83_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on83_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL stateControl_17                  : std_logic;
  SIGNAL delayMatch18_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch18_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_18                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_8_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay144_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion77_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay127_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on82_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on82_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL stateControl_19                  : std_logic;
  SIGNAL delayMatch20_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch20_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_20                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_9_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay145_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion76_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay126_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on81_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on81_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL stateControl_21                  : std_logic;
  SIGNAL delayMatch22_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch22_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_22                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_10_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay146_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion75_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay125_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on80_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on80_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL stateControl_23                  : std_logic;
  SIGNAL delayMatch24_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch24_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_24                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_11_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay147_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion74_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay124_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on79_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on79_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL stateControl_25                  : std_logic;
  SIGNAL delayMatch26_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch26_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_26                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_12_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay148_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion73_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay123_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on78_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on78_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL stateControl_27                  : std_logic;
  SIGNAL delayMatch28_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch28_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_28                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_13_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay149_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion72_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay122_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on77_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on77_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL stateControl_29                  : std_logic;
  SIGNAL delayMatch30_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch30_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_30                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_14_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay150_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion71_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay121_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on76_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on76_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL stateControl_31                  : std_logic;
  SIGNAL delayMatch32_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch32_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_32                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_15_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay151_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion70_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay120_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on75_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on75_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL stateControl_33                  : std_logic;
  SIGNAL delayMatch34_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch34_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_34                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_16_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay152_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion69_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay119_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on74_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on74_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL stateControl_35                  : std_logic;
  SIGNAL delayMatch36_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch36_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_36                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_17_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay153_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion68_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay118_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on73_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on73_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL stateControl_37                  : std_logic;
  SIGNAL delayMatch38_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch38_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_38                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_18_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay154_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion67_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay117_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on72_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on72_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL stateControl_39                  : std_logic;
  SIGNAL delayMatch40_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch40_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_40                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_19_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay155_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion66_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay116_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on71_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on71_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL stateControl_41                  : std_logic;
  SIGNAL delayMatch42_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch42_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_42                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_20_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay156_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion65_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay115_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on70_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on70_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL stateControl_43                  : std_logic;
  SIGNAL delayMatch44_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch44_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_44                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_21_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay157_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion64_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay114_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on69_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on69_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL stateControl_45                  : std_logic;
  SIGNAL delayMatch46_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch46_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_46                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_22_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay158_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion63_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay113_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on68_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on68_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL stateControl_47                  : std_logic;
  SIGNAL delayMatch48_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch48_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_48                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_23_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay159_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion62_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay112_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on67_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on67_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_24              : std_logic;
  SIGNAL stateControl_49                  : std_logic;
  SIGNAL delayMatch50_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch50_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_50                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_24_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay160_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion61_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay111_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on66_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on66_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_25              : std_logic;
  SIGNAL stateControl_51                  : std_logic;
  SIGNAL delayMatch52_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch52_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_52                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_25_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay161_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion60_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay110_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on65_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on65_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_26              : std_logic;
  SIGNAL stateControl_53                  : std_logic;
  SIGNAL delayMatch54_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch54_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_54                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_26_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay162_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion59_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay109_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on64_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on64_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_27              : std_logic;
  SIGNAL stateControl_55                  : std_logic;
  SIGNAL delayMatch56_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch56_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_56                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_27_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay163_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion58_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay108_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on63_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on63_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_28              : std_logic;
  SIGNAL stateControl_57                  : std_logic;
  SIGNAL delayMatch58_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch58_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_58                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_28_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay164_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion57_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay107_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on62_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on62_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_29              : std_logic;
  SIGNAL stateControl_59                  : std_logic;
  SIGNAL delayMatch60_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch60_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_60                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_29_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay165_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion56_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay106_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on61_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on61_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_30              : std_logic;
  SIGNAL stateControl_61                  : std_logic;
  SIGNAL delayMatch62_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch62_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_62                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_30_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay166_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion55_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay105_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on60_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on60_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_31              : std_logic;
  SIGNAL stateControl_63                  : std_logic;
  SIGNAL delayMatch64_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch64_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_64                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_31_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay167_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion54_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay104_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on59_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on59_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_32              : std_logic;
  SIGNAL stateControl_65                  : std_logic;
  SIGNAL delayMatch66_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch66_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_66                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_32_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay168_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion53_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay103_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on58_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on58_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_33              : std_logic;
  SIGNAL stateControl_67                  : std_logic;
  SIGNAL delayMatch68_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch68_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_68                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_33_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay169_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion52_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay102_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on57_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on57_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_34              : std_logic;
  SIGNAL stateControl_69                  : std_logic;
  SIGNAL delayMatch70_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch70_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_70                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_34_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay170_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion51_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay101_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on56_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on56_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_35              : std_logic;
  SIGNAL stateControl_71                  : std_logic;
  SIGNAL delayMatch72_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch72_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_72                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_35_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay171_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion50_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay100_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on55_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on55_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_36              : std_logic;
  SIGNAL stateControl_73                  : std_logic;
  SIGNAL delayMatch74_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch74_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_74                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_36_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay172_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion49_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay99_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on54_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on54_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_37              : std_logic;
  SIGNAL stateControl_75                  : std_logic;
  SIGNAL delayMatch76_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch76_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_76                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_37_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay173_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion48_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay98_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on53_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on53_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_38              : std_logic;
  SIGNAL stateControl_77                  : std_logic;
  SIGNAL delayMatch78_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch78_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_78                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_38_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay174_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion47_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay97_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on52_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on52_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_39              : std_logic;
  SIGNAL stateControl_79                  : std_logic;
  SIGNAL delayMatch80_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch80_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_80                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_39_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay175_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion46_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay96_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on51_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on51_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_40              : std_logic;
  SIGNAL stateControl_81                  : std_logic;
  SIGNAL delayMatch82_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch82_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_82                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_40_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay176_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion45_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay95_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on50_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on50_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_41              : std_logic;
  SIGNAL stateControl_83                  : std_logic;
  SIGNAL delayMatch84_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch84_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_84                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_41_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay177_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion44_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay94_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on49_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on49_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_42              : std_logic;
  SIGNAL stateControl_85                  : std_logic;
  SIGNAL delayMatch86_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch86_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_86                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_42_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay178_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion43_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay93_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on48_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on48_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_43              : std_logic;
  SIGNAL stateControl_87                  : std_logic;
  SIGNAL delayMatch88_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch88_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_88                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_43_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay179_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion42_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay92_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on47_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on47_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_44              : std_logic;
  SIGNAL stateControl_89                  : std_logic;
  SIGNAL delayMatch90_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch90_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_90                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_44_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay180_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion41_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay91_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on46_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on46_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_45              : std_logic;
  SIGNAL stateControl_91                  : std_logic;
  SIGNAL delayMatch92_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch92_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_92                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_45_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay181_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion40_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay90_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on45_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on45_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_46              : std_logic;
  SIGNAL stateControl_93                  : std_logic;
  SIGNAL delayMatch94_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch94_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_94                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_46_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay182_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion39_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay89_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on44_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on44_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_47              : std_logic;
  SIGNAL stateControl_95                  : std_logic;
  SIGNAL delayMatch96_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch96_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_96                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_47_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay183_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion38_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay88_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on43_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on43_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_48              : std_logic;
  SIGNAL stateControl_97                  : std_logic;
  SIGNAL delayMatch98_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch98_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_98                  : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_48_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay184_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion37_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay87_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on42_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on42_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_49              : std_logic;
  SIGNAL stateControl_99                  : std_logic;
  SIGNAL delayMatch100_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch100_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_100                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_49_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay185_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion36_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay86_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on41_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on41_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_50              : std_logic;
  SIGNAL stateControl_101                 : std_logic;
  SIGNAL delayMatch102_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch102_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_102                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_50_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay186_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion35_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay85_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on40_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on40_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_51              : std_logic;
  SIGNAL stateControl_103                 : std_logic;
  SIGNAL delayMatch104_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch104_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_104                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_51_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay187_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion34_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay84_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on39_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on39_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_52              : std_logic;
  SIGNAL stateControl_105                 : std_logic;
  SIGNAL delayMatch106_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch106_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_106                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_52_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay188_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion33_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay83_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on38_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on38_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_53              : std_logic;
  SIGNAL stateControl_107                 : std_logic;
  SIGNAL delayMatch108_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch108_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_108                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_53_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay189_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion32_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay82_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on37_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on37_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_54              : std_logic;
  SIGNAL stateControl_109                 : std_logic;
  SIGNAL delayMatch110_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch110_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_110                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_54_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay190_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion31_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay81_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on36_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on36_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_55              : std_logic;
  SIGNAL stateControl_111                 : std_logic;
  SIGNAL delayMatch112_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch112_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_112                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_55_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay191_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion30_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay80_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on35_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on35_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_56              : std_logic;
  SIGNAL stateControl_113                 : std_logic;
  SIGNAL delayMatch114_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch114_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_114                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_56_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay192_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion29_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay79_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on34_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on34_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_57              : std_logic;
  SIGNAL stateControl_115                 : std_logic;
  SIGNAL delayMatch116_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch116_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_116                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_57_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay193_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion28_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay78_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on33_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on33_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_58              : std_logic;
  SIGNAL stateControl_117                 : std_logic;
  SIGNAL delayMatch118_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch118_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_118                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_58_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay194_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion27_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay77_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on32_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on32_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_59              : std_logic;
  SIGNAL stateControl_119                 : std_logic;
  SIGNAL delayMatch120_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch120_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_120                 : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_59_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay195_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion26_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay76_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on31_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on31_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_60              : std_logic;
  SIGNAL Delay23_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on21_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay20_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_61              : std_logic;
  SIGNAL Delay24_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on20_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay19_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_62              : std_logic;
  SIGNAL Delay25_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on19_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay18_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_63              : std_logic;
  SIGNAL Delay26_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on18_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay17_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_64              : std_logic;
  SIGNAL stateControl_121                 : std_logic;
  SIGNAL delayMatch122_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch122_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_122                 : std_logic;
  SIGNAL Delay56_out1                     : std_logic;
  SIGNAL switch_compare_1_65              : std_logic;
  SIGNAL id_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay27_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL id_k_1_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay47_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on22_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay16_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on17_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on17_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_66              : std_logic;
  SIGNAL stateControl_123                 : std_logic;
  SIGNAL delayMatch124_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch124_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_124                 : std_logic;
  SIGNAL switch_compare_1_67              : std_logic;
  SIGNAL iq_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay28_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL iq_k_1_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay48_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on23_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay15_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on16_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on16_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_68              : std_logic;
  SIGNAL stateControl_125                 : std_logic;
  SIGNAL delayMatch126_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch126_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_126                 : std_logic;
  SIGNAL switch_compare_1_69              : std_logic;
  SIGNAL ix_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay29_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL ix_k_1_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay49_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on24_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay14_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on15_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on15_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_70              : std_logic;
  SIGNAL stateControl_127                 : std_logic;
  SIGNAL delayMatch128_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch128_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_128                 : std_logic;
  SIGNAL switch_compare_1_71              : std_logic;
  SIGNAL iy_k_1_signed                    : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay30_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL iy_k_1_AXI_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay50_out1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Switch_on25_out1                 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay13_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_72              : std_logic;
  SIGNAL Delay31_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on12_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay12_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay60_out1                     : std_logic;
  SIGNAL End_Cycle_5                      : std_logic;
  SIGNAL delayMatch132_reg                : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL delayMatch132_reg_next           : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL End_Cycle_6                      : std_logic;
  SIGNAL switch_compare_1_73              : std_logic;
  SIGNAL stateControl_129                 : std_logic;
  SIGNAL delayMatch131_reg                : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL delayMatch131_reg_next           : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL stateControl_130                 : std_logic;
  SIGNAL switch_compare_1_74              : std_logic;
  SIGNAL omega_m_measured_signed          : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay51_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omega_m_measured_AXI_signed      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay32_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on26_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay35_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch130_reg                : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch130_reg_next           : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Delay35_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay11_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_75              : std_logic;
  SIGNAL Delay34_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on10_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_76              : std_logic;
  SIGNAL Delay36_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on9_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_77              : std_logic;
  SIGNAL Delay37_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on8_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay8_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_78              : std_logic;
  SIGNAL stateControl_131                 : std_logic;
  SIGNAL delayMatch133_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch133_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_132                 : std_logic;
  SIGNAL switch_compare_1_79              : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_60_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay38_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL d_voltage_per_switching_state_AXI_61_64_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay52_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on27_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion11_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay7_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_80              : std_logic;
  SIGNAL stateControl_133                 : std_logic;
  SIGNAL delayMatch135_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch135_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_134                 : std_logic;
  SIGNAL switch_compare_1_81              : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_61_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay39_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL q_voltage_per_switching_state_AXI_61_64_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay53_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on28_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on6_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_82              : std_logic;
  SIGNAL stateControl_135                 : std_logic;
  SIGNAL delayMatch137_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch137_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_136                 : std_logic;
  SIGNAL switch_compare_1_83              : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_62_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay40_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL x_voltage_per_switching_state_AXI_61_64_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay54_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on29_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion13_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on5_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_84              : std_logic;
  SIGNAL stateControl_137                 : std_logic;
  SIGNAL delayMatch139_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch139_reg_next           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL stateControl_138                 : std_logic;
  SIGNAL switch_compare_1_85              : std_logic;
  SIGNAL dqxy_phase_voltage_per_switching_state_63_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay41_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL y_volatge_per_switching_state_AXI_61_64_signed : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay55_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on30_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Data_Type_Conversion14_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on4_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_86              : std_logic;
  SIGNAL Delay42_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on3_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_87              : std_logic;
  SIGNAL Delay43_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_88              : std_logic;
  SIGNAL Delay44_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_89              : std_logic;
  SIGNAL Delay45_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on14_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay33_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_16                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_17                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_18                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_19                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_20                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_21                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_22                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_23                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_24                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_25                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_26                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_27                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_28                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_29                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL J_30                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1                      : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_2_1                      : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_3_1                      : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_4_1                      : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_5_1                      : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_6_1                      : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_7_1                      : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_8_1                      : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_9_1                      : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_10_1                     : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_11_1                     : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_12_1                     : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_13_1                     : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_14_1                     : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_15_1                     : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL nfp_out_16_1                     : std_logic_vector(19 DOWNTO 0);  -- ufix20

BEGIN
  u_Detect_Rise_Positive : parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay21_out1,
              Y => End_Cycle
              );

  u_Detect_Rise_Positive1 : parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay57_out1,
              Y => End_Cycle_2
              );

  u_Compare_To_Constant : parallel_prediction_and_cost_function_6phase_src_Compare_To_Constant
    PORT MAP( u => std_logic_vector(HDL_Counter_out1),  -- int32
              y => Compare_To_Constant_out1
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay136_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion85_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_1 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay137_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion84_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_2 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay138_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion83_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_3 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay139_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion82_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_4 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay140_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion81_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_5 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay141_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion80_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_6 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay142_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion79_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_7 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay143_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion78_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_8 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay144_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion77_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_9 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay145_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion76_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_10 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay146_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion75_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_11 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay147_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion74_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_12 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay148_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion73_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_13 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay149_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion72_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_14 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay150_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion71_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_15 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay151_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion70_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_16 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay152_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion69_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_17 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay153_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion68_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_18 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay154_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion67_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_19 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay155_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion66_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_20 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay156_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion65_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_21 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay157_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion64_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_22 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay158_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion63_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_23 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay159_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion62_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_24 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay160_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion61_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_25 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay161_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion60_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_26 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay162_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion59_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_27 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay163_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion58_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_28 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay164_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion57_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_29 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay165_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion56_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_30 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay166_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion55_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_31 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay167_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion54_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_32 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay168_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion53_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_33 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay169_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion52_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_34 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay170_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion51_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_35 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay171_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion50_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_36 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay172_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion49_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_37 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay173_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion48_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_38 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay174_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion47_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_39 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay175_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion46_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_40 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay176_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion45_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_41 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay177_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion44_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_42 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay178_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion43_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_43 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay179_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion42_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_44 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay180_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion41_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_45 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay181_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion40_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_46 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay182_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion39_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_47 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay183_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion38_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_48 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay184_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion37_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_49 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay185_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion36_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_50 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay186_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion35_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_51 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay187_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion34_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_52 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay188_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion33_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_53 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay189_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion32_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_54 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay190_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion31_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_55 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay191_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion30_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_56 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay192_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion29_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_57 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay193_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion28_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_58 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay194_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion27_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_59 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Delay195_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion26_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_18_En11_to_single : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on22_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion7_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_18_En11_to_single_1 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on23_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion8_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_18_En11_to_single_2 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on24_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion9_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_18_En11_to_single_3 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_18_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on25_out1),  -- sfix18_En11
              nfp_out => Data_Type_Conversion10_out1  -- single
              );

  u_Detect_Rise_Positive2 : parallel_prediction_and_cost_function_6phase_src_Detect_Rise_Positive2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay60_out1,
              Y => End_Cycle_5
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_60 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on26_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion4_out1  -- single
              );

  u_nfp_mul_comp : parallel_prediction_and_cost_function_6phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion4_out1,  -- single
              nfp_in2 => Delay35_out1_1,  -- single
              nfp_out => omega_el  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_61 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on27_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion11_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_62 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on28_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion12_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_63 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on29_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion13_out1  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_sfix_24_En11_to_single_64 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on30_out1),  -- sfix24_En11
              nfp_out => Data_Type_Conversion14_out1  -- single
              );

  u_Subsystem : parallel_prediction_and_cost_function_6phase_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              d_phase_voltage_per_switching_state => Switch_on90_out1,  -- single
              q_phase_voltage_per_switching_state => Switch_on89_out1,  -- single
              x_phase_voltage_per_switching_state => Switch_on88_out1,  -- single
              y_phase_voltage_per_switching_state => Switch_on87_out1,  -- single
              d_phase_voltage_per_switching_state1 => Switch_on86_out1,  -- single
              q_phase_voltage_per_switching_state1 => Switch_on85_out1,  -- single
              x_phase_voltage_per_switching_state1 => Switch_on84_out1,  -- single
              y_phase_voltage_per_switching_state1 => Switch_on83_out1,  -- single
              d_phase_voltage_per_switching_state2 => Switch_on82_out1,  -- single
              q_phase_voltage_per_switching_state2 => Switch_on81_out1,  -- single
              x_phase_voltage_per_switching_state2 => Switch_on80_out1,  -- single
              y_phase_voltage_per_switching_state2 => Switch_on79_out1,  -- single
              d_phase_voltage_per_switching_state3 => Switch_on78_out1,  -- single
              q_phase_voltage_per_switching_state3 => Switch_on77_out1,  -- single
              x_phase_voltage_per_switching_state3 => Switch_on76_out1,  -- single
              y_phase_voltage_per_switching_state3 => Switch_on75_out1,  -- single
              d_phase_voltage_per_switching_state4 => Switch_on74_out1,  -- single
              q_phase_voltage_per_switching_state4 => Switch_on73_out1,  -- single
              x_phase_voltage_per_switching_state4 => Switch_on72_out1,  -- single
              y_phase_voltage_per_switching_state4 => Switch_on71_out1,  -- single
              d_phase_voltage_per_switching_state5 => Switch_on70_out1,  -- single
              q_phase_voltage_per_switching_state5 => Switch_on69_out1,  -- single
              x_phase_voltage_per_switching_state5 => Switch_on68_out1,  -- single
              y_phase_voltage_per_switching_state5 => Switch_on67_out1,  -- single
              d_phase_voltage_per_switching_state6 => Switch_on66_out1,  -- single
              q_phase_voltage_per_switching_state6 => Switch_on65_out1,  -- single
              x_phase_voltage_per_switching_state6 => Switch_on64_out1,  -- single
              y_phase_voltage_per_switching_state6 => Switch_on63_out1,  -- single
              d_phase_voltage_per_switching_state7 => Switch_on62_out1,  -- single
              q_phase_voltage_per_switching_state7 => Switch_on61_out1,  -- single
              x_phase_voltage_per_switching_state7 => Switch_on60_out1,  -- single
              y_phase_voltage_per_switching_state7 => Switch_on59_out1,  -- single
              d_phase_voltage_per_switching_state8 => Switch_on58_out1,  -- single
              q_phase_voltage_per_switching_state8 => Switch_on57_out1,  -- single
              x_phase_voltage_per_switching_state8 => Switch_on56_out1,  -- single
              y_phase_voltage_per_switching_state8 => Switch_on55_out1,  -- single
              d_phase_voltage_per_switching_state9 => Switch_on54_out1,  -- single
              q_phase_voltage_per_switching_state9 => Switch_on53_out1,  -- single
              x_phase_voltage_per_switching_state9 => Switch_on52_out1,  -- single
              y_phase_voltage_per_switching_state9 => Switch_on51_out1,  -- single
              d_phase_voltage_per_switching_state10 => Switch_on50_out1,  -- single
              q_phase_voltage_per_switching_state10 => Switch_on49_out1,  -- single
              x_phase_voltage_per_switching_state10 => Switch_on48_out1,  -- single
              y_phase_voltage_per_switching_state10 => Switch_on47_out1,  -- single
              d_phase_voltage_per_switching_state11 => Switch_on46_out1,  -- single
              q_phase_voltage_per_switching_state11 => Switch_on45_out1,  -- single
              x_phase_voltage_per_switching_state11 => Switch_on44_out1,  -- single
              y_phase_voltage_per_switching_state11 => Switch_on43_out1,  -- single
              d_phase_voltage_per_switching_state12 => Switch_on42_out1,  -- single
              q_phase_voltage_per_switching_state12 => Switch_on41_out1,  -- single
              x_phase_voltage_per_switching_state12 => Switch_on40_out1,  -- single
              y_phase_voltage_per_switching_state12 => Switch_on39_out1,  -- single
              d_phase_voltage_per_switching_state13 => Switch_on38_out1,  -- single
              q_phase_voltage_per_switching_state13 => Switch_on37_out1,  -- single
              x_phase_voltage_per_switching_state13 => Switch_on36_out1,  -- single
              y_phase_voltage_per_switching_state13 => Switch_on35_out1,  -- single
              d_phase_voltage_per_switching_state14 => Switch_on34_out1,  -- single
              q_phase_voltage_per_switching_state14 => Switch_on33_out1,  -- single
              x_phase_voltage_per_switching_state14 => Switch_on32_out1,  -- single
              y_phase_voltage_per_switching_state14 => Switch_on31_out1,  -- single
              SampleTime_div_Ld15 => Switch_on21_out1,  -- single
              SampleTime_div_Lq15 => Switch_on20_out1,  -- single
              SampleTime_div_Lx15 => Switch_on19_out1,  -- single
              SampleTime_div_Ly15 => Switch_on18_out1,  -- single
              id_k_16 => Switch_on17_out1,  -- single
              iq_k_16 => Switch_on16_out1,  -- single
              ix_k_16 => Switch_on15_out1,  -- single
              iy_k_16 => Switch_on13_out1,  -- single
              Rs15 => Switch_on12_out1,  -- single
              omega_el15 => Switch_on11_out1,  -- single
              Lq15 => Switch_on10_out1,  -- single
              Ld15 => Switch_on9_out1,  -- single
              psiPM15 => Switch_on8_out1,  -- single
              d_phase_voltage_per_switching_state15 => Switch_on7_out1,  -- single
              q_phase_voltage_per_switching_state15 => Switch_on6_out1,  -- single
              x_phase_voltage_per_switching_state15 => Switch_on5_out1,  -- single
              y_phase_voltage_per_switching_state15 => Switch_on4_out1,  -- single
              id_ref15 => Switch_on3_out1,  -- single
              iq_ref15 => Switch_on2_out1,  -- single
              ix_ref15 => Switch_on1_out1,  -- single
              iy_ref15 => Switch_on14_out1,  -- single
              J => J,  -- single
              J1 => J_16,  -- single
              J2 => J_17,  -- single
              J3 => J_18,  -- single
              J4 => J_19,  -- single
              J5 => J_20,  -- single
              J6 => J_21,  -- single
              J7 => J_22,  -- single
              J8 => J_23,  -- single
              J9 => J_24,  -- single
              J10 => J_25,  -- single
              J11 => J_26,  -- single
              J12 => J_27,  -- single
              J13 => J_28,  -- single
              J14 => J_29,  -- single
              J15 => J_30  -- single
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J,  -- single
              nfp_out => nfp_out_1_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_1 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_16,  -- single
              nfp_out => nfp_out_2_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_2 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_17,  -- single
              nfp_out => nfp_out_3_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_3 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_18,  -- single
              nfp_out => nfp_out_4_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_4 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_19,  -- single
              nfp_out => nfp_out_5_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_5 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_20,  -- single
              nfp_out => nfp_out_6_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_6 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_21,  -- single
              nfp_out => nfp_out_7_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_7 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_22,  -- single
              nfp_out => nfp_out_8_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_8 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_23,  -- single
              nfp_out => nfp_out_9_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_9 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_24,  -- single
              nfp_out => nfp_out_10_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_10 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_25,  -- single
              nfp_out => nfp_out_11_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_11 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_26,  -- single
              nfp_out => nfp_out_12_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_12 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_27,  -- single
              nfp_out => nfp_out_13_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_13 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_28,  -- single
              nfp_out => nfp_out_14_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_14 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_29,  -- single
              nfp_out => nfp_out_15_1  -- sfix20_En11
              );

  u_parallel_prediction_and_cost_function_6phase_Prediction_and_cost_function_nfp_convert_single_to_sfix_20_En11_15 : parallel_prediction_and_cost_function_6phase_src_nfp_convert_single_to_sfix_20_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => J_30,  -- single
              nfp_out => nfp_out_16_1  -- sfix20_En11
              );

  enb <= clk_enable;

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay21_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        End_Cycle_1 <= '0';
      ELSIF enb = '1' THEN
        End_Cycle_1 <= End_Cycle;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Delay57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay57_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay57_out1 <= Reset_1;
      END IF;
    END IF;
  END PROCESS Delay57_process;


  -- Free running, Signed Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_signed(1, 32);

  count_reset <= to_signed(0, 32);

  count <= HDL_Counter_out1 + count_step;

  
  count_1 <= HDL_Counter_out1 WHEN End_Cycle = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN End_Cycle_2 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Logical_Operator_out1 <= End_Cycle_1 AND Compare_To_Constant_out1;

  Delay58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay58_reg(0) <= '0';
        Delay58_reg(1) <= '0';
        Delay58_reg(2) <= '0';
      ELSIF enb = '1' THEN
        Delay58_reg(0) <= Delay58_reg_next(0);
        Delay58_reg(1) <= Delay58_reg_next(1);
        Delay58_reg(2) <= Delay58_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay58_process;

  Delay58_out1 <= Delay58_reg(2);
  Delay58_reg_next(0) <= Logical_Operator_out1;
  Delay58_reg_next(1) <= Delay58_reg(0);
  Delay58_reg_next(2) <= Delay58_reg(1);

  delayMatch141_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch141_reg(0) <= '0';
        delayMatch141_reg(1) <= '0';
        delayMatch141_reg(2) <= '0';
        delayMatch141_reg(3) <= '0';
        delayMatch141_reg(4) <= '0';
        delayMatch141_reg(5) <= '0';
        delayMatch141_reg(6) <= '0';
        delayMatch141_reg(7) <= '0';
        delayMatch141_reg(8) <= '0';
        delayMatch141_reg(9) <= '0';
        delayMatch141_reg(10) <= '0';
        delayMatch141_reg(11) <= '0';
        delayMatch141_reg(12) <= '0';
        delayMatch141_reg(13) <= '0';
        delayMatch141_reg(14) <= '0';
        delayMatch141_reg(15) <= '0';
        delayMatch141_reg(16) <= '0';
        delayMatch141_reg(17) <= '0';
        delayMatch141_reg(18) <= '0';
        delayMatch141_reg(19) <= '0';
        delayMatch141_reg(20) <= '0';
        delayMatch141_reg(21) <= '0';
        delayMatch141_reg(22) <= '0';
        delayMatch141_reg(23) <= '0';
        delayMatch141_reg(24) <= '0';
        delayMatch141_reg(25) <= '0';
        delayMatch141_reg(26) <= '0';
        delayMatch141_reg(27) <= '0';
        delayMatch141_reg(28) <= '0';
        delayMatch141_reg(29) <= '0';
        delayMatch141_reg(30) <= '0';
        delayMatch141_reg(31) <= '0';
        delayMatch141_reg(32) <= '0';
        delayMatch141_reg(33) <= '0';
        delayMatch141_reg(34) <= '0';
        delayMatch141_reg(35) <= '0';
        delayMatch141_reg(36) <= '0';
        delayMatch141_reg(37) <= '0';
        delayMatch141_reg(38) <= '0';
        delayMatch141_reg(39) <= '0';
        delayMatch141_reg(40) <= '0';
        delayMatch141_reg(41) <= '0';
        delayMatch141_reg(42) <= '0';
        delayMatch141_reg(43) <= '0';
        delayMatch141_reg(44) <= '0';
        delayMatch141_reg(45) <= '0';
        delayMatch141_reg(46) <= '0';
        delayMatch141_reg(47) <= '0';
        delayMatch141_reg(48) <= '0';
        delayMatch141_reg(49) <= '0';
        delayMatch141_reg(50) <= '0';
        delayMatch141_reg(51) <= '0';
        delayMatch141_reg(52) <= '0';
        delayMatch141_reg(53) <= '0';
        delayMatch141_reg(54) <= '0';
        delayMatch141_reg(55) <= '0';
        delayMatch141_reg(56) <= '0';
        delayMatch141_reg(57) <= '0';
        delayMatch141_reg(58) <= '0';
        delayMatch141_reg(59) <= '0';
        delayMatch141_reg(60) <= '0';
        delayMatch141_reg(61) <= '0';
        delayMatch141_reg(62) <= '0';
        delayMatch141_reg(63) <= '0';
        delayMatch141_reg(64) <= '0';
        delayMatch141_reg(65) <= '0';
        delayMatch141_reg(66) <= '0';
        delayMatch141_reg(67) <= '0';
        delayMatch141_reg(68) <= '0';
        delayMatch141_reg(69) <= '0';
        delayMatch141_reg(70) <= '0';
        delayMatch141_reg(71) <= '0';
        delayMatch141_reg(72) <= '0';
        delayMatch141_reg(73) <= '0';
        delayMatch141_reg(74) <= '0';
        delayMatch141_reg(75) <= '0';
        delayMatch141_reg(76) <= '0';
        delayMatch141_reg(77) <= '0';
        delayMatch141_reg(78) <= '0';
        delayMatch141_reg(79) <= '0';
        delayMatch141_reg(80) <= '0';
        delayMatch141_reg(81) <= '0';
        delayMatch141_reg(82) <= '0';
      ELSIF enb = '1' THEN
        delayMatch141_reg(0) <= delayMatch141_reg_next(0);
        delayMatch141_reg(1) <= delayMatch141_reg_next(1);
        delayMatch141_reg(2) <= delayMatch141_reg_next(2);
        delayMatch141_reg(3) <= delayMatch141_reg_next(3);
        delayMatch141_reg(4) <= delayMatch141_reg_next(4);
        delayMatch141_reg(5) <= delayMatch141_reg_next(5);
        delayMatch141_reg(6) <= delayMatch141_reg_next(6);
        delayMatch141_reg(7) <= delayMatch141_reg_next(7);
        delayMatch141_reg(8) <= delayMatch141_reg_next(8);
        delayMatch141_reg(9) <= delayMatch141_reg_next(9);
        delayMatch141_reg(10) <= delayMatch141_reg_next(10);
        delayMatch141_reg(11) <= delayMatch141_reg_next(11);
        delayMatch141_reg(12) <= delayMatch141_reg_next(12);
        delayMatch141_reg(13) <= delayMatch141_reg_next(13);
        delayMatch141_reg(14) <= delayMatch141_reg_next(14);
        delayMatch141_reg(15) <= delayMatch141_reg_next(15);
        delayMatch141_reg(16) <= delayMatch141_reg_next(16);
        delayMatch141_reg(17) <= delayMatch141_reg_next(17);
        delayMatch141_reg(18) <= delayMatch141_reg_next(18);
        delayMatch141_reg(19) <= delayMatch141_reg_next(19);
        delayMatch141_reg(20) <= delayMatch141_reg_next(20);
        delayMatch141_reg(21) <= delayMatch141_reg_next(21);
        delayMatch141_reg(22) <= delayMatch141_reg_next(22);
        delayMatch141_reg(23) <= delayMatch141_reg_next(23);
        delayMatch141_reg(24) <= delayMatch141_reg_next(24);
        delayMatch141_reg(25) <= delayMatch141_reg_next(25);
        delayMatch141_reg(26) <= delayMatch141_reg_next(26);
        delayMatch141_reg(27) <= delayMatch141_reg_next(27);
        delayMatch141_reg(28) <= delayMatch141_reg_next(28);
        delayMatch141_reg(29) <= delayMatch141_reg_next(29);
        delayMatch141_reg(30) <= delayMatch141_reg_next(30);
        delayMatch141_reg(31) <= delayMatch141_reg_next(31);
        delayMatch141_reg(32) <= delayMatch141_reg_next(32);
        delayMatch141_reg(33) <= delayMatch141_reg_next(33);
        delayMatch141_reg(34) <= delayMatch141_reg_next(34);
        delayMatch141_reg(35) <= delayMatch141_reg_next(35);
        delayMatch141_reg(36) <= delayMatch141_reg_next(36);
        delayMatch141_reg(37) <= delayMatch141_reg_next(37);
        delayMatch141_reg(38) <= delayMatch141_reg_next(38);
        delayMatch141_reg(39) <= delayMatch141_reg_next(39);
        delayMatch141_reg(40) <= delayMatch141_reg_next(40);
        delayMatch141_reg(41) <= delayMatch141_reg_next(41);
        delayMatch141_reg(42) <= delayMatch141_reg_next(42);
        delayMatch141_reg(43) <= delayMatch141_reg_next(43);
        delayMatch141_reg(44) <= delayMatch141_reg_next(44);
        delayMatch141_reg(45) <= delayMatch141_reg_next(45);
        delayMatch141_reg(46) <= delayMatch141_reg_next(46);
        delayMatch141_reg(47) <= delayMatch141_reg_next(47);
        delayMatch141_reg(48) <= delayMatch141_reg_next(48);
        delayMatch141_reg(49) <= delayMatch141_reg_next(49);
        delayMatch141_reg(50) <= delayMatch141_reg_next(50);
        delayMatch141_reg(51) <= delayMatch141_reg_next(51);
        delayMatch141_reg(52) <= delayMatch141_reg_next(52);
        delayMatch141_reg(53) <= delayMatch141_reg_next(53);
        delayMatch141_reg(54) <= delayMatch141_reg_next(54);
        delayMatch141_reg(55) <= delayMatch141_reg_next(55);
        delayMatch141_reg(56) <= delayMatch141_reg_next(56);
        delayMatch141_reg(57) <= delayMatch141_reg_next(57);
        delayMatch141_reg(58) <= delayMatch141_reg_next(58);
        delayMatch141_reg(59) <= delayMatch141_reg_next(59);
        delayMatch141_reg(60) <= delayMatch141_reg_next(60);
        delayMatch141_reg(61) <= delayMatch141_reg_next(61);
        delayMatch141_reg(62) <= delayMatch141_reg_next(62);
        delayMatch141_reg(63) <= delayMatch141_reg_next(63);
        delayMatch141_reg(64) <= delayMatch141_reg_next(64);
        delayMatch141_reg(65) <= delayMatch141_reg_next(65);
        delayMatch141_reg(66) <= delayMatch141_reg_next(66);
        delayMatch141_reg(67) <= delayMatch141_reg_next(67);
        delayMatch141_reg(68) <= delayMatch141_reg_next(68);
        delayMatch141_reg(69) <= delayMatch141_reg_next(69);
        delayMatch141_reg(70) <= delayMatch141_reg_next(70);
        delayMatch141_reg(71) <= delayMatch141_reg_next(71);
        delayMatch141_reg(72) <= delayMatch141_reg_next(72);
        delayMatch141_reg(73) <= delayMatch141_reg_next(73);
        delayMatch141_reg(74) <= delayMatch141_reg_next(74);
        delayMatch141_reg(75) <= delayMatch141_reg_next(75);
        delayMatch141_reg(76) <= delayMatch141_reg_next(76);
        delayMatch141_reg(77) <= delayMatch141_reg_next(77);
        delayMatch141_reg(78) <= delayMatch141_reg_next(78);
        delayMatch141_reg(79) <= delayMatch141_reg_next(79);
        delayMatch141_reg(80) <= delayMatch141_reg_next(80);
        delayMatch141_reg(81) <= delayMatch141_reg_next(81);
        delayMatch141_reg(82) <= delayMatch141_reg_next(82);
      END IF;
    END IF;
  END PROCESS delayMatch141_process;

  Delay58_out1_1 <= delayMatch141_reg(82);
  delayMatch141_reg_next(0) <= Delay58_out1;
  delayMatch141_reg_next(1) <= delayMatch141_reg(0);
  delayMatch141_reg_next(2) <= delayMatch141_reg(1);
  delayMatch141_reg_next(3) <= delayMatch141_reg(2);
  delayMatch141_reg_next(4) <= delayMatch141_reg(3);
  delayMatch141_reg_next(5) <= delayMatch141_reg(4);
  delayMatch141_reg_next(6) <= delayMatch141_reg(5);
  delayMatch141_reg_next(7) <= delayMatch141_reg(6);
  delayMatch141_reg_next(8) <= delayMatch141_reg(7);
  delayMatch141_reg_next(9) <= delayMatch141_reg(8);
  delayMatch141_reg_next(10) <= delayMatch141_reg(9);
  delayMatch141_reg_next(11) <= delayMatch141_reg(10);
  delayMatch141_reg_next(12) <= delayMatch141_reg(11);
  delayMatch141_reg_next(13) <= delayMatch141_reg(12);
  delayMatch141_reg_next(14) <= delayMatch141_reg(13);
  delayMatch141_reg_next(15) <= delayMatch141_reg(14);
  delayMatch141_reg_next(16) <= delayMatch141_reg(15);
  delayMatch141_reg_next(17) <= delayMatch141_reg(16);
  delayMatch141_reg_next(18) <= delayMatch141_reg(17);
  delayMatch141_reg_next(19) <= delayMatch141_reg(18);
  delayMatch141_reg_next(20) <= delayMatch141_reg(19);
  delayMatch141_reg_next(21) <= delayMatch141_reg(20);
  delayMatch141_reg_next(22) <= delayMatch141_reg(21);
  delayMatch141_reg_next(23) <= delayMatch141_reg(22);
  delayMatch141_reg_next(24) <= delayMatch141_reg(23);
  delayMatch141_reg_next(25) <= delayMatch141_reg(24);
  delayMatch141_reg_next(26) <= delayMatch141_reg(25);
  delayMatch141_reg_next(27) <= delayMatch141_reg(26);
  delayMatch141_reg_next(28) <= delayMatch141_reg(27);
  delayMatch141_reg_next(29) <= delayMatch141_reg(28);
  delayMatch141_reg_next(30) <= delayMatch141_reg(29);
  delayMatch141_reg_next(31) <= delayMatch141_reg(30);
  delayMatch141_reg_next(32) <= delayMatch141_reg(31);
  delayMatch141_reg_next(33) <= delayMatch141_reg(32);
  delayMatch141_reg_next(34) <= delayMatch141_reg(33);
  delayMatch141_reg_next(35) <= delayMatch141_reg(34);
  delayMatch141_reg_next(36) <= delayMatch141_reg(35);
  delayMatch141_reg_next(37) <= delayMatch141_reg(36);
  delayMatch141_reg_next(38) <= delayMatch141_reg(37);
  delayMatch141_reg_next(39) <= delayMatch141_reg(38);
  delayMatch141_reg_next(40) <= delayMatch141_reg(39);
  delayMatch141_reg_next(41) <= delayMatch141_reg(40);
  delayMatch141_reg_next(42) <= delayMatch141_reg(41);
  delayMatch141_reg_next(43) <= delayMatch141_reg(42);
  delayMatch141_reg_next(44) <= delayMatch141_reg(43);
  delayMatch141_reg_next(45) <= delayMatch141_reg(44);
  delayMatch141_reg_next(46) <= delayMatch141_reg(45);
  delayMatch141_reg_next(47) <= delayMatch141_reg(46);
  delayMatch141_reg_next(48) <= delayMatch141_reg(47);
  delayMatch141_reg_next(49) <= delayMatch141_reg(48);
  delayMatch141_reg_next(50) <= delayMatch141_reg(49);
  delayMatch141_reg_next(51) <= delayMatch141_reg(50);
  delayMatch141_reg_next(52) <= delayMatch141_reg(51);
  delayMatch141_reg_next(53) <= delayMatch141_reg(52);
  delayMatch141_reg_next(54) <= delayMatch141_reg(53);
  delayMatch141_reg_next(55) <= delayMatch141_reg(54);
  delayMatch141_reg_next(56) <= delayMatch141_reg(55);
  delayMatch141_reg_next(57) <= delayMatch141_reg(56);
  delayMatch141_reg_next(58) <= delayMatch141_reg(57);
  delayMatch141_reg_next(59) <= delayMatch141_reg(58);
  delayMatch141_reg_next(60) <= delayMatch141_reg(59);
  delayMatch141_reg_next(61) <= delayMatch141_reg(60);
  delayMatch141_reg_next(62) <= delayMatch141_reg(61);
  delayMatch141_reg_next(63) <= delayMatch141_reg(62);
  delayMatch141_reg_next(64) <= delayMatch141_reg(63);
  delayMatch141_reg_next(65) <= delayMatch141_reg(64);
  delayMatch141_reg_next(66) <= delayMatch141_reg(65);
  delayMatch141_reg_next(67) <= delayMatch141_reg(66);
  delayMatch141_reg_next(68) <= delayMatch141_reg(67);
  delayMatch141_reg_next(69) <= delayMatch141_reg(68);
  delayMatch141_reg_next(70) <= delayMatch141_reg(69);
  delayMatch141_reg_next(71) <= delayMatch141_reg(70);
  delayMatch141_reg_next(72) <= delayMatch141_reg(71);
  delayMatch141_reg_next(73) <= delayMatch141_reg(72);
  delayMatch141_reg_next(74) <= delayMatch141_reg(73);
  delayMatch141_reg_next(75) <= delayMatch141_reg(74);
  delayMatch141_reg_next(76) <= delayMatch141_reg(75);
  delayMatch141_reg_next(77) <= delayMatch141_reg(76);
  delayMatch141_reg_next(78) <= delayMatch141_reg(77);
  delayMatch141_reg_next(79) <= delayMatch141_reg(78);
  delayMatch141_reg_next(80) <= delayMatch141_reg(79);
  delayMatch141_reg_next(81) <= delayMatch141_reg(80);
  delayMatch141_reg_next(82) <= delayMatch141_reg(81);

  done <= Delay58_out1_1;

  Delay59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay59_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay59_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay59_process;


  delayMatch142_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch142_reg(0) <= to_signed(0, 32);
        delayMatch142_reg(1) <= to_signed(0, 32);
        delayMatch142_reg(2) <= to_signed(0, 32);
        delayMatch142_reg(3) <= to_signed(0, 32);
        delayMatch142_reg(4) <= to_signed(0, 32);
        delayMatch142_reg(5) <= to_signed(0, 32);
        delayMatch142_reg(6) <= to_signed(0, 32);
        delayMatch142_reg(7) <= to_signed(0, 32);
        delayMatch142_reg(8) <= to_signed(0, 32);
        delayMatch142_reg(9) <= to_signed(0, 32);
        delayMatch142_reg(10) <= to_signed(0, 32);
        delayMatch142_reg(11) <= to_signed(0, 32);
        delayMatch142_reg(12) <= to_signed(0, 32);
        delayMatch142_reg(13) <= to_signed(0, 32);
        delayMatch142_reg(14) <= to_signed(0, 32);
        delayMatch142_reg(15) <= to_signed(0, 32);
        delayMatch142_reg(16) <= to_signed(0, 32);
        delayMatch142_reg(17) <= to_signed(0, 32);
        delayMatch142_reg(18) <= to_signed(0, 32);
        delayMatch142_reg(19) <= to_signed(0, 32);
        delayMatch142_reg(20) <= to_signed(0, 32);
        delayMatch142_reg(21) <= to_signed(0, 32);
        delayMatch142_reg(22) <= to_signed(0, 32);
        delayMatch142_reg(23) <= to_signed(0, 32);
        delayMatch142_reg(24) <= to_signed(0, 32);
        delayMatch142_reg(25) <= to_signed(0, 32);
        delayMatch142_reg(26) <= to_signed(0, 32);
        delayMatch142_reg(27) <= to_signed(0, 32);
        delayMatch142_reg(28) <= to_signed(0, 32);
        delayMatch142_reg(29) <= to_signed(0, 32);
        delayMatch142_reg(30) <= to_signed(0, 32);
        delayMatch142_reg(31) <= to_signed(0, 32);
        delayMatch142_reg(32) <= to_signed(0, 32);
        delayMatch142_reg(33) <= to_signed(0, 32);
        delayMatch142_reg(34) <= to_signed(0, 32);
        delayMatch142_reg(35) <= to_signed(0, 32);
        delayMatch142_reg(36) <= to_signed(0, 32);
        delayMatch142_reg(37) <= to_signed(0, 32);
        delayMatch142_reg(38) <= to_signed(0, 32);
        delayMatch142_reg(39) <= to_signed(0, 32);
        delayMatch142_reg(40) <= to_signed(0, 32);
        delayMatch142_reg(41) <= to_signed(0, 32);
        delayMatch142_reg(42) <= to_signed(0, 32);
        delayMatch142_reg(43) <= to_signed(0, 32);
        delayMatch142_reg(44) <= to_signed(0, 32);
        delayMatch142_reg(45) <= to_signed(0, 32);
        delayMatch142_reg(46) <= to_signed(0, 32);
        delayMatch142_reg(47) <= to_signed(0, 32);
        delayMatch142_reg(48) <= to_signed(0, 32);
        delayMatch142_reg(49) <= to_signed(0, 32);
        delayMatch142_reg(50) <= to_signed(0, 32);
        delayMatch142_reg(51) <= to_signed(0, 32);
        delayMatch142_reg(52) <= to_signed(0, 32);
        delayMatch142_reg(53) <= to_signed(0, 32);
        delayMatch142_reg(54) <= to_signed(0, 32);
        delayMatch142_reg(55) <= to_signed(0, 32);
        delayMatch142_reg(56) <= to_signed(0, 32);
        delayMatch142_reg(57) <= to_signed(0, 32);
        delayMatch142_reg(58) <= to_signed(0, 32);
        delayMatch142_reg(59) <= to_signed(0, 32);
        delayMatch142_reg(60) <= to_signed(0, 32);
        delayMatch142_reg(61) <= to_signed(0, 32);
        delayMatch142_reg(62) <= to_signed(0, 32);
        delayMatch142_reg(63) <= to_signed(0, 32);
        delayMatch142_reg(64) <= to_signed(0, 32);
        delayMatch142_reg(65) <= to_signed(0, 32);
        delayMatch142_reg(66) <= to_signed(0, 32);
        delayMatch142_reg(67) <= to_signed(0, 32);
        delayMatch142_reg(68) <= to_signed(0, 32);
        delayMatch142_reg(69) <= to_signed(0, 32);
        delayMatch142_reg(70) <= to_signed(0, 32);
        delayMatch142_reg(71) <= to_signed(0, 32);
        delayMatch142_reg(72) <= to_signed(0, 32);
        delayMatch142_reg(73) <= to_signed(0, 32);
        delayMatch142_reg(74) <= to_signed(0, 32);
        delayMatch142_reg(75) <= to_signed(0, 32);
        delayMatch142_reg(76) <= to_signed(0, 32);
        delayMatch142_reg(77) <= to_signed(0, 32);
        delayMatch142_reg(78) <= to_signed(0, 32);
        delayMatch142_reg(79) <= to_signed(0, 32);
        delayMatch142_reg(80) <= to_signed(0, 32);
        delayMatch142_reg(81) <= to_signed(0, 32);
        delayMatch142_reg(82) <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        delayMatch142_reg(0) <= delayMatch142_reg_next(0);
        delayMatch142_reg(1) <= delayMatch142_reg_next(1);
        delayMatch142_reg(2) <= delayMatch142_reg_next(2);
        delayMatch142_reg(3) <= delayMatch142_reg_next(3);
        delayMatch142_reg(4) <= delayMatch142_reg_next(4);
        delayMatch142_reg(5) <= delayMatch142_reg_next(5);
        delayMatch142_reg(6) <= delayMatch142_reg_next(6);
        delayMatch142_reg(7) <= delayMatch142_reg_next(7);
        delayMatch142_reg(8) <= delayMatch142_reg_next(8);
        delayMatch142_reg(9) <= delayMatch142_reg_next(9);
        delayMatch142_reg(10) <= delayMatch142_reg_next(10);
        delayMatch142_reg(11) <= delayMatch142_reg_next(11);
        delayMatch142_reg(12) <= delayMatch142_reg_next(12);
        delayMatch142_reg(13) <= delayMatch142_reg_next(13);
        delayMatch142_reg(14) <= delayMatch142_reg_next(14);
        delayMatch142_reg(15) <= delayMatch142_reg_next(15);
        delayMatch142_reg(16) <= delayMatch142_reg_next(16);
        delayMatch142_reg(17) <= delayMatch142_reg_next(17);
        delayMatch142_reg(18) <= delayMatch142_reg_next(18);
        delayMatch142_reg(19) <= delayMatch142_reg_next(19);
        delayMatch142_reg(20) <= delayMatch142_reg_next(20);
        delayMatch142_reg(21) <= delayMatch142_reg_next(21);
        delayMatch142_reg(22) <= delayMatch142_reg_next(22);
        delayMatch142_reg(23) <= delayMatch142_reg_next(23);
        delayMatch142_reg(24) <= delayMatch142_reg_next(24);
        delayMatch142_reg(25) <= delayMatch142_reg_next(25);
        delayMatch142_reg(26) <= delayMatch142_reg_next(26);
        delayMatch142_reg(27) <= delayMatch142_reg_next(27);
        delayMatch142_reg(28) <= delayMatch142_reg_next(28);
        delayMatch142_reg(29) <= delayMatch142_reg_next(29);
        delayMatch142_reg(30) <= delayMatch142_reg_next(30);
        delayMatch142_reg(31) <= delayMatch142_reg_next(31);
        delayMatch142_reg(32) <= delayMatch142_reg_next(32);
        delayMatch142_reg(33) <= delayMatch142_reg_next(33);
        delayMatch142_reg(34) <= delayMatch142_reg_next(34);
        delayMatch142_reg(35) <= delayMatch142_reg_next(35);
        delayMatch142_reg(36) <= delayMatch142_reg_next(36);
        delayMatch142_reg(37) <= delayMatch142_reg_next(37);
        delayMatch142_reg(38) <= delayMatch142_reg_next(38);
        delayMatch142_reg(39) <= delayMatch142_reg_next(39);
        delayMatch142_reg(40) <= delayMatch142_reg_next(40);
        delayMatch142_reg(41) <= delayMatch142_reg_next(41);
        delayMatch142_reg(42) <= delayMatch142_reg_next(42);
        delayMatch142_reg(43) <= delayMatch142_reg_next(43);
        delayMatch142_reg(44) <= delayMatch142_reg_next(44);
        delayMatch142_reg(45) <= delayMatch142_reg_next(45);
        delayMatch142_reg(46) <= delayMatch142_reg_next(46);
        delayMatch142_reg(47) <= delayMatch142_reg_next(47);
        delayMatch142_reg(48) <= delayMatch142_reg_next(48);
        delayMatch142_reg(49) <= delayMatch142_reg_next(49);
        delayMatch142_reg(50) <= delayMatch142_reg_next(50);
        delayMatch142_reg(51) <= delayMatch142_reg_next(51);
        delayMatch142_reg(52) <= delayMatch142_reg_next(52);
        delayMatch142_reg(53) <= delayMatch142_reg_next(53);
        delayMatch142_reg(54) <= delayMatch142_reg_next(54);
        delayMatch142_reg(55) <= delayMatch142_reg_next(55);
        delayMatch142_reg(56) <= delayMatch142_reg_next(56);
        delayMatch142_reg(57) <= delayMatch142_reg_next(57);
        delayMatch142_reg(58) <= delayMatch142_reg_next(58);
        delayMatch142_reg(59) <= delayMatch142_reg_next(59);
        delayMatch142_reg(60) <= delayMatch142_reg_next(60);
        delayMatch142_reg(61) <= delayMatch142_reg_next(61);
        delayMatch142_reg(62) <= delayMatch142_reg_next(62);
        delayMatch142_reg(63) <= delayMatch142_reg_next(63);
        delayMatch142_reg(64) <= delayMatch142_reg_next(64);
        delayMatch142_reg(65) <= delayMatch142_reg_next(65);
        delayMatch142_reg(66) <= delayMatch142_reg_next(66);
        delayMatch142_reg(67) <= delayMatch142_reg_next(67);
        delayMatch142_reg(68) <= delayMatch142_reg_next(68);
        delayMatch142_reg(69) <= delayMatch142_reg_next(69);
        delayMatch142_reg(70) <= delayMatch142_reg_next(70);
        delayMatch142_reg(71) <= delayMatch142_reg_next(71);
        delayMatch142_reg(72) <= delayMatch142_reg_next(72);
        delayMatch142_reg(73) <= delayMatch142_reg_next(73);
        delayMatch142_reg(74) <= delayMatch142_reg_next(74);
        delayMatch142_reg(75) <= delayMatch142_reg_next(75);
        delayMatch142_reg(76) <= delayMatch142_reg_next(76);
        delayMatch142_reg(77) <= delayMatch142_reg_next(77);
        delayMatch142_reg(78) <= delayMatch142_reg_next(78);
        delayMatch142_reg(79) <= delayMatch142_reg_next(79);
        delayMatch142_reg(80) <= delayMatch142_reg_next(80);
        delayMatch142_reg(81) <= delayMatch142_reg_next(81);
        delayMatch142_reg(82) <= delayMatch142_reg_next(82);
      END IF;
    END IF;
  END PROCESS delayMatch142_process;

  Delay59_out1_1 <= delayMatch142_reg(82);
  delayMatch142_reg_next(0) <= Delay59_out1;
  delayMatch142_reg_next(1) <= delayMatch142_reg(0);
  delayMatch142_reg_next(2) <= delayMatch142_reg(1);
  delayMatch142_reg_next(3) <= delayMatch142_reg(2);
  delayMatch142_reg_next(4) <= delayMatch142_reg(3);
  delayMatch142_reg_next(5) <= delayMatch142_reg(4);
  delayMatch142_reg_next(6) <= delayMatch142_reg(5);
  delayMatch142_reg_next(7) <= delayMatch142_reg(6);
  delayMatch142_reg_next(8) <= delayMatch142_reg(7);
  delayMatch142_reg_next(9) <= delayMatch142_reg(8);
  delayMatch142_reg_next(10) <= delayMatch142_reg(9);
  delayMatch142_reg_next(11) <= delayMatch142_reg(10);
  delayMatch142_reg_next(12) <= delayMatch142_reg(11);
  delayMatch142_reg_next(13) <= delayMatch142_reg(12);
  delayMatch142_reg_next(14) <= delayMatch142_reg(13);
  delayMatch142_reg_next(15) <= delayMatch142_reg(14);
  delayMatch142_reg_next(16) <= delayMatch142_reg(15);
  delayMatch142_reg_next(17) <= delayMatch142_reg(16);
  delayMatch142_reg_next(18) <= delayMatch142_reg(17);
  delayMatch142_reg_next(19) <= delayMatch142_reg(18);
  delayMatch142_reg_next(20) <= delayMatch142_reg(19);
  delayMatch142_reg_next(21) <= delayMatch142_reg(20);
  delayMatch142_reg_next(22) <= delayMatch142_reg(21);
  delayMatch142_reg_next(23) <= delayMatch142_reg(22);
  delayMatch142_reg_next(24) <= delayMatch142_reg(23);
  delayMatch142_reg_next(25) <= delayMatch142_reg(24);
  delayMatch142_reg_next(26) <= delayMatch142_reg(25);
  delayMatch142_reg_next(27) <= delayMatch142_reg(26);
  delayMatch142_reg_next(28) <= delayMatch142_reg(27);
  delayMatch142_reg_next(29) <= delayMatch142_reg(28);
  delayMatch142_reg_next(30) <= delayMatch142_reg(29);
  delayMatch142_reg_next(31) <= delayMatch142_reg(30);
  delayMatch142_reg_next(32) <= delayMatch142_reg(31);
  delayMatch142_reg_next(33) <= delayMatch142_reg(32);
  delayMatch142_reg_next(34) <= delayMatch142_reg(33);
  delayMatch142_reg_next(35) <= delayMatch142_reg(34);
  delayMatch142_reg_next(36) <= delayMatch142_reg(35);
  delayMatch142_reg_next(37) <= delayMatch142_reg(36);
  delayMatch142_reg_next(38) <= delayMatch142_reg(37);
  delayMatch142_reg_next(39) <= delayMatch142_reg(38);
  delayMatch142_reg_next(40) <= delayMatch142_reg(39);
  delayMatch142_reg_next(41) <= delayMatch142_reg(40);
  delayMatch142_reg_next(42) <= delayMatch142_reg(41);
  delayMatch142_reg_next(43) <= delayMatch142_reg(42);
  delayMatch142_reg_next(44) <= delayMatch142_reg(43);
  delayMatch142_reg_next(45) <= delayMatch142_reg(44);
  delayMatch142_reg_next(46) <= delayMatch142_reg(45);
  delayMatch142_reg_next(47) <= delayMatch142_reg(46);
  delayMatch142_reg_next(48) <= delayMatch142_reg(47);
  delayMatch142_reg_next(49) <= delayMatch142_reg(48);
  delayMatch142_reg_next(50) <= delayMatch142_reg(49);
  delayMatch142_reg_next(51) <= delayMatch142_reg(50);
  delayMatch142_reg_next(52) <= delayMatch142_reg(51);
  delayMatch142_reg_next(53) <= delayMatch142_reg(52);
  delayMatch142_reg_next(54) <= delayMatch142_reg(53);
  delayMatch142_reg_next(55) <= delayMatch142_reg(54);
  delayMatch142_reg_next(56) <= delayMatch142_reg(55);
  delayMatch142_reg_next(57) <= delayMatch142_reg(56);
  delayMatch142_reg_next(58) <= delayMatch142_reg(57);
  delayMatch142_reg_next(59) <= delayMatch142_reg(58);
  delayMatch142_reg_next(60) <= delayMatch142_reg(59);
  delayMatch142_reg_next(61) <= delayMatch142_reg(60);
  delayMatch142_reg_next(62) <= delayMatch142_reg(61);
  delayMatch142_reg_next(63) <= delayMatch142_reg(62);
  delayMatch142_reg_next(64) <= delayMatch142_reg(63);
  delayMatch142_reg_next(65) <= delayMatch142_reg(64);
  delayMatch142_reg_next(66) <= delayMatch142_reg(65);
  delayMatch142_reg_next(67) <= delayMatch142_reg(66);
  delayMatch142_reg_next(68) <= delayMatch142_reg(67);
  delayMatch142_reg_next(69) <= delayMatch142_reg(68);
  delayMatch142_reg_next(70) <= delayMatch142_reg(69);
  delayMatch142_reg_next(71) <= delayMatch142_reg(70);
  delayMatch142_reg_next(72) <= delayMatch142_reg(71);
  delayMatch142_reg_next(73) <= delayMatch142_reg(72);
  delayMatch142_reg_next(74) <= delayMatch142_reg(73);
  delayMatch142_reg_next(75) <= delayMatch142_reg(74);
  delayMatch142_reg_next(76) <= delayMatch142_reg(75);
  delayMatch142_reg_next(77) <= delayMatch142_reg(76);
  delayMatch142_reg_next(78) <= delayMatch142_reg(77);
  delayMatch142_reg_next(79) <= delayMatch142_reg(78);
  delayMatch142_reg_next(80) <= delayMatch142_reg(79);
  delayMatch142_reg_next(81) <= delayMatch142_reg(80);
  delayMatch142_reg_next(82) <= delayMatch142_reg(81);

  Index <= std_logic_vector(Delay59_out1_1);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= '0';
        reduced_reg(1) <= '0';
        reduced_reg(2) <= '0';
        reduced_reg(3) <= '0';
        reduced_reg(4) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  End_Cycle_3 <= reduced_reg(4);
  reduced_reg_next(0) <= End_Cycle_1;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);

  End_Cycle_4 <= End_Cycle_3;

  
  switch_compare_1 <= '1' WHEN End_Cycle_4 = '1' ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch2_reg(0) <= '0';
        delayMatch2_reg(1) <= '0';
        delayMatch2_reg(2) <= '0';
        delayMatch2_reg(3) <= '0';
        delayMatch2_reg(4) <= '0';
        delayMatch2_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_2 <= delayMatch2_reg(5);
  delayMatch2_reg_next(0) <= stateControl_1;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);

  dqxy_phase_voltage_per_switching_state_0_1 <= signed(dqxy_phase_voltage_per_switching_state_0);

  Delay136_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay136_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay136_out1 <= dqxy_phase_voltage_per_switching_state_0_1;
      END IF;
    END IF;
  END PROCESS Delay136_process;


  
  Switch_on90_out1_1 <= Delay135_out1 WHEN stateControl_2 = '0' ELSE
      Switch_on90_out1;

  Delay135_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay135_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay135_out1 <= Switch_on90_out1_1;
      END IF;
    END IF;
  END PROCESS Delay135_process;


  
  Switch_on90_out1 <= Delay135_out1 WHEN switch_compare_1 = '0' ELSE
      Data_Type_Conversion85_out1;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_3 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg(0) <= '0';
        delayMatch4_reg(1) <= '0';
        delayMatch4_reg(2) <= '0';
        delayMatch4_reg(3) <= '0';
        delayMatch4_reg(4) <= '0';
        delayMatch4_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
        delayMatch4_reg(2) <= delayMatch4_reg_next(2);
        delayMatch4_reg(3) <= delayMatch4_reg_next(3);
        delayMatch4_reg(4) <= delayMatch4_reg_next(4);
        delayMatch4_reg(5) <= delayMatch4_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  stateControl_4 <= delayMatch4_reg(5);
  delayMatch4_reg_next(0) <= stateControl_3;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);
  delayMatch4_reg_next(2) <= delayMatch4_reg(1);
  delayMatch4_reg_next(3) <= delayMatch4_reg(2);
  delayMatch4_reg_next(4) <= delayMatch4_reg(3);
  delayMatch4_reg_next(5) <= delayMatch4_reg(4);

  dqxy_phase_voltage_per_switching_state_1_1 <= signed(dqxy_phase_voltage_per_switching_state_1);

  Delay137_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay137_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay137_out1 <= dqxy_phase_voltage_per_switching_state_1_1;
      END IF;
    END IF;
  END PROCESS Delay137_process;


  
  Switch_on89_out1_1 <= Delay134_out1 WHEN stateControl_4 = '0' ELSE
      Switch_on89_out1;

  Delay134_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay134_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay134_out1 <= Switch_on89_out1_1;
      END IF;
    END IF;
  END PROCESS Delay134_process;


  
  Switch_on89_out1 <= Delay134_out1 WHEN switch_compare_1_1 = '0' ELSE
      Data_Type_Conversion84_out1;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_5 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= '0';
        delayMatch6_reg(1) <= '0';
        delayMatch6_reg(2) <= '0';
        delayMatch6_reg(3) <= '0';
        delayMatch6_reg(4) <= '0';
        delayMatch6_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  stateControl_6 <= delayMatch6_reg(5);
  delayMatch6_reg_next(0) <= stateControl_5;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);
  delayMatch6_reg_next(5) <= delayMatch6_reg(4);

  dqxy_phase_voltage_per_switching_state_2_1 <= signed(dqxy_phase_voltage_per_switching_state_2);

  Delay138_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay138_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay138_out1 <= dqxy_phase_voltage_per_switching_state_2_1;
      END IF;
    END IF;
  END PROCESS Delay138_process;


  
  Switch_on88_out1_1 <= Delay133_out1 WHEN stateControl_6 = '0' ELSE
      Switch_on88_out1;

  Delay133_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay133_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay133_out1 <= Switch_on88_out1_1;
      END IF;
    END IF;
  END PROCESS Delay133_process;


  
  Switch_on88_out1 <= Delay133_out1 WHEN switch_compare_1_2 = '0' ELSE
      Data_Type_Conversion83_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_7 <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg(0) <= '0';
        delayMatch8_reg(1) <= '0';
        delayMatch8_reg(2) <= '0';
        delayMatch8_reg(3) <= '0';
        delayMatch8_reg(4) <= '0';
        delayMatch8_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
        delayMatch8_reg(2) <= delayMatch8_reg_next(2);
        delayMatch8_reg(3) <= delayMatch8_reg_next(3);
        delayMatch8_reg(4) <= delayMatch8_reg_next(4);
        delayMatch8_reg(5) <= delayMatch8_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  stateControl_8 <= delayMatch8_reg(5);
  delayMatch8_reg_next(0) <= stateControl_7;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);
  delayMatch8_reg_next(2) <= delayMatch8_reg(1);
  delayMatch8_reg_next(3) <= delayMatch8_reg(2);
  delayMatch8_reg_next(4) <= delayMatch8_reg(3);
  delayMatch8_reg_next(5) <= delayMatch8_reg(4);

  dqxy_phase_voltage_per_switching_state_3_1 <= signed(dqxy_phase_voltage_per_switching_state_3);

  Delay139_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay139_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay139_out1 <= dqxy_phase_voltage_per_switching_state_3_1;
      END IF;
    END IF;
  END PROCESS Delay139_process;


  
  Switch_on87_out1_1 <= Delay132_out1 WHEN stateControl_8 = '0' ELSE
      Switch_on87_out1;

  Delay132_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay132_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay132_out1 <= Switch_on87_out1_1;
      END IF;
    END IF;
  END PROCESS Delay132_process;


  
  Switch_on87_out1 <= Delay132_out1 WHEN switch_compare_1_3 = '0' ELSE
      Data_Type_Conversion82_out1;

  
  switch_compare_1_4 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_9 <= '1';

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch10_reg(0) <= '0';
        delayMatch10_reg(1) <= '0';
        delayMatch10_reg(2) <= '0';
        delayMatch10_reg(3) <= '0';
        delayMatch10_reg(4) <= '0';
        delayMatch10_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch10_reg(0) <= delayMatch10_reg_next(0);
        delayMatch10_reg(1) <= delayMatch10_reg_next(1);
        delayMatch10_reg(2) <= delayMatch10_reg_next(2);
        delayMatch10_reg(3) <= delayMatch10_reg_next(3);
        delayMatch10_reg(4) <= delayMatch10_reg_next(4);
        delayMatch10_reg(5) <= delayMatch10_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  stateControl_10 <= delayMatch10_reg(5);
  delayMatch10_reg_next(0) <= stateControl_9;
  delayMatch10_reg_next(1) <= delayMatch10_reg(0);
  delayMatch10_reg_next(2) <= delayMatch10_reg(1);
  delayMatch10_reg_next(3) <= delayMatch10_reg(2);
  delayMatch10_reg_next(4) <= delayMatch10_reg(3);
  delayMatch10_reg_next(5) <= delayMatch10_reg(4);

  dqxy_phase_voltage_per_switching_state_4_1 <= signed(dqxy_phase_voltage_per_switching_state_4);

  Delay140_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay140_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay140_out1 <= dqxy_phase_voltage_per_switching_state_4_1;
      END IF;
    END IF;
  END PROCESS Delay140_process;


  
  Switch_on86_out1_1 <= Delay131_out1 WHEN stateControl_10 = '0' ELSE
      Switch_on86_out1;

  Delay131_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay131_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay131_out1 <= Switch_on86_out1_1;
      END IF;
    END IF;
  END PROCESS Delay131_process;


  
  Switch_on86_out1 <= Delay131_out1 WHEN switch_compare_1_4 = '0' ELSE
      Data_Type_Conversion81_out1;

  
  switch_compare_1_5 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_11 <= '1';

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch12_reg(0) <= '0';
        delayMatch12_reg(1) <= '0';
        delayMatch12_reg(2) <= '0';
        delayMatch12_reg(3) <= '0';
        delayMatch12_reg(4) <= '0';
        delayMatch12_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch12_reg(0) <= delayMatch12_reg_next(0);
        delayMatch12_reg(1) <= delayMatch12_reg_next(1);
        delayMatch12_reg(2) <= delayMatch12_reg_next(2);
        delayMatch12_reg(3) <= delayMatch12_reg_next(3);
        delayMatch12_reg(4) <= delayMatch12_reg_next(4);
        delayMatch12_reg(5) <= delayMatch12_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  stateControl_12 <= delayMatch12_reg(5);
  delayMatch12_reg_next(0) <= stateControl_11;
  delayMatch12_reg_next(1) <= delayMatch12_reg(0);
  delayMatch12_reg_next(2) <= delayMatch12_reg(1);
  delayMatch12_reg_next(3) <= delayMatch12_reg(2);
  delayMatch12_reg_next(4) <= delayMatch12_reg(3);
  delayMatch12_reg_next(5) <= delayMatch12_reg(4);

  dqxy_phase_voltage_per_switching_state_5_1 <= signed(dqxy_phase_voltage_per_switching_state_5);

  Delay141_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay141_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay141_out1 <= dqxy_phase_voltage_per_switching_state_5_1;
      END IF;
    END IF;
  END PROCESS Delay141_process;


  
  Switch_on85_out1_1 <= Delay130_out1 WHEN stateControl_12 = '0' ELSE
      Switch_on85_out1;

  Delay130_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay130_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay130_out1 <= Switch_on85_out1_1;
      END IF;
    END IF;
  END PROCESS Delay130_process;


  
  Switch_on85_out1 <= Delay130_out1 WHEN switch_compare_1_5 = '0' ELSE
      Data_Type_Conversion80_out1;

  
  switch_compare_1_6 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_13 <= '1';

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch14_reg(0) <= '0';
        delayMatch14_reg(1) <= '0';
        delayMatch14_reg(2) <= '0';
        delayMatch14_reg(3) <= '0';
        delayMatch14_reg(4) <= '0';
        delayMatch14_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
        delayMatch14_reg(3) <= delayMatch14_reg_next(3);
        delayMatch14_reg(4) <= delayMatch14_reg_next(4);
        delayMatch14_reg(5) <= delayMatch14_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  stateControl_14 <= delayMatch14_reg(5);
  delayMatch14_reg_next(0) <= stateControl_13;
  delayMatch14_reg_next(1) <= delayMatch14_reg(0);
  delayMatch14_reg_next(2) <= delayMatch14_reg(1);
  delayMatch14_reg_next(3) <= delayMatch14_reg(2);
  delayMatch14_reg_next(4) <= delayMatch14_reg(3);
  delayMatch14_reg_next(5) <= delayMatch14_reg(4);

  dqxy_phase_voltage_per_switching_state_6_1 <= signed(dqxy_phase_voltage_per_switching_state_6);

  Delay142_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay142_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay142_out1 <= dqxy_phase_voltage_per_switching_state_6_1;
      END IF;
    END IF;
  END PROCESS Delay142_process;


  
  Switch_on84_out1_1 <= Delay129_out1 WHEN stateControl_14 = '0' ELSE
      Switch_on84_out1;

  Delay129_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay129_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay129_out1 <= Switch_on84_out1_1;
      END IF;
    END IF;
  END PROCESS Delay129_process;


  
  Switch_on84_out1 <= Delay129_out1 WHEN switch_compare_1_6 = '0' ELSE
      Data_Type_Conversion79_out1;

  
  switch_compare_1_7 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_15 <= '1';

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch16_reg(0) <= '0';
        delayMatch16_reg(1) <= '0';
        delayMatch16_reg(2) <= '0';
        delayMatch16_reg(3) <= '0';
        delayMatch16_reg(4) <= '0';
        delayMatch16_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch16_reg(0) <= delayMatch16_reg_next(0);
        delayMatch16_reg(1) <= delayMatch16_reg_next(1);
        delayMatch16_reg(2) <= delayMatch16_reg_next(2);
        delayMatch16_reg(3) <= delayMatch16_reg_next(3);
        delayMatch16_reg(4) <= delayMatch16_reg_next(4);
        delayMatch16_reg(5) <= delayMatch16_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  stateControl_16 <= delayMatch16_reg(5);
  delayMatch16_reg_next(0) <= stateControl_15;
  delayMatch16_reg_next(1) <= delayMatch16_reg(0);
  delayMatch16_reg_next(2) <= delayMatch16_reg(1);
  delayMatch16_reg_next(3) <= delayMatch16_reg(2);
  delayMatch16_reg_next(4) <= delayMatch16_reg(3);
  delayMatch16_reg_next(5) <= delayMatch16_reg(4);

  dqxy_phase_voltage_per_switching_state_7_1 <= signed(dqxy_phase_voltage_per_switching_state_7);

  Delay143_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay143_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay143_out1 <= dqxy_phase_voltage_per_switching_state_7_1;
      END IF;
    END IF;
  END PROCESS Delay143_process;


  
  Switch_on83_out1_1 <= Delay128_out1 WHEN stateControl_16 = '0' ELSE
      Switch_on83_out1;

  Delay128_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay128_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay128_out1 <= Switch_on83_out1_1;
      END IF;
    END IF;
  END PROCESS Delay128_process;


  
  Switch_on83_out1 <= Delay128_out1 WHEN switch_compare_1_7 = '0' ELSE
      Data_Type_Conversion78_out1;

  
  switch_compare_1_8 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_17 <= '1';

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch18_reg(0) <= '0';
        delayMatch18_reg(1) <= '0';
        delayMatch18_reg(2) <= '0';
        delayMatch18_reg(3) <= '0';
        delayMatch18_reg(4) <= '0';
        delayMatch18_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch18_reg(0) <= delayMatch18_reg_next(0);
        delayMatch18_reg(1) <= delayMatch18_reg_next(1);
        delayMatch18_reg(2) <= delayMatch18_reg_next(2);
        delayMatch18_reg(3) <= delayMatch18_reg_next(3);
        delayMatch18_reg(4) <= delayMatch18_reg_next(4);
        delayMatch18_reg(5) <= delayMatch18_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  stateControl_18 <= delayMatch18_reg(5);
  delayMatch18_reg_next(0) <= stateControl_17;
  delayMatch18_reg_next(1) <= delayMatch18_reg(0);
  delayMatch18_reg_next(2) <= delayMatch18_reg(1);
  delayMatch18_reg_next(3) <= delayMatch18_reg(2);
  delayMatch18_reg_next(4) <= delayMatch18_reg(3);
  delayMatch18_reg_next(5) <= delayMatch18_reg(4);

  dqxy_phase_voltage_per_switching_state_8_1 <= signed(dqxy_phase_voltage_per_switching_state_8);

  Delay144_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay144_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay144_out1 <= dqxy_phase_voltage_per_switching_state_8_1;
      END IF;
    END IF;
  END PROCESS Delay144_process;


  
  Switch_on82_out1_1 <= Delay127_out1 WHEN stateControl_18 = '0' ELSE
      Switch_on82_out1;

  Delay127_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay127_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay127_out1 <= Switch_on82_out1_1;
      END IF;
    END IF;
  END PROCESS Delay127_process;


  
  Switch_on82_out1 <= Delay127_out1 WHEN switch_compare_1_8 = '0' ELSE
      Data_Type_Conversion77_out1;

  
  switch_compare_1_9 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_19 <= '1';

  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch20_reg(0) <= '0';
        delayMatch20_reg(1) <= '0';
        delayMatch20_reg(2) <= '0';
        delayMatch20_reg(3) <= '0';
        delayMatch20_reg(4) <= '0';
        delayMatch20_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch20_reg(0) <= delayMatch20_reg_next(0);
        delayMatch20_reg(1) <= delayMatch20_reg_next(1);
        delayMatch20_reg(2) <= delayMatch20_reg_next(2);
        delayMatch20_reg(3) <= delayMatch20_reg_next(3);
        delayMatch20_reg(4) <= delayMatch20_reg_next(4);
        delayMatch20_reg(5) <= delayMatch20_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch20_process;

  stateControl_20 <= delayMatch20_reg(5);
  delayMatch20_reg_next(0) <= stateControl_19;
  delayMatch20_reg_next(1) <= delayMatch20_reg(0);
  delayMatch20_reg_next(2) <= delayMatch20_reg(1);
  delayMatch20_reg_next(3) <= delayMatch20_reg(2);
  delayMatch20_reg_next(4) <= delayMatch20_reg(3);
  delayMatch20_reg_next(5) <= delayMatch20_reg(4);

  dqxy_phase_voltage_per_switching_state_9_1 <= signed(dqxy_phase_voltage_per_switching_state_9);

  Delay145_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay145_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay145_out1 <= dqxy_phase_voltage_per_switching_state_9_1;
      END IF;
    END IF;
  END PROCESS Delay145_process;


  
  Switch_on81_out1_1 <= Delay126_out1 WHEN stateControl_20 = '0' ELSE
      Switch_on81_out1;

  Delay126_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay126_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay126_out1 <= Switch_on81_out1_1;
      END IF;
    END IF;
  END PROCESS Delay126_process;


  
  Switch_on81_out1 <= Delay126_out1 WHEN switch_compare_1_9 = '0' ELSE
      Data_Type_Conversion76_out1;

  
  switch_compare_1_10 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_21 <= '1';

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch22_reg(0) <= '0';
        delayMatch22_reg(1) <= '0';
        delayMatch22_reg(2) <= '0';
        delayMatch22_reg(3) <= '0';
        delayMatch22_reg(4) <= '0';
        delayMatch22_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch22_reg(0) <= delayMatch22_reg_next(0);
        delayMatch22_reg(1) <= delayMatch22_reg_next(1);
        delayMatch22_reg(2) <= delayMatch22_reg_next(2);
        delayMatch22_reg(3) <= delayMatch22_reg_next(3);
        delayMatch22_reg(4) <= delayMatch22_reg_next(4);
        delayMatch22_reg(5) <= delayMatch22_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch22_process;

  stateControl_22 <= delayMatch22_reg(5);
  delayMatch22_reg_next(0) <= stateControl_21;
  delayMatch22_reg_next(1) <= delayMatch22_reg(0);
  delayMatch22_reg_next(2) <= delayMatch22_reg(1);
  delayMatch22_reg_next(3) <= delayMatch22_reg(2);
  delayMatch22_reg_next(4) <= delayMatch22_reg(3);
  delayMatch22_reg_next(5) <= delayMatch22_reg(4);

  dqxy_phase_voltage_per_switching_state_10_1 <= signed(dqxy_phase_voltage_per_switching_state_10);

  Delay146_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay146_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay146_out1 <= dqxy_phase_voltage_per_switching_state_10_1;
      END IF;
    END IF;
  END PROCESS Delay146_process;


  
  Switch_on80_out1_1 <= Delay125_out1 WHEN stateControl_22 = '0' ELSE
      Switch_on80_out1;

  Delay125_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay125_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay125_out1 <= Switch_on80_out1_1;
      END IF;
    END IF;
  END PROCESS Delay125_process;


  
  Switch_on80_out1 <= Delay125_out1 WHEN switch_compare_1_10 = '0' ELSE
      Data_Type_Conversion75_out1;

  
  switch_compare_1_11 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_23 <= '1';

  delayMatch24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch24_reg(0) <= '0';
        delayMatch24_reg(1) <= '0';
        delayMatch24_reg(2) <= '0';
        delayMatch24_reg(3) <= '0';
        delayMatch24_reg(4) <= '0';
        delayMatch24_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch24_reg(0) <= delayMatch24_reg_next(0);
        delayMatch24_reg(1) <= delayMatch24_reg_next(1);
        delayMatch24_reg(2) <= delayMatch24_reg_next(2);
        delayMatch24_reg(3) <= delayMatch24_reg_next(3);
        delayMatch24_reg(4) <= delayMatch24_reg_next(4);
        delayMatch24_reg(5) <= delayMatch24_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch24_process;

  stateControl_24 <= delayMatch24_reg(5);
  delayMatch24_reg_next(0) <= stateControl_23;
  delayMatch24_reg_next(1) <= delayMatch24_reg(0);
  delayMatch24_reg_next(2) <= delayMatch24_reg(1);
  delayMatch24_reg_next(3) <= delayMatch24_reg(2);
  delayMatch24_reg_next(4) <= delayMatch24_reg(3);
  delayMatch24_reg_next(5) <= delayMatch24_reg(4);

  dqxy_phase_voltage_per_switching_state_11_1 <= signed(dqxy_phase_voltage_per_switching_state_11);

  Delay147_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay147_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay147_out1 <= dqxy_phase_voltage_per_switching_state_11_1;
      END IF;
    END IF;
  END PROCESS Delay147_process;


  
  Switch_on79_out1_1 <= Delay124_out1 WHEN stateControl_24 = '0' ELSE
      Switch_on79_out1;

  Delay124_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay124_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay124_out1 <= Switch_on79_out1_1;
      END IF;
    END IF;
  END PROCESS Delay124_process;


  
  Switch_on79_out1 <= Delay124_out1 WHEN switch_compare_1_11 = '0' ELSE
      Data_Type_Conversion74_out1;

  
  switch_compare_1_12 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_25 <= '1';

  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_reg(0) <= '0';
        delayMatch26_reg(1) <= '0';
        delayMatch26_reg(2) <= '0';
        delayMatch26_reg(3) <= '0';
        delayMatch26_reg(4) <= '0';
        delayMatch26_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch26_reg(0) <= delayMatch26_reg_next(0);
        delayMatch26_reg(1) <= delayMatch26_reg_next(1);
        delayMatch26_reg(2) <= delayMatch26_reg_next(2);
        delayMatch26_reg(3) <= delayMatch26_reg_next(3);
        delayMatch26_reg(4) <= delayMatch26_reg_next(4);
        delayMatch26_reg(5) <= delayMatch26_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch26_process;

  stateControl_26 <= delayMatch26_reg(5);
  delayMatch26_reg_next(0) <= stateControl_25;
  delayMatch26_reg_next(1) <= delayMatch26_reg(0);
  delayMatch26_reg_next(2) <= delayMatch26_reg(1);
  delayMatch26_reg_next(3) <= delayMatch26_reg(2);
  delayMatch26_reg_next(4) <= delayMatch26_reg(3);
  delayMatch26_reg_next(5) <= delayMatch26_reg(4);

  dqxy_phase_voltage_per_switching_state_12_1 <= signed(dqxy_phase_voltage_per_switching_state_12);

  Delay148_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay148_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay148_out1 <= dqxy_phase_voltage_per_switching_state_12_1;
      END IF;
    END IF;
  END PROCESS Delay148_process;


  
  Switch_on78_out1_1 <= Delay123_out1 WHEN stateControl_26 = '0' ELSE
      Switch_on78_out1;

  Delay123_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay123_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay123_out1 <= Switch_on78_out1_1;
      END IF;
    END IF;
  END PROCESS Delay123_process;


  
  Switch_on78_out1 <= Delay123_out1 WHEN switch_compare_1_12 = '0' ELSE
      Data_Type_Conversion73_out1;

  
  switch_compare_1_13 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_27 <= '1';

  delayMatch28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch28_reg(0) <= '0';
        delayMatch28_reg(1) <= '0';
        delayMatch28_reg(2) <= '0';
        delayMatch28_reg(3) <= '0';
        delayMatch28_reg(4) <= '0';
        delayMatch28_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch28_reg(0) <= delayMatch28_reg_next(0);
        delayMatch28_reg(1) <= delayMatch28_reg_next(1);
        delayMatch28_reg(2) <= delayMatch28_reg_next(2);
        delayMatch28_reg(3) <= delayMatch28_reg_next(3);
        delayMatch28_reg(4) <= delayMatch28_reg_next(4);
        delayMatch28_reg(5) <= delayMatch28_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch28_process;

  stateControl_28 <= delayMatch28_reg(5);
  delayMatch28_reg_next(0) <= stateControl_27;
  delayMatch28_reg_next(1) <= delayMatch28_reg(0);
  delayMatch28_reg_next(2) <= delayMatch28_reg(1);
  delayMatch28_reg_next(3) <= delayMatch28_reg(2);
  delayMatch28_reg_next(4) <= delayMatch28_reg(3);
  delayMatch28_reg_next(5) <= delayMatch28_reg(4);

  dqxy_phase_voltage_per_switching_state_13_1 <= signed(dqxy_phase_voltage_per_switching_state_13);

  Delay149_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay149_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay149_out1 <= dqxy_phase_voltage_per_switching_state_13_1;
      END IF;
    END IF;
  END PROCESS Delay149_process;


  
  Switch_on77_out1_1 <= Delay122_out1 WHEN stateControl_28 = '0' ELSE
      Switch_on77_out1;

  Delay122_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay122_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay122_out1 <= Switch_on77_out1_1;
      END IF;
    END IF;
  END PROCESS Delay122_process;


  
  Switch_on77_out1 <= Delay122_out1 WHEN switch_compare_1_13 = '0' ELSE
      Data_Type_Conversion72_out1;

  
  switch_compare_1_14 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_29 <= '1';

  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch30_reg(0) <= '0';
        delayMatch30_reg(1) <= '0';
        delayMatch30_reg(2) <= '0';
        delayMatch30_reg(3) <= '0';
        delayMatch30_reg(4) <= '0';
        delayMatch30_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch30_reg(0) <= delayMatch30_reg_next(0);
        delayMatch30_reg(1) <= delayMatch30_reg_next(1);
        delayMatch30_reg(2) <= delayMatch30_reg_next(2);
        delayMatch30_reg(3) <= delayMatch30_reg_next(3);
        delayMatch30_reg(4) <= delayMatch30_reg_next(4);
        delayMatch30_reg(5) <= delayMatch30_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch30_process;

  stateControl_30 <= delayMatch30_reg(5);
  delayMatch30_reg_next(0) <= stateControl_29;
  delayMatch30_reg_next(1) <= delayMatch30_reg(0);
  delayMatch30_reg_next(2) <= delayMatch30_reg(1);
  delayMatch30_reg_next(3) <= delayMatch30_reg(2);
  delayMatch30_reg_next(4) <= delayMatch30_reg(3);
  delayMatch30_reg_next(5) <= delayMatch30_reg(4);

  dqxy_phase_voltage_per_switching_state_14_1 <= signed(dqxy_phase_voltage_per_switching_state_14);

  Delay150_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay150_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay150_out1 <= dqxy_phase_voltage_per_switching_state_14_1;
      END IF;
    END IF;
  END PROCESS Delay150_process;


  
  Switch_on76_out1_1 <= Delay121_out1 WHEN stateControl_30 = '0' ELSE
      Switch_on76_out1;

  Delay121_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay121_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay121_out1 <= Switch_on76_out1_1;
      END IF;
    END IF;
  END PROCESS Delay121_process;


  
  Switch_on76_out1 <= Delay121_out1 WHEN switch_compare_1_14 = '0' ELSE
      Data_Type_Conversion71_out1;

  
  switch_compare_1_15 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_31 <= '1';

  delayMatch32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch32_reg(0) <= '0';
        delayMatch32_reg(1) <= '0';
        delayMatch32_reg(2) <= '0';
        delayMatch32_reg(3) <= '0';
        delayMatch32_reg(4) <= '0';
        delayMatch32_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch32_reg(0) <= delayMatch32_reg_next(0);
        delayMatch32_reg(1) <= delayMatch32_reg_next(1);
        delayMatch32_reg(2) <= delayMatch32_reg_next(2);
        delayMatch32_reg(3) <= delayMatch32_reg_next(3);
        delayMatch32_reg(4) <= delayMatch32_reg_next(4);
        delayMatch32_reg(5) <= delayMatch32_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch32_process;

  stateControl_32 <= delayMatch32_reg(5);
  delayMatch32_reg_next(0) <= stateControl_31;
  delayMatch32_reg_next(1) <= delayMatch32_reg(0);
  delayMatch32_reg_next(2) <= delayMatch32_reg(1);
  delayMatch32_reg_next(3) <= delayMatch32_reg(2);
  delayMatch32_reg_next(4) <= delayMatch32_reg(3);
  delayMatch32_reg_next(5) <= delayMatch32_reg(4);

  dqxy_phase_voltage_per_switching_state_15_1 <= signed(dqxy_phase_voltage_per_switching_state_15);

  Delay151_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay151_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay151_out1 <= dqxy_phase_voltage_per_switching_state_15_1;
      END IF;
    END IF;
  END PROCESS Delay151_process;


  
  Switch_on75_out1_1 <= Delay120_out1 WHEN stateControl_32 = '0' ELSE
      Switch_on75_out1;

  Delay120_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay120_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay120_out1 <= Switch_on75_out1_1;
      END IF;
    END IF;
  END PROCESS Delay120_process;


  
  Switch_on75_out1 <= Delay120_out1 WHEN switch_compare_1_15 = '0' ELSE
      Data_Type_Conversion70_out1;

  
  switch_compare_1_16 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_33 <= '1';

  delayMatch34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch34_reg(0) <= '0';
        delayMatch34_reg(1) <= '0';
        delayMatch34_reg(2) <= '0';
        delayMatch34_reg(3) <= '0';
        delayMatch34_reg(4) <= '0';
        delayMatch34_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch34_reg(0) <= delayMatch34_reg_next(0);
        delayMatch34_reg(1) <= delayMatch34_reg_next(1);
        delayMatch34_reg(2) <= delayMatch34_reg_next(2);
        delayMatch34_reg(3) <= delayMatch34_reg_next(3);
        delayMatch34_reg(4) <= delayMatch34_reg_next(4);
        delayMatch34_reg(5) <= delayMatch34_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch34_process;

  stateControl_34 <= delayMatch34_reg(5);
  delayMatch34_reg_next(0) <= stateControl_33;
  delayMatch34_reg_next(1) <= delayMatch34_reg(0);
  delayMatch34_reg_next(2) <= delayMatch34_reg(1);
  delayMatch34_reg_next(3) <= delayMatch34_reg(2);
  delayMatch34_reg_next(4) <= delayMatch34_reg(3);
  delayMatch34_reg_next(5) <= delayMatch34_reg(4);

  dqxy_phase_voltage_per_switching_state_16_1 <= signed(dqxy_phase_voltage_per_switching_state_16);

  Delay152_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay152_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay152_out1 <= dqxy_phase_voltage_per_switching_state_16_1;
      END IF;
    END IF;
  END PROCESS Delay152_process;


  
  Switch_on74_out1_1 <= Delay119_out1 WHEN stateControl_34 = '0' ELSE
      Switch_on74_out1;

  Delay119_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay119_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay119_out1 <= Switch_on74_out1_1;
      END IF;
    END IF;
  END PROCESS Delay119_process;


  
  Switch_on74_out1 <= Delay119_out1 WHEN switch_compare_1_16 = '0' ELSE
      Data_Type_Conversion69_out1;

  
  switch_compare_1_17 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_35 <= '1';

  delayMatch36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch36_reg(0) <= '0';
        delayMatch36_reg(1) <= '0';
        delayMatch36_reg(2) <= '0';
        delayMatch36_reg(3) <= '0';
        delayMatch36_reg(4) <= '0';
        delayMatch36_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch36_reg(0) <= delayMatch36_reg_next(0);
        delayMatch36_reg(1) <= delayMatch36_reg_next(1);
        delayMatch36_reg(2) <= delayMatch36_reg_next(2);
        delayMatch36_reg(3) <= delayMatch36_reg_next(3);
        delayMatch36_reg(4) <= delayMatch36_reg_next(4);
        delayMatch36_reg(5) <= delayMatch36_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch36_process;

  stateControl_36 <= delayMatch36_reg(5);
  delayMatch36_reg_next(0) <= stateControl_35;
  delayMatch36_reg_next(1) <= delayMatch36_reg(0);
  delayMatch36_reg_next(2) <= delayMatch36_reg(1);
  delayMatch36_reg_next(3) <= delayMatch36_reg(2);
  delayMatch36_reg_next(4) <= delayMatch36_reg(3);
  delayMatch36_reg_next(5) <= delayMatch36_reg(4);

  dqxy_phase_voltage_per_switching_state_17_1 <= signed(dqxy_phase_voltage_per_switching_state_17);

  Delay153_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay153_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay153_out1 <= dqxy_phase_voltage_per_switching_state_17_1;
      END IF;
    END IF;
  END PROCESS Delay153_process;


  
  Switch_on73_out1_1 <= Delay118_out1 WHEN stateControl_36 = '0' ELSE
      Switch_on73_out1;

  Delay118_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay118_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay118_out1 <= Switch_on73_out1_1;
      END IF;
    END IF;
  END PROCESS Delay118_process;


  
  Switch_on73_out1 <= Delay118_out1 WHEN switch_compare_1_17 = '0' ELSE
      Data_Type_Conversion68_out1;

  
  switch_compare_1_18 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_37 <= '1';

  delayMatch38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch38_reg(0) <= '0';
        delayMatch38_reg(1) <= '0';
        delayMatch38_reg(2) <= '0';
        delayMatch38_reg(3) <= '0';
        delayMatch38_reg(4) <= '0';
        delayMatch38_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch38_reg(0) <= delayMatch38_reg_next(0);
        delayMatch38_reg(1) <= delayMatch38_reg_next(1);
        delayMatch38_reg(2) <= delayMatch38_reg_next(2);
        delayMatch38_reg(3) <= delayMatch38_reg_next(3);
        delayMatch38_reg(4) <= delayMatch38_reg_next(4);
        delayMatch38_reg(5) <= delayMatch38_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch38_process;

  stateControl_38 <= delayMatch38_reg(5);
  delayMatch38_reg_next(0) <= stateControl_37;
  delayMatch38_reg_next(1) <= delayMatch38_reg(0);
  delayMatch38_reg_next(2) <= delayMatch38_reg(1);
  delayMatch38_reg_next(3) <= delayMatch38_reg(2);
  delayMatch38_reg_next(4) <= delayMatch38_reg(3);
  delayMatch38_reg_next(5) <= delayMatch38_reg(4);

  dqxy_phase_voltage_per_switching_state_18_1 <= signed(dqxy_phase_voltage_per_switching_state_18);

  Delay154_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay154_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay154_out1 <= dqxy_phase_voltage_per_switching_state_18_1;
      END IF;
    END IF;
  END PROCESS Delay154_process;


  
  Switch_on72_out1_1 <= Delay117_out1 WHEN stateControl_38 = '0' ELSE
      Switch_on72_out1;

  Delay117_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay117_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay117_out1 <= Switch_on72_out1_1;
      END IF;
    END IF;
  END PROCESS Delay117_process;


  
  Switch_on72_out1 <= Delay117_out1 WHEN switch_compare_1_18 = '0' ELSE
      Data_Type_Conversion67_out1;

  
  switch_compare_1_19 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_39 <= '1';

  delayMatch40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch40_reg(0) <= '0';
        delayMatch40_reg(1) <= '0';
        delayMatch40_reg(2) <= '0';
        delayMatch40_reg(3) <= '0';
        delayMatch40_reg(4) <= '0';
        delayMatch40_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch40_reg(0) <= delayMatch40_reg_next(0);
        delayMatch40_reg(1) <= delayMatch40_reg_next(1);
        delayMatch40_reg(2) <= delayMatch40_reg_next(2);
        delayMatch40_reg(3) <= delayMatch40_reg_next(3);
        delayMatch40_reg(4) <= delayMatch40_reg_next(4);
        delayMatch40_reg(5) <= delayMatch40_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch40_process;

  stateControl_40 <= delayMatch40_reg(5);
  delayMatch40_reg_next(0) <= stateControl_39;
  delayMatch40_reg_next(1) <= delayMatch40_reg(0);
  delayMatch40_reg_next(2) <= delayMatch40_reg(1);
  delayMatch40_reg_next(3) <= delayMatch40_reg(2);
  delayMatch40_reg_next(4) <= delayMatch40_reg(3);
  delayMatch40_reg_next(5) <= delayMatch40_reg(4);

  dqxy_phase_voltage_per_switching_state_19_1 <= signed(dqxy_phase_voltage_per_switching_state_19);

  Delay155_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay155_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay155_out1 <= dqxy_phase_voltage_per_switching_state_19_1;
      END IF;
    END IF;
  END PROCESS Delay155_process;


  
  Switch_on71_out1_1 <= Delay116_out1 WHEN stateControl_40 = '0' ELSE
      Switch_on71_out1;

  Delay116_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay116_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay116_out1 <= Switch_on71_out1_1;
      END IF;
    END IF;
  END PROCESS Delay116_process;


  
  Switch_on71_out1 <= Delay116_out1 WHEN switch_compare_1_19 = '0' ELSE
      Data_Type_Conversion66_out1;

  
  switch_compare_1_20 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_41 <= '1';

  delayMatch42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch42_reg(0) <= '0';
        delayMatch42_reg(1) <= '0';
        delayMatch42_reg(2) <= '0';
        delayMatch42_reg(3) <= '0';
        delayMatch42_reg(4) <= '0';
        delayMatch42_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch42_reg(0) <= delayMatch42_reg_next(0);
        delayMatch42_reg(1) <= delayMatch42_reg_next(1);
        delayMatch42_reg(2) <= delayMatch42_reg_next(2);
        delayMatch42_reg(3) <= delayMatch42_reg_next(3);
        delayMatch42_reg(4) <= delayMatch42_reg_next(4);
        delayMatch42_reg(5) <= delayMatch42_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch42_process;

  stateControl_42 <= delayMatch42_reg(5);
  delayMatch42_reg_next(0) <= stateControl_41;
  delayMatch42_reg_next(1) <= delayMatch42_reg(0);
  delayMatch42_reg_next(2) <= delayMatch42_reg(1);
  delayMatch42_reg_next(3) <= delayMatch42_reg(2);
  delayMatch42_reg_next(4) <= delayMatch42_reg(3);
  delayMatch42_reg_next(5) <= delayMatch42_reg(4);

  dqxy_phase_voltage_per_switching_state_20_1 <= signed(dqxy_phase_voltage_per_switching_state_20);

  Delay156_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay156_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay156_out1 <= dqxy_phase_voltage_per_switching_state_20_1;
      END IF;
    END IF;
  END PROCESS Delay156_process;


  
  Switch_on70_out1_1 <= Delay115_out1 WHEN stateControl_42 = '0' ELSE
      Switch_on70_out1;

  Delay115_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay115_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay115_out1 <= Switch_on70_out1_1;
      END IF;
    END IF;
  END PROCESS Delay115_process;


  
  Switch_on70_out1 <= Delay115_out1 WHEN switch_compare_1_20 = '0' ELSE
      Data_Type_Conversion65_out1;

  
  switch_compare_1_21 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_43 <= '1';

  delayMatch44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch44_reg(0) <= '0';
        delayMatch44_reg(1) <= '0';
        delayMatch44_reg(2) <= '0';
        delayMatch44_reg(3) <= '0';
        delayMatch44_reg(4) <= '0';
        delayMatch44_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch44_reg(0) <= delayMatch44_reg_next(0);
        delayMatch44_reg(1) <= delayMatch44_reg_next(1);
        delayMatch44_reg(2) <= delayMatch44_reg_next(2);
        delayMatch44_reg(3) <= delayMatch44_reg_next(3);
        delayMatch44_reg(4) <= delayMatch44_reg_next(4);
        delayMatch44_reg(5) <= delayMatch44_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch44_process;

  stateControl_44 <= delayMatch44_reg(5);
  delayMatch44_reg_next(0) <= stateControl_43;
  delayMatch44_reg_next(1) <= delayMatch44_reg(0);
  delayMatch44_reg_next(2) <= delayMatch44_reg(1);
  delayMatch44_reg_next(3) <= delayMatch44_reg(2);
  delayMatch44_reg_next(4) <= delayMatch44_reg(3);
  delayMatch44_reg_next(5) <= delayMatch44_reg(4);

  dqxy_phase_voltage_per_switching_state_21_1 <= signed(dqxy_phase_voltage_per_switching_state_21);

  Delay157_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay157_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay157_out1 <= dqxy_phase_voltage_per_switching_state_21_1;
      END IF;
    END IF;
  END PROCESS Delay157_process;


  
  Switch_on69_out1_1 <= Delay114_out1 WHEN stateControl_44 = '0' ELSE
      Switch_on69_out1;

  Delay114_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay114_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay114_out1 <= Switch_on69_out1_1;
      END IF;
    END IF;
  END PROCESS Delay114_process;


  
  Switch_on69_out1 <= Delay114_out1 WHEN switch_compare_1_21 = '0' ELSE
      Data_Type_Conversion64_out1;

  
  switch_compare_1_22 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_45 <= '1';

  delayMatch46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch46_reg(0) <= '0';
        delayMatch46_reg(1) <= '0';
        delayMatch46_reg(2) <= '0';
        delayMatch46_reg(3) <= '0';
        delayMatch46_reg(4) <= '0';
        delayMatch46_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch46_reg(0) <= delayMatch46_reg_next(0);
        delayMatch46_reg(1) <= delayMatch46_reg_next(1);
        delayMatch46_reg(2) <= delayMatch46_reg_next(2);
        delayMatch46_reg(3) <= delayMatch46_reg_next(3);
        delayMatch46_reg(4) <= delayMatch46_reg_next(4);
        delayMatch46_reg(5) <= delayMatch46_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch46_process;

  stateControl_46 <= delayMatch46_reg(5);
  delayMatch46_reg_next(0) <= stateControl_45;
  delayMatch46_reg_next(1) <= delayMatch46_reg(0);
  delayMatch46_reg_next(2) <= delayMatch46_reg(1);
  delayMatch46_reg_next(3) <= delayMatch46_reg(2);
  delayMatch46_reg_next(4) <= delayMatch46_reg(3);
  delayMatch46_reg_next(5) <= delayMatch46_reg(4);

  dqxy_phase_voltage_per_switching_state_22_1 <= signed(dqxy_phase_voltage_per_switching_state_22);

  Delay158_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay158_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay158_out1 <= dqxy_phase_voltage_per_switching_state_22_1;
      END IF;
    END IF;
  END PROCESS Delay158_process;


  
  Switch_on68_out1_1 <= Delay113_out1 WHEN stateControl_46 = '0' ELSE
      Switch_on68_out1;

  Delay113_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay113_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay113_out1 <= Switch_on68_out1_1;
      END IF;
    END IF;
  END PROCESS Delay113_process;


  
  Switch_on68_out1 <= Delay113_out1 WHEN switch_compare_1_22 = '0' ELSE
      Data_Type_Conversion63_out1;

  
  switch_compare_1_23 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_47 <= '1';

  delayMatch48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch48_reg(0) <= '0';
        delayMatch48_reg(1) <= '0';
        delayMatch48_reg(2) <= '0';
        delayMatch48_reg(3) <= '0';
        delayMatch48_reg(4) <= '0';
        delayMatch48_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch48_reg(0) <= delayMatch48_reg_next(0);
        delayMatch48_reg(1) <= delayMatch48_reg_next(1);
        delayMatch48_reg(2) <= delayMatch48_reg_next(2);
        delayMatch48_reg(3) <= delayMatch48_reg_next(3);
        delayMatch48_reg(4) <= delayMatch48_reg_next(4);
        delayMatch48_reg(5) <= delayMatch48_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch48_process;

  stateControl_48 <= delayMatch48_reg(5);
  delayMatch48_reg_next(0) <= stateControl_47;
  delayMatch48_reg_next(1) <= delayMatch48_reg(0);
  delayMatch48_reg_next(2) <= delayMatch48_reg(1);
  delayMatch48_reg_next(3) <= delayMatch48_reg(2);
  delayMatch48_reg_next(4) <= delayMatch48_reg(3);
  delayMatch48_reg_next(5) <= delayMatch48_reg(4);

  dqxy_phase_voltage_per_switching_state_23_1 <= signed(dqxy_phase_voltage_per_switching_state_23);

  Delay159_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay159_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay159_out1 <= dqxy_phase_voltage_per_switching_state_23_1;
      END IF;
    END IF;
  END PROCESS Delay159_process;


  
  Switch_on67_out1_1 <= Delay112_out1 WHEN stateControl_48 = '0' ELSE
      Switch_on67_out1;

  Delay112_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay112_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay112_out1 <= Switch_on67_out1_1;
      END IF;
    END IF;
  END PROCESS Delay112_process;


  
  Switch_on67_out1 <= Delay112_out1 WHEN switch_compare_1_23 = '0' ELSE
      Data_Type_Conversion62_out1;

  
  switch_compare_1_24 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_49 <= '1';

  delayMatch50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch50_reg(0) <= '0';
        delayMatch50_reg(1) <= '0';
        delayMatch50_reg(2) <= '0';
        delayMatch50_reg(3) <= '0';
        delayMatch50_reg(4) <= '0';
        delayMatch50_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch50_reg(0) <= delayMatch50_reg_next(0);
        delayMatch50_reg(1) <= delayMatch50_reg_next(1);
        delayMatch50_reg(2) <= delayMatch50_reg_next(2);
        delayMatch50_reg(3) <= delayMatch50_reg_next(3);
        delayMatch50_reg(4) <= delayMatch50_reg_next(4);
        delayMatch50_reg(5) <= delayMatch50_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch50_process;

  stateControl_50 <= delayMatch50_reg(5);
  delayMatch50_reg_next(0) <= stateControl_49;
  delayMatch50_reg_next(1) <= delayMatch50_reg(0);
  delayMatch50_reg_next(2) <= delayMatch50_reg(1);
  delayMatch50_reg_next(3) <= delayMatch50_reg(2);
  delayMatch50_reg_next(4) <= delayMatch50_reg(3);
  delayMatch50_reg_next(5) <= delayMatch50_reg(4);

  dqxy_phase_voltage_per_switching_state_24_1 <= signed(dqxy_phase_voltage_per_switching_state_24);

  Delay160_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay160_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay160_out1 <= dqxy_phase_voltage_per_switching_state_24_1;
      END IF;
    END IF;
  END PROCESS Delay160_process;


  
  Switch_on66_out1_1 <= Delay111_out1 WHEN stateControl_50 = '0' ELSE
      Switch_on66_out1;

  Delay111_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay111_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay111_out1 <= Switch_on66_out1_1;
      END IF;
    END IF;
  END PROCESS Delay111_process;


  
  Switch_on66_out1 <= Delay111_out1 WHEN switch_compare_1_24 = '0' ELSE
      Data_Type_Conversion61_out1;

  
  switch_compare_1_25 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_51 <= '1';

  delayMatch52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch52_reg(0) <= '0';
        delayMatch52_reg(1) <= '0';
        delayMatch52_reg(2) <= '0';
        delayMatch52_reg(3) <= '0';
        delayMatch52_reg(4) <= '0';
        delayMatch52_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch52_reg(0) <= delayMatch52_reg_next(0);
        delayMatch52_reg(1) <= delayMatch52_reg_next(1);
        delayMatch52_reg(2) <= delayMatch52_reg_next(2);
        delayMatch52_reg(3) <= delayMatch52_reg_next(3);
        delayMatch52_reg(4) <= delayMatch52_reg_next(4);
        delayMatch52_reg(5) <= delayMatch52_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch52_process;

  stateControl_52 <= delayMatch52_reg(5);
  delayMatch52_reg_next(0) <= stateControl_51;
  delayMatch52_reg_next(1) <= delayMatch52_reg(0);
  delayMatch52_reg_next(2) <= delayMatch52_reg(1);
  delayMatch52_reg_next(3) <= delayMatch52_reg(2);
  delayMatch52_reg_next(4) <= delayMatch52_reg(3);
  delayMatch52_reg_next(5) <= delayMatch52_reg(4);

  dqxy_phase_voltage_per_switching_state_25_1 <= signed(dqxy_phase_voltage_per_switching_state_25);

  Delay161_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay161_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay161_out1 <= dqxy_phase_voltage_per_switching_state_25_1;
      END IF;
    END IF;
  END PROCESS Delay161_process;


  
  Switch_on65_out1_1 <= Delay110_out1 WHEN stateControl_52 = '0' ELSE
      Switch_on65_out1;

  Delay110_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay110_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay110_out1 <= Switch_on65_out1_1;
      END IF;
    END IF;
  END PROCESS Delay110_process;


  
  Switch_on65_out1 <= Delay110_out1 WHEN switch_compare_1_25 = '0' ELSE
      Data_Type_Conversion60_out1;

  
  switch_compare_1_26 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_53 <= '1';

  delayMatch54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch54_reg(0) <= '0';
        delayMatch54_reg(1) <= '0';
        delayMatch54_reg(2) <= '0';
        delayMatch54_reg(3) <= '0';
        delayMatch54_reg(4) <= '0';
        delayMatch54_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch54_reg(0) <= delayMatch54_reg_next(0);
        delayMatch54_reg(1) <= delayMatch54_reg_next(1);
        delayMatch54_reg(2) <= delayMatch54_reg_next(2);
        delayMatch54_reg(3) <= delayMatch54_reg_next(3);
        delayMatch54_reg(4) <= delayMatch54_reg_next(4);
        delayMatch54_reg(5) <= delayMatch54_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch54_process;

  stateControl_54 <= delayMatch54_reg(5);
  delayMatch54_reg_next(0) <= stateControl_53;
  delayMatch54_reg_next(1) <= delayMatch54_reg(0);
  delayMatch54_reg_next(2) <= delayMatch54_reg(1);
  delayMatch54_reg_next(3) <= delayMatch54_reg(2);
  delayMatch54_reg_next(4) <= delayMatch54_reg(3);
  delayMatch54_reg_next(5) <= delayMatch54_reg(4);

  dqxy_phase_voltage_per_switching_state_26_1 <= signed(dqxy_phase_voltage_per_switching_state_26);

  Delay162_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay162_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay162_out1 <= dqxy_phase_voltage_per_switching_state_26_1;
      END IF;
    END IF;
  END PROCESS Delay162_process;


  
  Switch_on64_out1_1 <= Delay109_out1 WHEN stateControl_54 = '0' ELSE
      Switch_on64_out1;

  Delay109_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay109_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay109_out1 <= Switch_on64_out1_1;
      END IF;
    END IF;
  END PROCESS Delay109_process;


  
  Switch_on64_out1 <= Delay109_out1 WHEN switch_compare_1_26 = '0' ELSE
      Data_Type_Conversion59_out1;

  
  switch_compare_1_27 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_55 <= '1';

  delayMatch56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch56_reg(0) <= '0';
        delayMatch56_reg(1) <= '0';
        delayMatch56_reg(2) <= '0';
        delayMatch56_reg(3) <= '0';
        delayMatch56_reg(4) <= '0';
        delayMatch56_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch56_reg(0) <= delayMatch56_reg_next(0);
        delayMatch56_reg(1) <= delayMatch56_reg_next(1);
        delayMatch56_reg(2) <= delayMatch56_reg_next(2);
        delayMatch56_reg(3) <= delayMatch56_reg_next(3);
        delayMatch56_reg(4) <= delayMatch56_reg_next(4);
        delayMatch56_reg(5) <= delayMatch56_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch56_process;

  stateControl_56 <= delayMatch56_reg(5);
  delayMatch56_reg_next(0) <= stateControl_55;
  delayMatch56_reg_next(1) <= delayMatch56_reg(0);
  delayMatch56_reg_next(2) <= delayMatch56_reg(1);
  delayMatch56_reg_next(3) <= delayMatch56_reg(2);
  delayMatch56_reg_next(4) <= delayMatch56_reg(3);
  delayMatch56_reg_next(5) <= delayMatch56_reg(4);

  dqxy_phase_voltage_per_switching_state_27_1 <= signed(dqxy_phase_voltage_per_switching_state_27);

  Delay163_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay163_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay163_out1 <= dqxy_phase_voltage_per_switching_state_27_1;
      END IF;
    END IF;
  END PROCESS Delay163_process;


  
  Switch_on63_out1_1 <= Delay108_out1 WHEN stateControl_56 = '0' ELSE
      Switch_on63_out1;

  Delay108_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay108_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay108_out1 <= Switch_on63_out1_1;
      END IF;
    END IF;
  END PROCESS Delay108_process;


  
  Switch_on63_out1 <= Delay108_out1 WHEN switch_compare_1_27 = '0' ELSE
      Data_Type_Conversion58_out1;

  
  switch_compare_1_28 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_57 <= '1';

  delayMatch58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch58_reg(0) <= '0';
        delayMatch58_reg(1) <= '0';
        delayMatch58_reg(2) <= '0';
        delayMatch58_reg(3) <= '0';
        delayMatch58_reg(4) <= '0';
        delayMatch58_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch58_reg(0) <= delayMatch58_reg_next(0);
        delayMatch58_reg(1) <= delayMatch58_reg_next(1);
        delayMatch58_reg(2) <= delayMatch58_reg_next(2);
        delayMatch58_reg(3) <= delayMatch58_reg_next(3);
        delayMatch58_reg(4) <= delayMatch58_reg_next(4);
        delayMatch58_reg(5) <= delayMatch58_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch58_process;

  stateControl_58 <= delayMatch58_reg(5);
  delayMatch58_reg_next(0) <= stateControl_57;
  delayMatch58_reg_next(1) <= delayMatch58_reg(0);
  delayMatch58_reg_next(2) <= delayMatch58_reg(1);
  delayMatch58_reg_next(3) <= delayMatch58_reg(2);
  delayMatch58_reg_next(4) <= delayMatch58_reg(3);
  delayMatch58_reg_next(5) <= delayMatch58_reg(4);

  dqxy_phase_voltage_per_switching_state_28_1 <= signed(dqxy_phase_voltage_per_switching_state_28);

  Delay164_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay164_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay164_out1 <= dqxy_phase_voltage_per_switching_state_28_1;
      END IF;
    END IF;
  END PROCESS Delay164_process;


  
  Switch_on62_out1_1 <= Delay107_out1 WHEN stateControl_58 = '0' ELSE
      Switch_on62_out1;

  Delay107_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay107_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay107_out1 <= Switch_on62_out1_1;
      END IF;
    END IF;
  END PROCESS Delay107_process;


  
  Switch_on62_out1 <= Delay107_out1 WHEN switch_compare_1_28 = '0' ELSE
      Data_Type_Conversion57_out1;

  
  switch_compare_1_29 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_59 <= '1';

  delayMatch60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch60_reg(0) <= '0';
        delayMatch60_reg(1) <= '0';
        delayMatch60_reg(2) <= '0';
        delayMatch60_reg(3) <= '0';
        delayMatch60_reg(4) <= '0';
        delayMatch60_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch60_reg(0) <= delayMatch60_reg_next(0);
        delayMatch60_reg(1) <= delayMatch60_reg_next(1);
        delayMatch60_reg(2) <= delayMatch60_reg_next(2);
        delayMatch60_reg(3) <= delayMatch60_reg_next(3);
        delayMatch60_reg(4) <= delayMatch60_reg_next(4);
        delayMatch60_reg(5) <= delayMatch60_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch60_process;

  stateControl_60 <= delayMatch60_reg(5);
  delayMatch60_reg_next(0) <= stateControl_59;
  delayMatch60_reg_next(1) <= delayMatch60_reg(0);
  delayMatch60_reg_next(2) <= delayMatch60_reg(1);
  delayMatch60_reg_next(3) <= delayMatch60_reg(2);
  delayMatch60_reg_next(4) <= delayMatch60_reg(3);
  delayMatch60_reg_next(5) <= delayMatch60_reg(4);

  dqxy_phase_voltage_per_switching_state_29_1 <= signed(dqxy_phase_voltage_per_switching_state_29);

  Delay165_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay165_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay165_out1 <= dqxy_phase_voltage_per_switching_state_29_1;
      END IF;
    END IF;
  END PROCESS Delay165_process;


  
  Switch_on61_out1_1 <= Delay106_out1 WHEN stateControl_60 = '0' ELSE
      Switch_on61_out1;

  Delay106_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay106_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay106_out1 <= Switch_on61_out1_1;
      END IF;
    END IF;
  END PROCESS Delay106_process;


  
  Switch_on61_out1 <= Delay106_out1 WHEN switch_compare_1_29 = '0' ELSE
      Data_Type_Conversion56_out1;

  
  switch_compare_1_30 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_61 <= '1';

  delayMatch62_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch62_reg(0) <= '0';
        delayMatch62_reg(1) <= '0';
        delayMatch62_reg(2) <= '0';
        delayMatch62_reg(3) <= '0';
        delayMatch62_reg(4) <= '0';
        delayMatch62_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch62_reg(0) <= delayMatch62_reg_next(0);
        delayMatch62_reg(1) <= delayMatch62_reg_next(1);
        delayMatch62_reg(2) <= delayMatch62_reg_next(2);
        delayMatch62_reg(3) <= delayMatch62_reg_next(3);
        delayMatch62_reg(4) <= delayMatch62_reg_next(4);
        delayMatch62_reg(5) <= delayMatch62_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch62_process;

  stateControl_62 <= delayMatch62_reg(5);
  delayMatch62_reg_next(0) <= stateControl_61;
  delayMatch62_reg_next(1) <= delayMatch62_reg(0);
  delayMatch62_reg_next(2) <= delayMatch62_reg(1);
  delayMatch62_reg_next(3) <= delayMatch62_reg(2);
  delayMatch62_reg_next(4) <= delayMatch62_reg(3);
  delayMatch62_reg_next(5) <= delayMatch62_reg(4);

  dqxy_phase_voltage_per_switching_state_30_1 <= signed(dqxy_phase_voltage_per_switching_state_30);

  Delay166_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay166_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay166_out1 <= dqxy_phase_voltage_per_switching_state_30_1;
      END IF;
    END IF;
  END PROCESS Delay166_process;


  
  Switch_on60_out1_1 <= Delay105_out1 WHEN stateControl_62 = '0' ELSE
      Switch_on60_out1;

  Delay105_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay105_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay105_out1 <= Switch_on60_out1_1;
      END IF;
    END IF;
  END PROCESS Delay105_process;


  
  Switch_on60_out1 <= Delay105_out1 WHEN switch_compare_1_30 = '0' ELSE
      Data_Type_Conversion55_out1;

  
  switch_compare_1_31 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_63 <= '1';

  delayMatch64_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch64_reg(0) <= '0';
        delayMatch64_reg(1) <= '0';
        delayMatch64_reg(2) <= '0';
        delayMatch64_reg(3) <= '0';
        delayMatch64_reg(4) <= '0';
        delayMatch64_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch64_reg(0) <= delayMatch64_reg_next(0);
        delayMatch64_reg(1) <= delayMatch64_reg_next(1);
        delayMatch64_reg(2) <= delayMatch64_reg_next(2);
        delayMatch64_reg(3) <= delayMatch64_reg_next(3);
        delayMatch64_reg(4) <= delayMatch64_reg_next(4);
        delayMatch64_reg(5) <= delayMatch64_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch64_process;

  stateControl_64 <= delayMatch64_reg(5);
  delayMatch64_reg_next(0) <= stateControl_63;
  delayMatch64_reg_next(1) <= delayMatch64_reg(0);
  delayMatch64_reg_next(2) <= delayMatch64_reg(1);
  delayMatch64_reg_next(3) <= delayMatch64_reg(2);
  delayMatch64_reg_next(4) <= delayMatch64_reg(3);
  delayMatch64_reg_next(5) <= delayMatch64_reg(4);

  dqxy_phase_voltage_per_switching_state_31_1 <= signed(dqxy_phase_voltage_per_switching_state_31);

  Delay167_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay167_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay167_out1 <= dqxy_phase_voltage_per_switching_state_31_1;
      END IF;
    END IF;
  END PROCESS Delay167_process;


  
  Switch_on59_out1_1 <= Delay104_out1 WHEN stateControl_64 = '0' ELSE
      Switch_on59_out1;

  Delay104_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay104_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay104_out1 <= Switch_on59_out1_1;
      END IF;
    END IF;
  END PROCESS Delay104_process;


  
  Switch_on59_out1 <= Delay104_out1 WHEN switch_compare_1_31 = '0' ELSE
      Data_Type_Conversion54_out1;

  
  switch_compare_1_32 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_65 <= '1';

  delayMatch66_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch66_reg(0) <= '0';
        delayMatch66_reg(1) <= '0';
        delayMatch66_reg(2) <= '0';
        delayMatch66_reg(3) <= '0';
        delayMatch66_reg(4) <= '0';
        delayMatch66_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch66_reg(0) <= delayMatch66_reg_next(0);
        delayMatch66_reg(1) <= delayMatch66_reg_next(1);
        delayMatch66_reg(2) <= delayMatch66_reg_next(2);
        delayMatch66_reg(3) <= delayMatch66_reg_next(3);
        delayMatch66_reg(4) <= delayMatch66_reg_next(4);
        delayMatch66_reg(5) <= delayMatch66_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch66_process;

  stateControl_66 <= delayMatch66_reg(5);
  delayMatch66_reg_next(0) <= stateControl_65;
  delayMatch66_reg_next(1) <= delayMatch66_reg(0);
  delayMatch66_reg_next(2) <= delayMatch66_reg(1);
  delayMatch66_reg_next(3) <= delayMatch66_reg(2);
  delayMatch66_reg_next(4) <= delayMatch66_reg(3);
  delayMatch66_reg_next(5) <= delayMatch66_reg(4);

  dqxy_phase_voltage_per_switching_state_32_1 <= signed(dqxy_phase_voltage_per_switching_state_32);

  Delay168_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay168_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay168_out1 <= dqxy_phase_voltage_per_switching_state_32_1;
      END IF;
    END IF;
  END PROCESS Delay168_process;


  
  Switch_on58_out1_1 <= Delay103_out1 WHEN stateControl_66 = '0' ELSE
      Switch_on58_out1;

  Delay103_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay103_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay103_out1 <= Switch_on58_out1_1;
      END IF;
    END IF;
  END PROCESS Delay103_process;


  
  Switch_on58_out1 <= Delay103_out1 WHEN switch_compare_1_32 = '0' ELSE
      Data_Type_Conversion53_out1;

  
  switch_compare_1_33 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_67 <= '1';

  delayMatch68_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch68_reg(0) <= '0';
        delayMatch68_reg(1) <= '0';
        delayMatch68_reg(2) <= '0';
        delayMatch68_reg(3) <= '0';
        delayMatch68_reg(4) <= '0';
        delayMatch68_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch68_reg(0) <= delayMatch68_reg_next(0);
        delayMatch68_reg(1) <= delayMatch68_reg_next(1);
        delayMatch68_reg(2) <= delayMatch68_reg_next(2);
        delayMatch68_reg(3) <= delayMatch68_reg_next(3);
        delayMatch68_reg(4) <= delayMatch68_reg_next(4);
        delayMatch68_reg(5) <= delayMatch68_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch68_process;

  stateControl_68 <= delayMatch68_reg(5);
  delayMatch68_reg_next(0) <= stateControl_67;
  delayMatch68_reg_next(1) <= delayMatch68_reg(0);
  delayMatch68_reg_next(2) <= delayMatch68_reg(1);
  delayMatch68_reg_next(3) <= delayMatch68_reg(2);
  delayMatch68_reg_next(4) <= delayMatch68_reg(3);
  delayMatch68_reg_next(5) <= delayMatch68_reg(4);

  dqxy_phase_voltage_per_switching_state_33_1 <= signed(dqxy_phase_voltage_per_switching_state_33);

  Delay169_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay169_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay169_out1 <= dqxy_phase_voltage_per_switching_state_33_1;
      END IF;
    END IF;
  END PROCESS Delay169_process;


  
  Switch_on57_out1_1 <= Delay102_out1 WHEN stateControl_68 = '0' ELSE
      Switch_on57_out1;

  Delay102_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay102_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay102_out1 <= Switch_on57_out1_1;
      END IF;
    END IF;
  END PROCESS Delay102_process;


  
  Switch_on57_out1 <= Delay102_out1 WHEN switch_compare_1_33 = '0' ELSE
      Data_Type_Conversion52_out1;

  
  switch_compare_1_34 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_69 <= '1';

  delayMatch70_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch70_reg(0) <= '0';
        delayMatch70_reg(1) <= '0';
        delayMatch70_reg(2) <= '0';
        delayMatch70_reg(3) <= '0';
        delayMatch70_reg(4) <= '0';
        delayMatch70_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch70_reg(0) <= delayMatch70_reg_next(0);
        delayMatch70_reg(1) <= delayMatch70_reg_next(1);
        delayMatch70_reg(2) <= delayMatch70_reg_next(2);
        delayMatch70_reg(3) <= delayMatch70_reg_next(3);
        delayMatch70_reg(4) <= delayMatch70_reg_next(4);
        delayMatch70_reg(5) <= delayMatch70_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch70_process;

  stateControl_70 <= delayMatch70_reg(5);
  delayMatch70_reg_next(0) <= stateControl_69;
  delayMatch70_reg_next(1) <= delayMatch70_reg(0);
  delayMatch70_reg_next(2) <= delayMatch70_reg(1);
  delayMatch70_reg_next(3) <= delayMatch70_reg(2);
  delayMatch70_reg_next(4) <= delayMatch70_reg(3);
  delayMatch70_reg_next(5) <= delayMatch70_reg(4);

  dqxy_phase_voltage_per_switching_state_34_1 <= signed(dqxy_phase_voltage_per_switching_state_34);

  Delay170_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay170_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay170_out1 <= dqxy_phase_voltage_per_switching_state_34_1;
      END IF;
    END IF;
  END PROCESS Delay170_process;


  
  Switch_on56_out1_1 <= Delay101_out1 WHEN stateControl_70 = '0' ELSE
      Switch_on56_out1;

  Delay101_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay101_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay101_out1 <= Switch_on56_out1_1;
      END IF;
    END IF;
  END PROCESS Delay101_process;


  
  Switch_on56_out1 <= Delay101_out1 WHEN switch_compare_1_34 = '0' ELSE
      Data_Type_Conversion51_out1;

  
  switch_compare_1_35 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_71 <= '1';

  delayMatch72_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch72_reg(0) <= '0';
        delayMatch72_reg(1) <= '0';
        delayMatch72_reg(2) <= '0';
        delayMatch72_reg(3) <= '0';
        delayMatch72_reg(4) <= '0';
        delayMatch72_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch72_reg(0) <= delayMatch72_reg_next(0);
        delayMatch72_reg(1) <= delayMatch72_reg_next(1);
        delayMatch72_reg(2) <= delayMatch72_reg_next(2);
        delayMatch72_reg(3) <= delayMatch72_reg_next(3);
        delayMatch72_reg(4) <= delayMatch72_reg_next(4);
        delayMatch72_reg(5) <= delayMatch72_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch72_process;

  stateControl_72 <= delayMatch72_reg(5);
  delayMatch72_reg_next(0) <= stateControl_71;
  delayMatch72_reg_next(1) <= delayMatch72_reg(0);
  delayMatch72_reg_next(2) <= delayMatch72_reg(1);
  delayMatch72_reg_next(3) <= delayMatch72_reg(2);
  delayMatch72_reg_next(4) <= delayMatch72_reg(3);
  delayMatch72_reg_next(5) <= delayMatch72_reg(4);

  dqxy_phase_voltage_per_switching_state_35_1 <= signed(dqxy_phase_voltage_per_switching_state_35);

  Delay171_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay171_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay171_out1 <= dqxy_phase_voltage_per_switching_state_35_1;
      END IF;
    END IF;
  END PROCESS Delay171_process;


  
  Switch_on55_out1_1 <= Delay100_out1 WHEN stateControl_72 = '0' ELSE
      Switch_on55_out1;

  Delay100_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay100_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay100_out1 <= Switch_on55_out1_1;
      END IF;
    END IF;
  END PROCESS Delay100_process;


  
  Switch_on55_out1 <= Delay100_out1 WHEN switch_compare_1_35 = '0' ELSE
      Data_Type_Conversion50_out1;

  
  switch_compare_1_36 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_73 <= '1';

  delayMatch74_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch74_reg(0) <= '0';
        delayMatch74_reg(1) <= '0';
        delayMatch74_reg(2) <= '0';
        delayMatch74_reg(3) <= '0';
        delayMatch74_reg(4) <= '0';
        delayMatch74_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch74_reg(0) <= delayMatch74_reg_next(0);
        delayMatch74_reg(1) <= delayMatch74_reg_next(1);
        delayMatch74_reg(2) <= delayMatch74_reg_next(2);
        delayMatch74_reg(3) <= delayMatch74_reg_next(3);
        delayMatch74_reg(4) <= delayMatch74_reg_next(4);
        delayMatch74_reg(5) <= delayMatch74_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch74_process;

  stateControl_74 <= delayMatch74_reg(5);
  delayMatch74_reg_next(0) <= stateControl_73;
  delayMatch74_reg_next(1) <= delayMatch74_reg(0);
  delayMatch74_reg_next(2) <= delayMatch74_reg(1);
  delayMatch74_reg_next(3) <= delayMatch74_reg(2);
  delayMatch74_reg_next(4) <= delayMatch74_reg(3);
  delayMatch74_reg_next(5) <= delayMatch74_reg(4);

  dqxy_phase_voltage_per_switching_state_36_1 <= signed(dqxy_phase_voltage_per_switching_state_36);

  Delay172_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay172_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay172_out1 <= dqxy_phase_voltage_per_switching_state_36_1;
      END IF;
    END IF;
  END PROCESS Delay172_process;


  
  Switch_on54_out1_1 <= Delay99_out1 WHEN stateControl_74 = '0' ELSE
      Switch_on54_out1;

  Delay99_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay99_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay99_out1 <= Switch_on54_out1_1;
      END IF;
    END IF;
  END PROCESS Delay99_process;


  
  Switch_on54_out1 <= Delay99_out1 WHEN switch_compare_1_36 = '0' ELSE
      Data_Type_Conversion49_out1;

  
  switch_compare_1_37 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_75 <= '1';

  delayMatch76_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch76_reg(0) <= '0';
        delayMatch76_reg(1) <= '0';
        delayMatch76_reg(2) <= '0';
        delayMatch76_reg(3) <= '0';
        delayMatch76_reg(4) <= '0';
        delayMatch76_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch76_reg(0) <= delayMatch76_reg_next(0);
        delayMatch76_reg(1) <= delayMatch76_reg_next(1);
        delayMatch76_reg(2) <= delayMatch76_reg_next(2);
        delayMatch76_reg(3) <= delayMatch76_reg_next(3);
        delayMatch76_reg(4) <= delayMatch76_reg_next(4);
        delayMatch76_reg(5) <= delayMatch76_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch76_process;

  stateControl_76 <= delayMatch76_reg(5);
  delayMatch76_reg_next(0) <= stateControl_75;
  delayMatch76_reg_next(1) <= delayMatch76_reg(0);
  delayMatch76_reg_next(2) <= delayMatch76_reg(1);
  delayMatch76_reg_next(3) <= delayMatch76_reg(2);
  delayMatch76_reg_next(4) <= delayMatch76_reg(3);
  delayMatch76_reg_next(5) <= delayMatch76_reg(4);

  dqxy_phase_voltage_per_switching_state_37_1 <= signed(dqxy_phase_voltage_per_switching_state_37);

  Delay173_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay173_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay173_out1 <= dqxy_phase_voltage_per_switching_state_37_1;
      END IF;
    END IF;
  END PROCESS Delay173_process;


  
  Switch_on53_out1_1 <= Delay98_out1 WHEN stateControl_76 = '0' ELSE
      Switch_on53_out1;

  Delay98_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay98_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay98_out1 <= Switch_on53_out1_1;
      END IF;
    END IF;
  END PROCESS Delay98_process;


  
  Switch_on53_out1 <= Delay98_out1 WHEN switch_compare_1_37 = '0' ELSE
      Data_Type_Conversion48_out1;

  
  switch_compare_1_38 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_77 <= '1';

  delayMatch78_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch78_reg(0) <= '0';
        delayMatch78_reg(1) <= '0';
        delayMatch78_reg(2) <= '0';
        delayMatch78_reg(3) <= '0';
        delayMatch78_reg(4) <= '0';
        delayMatch78_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch78_reg(0) <= delayMatch78_reg_next(0);
        delayMatch78_reg(1) <= delayMatch78_reg_next(1);
        delayMatch78_reg(2) <= delayMatch78_reg_next(2);
        delayMatch78_reg(3) <= delayMatch78_reg_next(3);
        delayMatch78_reg(4) <= delayMatch78_reg_next(4);
        delayMatch78_reg(5) <= delayMatch78_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch78_process;

  stateControl_78 <= delayMatch78_reg(5);
  delayMatch78_reg_next(0) <= stateControl_77;
  delayMatch78_reg_next(1) <= delayMatch78_reg(0);
  delayMatch78_reg_next(2) <= delayMatch78_reg(1);
  delayMatch78_reg_next(3) <= delayMatch78_reg(2);
  delayMatch78_reg_next(4) <= delayMatch78_reg(3);
  delayMatch78_reg_next(5) <= delayMatch78_reg(4);

  dqxy_phase_voltage_per_switching_state_38_1 <= signed(dqxy_phase_voltage_per_switching_state_38);

  Delay174_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay174_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay174_out1 <= dqxy_phase_voltage_per_switching_state_38_1;
      END IF;
    END IF;
  END PROCESS Delay174_process;


  
  Switch_on52_out1_1 <= Delay97_out1 WHEN stateControl_78 = '0' ELSE
      Switch_on52_out1;

  Delay97_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay97_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay97_out1 <= Switch_on52_out1_1;
      END IF;
    END IF;
  END PROCESS Delay97_process;


  
  Switch_on52_out1 <= Delay97_out1 WHEN switch_compare_1_38 = '0' ELSE
      Data_Type_Conversion47_out1;

  
  switch_compare_1_39 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_79 <= '1';

  delayMatch80_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch80_reg(0) <= '0';
        delayMatch80_reg(1) <= '0';
        delayMatch80_reg(2) <= '0';
        delayMatch80_reg(3) <= '0';
        delayMatch80_reg(4) <= '0';
        delayMatch80_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch80_reg(0) <= delayMatch80_reg_next(0);
        delayMatch80_reg(1) <= delayMatch80_reg_next(1);
        delayMatch80_reg(2) <= delayMatch80_reg_next(2);
        delayMatch80_reg(3) <= delayMatch80_reg_next(3);
        delayMatch80_reg(4) <= delayMatch80_reg_next(4);
        delayMatch80_reg(5) <= delayMatch80_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch80_process;

  stateControl_80 <= delayMatch80_reg(5);
  delayMatch80_reg_next(0) <= stateControl_79;
  delayMatch80_reg_next(1) <= delayMatch80_reg(0);
  delayMatch80_reg_next(2) <= delayMatch80_reg(1);
  delayMatch80_reg_next(3) <= delayMatch80_reg(2);
  delayMatch80_reg_next(4) <= delayMatch80_reg(3);
  delayMatch80_reg_next(5) <= delayMatch80_reg(4);

  dqxy_phase_voltage_per_switching_state_39_1 <= signed(dqxy_phase_voltage_per_switching_state_39);

  Delay175_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay175_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay175_out1 <= dqxy_phase_voltage_per_switching_state_39_1;
      END IF;
    END IF;
  END PROCESS Delay175_process;


  
  Switch_on51_out1_1 <= Delay96_out1 WHEN stateControl_80 = '0' ELSE
      Switch_on51_out1;

  Delay96_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay96_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay96_out1 <= Switch_on51_out1_1;
      END IF;
    END IF;
  END PROCESS Delay96_process;


  
  Switch_on51_out1 <= Delay96_out1 WHEN switch_compare_1_39 = '0' ELSE
      Data_Type_Conversion46_out1;

  
  switch_compare_1_40 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_81 <= '1';

  delayMatch82_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch82_reg(0) <= '0';
        delayMatch82_reg(1) <= '0';
        delayMatch82_reg(2) <= '0';
        delayMatch82_reg(3) <= '0';
        delayMatch82_reg(4) <= '0';
        delayMatch82_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch82_reg(0) <= delayMatch82_reg_next(0);
        delayMatch82_reg(1) <= delayMatch82_reg_next(1);
        delayMatch82_reg(2) <= delayMatch82_reg_next(2);
        delayMatch82_reg(3) <= delayMatch82_reg_next(3);
        delayMatch82_reg(4) <= delayMatch82_reg_next(4);
        delayMatch82_reg(5) <= delayMatch82_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch82_process;

  stateControl_82 <= delayMatch82_reg(5);
  delayMatch82_reg_next(0) <= stateControl_81;
  delayMatch82_reg_next(1) <= delayMatch82_reg(0);
  delayMatch82_reg_next(2) <= delayMatch82_reg(1);
  delayMatch82_reg_next(3) <= delayMatch82_reg(2);
  delayMatch82_reg_next(4) <= delayMatch82_reg(3);
  delayMatch82_reg_next(5) <= delayMatch82_reg(4);

  dqxy_phase_voltage_per_switching_state_40_1 <= signed(dqxy_phase_voltage_per_switching_state_40);

  Delay176_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay176_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay176_out1 <= dqxy_phase_voltage_per_switching_state_40_1;
      END IF;
    END IF;
  END PROCESS Delay176_process;


  
  Switch_on50_out1_1 <= Delay95_out1 WHEN stateControl_82 = '0' ELSE
      Switch_on50_out1;

  Delay95_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay95_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay95_out1 <= Switch_on50_out1_1;
      END IF;
    END IF;
  END PROCESS Delay95_process;


  
  Switch_on50_out1 <= Delay95_out1 WHEN switch_compare_1_40 = '0' ELSE
      Data_Type_Conversion45_out1;

  
  switch_compare_1_41 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_83 <= '1';

  delayMatch84_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch84_reg(0) <= '0';
        delayMatch84_reg(1) <= '0';
        delayMatch84_reg(2) <= '0';
        delayMatch84_reg(3) <= '0';
        delayMatch84_reg(4) <= '0';
        delayMatch84_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch84_reg(0) <= delayMatch84_reg_next(0);
        delayMatch84_reg(1) <= delayMatch84_reg_next(1);
        delayMatch84_reg(2) <= delayMatch84_reg_next(2);
        delayMatch84_reg(3) <= delayMatch84_reg_next(3);
        delayMatch84_reg(4) <= delayMatch84_reg_next(4);
        delayMatch84_reg(5) <= delayMatch84_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch84_process;

  stateControl_84 <= delayMatch84_reg(5);
  delayMatch84_reg_next(0) <= stateControl_83;
  delayMatch84_reg_next(1) <= delayMatch84_reg(0);
  delayMatch84_reg_next(2) <= delayMatch84_reg(1);
  delayMatch84_reg_next(3) <= delayMatch84_reg(2);
  delayMatch84_reg_next(4) <= delayMatch84_reg(3);
  delayMatch84_reg_next(5) <= delayMatch84_reg(4);

  dqxy_phase_voltage_per_switching_state_41_1 <= signed(dqxy_phase_voltage_per_switching_state_41);

  Delay177_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay177_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay177_out1 <= dqxy_phase_voltage_per_switching_state_41_1;
      END IF;
    END IF;
  END PROCESS Delay177_process;


  
  Switch_on49_out1_1 <= Delay94_out1 WHEN stateControl_84 = '0' ELSE
      Switch_on49_out1;

  Delay94_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay94_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay94_out1 <= Switch_on49_out1_1;
      END IF;
    END IF;
  END PROCESS Delay94_process;


  
  Switch_on49_out1 <= Delay94_out1 WHEN switch_compare_1_41 = '0' ELSE
      Data_Type_Conversion44_out1;

  
  switch_compare_1_42 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_85 <= '1';

  delayMatch86_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch86_reg(0) <= '0';
        delayMatch86_reg(1) <= '0';
        delayMatch86_reg(2) <= '0';
        delayMatch86_reg(3) <= '0';
        delayMatch86_reg(4) <= '0';
        delayMatch86_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch86_reg(0) <= delayMatch86_reg_next(0);
        delayMatch86_reg(1) <= delayMatch86_reg_next(1);
        delayMatch86_reg(2) <= delayMatch86_reg_next(2);
        delayMatch86_reg(3) <= delayMatch86_reg_next(3);
        delayMatch86_reg(4) <= delayMatch86_reg_next(4);
        delayMatch86_reg(5) <= delayMatch86_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch86_process;

  stateControl_86 <= delayMatch86_reg(5);
  delayMatch86_reg_next(0) <= stateControl_85;
  delayMatch86_reg_next(1) <= delayMatch86_reg(0);
  delayMatch86_reg_next(2) <= delayMatch86_reg(1);
  delayMatch86_reg_next(3) <= delayMatch86_reg(2);
  delayMatch86_reg_next(4) <= delayMatch86_reg(3);
  delayMatch86_reg_next(5) <= delayMatch86_reg(4);

  dqxy_phase_voltage_per_switching_state_42_1 <= signed(dqxy_phase_voltage_per_switching_state_42);

  Delay178_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay178_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay178_out1 <= dqxy_phase_voltage_per_switching_state_42_1;
      END IF;
    END IF;
  END PROCESS Delay178_process;


  
  Switch_on48_out1_1 <= Delay93_out1 WHEN stateControl_86 = '0' ELSE
      Switch_on48_out1;

  Delay93_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay93_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay93_out1 <= Switch_on48_out1_1;
      END IF;
    END IF;
  END PROCESS Delay93_process;


  
  Switch_on48_out1 <= Delay93_out1 WHEN switch_compare_1_42 = '0' ELSE
      Data_Type_Conversion43_out1;

  
  switch_compare_1_43 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_87 <= '1';

  delayMatch88_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch88_reg(0) <= '0';
        delayMatch88_reg(1) <= '0';
        delayMatch88_reg(2) <= '0';
        delayMatch88_reg(3) <= '0';
        delayMatch88_reg(4) <= '0';
        delayMatch88_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch88_reg(0) <= delayMatch88_reg_next(0);
        delayMatch88_reg(1) <= delayMatch88_reg_next(1);
        delayMatch88_reg(2) <= delayMatch88_reg_next(2);
        delayMatch88_reg(3) <= delayMatch88_reg_next(3);
        delayMatch88_reg(4) <= delayMatch88_reg_next(4);
        delayMatch88_reg(5) <= delayMatch88_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch88_process;

  stateControl_88 <= delayMatch88_reg(5);
  delayMatch88_reg_next(0) <= stateControl_87;
  delayMatch88_reg_next(1) <= delayMatch88_reg(0);
  delayMatch88_reg_next(2) <= delayMatch88_reg(1);
  delayMatch88_reg_next(3) <= delayMatch88_reg(2);
  delayMatch88_reg_next(4) <= delayMatch88_reg(3);
  delayMatch88_reg_next(5) <= delayMatch88_reg(4);

  dqxy_phase_voltage_per_switching_state_43_1 <= signed(dqxy_phase_voltage_per_switching_state_43);

  Delay179_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay179_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay179_out1 <= dqxy_phase_voltage_per_switching_state_43_1;
      END IF;
    END IF;
  END PROCESS Delay179_process;


  
  Switch_on47_out1_1 <= Delay92_out1 WHEN stateControl_88 = '0' ELSE
      Switch_on47_out1;

  Delay92_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay92_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay92_out1 <= Switch_on47_out1_1;
      END IF;
    END IF;
  END PROCESS Delay92_process;


  
  Switch_on47_out1 <= Delay92_out1 WHEN switch_compare_1_43 = '0' ELSE
      Data_Type_Conversion42_out1;

  
  switch_compare_1_44 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_89 <= '1';

  delayMatch90_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch90_reg(0) <= '0';
        delayMatch90_reg(1) <= '0';
        delayMatch90_reg(2) <= '0';
        delayMatch90_reg(3) <= '0';
        delayMatch90_reg(4) <= '0';
        delayMatch90_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch90_reg(0) <= delayMatch90_reg_next(0);
        delayMatch90_reg(1) <= delayMatch90_reg_next(1);
        delayMatch90_reg(2) <= delayMatch90_reg_next(2);
        delayMatch90_reg(3) <= delayMatch90_reg_next(3);
        delayMatch90_reg(4) <= delayMatch90_reg_next(4);
        delayMatch90_reg(5) <= delayMatch90_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch90_process;

  stateControl_90 <= delayMatch90_reg(5);
  delayMatch90_reg_next(0) <= stateControl_89;
  delayMatch90_reg_next(1) <= delayMatch90_reg(0);
  delayMatch90_reg_next(2) <= delayMatch90_reg(1);
  delayMatch90_reg_next(3) <= delayMatch90_reg(2);
  delayMatch90_reg_next(4) <= delayMatch90_reg(3);
  delayMatch90_reg_next(5) <= delayMatch90_reg(4);

  dqxy_phase_voltage_per_switching_state_44_1 <= signed(dqxy_phase_voltage_per_switching_state_44);

  Delay180_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay180_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay180_out1 <= dqxy_phase_voltage_per_switching_state_44_1;
      END IF;
    END IF;
  END PROCESS Delay180_process;


  
  Switch_on46_out1_1 <= Delay91_out1 WHEN stateControl_90 = '0' ELSE
      Switch_on46_out1;

  Delay91_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay91_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay91_out1 <= Switch_on46_out1_1;
      END IF;
    END IF;
  END PROCESS Delay91_process;


  
  Switch_on46_out1 <= Delay91_out1 WHEN switch_compare_1_44 = '0' ELSE
      Data_Type_Conversion41_out1;

  
  switch_compare_1_45 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_91 <= '1';

  delayMatch92_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch92_reg(0) <= '0';
        delayMatch92_reg(1) <= '0';
        delayMatch92_reg(2) <= '0';
        delayMatch92_reg(3) <= '0';
        delayMatch92_reg(4) <= '0';
        delayMatch92_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch92_reg(0) <= delayMatch92_reg_next(0);
        delayMatch92_reg(1) <= delayMatch92_reg_next(1);
        delayMatch92_reg(2) <= delayMatch92_reg_next(2);
        delayMatch92_reg(3) <= delayMatch92_reg_next(3);
        delayMatch92_reg(4) <= delayMatch92_reg_next(4);
        delayMatch92_reg(5) <= delayMatch92_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch92_process;

  stateControl_92 <= delayMatch92_reg(5);
  delayMatch92_reg_next(0) <= stateControl_91;
  delayMatch92_reg_next(1) <= delayMatch92_reg(0);
  delayMatch92_reg_next(2) <= delayMatch92_reg(1);
  delayMatch92_reg_next(3) <= delayMatch92_reg(2);
  delayMatch92_reg_next(4) <= delayMatch92_reg(3);
  delayMatch92_reg_next(5) <= delayMatch92_reg(4);

  dqxy_phase_voltage_per_switching_state_45_1 <= signed(dqxy_phase_voltage_per_switching_state_45);

  Delay181_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay181_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay181_out1 <= dqxy_phase_voltage_per_switching_state_45_1;
      END IF;
    END IF;
  END PROCESS Delay181_process;


  
  Switch_on45_out1_1 <= Delay90_out1 WHEN stateControl_92 = '0' ELSE
      Switch_on45_out1;

  Delay90_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay90_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay90_out1 <= Switch_on45_out1_1;
      END IF;
    END IF;
  END PROCESS Delay90_process;


  
  Switch_on45_out1 <= Delay90_out1 WHEN switch_compare_1_45 = '0' ELSE
      Data_Type_Conversion40_out1;

  
  switch_compare_1_46 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_93 <= '1';

  delayMatch94_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch94_reg(0) <= '0';
        delayMatch94_reg(1) <= '0';
        delayMatch94_reg(2) <= '0';
        delayMatch94_reg(3) <= '0';
        delayMatch94_reg(4) <= '0';
        delayMatch94_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch94_reg(0) <= delayMatch94_reg_next(0);
        delayMatch94_reg(1) <= delayMatch94_reg_next(1);
        delayMatch94_reg(2) <= delayMatch94_reg_next(2);
        delayMatch94_reg(3) <= delayMatch94_reg_next(3);
        delayMatch94_reg(4) <= delayMatch94_reg_next(4);
        delayMatch94_reg(5) <= delayMatch94_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch94_process;

  stateControl_94 <= delayMatch94_reg(5);
  delayMatch94_reg_next(0) <= stateControl_93;
  delayMatch94_reg_next(1) <= delayMatch94_reg(0);
  delayMatch94_reg_next(2) <= delayMatch94_reg(1);
  delayMatch94_reg_next(3) <= delayMatch94_reg(2);
  delayMatch94_reg_next(4) <= delayMatch94_reg(3);
  delayMatch94_reg_next(5) <= delayMatch94_reg(4);

  dqxy_phase_voltage_per_switching_state_46_1 <= signed(dqxy_phase_voltage_per_switching_state_46);

  Delay182_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay182_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay182_out1 <= dqxy_phase_voltage_per_switching_state_46_1;
      END IF;
    END IF;
  END PROCESS Delay182_process;


  
  Switch_on44_out1_1 <= Delay89_out1 WHEN stateControl_94 = '0' ELSE
      Switch_on44_out1;

  Delay89_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay89_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay89_out1 <= Switch_on44_out1_1;
      END IF;
    END IF;
  END PROCESS Delay89_process;


  
  Switch_on44_out1 <= Delay89_out1 WHEN switch_compare_1_46 = '0' ELSE
      Data_Type_Conversion39_out1;

  
  switch_compare_1_47 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_95 <= '1';

  delayMatch96_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch96_reg(0) <= '0';
        delayMatch96_reg(1) <= '0';
        delayMatch96_reg(2) <= '0';
        delayMatch96_reg(3) <= '0';
        delayMatch96_reg(4) <= '0';
        delayMatch96_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch96_reg(0) <= delayMatch96_reg_next(0);
        delayMatch96_reg(1) <= delayMatch96_reg_next(1);
        delayMatch96_reg(2) <= delayMatch96_reg_next(2);
        delayMatch96_reg(3) <= delayMatch96_reg_next(3);
        delayMatch96_reg(4) <= delayMatch96_reg_next(4);
        delayMatch96_reg(5) <= delayMatch96_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch96_process;

  stateControl_96 <= delayMatch96_reg(5);
  delayMatch96_reg_next(0) <= stateControl_95;
  delayMatch96_reg_next(1) <= delayMatch96_reg(0);
  delayMatch96_reg_next(2) <= delayMatch96_reg(1);
  delayMatch96_reg_next(3) <= delayMatch96_reg(2);
  delayMatch96_reg_next(4) <= delayMatch96_reg(3);
  delayMatch96_reg_next(5) <= delayMatch96_reg(4);

  dqxy_phase_voltage_per_switching_state_47_1 <= signed(dqxy_phase_voltage_per_switching_state_47);

  Delay183_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay183_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay183_out1 <= dqxy_phase_voltage_per_switching_state_47_1;
      END IF;
    END IF;
  END PROCESS Delay183_process;


  
  Switch_on43_out1_1 <= Delay88_out1 WHEN stateControl_96 = '0' ELSE
      Switch_on43_out1;

  Delay88_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay88_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay88_out1 <= Switch_on43_out1_1;
      END IF;
    END IF;
  END PROCESS Delay88_process;


  
  Switch_on43_out1 <= Delay88_out1 WHEN switch_compare_1_47 = '0' ELSE
      Data_Type_Conversion38_out1;

  
  switch_compare_1_48 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_97 <= '1';

  delayMatch98_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch98_reg(0) <= '0';
        delayMatch98_reg(1) <= '0';
        delayMatch98_reg(2) <= '0';
        delayMatch98_reg(3) <= '0';
        delayMatch98_reg(4) <= '0';
        delayMatch98_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch98_reg(0) <= delayMatch98_reg_next(0);
        delayMatch98_reg(1) <= delayMatch98_reg_next(1);
        delayMatch98_reg(2) <= delayMatch98_reg_next(2);
        delayMatch98_reg(3) <= delayMatch98_reg_next(3);
        delayMatch98_reg(4) <= delayMatch98_reg_next(4);
        delayMatch98_reg(5) <= delayMatch98_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch98_process;

  stateControl_98 <= delayMatch98_reg(5);
  delayMatch98_reg_next(0) <= stateControl_97;
  delayMatch98_reg_next(1) <= delayMatch98_reg(0);
  delayMatch98_reg_next(2) <= delayMatch98_reg(1);
  delayMatch98_reg_next(3) <= delayMatch98_reg(2);
  delayMatch98_reg_next(4) <= delayMatch98_reg(3);
  delayMatch98_reg_next(5) <= delayMatch98_reg(4);

  dqxy_phase_voltage_per_switching_state_48_1 <= signed(dqxy_phase_voltage_per_switching_state_48);

  Delay184_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay184_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay184_out1 <= dqxy_phase_voltage_per_switching_state_48_1;
      END IF;
    END IF;
  END PROCESS Delay184_process;


  
  Switch_on42_out1_1 <= Delay87_out1 WHEN stateControl_98 = '0' ELSE
      Switch_on42_out1;

  Delay87_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay87_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay87_out1 <= Switch_on42_out1_1;
      END IF;
    END IF;
  END PROCESS Delay87_process;


  
  Switch_on42_out1 <= Delay87_out1 WHEN switch_compare_1_48 = '0' ELSE
      Data_Type_Conversion37_out1;

  
  switch_compare_1_49 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_99 <= '1';

  delayMatch100_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch100_reg(0) <= '0';
        delayMatch100_reg(1) <= '0';
        delayMatch100_reg(2) <= '0';
        delayMatch100_reg(3) <= '0';
        delayMatch100_reg(4) <= '0';
        delayMatch100_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch100_reg(0) <= delayMatch100_reg_next(0);
        delayMatch100_reg(1) <= delayMatch100_reg_next(1);
        delayMatch100_reg(2) <= delayMatch100_reg_next(2);
        delayMatch100_reg(3) <= delayMatch100_reg_next(3);
        delayMatch100_reg(4) <= delayMatch100_reg_next(4);
        delayMatch100_reg(5) <= delayMatch100_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch100_process;

  stateControl_100 <= delayMatch100_reg(5);
  delayMatch100_reg_next(0) <= stateControl_99;
  delayMatch100_reg_next(1) <= delayMatch100_reg(0);
  delayMatch100_reg_next(2) <= delayMatch100_reg(1);
  delayMatch100_reg_next(3) <= delayMatch100_reg(2);
  delayMatch100_reg_next(4) <= delayMatch100_reg(3);
  delayMatch100_reg_next(5) <= delayMatch100_reg(4);

  dqxy_phase_voltage_per_switching_state_49_1 <= signed(dqxy_phase_voltage_per_switching_state_49);

  Delay185_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay185_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay185_out1 <= dqxy_phase_voltage_per_switching_state_49_1;
      END IF;
    END IF;
  END PROCESS Delay185_process;


  
  Switch_on41_out1_1 <= Delay86_out1 WHEN stateControl_100 = '0' ELSE
      Switch_on41_out1;

  Delay86_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay86_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay86_out1 <= Switch_on41_out1_1;
      END IF;
    END IF;
  END PROCESS Delay86_process;


  
  Switch_on41_out1 <= Delay86_out1 WHEN switch_compare_1_49 = '0' ELSE
      Data_Type_Conversion36_out1;

  
  switch_compare_1_50 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_101 <= '1';

  delayMatch102_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch102_reg(0) <= '0';
        delayMatch102_reg(1) <= '0';
        delayMatch102_reg(2) <= '0';
        delayMatch102_reg(3) <= '0';
        delayMatch102_reg(4) <= '0';
        delayMatch102_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch102_reg(0) <= delayMatch102_reg_next(0);
        delayMatch102_reg(1) <= delayMatch102_reg_next(1);
        delayMatch102_reg(2) <= delayMatch102_reg_next(2);
        delayMatch102_reg(3) <= delayMatch102_reg_next(3);
        delayMatch102_reg(4) <= delayMatch102_reg_next(4);
        delayMatch102_reg(5) <= delayMatch102_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch102_process;

  stateControl_102 <= delayMatch102_reg(5);
  delayMatch102_reg_next(0) <= stateControl_101;
  delayMatch102_reg_next(1) <= delayMatch102_reg(0);
  delayMatch102_reg_next(2) <= delayMatch102_reg(1);
  delayMatch102_reg_next(3) <= delayMatch102_reg(2);
  delayMatch102_reg_next(4) <= delayMatch102_reg(3);
  delayMatch102_reg_next(5) <= delayMatch102_reg(4);

  dqxy_phase_voltage_per_switching_state_50_1 <= signed(dqxy_phase_voltage_per_switching_state_50);

  Delay186_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay186_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay186_out1 <= dqxy_phase_voltage_per_switching_state_50_1;
      END IF;
    END IF;
  END PROCESS Delay186_process;


  
  Switch_on40_out1_1 <= Delay85_out1 WHEN stateControl_102 = '0' ELSE
      Switch_on40_out1;

  Delay85_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay85_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay85_out1 <= Switch_on40_out1_1;
      END IF;
    END IF;
  END PROCESS Delay85_process;


  
  Switch_on40_out1 <= Delay85_out1 WHEN switch_compare_1_50 = '0' ELSE
      Data_Type_Conversion35_out1;

  
  switch_compare_1_51 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_103 <= '1';

  delayMatch104_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch104_reg(0) <= '0';
        delayMatch104_reg(1) <= '0';
        delayMatch104_reg(2) <= '0';
        delayMatch104_reg(3) <= '0';
        delayMatch104_reg(4) <= '0';
        delayMatch104_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch104_reg(0) <= delayMatch104_reg_next(0);
        delayMatch104_reg(1) <= delayMatch104_reg_next(1);
        delayMatch104_reg(2) <= delayMatch104_reg_next(2);
        delayMatch104_reg(3) <= delayMatch104_reg_next(3);
        delayMatch104_reg(4) <= delayMatch104_reg_next(4);
        delayMatch104_reg(5) <= delayMatch104_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch104_process;

  stateControl_104 <= delayMatch104_reg(5);
  delayMatch104_reg_next(0) <= stateControl_103;
  delayMatch104_reg_next(1) <= delayMatch104_reg(0);
  delayMatch104_reg_next(2) <= delayMatch104_reg(1);
  delayMatch104_reg_next(3) <= delayMatch104_reg(2);
  delayMatch104_reg_next(4) <= delayMatch104_reg(3);
  delayMatch104_reg_next(5) <= delayMatch104_reg(4);

  dqxy_phase_voltage_per_switching_state_51_1 <= signed(dqxy_phase_voltage_per_switching_state_51);

  Delay187_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay187_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay187_out1 <= dqxy_phase_voltage_per_switching_state_51_1;
      END IF;
    END IF;
  END PROCESS Delay187_process;


  
  Switch_on39_out1_1 <= Delay84_out1 WHEN stateControl_104 = '0' ELSE
      Switch_on39_out1;

  Delay84_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay84_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay84_out1 <= Switch_on39_out1_1;
      END IF;
    END IF;
  END PROCESS Delay84_process;


  
  Switch_on39_out1 <= Delay84_out1 WHEN switch_compare_1_51 = '0' ELSE
      Data_Type_Conversion34_out1;

  
  switch_compare_1_52 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_105 <= '1';

  delayMatch106_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch106_reg(0) <= '0';
        delayMatch106_reg(1) <= '0';
        delayMatch106_reg(2) <= '0';
        delayMatch106_reg(3) <= '0';
        delayMatch106_reg(4) <= '0';
        delayMatch106_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch106_reg(0) <= delayMatch106_reg_next(0);
        delayMatch106_reg(1) <= delayMatch106_reg_next(1);
        delayMatch106_reg(2) <= delayMatch106_reg_next(2);
        delayMatch106_reg(3) <= delayMatch106_reg_next(3);
        delayMatch106_reg(4) <= delayMatch106_reg_next(4);
        delayMatch106_reg(5) <= delayMatch106_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch106_process;

  stateControl_106 <= delayMatch106_reg(5);
  delayMatch106_reg_next(0) <= stateControl_105;
  delayMatch106_reg_next(1) <= delayMatch106_reg(0);
  delayMatch106_reg_next(2) <= delayMatch106_reg(1);
  delayMatch106_reg_next(3) <= delayMatch106_reg(2);
  delayMatch106_reg_next(4) <= delayMatch106_reg(3);
  delayMatch106_reg_next(5) <= delayMatch106_reg(4);

  dqxy_phase_voltage_per_switching_state_52_1 <= signed(dqxy_phase_voltage_per_switching_state_52);

  Delay188_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay188_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay188_out1 <= dqxy_phase_voltage_per_switching_state_52_1;
      END IF;
    END IF;
  END PROCESS Delay188_process;


  
  Switch_on38_out1_1 <= Delay83_out1 WHEN stateControl_106 = '0' ELSE
      Switch_on38_out1;

  Delay83_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay83_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay83_out1 <= Switch_on38_out1_1;
      END IF;
    END IF;
  END PROCESS Delay83_process;


  
  Switch_on38_out1 <= Delay83_out1 WHEN switch_compare_1_52 = '0' ELSE
      Data_Type_Conversion33_out1;

  
  switch_compare_1_53 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_107 <= '1';

  delayMatch108_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch108_reg(0) <= '0';
        delayMatch108_reg(1) <= '0';
        delayMatch108_reg(2) <= '0';
        delayMatch108_reg(3) <= '0';
        delayMatch108_reg(4) <= '0';
        delayMatch108_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch108_reg(0) <= delayMatch108_reg_next(0);
        delayMatch108_reg(1) <= delayMatch108_reg_next(1);
        delayMatch108_reg(2) <= delayMatch108_reg_next(2);
        delayMatch108_reg(3) <= delayMatch108_reg_next(3);
        delayMatch108_reg(4) <= delayMatch108_reg_next(4);
        delayMatch108_reg(5) <= delayMatch108_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch108_process;

  stateControl_108 <= delayMatch108_reg(5);
  delayMatch108_reg_next(0) <= stateControl_107;
  delayMatch108_reg_next(1) <= delayMatch108_reg(0);
  delayMatch108_reg_next(2) <= delayMatch108_reg(1);
  delayMatch108_reg_next(3) <= delayMatch108_reg(2);
  delayMatch108_reg_next(4) <= delayMatch108_reg(3);
  delayMatch108_reg_next(5) <= delayMatch108_reg(4);

  dqxy_phase_voltage_per_switching_state_53_1 <= signed(dqxy_phase_voltage_per_switching_state_53);

  Delay189_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay189_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay189_out1 <= dqxy_phase_voltage_per_switching_state_53_1;
      END IF;
    END IF;
  END PROCESS Delay189_process;


  
  Switch_on37_out1_1 <= Delay82_out1 WHEN stateControl_108 = '0' ELSE
      Switch_on37_out1;

  Delay82_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay82_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay82_out1 <= Switch_on37_out1_1;
      END IF;
    END IF;
  END PROCESS Delay82_process;


  
  Switch_on37_out1 <= Delay82_out1 WHEN switch_compare_1_53 = '0' ELSE
      Data_Type_Conversion32_out1;

  
  switch_compare_1_54 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_109 <= '1';

  delayMatch110_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch110_reg(0) <= '0';
        delayMatch110_reg(1) <= '0';
        delayMatch110_reg(2) <= '0';
        delayMatch110_reg(3) <= '0';
        delayMatch110_reg(4) <= '0';
        delayMatch110_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch110_reg(0) <= delayMatch110_reg_next(0);
        delayMatch110_reg(1) <= delayMatch110_reg_next(1);
        delayMatch110_reg(2) <= delayMatch110_reg_next(2);
        delayMatch110_reg(3) <= delayMatch110_reg_next(3);
        delayMatch110_reg(4) <= delayMatch110_reg_next(4);
        delayMatch110_reg(5) <= delayMatch110_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch110_process;

  stateControl_110 <= delayMatch110_reg(5);
  delayMatch110_reg_next(0) <= stateControl_109;
  delayMatch110_reg_next(1) <= delayMatch110_reg(0);
  delayMatch110_reg_next(2) <= delayMatch110_reg(1);
  delayMatch110_reg_next(3) <= delayMatch110_reg(2);
  delayMatch110_reg_next(4) <= delayMatch110_reg(3);
  delayMatch110_reg_next(5) <= delayMatch110_reg(4);

  dqxy_phase_voltage_per_switching_state_54_1 <= signed(dqxy_phase_voltage_per_switching_state_54);

  Delay190_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay190_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay190_out1 <= dqxy_phase_voltage_per_switching_state_54_1;
      END IF;
    END IF;
  END PROCESS Delay190_process;


  
  Switch_on36_out1_1 <= Delay81_out1 WHEN stateControl_110 = '0' ELSE
      Switch_on36_out1;

  Delay81_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay81_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay81_out1 <= Switch_on36_out1_1;
      END IF;
    END IF;
  END PROCESS Delay81_process;


  
  Switch_on36_out1 <= Delay81_out1 WHEN switch_compare_1_54 = '0' ELSE
      Data_Type_Conversion31_out1;

  
  switch_compare_1_55 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_111 <= '1';

  delayMatch112_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch112_reg(0) <= '0';
        delayMatch112_reg(1) <= '0';
        delayMatch112_reg(2) <= '0';
        delayMatch112_reg(3) <= '0';
        delayMatch112_reg(4) <= '0';
        delayMatch112_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch112_reg(0) <= delayMatch112_reg_next(0);
        delayMatch112_reg(1) <= delayMatch112_reg_next(1);
        delayMatch112_reg(2) <= delayMatch112_reg_next(2);
        delayMatch112_reg(3) <= delayMatch112_reg_next(3);
        delayMatch112_reg(4) <= delayMatch112_reg_next(4);
        delayMatch112_reg(5) <= delayMatch112_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch112_process;

  stateControl_112 <= delayMatch112_reg(5);
  delayMatch112_reg_next(0) <= stateControl_111;
  delayMatch112_reg_next(1) <= delayMatch112_reg(0);
  delayMatch112_reg_next(2) <= delayMatch112_reg(1);
  delayMatch112_reg_next(3) <= delayMatch112_reg(2);
  delayMatch112_reg_next(4) <= delayMatch112_reg(3);
  delayMatch112_reg_next(5) <= delayMatch112_reg(4);

  dqxy_phase_voltage_per_switching_state_55_1 <= signed(dqxy_phase_voltage_per_switching_state_55);

  Delay191_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay191_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay191_out1 <= dqxy_phase_voltage_per_switching_state_55_1;
      END IF;
    END IF;
  END PROCESS Delay191_process;


  
  Switch_on35_out1_1 <= Delay80_out1 WHEN stateControl_112 = '0' ELSE
      Switch_on35_out1;

  Delay80_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay80_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay80_out1 <= Switch_on35_out1_1;
      END IF;
    END IF;
  END PROCESS Delay80_process;


  
  Switch_on35_out1 <= Delay80_out1 WHEN switch_compare_1_55 = '0' ELSE
      Data_Type_Conversion30_out1;

  
  switch_compare_1_56 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_113 <= '1';

  delayMatch114_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch114_reg(0) <= '0';
        delayMatch114_reg(1) <= '0';
        delayMatch114_reg(2) <= '0';
        delayMatch114_reg(3) <= '0';
        delayMatch114_reg(4) <= '0';
        delayMatch114_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch114_reg(0) <= delayMatch114_reg_next(0);
        delayMatch114_reg(1) <= delayMatch114_reg_next(1);
        delayMatch114_reg(2) <= delayMatch114_reg_next(2);
        delayMatch114_reg(3) <= delayMatch114_reg_next(3);
        delayMatch114_reg(4) <= delayMatch114_reg_next(4);
        delayMatch114_reg(5) <= delayMatch114_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch114_process;

  stateControl_114 <= delayMatch114_reg(5);
  delayMatch114_reg_next(0) <= stateControl_113;
  delayMatch114_reg_next(1) <= delayMatch114_reg(0);
  delayMatch114_reg_next(2) <= delayMatch114_reg(1);
  delayMatch114_reg_next(3) <= delayMatch114_reg(2);
  delayMatch114_reg_next(4) <= delayMatch114_reg(3);
  delayMatch114_reg_next(5) <= delayMatch114_reg(4);

  dqxy_phase_voltage_per_switching_state_56_1 <= signed(dqxy_phase_voltage_per_switching_state_56);

  Delay192_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay192_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay192_out1 <= dqxy_phase_voltage_per_switching_state_56_1;
      END IF;
    END IF;
  END PROCESS Delay192_process;


  
  Switch_on34_out1_1 <= Delay79_out1 WHEN stateControl_114 = '0' ELSE
      Switch_on34_out1;

  Delay79_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay79_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay79_out1 <= Switch_on34_out1_1;
      END IF;
    END IF;
  END PROCESS Delay79_process;


  
  Switch_on34_out1 <= Delay79_out1 WHEN switch_compare_1_56 = '0' ELSE
      Data_Type_Conversion29_out1;

  
  switch_compare_1_57 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_115 <= '1';

  delayMatch116_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch116_reg(0) <= '0';
        delayMatch116_reg(1) <= '0';
        delayMatch116_reg(2) <= '0';
        delayMatch116_reg(3) <= '0';
        delayMatch116_reg(4) <= '0';
        delayMatch116_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch116_reg(0) <= delayMatch116_reg_next(0);
        delayMatch116_reg(1) <= delayMatch116_reg_next(1);
        delayMatch116_reg(2) <= delayMatch116_reg_next(2);
        delayMatch116_reg(3) <= delayMatch116_reg_next(3);
        delayMatch116_reg(4) <= delayMatch116_reg_next(4);
        delayMatch116_reg(5) <= delayMatch116_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch116_process;

  stateControl_116 <= delayMatch116_reg(5);
  delayMatch116_reg_next(0) <= stateControl_115;
  delayMatch116_reg_next(1) <= delayMatch116_reg(0);
  delayMatch116_reg_next(2) <= delayMatch116_reg(1);
  delayMatch116_reg_next(3) <= delayMatch116_reg(2);
  delayMatch116_reg_next(4) <= delayMatch116_reg(3);
  delayMatch116_reg_next(5) <= delayMatch116_reg(4);

  dqxy_phase_voltage_per_switching_state_57_1 <= signed(dqxy_phase_voltage_per_switching_state_57);

  Delay193_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay193_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay193_out1 <= dqxy_phase_voltage_per_switching_state_57_1;
      END IF;
    END IF;
  END PROCESS Delay193_process;


  
  Switch_on33_out1_1 <= Delay78_out1 WHEN stateControl_116 = '0' ELSE
      Switch_on33_out1;

  Delay78_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay78_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay78_out1 <= Switch_on33_out1_1;
      END IF;
    END IF;
  END PROCESS Delay78_process;


  
  Switch_on33_out1 <= Delay78_out1 WHEN switch_compare_1_57 = '0' ELSE
      Data_Type_Conversion28_out1;

  
  switch_compare_1_58 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_117 <= '1';

  delayMatch118_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch118_reg(0) <= '0';
        delayMatch118_reg(1) <= '0';
        delayMatch118_reg(2) <= '0';
        delayMatch118_reg(3) <= '0';
        delayMatch118_reg(4) <= '0';
        delayMatch118_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch118_reg(0) <= delayMatch118_reg_next(0);
        delayMatch118_reg(1) <= delayMatch118_reg_next(1);
        delayMatch118_reg(2) <= delayMatch118_reg_next(2);
        delayMatch118_reg(3) <= delayMatch118_reg_next(3);
        delayMatch118_reg(4) <= delayMatch118_reg_next(4);
        delayMatch118_reg(5) <= delayMatch118_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch118_process;

  stateControl_118 <= delayMatch118_reg(5);
  delayMatch118_reg_next(0) <= stateControl_117;
  delayMatch118_reg_next(1) <= delayMatch118_reg(0);
  delayMatch118_reg_next(2) <= delayMatch118_reg(1);
  delayMatch118_reg_next(3) <= delayMatch118_reg(2);
  delayMatch118_reg_next(4) <= delayMatch118_reg(3);
  delayMatch118_reg_next(5) <= delayMatch118_reg(4);

  dqxy_phase_voltage_per_switching_state_58_1 <= signed(dqxy_phase_voltage_per_switching_state_58);

  Delay194_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay194_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay194_out1 <= dqxy_phase_voltage_per_switching_state_58_1;
      END IF;
    END IF;
  END PROCESS Delay194_process;


  
  Switch_on32_out1_1 <= Delay77_out1 WHEN stateControl_118 = '0' ELSE
      Switch_on32_out1;

  Delay77_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay77_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay77_out1 <= Switch_on32_out1_1;
      END IF;
    END IF;
  END PROCESS Delay77_process;


  
  Switch_on32_out1 <= Delay77_out1 WHEN switch_compare_1_58 = '0' ELSE
      Data_Type_Conversion27_out1;

  
  switch_compare_1_59 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_119 <= '1';

  delayMatch120_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch120_reg(0) <= '0';
        delayMatch120_reg(1) <= '0';
        delayMatch120_reg(2) <= '0';
        delayMatch120_reg(3) <= '0';
        delayMatch120_reg(4) <= '0';
        delayMatch120_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch120_reg(0) <= delayMatch120_reg_next(0);
        delayMatch120_reg(1) <= delayMatch120_reg_next(1);
        delayMatch120_reg(2) <= delayMatch120_reg_next(2);
        delayMatch120_reg(3) <= delayMatch120_reg_next(3);
        delayMatch120_reg(4) <= delayMatch120_reg_next(4);
        delayMatch120_reg(5) <= delayMatch120_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch120_process;

  stateControl_120 <= delayMatch120_reg(5);
  delayMatch120_reg_next(0) <= stateControl_119;
  delayMatch120_reg_next(1) <= delayMatch120_reg(0);
  delayMatch120_reg_next(2) <= delayMatch120_reg(1);
  delayMatch120_reg_next(3) <= delayMatch120_reg(2);
  delayMatch120_reg_next(4) <= delayMatch120_reg(3);
  delayMatch120_reg_next(5) <= delayMatch120_reg(4);

  dqxy_phase_voltage_per_switching_state_59_1 <= signed(dqxy_phase_voltage_per_switching_state_59);

  Delay195_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay195_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay195_out1 <= dqxy_phase_voltage_per_switching_state_59_1;
      END IF;
    END IF;
  END PROCESS Delay195_process;


  
  Switch_on31_out1_1 <= Delay76_out1 WHEN stateControl_120 = '0' ELSE
      Switch_on31_out1;

  Delay76_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay76_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay76_out1 <= Switch_on31_out1_1;
      END IF;
    END IF;
  END PROCESS Delay76_process;


  
  Switch_on31_out1 <= Delay76_out1 WHEN switch_compare_1_59 = '0' ELSE
      Data_Type_Conversion26_out1;

  
  switch_compare_1_60 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay23_out1 <= SampleTime_div_Ld_AXI;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay20_out1 <= Switch_on21_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  
  Switch_on21_out1 <= Delay20_out1 WHEN switch_compare_1_60 = '0' ELSE
      Delay23_out1;

  
  switch_compare_1_61 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay24_out1 <= SampleTime_div_Lq_AXI;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay19_out1 <= Switch_on20_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  Switch_on20_out1 <= Delay19_out1 WHEN switch_compare_1_61 = '0' ELSE
      Delay24_out1;

  
  switch_compare_1_62 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay25_out1 <= SampleTime_div_Lx_AXI;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay18_out1 <= Switch_on19_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Switch_on19_out1 <= Delay18_out1 WHEN switch_compare_1_62 = '0' ELSE
      Delay25_out1;

  
  switch_compare_1_63 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay26_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay26_out1 <= SampleTime_div_Ly_AXI;
      END IF;
    END IF;
  END PROCESS Delay26_process;


  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay17_out1 <= Switch_on18_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  Switch_on18_out1 <= Delay17_out1 WHEN switch_compare_1_63 = '0' ELSE
      Delay26_out1;

  
  switch_compare_1_64 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_121 <= '1';

  delayMatch122_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch122_reg(0) <= '0';
        delayMatch122_reg(1) <= '0';
        delayMatch122_reg(2) <= '0';
        delayMatch122_reg(3) <= '0';
        delayMatch122_reg(4) <= '0';
        delayMatch122_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch122_reg(0) <= delayMatch122_reg_next(0);
        delayMatch122_reg(1) <= delayMatch122_reg_next(1);
        delayMatch122_reg(2) <= delayMatch122_reg_next(2);
        delayMatch122_reg(3) <= delayMatch122_reg_next(3);
        delayMatch122_reg(4) <= delayMatch122_reg_next(4);
        delayMatch122_reg(5) <= delayMatch122_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch122_process;

  stateControl_122 <= delayMatch122_reg(5);
  delayMatch122_reg_next(0) <= stateControl_121;
  delayMatch122_reg_next(1) <= delayMatch122_reg(0);
  delayMatch122_reg_next(2) <= delayMatch122_reg(1);
  delayMatch122_reg_next(3) <= delayMatch122_reg(2);
  delayMatch122_reg_next(4) <= delayMatch122_reg(3);
  delayMatch122_reg_next(5) <= delayMatch122_reg(4);

  Delay56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay56_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay56_out1 <= use_AXI;
      END IF;
    END IF;
  END PROCESS Delay56_process;


  
  switch_compare_1_65 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  id_k_1_signed <= signed(id_k_1);

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay27_out1 <= id_k_1_signed;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  id_k_1_AXI_signed <= signed(id_k_1_AXI);

  Delay47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay47_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay47_out1 <= id_k_1_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay47_process;


  
  Switch_on22_out1 <= Delay27_out1 WHEN switch_compare_1_65 = '0' ELSE
      Delay47_out1;

  
  Switch_on17_out1_1 <= Delay16_out1 WHEN stateControl_122 = '0' ELSE
      Switch_on17_out1;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay16_out1 <= Switch_on17_out1_1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Switch_on17_out1 <= Delay16_out1 WHEN switch_compare_1_64 = '0' ELSE
      Data_Type_Conversion7_out1;

  
  switch_compare_1_66 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_123 <= '1';

  delayMatch124_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch124_reg(0) <= '0';
        delayMatch124_reg(1) <= '0';
        delayMatch124_reg(2) <= '0';
        delayMatch124_reg(3) <= '0';
        delayMatch124_reg(4) <= '0';
        delayMatch124_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch124_reg(0) <= delayMatch124_reg_next(0);
        delayMatch124_reg(1) <= delayMatch124_reg_next(1);
        delayMatch124_reg(2) <= delayMatch124_reg_next(2);
        delayMatch124_reg(3) <= delayMatch124_reg_next(3);
        delayMatch124_reg(4) <= delayMatch124_reg_next(4);
        delayMatch124_reg(5) <= delayMatch124_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch124_process;

  stateControl_124 <= delayMatch124_reg(5);
  delayMatch124_reg_next(0) <= stateControl_123;
  delayMatch124_reg_next(1) <= delayMatch124_reg(0);
  delayMatch124_reg_next(2) <= delayMatch124_reg(1);
  delayMatch124_reg_next(3) <= delayMatch124_reg(2);
  delayMatch124_reg_next(4) <= delayMatch124_reg(3);
  delayMatch124_reg_next(5) <= delayMatch124_reg(4);

  
  switch_compare_1_67 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  iq_k_1_signed <= signed(iq_k_1);

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay28_out1 <= iq_k_1_signed;
      END IF;
    END IF;
  END PROCESS Delay28_process;


  iq_k_1_AXI_signed <= signed(iq_k_1_AXI);

  Delay48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay48_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay48_out1 <= iq_k_1_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay48_process;


  
  Switch_on23_out1 <= Delay28_out1 WHEN switch_compare_1_67 = '0' ELSE
      Delay48_out1;

  
  Switch_on16_out1_1 <= Delay15_out1 WHEN stateControl_124 = '0' ELSE
      Switch_on16_out1;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay15_out1 <= Switch_on16_out1_1;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  
  Switch_on16_out1 <= Delay15_out1 WHEN switch_compare_1_66 = '0' ELSE
      Data_Type_Conversion8_out1;

  
  switch_compare_1_68 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_125 <= '1';

  delayMatch126_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch126_reg(0) <= '0';
        delayMatch126_reg(1) <= '0';
        delayMatch126_reg(2) <= '0';
        delayMatch126_reg(3) <= '0';
        delayMatch126_reg(4) <= '0';
        delayMatch126_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch126_reg(0) <= delayMatch126_reg_next(0);
        delayMatch126_reg(1) <= delayMatch126_reg_next(1);
        delayMatch126_reg(2) <= delayMatch126_reg_next(2);
        delayMatch126_reg(3) <= delayMatch126_reg_next(3);
        delayMatch126_reg(4) <= delayMatch126_reg_next(4);
        delayMatch126_reg(5) <= delayMatch126_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch126_process;

  stateControl_126 <= delayMatch126_reg(5);
  delayMatch126_reg_next(0) <= stateControl_125;
  delayMatch126_reg_next(1) <= delayMatch126_reg(0);
  delayMatch126_reg_next(2) <= delayMatch126_reg(1);
  delayMatch126_reg_next(3) <= delayMatch126_reg(2);
  delayMatch126_reg_next(4) <= delayMatch126_reg(3);
  delayMatch126_reg_next(5) <= delayMatch126_reg(4);

  
  switch_compare_1_69 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  ix_k_1_signed <= signed(ix_k_1);

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay29_out1 <= ix_k_1_signed;
      END IF;
    END IF;
  END PROCESS Delay29_process;


  ix_k_1_AXI_signed <= signed(ix_k_1_AXI);

  Delay49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay49_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay49_out1 <= ix_k_1_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay49_process;


  
  Switch_on24_out1 <= Delay29_out1 WHEN switch_compare_1_69 = '0' ELSE
      Delay49_out1;

  
  Switch_on15_out1_1 <= Delay14_out1 WHEN stateControl_126 = '0' ELSE
      Switch_on15_out1;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch_on15_out1_1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch_on15_out1 <= Delay14_out1 WHEN switch_compare_1_68 = '0' ELSE
      Data_Type_Conversion9_out1;

  
  switch_compare_1_70 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_127 <= '1';

  delayMatch128_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch128_reg(0) <= '0';
        delayMatch128_reg(1) <= '0';
        delayMatch128_reg(2) <= '0';
        delayMatch128_reg(3) <= '0';
        delayMatch128_reg(4) <= '0';
        delayMatch128_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch128_reg(0) <= delayMatch128_reg_next(0);
        delayMatch128_reg(1) <= delayMatch128_reg_next(1);
        delayMatch128_reg(2) <= delayMatch128_reg_next(2);
        delayMatch128_reg(3) <= delayMatch128_reg_next(3);
        delayMatch128_reg(4) <= delayMatch128_reg_next(4);
        delayMatch128_reg(5) <= delayMatch128_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch128_process;

  stateControl_128 <= delayMatch128_reg(5);
  delayMatch128_reg_next(0) <= stateControl_127;
  delayMatch128_reg_next(1) <= delayMatch128_reg(0);
  delayMatch128_reg_next(2) <= delayMatch128_reg(1);
  delayMatch128_reg_next(3) <= delayMatch128_reg(2);
  delayMatch128_reg_next(4) <= delayMatch128_reg(3);
  delayMatch128_reg_next(5) <= delayMatch128_reg(4);

  
  switch_compare_1_71 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  iy_k_1_signed <= signed(iy_k_1);

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay30_out1 <= iy_k_1_signed;
      END IF;
    END IF;
  END PROCESS Delay30_process;


  iy_k_1_AXI_signed <= signed(iy_k_1_AXI);

  Delay50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay50_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay50_out1 <= iy_k_1_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay50_process;


  
  Switch_on25_out1 <= Delay30_out1 WHEN switch_compare_1_71 = '0' ELSE
      Delay50_out1;

  
  Switch_on13_out1_1 <= Delay13_out1 WHEN stateControl_128 = '0' ELSE
      Switch_on13_out1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch_on13_out1_1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch_on13_out1 <= Delay13_out1 WHEN switch_compare_1_70 = '0' ELSE
      Data_Type_Conversion10_out1;

  
  switch_compare_1_72 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay31_out1 <= Rs_AXI;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay12_out1 <= Switch_on12_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  Switch_on12_out1 <= Delay12_out1 WHEN switch_compare_1_72 = '0' ELSE
      Delay31_out1;

  Delay60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay60_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay60_out1 <= valid_in_ADC;
      END IF;
    END IF;
  END PROCESS Delay60_process;


  delayMatch132_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch132_reg(0) <= '0';
        delayMatch132_reg(1) <= '0';
        delayMatch132_reg(2) <= '0';
        delayMatch132_reg(3) <= '0';
        delayMatch132_reg(4) <= '0';
        delayMatch132_reg(5) <= '0';
        delayMatch132_reg(6) <= '0';
        delayMatch132_reg(7) <= '0';
        delayMatch132_reg(8) <= '0';
        delayMatch132_reg(9) <= '0';
        delayMatch132_reg(10) <= '0';
        delayMatch132_reg(11) <= '0';
      ELSIF enb = '1' THEN
        delayMatch132_reg(0) <= delayMatch132_reg_next(0);
        delayMatch132_reg(1) <= delayMatch132_reg_next(1);
        delayMatch132_reg(2) <= delayMatch132_reg_next(2);
        delayMatch132_reg(3) <= delayMatch132_reg_next(3);
        delayMatch132_reg(4) <= delayMatch132_reg_next(4);
        delayMatch132_reg(5) <= delayMatch132_reg_next(5);
        delayMatch132_reg(6) <= delayMatch132_reg_next(6);
        delayMatch132_reg(7) <= delayMatch132_reg_next(7);
        delayMatch132_reg(8) <= delayMatch132_reg_next(8);
        delayMatch132_reg(9) <= delayMatch132_reg_next(9);
        delayMatch132_reg(10) <= delayMatch132_reg_next(10);
        delayMatch132_reg(11) <= delayMatch132_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch132_process;

  End_Cycle_6 <= delayMatch132_reg(11);
  delayMatch132_reg_next(0) <= End_Cycle_5;
  delayMatch132_reg_next(1) <= delayMatch132_reg(0);
  delayMatch132_reg_next(2) <= delayMatch132_reg(1);
  delayMatch132_reg_next(3) <= delayMatch132_reg(2);
  delayMatch132_reg_next(4) <= delayMatch132_reg(3);
  delayMatch132_reg_next(5) <= delayMatch132_reg(4);
  delayMatch132_reg_next(6) <= delayMatch132_reg(5);
  delayMatch132_reg_next(7) <= delayMatch132_reg(6);
  delayMatch132_reg_next(8) <= delayMatch132_reg(7);
  delayMatch132_reg_next(9) <= delayMatch132_reg(8);
  delayMatch132_reg_next(10) <= delayMatch132_reg(9);
  delayMatch132_reg_next(11) <= delayMatch132_reg(10);

  
  switch_compare_1_73 <= '1' WHEN End_Cycle_6 = '1' ELSE
      '0';

  stateControl_129 <= '1';

  delayMatch131_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch131_reg(0) <= '0';
        delayMatch131_reg(1) <= '0';
        delayMatch131_reg(2) <= '0';
        delayMatch131_reg(3) <= '0';
        delayMatch131_reg(4) <= '0';
        delayMatch131_reg(5) <= '0';
        delayMatch131_reg(6) <= '0';
        delayMatch131_reg(7) <= '0';
        delayMatch131_reg(8) <= '0';
        delayMatch131_reg(9) <= '0';
        delayMatch131_reg(10) <= '0';
        delayMatch131_reg(11) <= '0';
      ELSIF enb = '1' THEN
        delayMatch131_reg(0) <= delayMatch131_reg_next(0);
        delayMatch131_reg(1) <= delayMatch131_reg_next(1);
        delayMatch131_reg(2) <= delayMatch131_reg_next(2);
        delayMatch131_reg(3) <= delayMatch131_reg_next(3);
        delayMatch131_reg(4) <= delayMatch131_reg_next(4);
        delayMatch131_reg(5) <= delayMatch131_reg_next(5);
        delayMatch131_reg(6) <= delayMatch131_reg_next(6);
        delayMatch131_reg(7) <= delayMatch131_reg_next(7);
        delayMatch131_reg(8) <= delayMatch131_reg_next(8);
        delayMatch131_reg(9) <= delayMatch131_reg_next(9);
        delayMatch131_reg(10) <= delayMatch131_reg_next(10);
        delayMatch131_reg(11) <= delayMatch131_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch131_process;

  stateControl_130 <= delayMatch131_reg(11);
  delayMatch131_reg_next(0) <= stateControl_129;
  delayMatch131_reg_next(1) <= delayMatch131_reg(0);
  delayMatch131_reg_next(2) <= delayMatch131_reg(1);
  delayMatch131_reg_next(3) <= delayMatch131_reg(2);
  delayMatch131_reg_next(4) <= delayMatch131_reg(3);
  delayMatch131_reg_next(5) <= delayMatch131_reg(4);
  delayMatch131_reg_next(6) <= delayMatch131_reg(5);
  delayMatch131_reg_next(7) <= delayMatch131_reg(6);
  delayMatch131_reg_next(8) <= delayMatch131_reg(7);
  delayMatch131_reg_next(9) <= delayMatch131_reg(8);
  delayMatch131_reg_next(10) <= delayMatch131_reg(9);
  delayMatch131_reg_next(11) <= delayMatch131_reg(10);

  
  switch_compare_1_74 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  omega_m_measured_signed <= signed(omega_m_measured);

  Delay51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay51_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay51_out1 <= omega_m_measured_signed;
      END IF;
    END IF;
  END PROCESS Delay51_process;


  omega_m_measured_AXI_signed <= signed(omega_m_measured_AXI);

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay32_out1 <= omega_m_measured_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay32_process;


  
  Switch_on26_out1 <= Delay51_out1 WHEN switch_compare_1_74 = '0' ELSE
      Delay32_out1;

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay35_out1 <= pole_pairs_AXI;
      END IF;
    END IF;
  END PROCESS Delay35_process;


  delayMatch130_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch130_reg(0) <= X"00000000";
        delayMatch130_reg(1) <= X"00000000";
        delayMatch130_reg(2) <= X"00000000";
        delayMatch130_reg(3) <= X"00000000";
        delayMatch130_reg(4) <= X"00000000";
        delayMatch130_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch130_reg(0) <= delayMatch130_reg_next(0);
        delayMatch130_reg(1) <= delayMatch130_reg_next(1);
        delayMatch130_reg(2) <= delayMatch130_reg_next(2);
        delayMatch130_reg(3) <= delayMatch130_reg_next(3);
        delayMatch130_reg(4) <= delayMatch130_reg_next(4);
        delayMatch130_reg(5) <= delayMatch130_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch130_process;

  Delay35_out1_1 <= delayMatch130_reg(5);
  delayMatch130_reg_next(0) <= Delay35_out1;
  delayMatch130_reg_next(1) <= delayMatch130_reg(0);
  delayMatch130_reg_next(2) <= delayMatch130_reg(1);
  delayMatch130_reg_next(3) <= delayMatch130_reg(2);
  delayMatch130_reg_next(4) <= delayMatch130_reg(3);
  delayMatch130_reg_next(5) <= delayMatch130_reg(4);

  omega_el_1 <= omega_el;

  
  Switch_on11_out1_1 <= Delay11_out1 WHEN stateControl_130 = '0' ELSE
      Switch_on11_out1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay11_out1 <= Switch_on11_out1_1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  Switch_on11_out1 <= Delay11_out1 WHEN switch_compare_1_73 = '0' ELSE
      omega_el_1;

  
  switch_compare_1_75 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay34_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay34_out1 <= Lq_AXI;
      END IF;
    END IF;
  END PROCESS Delay34_process;


  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1 <= Switch_on10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch_on10_out1 <= Delay10_out1 WHEN switch_compare_1_75 = '0' ELSE
      Delay34_out1;

  
  switch_compare_1_76 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay36_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay36_out1 <= Ld_AXI;
      END IF;
    END IF;
  END PROCESS Delay36_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch_on9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch_on9_out1 <= Delay9_out1 WHEN switch_compare_1_76 = '0' ELSE
      Delay36_out1;

  
  switch_compare_1_77 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay37_out1 <= psiPM_AXI;
      END IF;
    END IF;
  END PROCESS Delay37_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch_on8_out1 <= Delay8_out1 WHEN switch_compare_1_77 = '0' ELSE
      Delay37_out1;

  
  switch_compare_1_78 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_131 <= '1';

  delayMatch133_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch133_reg(0) <= '0';
        delayMatch133_reg(1) <= '0';
        delayMatch133_reg(2) <= '0';
        delayMatch133_reg(3) <= '0';
        delayMatch133_reg(4) <= '0';
        delayMatch133_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch133_reg(0) <= delayMatch133_reg_next(0);
        delayMatch133_reg(1) <= delayMatch133_reg_next(1);
        delayMatch133_reg(2) <= delayMatch133_reg_next(2);
        delayMatch133_reg(3) <= delayMatch133_reg_next(3);
        delayMatch133_reg(4) <= delayMatch133_reg_next(4);
        delayMatch133_reg(5) <= delayMatch133_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch133_process;

  stateControl_132 <= delayMatch133_reg(5);
  delayMatch133_reg_next(0) <= stateControl_131;
  delayMatch133_reg_next(1) <= delayMatch133_reg(0);
  delayMatch133_reg_next(2) <= delayMatch133_reg(1);
  delayMatch133_reg_next(3) <= delayMatch133_reg(2);
  delayMatch133_reg_next(4) <= delayMatch133_reg(3);
  delayMatch133_reg_next(5) <= delayMatch133_reg(4);

  
  switch_compare_1_79 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_60_1 <= signed(dqxy_phase_voltage_per_switching_state_60);

  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay38_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay38_out1 <= dqxy_phase_voltage_per_switching_state_60_1;
      END IF;
    END IF;
  END PROCESS Delay38_process;


  d_voltage_per_switching_state_AXI_61_64_signed <= signed(d_voltage_per_switching_state_AXI_61_64);

  Delay52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay52_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay52_out1 <= d_voltage_per_switching_state_AXI_61_64_signed;
      END IF;
    END IF;
  END PROCESS Delay52_process;


  
  Switch_on27_out1 <= Delay38_out1 WHEN switch_compare_1_79 = '0' ELSE
      Delay52_out1;

  
  Switch_on7_out1_1 <= Delay7_out1 WHEN stateControl_132 = '0' ELSE
      Switch_on7_out1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch_on7_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch_on7_out1 <= Delay7_out1 WHEN switch_compare_1_78 = '0' ELSE
      Data_Type_Conversion11_out1;

  
  switch_compare_1_80 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_133 <= '1';

  delayMatch135_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch135_reg(0) <= '0';
        delayMatch135_reg(1) <= '0';
        delayMatch135_reg(2) <= '0';
        delayMatch135_reg(3) <= '0';
        delayMatch135_reg(4) <= '0';
        delayMatch135_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch135_reg(0) <= delayMatch135_reg_next(0);
        delayMatch135_reg(1) <= delayMatch135_reg_next(1);
        delayMatch135_reg(2) <= delayMatch135_reg_next(2);
        delayMatch135_reg(3) <= delayMatch135_reg_next(3);
        delayMatch135_reg(4) <= delayMatch135_reg_next(4);
        delayMatch135_reg(5) <= delayMatch135_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch135_process;

  stateControl_134 <= delayMatch135_reg(5);
  delayMatch135_reg_next(0) <= stateControl_133;
  delayMatch135_reg_next(1) <= delayMatch135_reg(0);
  delayMatch135_reg_next(2) <= delayMatch135_reg(1);
  delayMatch135_reg_next(3) <= delayMatch135_reg(2);
  delayMatch135_reg_next(4) <= delayMatch135_reg(3);
  delayMatch135_reg_next(5) <= delayMatch135_reg(4);

  
  switch_compare_1_81 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_61_1 <= signed(dqxy_phase_voltage_per_switching_state_61);

  Delay39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay39_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay39_out1 <= dqxy_phase_voltage_per_switching_state_61_1;
      END IF;
    END IF;
  END PROCESS Delay39_process;


  q_voltage_per_switching_state_AXI_61_64_signed <= signed(q_voltage_per_switching_state_AXI_61_64);

  Delay53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay53_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay53_out1 <= q_voltage_per_switching_state_AXI_61_64_signed;
      END IF;
    END IF;
  END PROCESS Delay53_process;


  
  Switch_on28_out1 <= Delay39_out1 WHEN switch_compare_1_81 = '0' ELSE
      Delay53_out1;

  
  Switch_on6_out1_1 <= Delay6_out1 WHEN stateControl_134 = '0' ELSE
      Switch_on6_out1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch_on6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch_on6_out1 <= Delay6_out1 WHEN switch_compare_1_80 = '0' ELSE
      Data_Type_Conversion12_out1;

  
  switch_compare_1_82 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_135 <= '1';

  delayMatch137_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch137_reg(0) <= '0';
        delayMatch137_reg(1) <= '0';
        delayMatch137_reg(2) <= '0';
        delayMatch137_reg(3) <= '0';
        delayMatch137_reg(4) <= '0';
        delayMatch137_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch137_reg(0) <= delayMatch137_reg_next(0);
        delayMatch137_reg(1) <= delayMatch137_reg_next(1);
        delayMatch137_reg(2) <= delayMatch137_reg_next(2);
        delayMatch137_reg(3) <= delayMatch137_reg_next(3);
        delayMatch137_reg(4) <= delayMatch137_reg_next(4);
        delayMatch137_reg(5) <= delayMatch137_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch137_process;

  stateControl_136 <= delayMatch137_reg(5);
  delayMatch137_reg_next(0) <= stateControl_135;
  delayMatch137_reg_next(1) <= delayMatch137_reg(0);
  delayMatch137_reg_next(2) <= delayMatch137_reg(1);
  delayMatch137_reg_next(3) <= delayMatch137_reg(2);
  delayMatch137_reg_next(4) <= delayMatch137_reg(3);
  delayMatch137_reg_next(5) <= delayMatch137_reg(4);

  
  switch_compare_1_83 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_62_1 <= signed(dqxy_phase_voltage_per_switching_state_62);

  Delay40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay40_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay40_out1 <= dqxy_phase_voltage_per_switching_state_62_1;
      END IF;
    END IF;
  END PROCESS Delay40_process;


  x_voltage_per_switching_state_AXI_61_64_signed <= signed(x_voltage_per_switching_state_AXI_61_64);

  Delay54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay54_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay54_out1 <= x_voltage_per_switching_state_AXI_61_64_signed;
      END IF;
    END IF;
  END PROCESS Delay54_process;


  
  Switch_on29_out1 <= Delay40_out1 WHEN switch_compare_1_83 = '0' ELSE
      Delay54_out1;

  
  Switch_on5_out1_1 <= Delay5_out1 WHEN stateControl_136 = '0' ELSE
      Switch_on5_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch_on5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch_on5_out1 <= Delay5_out1 WHEN switch_compare_1_82 = '0' ELSE
      Data_Type_Conversion13_out1;

  
  switch_compare_1_84 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_137 <= '1';

  delayMatch139_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch139_reg(0) <= '0';
        delayMatch139_reg(1) <= '0';
        delayMatch139_reg(2) <= '0';
        delayMatch139_reg(3) <= '0';
        delayMatch139_reg(4) <= '0';
        delayMatch139_reg(5) <= '0';
      ELSIF enb = '1' THEN
        delayMatch139_reg(0) <= delayMatch139_reg_next(0);
        delayMatch139_reg(1) <= delayMatch139_reg_next(1);
        delayMatch139_reg(2) <= delayMatch139_reg_next(2);
        delayMatch139_reg(3) <= delayMatch139_reg_next(3);
        delayMatch139_reg(4) <= delayMatch139_reg_next(4);
        delayMatch139_reg(5) <= delayMatch139_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch139_process;

  stateControl_138 <= delayMatch139_reg(5);
  delayMatch139_reg_next(0) <= stateControl_137;
  delayMatch139_reg_next(1) <= delayMatch139_reg(0);
  delayMatch139_reg_next(2) <= delayMatch139_reg(1);
  delayMatch139_reg_next(3) <= delayMatch139_reg(2);
  delayMatch139_reg_next(4) <= delayMatch139_reg(3);
  delayMatch139_reg_next(5) <= delayMatch139_reg(4);

  
  switch_compare_1_85 <= '1' WHEN Delay56_out1 = '1' ELSE
      '0';

  dqxy_phase_voltage_per_switching_state_63_1 <= signed(dqxy_phase_voltage_per_switching_state_63);

  Delay41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay41_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay41_out1 <= dqxy_phase_voltage_per_switching_state_63_1;
      END IF;
    END IF;
  END PROCESS Delay41_process;


  y_volatge_per_switching_state_AXI_61_64_signed <= signed(y_volatge_per_switching_state_AXI_61_64);

  Delay55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay55_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay55_out1 <= y_volatge_per_switching_state_AXI_61_64_signed;
      END IF;
    END IF;
  END PROCESS Delay55_process;


  
  Switch_on30_out1 <= Delay41_out1 WHEN switch_compare_1_85 = '0' ELSE
      Delay55_out1;

  
  Switch_on4_out1_1 <= Delay4_out1 WHEN stateControl_138 = '0' ELSE
      Switch_on4_out1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch_on4_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_on4_out1 <= Delay4_out1 WHEN switch_compare_1_84 = '0' ELSE
      Data_Type_Conversion14_out1;

  
  switch_compare_1_86 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay42_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay42_out1 <= id_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay42_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_on3_out1 <= Delay3_out1 WHEN switch_compare_1_86 = '0' ELSE
      Delay42_out1;

  
  switch_compare_1_87 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay43_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay43_out1 <= iq_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay43_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_on2_out1 <= Delay2_out1 WHEN switch_compare_1_87 = '0' ELSE
      Delay43_out1;

  
  switch_compare_1_88 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay44_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay44_out1 <= ix_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay44_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1_88 = '0' ELSE
      Delay44_out1;

  
  switch_compare_1_89 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay45_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay45_out1 <= iy_ref_AXI;
      END IF;
    END IF;
  END PROCESS Delay45_process;


  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay33_out1 <= Switch_on14_out1;
      END IF;
    END IF;
  END PROCESS Delay33_process;


  
  Switch_on14_out1 <= Delay33_out1 WHEN switch_compare_1_89 = '0' ELSE
      Delay45_out1;

  J_0 <= nfp_out_1_1;

  J_1 <= nfp_out_2_1;

  J_2 <= nfp_out_3_1;

  J_3 <= nfp_out_4_1;

  J_4 <= nfp_out_5_1;

  J_5 <= nfp_out_6_1;

  J_6 <= nfp_out_7_1;

  J_7 <= nfp_out_8_1;

  J_8 <= nfp_out_9_1;

  J_9 <= nfp_out_10_1;

  J_10 <= nfp_out_11_1;

  J_11 <= nfp_out_12_1;

  J_12 <= nfp_out_13_1;

  J_13 <= nfp_out_14_1;

  J_14 <= nfp_out_15_1;

  J_15 <= nfp_out_16_1;

  ce_out <= clk_enable;

END rtl;

