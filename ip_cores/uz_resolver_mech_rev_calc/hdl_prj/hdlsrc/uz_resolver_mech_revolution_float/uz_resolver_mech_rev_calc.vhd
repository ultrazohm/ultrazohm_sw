-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_resolver_mech_revolution_float\uz_resolver_mech_rev_calc.vhd
-- Created: 2023-01-19 16:20:05
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_resolver_mech_rev_calc
-- Source Path: uz_resolver_mech_rev_calc
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_resolver_mech_rev_calc IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        position_raw                      :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        velocity_raw                      :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        trigger                           :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        position_mech_raw                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        position_mech_2pi                 :   OUT   std_logic_vector(26 DOWNTO 0);  -- ufix27
        position_el_2pi                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- ufix27
        omega_mech                        :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        rpm_mech                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        done                              :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END uz_resolver_mech_rev_calc;


ARCHITECTURE rtl OF uz_resolver_mech_rev_calc IS

  -- Component Declarations
  COMPONENT uz_resolver_mech_rev_calc_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_position_mech_2pi_AXI      :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
          read_position_el_2pi_AXI        :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
          read_omega_mech_AXI             :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          read_rpm_mech_AXI               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          read_cnt_AXI                    :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_resolver_polepairs_AXI    :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          write_cnt_reset_AXI             :   OUT   std_logic;  -- ufix1
          write_position_intmax_AXI       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          write_machine_polepairs_AXI     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          write_bitToRPS_Factor_AXI       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT uz_resolver_mech_rev_calc_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          position_raw                    :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          resolver_polepairs_AXI          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          cnt_reset_AXI                   :   IN    std_logic;  -- ufix1
          position_intmax_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          machine_polepairs_AXI           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          velocity_raw                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          bitToRPS_Factor_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          trigger                         :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          position_mech_raw               :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          position_mech_2pi               :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
          position_el_2pi                 :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
          omega_mech                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          rpm_mech                        :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          cnt_AXI                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          done                            :   OUT   std_logic;  -- ufix1
          position_mech_2pi_AXI           :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
          position_el_2pi_AXI             :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En20
          omega_mech_AXI                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          rpm_mech_AXI                    :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_resolver_mech_rev_calc_reset_sync
    USE ENTITY work.uz_resolver_mech_rev_calc_reset_sync(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_axi_lite
    USE ENTITY work.uz_resolver_mech_rev_calc_axi_lite(rtl);

  FOR ALL : uz_resolver_mech_rev_calc_dut
    USE ENTITY work.uz_resolver_mech_rev_calc_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL velocity_raw_unsigned            : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL velocity_raw_sig                 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL position_mech_2pi_AXI_sig        : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL position_el_2pi_AXI_sig          : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL omega_mech_AXI_sig               : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL rpm_mech_AXI_sig                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL cnt_AXI_sig                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_resolver_polepairs_AXI     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_cnt_reset_AXI              : std_logic;  -- ufix1
  SIGNAL write_position_intmax_AXI        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_machine_polepairs_AXI      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_bitToRPS_Factor_AXI        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL position_mech_raw_sig            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL position_mech_2pi_sig            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL position_el_2pi_sig              : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL omega_mech_sig                   : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL rpm_mech_sig                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL done_sig                         : std_logic;  -- ufix1
  SIGNAL position_mech_2pi_sig_signed     : signed(26 DOWNTO 0);  -- sfix27_En20
  SIGNAL position_mech_2pi_tmp            : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL position_el_2pi_sig_signed       : signed(26 DOWNTO 0);  -- sfix27_En20
  SIGNAL position_el_2pi_tmp              : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL omega_mech_sig_signed            : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL omega_mech_tmp                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rpm_mech_sig_signed              : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL rpm_mech_tmp                     : unsigned(23 DOWNTO 0);  -- ufix24

BEGIN
  u_uz_resolver_mech_rev_calc_reset_sync_inst : uz_resolver_mech_rev_calc_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_uz_resolver_mech_rev_calc_axi_lite_inst : uz_resolver_mech_rev_calc_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_position_mech_2pi_AXI => position_mech_2pi_AXI_sig,  -- sfix27_En20
              read_position_el_2pi_AXI => position_el_2pi_AXI_sig,  -- sfix27_En20
              read_omega_mech_AXI => omega_mech_AXI_sig,  -- sfix24_En11
              read_rpm_mech_AXI => rpm_mech_AXI_sig,  -- sfix24_En11
              read_cnt_AXI => cnt_AXI_sig,  -- sfix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_resolver_polepairs_AXI => write_resolver_polepairs_AXI,  -- sfix32
              write_cnt_reset_AXI => write_cnt_reset_AXI,  -- ufix1
              write_position_intmax_AXI => write_position_intmax_AXI,  -- sfix32
              write_machine_polepairs_AXI => write_machine_polepairs_AXI,  -- sfix32
              write_bitToRPS_Factor_AXI => write_bitToRPS_Factor_AXI,  -- ufix32
              reset_internal => reset_internal  -- ufix1
              );

  u_uz_resolver_mech_rev_calc_dut_inst : uz_resolver_mech_rev_calc_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              position_raw => position_raw,  -- ufix16
              resolver_polepairs_AXI => write_resolver_polepairs_AXI,  -- sfix32
              cnt_reset_AXI => write_cnt_reset_AXI,  -- ufix1
              position_intmax_AXI => write_position_intmax_AXI,  -- sfix32
              machine_polepairs_AXI => write_machine_polepairs_AXI,  -- sfix32
              velocity_raw => std_logic_vector(velocity_raw_sig),  -- sfix16
              bitToRPS_Factor_AXI => write_bitToRPS_Factor_AXI,  -- ufix32
              trigger => trigger,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              position_mech_raw => position_mech_raw_sig,  -- ufix16
              position_mech_2pi => position_mech_2pi_sig,  -- sfix27_En20
              position_el_2pi => position_el_2pi_sig,  -- sfix27_En20
              omega_mech => omega_mech_sig,  -- sfix24_En11
              rpm_mech => rpm_mech_sig,  -- sfix24_En11
              cnt_AXI => cnt_AXI_sig,  -- sfix32
              done => done_sig,  -- ufix1
              position_mech_2pi_AXI => position_mech_2pi_AXI_sig,  -- sfix27_En20
              position_el_2pi_AXI => position_el_2pi_AXI_sig,  -- sfix27_En20
              omega_mech_AXI => omega_mech_AXI_sig,  -- sfix24_En11
              rpm_mech_AXI => rpm_mech_AXI_sig  -- sfix24_En11
              );

  ip_timestamp <= unsigned'(X"892965C4");

  reset_cm <=  NOT IPCORE_RESETN;

  velocity_raw_unsigned <= unsigned(velocity_raw);

  velocity_raw_sig <= signed(velocity_raw_unsigned);

  reset_before_sync <= reset_cm OR reset_internal;

  position_mech_2pi_sig_signed <= signed(position_mech_2pi_sig);

  position_mech_2pi_tmp <= unsigned(position_mech_2pi_sig_signed);

  position_mech_2pi <= std_logic_vector(position_mech_2pi_tmp);

  position_el_2pi_sig_signed <= signed(position_el_2pi_sig);

  position_el_2pi_tmp <= unsigned(position_el_2pi_sig_signed);

  position_el_2pi <= std_logic_vector(position_el_2pi_tmp);

  omega_mech_sig_signed <= signed(omega_mech_sig);

  omega_mech_tmp <= unsigned(omega_mech_sig_signed);

  omega_mech <= std_logic_vector(omega_mech_tmp);

  rpm_mech_sig_signed <= signed(rpm_mech_sig);

  rpm_mech_tmp <= unsigned(rpm_mech_sig_signed);

  rpm_mech <= std_logic_vector(rpm_mech_tmp);

  done <= done_sig;

  position_mech_raw <= position_mech_raw_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

