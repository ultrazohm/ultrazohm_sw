-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pmsm_model\uz_pmsm_model_src_nfp_cosh_single.vhd
-- Created: 2024-05-23 13:50:30
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_src_nfp_cosh_single
-- Source Path: uz_pmsm_model/uz_pmsm_model/nfp_cosh_single
-- Hierarchy Level: 1
-- Model version: 7.0
-- 
-- {Latency Strategy = "Min"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_src_uz_pmsm_model_pkg.ALL;

ENTITY uz_pmsm_model_src_nfp_cosh_single IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        nfp_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_pmsm_model_src_nfp_cosh_single;


ARCHITECTURE rtl OF uz_pmsm_model_src_nfp_cosh_single IS

  -- Signals
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay4_out1                      : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay3_out1                      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Add_add_cast                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay1_out1                      : std_logic;  -- ufix1
  SIGNAL nfp_in_unsigned                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay1_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL Delay9_reg                       : std_logic_vector(14 DOWNTO 0);  -- ufix1 [15]
  SIGNAL Delay9_out1                      : std_logic;  -- ufix1
  SIGNAL C3_out1                          : std_logic;  -- ufix1
  SIGNAL Delay_out1                       : std_logic;  -- ufix1
  SIGNAL Delay2_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL Delay6_reg                       : std_logic_vector(14 DOWNTO 0);  -- ufix1 [15]
  SIGNAL Delay6_out1                      : std_logic;  -- ufix1
  SIGNAL if_aExponent_cfType_Exponent_2_out1 : std_logic;  -- ufix1
  SIGNAL Constant1_out1                   : std_logic;  -- ufix1
  SIGNAL Switch1_out1                     : std_logic;  -- ufix1
  SIGNAL Delay3_out1_1                    : std_logic;  -- ufix1
  SIGNAL upperBound_out1                  : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL alpha0_out1                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Exponent_0_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL reinterpretcast_mant_cor_nume_out1 : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Log2_E_out1                      : unsigned(31 DOWNTO 0);  -- ufix32_En30
  SIGNAL tmp1_1_66096404753625392914_mul_temp : unsigned(55 DOWNTO 0);  -- ufix56_En53
  SIGNAL tmp1_1_66096404753625392914_out1 : unsigned(32 DOWNTO 0);  -- ufix33_En31
  SIGNAL Delay_reg                        : vector_of_unsigned33(0 TO 1);  -- ufix33 [2]
  SIGNAL Delay_out1_1                     : unsigned(32 DOWNTO 0);  -- ufix33_En31
  SIGNAL BitSlice_out1                    : std_logic;  -- ufix1
  SIGNAL C_out1                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay1_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay3_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL exp_cor_2_add_temp               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL exp_cor_2_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay2_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_tmp2_tmp2_WordLength_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Concat_out1_1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL exp_tmp_upperBound_relop1        : std_logic;
  SIGNAL Delay2_out1_2                    : std_logic;  -- ufix1
  SIGNAL Delay18_reg                      : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL Delay18_out1                     : std_logic;  -- ufix1
  SIGNAL Delay33_reg                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay33_out1                     : std_logic;  -- ufix1
  SIGNAL Delay38_out1                     : std_logic;  -- ufix1
  SIGNAL C1_out1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_2                    : std_logic;  -- ufix1
  SIGNAL C4_out1                          : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL cast_cfType_ExponentBias_lik_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL exp_tmp_cast_cfType_Exponent_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL BitSlice_out1_1                  : std_logic;  -- ufix1
  SIGNAL alpha3_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL BitSlice2_out1                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reinterpretcast_bitsliceget_t_out1 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL BitSlice1_out1                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reinterpretcast_bitsliceget_t_out1_1 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL if_bitget_tmp2_tmp2_WordLength_1_out1 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Bit_Concat3_out1                 : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_1 : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL DTC2_out1                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL dynamic_shift_cast               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitsll_tmp1_shift_length_out1    : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL cast_cfType_ExponentBias_lik_out1_1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_cfType_ExponentBias_lik_out1_2 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC1_out1                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL dynamic_shift_cast_1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic_out1            : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL if_shift_sign_out1               : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL if_exp_tmp_upperBound_1_out1     : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL Delay3_out1_3                    : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL BitSlice_out1_2                  : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Bit_Concat_out1_2                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_2 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Constant_out1                    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_3                : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Data_Type_Conversion_out1        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice_out1_3                  : std_logic;  -- ufix1
  SIGNAL Log2Table_1_out1                 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2Table_1_out1               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay12_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1                  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_1                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_4                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_2_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_2_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_1_out1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_1 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_1                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_2                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_5                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_1 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_3_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_3_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_1 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_2 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay11_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_2                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_3                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_6                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_2 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_4_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_4_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_2 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_3 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_3                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_4                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_7                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_3 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_5_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_5_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_3 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_2  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_4 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay13_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_4                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_5                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_8                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_4 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_6_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_6_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_4 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_3  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_5 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_5                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_6                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_9                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_5 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_7_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_7_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_5 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_4  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_6 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay15_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_6                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_7                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_10                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_6 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_8_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_8_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_6 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_5  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_7 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_7                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_8                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_11                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_7 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_9_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_9_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_7 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_6  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_8 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay17_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_8                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_9                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_12                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_8 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_10_out1          : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_10_out1     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_8 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_7  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_9 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_9                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_10                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_13                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_9 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_11_out1          : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_11_out1     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_9 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_8  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_10 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay19_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_10               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_11                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_14                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_10 : std_logic;  -- ufix1
  SIGNAL C1_out1_1                        : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL C_out1_2                         : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL if_bitget_w_w_WordLength_1_1_out1 : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Delay11_out1_1                   : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Constant_out1_1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dtc1_out1_1                      : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL bitsrl_y_int32_2_out1            : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1                      : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1_1                    : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_0_1_out1 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_1 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL Constant_out1_2                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_5                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL dtc1_out1_2                      : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL bitsrl_y_int32_2_out1_1          : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_2                    : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_3                    : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_1 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_2 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Delay10_out1                     : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Constant_out1_3                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat_out1_6                : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL dtc1_out1_3                      : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL bitsrl_y_int32_2_out1_2          : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_4                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_5                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_2 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_3 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Constant_out1_4                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat_out1_7                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL dtc1_out1_4                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL bitsrl_y_int32_2_out1_3          : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_6                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_7                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_3 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_4 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay12_out1_1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Constant_out1_5                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Concat_out1_8                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL dtc1_out1_5                      : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL bitsrl_y_int32_2_out1_4          : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_8                    : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_9                    : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_4 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_5 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL Constant_out1_6                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Concat_out1_9                : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL dtc1_out1_6                      : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL bitsrl_y_int32_2_out1_5          : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_10                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_11                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_5 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_6 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL Delay14_out1                     : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL Constant_out1_7                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_10               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL dtc1_out1_7                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_6          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_12                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_13                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_6 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_7 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_7          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_14                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_15                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_7 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_8 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay16_out1                     : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_8          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_16                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_17                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_8 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_9 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_9          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_18                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_19                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_9 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_10 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay18_out1_1                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_10         : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_20                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_21                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_10 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_11 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay1_reg                       : vector_of_signed34(0 TO 1);  -- sfix34 [2]
  SIGNAL Delay1_out1_3                    : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Bit_Slice2_out1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion1_out1       : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Log2Table_int32_11_out1_1        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_11_out1_1   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_10 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_9  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_11 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Bit_Slice_out1                   : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion_out1_1      : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL alpha0_69314717873930931_out1    : signed(19 DOWNTO 0);  -- sfix20_En18
  SIGNAL tmp1_0_69314717873930931_mul_temp : signed(40 DOWNTO 0);  -- sfix41_En37
  SIGNAL tmp1_0_69314717873930931_out1    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Delay_reg_1                      : vector_of_signed21(0 TO 1);  -- sfix21 [2]
  SIGNAL Delay_out1_2                     : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL tmp2_y_mul_temp                  : signed(41 DOWNTO 0);  -- sfix42_En38
  SIGNAL tmp2_y_out1                      : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Delay3_reg                       : vector_of_signed21(0 TO 1);  -- sfix21 [2]
  SIGNAL Delay3_out1_4                    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Constant1_out1_1                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Constant_out1_8                  : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Switch_out1                      : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay2_reg                       : vector_of_signed34(0 TO 1);  -- sfix34 [2]
  SIGNAL Delay2_out1_3                    : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Bit_Concat_out1_11               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL DTC2_out1_1                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp3_out1                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL cast_1_like_mant_frac_out1       : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL cast_1_like_mant_frac_m_out1     : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL BitSlice1_out1_12                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL if_sticky_1_out1                 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Constant_out1_9                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_12               : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Data_Type_Conversion_out1_2      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice_out1_15                 : std_logic;  -- ufix1
  SIGNAL Log2Table_1_out1_1               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2Table_1_out1_1             : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_12 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay12_out1_2                   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_11               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_13                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_16                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_11 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_2_out1_1         : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_2_out1_1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_11 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_1_out1_1 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_13 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_12               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_14                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_17                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_12 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_3_out1_1         : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_3_out1_1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_12 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_10 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_14 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay11_out1_2                   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_13               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_15                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_18                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_13 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_4_out1_1         : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_4_out1_1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_13 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_11 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_15 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_14               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_16                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_19                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_14 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_5_out1_1         : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_5_out1_1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_14 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_12 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_16 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay13_out1_1                   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_15               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_17                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_20                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_15 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_6_out1_1         : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_6_out1_1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_15 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_13 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_17 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_16               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_18                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_21                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_16 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_7_out1_1         : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_7_out1_1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_16 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_14 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_18 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay15_out1_1                   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_17               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_19                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_22                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_17 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_8_out1_1         : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_8_out1_1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_17 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_15 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_19 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_18               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_20                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_23                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_18 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_9_out1_1         : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_9_out1_1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_18 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_16 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_20 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay17_out1_1                   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_19               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_21                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_24                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_19 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_10_out1_1        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_10_out1_1   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_19 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_17 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_21 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_20               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_22                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_25                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_20 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_11_out1_2        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_11_out1_2   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_20 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_18 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_22 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay19_out1_1                   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_21               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_23                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_26                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_21 : std_logic;  -- ufix1
  SIGNAL C1_out1_2                        : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL C_out1_3                         : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_12 : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Delay11_out1_3                   : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Constant_out1_10                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_13               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dtc1_out1_8                      : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL bitsrl_y_int32_2_out1_11         : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1_22                   : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1_23                   : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_11 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_13 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL Constant_out1_11                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_14               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL dtc1_out1_9                      : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL bitsrl_y_int32_2_out1_12         : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_24                   : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_25                   : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_12 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_14 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Delay10_out1_1                   : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Constant_out1_12                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat_out1_15               : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL dtc1_out1_10                     : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL bitsrl_y_int32_2_out1_13         : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_26                   : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_27                   : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_13 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_15 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Constant_out1_13                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat_out1_16               : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL dtc1_out1_11                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL bitsrl_y_int32_2_out1_14         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_28                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_29                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_14 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_16 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay12_out1_3                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Constant_out1_14                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Concat_out1_17               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL dtc1_out1_12                     : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL bitsrl_y_int32_2_out1_15         : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_30                   : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_31                   : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_15 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_17 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL Constant_out1_15                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Concat_out1_18               : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL dtc1_out1_13                     : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL bitsrl_y_int32_2_out1_16         : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_32                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_33                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_16 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_18 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL Delay14_out1_1                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL Constant_out1_16                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_19               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL dtc1_out1_14                     : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_17         : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_34                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_35                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_17 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_19 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_18         : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_36                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_37                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_18 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_20 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay16_out1_1                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_19         : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_38                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_39                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_19 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_21 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_20         : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_40                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_41                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_20 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_22 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay18_out1_2                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_21         : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_42                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_43                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_21 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_23 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay1_reg_1                     : vector_of_signed34(0 TO 1);  -- sfix34 [2]
  SIGNAL Delay1_out1_4                    : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Bit_Slice2_out1_1                : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion1_out1_1     : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Log2Table_int32_11_out1_3        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_11_out1_3   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_21 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_19 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_23 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Bit_Slice_out1_1                 : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion_out1_3      : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL alpha0_69314717873930931_out1_1  : signed(19 DOWNTO 0);  -- sfix20_En18
  SIGNAL tmp1_0_69314717873930931_mul_temp_1 : signed(40 DOWNTO 0);  -- sfix41_En37
  SIGNAL tmp1_0_69314717873930931_out1_1  : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Delay_reg_2                      : vector_of_signed21(0 TO 1);  -- sfix21 [2]
  SIGNAL Delay_out1_3                     : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL tmp2_y_mul_temp_1                : signed(41 DOWNTO 0);  -- sfix42_En38
  SIGNAL tmp2_y_out1_1                    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Delay3_reg_1                     : vector_of_signed21(0 TO 1);  -- sfix21 [2]
  SIGNAL Delay3_out1_5                    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Bit_Slice1_out1_1                : std_logic;  -- ufix1
  SIGNAL Constant1_out1_2                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Constant_out1_17                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Switch_out1_1                    : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay2_reg_1                     : vector_of_signed34(0 TO 1);  -- sfix34 [2]
  SIGNAL Delay2_out1_4                    : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Bit_Concat_out1_20               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL DTC2_out1_2                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp3_out1_1                    : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay31_out1                     : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL BitSlice2_out1_1                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat1_out1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_3 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice_out1_2                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat2_out1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Delay17_reg                      : vector_of_unsigned10(0 TO 5);  -- ufix10 [6]
  SIGNAL Delay17_out1_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Delay31_out1_1                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay32_reg                      : vector_of_unsigned10(0 TO 4);  -- ufix10 [5]
  SIGNAL Delay32_out1                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL dynamic_shift_cast_2             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Shift_Arithmetic_out1_1          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Add_out1_1                       : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_2                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice1_out1_2                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch_out1_2                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay36_out1                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_21               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice1_out1_24                : std_logic;  -- ufix1
  SIGNAL Delay11_reg                      : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL Delay11_out1_4                   : std_logic;  -- ufix1
  SIGNAL Delay19_reg                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay19_out1_2                   : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_27                 : std_logic;  -- ufix1
  SIGNAL Delay37_out1                     : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL cast_2_like_Mant_tmp_out1        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Mant_tmp_cast_2_like_Man_out1    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1_2                 : std_logic;  -- ufix1
  SIGNAL alpha127_out1                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha127_exp_tmp_out1            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay16_reg                      : vector_of_signed10(0 TO 5);  -- sfix10 [6]
  SIGNAL Delay16_out1_2                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay4_reg                       : vector_of_signed10(0 TO 4);  -- sfix10 [5]
  SIGNAL Delay4_out1_1                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Constant_out1_18                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Add1_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Data_Type_Conversion1_out1_2     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Data_Type_Conversion_out1_4      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch1_out1_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant1_out1_3                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch2_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay35_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_1_like_Exp_out1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_cast_1_like_Exp_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_in_range_2_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay7_reg                       : vector_of_unsigned8(0 TO 14);  -- ufix8 [15]
  SIGNAL Delay7_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_cfType_Exponent_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant3_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay4_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Compare_To_Constant_out1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL C2_out1                          : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL BitSlice3_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_4                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_in_range_1_out1               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay8_reg                       : vector_of_unsigned23(0 TO 14);  -- ufix23 [15]
  SIGNAL Delay8_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_cfType_Exponent_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant2_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch5_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay5_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  Constant8_out1 <= '1';

  Constant7_out1 <= to_unsigned(16#0F#, 6);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '1';
      ELSIF enb = '1' THEN
        Delay4_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator_out1 <= Constant8_out1 AND Delay4_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1;
  Add_out1 <= Delay3_out1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 <= Constant7_out1 ELSE
      '0';

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '1';
      ELSIF enb = '1' THEN
        Delay1_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  nfp_in_unsigned <= unsigned(nfp_in);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in_unsigned(31);
  aExponent <= nfp_in_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in_unsigned(22 DOWNTO 0);

  Delay1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay1_out1_1 <= aExponent;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay1_out1_1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay9_reg(0) <= aExponent_cfType_Exponent_I_out1;
        Delay9_reg(14 DOWNTO 1) <= Delay9_reg(13 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(14);

  C3_out1 <= '0';

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= aSign;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay2_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Compare_To_Zero_out1 <= '1' WHEN Delay2_out1 /= to_unsigned(16#000000#, 23) ELSE
      '0';

  Logical_Operator_out1_1 <= Delay_out1 AND Compare_To_Zero_out1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay6_reg(0) <= Logical_Operator_out1_1;
        Delay6_reg(14 DOWNTO 1) <= Delay6_reg(13 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(14);

  
  if_aExponent_cfType_Exponent_2_out1 <= C3_out1 WHEN Delay9_out1 = '0' ELSE
      Delay6_out1;

  Constant1_out1 <= '0';

  
  Switch1_out1 <= if_aExponent_cfType_Exponent_2_out1 WHEN Delay1_out1 = '0' ELSE
      Constant1_out1;

  Delay3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_1_process;


  upperBound_out1 <= to_signed(16#087#, 11);

  alpha0_out1 <= to_unsigned(16#0#, 3);

  
  Exponent_0_out1 <= '1' WHEN Delay1_out1_1 /= to_unsigned(16#00#, 8) ELSE
      '0';

  Bit_Concat_out1 <= Exponent_0_out1 & Delay2_out1;

  reinterpretcast_mant_cor_nume_out1 <= Bit_Concat_out1;

  Log2_E_out1 <= to_unsigned(1549082005, 32);

  tmp1_1_66096404753625392914_mul_temp <= reinterpretcast_mant_cor_nume_out1 * Log2_E_out1;
  tmp1_1_66096404753625392914_out1 <= tmp1_1_66096404753625392914_mul_temp(54 DOWNTO 22);

  Delay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg <= (OTHERS => to_unsigned(0, 33));
      ELSIF enb = '1' THEN
        Delay_reg(0) <= tmp1_1_66096404753625392914_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_1_process;

  Delay_out1_1 <= Delay_reg(1);

  BitSlice_out1 <= Delay_out1_1(32);

  C_out1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= C_out1 WHEN Exponent_0_out1 = '0' ELSE
      Delay1_out1_1;

  Delay1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= if_Exponent_0_out1;
      END IF;
    END IF;
  END PROCESS Delay1_2_process;


  Delay3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay3_2_process;


  C_out1_1 <= to_unsigned(16#01#, 8);

  exp_cor_2_add_temp <= resize(Delay1_out1_2, 32) + resize(C_out1_1, 32);
  
  exp_cor_2_out1 <= "11111111" WHEN exp_cor_2_add_temp(31 DOWNTO 8) /= X"000000" ELSE
      exp_cor_2_add_temp(7 DOWNTO 0);

  Delay2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_1 <= exp_cor_2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_1_process;


  
  if_bitget_tmp2_tmp2_WordLength_out1 <= Delay3_out1_2 WHEN BitSlice_out1 = '0' ELSE
      Delay2_out1_1;

  Bit_Concat_out1_1 <= alpha0_out1 & if_bitget_tmp2_tmp2_WordLength_out1;

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat_out1_1);

  
  exp_tmp_upperBound_relop1 <= '1' WHEN upperBound_out1 > reinterpretcast_bitconcat_fi_0_out1 ELSE
      '0';

  Delay2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1_2 <= exp_tmp_upperBound_relop1;
      END IF;
    END IF;
  END PROCESS Delay2_2_process;


  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay18_reg(0) <= Delay2_out1_2;
        Delay18_reg(5 DOWNTO 1) <= Delay18_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay18_process;

  Delay18_out1 <= Delay18_reg(5);

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay33_reg(0) <= Delay18_out1;
        Delay33_reg(4 DOWNTO 1) <= Delay33_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay33_process;

  Delay33_out1 <= Delay33_reg(4);

  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay38_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay38_out1 <= Delay33_out1;
      END IF;
    END IF;
  END PROCESS Delay38_process;


  C1_out1 <= to_unsigned(16#FF#, 8);

  alpha0_out1_1 <= '0';

  alpha0_out1_2 <= '0';

  C4_out1 <= to_unsigned(0, 40);

  cast_cfType_ExponentBias_lik_out1 <= to_signed(-16#07F#, 11);

  exp_tmp_cast_cfType_Exponent_out1 <= reinterpretcast_bitconcat_fi_0_out1 + cast_cfType_ExponentBias_lik_out1;

  BitSlice_out1_1 <= exp_tmp_cast_cfType_Exponent_out1(10);

  alpha3_out1 <= to_unsigned(16#00#, 8);

  BitSlice2_out1 <= Delay_out1_1(31 DOWNTO 0);

  reinterpretcast_bitsliceget_t_out1 <= BitSlice2_out1;

  BitSlice1_out1 <= Delay_out1_1(32 DOWNTO 1);

  reinterpretcast_bitsliceget_t_out1_1 <= BitSlice1_out1;

  
  if_bitget_tmp2_tmp2_WordLength_1_out1 <= reinterpretcast_bitsliceget_t_out1 WHEN BitSlice_out1 = '0' ELSE
      reinterpretcast_bitsliceget_t_out1_1;

  Bit_Concat3_out1 <= alpha3_out1 & if_bitget_tmp2_tmp2_WordLength_1_out1;

  reinterpretcast_bitconcat_fi_0_out1_1 <= Bit_Concat3_out1;

  
  DTC2_out1 <= "11111" WHEN (exp_tmp_cast_cfType_Exponent_out1(10) = '0') AND (exp_tmp_cast_cfType_Exponent_out1(9 DOWNTO 5) /= "00000") ELSE
      "00000" WHEN exp_tmp_cast_cfType_Exponent_out1(10) = '1' ELSE
      unsigned(exp_tmp_cast_cfType_Exponent_out1(4 DOWNTO 0));

  dynamic_shift_cast <= resize(DTC2_out1, 8);
  bitsll_tmp1_shift_length_out1 <= reinterpretcast_bitconcat_fi_0_out1_1 sll to_integer(dynamic_shift_cast);

  cast_cfType_ExponentBias_lik_out1_1 <= to_unsigned(16#7F#, 8);

  cast_cfType_ExponentBias_lik_out1_2 <= cast_cfType_ExponentBias_lik_out1_1 - if_bitget_tmp2_tmp2_WordLength_out1;

  
  DTC1_out1 <= "11111" WHEN cast_cfType_ExponentBias_lik_out1_2(7 DOWNTO 5) /= "000" ELSE
      cast_cfType_ExponentBias_lik_out1_2(4 DOWNTO 0);

  dynamic_shift_cast_1 <= resize(DTC1_out1, 8);
  Shift_Arithmetic_out1 <= SHIFT_RIGHT(reinterpretcast_bitconcat_fi_0_out1_1, to_integer(dynamic_shift_cast_1));

  
  if_shift_sign_out1 <= bitsll_tmp1_shift_length_out1 WHEN BitSlice_out1_1 = '0' ELSE
      Shift_Arithmetic_out1;

  
  if_exp_tmp_upperBound_1_out1 <= C4_out1 WHEN exp_tmp_upperBound_relop1 = '0' ELSE
      if_shift_sign_out1;

  Delay3_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_3 <= to_unsigned(0, 40);
      ELSIF enb = '1' THEN
        Delay3_out1_3 <= if_exp_tmp_upperBound_1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_3_process;


  BitSlice_out1_2 <= Delay3_out1_3(30 DOWNTO 0);

  Bit_Concat_out1_2 <= alpha0_out1_2 & BitSlice_out1_2;

  reinterpretcast_bitconcat_fi_0_out1_2 <= Bit_Concat_out1_2;

  Constant_out1 <= '0';

  Bit_Concat_out1_3 <= reinterpretcast_bitconcat_fi_0_out1_2 & Constant_out1;

  Data_Type_Conversion_out1 <= signed(Bit_Concat_out1_3);

  BitSlice_out1_3 <= Data_Type_Conversion_out1(31);

  Log2Table_1_out1 <= signed'("101101010001111111110010111001000");

  w_Log2Table_1_out1 <= Data_Type_Conversion_out1 + Log2Table_1_out1;

  
  if_bitget_w_w_WordLength_1_out1 <= Data_Type_Conversion_out1 WHEN BitSlice_out1_3 = '0' ELSE
      w_Log2Table_1_out1;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay12_out1 <= if_bitget_w_w_WordLength_1_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  bitsll_w_1_out1 <= Delay12_out1 sll 1;

  BitSlice1_out1_1 <= bitsll_w_1_out1(31);

  BitSlice_out1_4 <= bitsll_w_1_out1(32);

  alphabitget_w_w_WordLength_1_out1 <= BitSlice1_out1_1 XOR BitSlice_out1_4;

  Log2Table_int32_2_out1 <= signed'("101011011001011000011110110100000");

  Log2MinusTable_int32_2_out1 <= signed'("011010100011111111100101110001100");

  
  if_bitget_w_w_WordLength_0_out1 <= Log2Table_int32_2_out1 WHEN BitSlice_out1_4 = '0' ELSE
      Log2MinusTable_int32_2_out1;

  w_Log2MinusTable_int32_2_1_out1 <= bitsll_w_1_out1 + if_bitget_w_w_WordLength_0_out1;

  
  if_bitget_w_w_WordLength_1_out1_1 <= bitsll_w_1_out1 WHEN alphabitget_w_w_WordLength_1_out1 = '0' ELSE
      w_Log2MinusTable_int32_2_1_out1;

  bitsll_w_1_out1_1 <= if_bitget_w_w_WordLength_1_out1_1 sll 1;

  BitSlice1_out1_2 <= bitsll_w_1_out1_1(31);

  BitSlice_out1_5 <= bitsll_w_1_out1_1(32);

  alphabitget_w_w_WordLength_1_out1_1 <= BitSlice1_out1_2 XOR BitSlice_out1_5;

  Log2Table_int32_3_out1 <= signed'("101010001111111110010111000110000");

  Log2MinusTable_int32_3_out1 <= signed'("011000101010001001100000001010100");

  
  if_bitget_w_w_WordLength_0_out1_1 <= Log2Table_int32_3_out1 WHEN BitSlice_out1_5 = '0' ELSE
      Log2MinusTable_int32_3_out1;

  w_Log2MinusTable_int32_2_out1 <= bitsll_w_1_out1_1 + if_bitget_w_w_WordLength_0_out1_1;

  
  if_bitget_w_w_WordLength_1_out1_2 <= bitsll_w_1_out1_1 WHEN alphabitget_w_w_WordLength_1_out1_1 = '0' ELSE
      w_Log2MinusTable_int32_2_out1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay11_out1 <= if_bitget_w_w_WordLength_1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  bitsll_w_1_out1_2 <= Delay11_out1 sll 1;

  BitSlice1_out1_3 <= bitsll_w_1_out1_2(31);

  BitSlice_out1_6 <= bitsll_w_1_out1_2(32);

  alphabitget_w_w_WordLength_1_out1_2 <= BitSlice1_out1_3 XOR BitSlice_out1_6;

  Log2Table_int32_4_out1 <= signed'("101001100111000000100100000101000");

  Log2MinusTable_int32_4_out1 <= signed'("010111110101100000010010010111000");

  
  if_bitget_w_w_WordLength_0_out1_2 <= Log2Table_int32_4_out1 WHEN BitSlice_out1_6 = '0' ELSE
      Log2MinusTable_int32_4_out1;

  w_Log2MinusTable_int32_2_out1_1 <= bitsll_w_1_out1_2 + if_bitget_w_w_WordLength_0_out1_2;

  
  if_bitget_w_w_WordLength_1_out1_3 <= bitsll_w_1_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_2 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_1;

  bitsll_w_1_out1_3 <= if_bitget_w_w_WordLength_1_out1_3 sll 1;

  BitSlice1_out1_4 <= bitsll_w_1_out1_3(31);

  BitSlice_out1_7 <= bitsll_w_1_out1_3(32);

  alphabitget_w_w_WordLength_1_out1_3 <= BitSlice1_out1_4 XOR BitSlice_out1_7;

  Log2Table_int32_5_out1 <= signed'("101001010001010010110010001010100");

  Log2MinusTable_int32_5_out1 <= signed'("010111011100111001010011001010000");

  
  if_bitget_w_w_WordLength_0_out1_3 <= Log2Table_int32_5_out1 WHEN BitSlice_out1_7 = '0' ELSE
      Log2MinusTable_int32_5_out1;

  w_Log2MinusTable_int32_2_out1_2 <= bitsll_w_1_out1_3 + if_bitget_w_w_WordLength_0_out1_3;

  
  if_bitget_w_w_WordLength_1_out1_4 <= bitsll_w_1_out1_3 WHEN alphabitget_w_w_WordLength_1_out1_3 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_2;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay13_out1 <= if_bitget_w_w_WordLength_1_out1_4;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  bitsll_w_1_out1_4 <= Delay13_out1 sll 1;

  BitSlice1_out1_5 <= bitsll_w_1_out1_4(31);

  BitSlice_out1_8 <= bitsll_w_1_out1_4(32);

  alphabitget_w_w_WordLength_1_out1_4 <= BitSlice1_out1_5 XOR BitSlice_out1_8;

  Log2Table_int32_6_out1 <= signed'("101001000110000110100101111010000");

  Log2MinusTable_int32_6_out1 <= signed'("010111010000111110111010000110000");

  
  if_bitget_w_w_WordLength_0_out1_4 <= Log2Table_int32_6_out1 WHEN BitSlice_out1_8 = '0' ELSE
      Log2MinusTable_int32_6_out1;

  w_Log2MinusTable_int32_2_out1_3 <= bitsll_w_1_out1_4 + if_bitget_w_w_WordLength_0_out1_4;

  
  if_bitget_w_w_WordLength_1_out1_5 <= bitsll_w_1_out1_4 WHEN alphabitget_w_w_WordLength_1_out1_4 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_3;

  bitsll_w_1_out1_5 <= if_bitget_w_w_WordLength_1_out1_5 sll 1;

  BitSlice1_out1_6 <= bitsll_w_1_out1_5(31);

  BitSlice_out1_9 <= bitsll_w_1_out1_5(32);

  alphabitget_w_w_WordLength_1_out1_5 <= BitSlice1_out1_6 XOR BitSlice_out1_9;

  Log2Table_int32_7_out1 <= signed'("101001000000011010111101001001000");

  Log2MinusTable_int32_7_out1 <= signed'("010111001011000111101110100010000");

  
  if_bitget_w_w_WordLength_0_out1_5 <= Log2Table_int32_7_out1 WHEN BitSlice_out1_9 = '0' ELSE
      Log2MinusTable_int32_7_out1;

  w_Log2MinusTable_int32_2_out1_4 <= bitsll_w_1_out1_5 + if_bitget_w_w_WordLength_0_out1_5;

  
  if_bitget_w_w_WordLength_1_out1_6 <= bitsll_w_1_out1_5 WHEN alphabitget_w_w_WordLength_1_out1_5 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_4;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay15_out1 <= if_bitget_w_w_WordLength_1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  bitsll_w_1_out1_6 <= Delay15_out1 sll 1;

  BitSlice1_out1_7 <= bitsll_w_1_out1_6(31);

  BitSlice_out1_10 <= bitsll_w_1_out1_6(32);

  alphabitget_w_w_WordLength_1_out1_6 <= BitSlice1_out1_7 XOR BitSlice_out1_10;

  Log2Table_int32_8_out1 <= signed'("101000111101100011101110010010100");

  Log2MinusTable_int32_8_out1 <= signed'("010111001000001101100111000000100");

  
  if_bitget_w_w_WordLength_0_out1_6 <= Log2Table_int32_8_out1 WHEN BitSlice_out1_10 = '0' ELSE
      Log2MinusTable_int32_8_out1;

  w_Log2MinusTable_int32_2_out1_5 <= bitsll_w_1_out1_6 + if_bitget_w_w_WordLength_0_out1_6;

  
  if_bitget_w_w_WordLength_1_out1_7 <= bitsll_w_1_out1_6 WHEN alphabitget_w_w_WordLength_1_out1_6 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_5;

  bitsll_w_1_out1_7 <= if_bitget_w_w_WordLength_1_out1_7 sll 1;

  BitSlice1_out1_8 <= bitsll_w_1_out1_7(31);

  BitSlice_out1_11 <= bitsll_w_1_out1_7(32);

  alphabitget_w_w_WordLength_1_out1_7 <= BitSlice1_out1_8 XOR BitSlice_out1_11;

  Log2Table_int32_9_out1 <= signed'("101000111100000111110000000001000");

  Log2MinusTable_int32_9_out1 <= signed'("010111000110110000111010100100000");

  
  if_bitget_w_w_WordLength_0_out1_7 <= Log2Table_int32_9_out1 WHEN BitSlice_out1_11 = '0' ELSE
      Log2MinusTable_int32_9_out1;

  w_Log2MinusTable_int32_2_out1_6 <= bitsll_w_1_out1_7 + if_bitget_w_w_WordLength_0_out1_7;

  
  if_bitget_w_w_WordLength_1_out1_8 <= bitsll_w_1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_7 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_6;

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay17_out1 <= if_bitget_w_w_WordLength_1_out1_8;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  bitsll_w_1_out1_8 <= Delay17_out1 sll 1;

  BitSlice1_out1_9 <= bitsll_w_1_out1_8(31);

  BitSlice_out1_12 <= bitsll_w_1_out1_8(32);

  alphabitget_w_w_WordLength_1_out1_8 <= BitSlice1_out1_9 XOR BitSlice_out1_12;

  Log2Table_int32_10_out1 <= signed'("101000111011011001101011001000100");

  Log2MinusTable_int32_10_out1 <= signed'("010111000110000010101010001001100");

  
  if_bitget_w_w_WordLength_0_out1_8 <= Log2Table_int32_10_out1 WHEN BitSlice_out1_12 = '0' ELSE
      Log2MinusTable_int32_10_out1;

  w_Log2MinusTable_int32_2_out1_7 <= bitsll_w_1_out1_8 + if_bitget_w_w_WordLength_0_out1_8;

  
  if_bitget_w_w_WordLength_1_out1_9 <= bitsll_w_1_out1_8 WHEN alphabitget_w_w_WordLength_1_out1_8 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_7;

  bitsll_w_1_out1_9 <= if_bitget_w_w_WordLength_1_out1_9 sll 1;

  BitSlice1_out1_10 <= bitsll_w_1_out1_9(31);

  BitSlice_out1_13 <= bitsll_w_1_out1_9(32);

  alphabitget_w_w_WordLength_1_out1_9 <= BitSlice1_out1_10 XOR BitSlice_out1_13;

  Log2Table_int32_11_out1 <= signed'("101000111011000010100111010000100");

  Log2MinusTable_int32_11_out1 <= signed'("010111000101101011100011011000100");

  
  if_bitget_w_w_WordLength_0_out1_9 <= Log2Table_int32_11_out1 WHEN BitSlice_out1_13 = '0' ELSE
      Log2MinusTable_int32_11_out1;

  w_Log2MinusTable_int32_2_out1_8 <= bitsll_w_1_out1_9 + if_bitget_w_w_WordLength_0_out1_9;

  
  if_bitget_w_w_WordLength_1_out1_10 <= bitsll_w_1_out1_9 WHEN alphabitget_w_w_WordLength_1_out1_9 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_8;

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay19_out1 <= if_bitget_w_w_WordLength_1_out1_10;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  bitsll_w_1_out1_10 <= Delay19_out1 sll 1;

  BitSlice1_out1_11 <= bitsll_w_1_out1_10(31);

  BitSlice_out1_14 <= bitsll_w_1_out1_10(32);

  alphabitget_w_w_WordLength_1_out1_10 <= BitSlice1_out1_11 XOR BitSlice_out1_14;

  C1_out1_1 <= to_signed(16#2#, 4);

  C_out1_2 <= to_signed(16#3#, 4);

  
  if_bitget_w_w_WordLength_1_1_out1 <= C1_out1_1 WHEN BitSlice_out1_3 = '0' ELSE
      C_out1_2;

  Delay11_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_1 <= to_signed(16#0#, 4);
      ELSIF enb = '1' THEN
        Delay11_out1_1 <= if_bitget_w_w_WordLength_1_1_out1;
      END IF;
    END IF;
  END PROCESS Delay11_1_process;


  Constant_out1_1 <= to_unsigned(16#0#, 2);

  Bit_Concat_out1_4 <= unsigned(Delay11_out1_1) & Constant_out1_1;

  dtc1_out1_1 <= signed(Bit_Concat_out1_4);

  bitsrl_y_int32_2_out1 <= dtc1_out1_1 srl 2;

  y_tmp1_out1 <= dtc1_out1_1 - bitsrl_y_int32_2_out1;

  y_tmp1_out1_1 <= dtc1_out1_1 + bitsrl_y_int32_2_out1;

  
  if_bitget_w_w_WordLength_0_1_out1 <= y_tmp1_out1 WHEN BitSlice1_out1_1 = '0' ELSE
      y_tmp1_out1_1;

  
  if_bitget_w_w_WordLength_1_1_out1_1 <= dtc1_out1_1 WHEN alphabitget_w_w_WordLength_1_out1 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1;

  Constant_out1_2 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_5 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_1) & Constant_out1_2;

  dtc1_out1_2 <= signed(Bit_Concat_out1_5);

  bitsrl_y_int32_2_out1_1 <= dtc1_out1_2 srl 3;

  y_tmp1_out1_2 <= dtc1_out1_2 - bitsrl_y_int32_2_out1_1;

  y_tmp1_out1_3 <= dtc1_out1_2 + bitsrl_y_int32_2_out1_1;

  
  if_bitget_w_w_WordLength_0_1_out1_1 <= y_tmp1_out1_2 WHEN BitSlice1_out1_2 = '0' ELSE
      y_tmp1_out1_3;

  
  if_bitget_w_w_WordLength_1_1_out1_2 <= dtc1_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_1 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_1;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay10_out1 <= if_bitget_w_w_WordLength_1_1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Constant_out1_3 <= to_unsigned(16#0#, 4);

  Bit_Concat_out1_6 <= unsigned(Delay10_out1) & Constant_out1_3;

  dtc1_out1_3 <= signed(Bit_Concat_out1_6);

  bitsrl_y_int32_2_out1_2 <= dtc1_out1_3 srl 4;

  y_tmp1_out1_4 <= dtc1_out1_3 - bitsrl_y_int32_2_out1_2;

  y_tmp1_out1_5 <= dtc1_out1_3 + bitsrl_y_int32_2_out1_2;

  
  if_bitget_w_w_WordLength_0_1_out1_2 <= y_tmp1_out1_4 WHEN BitSlice1_out1_3 = '0' ELSE
      y_tmp1_out1_5;

  
  if_bitget_w_w_WordLength_1_1_out1_3 <= dtc1_out1_3 WHEN alphabitget_w_w_WordLength_1_out1_2 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_2;

  Constant_out1_4 <= to_unsigned(16#00#, 5);

  Bit_Concat_out1_7 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_3) & Constant_out1_4;

  dtc1_out1_4 <= signed(Bit_Concat_out1_7);

  bitsrl_y_int32_2_out1_3 <= dtc1_out1_4 srl 5;

  y_tmp1_out1_6 <= dtc1_out1_4 - bitsrl_y_int32_2_out1_3;

  y_tmp1_out1_7 <= dtc1_out1_4 + bitsrl_y_int32_2_out1_3;

  
  if_bitget_w_w_WordLength_0_1_out1_3 <= y_tmp1_out1_6 WHEN BitSlice1_out1_4 = '0' ELSE
      y_tmp1_out1_7;

  
  if_bitget_w_w_WordLength_1_1_out1_4 <= dtc1_out1_4 WHEN alphabitget_w_w_WordLength_1_out1_3 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_3;

  Delay12_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay12_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_4;
      END IF;
    END IF;
  END PROCESS Delay12_1_process;


  Constant_out1_5 <= to_unsigned(16#00#, 6);

  Bit_Concat_out1_8 <= unsigned(Delay12_out1_1) & Constant_out1_5;

  dtc1_out1_5 <= signed(Bit_Concat_out1_8);

  bitsrl_y_int32_2_out1_4 <= dtc1_out1_5 srl 6;

  y_tmp1_out1_8 <= dtc1_out1_5 - bitsrl_y_int32_2_out1_4;

  y_tmp1_out1_9 <= dtc1_out1_5 + bitsrl_y_int32_2_out1_4;

  
  if_bitget_w_w_WordLength_0_1_out1_4 <= y_tmp1_out1_8 WHEN BitSlice1_out1_5 = '0' ELSE
      y_tmp1_out1_9;

  
  if_bitget_w_w_WordLength_1_1_out1_5 <= dtc1_out1_5 WHEN alphabitget_w_w_WordLength_1_out1_4 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_4;

  Constant_out1_6 <= to_unsigned(16#00#, 7);

  Bit_Concat_out1_9 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_5) & Constant_out1_6;

  dtc1_out1_6 <= signed(Bit_Concat_out1_9);

  bitsrl_y_int32_2_out1_5 <= dtc1_out1_6 srl 7;

  y_tmp1_out1_10 <= dtc1_out1_6 - bitsrl_y_int32_2_out1_5;

  y_tmp1_out1_11 <= dtc1_out1_6 + bitsrl_y_int32_2_out1_5;

  
  if_bitget_w_w_WordLength_0_1_out1_5 <= y_tmp1_out1_10 WHEN BitSlice1_out1_6 = '0' ELSE
      y_tmp1_out1_11;

  
  if_bitget_w_w_WordLength_1_1_out1_6 <= dtc1_out1_6 WHEN alphabitget_w_w_WordLength_1_out1_5 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_5;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(16#00000000#, 31);
      ELSIF enb = '1' THEN
        Delay14_out1 <= if_bitget_w_w_WordLength_1_1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Constant_out1_7 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_10 <= unsigned(Delay14_out1) & Constant_out1_7;

  dtc1_out1_7 <= signed(Bit_Concat_out1_10);

  bitsrl_y_int32_2_out1_6 <= dtc1_out1_7 srl 8;

  y_tmp1_out1_12 <= dtc1_out1_7 - bitsrl_y_int32_2_out1_6;

  y_tmp1_out1_13 <= dtc1_out1_7 + bitsrl_y_int32_2_out1_6;

  
  if_bitget_w_w_WordLength_0_1_out1_6 <= y_tmp1_out1_12 WHEN BitSlice1_out1_7 = '0' ELSE
      y_tmp1_out1_13;

  
  if_bitget_w_w_WordLength_1_1_out1_7 <= dtc1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_6 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_6;

  bitsrl_y_int32_2_out1_7 <= if_bitget_w_w_WordLength_1_1_out1_7 srl 9;

  y_tmp1_out1_14 <= if_bitget_w_w_WordLength_1_1_out1_7 - bitsrl_y_int32_2_out1_7;

  y_tmp1_out1_15 <= if_bitget_w_w_WordLength_1_1_out1_7 + bitsrl_y_int32_2_out1_7;

  
  if_bitget_w_w_WordLength_0_1_out1_7 <= y_tmp1_out1_14 WHEN BitSlice1_out1_8 = '0' ELSE
      y_tmp1_out1_15;

  
  if_bitget_w_w_WordLength_1_1_out1_8 <= if_bitget_w_w_WordLength_1_1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_7 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_7;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        Delay16_out1 <= if_bitget_w_w_WordLength_1_1_out1_8;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  bitsrl_y_int32_2_out1_8 <= Delay16_out1 srl 10;

  y_tmp1_out1_16 <= Delay16_out1 - bitsrl_y_int32_2_out1_8;

  y_tmp1_out1_17 <= Delay16_out1 + bitsrl_y_int32_2_out1_8;

  
  if_bitget_w_w_WordLength_0_1_out1_8 <= y_tmp1_out1_16 WHEN BitSlice1_out1_9 = '0' ELSE
      y_tmp1_out1_17;

  
  if_bitget_w_w_WordLength_1_1_out1_9 <= Delay16_out1 WHEN alphabitget_w_w_WordLength_1_out1_8 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_8;

  bitsrl_y_int32_2_out1_9 <= if_bitget_w_w_WordLength_1_1_out1_9 srl 11;

  y_tmp1_out1_18 <= if_bitget_w_w_WordLength_1_1_out1_9 - bitsrl_y_int32_2_out1_9;

  y_tmp1_out1_19 <= if_bitget_w_w_WordLength_1_1_out1_9 + bitsrl_y_int32_2_out1_9;

  
  if_bitget_w_w_WordLength_0_1_out1_9 <= y_tmp1_out1_18 WHEN BitSlice1_out1_10 = '0' ELSE
      y_tmp1_out1_19;

  
  if_bitget_w_w_WordLength_1_1_out1_10 <= if_bitget_w_w_WordLength_1_1_out1_9 WHEN alphabitget_w_w_WordLength_1_out1_9 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_9;

  Delay18_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1_1 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        Delay18_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_10;
      END IF;
    END IF;
  END PROCESS Delay18_1_process;


  bitsrl_y_int32_2_out1_10 <= Delay18_out1_1 srl 12;

  y_tmp1_out1_20 <= Delay18_out1_1 - bitsrl_y_int32_2_out1_10;

  y_tmp1_out1_21 <= Delay18_out1_1 + bitsrl_y_int32_2_out1_10;

  
  if_bitget_w_w_WordLength_0_1_out1_10 <= y_tmp1_out1_20 WHEN BitSlice1_out1_11 = '0' ELSE
      y_tmp1_out1_21;

  
  if_bitget_w_w_WordLength_1_1_out1_11 <= Delay18_out1_1 WHEN alphabitget_w_w_WordLength_1_out1_10 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_10;

  Delay1_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg <= (OTHERS => to_signed(0, 34));
      ELSIF enb = '1' THEN
        Delay1_reg(0) <= if_bitget_w_w_WordLength_1_1_out1_11;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_3_process;

  Delay1_out1_3 <= Delay1_reg(1);

  Bit_Slice2_out1 <= unsigned(Delay1_out1_3(32 DOWNTO 12));

  Data_Type_Conversion1_out1 <= signed(Bit_Slice2_out1);

  Log2Table_int32_11_out1_1 <= signed'("101000111010110111000100111101100");

  Log2MinusTable_int32_11_out1_1 <= signed'("010111000101100000000000010111000");

  
  if_bitget_w_w_WordLength_0_out1_10 <= Log2Table_int32_11_out1_1 WHEN BitSlice_out1_14 = '0' ELSE
      Log2MinusTable_int32_11_out1_1;

  w_Log2MinusTable_int32_2_out1_9 <= bitsll_w_1_out1_10 + if_bitget_w_w_WordLength_0_out1_10;

  
  if_bitget_w_w_WordLength_1_out1_11 <= bitsll_w_1_out1_10 WHEN alphabitget_w_w_WordLength_1_out1_10 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_9;

  Bit_Slice_out1 <= unsigned(if_bitget_w_w_WordLength_1_out1_11(32 DOWNTO 12));

  Data_Type_Conversion_out1_1 <= signed(Bit_Slice_out1);

  alpha0_69314717873930931_out1 <= to_signed(16#2C5C8#, 20);

  tmp1_0_69314717873930931_mul_temp <= Data_Type_Conversion_out1_1 * alpha0_69314717873930931_out1;
  tmp1_0_69314717873930931_out1 <= tmp1_0_69314717873930931_mul_temp(38 DOWNTO 18);

  Delay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg_1 <= (OTHERS => to_signed(16#000000#, 21));
      ELSIF enb = '1' THEN
        Delay_reg_1(0) <= tmp1_0_69314717873930931_out1;
        Delay_reg_1(1) <= Delay_reg_1(0);
      END IF;
    END IF;
  END PROCESS Delay_2_process;

  Delay_out1_2 <= Delay_reg_1(1);

  tmp2_y_mul_temp <= Data_Type_Conversion1_out1 * Delay_out1_2;
  tmp2_y_out1 <= tmp2_y_mul_temp(39 DOWNTO 19);

  Delay3_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_reg <= (OTHERS => to_signed(16#000000#, 21));
      ELSIF enb = '1' THEN
        Delay3_reg(0) <= tmp2_y_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_4_process;

  Delay3_out1_4 <= Delay3_reg(1);

  Bit_Slice1_out1 <= Delay3_out1_4(20);

  Constant1_out1_1 <= to_signed(16#0000#, 13);

  Constant_out1_8 <= to_signed(-16#0001#, 13);

  
  Switch_out1 <= Constant1_out1_1 WHEN Bit_Slice1_out1 = '0' ELSE
      Constant_out1_8;

  Delay2_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg <= (OTHERS => to_signed(0, 34));
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= Delay1_out1_3;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_3_process;

  Delay2_out1_3 <= Delay2_reg(1);

  Bit_Concat_out1_11 <= unsigned(Switch_out1) & unsigned(Delay3_out1_4);

  DTC2_out1_1 <= signed(Bit_Concat_out1_11);

  y_tmp3_out1 <= Delay2_out1_3 + DTC2_out1_1;

  cast_1_like_mant_frac_out1 <= unsigned'(X"80000000");

  cast_1_like_mant_frac_m_out1 <= cast_1_like_mant_frac_out1 - reinterpretcast_bitconcat_fi_0_out1_2;

  BitSlice1_out1_12 <= cast_1_like_mant_frac_m_out1(31);

  Logical_Operator_out1_2 <=  NOT BitSlice1_out1_12;

  
  if_sticky_1_out1 <= reinterpretcast_bitconcat_fi_0_out1_2 WHEN Logical_Operator_out1_2 = '0' ELSE
      cast_1_like_mant_frac_m_out1;

  Constant_out1_9 <= '0';

  Bit_Concat_out1_12 <= if_sticky_1_out1 & Constant_out1_9;

  Data_Type_Conversion_out1_2 <= signed(Bit_Concat_out1_12);

  BitSlice_out1_15 <= Data_Type_Conversion_out1_2(31);

  Log2Table_1_out1_1 <= signed'("101101010001111111110010111001000");

  w_Log2Table_1_out1_1 <= Data_Type_Conversion_out1_2 + Log2Table_1_out1_1;

  
  if_bitget_w_w_WordLength_1_out1_12 <= Data_Type_Conversion_out1_2 WHEN BitSlice_out1_15 = '0' ELSE
      w_Log2Table_1_out1_1;

  Delay12_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_2 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay12_out1_2 <= if_bitget_w_w_WordLength_1_out1_12;
      END IF;
    END IF;
  END PROCESS Delay12_2_process;


  bitsll_w_1_out1_11 <= Delay12_out1_2 sll 1;

  BitSlice1_out1_13 <= bitsll_w_1_out1_11(31);

  BitSlice_out1_16 <= bitsll_w_1_out1_11(32);

  alphabitget_w_w_WordLength_1_out1_11 <= BitSlice1_out1_13 XOR BitSlice_out1_16;

  Log2Table_int32_2_out1_1 <= signed'("101011011001011000011110110100000");

  Log2MinusTable_int32_2_out1_1 <= signed'("011010100011111111100101110001100");

  
  if_bitget_w_w_WordLength_0_out1_11 <= Log2Table_int32_2_out1_1 WHEN BitSlice_out1_16 = '0' ELSE
      Log2MinusTable_int32_2_out1_1;

  w_Log2MinusTable_int32_2_1_out1_1 <= bitsll_w_1_out1_11 + if_bitget_w_w_WordLength_0_out1_11;

  
  if_bitget_w_w_WordLength_1_out1_13 <= bitsll_w_1_out1_11 WHEN alphabitget_w_w_WordLength_1_out1_11 = '0' ELSE
      w_Log2MinusTable_int32_2_1_out1_1;

  bitsll_w_1_out1_12 <= if_bitget_w_w_WordLength_1_out1_13 sll 1;

  BitSlice1_out1_14 <= bitsll_w_1_out1_12(31);

  BitSlice_out1_17 <= bitsll_w_1_out1_12(32);

  alphabitget_w_w_WordLength_1_out1_12 <= BitSlice1_out1_14 XOR BitSlice_out1_17;

  Log2Table_int32_3_out1_1 <= signed'("101010001111111110010111000110000");

  Log2MinusTable_int32_3_out1_1 <= signed'("011000101010001001100000001010100");

  
  if_bitget_w_w_WordLength_0_out1_12 <= Log2Table_int32_3_out1_1 WHEN BitSlice_out1_17 = '0' ELSE
      Log2MinusTable_int32_3_out1_1;

  w_Log2MinusTable_int32_2_out1_10 <= bitsll_w_1_out1_12 + if_bitget_w_w_WordLength_0_out1_12;

  
  if_bitget_w_w_WordLength_1_out1_14 <= bitsll_w_1_out1_12 WHEN alphabitget_w_w_WordLength_1_out1_12 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_10;

  Delay11_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_2 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay11_out1_2 <= if_bitget_w_w_WordLength_1_out1_14;
      END IF;
    END IF;
  END PROCESS Delay11_2_process;


  bitsll_w_1_out1_13 <= Delay11_out1_2 sll 1;

  BitSlice1_out1_15 <= bitsll_w_1_out1_13(31);

  BitSlice_out1_18 <= bitsll_w_1_out1_13(32);

  alphabitget_w_w_WordLength_1_out1_13 <= BitSlice1_out1_15 XOR BitSlice_out1_18;

  Log2Table_int32_4_out1_1 <= signed'("101001100111000000100100000101000");

  Log2MinusTable_int32_4_out1_1 <= signed'("010111110101100000010010010111000");

  
  if_bitget_w_w_WordLength_0_out1_13 <= Log2Table_int32_4_out1_1 WHEN BitSlice_out1_18 = '0' ELSE
      Log2MinusTable_int32_4_out1_1;

  w_Log2MinusTable_int32_2_out1_11 <= bitsll_w_1_out1_13 + if_bitget_w_w_WordLength_0_out1_13;

  
  if_bitget_w_w_WordLength_1_out1_15 <= bitsll_w_1_out1_13 WHEN alphabitget_w_w_WordLength_1_out1_13 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_11;

  bitsll_w_1_out1_14 <= if_bitget_w_w_WordLength_1_out1_15 sll 1;

  BitSlice1_out1_16 <= bitsll_w_1_out1_14(31);

  BitSlice_out1_19 <= bitsll_w_1_out1_14(32);

  alphabitget_w_w_WordLength_1_out1_14 <= BitSlice1_out1_16 XOR BitSlice_out1_19;

  Log2Table_int32_5_out1_1 <= signed'("101001010001010010110010001010100");

  Log2MinusTable_int32_5_out1_1 <= signed'("010111011100111001010011001010000");

  
  if_bitget_w_w_WordLength_0_out1_14 <= Log2Table_int32_5_out1_1 WHEN BitSlice_out1_19 = '0' ELSE
      Log2MinusTable_int32_5_out1_1;

  w_Log2MinusTable_int32_2_out1_12 <= bitsll_w_1_out1_14 + if_bitget_w_w_WordLength_0_out1_14;

  
  if_bitget_w_w_WordLength_1_out1_16 <= bitsll_w_1_out1_14 WHEN alphabitget_w_w_WordLength_1_out1_14 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_12;

  Delay13_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1_1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay13_out1_1 <= if_bitget_w_w_WordLength_1_out1_16;
      END IF;
    END IF;
  END PROCESS Delay13_1_process;


  bitsll_w_1_out1_15 <= Delay13_out1_1 sll 1;

  BitSlice1_out1_17 <= bitsll_w_1_out1_15(31);

  BitSlice_out1_20 <= bitsll_w_1_out1_15(32);

  alphabitget_w_w_WordLength_1_out1_15 <= BitSlice1_out1_17 XOR BitSlice_out1_20;

  Log2Table_int32_6_out1_1 <= signed'("101001000110000110100101111010000");

  Log2MinusTable_int32_6_out1_1 <= signed'("010111010000111110111010000110000");

  
  if_bitget_w_w_WordLength_0_out1_15 <= Log2Table_int32_6_out1_1 WHEN BitSlice_out1_20 = '0' ELSE
      Log2MinusTable_int32_6_out1_1;

  w_Log2MinusTable_int32_2_out1_13 <= bitsll_w_1_out1_15 + if_bitget_w_w_WordLength_0_out1_15;

  
  if_bitget_w_w_WordLength_1_out1_17 <= bitsll_w_1_out1_15 WHEN alphabitget_w_w_WordLength_1_out1_15 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_13;

  bitsll_w_1_out1_16 <= if_bitget_w_w_WordLength_1_out1_17 sll 1;

  BitSlice1_out1_18 <= bitsll_w_1_out1_16(31);

  BitSlice_out1_21 <= bitsll_w_1_out1_16(32);

  alphabitget_w_w_WordLength_1_out1_16 <= BitSlice1_out1_18 XOR BitSlice_out1_21;

  Log2Table_int32_7_out1_1 <= signed'("101001000000011010111101001001000");

  Log2MinusTable_int32_7_out1_1 <= signed'("010111001011000111101110100010000");

  
  if_bitget_w_w_WordLength_0_out1_16 <= Log2Table_int32_7_out1_1 WHEN BitSlice_out1_21 = '0' ELSE
      Log2MinusTable_int32_7_out1_1;

  w_Log2MinusTable_int32_2_out1_14 <= bitsll_w_1_out1_16 + if_bitget_w_w_WordLength_0_out1_16;

  
  if_bitget_w_w_WordLength_1_out1_18 <= bitsll_w_1_out1_16 WHEN alphabitget_w_w_WordLength_1_out1_16 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_14;

  Delay15_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1_1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay15_out1_1 <= if_bitget_w_w_WordLength_1_out1_18;
      END IF;
    END IF;
  END PROCESS Delay15_1_process;


  bitsll_w_1_out1_17 <= Delay15_out1_1 sll 1;

  BitSlice1_out1_19 <= bitsll_w_1_out1_17(31);

  BitSlice_out1_22 <= bitsll_w_1_out1_17(32);

  alphabitget_w_w_WordLength_1_out1_17 <= BitSlice1_out1_19 XOR BitSlice_out1_22;

  Log2Table_int32_8_out1_1 <= signed'("101000111101100011101110010010100");

  Log2MinusTable_int32_8_out1_1 <= signed'("010111001000001101100111000000100");

  
  if_bitget_w_w_WordLength_0_out1_17 <= Log2Table_int32_8_out1_1 WHEN BitSlice_out1_22 = '0' ELSE
      Log2MinusTable_int32_8_out1_1;

  w_Log2MinusTable_int32_2_out1_15 <= bitsll_w_1_out1_17 + if_bitget_w_w_WordLength_0_out1_17;

  
  if_bitget_w_w_WordLength_1_out1_19 <= bitsll_w_1_out1_17 WHEN alphabitget_w_w_WordLength_1_out1_17 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_15;

  bitsll_w_1_out1_18 <= if_bitget_w_w_WordLength_1_out1_19 sll 1;

  BitSlice1_out1_20 <= bitsll_w_1_out1_18(31);

  BitSlice_out1_23 <= bitsll_w_1_out1_18(32);

  alphabitget_w_w_WordLength_1_out1_18 <= BitSlice1_out1_20 XOR BitSlice_out1_23;

  Log2Table_int32_9_out1_1 <= signed'("101000111100000111110000000001000");

  Log2MinusTable_int32_9_out1_1 <= signed'("010111000110110000111010100100000");

  
  if_bitget_w_w_WordLength_0_out1_18 <= Log2Table_int32_9_out1_1 WHEN BitSlice_out1_23 = '0' ELSE
      Log2MinusTable_int32_9_out1_1;

  w_Log2MinusTable_int32_2_out1_16 <= bitsll_w_1_out1_18 + if_bitget_w_w_WordLength_0_out1_18;

  
  if_bitget_w_w_WordLength_1_out1_20 <= bitsll_w_1_out1_18 WHEN alphabitget_w_w_WordLength_1_out1_18 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_16;

  Delay17_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1_1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay17_out1_1 <= if_bitget_w_w_WordLength_1_out1_20;
      END IF;
    END IF;
  END PROCESS Delay17_1_process;


  bitsll_w_1_out1_19 <= Delay17_out1_1 sll 1;

  BitSlice1_out1_21 <= bitsll_w_1_out1_19(31);

  BitSlice_out1_24 <= bitsll_w_1_out1_19(32);

  alphabitget_w_w_WordLength_1_out1_19 <= BitSlice1_out1_21 XOR BitSlice_out1_24;

  Log2Table_int32_10_out1_1 <= signed'("101000111011011001101011001000100");

  Log2MinusTable_int32_10_out1_1 <= signed'("010111000110000010101010001001100");

  
  if_bitget_w_w_WordLength_0_out1_19 <= Log2Table_int32_10_out1_1 WHEN BitSlice_out1_24 = '0' ELSE
      Log2MinusTable_int32_10_out1_1;

  w_Log2MinusTable_int32_2_out1_17 <= bitsll_w_1_out1_19 + if_bitget_w_w_WordLength_0_out1_19;

  
  if_bitget_w_w_WordLength_1_out1_21 <= bitsll_w_1_out1_19 WHEN alphabitget_w_w_WordLength_1_out1_19 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_17;

  bitsll_w_1_out1_20 <= if_bitget_w_w_WordLength_1_out1_21 sll 1;

  BitSlice1_out1_22 <= bitsll_w_1_out1_20(31);

  BitSlice_out1_25 <= bitsll_w_1_out1_20(32);

  alphabitget_w_w_WordLength_1_out1_20 <= BitSlice1_out1_22 XOR BitSlice_out1_25;

  Log2Table_int32_11_out1_2 <= signed'("101000111011000010100111010000100");

  Log2MinusTable_int32_11_out1_2 <= signed'("010111000101101011100011011000100");

  
  if_bitget_w_w_WordLength_0_out1_20 <= Log2Table_int32_11_out1_2 WHEN BitSlice_out1_25 = '0' ELSE
      Log2MinusTable_int32_11_out1_2;

  w_Log2MinusTable_int32_2_out1_18 <= bitsll_w_1_out1_20 + if_bitget_w_w_WordLength_0_out1_20;

  
  if_bitget_w_w_WordLength_1_out1_22 <= bitsll_w_1_out1_20 WHEN alphabitget_w_w_WordLength_1_out1_20 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_18;

  Delay19_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1_1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay19_out1_1 <= if_bitget_w_w_WordLength_1_out1_22;
      END IF;
    END IF;
  END PROCESS Delay19_1_process;


  bitsll_w_1_out1_21 <= Delay19_out1_1 sll 1;

  BitSlice1_out1_23 <= bitsll_w_1_out1_21(31);

  BitSlice_out1_26 <= bitsll_w_1_out1_21(32);

  alphabitget_w_w_WordLength_1_out1_21 <= BitSlice1_out1_23 XOR BitSlice_out1_26;

  C1_out1_2 <= to_signed(16#2#, 4);

  C_out1_3 <= to_signed(16#3#, 4);

  
  if_bitget_w_w_WordLength_1_1_out1_12 <= C1_out1_2 WHEN BitSlice_out1_15 = '0' ELSE
      C_out1_3;

  Delay11_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1_3 <= to_signed(16#0#, 4);
      ELSIF enb = '1' THEN
        Delay11_out1_3 <= if_bitget_w_w_WordLength_1_1_out1_12;
      END IF;
    END IF;
  END PROCESS Delay11_3_process;


  Constant_out1_10 <= to_unsigned(16#0#, 2);

  Bit_Concat_out1_13 <= unsigned(Delay11_out1_3) & Constant_out1_10;

  dtc1_out1_8 <= signed(Bit_Concat_out1_13);

  bitsrl_y_int32_2_out1_11 <= dtc1_out1_8 srl 2;

  y_tmp1_out1_22 <= dtc1_out1_8 - bitsrl_y_int32_2_out1_11;

  y_tmp1_out1_23 <= dtc1_out1_8 + bitsrl_y_int32_2_out1_11;

  
  if_bitget_w_w_WordLength_0_1_out1_11 <= y_tmp1_out1_22 WHEN BitSlice1_out1_13 = '0' ELSE
      y_tmp1_out1_23;

  
  if_bitget_w_w_WordLength_1_1_out1_13 <= dtc1_out1_8 WHEN alphabitget_w_w_WordLength_1_out1_11 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_11;

  Constant_out1_11 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_14 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_13) & Constant_out1_11;

  dtc1_out1_9 <= signed(Bit_Concat_out1_14);

  bitsrl_y_int32_2_out1_12 <= dtc1_out1_9 srl 3;

  y_tmp1_out1_24 <= dtc1_out1_9 - bitsrl_y_int32_2_out1_12;

  y_tmp1_out1_25 <= dtc1_out1_9 + bitsrl_y_int32_2_out1_12;

  
  if_bitget_w_w_WordLength_0_1_out1_12 <= y_tmp1_out1_24 WHEN BitSlice1_out1_14 = '0' ELSE
      y_tmp1_out1_25;

  
  if_bitget_w_w_WordLength_1_1_out1_14 <= dtc1_out1_9 WHEN alphabitget_w_w_WordLength_1_out1_12 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_12;

  Delay10_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1_1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay10_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_14;
      END IF;
    END IF;
  END PROCESS Delay10_1_process;


  Constant_out1_12 <= to_unsigned(16#0#, 4);

  Bit_Concat_out1_15 <= unsigned(Delay10_out1_1) & Constant_out1_12;

  dtc1_out1_10 <= signed(Bit_Concat_out1_15);

  bitsrl_y_int32_2_out1_13 <= dtc1_out1_10 srl 4;

  y_tmp1_out1_26 <= dtc1_out1_10 - bitsrl_y_int32_2_out1_13;

  y_tmp1_out1_27 <= dtc1_out1_10 + bitsrl_y_int32_2_out1_13;

  
  if_bitget_w_w_WordLength_0_1_out1_13 <= y_tmp1_out1_26 WHEN BitSlice1_out1_15 = '0' ELSE
      y_tmp1_out1_27;

  
  if_bitget_w_w_WordLength_1_1_out1_15 <= dtc1_out1_10 WHEN alphabitget_w_w_WordLength_1_out1_13 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_13;

  Constant_out1_13 <= to_unsigned(16#00#, 5);

  Bit_Concat_out1_16 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_15) & Constant_out1_13;

  dtc1_out1_11 <= signed(Bit_Concat_out1_16);

  bitsrl_y_int32_2_out1_14 <= dtc1_out1_11 srl 5;

  y_tmp1_out1_28 <= dtc1_out1_11 - bitsrl_y_int32_2_out1_14;

  y_tmp1_out1_29 <= dtc1_out1_11 + bitsrl_y_int32_2_out1_14;

  
  if_bitget_w_w_WordLength_0_1_out1_14 <= y_tmp1_out1_28 WHEN BitSlice1_out1_16 = '0' ELSE
      y_tmp1_out1_29;

  
  if_bitget_w_w_WordLength_1_1_out1_16 <= dtc1_out1_11 WHEN alphabitget_w_w_WordLength_1_out1_14 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_14;

  Delay12_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1_3 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay12_out1_3 <= if_bitget_w_w_WordLength_1_1_out1_16;
      END IF;
    END IF;
  END PROCESS Delay12_3_process;


  Constant_out1_14 <= to_unsigned(16#00#, 6);

  Bit_Concat_out1_17 <= unsigned(Delay12_out1_3) & Constant_out1_14;

  dtc1_out1_12 <= signed(Bit_Concat_out1_17);

  bitsrl_y_int32_2_out1_15 <= dtc1_out1_12 srl 6;

  y_tmp1_out1_30 <= dtc1_out1_12 - bitsrl_y_int32_2_out1_15;

  y_tmp1_out1_31 <= dtc1_out1_12 + bitsrl_y_int32_2_out1_15;

  
  if_bitget_w_w_WordLength_0_1_out1_15 <= y_tmp1_out1_30 WHEN BitSlice1_out1_17 = '0' ELSE
      y_tmp1_out1_31;

  
  if_bitget_w_w_WordLength_1_1_out1_17 <= dtc1_out1_12 WHEN alphabitget_w_w_WordLength_1_out1_15 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_15;

  Constant_out1_15 <= to_unsigned(16#00#, 7);

  Bit_Concat_out1_18 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_17) & Constant_out1_15;

  dtc1_out1_13 <= signed(Bit_Concat_out1_18);

  bitsrl_y_int32_2_out1_16 <= dtc1_out1_13 srl 7;

  y_tmp1_out1_32 <= dtc1_out1_13 - bitsrl_y_int32_2_out1_16;

  y_tmp1_out1_33 <= dtc1_out1_13 + bitsrl_y_int32_2_out1_16;

  
  if_bitget_w_w_WordLength_0_1_out1_16 <= y_tmp1_out1_32 WHEN BitSlice1_out1_18 = '0' ELSE
      y_tmp1_out1_33;

  
  if_bitget_w_w_WordLength_1_1_out1_18 <= dtc1_out1_13 WHEN alphabitget_w_w_WordLength_1_out1_16 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_16;

  Delay14_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1_1 <= to_signed(16#00000000#, 31);
      ELSIF enb = '1' THEN
        Delay14_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_18;
      END IF;
    END IF;
  END PROCESS Delay14_1_process;


  Constant_out1_16 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_19 <= unsigned(Delay14_out1_1) & Constant_out1_16;

  dtc1_out1_14 <= signed(Bit_Concat_out1_19);

  bitsrl_y_int32_2_out1_17 <= dtc1_out1_14 srl 8;

  y_tmp1_out1_34 <= dtc1_out1_14 - bitsrl_y_int32_2_out1_17;

  y_tmp1_out1_35 <= dtc1_out1_14 + bitsrl_y_int32_2_out1_17;

  
  if_bitget_w_w_WordLength_0_1_out1_17 <= y_tmp1_out1_34 WHEN BitSlice1_out1_19 = '0' ELSE
      y_tmp1_out1_35;

  
  if_bitget_w_w_WordLength_1_1_out1_19 <= dtc1_out1_14 WHEN alphabitget_w_w_WordLength_1_out1_17 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_17;

  bitsrl_y_int32_2_out1_18 <= if_bitget_w_w_WordLength_1_1_out1_19 srl 9;

  y_tmp1_out1_36 <= if_bitget_w_w_WordLength_1_1_out1_19 - bitsrl_y_int32_2_out1_18;

  y_tmp1_out1_37 <= if_bitget_w_w_WordLength_1_1_out1_19 + bitsrl_y_int32_2_out1_18;

  
  if_bitget_w_w_WordLength_0_1_out1_18 <= y_tmp1_out1_36 WHEN BitSlice1_out1_20 = '0' ELSE
      y_tmp1_out1_37;

  
  if_bitget_w_w_WordLength_1_1_out1_20 <= if_bitget_w_w_WordLength_1_1_out1_19 WHEN alphabitget_w_w_WordLength_1_out1_18 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_18;

  Delay16_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1_1 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        Delay16_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_20;
      END IF;
    END IF;
  END PROCESS Delay16_1_process;


  bitsrl_y_int32_2_out1_19 <= Delay16_out1_1 srl 10;

  y_tmp1_out1_38 <= Delay16_out1_1 - bitsrl_y_int32_2_out1_19;

  y_tmp1_out1_39 <= Delay16_out1_1 + bitsrl_y_int32_2_out1_19;

  
  if_bitget_w_w_WordLength_0_1_out1_19 <= y_tmp1_out1_38 WHEN BitSlice1_out1_21 = '0' ELSE
      y_tmp1_out1_39;

  
  if_bitget_w_w_WordLength_1_1_out1_21 <= Delay16_out1_1 WHEN alphabitget_w_w_WordLength_1_out1_19 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_19;

  bitsrl_y_int32_2_out1_20 <= if_bitget_w_w_WordLength_1_1_out1_21 srl 11;

  y_tmp1_out1_40 <= if_bitget_w_w_WordLength_1_1_out1_21 - bitsrl_y_int32_2_out1_20;

  y_tmp1_out1_41 <= if_bitget_w_w_WordLength_1_1_out1_21 + bitsrl_y_int32_2_out1_20;

  
  if_bitget_w_w_WordLength_0_1_out1_20 <= y_tmp1_out1_40 WHEN BitSlice1_out1_22 = '0' ELSE
      y_tmp1_out1_41;

  
  if_bitget_w_w_WordLength_1_1_out1_22 <= if_bitget_w_w_WordLength_1_1_out1_21 WHEN alphabitget_w_w_WordLength_1_out1_20 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_20;

  Delay18_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1_2 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        Delay18_out1_2 <= if_bitget_w_w_WordLength_1_1_out1_22;
      END IF;
    END IF;
  END PROCESS Delay18_2_process;


  bitsrl_y_int32_2_out1_21 <= Delay18_out1_2 srl 12;

  y_tmp1_out1_42 <= Delay18_out1_2 - bitsrl_y_int32_2_out1_21;

  y_tmp1_out1_43 <= Delay18_out1_2 + bitsrl_y_int32_2_out1_21;

  
  if_bitget_w_w_WordLength_0_1_out1_21 <= y_tmp1_out1_42 WHEN BitSlice1_out1_23 = '0' ELSE
      y_tmp1_out1_43;

  
  if_bitget_w_w_WordLength_1_1_out1_23 <= Delay18_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_21 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_21;

  Delay1_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg_1 <= (OTHERS => to_signed(0, 34));
      ELSIF enb = '1' THEN
        Delay1_reg_1(0) <= if_bitget_w_w_WordLength_1_1_out1_23;
        Delay1_reg_1(1) <= Delay1_reg_1(0);
      END IF;
    END IF;
  END PROCESS Delay1_4_process;

  Delay1_out1_4 <= Delay1_reg_1(1);

  Bit_Slice2_out1_1 <= unsigned(Delay1_out1_4(32 DOWNTO 12));

  Data_Type_Conversion1_out1_1 <= signed(Bit_Slice2_out1_1);

  Log2Table_int32_11_out1_3 <= signed'("101000111010110111000100111101100");

  Log2MinusTable_int32_11_out1_3 <= signed'("010111000101100000000000010111000");

  
  if_bitget_w_w_WordLength_0_out1_21 <= Log2Table_int32_11_out1_3 WHEN BitSlice_out1_26 = '0' ELSE
      Log2MinusTable_int32_11_out1_3;

  w_Log2MinusTable_int32_2_out1_19 <= bitsll_w_1_out1_21 + if_bitget_w_w_WordLength_0_out1_21;

  
  if_bitget_w_w_WordLength_1_out1_23 <= bitsll_w_1_out1_21 WHEN alphabitget_w_w_WordLength_1_out1_21 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_19;

  Bit_Slice_out1_1 <= unsigned(if_bitget_w_w_WordLength_1_out1_23(32 DOWNTO 12));

  Data_Type_Conversion_out1_3 <= signed(Bit_Slice_out1_1);

  alpha0_69314717873930931_out1_1 <= to_signed(16#2C5C8#, 20);

  tmp1_0_69314717873930931_mul_temp_1 <= Data_Type_Conversion_out1_3 * alpha0_69314717873930931_out1_1;
  tmp1_0_69314717873930931_out1_1 <= tmp1_0_69314717873930931_mul_temp_1(38 DOWNTO 18);

  Delay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg_2 <= (OTHERS => to_signed(16#000000#, 21));
      ELSIF enb = '1' THEN
        Delay_reg_2(0) <= tmp1_0_69314717873930931_out1_1;
        Delay_reg_2(1) <= Delay_reg_2(0);
      END IF;
    END IF;
  END PROCESS Delay_3_process;

  Delay_out1_3 <= Delay_reg_2(1);

  tmp2_y_mul_temp_1 <= Data_Type_Conversion1_out1_1 * Delay_out1_3;
  tmp2_y_out1_1 <= tmp2_y_mul_temp_1(39 DOWNTO 19);

  Delay3_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_reg_1 <= (OTHERS => to_signed(16#000000#, 21));
      ELSIF enb = '1' THEN
        Delay3_reg_1(0) <= tmp2_y_out1_1;
        Delay3_reg_1(1) <= Delay3_reg_1(0);
      END IF;
    END IF;
  END PROCESS Delay3_5_process;

  Delay3_out1_5 <= Delay3_reg_1(1);

  Bit_Slice1_out1_1 <= Delay3_out1_5(20);

  Constant1_out1_2 <= to_signed(16#0000#, 13);

  Constant_out1_17 <= to_signed(-16#0001#, 13);

  
  Switch_out1_1 <= Constant1_out1_2 WHEN Bit_Slice1_out1_1 = '0' ELSE
      Constant_out1_17;

  Delay2_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg_1 <= (OTHERS => to_signed(0, 34));
      ELSIF enb = '1' THEN
        Delay2_reg_1(0) <= Delay1_out1_4;
        Delay2_reg_1(1) <= Delay2_reg_1(0);
      END IF;
    END IF;
  END PROCESS Delay2_4_process;

  Delay2_out1_4 <= Delay2_reg_1(1);

  Bit_Concat_out1_20 <= unsigned(Switch_out1_1) & unsigned(Delay3_out1_5);

  DTC2_out1_2 <= signed(Bit_Concat_out1_20);

  y_tmp3_out1_1 <= Delay2_out1_4 + DTC2_out1_2;

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        Delay31_out1 <= y_tmp3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  alpha1_out1 <= '0';

  BitSlice2_out1_1 <= Delay3_out1_3(39 DOWNTO 31);

  Bit_Concat1_out1 <= alpha1_out1 & BitSlice2_out1_1;

  reinterpretcast_bitconcat_fi_0_out1_3 <= signed(Bit_Concat1_out1);

  Bit_Slice_out1_2 <= unsigned(reinterpretcast_bitconcat_fi_0_out1_3(8 DOWNTO 0));

  Bit_Concat2_out1 <= Bit_Slice_out1_2 & Logical_Operator_out1_2;

  Delay17_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_reg <= (OTHERS => to_unsigned(16#000#, 10));
      ELSIF enb = '1' THEN
        Delay17_reg(0) <= Bit_Concat2_out1;
        Delay17_reg(1 TO 5) <= Delay17_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay17_2_process;

  Delay17_out1_2 <= Delay17_reg(5);

  Delay31_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1_1 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        Delay31_out1_1 <= y_tmp3_out1;
      END IF;
    END IF;
  END PROCESS Delay31_1_process;


  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_reg <= (OTHERS => to_unsigned(16#000#, 10));
      ELSIF enb = '1' THEN
        Delay32_reg(0) <= Delay17_out1_2;
        Delay32_reg(1 TO 4) <= Delay32_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS Delay32_process;

  Delay32_out1 <= Delay32_reg(4);

  dynamic_shift_cast_2 <= resize(Delay32_out1, 16);
  Shift_Arithmetic_out1_1 <= SHIFT_RIGHT(Delay31_out1, to_integer(dynamic_shift_cast_2));

  Add_out1_1 <= Delay31_out1_1 + Shift_Arithmetic_out1_1;

  Bit_Slice_out1_3 <= Add_out1_1(32);

  Bit_Slice2_out1_2 <= unsigned(Add_out1_1(30 DOWNTO 7));

  Bit_Slice1_out1_2 <= unsigned(Add_out1_1(31 DOWNTO 8));

  
  Switch_out1_2 <= Bit_Slice2_out1_2 WHEN Bit_Slice_out1_3 = '0' ELSE
      Bit_Slice1_out1_2;

  Delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay36_out1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay36_out1 <= Switch_out1_2;
      END IF;
    END IF;
  END PROCESS Delay36_process;


  Bit_Concat_out1_21 <= alpha0_out1_1 & Delay36_out1;

  BitSlice1_out1_24 <= Bit_Concat_out1_21(1);

  Delay11_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay11_reg(0) <= Logical_Operator_out1_2;
        Delay11_reg(5 DOWNTO 1) <= Delay11_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay11_4_process;

  Delay11_out1_4 <= Delay11_reg(5);

  Delay19_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay19_reg(0) <= Delay11_out1_4;
        Delay19_reg(4 DOWNTO 1) <= Delay19_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay19_2_process;

  Delay19_out1_2 <= Delay19_reg(4);

  BitSlice_out1_27 <= Bit_Concat_out1_21(0);

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay37_out1 <= Delay19_out1_2;
      END IF;
    END IF;
  END PROCESS Delay37_process;


  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1_24 OR Delay37_out1;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_27 AND alphabitget_Mant_tmp_2_0_out1;

  cast_2_like_Mant_tmp_out1 <= to_unsigned(16#0000002#, 25);

  Mant_tmp_cast_2_like_Man_out1 <= resize(resize(Bit_Concat_out1_21, 32) + resize(cast_2_like_Mant_tmp_out1, 32), 25);

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_21 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_cast_2_like_Man_out1;

  BitSlice2_out1_2 <= if_bitget_Mant_tmp_1_0_out1(24);

  alpha127_out1 <= to_signed(16#07F#, 10);

  alpha127_exp_tmp_out1 <= alpha127_out1 + reinterpretcast_bitconcat_fi_0_out1_3;

  Delay16_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_reg <= (OTHERS => to_signed(16#000#, 10));
      ELSIF enb = '1' THEN
        Delay16_reg(0) <= alpha127_exp_tmp_out1;
        Delay16_reg(1 TO 5) <= Delay16_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay16_2_process;

  Delay16_out1_2 <= Delay16_reg(5);

  Delay4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_reg <= (OTHERS => to_signed(16#000#, 10));
      ELSIF enb = '1' THEN
        Delay4_reg(0) <= Delay16_out1_2;
        Delay4_reg(1 TO 4) <= Delay4_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS Delay4_1_process;

  Delay4_out1_1 <= Delay4_reg(4);

  Bit_Slice3_out1 <= Delay4_out1_1(8);

  Constant_out1_18 <= to_signed(-16#001#, 10);

  Add1_out1 <= Delay4_out1_1 + Constant_out1_18;

  Data_Type_Conversion1_out1_2 <= unsigned(Add1_out1(7 DOWNTO 0));

  Data_Type_Conversion_out1_4 <= unsigned(Delay4_out1_1(7 DOWNTO 0));

  
  Switch1_out1_1 <= Data_Type_Conversion1_out1_2 WHEN Bit_Slice_out1_3 = '0' ELSE
      Data_Type_Conversion_out1_4;

  Constant1_out1_3 <= to_unsigned(16#FF#, 8);

  
  Switch2_out1 <= Switch1_out1_1 WHEN Bit_Slice3_out1 = '0' ELSE
      Constant1_out1_3;

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay35_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay35_process;


  cast_1_like_Exp_out1 <= to_unsigned(16#01#, 8);

  Exp_cast_1_like_Exp_out1 <= Delay35_out1 + cast_1_like_Exp_out1;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= Delay35_out1 WHEN BitSlice2_out1_2 = '0' ELSE
      Exp_cast_1_like_Exp_out1;

  
  if_in_range_2_out1 <= C1_out1 WHEN Delay38_out1 = '0' ELSE
      if_bitget_Mant_tmp_Mant_tmp_Wor_out1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_reg <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Delay7_reg(0) <= Delay1_out1_1;
        Delay7_reg(1 TO 14) <= Delay7_reg(0 TO 13);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(14);

  
  if_aExponent_cfType_Exponent_out1 <= if_in_range_2_out1 WHEN Delay9_out1 = '0' ELSE
      Delay7_out1;

  Constant3_out1 <= to_unsigned(16#00#, 8);

  
  Switch6_out1 <= if_aExponent_cfType_Exponent_out1 WHEN Delay1_out1 = '0' ELSE
      Constant3_out1;

  Delay4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay4_out1_2 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay4_2_process;


  
  Compare_To_Constant_out1 <= '1' WHEN if_bitget_Mant_tmp_Mant_tmp_Wor_out1 /= to_unsigned(16#FF#, 8) ELSE
      '0';

  Logical_Operator_out1_3 <= Compare_To_Constant_out1 AND Delay38_out1;

  C2_out1 <= to_unsigned(16#000000#, 23);

  BitSlice3_out1 <= if_bitget_Mant_tmp_1_0_out1(23 DOWNTO 1);

  C_out1_4 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1 WHEN BitSlice2_out1_2 = '0' ELSE
      C_out1_4;

  
  if_in_range_1_out1 <= C2_out1 WHEN Logical_Operator_out1_3 = '0' ELSE
      if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_reg <= (OTHERS => to_unsigned(16#000000#, 23));
      ELSIF enb = '1' THEN
        Delay8_reg(0) <= Delay2_out1;
        Delay8_reg(1 TO 14) <= Delay8_reg(0 TO 13);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(14);

  
  if_aExponent_cfType_Exponent_1_out1 <= if_in_range_1_out1 WHEN Delay9_out1 = '0' ELSE
      Delay8_out1;

  Constant2_out1 <= to_unsigned(16#000000#, 23);

  
  Switch5_out1 <= if_aExponent_cfType_Exponent_1_out1 WHEN Delay1_out1 = '0' ELSE
      Constant2_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_unsigned(16#000000#, 23);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= Delay3_out1_1 & Delay4_out1_2 & Delay5_out1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

