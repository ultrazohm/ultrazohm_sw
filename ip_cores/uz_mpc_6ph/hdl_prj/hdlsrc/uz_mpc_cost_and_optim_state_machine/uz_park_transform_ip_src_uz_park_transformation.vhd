-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_mpc_cost_and_optim_state_machine\uz_park_transform_ip_src_uz_park_transformation.vhd
-- Created: 2022-10-04 11:12:29
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- y1                            ce_out        1e-08
-- y2                            ce_out        1e-08
-- y1_AXI                        ce_out        1e-08
-- y2_AXI                        ce_out        1e-08
-- sin                           ce_out        1e-08
-- cos                           ce_out        1e-08
-- park_done                     ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_park_transform_ip_src_uz_park_transformation
-- Source Path: uz_mpc_cost_and_optim_state_machine/uz_park_transformation
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_park_transform_ip_src_uz_park_transformation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        u1                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        u2                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        angle_el                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
        trigger                           :   IN    std_logic;
        factor_angle_el_AXI               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
        ce_out                            :   OUT   std_logic;
        y1                                :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        y2                                :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        y1_AXI                            :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        y2_AXI                            :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        sin                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        cos                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        park_done                         :   OUT   std_logic
        );
END uz_park_transform_ip_src_uz_park_transformation;


ARCHITECTURE rtl OF uz_park_transform_ip_src_uz_park_transformation IS

  -- Component Declarations
  COMPONENT uz_park_transform_ip_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_park_transform_ip_src_Sine_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          x                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          y                               :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_park_transform_ip_src_Detect_Rise_Positive
    USE ENTITY work.uz_park_transform_ip_src_Detect_Rise_Positive(rtl);

  FOR ALL : uz_park_transform_ip_src_Sine_HDL_Optimized
    USE ENTITY work.uz_park_transform_ip_src_Sine_HDL_Optimized(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL factor_angle_el_AXI_signed       : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay11_out1                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Switch3_out1                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay12_out1                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL angle_el_signed                  : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay2_out1                      : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Switch2_out1                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay6_out1                      : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Product_mul_temp                 : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL Product_out1                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay15_out1                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Gain_mul_temp                    : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Gain_out1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Delay14_out1                     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Sine                             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Cosine                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Cosine_signed                    : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Cosine_1                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL u1_signed                        : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay_out1                       : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL u1_1                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL u1_2                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Divide_mul_temp                  : signed(35 DOWNTO 0);  -- sfix36_En27
  SIGNAL Divide_out1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Sine_signed                      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Sine_1                           : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL u2_signed                        : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL u2_1                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL u2_2                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Divide1_mul_temp                 : signed(35 DOWNTO 0);  -- sfix36_En27
  SIGNAL Divide1_out1                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add_out1                         : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add_out1_1                       : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Divide3_mul_temp                 : signed(35 DOWNTO 0);  -- sfix36_En27
  SIGNAL Divide3_out1                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Divide2_mul_temp                 : signed(35 DOWNTO 0);  -- sfix36_En27
  SIGNAL Divide2_out1                     : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add1_out1                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add1_out1_1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL Sine_2                           : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Cosine_2                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL u1_3                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL u2_3                             : signed(17 DOWNTO 0);  -- sfix18_En11

BEGIN
  u_Detect_Rise_Positive : uz_park_transform_ip_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay3_out1,
              Y => Detect_Rise_Positive_out1
              );

  u_Sine_HDL_Optimized : uz_park_transform_ip_src_Sine_HDL_Optimized
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              u => std_logic_vector(Delay14_out1),  -- sfix18_En16
              x => Sine,  -- sfix18_En16
              y => Cosine  -- sfix18_En16
              );

  enb <= clk_enable;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= trigger;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  switch_compare_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  factor_angle_el_AXI_signed <= signed(factor_angle_el_AXI);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay11_out1 <= factor_angle_el_AXI_signed;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay12_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  Switch3_out1 <= Delay12_out1 WHEN switch_compare_1 = '0' ELSE
      Delay11_out1;

  
  switch_compare_1_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  angle_el_signed <= signed(angle_el);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay2_out1 <= angle_el_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch2_out1 <= Delay6_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay2_out1;

  Product_mul_temp <= Switch3_out1 * Switch2_out1;
  Product_out1 <= Product_mul_temp(31 DOWNTO 14);

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay15_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  Gain_mul_temp <= to_signed(16#145F3#, 18) * Delay15_out1;
  Gain_out1 <= Gain_mul_temp(34 DOWNTO 17);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay14_out1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Cosine_signed <= signed(Cosine);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Cosine_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Cosine_1 <= Cosine_signed;
      END IF;
    END IF;
  END PROCESS reduced_process;


  
  switch_compare_1_2 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  u1_signed <= signed(u1);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay_out1 <= u1_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  u1_2 <= u1_1 WHEN switch_compare_1_2 = '0' ELSE
      Delay_out1;

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        u1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        u1_1 <= u1_2;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Divide_mul_temp <= Cosine_1 * u1_1;
  Divide_out1 <= resize(Divide_mul_temp(35 DOWNTO 11), 27);

  Sine_signed <= signed(Sine);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Sine_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Sine_1 <= Sine_signed;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  
  switch_compare_1_3 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  u2_signed <= signed(u2);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay1_out1 <= u2_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  u2_2 <= u2_1 WHEN switch_compare_1_3 = '0' ELSE
      Delay1_out1;

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        u2_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        u2_1 <= u2_2;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  Divide1_mul_temp <= Sine_1 * u2_1;
  Divide1_out1 <= resize(Divide1_mul_temp(35 DOWNTO 11), 27);

  Add_out1 <= Divide_out1 + Divide1_out1;

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Add_out1_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS reduced_4_process;


  y1 <= std_logic_vector(Add_out1_1);

  Divide3_mul_temp <= Cosine_1 * u2_1;
  Divide3_out1 <= resize(Divide3_mul_temp(35 DOWNTO 11), 27);

  Divide2_mul_temp <= Sine_1 * u1_1;
  Divide2_out1 <= resize(Divide2_mul_temp(35 DOWNTO 11), 27);

  Add1_out1 <= Divide3_out1 - Divide2_out1;

  reduced_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add1_out1_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Add1_out1_1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS reduced_5_process;


  y2 <= std_logic_vector(Add1_out1_1);

  y1_AXI <= std_logic_vector(Add_out1_1);

  y2_AXI <= std_logic_vector(Add1_out1_1);

  sin <= std_logic_vector(Sine_1);

  cos <= std_logic_vector(Cosine_1);

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= Detect_Rise_Positive_out1;
        delayMatch4_reg(1) <= delayMatch4_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Delay13_out1 <= delayMatch4_reg(1);

  ce_out <= clk_enable;

  park_done <= Delay13_out1;

END rtl;

