// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_accumulate_float_1u_36 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_values_dout,
        p_values_empty_n,
        p_values_read,
        p_accumulator_address0,
        p_accumulator_ce0,
        p_accumulator_we0,
        p_accumulator_d0,
        p_accumulator_q0,
        p_accumulator_offset_dout,
        p_accumulator_offset_empty_n,
        p_accumulator_offset_read,
        p_size_dout,
        p_size_empty_n,
        p_size_read,
        p_initZero_dout,
        p_initZero_empty_n,
        p_initZero_read
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_values_dout;
input   p_values_empty_n;
output   p_values_read;
output  [6:0] p_accumulator_address0;
output   p_accumulator_ce0;
output   p_accumulator_we0;
output  [31:0] p_accumulator_d0;
input  [31:0] p_accumulator_q0;
input  [6:0] p_accumulator_offset_dout;
input   p_accumulator_offset_empty_n;
output   p_accumulator_offset_read;
input  [31:0] p_size_dout;
input   p_size_empty_n;
output   p_size_read;
input  [0:0] p_initZero_dout;
input   p_initZero_empty_n;
output   p_initZero_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_values_read;
reg[6:0] p_accumulator_address0;
reg p_accumulator_ce0;
reg p_accumulator_we0;
reg p_accumulator_offset_read;
reg p_size_read;
reg p_initZero_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_values_blk_n;
wire    ap_CS_fsm_state3;
reg    p_accumulator_offset_blk_n;
reg    p_size_blk_n;
reg    p_initZero_blk_n;
reg   [6:0] p_accumulator_offset_read_reg_138;
reg    ap_block_state1;
reg   [31:0] l_parBlocks_reg_143;
reg   [0:0] p_initZero_read_reg_148;
wire   [31:0] add_ln397_fu_107_p2;
reg   [31:0] add_ln397_reg_156;
wire    ap_CS_fsm_state2;
reg   [6:0] p_accumulator_addr_reg_161;
wire   [0:0] icmp_ln397_fu_102_p2;
reg   [31:0] p_values_read_reg_166;
wire   [31:0] l_accumulator_fu_127_p3;
reg   [31:0] l_accumulator_reg_171;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_98_p2;
reg   [31:0] add4_i_reg_181;
wire    ap_CS_fsm_state8;
reg   [31:0] i_reg_87;
wire    ap_CS_fsm_state9;
wire   [63:0] sum_cast_i_fu_122_p1;
wire   [31:0] grp_fu_98_p1;
wire   [6:0] trunc_ln397_fu_113_p1;
wire   [6:0] sum_i_fu_117_p2;
wire    ap_CS_fsm_state10;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
end

BGD_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_accumulator_reg_171),
    .din1(grp_fu_98_p1),
    .ce(1'b1),
    .dout(grp_fu_98_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_initZero_empty_n == 1'b0) | (p_size_empty_n == 1'b0) | (p_accumulator_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_87 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_87 <= add_ln397_reg_156;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add4_i_reg_181 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln397_reg_156 <= add_ln397_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((p_values_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        l_accumulator_reg_171 <= l_accumulator_fu_127_p3;
        p_values_read_reg_166 <= p_values_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_initZero_empty_n == 1'b0) | (p_size_empty_n == 1'b0) | (p_accumulator_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_parBlocks_reg_143 <= p_size_dout;
        p_accumulator_offset_read_reg_138 <= p_accumulator_offset_dout;
        p_initZero_read_reg_148 <= p_initZero_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln397_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_accumulator_addr_reg_161 <= sum_cast_i_fu_122_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_accumulator_address0 = p_accumulator_addr_reg_161;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_accumulator_address0 = sum_cast_i_fu_122_p1;
    end else begin
        p_accumulator_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9))) begin
        p_accumulator_ce0 = 1'b1;
    end else begin
        p_accumulator_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_accumulator_offset_blk_n = p_accumulator_offset_empty_n;
    end else begin
        p_accumulator_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_initZero_empty_n == 1'b0) | (p_size_empty_n == 1'b0) | (p_accumulator_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_accumulator_offset_read = 1'b1;
    end else begin
        p_accumulator_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_accumulator_we0 = 1'b1;
    end else begin
        p_accumulator_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_initZero_blk_n = p_initZero_empty_n;
    end else begin
        p_initZero_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_initZero_empty_n == 1'b0) | (p_size_empty_n == 1'b0) | (p_accumulator_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_initZero_read = 1'b1;
    end else begin
        p_initZero_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_size_blk_n = p_size_empty_n;
    end else begin
        p_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_initZero_empty_n == 1'b0) | (p_size_empty_n == 1'b0) | (p_accumulator_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_size_read = 1'b1;
    end else begin
        p_size_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_values_blk_n = p_values_empty_n;
    end else begin
        p_values_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_values_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_values_read = 1'b1;
    end else begin
        p_values_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_initZero_empty_n == 1'b0) | (p_size_empty_n == 1'b0) | (p_accumulator_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln397_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((p_values_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln397_fu_107_p2 = (i_reg_87 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((p_initZero_empty_n == 1'b0) | (p_size_empty_n == 1'b0) | (p_accumulator_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_fu_98_p1 = p_values_read_reg_166;

assign icmp_ln397_fu_102_p2 = ((i_reg_87 == l_parBlocks_reg_143) ? 1'b1 : 1'b0);

assign l_accumulator_fu_127_p3 = ((p_initZero_read_reg_148[0:0] === 1'b1) ? 32'd0 : p_accumulator_q0);

assign p_accumulator_d0 = add4_i_reg_181;

assign sum_cast_i_fu_122_p1 = sum_i_fu_117_p2;

assign sum_i_fu_117_p2 = (p_accumulator_offset_read_reg_138 + trunc_ln397_fu_113_p1);

assign trunc_ln397_fu_113_p1 = i_reg_87[6:0];

endmodule //BGD_accumulate_float_1u_36
